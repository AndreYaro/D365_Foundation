<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountNumRenameDataMaintenance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustAccountNumRenameDataMaintenance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the value for the fields.
    /// </summary>
    public void initValue()
    {
        CustAccountNumRenameDataMaintenance CustAccountNumRenameDataMaintenance;

        select firstonly ID from CustAccountNumRenameDataMaintenance order by ID desc;

        this.ID = CustAccountNumRenameDataMaintenance.ID + 1;
        this.PrimaryLedger = Ledger::current();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustAccountNumRenameDataMaintenance</c> table.
    /// </summary>
    /// <param name = "_recId">
    /// The record ID of the <c>CustAccountNumRenameDataMaintenance</c> record to find.
    /// </param>
    /// <param name = "_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CustAccountNumRenameDataMaintenance</c> table; otherwise, an empty record.
    /// </returns>
    public static CustAccountNumRenameDataMaintenance find(
        CustAccountNumRenameDataMaintenanceRecId _recId,
        boolean _forupdate = false)
    {
        CustAccountNumRenameDataMaintenance custAccountNumRenameDataMaintenance;

        select firstonly custAccountNumRenameDataMaintenance
            where custAccountNumRenameDataMaintenance.RecId == _recId;

        if (custAccountNumRenameDataMaintenance.RecId)
        {
            custAccountNumRenameDataMaintenance.selectForUpdate(_forupdate);
        }

        return custAccountNumRenameDataMaintenance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessGroupStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the customer account rename data maintenance process status.
    /// </summary>
    /// <param name = "_custAccountNumRenameDataMaintenanceRecId">
    /// The <c>CustAccountNumRenameDataMaintenanceRecId</c> of a process group.
    /// </param>
    /// <param name = "_dataMaintenanceStatus">
    /// The <c>CustAccountNumRenameDataMaintenanceStatus</c> that will be set.
    /// </param>
    public static void setProcessGroupStatus(
        CustAccountNumRenameDataMaintenanceRecId _custAccountNumRenameDataMaintenanceRecId,
        CustAccountNumRenameDataMaintenanceStatus _dataMaintenanceStatus)
    {
        CustAccountNumRenameDataMaintenance custAccountNumRenameDataMaintenance;

        ttsbegin;

        select firstonly forupdate custAccountNumRenameDataMaintenance
            where custAccountNumRenameDataMaintenance.RecId == _custAccountNumRenameDataMaintenanceRecId;

        if (custAccountNumRenameDataMaintenance.RecId)
        {
            switch (_dataMaintenanceStatus)
            {
                case CustAccountNumRenameDataMaintenanceStatus::Executing:
                if (!custAccountNumRenameDataMaintenance.ProcessStartDateTime)
                    {
                        custAccountNumRenameDataMaintenance.ProcessStartDateTime = DateTimeUtil::getSystemDateTime();
                    }
                    break;

                case CustAccountNumRenameDataMaintenanceStatus::Completed:
                case CustAccountNumRenameDataMaintenanceStatus::PartiallyCompleted:
                    custAccountNumRenameDataMaintenance.ProcessEndDateTime = DateTimeUtil::getSystemDateTime();
                    break;
            }

            custAccountNumRenameDataMaintenance.ProcessStatus = _dataMaintenanceStatus;
            custAccountNumRenameDataMaintenance.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the fields entered are right.
    /// </summary>
    /// <returns>
    /// true if all fields are valid; otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.validateSourceAndTargetAccount();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceAndTargetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that source account and target account are not blank.
    /// </summary>
    /// <returns>
    /// true if either of source account or target account is blank; otherwise true.
    /// </returns>
    private boolean validateSourceAndTargetAccount()
    {
        boolean ret = true;

        if (this.OldAccountNum == '' || this.NewAccountNum == '')
        {
            ret = checkFailed('@CreditCollections:CustAccountsAreRequiredWarning');
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@CreditCollections:CustAccountNumRenameDataMaintenanceTableDevDoc</DeveloperDocumentation>
	<FormRef>CustAccountNumRenameDataMaintenance</FormRef>
	<Label>@CreditCollections:CustAccountNumRenameDataMaintenanceTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Customer</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description255</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ID</Name>
			<ExtendedDataType>PositiveNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CreditCollections:CustAccountNumRenameDataMaintenanceId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NewAccountNum</Name>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CreditCollections:CustAccountNumRenameDataMaintenanceNewCustomerAccount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OldAccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@CreditCollections:CustAccountNumRenameDataMaintenanceOldCustAccount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessStatus</Name>
			<Label>@CreditCollections:CustAccountNumRenameDataMaintenanceProcesStatus</Label>
			<EnumType>CustAccountNumRenameDataMaintenanceStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrimaryLedger</Name>
			<ExtendedDataType>LedgerRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ProcessStartDateTime</Name>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CreditCollections:CustAccountNumRenameDataMaintenanceProcessStartTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ProcessEndDateTime</Name>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CreditCollections:CustAccountNumRenameDataMaintenanceProcessEndTime</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RenamedDateTime</Name>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@CreditCollections:CustAccountNumRenameTriggerTime</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IDIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>Ledger</Name>
			<RelatedTable>Ledger</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrimaryLedger</Name>
					<Field>PrimaryLedger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>