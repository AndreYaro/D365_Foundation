<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCSubComponentPath</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCSubComponentPath extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PCSubComponentPath</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PCSubComponentPathRecId _recId)
    {
        return (PCSubComponentPath::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCSubComponentPath</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCSubComponentPath</c> table; otherwise, an empty record.
    /// </returns>
    public static PCSubComponentPath find(PCSubComponentPathRecId _recId, boolean _forupdate = false)
    {
        PCSubComponentPath record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the path given by a record ID as a list of <c>PCSubComponent</c> records.
    /// </summary>
    /// <param name="_subComponentPathRecId">
    /// The path record ID.
    /// </param>
    /// <returns>
    /// The path given by a record ID as a list of <c>PCSubComponent</c> records.
    /// </returns>
    public static List getPath(PCSubComponentPathRecId _subComponentPathRecId)
    {
        PCSubComponentPathNode  node;
        List                    list = new List(Types::Record);

        if (_subComponentPathRecId)
        {
            while select SubComponent from node
                order by node.SortingNumber
                where node.SubComponentPath == _subComponentPathRecId
            {
                list.addEnd(PCSubComponent::find(node.SubComponent));
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pathIsSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the path given by the <paramref name="_suffixPathRecId" /> parameter is a suffix
    /// of the <paramref name="_path" /> parameter.
    /// </summary>
    /// <param name="_path">
    /// The long path.
    /// </param>
    /// <param name="_suffixPathRecId">
    /// The suffix path.
    /// </param>
    /// <returns>
    /// true if the path is a suffix; otherwise, false.
    /// </returns>
    public static boolean pathIsSuffix(StackBase _path, PCSubComponentPathRecId _suffixPathRecId)
    {
        PCSubComponentPathNode  node;
        Common                  currentPathRecord;
        boolean                 pathIsSuffix = true;
        int                     pathIndex;

        // Empty suffix is suffix.
        if (_suffixPathRecId == 0)
        {
            return pathIsSuffix;
        }

        // Move from end of paths towards top to check for suffix equality
        pathIndex = _path.count();

        while select SubComponent from node
            order by node.SortingNumber desc
            where node.SubComponentPath == _suffixPathRecId
        {
            // Path is not long enough for suffix.
            if (pathIndex <= 0)
            {
                pathIsSuffix = false;
                break;
            }
            currentPathRecord = _path.peek(pathIndex);

            // Points to different subcomponents
            if (currentPathRecord.RecId != node.SubComponent)
            {
                pathIsSuffix = false;
                break;
            }
            pathIndex--;
        }
        return pathIsSuffix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves a list of <c>PCSubComponent</c> records as a path.
    /// </summary>
    /// <param name="_subComponents">
    /// The list of sub-components.
    /// </param>
    /// <returns>
    /// The record ID of the new path.
    /// </returns>
    public static PCSubComponentPathRecId savePath(List _subComponents)
    {
        ListEnumerator          le;
        PCSubComponentPathNode  node;
        PCSubComponent          subComponent;
        PCSubComponentPath      subComponentPath;
        int                     sortingNumber = 1;

        Debug::assert(_subComponents != null);

        if (!_subComponents.elements())
        {
            return 0;
        }

        le = _subComponents.getEnumerator();
        ttsbegin;
        subComponentPath.insert();

        while (le.moveNext())
        {
            subComponent = le.current();
            Debug::assert(subComponent.RecId != 0);
            node.clear();
            node.SubComponentPath = subComponentPath.RecId;
            node.SortingNumber = sortingNumber;
            node.SubComponent = subComponent.RecId;
            node.insert();
            sortingNumber++;
        }
        ttscommit;

        return subComponentPath.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@GLS180398</DeveloperDocumentation>
	<Label>@GLS180397</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RecId</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields />
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>