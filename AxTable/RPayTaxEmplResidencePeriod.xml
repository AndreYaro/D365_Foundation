<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxEmplResidencePeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayTaxEmplResidencePeriod extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>residenceEndDate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EndDate residenceEndDate()
    {
        return this.ResidenceEndDate ? this.ResidenceEndDate : maxDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean                     ret;
        RPayTaxEmplResidencePeriod  rPayTaxEmplResidencePeriod;

        ret = super();

        if (ret)
        {
            if (this.ResidenceStartDate &&
                this.ResidenceEndDate   &&
                this.ResidenceStartDate > this.ResidenceEndDate)
            {
                ret = checkFailed("@RUP2338");
            }

            if (! this.ResidenceEndDate)
            {
                select firstonly RecId from rPayTaxEmplResidencePeriod
                    where rPayTaxEmplResidencePeriod.PersonnelNumber == this.PersonnelNumber &&
                          ! rPayTaxEmplResidencePeriod.ResidenceEndDate                      &&
                          rPayTaxEmplResidencePeriod.RecId  != this.RecId;

                if (rPayTaxEmplResidencePeriod)
                {
                    ret = checkFailed("@RUP2673");
                }

                select firstonly RecId from rPayTaxEmplResidencePeriod
                    where rPayTaxEmplResidencePeriod.PersonnelNumber    == this.PersonnelNumber &&
                          rPayTaxEmplResidencePeriod.RecId              != this.RecId           &&
                          rPayTaxEmplResidencePeriod.ResidenceStartDate > this.ResidenceStartDate;

                if (rPayTaxEmplResidencePeriod)
                {
                    ret = checkFailed("@RUP2674");
                }
            }

            while select ResidenceEndDate from rPayTaxEmplResidencePeriod
                where rPayTaxEmplResidencePeriod.PersonnelNumber    == this.PersonnelNumber    &&
                      rPayTaxEmplResidencePeriod.ResidenceStartDate <= this.residenceEndDate() &&
                      rPayTaxEmplResidencePeriod.RecId              != this.RecId
            {
                if (rPayTaxEmplResidencePeriod.residenceEndDate() >= this.ResidenceStartDate)
                {
                    ret = checkFailed("@RUP2675");
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static public RPayTaxEmplResidencePeriod find(RHRMPersonnelNumberId _personId, StartDate _startDate, boolean _forUpdate = false)
    {
        RPayTaxEmplResidencePeriod payTaxEmplResidencePeriod;

        payTaxEmplResidencePeriod.selectForUpdate(_forUpdate);

        select firstonly payTaxEmplResidencePeriod
            where payTaxEmplResidencePeriod.PersonnelNumber    == _personId &&
                  payTaxEmplResidencePeriod.ResidenceStartDate == _startDate;

        return payTaxEmplResidencePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>residenseDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static Days residenseDays(RHRMPersonnelNumberId personId, StartDate _residenceStartDate, EndDate _residenceEndDate)
    {
        Days residenceDays;
        RPayTaxEmplResidencePeriod  rPayTaxEmplResidencePeriod;

        while select rPayTaxEmplResidencePeriod
            where rPayTaxEmplResidencePeriod.PersonnelNumber    == personId            &&
                  rPayTaxEmplResidencePeriod.ResidenceStartDate <= _residenceEndDate   &&
                  (rPayTaxEmplResidencePeriod.ResidenceEndDate  >= _residenceStartDate ||
                   ! rPayTaxEmplResidencePeriod.ResidenceEndDate)
        {
            residenceDays += min(rPayTaxEmplResidencePeriod.residenceEndDate(), _residenceEndDate) -
                             max(rPayTaxEmplResidencePeriod.ResidenceStartDate, _residenceStartDate) + 1;
        }

        return residenceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNonResidentRate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean updateNonResidentRate(RHRMPersonnelNumberId _personId, ReportPeriod_RU _payPeriod)
    {
        RPayTaxParameters           rPayTaxParameters = RPayTaxParameters::find();
        RPayTaxEmplResidencePeriod  rPayTaxEmplResidencePeriod;

        RPayRateTable               rPayRateTableNonResident;
        RPayRateTrans               rPayRateTrans;

        NoYes                       isNonResident;
        Integer                     nonResidentDays;
        Integer                     nonResidentMonths;

        StartDate                   residenceStartDate;
        EndDate                     residenceEndDate;

        Integer                     residenceDays;
        NoYes                       isNonResidentNew;
        RHRMPayMainEmplId           mainEmplId;
        RPayRateTypeAC              personEmplTypeAC;
        boolean                     nonResidentStatusChanged;

        RPayRateCallContext         rateContext;

        if (! rPayTaxParameters.NonResidentRateCode ||
            ! rPayTaxParameters.NonResidentDaysRate ||
            ! rPayTaxParameters.NonResidentMonthsRate)
        {
            return nonResidentStatusChanged;
        }

        rPayRateTableNonResident = RPayRateTable::find(rPayTaxParameters.NonResidentRateCode);

        mainEmplId  = RHRMPersonTable::find(_personId).PayMainEmplId;
        rateContext = new RPayRateCallContext();
        rateContext.parmRateDate(_payPeriod);
        rateContext.parmPersonId(_personId);
        rateContext.parmEmployeeId(mainEmplId);

        isNonResident            = rPayRateTableNonResident.getValue(rateContext) ? true : false;
        nonResidentDays          = any2int(RPayRateTable::find(rPayTaxParameters.NonResidentDaysRate).getValue(rateContext));
        nonResidentMonths        = any2int(RPayRateTable::find(rPayTaxParameters.NonResidentMonthsRate).getValue(rateContext));

        residenceEndDate         = _payPeriod;
        residenceStartDate       = endmth(dateMthFwd(_payPeriod, - nonResidentMonths)) + 1;

        select firstonly rPayTaxEmplResidencePeriod
            where rPayTaxEmplResidencePeriod.PersonnelNumber    == _personId          &&
                  rPayTaxEmplResidencePeriod.ResidenceStartDate <= residenceEndDate   &&
                  (rPayTaxEmplResidencePeriod.ResidenceEndDate  >= residenceStartDate ||
                   ! rPayTaxEmplResidencePeriod.ResidenceEndDate);

        if (! rPayTaxEmplResidencePeriod)
        {
            return nonResidentStatusChanged;
        }

        residenceDays    = RPayTaxEmplResidencePeriod::residenseDays(_personId, residenceStartDate, residenceEndDate);
        isNonResidentNew = (residenceDays < nonResidentDays);

        if (isNonResident != isNonResidentNew)
        {
            if (RPayRateTable::find(rPayRateTableNonResident.PayRate).LineType == RPayRateType::Person)
            {
                personEmplTypeAC = _personId;
            }
            else
            {
                personEmplTypeAC = mainEmplId;
            }

            ttsbegin;

            rPayRateTrans = RPayRateTrans::findRateTrans(rPayRateTableNonResident.PayRate, _payPeriod, personEmplTypeAC, true);

            if (rPayRateTrans)
            {
                rPayRateTrans.rateValueEnum(true, isNonResidentNew);
                rPayRateTrans.update();
            }
            else
            {
                rPayRateTrans.RateDate      = _payPeriod;
                rPayRateTrans.LineType      = rPayRateTableNonResident.LineType;
                rPayRateTrans.PayRate       = rPayRateTableNonResident.PayRate;
                rPayRateTrans.RateTypeAC    = personEmplTypeAC;
                rPayRateTrans.rateValueEnum(true, isNonResidentNew);
                rPayRateTrans.insert();
            }

            ttscommit;

            nonResidentStatusChanged = true;

            info(strFmt("@RUP2676", rPayTaxParameters.NonResidentRateCode, mainEmplId));
        }

        return nonResidentStatusChanged;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RPayTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RUP6156</DeveloperDocumentation>
	<FormRef>RPayTaxEmplResidencePeriod</FormRef>
	<Label>@RUP2669</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PersonnelNumber</TitleField1>
	<TitleField2>ResidenceStartDate</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>EmplStartDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>EmplStartDateIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PersonnelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResidenceStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResidenceEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Person</Name>
			<Label>@SYS4705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PersonnelNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResidencePeriod</Name>
			<Label>@RUP2672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResidenceStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResidenceEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PersonnelNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RHRMPersonnelNumberId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ResidenceEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ResidenceStartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplStartDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PersonnelNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResidenceStartDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RHRMPersonTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RHRMPersonTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PersonnelNumber</Name>
					<Field>PersonnelNumber</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PersonnelNumberIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>