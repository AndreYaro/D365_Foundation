<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventNumGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventNumGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDate</Name>
				<Source><![CDATA[
    str 20 buildDate(date tmpDate)
    {
        str 20  tmpDate_1   = date2str(tmpDate,321,2,3,2,3,2, DateFlags::None);
        Integer separator   = strFind(tmpDate_1,'-',999,-999);

        while (separator)
        {
            tmpDate_1   = strDel(tmpDate_1,separator,1);
            separator   = strFind(tmpDate_1,'-',999,-999);
        }
        return tmpDate_1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNumber</Name>
				<Source><![CDATA[
    str buildNumber(
        InventMovement movement,
        ExtendedTypeId receiptDataType)
    {
        return this.buildNumberParameters(movement.transDate(),movement.transRefId(),movement.transId(),receiptDataType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNumberParameters</Name>
				<Source><![CDATA[
    str buildNumberParameters(
        TransDate           _transDate,
        InventTransRefId    _transRefId,
        InventTransId       _inventTransId,
        ExtendedTypeId      _receiptDataType)
    {
        str                 number;
        RefRecId            numberSequenceTable;
        DictType            receiptDictType = new DictType(_receiptDataType);
        str 255             tmpError;

        number = this.initNumber(_transDate, _transRefId, _inventTransId);

        if (this.InclNumber)
        {
            numberSequenceTable = this.NumberSequenceTable;

            if (!numberSequenceTable)
            {
                numberSequenceTable = InventNumGroup::standardNumberSequenceTable().RecId;
            }

            this.checkNumberSequenceTable(numberSequenceTable);

            number = number + (number ? this.inventBatchIdDelimiter() : '') + NumberSeq::newGetNumFromId(numberSequenceTable).num();
        }
        if (receiptDictType.stringLen() < strLen(number))
        {
            tmpError = this.createErrorText();

            info(strFmt("@SYS67205",receiptDictType.label()));
            info(strFmt("@SYS67206",receiptDictType.label(),this.NumGroupId));
            info(strFmt("@SYS67207",tmpError));
            info(strFmt("@SYS67208",number,int2str(strLen(number))));
            info(strFmt("@SYS67209",receiptDictType.label(),int2str(receiptDictType.stringLen())));
            throw error("@SYS25904");
        }
        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSequenceTable</Name>
				<Source><![CDATA[
    protected void checkNumberSequenceTable(RefRecId _numberSequenceTable)
    {
        if (!NumberSequenceTable::exist(_numberSequenceTable))
        {
            throw error(strFmt("@SYS27365",this.NumGroupId));
        }

        if (NumberSequenceTable::find(_numberSequenceTable).Manual)
        {
            throw error(strFmt("@SYS26209", NumberSequenceTable::find(_numberSequenceTable).NumberSequence));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumber</Name>
				<Source><![CDATA[
    protected str initNumber(
        TransDate _transDate,
        InventTransRefId _transRefId,
        InventTransId _inventTransId)
    {
        Str number;

        if (this.InclExpectedDate)
        {
            number = this.buildDate(_transDate);
        }

        if (this.InclReferenceId)
        {
            number = number + (number ? this.inventBatchIdDelimiter() : '') + _transRefId;
        }

        if (this.InclInventTransId)
        {
            number = number + (number ? this.inventBatchIdDelimiter() : '') + _inventTransId;
        }

        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchIdDelimiter</Name>
				<Source><![CDATA[
    protected str inventBatchIdDelimiter()
    {
        return '-';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorText</Name>
				<Source><![CDATA[
    protected str 255 createErrorText()
    {
        str 255 tmpError;

        tmpError += (this.InclExpectedDate ? ((tmpError ? ', ' : '') +
            (this.InclExpectedDate ? new DictField(this.TableId,fieldNum(InventNumGroup,InclExpectedDate)).label() :'')) : '');

        tmpError += (this.InclReferenceId ? ((tmpError ? ', ' : '') +
            (this.InclReferenceId ? new DictField(this.TableId,fieldNum(InventNumGroup,InclReferenceId)).label() :'')) : '');

        tmpError += (this.InclInventTransId ? ((tmpError ? ', ' : '') +
            (this.InclInventTransId ? new DictField(this.TableId,fieldNum(InventNumGroup,InclInventTransId)).label() :'')) : '');

        tmpError += (this.InclNumber ? ((tmpError ? ', ' : '') +
            (this.InclNumber ? new DictField(this.TableId,fieldNum(InventNumGroup,InclNumber)).label() :'')) : '');

        return tmpError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    void initValue()
    {
        this.NumberSequenceTable = InventNumGroup::standardNumberSequenceTable().RecId;

        this.PurchActivation   = true;
        this.InventActivation  = true;
        this.ProdActivation    = true;
        this.KanbanActivation  = true;

        this.InclExpectedDate  = true;
        this.InclInventTransId = true;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransTypeActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the number group is activated for the specified <c>InventTransType</c>
    ///    enumeration value.
    /// </summary>
    /// <param name="transType">
    ///    The <c>InventTransType</c> enumeration value to check.
    /// </param>
    /// <returns>
    ///    true if the number group is activated; otherwise, false.
    /// </returns>
    boolean isTransTypeActivated(InventTransType transType)
    {
        switch (transType)
        {
            case InventTransType::Sales                         : return this.SalesActivation;
            case InventTransType::Production                    : return this.ProdActivation;
            case InventTransType::Purch                         : return this.PurchActivation;
            case InventTransType::InventTransaction             : return this.InventActivation;
            case InventTransType::InventCounting                : return this.InventActivation;
            case InventTransType::InventLossProfit              : return this.InventActivation;
            case InventTransType::InventTransfer                : return false;
            case InventTransType::SummedUp                      : return false;
            case InventTransType::ProdLine                      : return this.ProdActivation;
            case InventTransType::BOMLine                       : return false;
            case InventTransType::BOMMain                       : return this.InventActivation;
            case InventTransType::QuarantineOrder               : return false;
            case InventTransType::TransferOrderShip             : return false;
            case InventTransType::TransferOrderReceive          : return false;
            case InventTransType::KanbanJobProcess              : return this.KanbanActivation;
            case InventTransType::KanbanJobWIP                  : return this.KanbanActivation;
            case InventTransType::KanbanJobPickingList          : return this.KanbanActivation;
            case InventTransType::KanbanEmptied                 : return this.KanbanActivation;
            case InventTransType::KanbanJobTransferIssue        : return false;
            case InventTransType::KanbanJobTransferReceipt      : return false;
            case InventTransType::WHSWork                       : return false;
            case InventTransType::WHSQuarantine                 : return false;
            case InventTransType::WHSContainer                  : return false;
            case InventTransType::PmfProdCoBy                   : return this.ProdActivation;
            case InventTransType::ConsignmentReplenishmentOrder : return this.PurchActivation;
            case InventTransType::InventOwnershipChange         : return false;
            case InventTransType::InventTransArchive            : return false;
            case InventTransType::WHSInventTransArchiveOnlyAffectsLocationAndBelow : return false;

            default                                             : return this.InventActivation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this number group is used by any catch weight item.
    /// </summary>
    /// <returns>
    /// True if used by a catch weight item
    /// </returns>
    public boolean isUsedByCWItem()
    {
        InventTable         inventTable;
        PdsCatchWeightItem  pdsCatchWeightItem;

        select firstOnly RecId from inventTable
            where inventTable.BatchNumGroupId       == this.NumGroupId
                  || inventTable.SerialNumGroupId   == this.NumGroupId
            exists join pdsCatchWeightItem
                where pdsCatchWeightItem.ItemId     == inventTable.ItemId;

        return inventTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        if (! this.InclNumber)
        {
            this.NumberSequenceTable = 0;
        }

        if (! this.OnlyInventTransaction)
        {
            this.PerQty             = 0;
            this.PhysicalUpdate     = false;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (!this.validateParameters())
        {
            return checkFailed("@SYS62898");
        }

        // PerQty cannot be set if number group is used by a catch weight item
        if (this.PerQty != 0 && this.isUsedByCWItem())
        {
            return checkFailed("@SYS130031");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    public boolean validateParameters()
    {
        return this.InclInventTransId || this.InclNumber || this.InclReferenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(InventNumGroupId inventNumGroupId)
    {
        if (inventNumGroupId && !InventNumGroup::exist(inventNumGroupId))
        {
            return checkFailed(strFmt(InventNumGroup::txtNotExist(),inventNumGroupId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventNumGroupId inventNumGroupId)
    {
        return inventNumGroupId && (select firstonly inventNumGroup
                    where inventNumGroup.NumGroupId== inventNumGroupId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static InventNumGroup find(InventNumGroupId inventNumGroupId, boolean _forUpdate = false)
    {
        InventNumGroup inventNumGroup;

        inventNumGroup.selectForUpdate(_forUpdate);

        if (inventNumGroupId)
        {
            select firstonly inventNumGroup
                where inventNumGroup.NumGroupId == inventNumGroupId;
        }

        return inventNumGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardNumberSequenceTable</Name>
				<Source><![CDATA[
    static NumberSequenceTable standardNumberSequenceTable()
    {
        return NumberSequenceTable::find(InventParameters::numRefInventBatchSerialId().NumberSequenceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS14690";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();
    
        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where (retailAttributesLegalEntityLookup.BatchNumGroupId == this.NumGroupId
                || retailAttributesLegalEntityLookup.SerialNumGroupId == this.NumGroupId)
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.NumGroupId, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123834</DeveloperDocumentation>
	<FormRef>InventNumGroup</FormRef>
	<Label>@SYS1073</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>NumGroupId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>NumGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>NumGroupIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanbanActivation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activation</Name>
			<Label>@SYS11887</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanbanActivation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Allocation</Name>
			<Label>@SYS54019</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ManualAllocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnlyInventTransaction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PerQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Structure</Name>
			<Label>@SYS3981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InclExpectedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclReferenceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclExpectedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS7402</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclInventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23057</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54022</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclReferenceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54020</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventActivation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<GroupPrompt>@Sys981</GroupPrompt>
			<Label>@Sys21773</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KanbanActivation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanActivation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23968</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNumGroupNumberSeq</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNumGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnlyInventTransaction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54017</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PerQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventNumGroupPerQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PhysicalUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54018</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdActivation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Prod</ConfigurationKey>
			<Label>@SYS21774</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchActivation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<GroupPrompt>@Sys15812</GroupPrompt>
			<Label>@SYS21772</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesActivation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<GroupPrompt>@Sys9694</GroupPrompt>
			<Label>@Sys21771</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>NumGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventNumGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>