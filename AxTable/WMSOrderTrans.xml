<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSOrderTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSOrderTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate()
    {
        this.wmsOrderTransType().activate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransReservations</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates current record and creates additional records according to the related inventory reservations.
    /// </summary>
    /// <param name="_toLocation">
    ///     Target WMS location.
    /// </param>
    public void addInventTransReservations(WMSLocation _toLocation = null)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        WMSOrderTrans       transCopy;
        InventQty           availQty;
        InventQty           remainingQty = this.Qty;
        InventDim           inventDimTo;
        InventDim           inventDimLocal;
        WMSLocation         toLocationLocal;
        WMSPickingLineQty   orderTransQty;
        PdsCWInventQty      pdsCWOrderTransQty;
        boolean         isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        PdsCWInventQty  availCWQty;
        PdsCWInventQty  remainingCWQty;

        if (isCWItem)
        {
            // quantity might have been already updated
            this.selectForUpdate(true);
            this.reread();
            remainingQty    = this.Qty;
            remainingCWQty  = this.PdsCWQty;
        }

        while select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId   == this.InventTransId
            join sum(Qty), sum(PdsCWQty), InventDimId, InventDimFixed from inventTrans
                group by InventDimId, InventDimFixed
                where inventTrans.TransChildType    == InventTransChildType::WMSOrder
                   && inventTrans.TransChildRefId   == this.OrderId
                   && inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && (inventTrans.StatusIssue      == StatusIssue::ReservPhysical
                   ||  inventTrans.StatusIssue      == StatusIssue::ReservOrdered)
        {
            [orderTransQty, pdsCWOrderTransQty]= this.retrieveInProcessQuantitiesForOrder(inventTrans);
            availQty = -inventTrans.Qty - orderTransQty;
            availCWQty = -inventTrans.PdsCWQty - pdsCWOrderTransQty;

            if ((isCWItem && availCWQty) || (!isCWItem && availQty))
            {
                if ((isCWItem && (remainingCWQty > availCWQty)) || (!isCWItem && (remainingQty > availQty)))
                {
                    transCopy.data(this);
                    transCopy.Qty               = availQty;
                    transCopy.PdsCWQty          =  availCWQty;
                    transCopy.InventDimId       = inventTrans.InventDimId;
                    transCopy.InventDimFixed    = inventTrans.InventDimFixed;
                    if (_toLocation.wmsLocationId)
                    {
                        inventDimTo = InventDim::find(inventTrans.InventDimId);
                        if (!transCopy.FullPallet)
                        {
                            inventDimTo.wmsPalletId     = '';
                        }
                        inventDimTo.InventLocationId    = _toLocation.InventLocationId;
                        inventDimTo.initFromInventLocation(inventDimTo.inventLocation());
                        inventDimTo.wmsLocationId       = _toLocation.wmsLocationId;
                        inventDimTo = InventDim::findOrCreate(inventDimTo);
                        transCopy.ToInventDimId         = inventDimTo.InventDimId;
                    }
                    transCopy.doInsert();
                    transCopy.changeReserveStatus(NoYes::Yes);
                    this.Qty -= availQty;
                    remainingQty -= availQty;
                    this.PdsCWQty  -= availCWQty;
                    remainingCWQty -= availCWQty;
                }
                else
                {
                    this.InventDimId        = inventTrans.InventDimId;
                    this.InventDimFixed     = inventTrans.InventDimFixed;
                    if (!_toLocation.wMSLocationId)
                    {
                        inventDimLocal  = InventDim::find(this.ToInventDimId);
                        toLocationLocal = WMSLocation::find(inventDimLocal.wMSLocationId, inventDimLocal.InventLocationId);
                    }
                    else
                    {
                        toLocationLocal = _toLocation;
                    }
                    if (toLocationLocal.wmsLocationId)
                    {
                        inventDimTo = InventDim::find(inventTrans.InventDimId);
                        if (!this.FullPallet)
                        {
                            inventDimTo.wmsPalletId     = '';
                        }
                        inventDimTo.InventLocationId    = toLocationLocal.InventLocationId;
                        inventDimTo.initFromInventLocation(inventDimTo.inventLocation());
                        inventDimTo.wmsLocationId       = toLocationLocal.wmsLocationId;
                        inventDimTo = InventDim::findOrCreate(inventDimTo);
                        this.ToInventDimId              = inventDimTo.InventDimId;
                    }

                    if (isCWItem)
                    {
                        if (remainingCWQty == availCWQty)
                        {
                            this.Qty = availQty;
                        }
                        else
                        {
                            this.Qty = PdsCatchWeight::minInventQty(this.ItemId, this.PdsCWQty);
                        }
                    }

                    this.changeReserveStatus(NoYes::Yes);

                    remainingQty    -= this.Qty;
                    remainingCWQty  -= this.PdsCWQty;
                }
            }

            if (isCWItem)
            {
                if (!remainingCWQty)
                {
                    break;
                }
            }
            else
            if (!remainingQty)
            {
                break;
            }
        }

        if (isCWItem)
        {
            if (remainingCWQty)
            {
                throw(error("@SYS8691"));
            }
        }
        else
        if (remainingQty)
        {
            throw(error("@SYS8691"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInProcessQuantitiesForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an aggregated sum of the quantities in process for the given inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">An inventory transaction record.</param>
    /// <returns>A container with the aggregated quantity and the Pds catchweight quantity.</returns>
    protected container retrieveInProcessQuantitiesForOrder (InventTrans _inventTrans)
    {
        WMSOrderTrans orderTrans;
        select sum(Qty), sum(PdsCWQty) from orderTrans
            where orderTrans.OrderId            == this.OrderId
                && orderTrans.InventDimId       == _inventTrans.InventDimId
                && orderTrans.InventDimFixed    == _inventTrans.InventDimFixed
                && (orderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered
                || orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated
                || orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started)
                && orderTrans.IsReserved        == NoYes::Yes;
        return [orderTrans.Qty, orderTrans.PdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterPickQty</Name>
				<Source><![CDATA[
    public container afterPickQty(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        WMSOrderTrans   sumLine;
        InventQty       onHand;
        InventDim       inventDim;
        InventOnHandQty inventOnHandQty;
        InventQty       pdsCWOnHand;

        select sum(Qty), sum(PdsCWQty)
            from sumLine
            where sumLine.RouteId               == this.RouteId
                && sumLine.ItemId               == this.ItemId
                && (sumLine.ExpeditionStatus    == WMSExpeditionStatus::Registered
                    || sumLine.ExpeditionStatus == WMSExpeditionStatus::Activated
                    || sumLine.ExpeditionStatus == WMSExpeditionStatus::Started)
                && sumLine.FullPallet           == NoYes::No
            #InventDimExistsJoin(sumLine.inventDimId, inventDim, _inventDimCriteria, _inventDimParm);

        inventOnHandQty = InventOnHandQty::newParameters(this.ItemId, _inventDimCriteria, _inventDimParm);

        //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
        inventOnHandQty.parmDelayAvailabilityCalculation(true);

        onHand      = inventOnHandQty.physicalInvent();
        pdsCWOnHand = inventOnHandQty.pdsCWPhysicalInvent();

        return [onHand - sumLine.Qty, pdsCWOnHand - sumLine.PdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record can be canceled.
    /// </summary>
    /// <returns>
    /// true if the current record can be canceled; otherwise, false.
    /// </returns>
    public NoYes canBeCancelled()
    {
        return (this.RecId &&
                this.ExpeditionStatus != WMSExpeditionStatus::Cancelled &&
               !this.isPhysicalUpdated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeEdited</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current record can be edited.
    /// </summary>
    /// <returns>
    ///    <c>true</c> if the current record can be edited; otherwise, <c>false</c>.
    /// </returns>
    public boolean canBeEdited()
    {
        return (!this.isPhysicalUpdated() && this.ExpeditionStatus != WMSExpeditionStatus::Cancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record can be loaded.
    /// </summary>
    /// <returns>
    /// true if the specified record can be loaded; otherwise, false.
    /// </returns>
    public boolean canBeLoaded()
    {
        return (this.ExpeditionStatus == WMSExpeditionStatus::Staged);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeUnloaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record can be unloaded.
    /// </summary>
    /// <returns>
    /// true if the specified record can be unloaded; otherwise, false.
    /// </returns>
    public boolean canBeUnloaded()
    {
        return (this.ExpeditionStatus == WMSExpeditionStatus::Loaded);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeUnpicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this <c>WMSOrderTrans</c> record can be unpicked.
    /// </summary>
    /// <returns>
    /// true if this <c>WMSOrderTrans</c> record can be unpicked; otherwise, false.
    /// </returns>
    public NoYes canBeUnpicked()
    {
        return this.wmsOrderTransType().canBeUnpicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    public void cancel(boolean _checkRoute = true)
    {
        this.wmsOrderTransType().cancel(_checkRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDoShipmentUnReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Boolean value that determines whether a shipment un-reservation can be done for this
    /// record.
    /// </summary>
    /// <returns>
    /// A Boolean value that determines whether a shipment un-reservation can be done for this record.
    /// </returns>
    public boolean canDoShipmentUnReservation()
    {
        if (this.RouteId && !this.isPhysicalUpdated() && this.ExpeditionStatus != WMSExpeditionStatus::Cancelled && this.wmsOrderTransType().allowShipmentUnReservationForLine())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeReserveStatus</Name>
				<Source><![CDATA[
    public void changeReserveStatus(NoYes _isReserved)
    {
        this.IsReserved = _isReserved;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatus</Name>
				<Source><![CDATA[
    public void changeStatus(WMSExpeditionStatus _newStatus)
    {
        WMSOrderTrans           dbCommitedWMSOrderTrans;
        WMSOrder                wmsOrder  = this.wmsOrder(true);
        WMSExpeditionStatus     oldStatus = this.ExpeditionStatus;
        boolean                 changeWMSOrderStatus;

        boolean isCWItem  = PdsGlobal::pdsIsCWItem(wmsOrder.ItemId);

        if (isCWItem && this.RecId)
        {
            // quantities may have been adjusted
            select firstonly RecVersion from dbCommitedWMSOrderTrans
                where dbCommitedWMSOrderTrans.RecId == this.RecId;
            if (    dbCommitedWMSOrderTrans.RecVersion
                && (dbCommitedWMSOrderTrans.RecVersion != this.RecVersion))
            {
                this.selectForUpdate(true);
                this.reread();
            }
        }

        this.ExpeditionStatus = _newStatus;

        if (wmsOrder)
        {
            switch (this.ExpeditionStatus)
            {
                case WMSExpeditionStatus::Cancelled:
                    if (this.OrderType != WMSOrderType::Transport)
                    {
                        wmsOrder.Qty        -= this.Qty;
                        wmsOrder.PdsCWQty   -= this.PdsCWQty;

                        changeWMSOrderStatus = true;
                    }
                    break;
                case WMSExpeditionStatus::Picked:
                    break;
            }

            switch (oldStatus)
            {
                case WMSExpeditionStatus::Registered,
                     WMSExpeditionStatus::Activated,
                     WMSExpeditionStatus::Started:
                    if (this.isPhysicalUpdated()) // checking if new status is physical updated
                    {
                        changeWMSOrderStatus = true;
                    }
                    break;
                case WMSExpeditionStatus::Picked,
                     WMSExpeditionStatus::Staged,
                     WMSExpeditionStatus::Loaded,
                     WMSExpeditionStatus::Complete:
                    if (!this.isPhysicalUpdated()) // checking if new status is physical updated
                    {
                        changeWMSOrderStatus = true;
                    }
                    break;
            }
        }
        this.update();

        if (changeWMSOrderStatus)
        {
            wmsOrder.setStatus(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeToLocation</Name>
				<Source><![CDATA[
    public void changeToLocation(
        WMSLocation     _newToLocation,
        boolean         _updateTrans = true)
    {
        ttsbegin;
        this.wmsOrderTransType().changeToLocation(_newToLocation, _updateTrans);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinishPickingLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if picking can be performed. Also updates and reserves the picking line with specified dimensions
    /// </summary>
    /// <param name="_inventDimPicked">
    ///    The dimensions for which picking is to be performed
    /// </param>
    /// <param name="_pickedQty">
    ///    The quantity to be picked.
    /// </param>
    /// <param name="_cwPickedQty">
    ///    The catch weight quantity to be picked.
    /// </param>
    /// <param name="_lockActiveDimensions">
    ///    True if the picking line must be locked on the specified dimensions; otherwise, false. Optional.
    /// </param>

    public void checkFinishPickingLine(
        InventDim       _inventDimPicked,
        InventQty       _pickedQty,
        PdsCWInventQty  _cwPickedQty,
        boolean         _lockActiveDimensions = false
        )
    {
        ttsbegin;
        this.wmsOrderTransType().checkFinishPickingLine(_inventDimPicked, _pickedQty, _cwPickedQty, _lockActiveDimensions);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFix</Name>
				<Source><![CDATA[
    public void checkFix(SysConsistencyCheck _sysConsistencyCheck)
    {
        this.wmsOrderTransType().checkFix(_sysConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingLine</Name>
				<Source><![CDATA[
    public void createPickingLine(
        WMSShipment _wmsShipment,
        WMSLocation _pickingLocation)
    {
        #TimeConstants
        WMSPickingRoute     wmsPickingRoute;
        InventTable         inventTable     = this.inventTable();
        InventQty           pickQty         = this.Qty;
        PdsCWInventQty      pickCWQty       = this.PdsCWQty;
        real                pickVolume;
        InventLocation      inventLocation;
        TimeOfDay           driveTime;
        TimeOfDay           pickTime;

        if (PdsGlobal::pdsIsCWItem(inventTable.ItemId))
        {
            pickVolume      = pickCWQty * inventTable.grossVolume();
            inventLocation  = InventLocation::find(_wmsShipment.InventLocationId);
            driveTime       = inventLocation.PickingLineTime;
            pickTime        = min(inventTable.wmsPickingQtyTime * pickCWQty, #secondsPerDay);
        }
        else
        {
            pickVolume      = pickQty * inventTable.grossVolume();
            inventLocation  = InventLocation::find(_wmsShipment.InventLocationId);
            driveTime       = inventLocation.PickingLineTime;
            pickTime        = min(inventTable.wmsPickingQtyTime * pickQty, #secondsPerDay);
        }
        if (_wmsShipment.canFindOrCreatePickingRoute(this.ItemId, _pickingLocation.InventLocationId ? _pickingLocation.InventLocationId : this.inventDim().InventLocationId))
        {
            wmsPickingRoute     = _wmsShipment.findOrCreatePickingRoute(this,
                                        _pickingLocation.PickingAreaId, pickVolume, driveTime + pickTime);

            wmsPickingRoute.makePickingLine(this, _pickingLocation, driveTime, pickTime);

            if (wmsPickingRoute.ExpeditionStatus == WMSExpeditionStatus::Activated &&
                this.ExpeditionStatus            == WMSExpeditionStatus::Registered)
            {
                this.activate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(
        boolean     _removeFromOrder    = false,
        WMSOrder    _wmsOrder           = null,
        boolean     _updateRoute        = true,
        boolean     _updateShipment     = true)
    {
        if (!prmIsDefault(_wmsOrder) && _wmsOrder)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        this.wmsOrderTransType().deleting();

        this.releaseInventoryTransactions();

        super();

        this.deletedStandard(_removeFromOrder, _updateRoute, _updateShipment);

        this.wmsOrderTransType().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAndReduceOrderQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete this line and reduce the overall order quantity.
    /// </summary>
    public void deleteAndReduceOrderQuantity()
    {
        this.delete(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletedStandard</Name>
				<Source><![CDATA[
    protected void deletedStandard(
        boolean     _removeFromOrder,
        boolean     _updateRoute,
        boolean     _updateShipment)
    {
        switch (this.ExpeditionStatus)
        {
            case WMSExpeditionStatus::Registered:  // Fall through
            case WMSExpeditionStatus::Activated:   // Fall through
            case WMSExpeditionStatus::Started:     // Fall through
            case WMSExpeditionStatus::Picked:      // Fall through
            case WMSExpeditionStatus::Staged:      // Fall through
            case WMSExpeditionStatus::Loaded:      // Fall through
            case WMSExpeditionStatus::Complete:
                this.wmsOrderTransType().deletedStandard(_removeFromOrder, _updateRoute, _updateShipment);
                break;
            case WMSExpeditionStatus::Cancelled:
                break;
            default:
                this.defaultHandlingStatusInWarehouse();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultHandlingStatusInWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handling status in the warehouse system.
    /// </summary>
    [Replaceable]
    protected void defaultHandlingStatusInWarehouse()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the location where the picked items are to be delivered.
    /// </summary>
    /// <returns>
    /// The location where the picked items are to be delivered.
    /// </returns>
    public WMSLocation findToLocation()
    {
        return this.wmsOrderTransType().findToLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishPickingLine</Name>
				<Source><![CDATA[
    public void finishPickingLine(
        WMSPickPalletId     _wmsPickPalletId,
        InventDim           _inventDimPicked,
        HcmWorkerRecId      _worker = DirPersonUserEx::findUserWorkerReference(),
        WMSExpeditionTime   _time = 0,
        boolean             _startRoute = true,
        boolean             _checkRoute = true)
    {
        ttsbegin;
        this.wmsOrderTransType().finishPickingLine(_wmsPickPalletId, _inventDimPicked, _worker, _time,_startRoute,_checkRoute);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSOrder</Name>
				<Source><![CDATA[
    public void initFromWMSOrder(WMSOrder _wmsOrder)
    {
        this.OrderId                    = _wmsOrder.OrderId;
        this.InventTransId              = _wmsOrder.InventTransId;
        this.ItemId                     = _wmsOrder.ItemId;
        this.DlvDate                    = _wmsOrder.DlvDate;
        this.OrderType                  = _wmsOrder.Type;
        this.InventDimId                = _wmsOrder.InventDimId;
        this.ToInventDimId              = _wmsOrder.ToInventDimId;
        this.PostTransfer               = _wmsOrder.PostTransfer;
        this.InventTransType            = _wmsOrder.InventTransType;
        this.InventTransRefId           = _wmsOrder.InventTransRefId;
        this.Customer                   = _wmsOrder.Customer;
        this.DeliveryPostalAddress      = _wmsOrder.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>WMSOrderTrans</c> buffer from the <c>WMSShipment</c> buffer.
    /// </summary>
    /// <param name="_wmsShipment">
    /// The <c>WMSShipment</c> buffer that the <c>WMSOrderTrans</c> buffer should be initialized from.
    /// </param>
    public void initFromWMSShipment(WMSShipment _wmsShipment)
    {
        this.ShipmentId         = _wmsShipment.ShipmentId;
        this.ShipmentIdOriginal = _wmsShipment.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimPick</Name>
				<Source><![CDATA[
    public void initInventDimPick(
        InventDim       _inventDim,
        InventDimParm   _inventDimParmFixed,
        InventDimParm   _inventDimParmShow)
    {
        #InventDimDevelop

        if (!_inventDimParmShow.InventSiteIdFlag)
        {
            _inventDim.InventSiteId = '';
        }

        if (!_inventDimParmShow.InventLocationIdFlag)
        {
            _inventDim.InventLocationId = '';
        }

        if (!_inventDimParmShow.wmsLocationIdFlag)
        {
            _inventDim.wmsLocationId = '';
        }

        Enumerator enum = InventDim::dimTrackingDimFieldSet().getEnumerator();
        while (enum.moveNext())
        {
            FieldId inventDimFieldId = enum.current();
            FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

            if (!_inventDimParmShow.(inventDimParmFieldId) && 
                !_inventDimParmFixed.(inventDimParmFieldId))
            {
                _inventDim.(inventDimFieldId) = InventDim::emptyDimField(inventDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToInventDimFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory to dimensions.
    /// </summary>
    /// <remarks>
    /// This method copies the from dimensions value to the to dimensions value and clears the destination
    /// dimensions.
    /// </remarks>
    public void initToInventDimFromInventDim()
    {
        this.wmsOrderTransType().initToInventDimFromInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        this.wmsOrderTransType().inserting();

        boolean updateOrder = true;
        WMSOrder wmsOrder;

        WMSOrderTransInsertContext context = WMSOrderTransInsertContext::current(this);
        if (context)
        {
            updateOrder = context.updateOrder;
            wmsOrder = context.WMSOrder;
        }

        switch (this.ExpeditionStatus)
        {
            case WMSExpeditionStatus::Registered:
            case WMSExpeditionStatus::Activated:
            case WMSExpeditionStatus::Started:
                if (updateOrder)
                {
                    if (!wmsOrder || !wmsOrder.selectForUpdate())
                    {
                        wmsOrder = this.wmsOrder(true);
                    }
                    wmsOrder.QtyNoShipment          -= this.Qty;
                    wmsOrder.PdsCWQtyNoShipment     -= this.PdsCWQty;
                    wmsOrder.setStatus();
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (PdsGlobal::pdsIsCWItem(this.ItemId) && this.PdsCWQty == 0) 
        {
            this.PdsCWZeroCWLine = NoYes::Yes;
        }

        super();

        this.wmsOrderTransType().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean _update = false)
    {
        return InventDim::find(this.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimPickingList</Name>
				<Source><![CDATA[
    public InventDim inventDimPickingList()
    {
        InventDimParm   inventDimParmFixed;
        InventDimParm   inventDimParmShow;
        InventDim       inventDim               = this.inventDim();

        inventDimParmFixed.initFromInventDimFixed(this.InventDimFixed);
        InventDimGroupSetup::newItemId(this.ItemId).inventDimParmActive(inventDimParmShow);
        this.initInventDimPick(inventDim, inventDimParmFixed, inventDimParmShow);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimPrimaryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>InventDim</c> buffer with primary dimensions.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> buffer that contains only primary dimensions.
    /// </returns>
    public InventDim inventDimPrimaryDimensions()
    {
        return InventTable::find(this.ItemId).inventDimPrimaryDimensions(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimProductDimensions</Name>
				<Source><![CDATA[
    public InventDim inventDimProductDimensions()
    {
        return InventTable::find(this.ItemId).inventDimProductDimensions(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocation</Name>
				<Source><![CDATA[
    public InventLocation inventLocation()
    {
        InventDim   inventDim = this.inventDim();
        return InventLocation::find(inventDim.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    public InventMovement inventMovement(boolean _transferReceipt = false)
    {
        return this.wmsOrderTransType().inventMovement(_transferReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSerial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the serial number record for the <c>WMSOrderTrans</c> record.
    /// </summary>
    /// <param name="_forupdate">
    ///    A Boolean value that determines whether the serial number record should be available for update;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The serial number record if there is one; otherwise, null.
    /// </returns>
    public InventSerial inventSerial(boolean _forupdate = false)
    {
        return InventSerial::find(this.inventDim().InventSerialId, this.ItemId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhysicalUpdated</Name>
				<Source><![CDATA[
    public NoYes isPhysicalUpdated()
    {
        return (this.ExpeditionStatus == WMSExpeditionStatus::Picked ||
                this.ExpeditionStatus == WMSExpeditionStatus::Staged ||
                this.ExpeditionStatus == WMSExpeditionStatus::Loaded ||
                this.ExpeditionStatus == WMSExpeditionStatus::Complete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProdLine_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if this record was created from Production order.
    /// </summary>
    /// <returns>
    ///     true if transaction references to <c>ProdLine</c>.
    /// </returns>
    public boolean isProdLine_RU()
    {
        InventTransOrigin inventTransOrigin;

        if (this.PostTransfer == NoYes::Yes)
        {
            return false;
        }

        if (this.InventTransType == InventTransType::ProdLine)
        {
            return true;
        }

        select firstonly RecId from inventTransOrigin
            where inventTransOrigin.InventTransId == this.InventTransId
               && inventTransOrigin.ReferenceCategory == InventTransType::ProdLine;

        return inventTransOrigin.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item name of a related item.
    /// </summary>
    /// <returns>
    ///    The name of the item related to the current <c>WMSOrderTrans</c> record.
    /// </returns>
    display public ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the status of the current picking line from <c>Staged</c> to <c>Loaded</c>.
    /// </summary>
    public void load()
    {
        this.wmsOrderTransType().load();
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationId</Name>
				<Source><![CDATA[
    display public WMSLocationId locationId()
    {
        return this.inventDim().wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseBatchConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the WMS order must use batch constraints.
    /// </summary>
    /// <returns>
    /// true if the WMS order must take batch constraints into account; otherwise, false.
    /// </returns>
    public boolean mustUseBatchConstraints()
    {
        InventDimParm       inventDimParmFixed;
        InventTable         inventTable;
        InventModelGroup    inventModelGroup;

        if (   #PdsBatchAttribEnabled
            || #PdsShelfEnabled
            || #PdsSameLotEnabled)
        {
            inventTable = this.inventTable();
            inventModelGroup = inventTable.modelGroup();
            if (inventTable.isItemBatchActivated()
                && (inventTable.isShelfLifeItem()
                    || (SalesParameters::find().PdsBatchAttribAutoRes
                        && this.inventMovement().pdsMustConsiderBatchAttrib()
                        && PdsBatchAttribByItem::existItemIdAny(inventTable.ItemId))
                    || this.inventMovement().pdsSameLotReservation()
                    ))
            {
                InventDimFixedClass::newFixedDim(this.InventDimFixed).initInventDimParm(inventDimParmFixed);
                if (! inventDimParmFixed.InventBatchIdFlag)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the inventory transactions associated with the <c>WMSOrderTrans</c> record.
    /// </summary>
    protected void releaseInventoryTransactions()
    {
        switch (this.ExpeditionStatus)
        {
            case WMSExpeditionStatus::Registered: // Fall through
            case WMSExpeditionStatus::Activated:  // Fall through
            case WMSExpeditionStatus::Started:
                this.wmsOrderTransType().releaseInventoryTransactions();
                break;
            case WMSExpeditionStatus::Picked:      // Fall through
            case WMSExpeditionStatus::Staged:      // Fall through
            case WMSExpeditionStatus::Loaded:      // Fall through
            case WMSExpeditionStatus::Complete:    // Fall through
            case WMSExpeditionStatus::Cancelled:
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    public void reserve(
        InventDim   _inventDim,
        InventDimId _toInventDimId = InventDim::inventDimIdBlank())
    {
        InventMovement          inventMovement = this.inventMovement();
        InventUpd_Reservation   inventUpd_Reservation;
        InventDimParm           inventDimParm;

        inventDimParm.setAllInventDim();

        inventUpd_Reservation = InventUpd_Reservation::newParameters(inventMovement, _inventDim, inventDimParm, this.InventDimFixed, -this.Qty, true, false, -this.PdsCWQty);

        inventUpd_Reservation.updateNow();
        this.InventDimId = _inventDim.InventDimId;
        if (_toInventDimId != InventDim::inventDimIdBlank())
        {
            this.ToInventDimId  = _toInventDimId;
        }
        this.IsReserved = NoYes::Yes;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentGroupingRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the grouping reference ID from the inventory order.
    /// </summary>
    /// <returns>
    ///    The grouping reference ID from the inventory order.
    /// </returns>
    public display WMSShipmentGroupingRefId shipmentGroupingRefId()
    {
        return this.wmsOrder().ShipmentGroupingRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentGroupingTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the grouping reference type from the inventory order.
    /// </summary>
    /// <returns>
    ///    The grouping reference type from the inventory order.
    /// </returns>
    public display WMSShipmentGroupingTransType shipmentGroupingTransType()
    {
        return this.wmsOrder().ShipmentGroupingTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityValidForSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the quantity is valid for splitting the transaction.
    /// </summary>
    /// <param name = "_splitQty">The quantity to split.</param>
    /// <param name = "_pdsCWSplitQty">The physical catch weight quantity to split.</param>
    /// <returns>true if the quantity is valid; otherwise, false.</returns>
    protected boolean isQuantityValidForSplit(InventQty _splitQty, PdsCWInventQty _pdsCWSplitQty)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        if (isCWItem)
        {
            if ((_pdsCWSplitQty <= 0) || (_pdsCWSplitQty >= this.PdsCWQty))
            {
                return false;
            }
        }
        else
        {
            if ((_splitQty <= 0) || (_splitQty >= this.Qty))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>split</Name>
				<Source><![CDATA[
    public WMSOrderTrans split(InventQty _splitQty, PdsCWInventQty _pdsCWSplitQty = 0)
    {
        if (!this.isQuantityValidForSplit(_splitQty, _pdsCWSplitQty))
        {
            throw error("@SYS25644");
        }

        ttsbegin;
        boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        WMSOrderTrans wmsOrderTrans = this.initWMSOrderTransToSplit(_splitQty, isCWItem, _pdsCWSplitQty);
        if (isCWItem)
        {
            this.PdsCWQty   -= _pdsCWSplitQty;
            this.Qty        -= _splitQty;
        }
        else
        {
            this.Qty -= _splitQty;
        }
        this.ExpectedExpeditionTime -= wmsOrderTrans.ExpectedExpeditionTime;
        this.Volume -= wmsOrderTrans.Volume;
        this.doUpdate();
        wmsOrderTrans.doInsert();
        ttscommit;
        return wmsOrderTrans;
    }
    
]]></Source>
			</Method>
			<Method>
				<Name>initWMSOrderTransToSplit</Name>
				<Source><![CDATA[
    protected WMSOrderTrans initWMSOrderTransToSplit(InventQty _splitQty, boolean _isCWItem, PdsCWInventQty _pdsCWSplitQty = 0)
    {
        WMSOrderTrans wmsOrderTrans;
        wmsOrderTrans.data(this);
        wmsOrderTrans.Qty = _splitQty;
        wmsOrderTrans.PdsCWQty = _pdsCWSplitQty;

        if (_isCWItem)
        {
            wmsOrderTrans.ExpectedExpeditionTime = real2int(this.ExpectedExpeditionTime * _pdsCWSplitQty / this.PdsCWQty);
            wmsOrderTrans.Volume = this.Volume * _pdsCWSplitQty / this.PdsCWQty;
        }
        else
        {
            wmsOrderTrans.ExpectedExpeditionTime = real2int(this.ExpectedExpeditionTime * _splitQty / this.Qty);
            wmsOrderTrans.Volume = this.Volume * _splitQty / this.Qty;
        }

        return wmsOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitByInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates, updates and deletes lines so they correspond to the ordered and reserved inventory transactions that are related to this line.
    /// </summary>
    public void splitByInventTrans()
    {
        this.splitByAllInventTrans(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitByAllInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates, updates and deletes lines so they correspond to the ordered and reserved inventory transactions that are related to this line.
    /// </summary>
    /// <param name = "_onlyForCurrentInventDim">Only process records that invent dimensions is equal to current invent dimensions.</param>
    public void splitByAllInventTrans(boolean _onlyForCurrentInventDim = false)
    {
        #TimeConstants
        Set                         setUsedRecIds           = new Set(Types::Int64); //used RecIds
        Map                         mapDimReservedMap       = new Map(Types::String,Types::Class);//Key dimId, value Map
        Map                         mapDimNotReservedMap    = new Map(Types::String,Types::Class);//Key dimId, value Map
        Map                         mapRef;
        Map                         mapRefInner;
        MapEnumerator               me;
        MapEnumerator               meInner;

        WMSOrderTrans               newWMSOrderTrans;
        InventTrans                 inventTrans;
        WMSOrderTrans               wmsOrderTrans;
        InventTable                 inventTable;
        WMSLocation                 wmsLocation;

        InventQty                   qtyAdjust;
        InventTransOriginId         inventTransOriginId;
        InventQty                   qtyAdjustedWMSOrderTrans;
        PdsCWInventQty              pdsCWQtyAdjustedWMSOrderTrans;

        boolean         pdsIsCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        PdsCWInventQty  pdsCWQtyAdjust;

        InventQty       lookupQty;
        PdsCWInventQty  pdsCWLookupQty;

        //keep track of how much quantity is added since the wmsOrder must be adjusted
        void trackWMSOrderTransAdjustments(InventQty _deltaQty, PdsCWInventQty _deltaCWQty)
        {
            qtyAdjustedWMSOrderTrans       += _deltaQty;
            pdsCWQtyAdjustedWMSOrderTrans  += _deltaCWQty;
        }

        //If any wmsOrderTrans with shipmentId where inserted(deleted/modified the qtyNoShipment might need to be adjusted
        void updateWMSOrder(InventQty _qtyAdjustedWMSOrderTrans, PdsCWInventQty _pdsCWQtyAdjustedWMSOrderTrans)
        {
            WMSOrder wmsOrder;

            if (_qtyAdjustedWMSOrderTrans && this.ShipmentId)
            {
                wmsOrder = this.wmsOrder(true);
                wmsOrder.QtyNoShipment      -= _qtyAdjustedWMSOrderTrans;
                wmsOrder.PdsCWQtyNoShipment -= _pdsCWQtyAdjustedWMSOrderTrans;

                wmsOrder.doUpdate();
            }
        }

        /*
            The following structure is stored in two maps: [dimid,map->[inventdimFixed,qty]].
            One map is used for quantity for reserved WMSOrderTrans, and one for not-reserved wmsOrderTrans
        */
        void insertIntoMaps(InventTrans _inventTrans)
        {
            if (_inventTrans.isWMSReserved())
            {
                mapRef = mapDimReservedMap;
            }
            else
            {
                mapRef = mapDimNotReservedMap;
            }

            if (mapRef.exists(_inventTrans.InventDimId))
            {
                mapRefInner = mapRef.lookup(_inventTrans.InventDimId);

                if (mapRefInner.exists(_inventTrans.InventDimFixed))
                {
                    [lookupQty, pdsCWLookupQty] =
                        mapRefInner.lookup(_inventTrans.InventDimFixed);
                    mapRefInner.insert(_inventTrans.InventDimFixed,
                        [lookupQty+abs(_inventTrans.Qty),
                            pdsCWLookupQty+abs(_inventTrans.PdsCWQty)]);
                }
                else
                {
                    mapRefInner.insert(_inventTrans.InventDimFixed,
                        [abs(_inventTrans.Qty), abs(_inventTrans.PdsCWQty)]);
                }
                mapRef.insert(_inventTrans.InventDimId,mapRefInner);
            }
            else
            {
                mapRefInner = new Map(Types::Integer, Types::Container);
                mapRefInner.insert(_inventTrans.InventDimFixed,
                    [abs(_inventTrans.Qty), abs(_inventTrans.PdsCWQty)]);

                mapRef.insert(_inventTrans.InventDimId,mapRefInner);
            }
        }

        //updates quantity and reserved flag on wmsOrderTrans
        void adjustQtyWMSOrderTrans(boolean _useReserved,WMSOrderTrans _wmsOrderTrans, Map _mapRef)
        {
            mapRef = _mapRef;

            mapRefInner = mapRef.lookup(_wmsOrderTrans.InventDimId);

            if (mapRefInner.exists(_wmsOrderTrans.InventDimFixed))
            {
                [qtyAdjust, pdsCWQtyAdjust] = mapRefInner.lookup(_wmsOrderTrans.InventDimFixed);

                //keep track of how much quantity is added since the wmsOrder must be adjusted
                if (   qtyAdjust      != wmsOrderTrans.Qty
                    || pdsCWQtyAdjust != wmsOrderTrans.PdsCWQty
                    || _useReserved   != wmsOrderTrans.IsReserved)
                {
                    trackWMSOrderTransAdjustments(qtyAdjust - wmsOrderTrans.Qty, pdsCWQtyAdjust - wmsOrderTrans.PdsCWQty);

                    wmsOrderTrans.Qty           = qtyAdjust;
                    if (pdsIsCWItem)
                    {
                        wmsOrderTrans.PdsCWQty = pdsCWQtyAdjust;
                        wmsOrderTrans.PdsCWZeroCWLine = wmsOrderTrans.PdsCWQty == 0;
                    }
                    wmsOrderTrans.IsReserved    = _useReserved;
                    wmsOrderTrans.update();
                }

                mapRefInner.remove(_wmsOrderTrans.InventDimFixed);

                if (mapRefInner.empty())
                {
                    mapRef.remove(_wmsOrderTrans.InventDimId);
                }

                setUsedRecIds.add(_wmsOrderTrans.RecId);
            }
        }

        //updates dimensions etc. on wmsOrderTrans
        void updateWMSOrderTrans(boolean _useReserved,WMSOrderTrans _wmsOrderTrans,Map _mapRef)
        {
            mapRef = _mapRef;

            me = mapRef.getEnumerator();

            if (me.moveNext())
            {
                mapRefInner = me.currentValue();

                meInner = mapRefInner.getEnumerator();

                if (meInner.moveNext())
                {
                    wmsOrderTrans.InventDimFixed = meInner.currentKey();
                    [lookupQty, pdsCWLookupQty]  = meInner.currentValue();

                    trackWMSOrderTransAdjustments(lookupQty - wmsOrderTrans.Qty, pdsCWLookupQty - wmsOrderTrans.PdsCWQty);

                    wmsOrderTrans.Qty            = lookupQty;
                    if (pdsIsCWItem)
                    {
                        wmsOrderTrans.PdsCWQty   = pdsCWLookupQty;
                        wmsOrderTrans.PdsCWZeroCWLine = wmsOrderTrans.PdsCWQty == 0;
                    }

                    wmsOrderTrans.IsReserved     = _useReserved;
                    wmsOrderTrans.InventDimId    = me.currentKey();
                    wmsOrderTrans.update();

                    mapRefInner.remove(wmsOrderTrans.InventDimFixed);

                    if (mapRefInner.empty())
                    {
                        mapRef.remove(wmsOrderTrans.InventDimId);
                    }
                }
            }
        }
        //creates new wmsOrderTrans based on content of map
        void createNewWMSOrderTrans(boolean _reserved, Map _mapRef)
        {
            mapRef = _mapRef;
            me = mapRef.getEnumerator();

            while (me.moveNext())
            {
                mapRefInner = me.currentValue();

                meInner = mapRefInner.getEnumerator();

                while (meInner.moveNext())
                {
                    newWMSOrderTrans.clear();
                    newWMSOrderTrans.data(this);
                    newWMSOrderTrans.InventDimFixed = meInner.currentKey();

                    [lookupQty, pdsCWLookupQty] = meInner.currentValue();
                    newWMSOrderTrans.Qty        = lookupQty;
                    if (pdsIsCWItem)
                    {
                        newWMSOrderTrans.PdsCWQty = pdsCWLookupQty;
                        wmsOrderTrans.PdsCWZeroCWLine = wmsOrderTrans.PdsCWQty == 0;
                    }

                    trackWMSOrderTransAdjustments(newWMSOrderTrans.Qty, newWMSOrderTrans.PdsCWQty);

                    newWMSOrderTrans.InventDimId    = me.currentKey();
                    newWMSOrderTrans.initToInventDimFromInventDim();
                    newWMSOrderTrans.IsReserved     = _reserved;

                    using (WMSOrderTransInsertContext context = WMSOrderTransInsertContext::construct(newWMSOrderTrans))
                    {
                        //Skip updating the header for each line. This is handled once by updateWMSOrder()
                        context.UpdateOrder = false;

                        newWMSOrderTrans.insert();
                    }
                }
            }
        }

        ttsbegin;

        inventTransOriginId = InventTransOrigin::findByInventTransId(this.InventTransId).RecId;

        //1. keep quantity and dim in memory so wmsorderTrans can be updated to match inventTrans
        while select sum(Qty), sum(PdsCWQty), StatusIssue,InventDimId,InventDimFixed from inventTrans
            group by StatusIssue,InventDimId,InventDimFixed
            where   inventTrans.InventTransOrigin   == inventTransOriginId
                &&  inventTrans.TransChildRefId     == this.OrderId
                &&  inventTrans.TransChildType      == InventTransChildType::WMSOrder
                &&  inventTrans.StatusIssue          > StatusIssue::Picked
                &&  (!_onlyForCurrentInventDim
                     || inventTrans.inventDimId     == this.inventDimId)
        {
            insertIntoMaps(inventTrans);
        }

        //2. Update as many as the existing wmsOrderTrans before creating new ones
        while select forupdate wmsOrderTrans
            order by ExpeditionStatus desc, IsReserved desc //try to avoid adjusting lines that are being processed
            where wmsOrderTrans.InventTransId   == this.InventTransId
            &&    wmsOrderTrans.OrderId         == this.OrderId
            && (wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Registered
            ||  wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated
            ||  wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started)
            && (!_onlyForCurrentInventDim
                || wmsOrderTrans.inventDimId     == this.inventDimId)
        {
            if (wmsOrderTrans.RouteId != this.RouteId)
            {
                throw error("@SYS106747");
            }

            if (mapDimReservedMap.exists(wmsOrderTrans.InventDimId))
            {
                adjustQtyWMSOrderTrans(true,wmsOrderTrans,mapDimReservedMap);
            }
            else if (mapDimNotReservedMap.exists(wmsOrderTrans.InventDimId))
            {
                adjustQtyWMSOrderTrans(false,wmsOrderTrans,mapDimNotReservedMap);
            }
        }

        //3. the remaining part must either be updated or deleted
        while select forupdate wmsOrderTrans
            where wmsOrderTrans.InventTransId   == this.InventTransId
            &&    wmsOrderTrans.OrderId         == this.OrderId
            && (wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Registered
            ||  wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated
            ||  wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started)
            && (!_onlyForCurrentInventDim
                || wmsOrderTrans.inventDimId    == this.inventDimId)
        {
            if (!setUsedRecIds.in(wmsOrderTrans.RecId))
            {
                if (mapDimReservedMap.elements())//first try the reserved
                {
                    updateWMSOrderTrans(true,wmsOrderTrans,mapDimReservedMap);
                }
                else if (mapDimNotReservedMap.elements())
                {
                    updateWMSOrderTrans(false,wmsOrderTrans,mapDimNotReservedMap);
                }
                else
                {
                    trackWMSOrderTransAdjustments(-wmsOrderTrans.Qty, -wmsOrderTrans.PdsCWQty);
                    wmsOrderTrans.doDelete();
                }
            }
        }

        //4. If anything is left in any of the maps new records need to be created
        createNewWMSOrderTrans(true,mapDimReservedMap);

        createNewWMSOrderTrans(false,mapDimNotReservedMap);

        //5. finally update the related wmsOrder if needed
        updateWMSOrder(qtyAdjustedWMSOrderTrans, pdsCWQtyAdjustedWMSOrderTrans);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    public void start()
    {
        this.wmsOrderTransType().start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUp</Name>
				<Source><![CDATA[
    public void sumUp()
    {
        WMSOrderTrans   wmsOrderTrans;

        select firstonly forupdate wmsOrderTrans
            where wmsOrderTrans.OrderId                 == this.OrderId
               && wmsOrderTrans.ShipmentId              == this.ShipmentId
               && wmsOrderTrans.RouteId                 == this.RouteId
               && wmsOrderTrans.SortCode                == this.SortCode
               && wmsOrderTrans.ItemSortCode            == this.ItemSortCode
               && wmsOrderTrans.OperatorWorker          == this.OperatorWorker
               && wmsOrderTrans.InventDimId             == this.InventDimId
               && wmsOrderTrans.InventDimFixed          == this.InventDimFixed
               && wmsOrderTrans.PreReserved             == this.PreReserved
               && wmsOrderTrans.ToInventDimId           == this.ToInventDimId
               && wmsOrderTrans.PalletIdPicked          == this.PalletIdPicked
               && wmsOrderTrans.PostTransfer            == this.PostTransfer
               && wmsOrderTrans.FullPallet              == this.FullPallet
               && wmsOrderTrans.ExpeditionStatus        == this.ExpeditionStatus
               && wmsOrderTrans.IsReserved              == this.IsReserved
               && wmsOrderTrans.DlvDate                 == this.DlvDate
               && wmsOrderTrans.InventTransType         == this.InventTransType
               && wmsOrderTrans.InventTransRefId        == this.InventTransRefId
               && wmsOrderTrans.Customer                == this.Customer
               && wmsOrderTrans.DeliveryPostalAddress   == this.DeliveryPostalAddress
               && wmsOrderTrans.RecId                   != this.RecId;

        if (wmsOrderTrans)
        {
            wmsOrderTrans.Qty                       += this.Qty;
            wmsOrderTrans.PdsCWQty                  += this.PdsCWQty;
            wmsOrderTrans.Volume                    += this.Volume;
            wmsOrderTrans.ExpectedExpeditionTime    += this.ExpectedExpeditionTime;
            wmsOrderTrans.ExpeditionTime            += this.ExpeditionTime;
            wmsOrderTrans.doUpdate();
            this.doDelete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncIsReservedFromInventTrans</Name>
				<Source><![CDATA[
    /*
        Used to synchronize WMSOrderTrans.isReserved with InventTrans statusIssue
    */
    public void syncIsReservedFromInventTrans(
        InventDim       _inventDimFrom,
        InventDimParm   _inventDimParmFrom)
    {
        InventQty               availQty;
        WMSOrderTrans           wmsOrderTransNotReserved;
        WMSOrderTrans           existingReservations;
        InventDim               inventDimExisting;
        InventTrans             inventTrans;
        InventQty               qtyReserved;
        InventDim               inventDimPickLoc;
        InventDimParm           inventDimParmPickLoc;
        WMSLocation             wmsLocation;
        InventTransOriginId     inventTransOriginId;

        InventQty       pdsCWAvailQty;
        InventQty       pdsCWQtyReserved;

        inventTransOriginId = InventTransOrigin::findByInventTransId(this.InventTransId).RecId;

        select sum(Qty), sum(PdsCWQty) from inventTrans
        where inventTrans.InventTransOrigin == inventTransOriginId
        &&    inventTrans.TransChildRefId   == this.OrderId
        &&    inventTrans.TransChildType    == InventTransChildType::WMSOrder
        &&    inventTrans.StatusIssue       == StatusIssue::ReservPhysical
        &&    inventTrans.StatusReceipt     == StatusReceipt::None
        #inventDimExistsJoin(inventTrans.inventDimId,inventDimExisting,_inventDimFrom,_inventDimParmFrom);

        qtyReserved         = inventTrans.Qty;
        pdsCWQtyReserved    = inventTrans.PdsCWQty;

        wmsLocation = WMSLocation::findPickingLocation(this.ItemId,_inventDimFrom);

        if (wmsLocation.RecId)
        {
            inventDimPickLoc.initFromInventDim(_inventDimFrom);
            inventDimPickLoc.wmsLocationId      = wmsLocation.wmsLocationId;
            inventDimPickLoc.InventLocationId   = wmsLocation.InventLocationId;

            inventDimPickLoc = InventDim::findOrCreate(inventDimPickLoc);

            inventDimParmPickLoc.initFromInventDimParm(_inventDimParmFrom);
            inventDimParmPickLoc.wmsLocationIdFlag      = NoYes::Yes;
            inventDimParmPickLoc.InventLocationIdFlag   = NoYes::Yes;

            
            select sum(Qty), sum(PdsCWQty) from inventTrans
            where inventTrans.InventTransOrigin == inventTransOriginId
            &&    inventTrans.TransChildRefId   == this.OrderId
            &&    inventTrans.TransChildType    == InventTransChildType::WMSOrder
            &&    inventTrans.StatusIssue       == StatusIssue::ReservOrdered
            #inventDimExistsJoin(inventTrans.inventDimId,inventDimExisting,inventDimPickLoc,inventDimParmPickLoc);

            qtyReserved         += inventTrans.Qty;
            pdsCWQtyReserved    += inventTrans.PdsCWQty;
        }

        if (qtyReserved)
        {
            select sum(Qty), sum(PdsCWQty)
                from existingReservations
                where existingReservations.OrderId        == this.OrderId
                    && existingReservations.InventTransId == this.InventTransId
                    && existingReservations.IsReserved    == NoYes::Yes
                    && existingReservations.RecId         != this.RecId
                    && (existingReservations.ExpeditionStatus == WMSExpeditionStatus::Registered
                     || existingReservations.ExpeditionStatus == WMSExpeditionStatus::Activated
                     || existingReservations.ExpeditionStatus == WMSExpeditionStatus::Started)
            #inventDimExistsJoin(
                existingReservations.inventDimId,
                inventDimExisting,
                _inventDimFrom,
                _inventDimParmFrom);

            availQty        = -qtyReserved - existingReservations.Qty;
            pdsCWAvailQty   = -pdsCWQtyReserved - existingReservations.PdsCWQty;

            if (availQty)
            {
                while select forupdate wmsOrderTransNotReserved
                    order by Qty asc //done to minimize splitting
                    where wmsOrderTransNotReserved.OrderId              == this.OrderId
                    &&    wmsOrderTransNotReserved.InventTransId        == this.InventTransId
                    &&    wmsOrderTransNotReserved.IsReserved           == NoYes::No
                    &&    wmsOrderTransNotReserved.RecId                != this.RecId
                    &&   (wmsOrderTransNotReserved.ExpeditionStatus     == WMSExpeditionStatus::Registered
                    ||    wmsOrderTransNotReserved.ExpeditionStatus     == WMSExpeditionStatus::Activated
                    ||    wmsOrderTransNotReserved.ExpeditionStatus     == WMSExpeditionStatus::Started)
                #inventDimExistsJoin(wmsOrderTransNotReserved.inventDimId,inventDimExisting,_inventDimFrom,_inventDimParmFrom)
                {
                    if (wmsOrderTransNotReserved.Qty > availQty)
                    {
                        wmsOrderTransNotReserved = wmsOrderTransNotReserved.split(availQty, pdsCWAvailQty);
                    }

                    wmsOrderTransNotReserved.IsReserved = NoYes::Yes;
                    wmsOrderTransNotReserved.doUpdate();

                    availQty -= wmsOrderTransNotReserved.Qty;
                    pdsCWAvailQty -= wmsOrderTransNotReserved.PdsCWQty;
                    if (availQty <= 0)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the inventory to dimensions from current picking line.
    /// </summary>
    /// <returns>
    ///    The inventory to dimensions from current picking line.
    /// </returns>
    public InventDim toInventDim()
    {
        return InventDim::find(this.ToInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInventSerial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the serial number record for the from dimension of this <c>WMSOrderTrans</c> record.
    /// </summary>
    /// <param name="_forupdate">
    ///    A Boolean value that determines whether the serial number record should be available for update;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The serial number record if there is one; otherwise, null.
    /// </returns>
    public InventSerial toInventSerial(boolean _forupdate = false)
    {
        return InventSerial::find(this.toInventDim().InventSerialId, this.ItemId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    display UnitOfMeasureSymbol unitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unload</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the status of the current picking line from <c>Loaded</c> to <c>Staged</c>.
    /// </summary>
    public void unload()
    {
        this.wmsOrderTransType().unload();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unReserve</Name>
				<Source><![CDATA[
    public void unReserve(
        boolean _unreservePrereserved   = false,
        boolean _allowReReservation     = true)
    {
        this.wmsOrderTransType().unReserve(_unreservePrereserved, _allowReReservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWMSOrderInventDimIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>inventDimId</c> and <c>ToInventDimId</c> values on the related <c>WMSOrder</c> based
    ///    on the arguments.
    /// </summary>
    /// <param name="_inventDimIdFrom">
    ///    The new <c>inventDimId</c> value.
    /// </param>
    /// <param name="_inventDimIdTo">
    ///    The new <c>ToInventDimid</c> value.
    /// </param>
    public void updateWMSOrderInventDimIds(
        InventDimId _inventDimIdFrom,
        InventDimId _inventDimIdTo)
    {
        WMSOrder    wmsOrder;

        wmsOrder = this.wmsOrder(true);
        wmsOrder.InventDimId    = _inventDimIdFrom;
        wmsOrder.ToInventDimId  = _inventDimIdTo;
        wmsOrder.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.ExpeditionStatus == WMSExpeditionStatus::Started    ||
            this.isPhysicalUpdated())
        {
            throw(error("@SYS50646"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocation</Name>
				<Source><![CDATA[
    public WMSLocation wmsLocation(boolean _forupdate = false)
    {
        InventDim   inventDim = this.inventDim();
        return WMSLocation::find(inventDim.wmsLocationId, inventDim.InventLocationId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrder</Name>
				<Source><![CDATA[
    public WMSOrder wmsOrder(boolean _update = false)
    {
        return WMSOrder::find(this.OrderId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrderTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance of a subclass of the <c>WMSOrderTransType</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of a subclass of the <c>WMSOrderTransType</c> class.
    /// </returns>
    public WMSOrderTransType wmsOrderTransType()
    {
        return WMSOrderTransType::newWMSOrderTrans(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsPickingRoute</Name>
				<Source><![CDATA[
    public WMSPickingRoute wmsPickingRoute(boolean _update = false)
    {
        if (this.FullPallet)
        {
            return null;
        }

        return WMSPickingRoute::find(this.RouteId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipment</Name>
				<Source><![CDATA[
    public WMSShipment wmsShipment(boolean _forupdate = false)
    {
        return WMSShipment::find(this.ShipmentId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the <c>WMSOrderTrans</c> records associated with a shipment.
    /// </summary>
    /// <param name = "_wmsShipment">
    /// A <c>WMSShipment</c> record which is being deleted.
    /// </param>
    /// <param name = "_reduceOrderQuantity">
    /// A Boolean determining whether the deleted <c>WMSOrderTrans</c> records must reduce the overall order quantity.
    /// </param>
    static public void deleteFromShipment(WMSShipment _wmsShipment, boolean _reduceOrderQuantity)
    {
        WMSOrderTrans wmsOrderTrans;

        while select forupdate wmsOrderTrans
            where wmsOrderTrans.ShipmentId == _wmsShipment.ShipmentId
        {
            wmsOrderTrans.delete(_reduceOrderQuantity, null, false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts or updates <see cref="WMSOrderTrans Table" /> records.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    A <c>WMSOrderTrans</c> record that should be inserted or updated.
    /// </param>
    /// <param name="_wmsOrder">
    ///    The <c>WMSOrder</c> that is related to the <c>WMSOrderTrans</c>. If this is not passed or is not
    ///    selected for update, it will be reread from the database; optional.
    /// </param>
    /// <returns>
    ///    The updated or inserted <c>WMSOrderTrans</c> record.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_WMSOrder" /> parameter is passed for performance reasons.
    /// </remarks>
    public static WMSOrderTrans insertOrUpdate(
        WMSOrderTrans   _wmsOrderTrans,
        WMSOrder        _wmsOrder = null)
    {
        WMSOrderTrans   wmsOrderTrans1;

        void updateOrder()
        {
            WMSOrder        wmsOrder    = _wmsOrder;

            if (!wmsOrder || !wmsOrder.selectForUpdate())
            {
                wmsOrder = _wmsOrderTrans.wmsOrder(true);
            }

            switch (_wmsOrderTrans.ExpeditionStatus)
            {
                case WMSExpeditionStatus::Registered: // Fall through
                case WMSExpeditionStatus::Activated:  // Fall through
                case WMSExpeditionStatus::Started:
                    wmsOrder.QtyNoShipment      -= _wmsOrderTrans.Qty;
                    wmsOrder.PdsCWQtyNoShipment -= _wmsOrderTrans.PdsCWQty;
                    break;
                default:
                    throw(error(strFmt("@SYS19306", funcName())));
            }

            wmsOrder.setStatus(_wmsOrderTrans);
        }

        select firstonly forupdate wmsOrderTrans1
            where wmsOrderTrans1.OrderId            == _wmsOrderTrans.OrderId
               && wmsOrderTrans1.ShipmentId         == _wmsOrderTrans.ShipmentId
               && wmsOrderTrans1.RouteId            == _wmsOrderTrans.RouteId
               && wmsOrderTrans1.SortCode           == _wmsOrderTrans.SortCode
               && wmsOrderTrans1.ItemSortCode       == _wmsOrderTrans.ItemSortCode
               && wmsOrderTrans1.OperatorWorker     == _wmsOrderTrans.OperatorWorker
               && wmsOrderTrans1.InventDimId        == _wmsOrderTrans.InventDimId
               && wmsOrderTrans1.InventDimFixed     == _wmsOrderTrans.InventDimFixed
               && wmsOrderTrans1.PreReserved        == _wmsOrderTrans.PreReserved
               && wmsOrderTrans1.IsReserved         == _wmsOrderTrans.IsReserved
               && wmsOrderTrans1.ToInventDimId      == _wmsOrderTrans.ToInventDimId
               && wmsOrderTrans1.PalletIdPicked     == _wmsOrderTrans.PalletIdPicked
               && wmsOrderTrans1.PostTransfer       == _wmsOrderTrans.PostTransfer
               && wmsOrderTrans1.FullPallet         == _wmsOrderTrans.FullPallet
               && wmsOrderTrans1.DlvDate            == _wmsOrderTrans.DlvDate
               && wmsOrderTrans1.ExpeditionStatus   == _wmsOrderTrans.ExpeditionStatus;

        if (wmsOrderTrans1)
        {
            wmsOrderTrans1.Qty                      += _wmsOrderTrans.Qty;
            wmsOrderTrans1.PdsCWQty                 += _wmsOrderTrans.PdsCWQty;
            wmsOrderTrans1.Volume                   += _wmsOrderTrans.Volume;
            wmsOrderTrans1.ExpectedExpeditionTime   += _wmsOrderTrans.ExpectedExpeditionTime;
            wmsOrderTrans1.ExpeditionTime           += _wmsOrderTrans.ExpeditionTime;
            wmsOrderTrans1.update();
            updateOrder();
            return wmsOrderTrans1;
        }

        using (WMSOrderTransInsertContext context = WMSOrderTransInsertContext::construct(_wmsOrderTrans))
        {
            context.WMSOrder = _wmsOrder;
            _wmsOrderTrans.insert();
        }

        return _wmsOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateUsingHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be updated using a callback handler.
    /// </summary>
    /// <param name="_handler">
    /// The class that handles the callback.
    /// </param>
    /// <returns>
    /// true when the record can be updated using a handler; otherwise, false. 
    /// </returns>
    protected boolean canUpdateUsingHandler(WMSOrderTransMultiUpdateHandleable _handler)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUsingHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record using a callback handler.
    /// </summary>
    /// <param name="_handler">
    /// The class that handles the callback.
    /// </param>
    protected void updateUsingHandler(WMSOrderTransMultiUpdateHandleable _handler)
    {
        if (this.canUpdateUsingHandler(_handler))
        {
            _handler.updateWMSOrderTrans(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopWMSOrderTransMulti</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates multiple <c>WMSOrderTrans</c> records.
    /// </summary>
    /// <param name="_packedMap">
    /// A <c>Map</c> object whose key is a <c>WMSOrderTrans.recId</c> value and whose version is a
    /// <c>WMSOrderTrans.OrderId,WMSOrderTrans.recVersion</c> value.
    /// </param>
    /// <param name="_handler">
    /// The class that handles the callback.
    /// </param>
    /// <remarks>
    /// An <c>OrderId</c> value is required for performance reasons so that an index can be used. This
    /// method only supports posting the <c>WMSOrderTrans</c> records that are related to the same picking
    /// route.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    /// An update conflict occurred.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// An update conflict cannot be recovered.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The <c>RecVersion</c> parameter differs from the <c>RecVersion</c> value of the selected record.
    /// </exception>
    static public void loopWMSOrderTransMulti(
        container                           _packedMap,
        WMSOrderTransMultiUpdateHandleable  _handler)
    {
        //this number determines how many values [RecId,OrderId] are added to the range, before the query is executed
        #DEFINE.EXECUTEQUERYPOINT(25)
        #OCCRetryCount

        Map                     selectedWMSOrderTrans;
        WMSOrderTrans           wmsOrderTrans;
        SysQueryRun             queryRun;
        QueryBuildRange         qrDataAreaId;

        WMSOrderId              wmsOrderId;
        RecVersion              recVersion;

        if (!_packedMap)
        {
            return;
        }

        selectedWMSOrderTrans = Map::create(_packedMap);

        if (!selectedWMSOrderTrans)
        {
            return;
        }

        try
        {
            int elements = selectedWMSOrderTrans.elements();

            if (!elements)
            {
                return;
            }

            MapEnumerator me = selectedWMSOrderTrans.getEnumerator();

            boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

            KittingIDeliveryControlHandler kitting_DeliveryControlHandler;
            if (isKittingEnabled)
            {
                kitting_DeliveryControlHandler = KittingWMSHelper::CreateDeliveryControl();
            }

            ttsbegin;

            //only 1 line to pick so avoid overhead by building the query
            if (elements == 1 && me.moveNext())
            {
                [wmsOrderId, recVersion] = me.currentValue();
                select forupdate firstonly wmsOrderTrans
                    where wmsOrderTrans.OrderId   == wmsOrderId
                    &&    wmsOrderTrans.RecId     == me.currentKey();

                if (wmsOrderTrans.RecId)
                {
                    if (wmsOrderTrans.RecVersion != recVersion)
                    {
                        throw error("@SYS91572");
                    }

                    if (WMSOrderTrans::kittingHanddleDeliveryControl(kitting_DeliveryControlHandler, wmsOrderTrans, _handler))
                    {
                        wmsOrderTrans.updateUsingHandler(_handler);
                    }
                }
                else
                {
                    checkFailed(strFmt("@SYS103915",wmsOrderId,me.currentValue()));
                }
                elements--;
            }
            else
            {
                //build query
                Query                query      = new SysQuery();
                QueryBuildDataSource queryBDS   = query.addDataSource(tableNum(WMSOrderTrans));
                queryBDS.update(true);

                Counter loop;
                //loop map and add to query
                while (me.moveNext())
                {
                    [wmsOrderId,recVersion] = me.currentValue();
                    qrDataAreaId = queryBDS.addRange(fieldNum(WMSOrderTrans,DataAreaId));
                    qrDataAreaId.value(strFmt('(((%1 == "%2") && (%3 == %4)))',
                                       fieldStr(WMSOrderTrans,OrderId),
                                       queryValue(wmsOrderId),
                                       fieldStr(WMSOrderTrans,RecId),
                                       me.currentKey()));
                    qrDataAreaId.status(RangeStatus::Locked);

                    elements--;

                    if (loop == #EXECUTEQUERYPOINT || elements == 0)
                    {
                        queryRun = new SysQueryRun(query);

                        while (queryRun.next())
                        {
                            wmsOrderTrans = queryRun.get(tableNum(WMSOrderTrans)) as WMSOrderTrans;

                            if (selectedWMSOrderTrans.exists(wmsOrderTrans.RecId))
                            {
                                [wmsOrderId,recVersion] = selectedWMSOrderTrans.lookup(wmsOrderTrans.RecId);
                                if (wmsOrderTrans.RecVersion != recVersion)
                                {
                                    throw error("@SYS91572");
                                }
                            }

                            if (WMSOrderTrans::kittingHanddleDeliveryControl(kitting_DeliveryControlHandler, wmsOrderTrans, _handler))
                            {
                                wmsOrderTrans.updateUsingHandler(_handler);
                            }
                        }

                        queryBDS.clearRanges();
                        loop = 0;//restart adding to range
                    }
                    loop++;
                }
            }

            if (kitting_DeliveryControlHandler)
            {
                kitting_DeliveryControlHandler.finish(true);
            }

            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPickRouteInProgress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of <c>wmsOrderTrans</c> records that have the
    ///    <c>WMSExpeditionStatus::Activated</c> or <c>WMSExpeditionStatus::Started</c> enumeration value and
    ///    belong to a picking route
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemID</c> value used as criteria for the quantity calculation.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> value used as criteria for the quantity calculation.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The <c>InventDimParm</c> value used as criteria for the quantity calculation.
    /// </param>
    /// <returns>
    ///    The activated or started quantity that meets the selection criteria.
    /// </returns>
    public static container qtyPickRouteInProgress(
        ItemId          _itemId,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
        WMSOrderTrans   wmsOrderTrans;
        InventDim       inventDimJoin;

        InventQty       qtyPickRouteInProgress;
        PdsCWInventQty  pdsCWQtyPickRouteInProgress;

        select sum(Qty), sum(PdsCWQty)
            from wmsOrderTrans
            where wmsOrderTrans.ItemId      == _itemId
            &&    wmsOrderTrans.FullPallet  == NoYes::No
            &&    wmsOrderTrans.OrderType   == WMSOrderType::OrderPick
            &&   (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated
            ||    wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Started)
        #InventDimExistsJoin(wmsOrderTrans.inventDimId,inventDimJoin,_inventDim,_inventDimParm);

        qtyPickRouteInProgress      = wmsOrderTrans.Qty;
        pdsCWQtyPickRouteInProgress = wmsOrderTrans.PdsCWQty;

        return [qtyPickRouteInProgress, pdsCWQtyPickRouteInProgress];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddSortDefault</Name>
				<Source><![CDATA[
    static public void queryAddSortDefault(
        QueryBuildDataSource    _qbS,
        OrderMode               _orderMode = OrderMode::OrderBy)
    {
        _qbS.sortClear();
        _qbS.orderMode(_orderMode);

        _qbS.addSortField(fieldNum(WMSOrderTrans, RouteId));
        _qbS.addSortField(fieldNum(WMSOrderTrans, IsReserved),SortOrder::Descending);//un-reserved should end up in the bottom

        _qbS.addSortField(fieldNum(WMSOrderTrans, ItemSortCode));
        _qbS.addSortField(fieldNum(WMSOrderTrans, SortCode));
        _qbS.addSortField(fieldNum(WMSOrderTrans, ItemId)); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeToInventDimFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the inventory to dimensions.
    /// </summary>
    /// <remarks>
    /// This method copies the from tracking dimensions value to the to tracking dimensions value.
    /// </remarks>
    public void changeToInventDimFromInventDim()
    {
        InventDim toInventDimNew = this.toInventDim();

        toInventDimNew.initFromInventDim(this.inventDim(), InventDim::dimTrackingDimFieldList());
        this.ToInventDimId = InventDim::findOrCreate(toInventDimNew).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingHanddleDeliveryControl</Name>
				<Source><![CDATA[
    static private boolean kittingHanddleDeliveryControl(KittingIDeliveryControlHandler _kittingDeliveryControlHandler, WMSOrderTrans _wmsOrderTrans, WMSOrderTransMultiUpdateHandleable _handler)
    {
        return !_kittingDeliveryControlHandler || !_kittingDeliveryControlHandler.add(_wmsOrderTrans, _handler);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123939</DeveloperDocumentation>
	<Label>@SYS54066</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>orderId</TitleField1>
	<TitleField2>itemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>OrderIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DispatchTransaction</Name>
			<Label>@SYS50649</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>orderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>orderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expeditionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isReserved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Internal</Name>
			<Label>@SYS15017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventDimFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>toInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>postTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>preReserved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemIdentification</Name>
			<Label>@SYS21828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PalletTransport</Name>
			<Label>@SYS54254</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>routeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCW</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWZeroCWLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Pick</Name>
			<Label>@SYS77773</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemSortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expectedExpeditionTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>operatorWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expeditionTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickInfo</Name>
			<Label>@SYS54080</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemSortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sortCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expectedExpeditionTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>expeditionTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>operatorWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickingLine</Name>
			<Label>@SYS50406</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>routeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reserved</Name>
			<Label>@SYS7623</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>isReserved</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Shipment</Name>
			<Label>@SYS50389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentIdOriginal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dlvDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipmentGroupingReference</Name>
			<Label>@SYS4000068</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shipmentGroupingTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentGroupingRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>customer</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WMSCustomer</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Label>@SYS7924</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>dlvDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSDlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>expectedExpeditionTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSExpeditionTime</ExtendedDataType>
			<Label>@SYS51127</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>expeditionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSExpeditionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>expeditionTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSExpeditionTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>fullPallet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSFullPallet</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>inventDimFixed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimFixed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventTransRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>inventTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isReserved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSIsReserved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>itemSortCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSSortCode</ExtendedDataType>
			<Label>@SYS50408</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>operatorWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>optimizedPicking</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSOptimizedPicking</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>orderId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>orderType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSOrderType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>palletIdPicked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPickPalletId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsCWZeroCWLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWZeroCWLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>postTransfer</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6098</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>preReserved</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54504</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPickingLineQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>routeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSRouteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shipmentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shipmentIdOriginal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentIdOriginal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>sortCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSSortCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>toInventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>volume</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Volume</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OrderIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>orderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShipmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>shipmentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RouteIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>routeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>itemSortCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>sortCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>itemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>expeditionStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>isReserved</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>dimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>inventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>toDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>toInventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShipmentOnlyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>shipmentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>FormletterJournalTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>routeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>routeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>dlvDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>routeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>routeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>itemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>inventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigOrderId</MapField>
					<MapFieldTo>inventTransRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>inventTransId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>customer</Name>
					<Field>customer</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_WMSOrderTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>operatorWorker</Name>
					<Field>operatorWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123902</EntityRelationshipRole>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSOrderTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventDimId</Name>
					<Field>inventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InvenTransferTableShip</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123859</EntityRelationshipRole>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::TransferOrderShip</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123903</EntityRelationshipRole>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OriginalShipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WMSShipment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OriginalShipment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSOrderTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>shipmentIdOriginal</Name>
					<SourceEDT>WMSShipmentIdOriginal</SourceEDT>
					<Field>shipmentIdOriginal</Field>
					<RelatedField>shipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ShipmentIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123940</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123841</EntityRelationshipRole>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123518</EntityRelationshipRole>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123905</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123519</EntityRelationshipRole>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransRefId</Name>
					<Field>inventTransRefId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>inventTransType</Name>
					<Field>inventTransType</Field>
					<ValueStr>InventTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ToInventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSOrderTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>toInventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>toInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123874</EntityRelationshipRole>
			<RelatedTable>WMSOrder</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>orderId</Name>
					<Field>orderId</Field>
					<RelatedField>orderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSPickingRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123941</EntityRelationshipRole>
			<RelatedTable>WMSPickingRoute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>fullPallet</Name>
					<Field>fullPallet</Field>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>routeId</Name>
					<Field>routeId</Field>
					<RelatedField>pickingRouteID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSShipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123942</EntityRelationshipRole>
			<RelatedTable>WMSShipment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSShipment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSOrderTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>shipmentId</Name>
					<Field>shipmentId</Field>
					<RelatedField>shipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSTransport</Name>
			<EntityRelationshipRole>@SYS123876</EntityRelationshipRole>
			<RelatedTable>WMSTransport</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>routeId</Name>
					<Field>routeId</Field>
					<RelatedField>transportId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>fullPallet</Name>
					<Field>fullPallet</Field>
					<ValueStr>NoYes::Yes</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>