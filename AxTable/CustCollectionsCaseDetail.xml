<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsCaseDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionsCaseDetail extends CaseDetailBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeCase</Name>
				<Source><![CDATA[
    public static void closeCase(RefRecId _caseRecId, RefRecId _custTableRecId, boolean _shouldResolveDisputedTransactions)
    {
        CustCollectionsCaseDetail custCollectionsCaseDetail;
        CustCollectionsCaseDetail localDetail;
        CaseAssociation caseAssociation;
        CustTrans custTrans;
        CustVendDisputeHelper disputeHelper;
        smmActivities activity;

        ttsbegin;

        select firstonly crosscompany custCollectionsCaseDetail
            where custCollectionsCaseDetail.RecId == _caseRecId;

        if (!custCollectionsCaseDetail)
        {
            throw error("@SYS87836");
        }

        changecompany(custCollectionsCaseDetail.company())
        {
            select firstonly forupdate localDetail
                where localDetail.RecId == _caseRecId;

            localDetail.Status = CaseStatus::Closed;
            localDetail.ClosedDateTime = DateTimeUtil::getSystemDateTime();
            localDetail.ClosedBy = HcmWorker::find(HcmWorker::userId2Worker(curUserId())).PersonnelNumber;
            localDetail.update();

            if (_shouldResolveDisputedTransactions)
            {
                while select RefRecId, CaseRecId, EntityType from caseAssociation
                    where caseAssociation.CaseRecId == _caseRecId
                        && caseAssociation.EntityType == CaseEntityType::CustTrans
                {
                    select firstonly DataAreaId, RecId from custTrans
                        where custTrans.RecId == caseAssociation.RefRecId;

                    disputeHelper = CustVendDisputeHelper::construct(
                    custTrans.company(),
                    tableNum(CustTrans),
                    custTrans.RecId);

                    if (disputeHelper.parmStatus() == CustVendDisputeStatus::Disputed)
                    {
                        disputeHelper.parmStatus(CustVendDisputeStatus::Resolved);
                        disputeHelper.update();
                    }
                }
            }

            // Create follow up activity as needed. This call must occur after the case
            // is closed since the method determines what type of activity to create
            // based upon the case status.
            activity = CustCollectionsCaseDetail::createActivity(localDetail, _custTableRecId, true);

            if (activity.Category == smmActivityCategory::Event || activity.Category == smmActivityCategory::Action)
            {
                activity.Closed = true;
                activity.write();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    public static smmActivities createActivity(CaseDetailBase _caseDetail, RefRecId _custTableRecId, boolean _setResponsible = false)
    {
        smmActivities activity = smmActivityCreate::createActivity(_caseDetail);

        if (activity && _custTableRecId)
        {
            activity.insertParentLink(smmActivityParentType::Collections, _custTableRecId);
            activity.insertParentLink(smmActivityParentType::Customer, _custTableRecId);
        }
        if (activity && _setResponsible)
        {
            activity.ResponsibleWorker = HcmWorker::userId2Worker(curUserId());
            activity.write();
        }

        return activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCase</Name>
				<Source><![CDATA[
    public static recId createCase(RefRecId _caseCategoryRecId, DirPartyRecId _partyRecId, Description _description)
    {
        CustCollectionsCaseDetail custCollectionsCaseDetail;
        NumberSeq caseNumberSequence;
        CustTable custTable;

        ttsbegin;
        caseNumberSequence = NumberSeq::newGetNumFromId(NumberSeqReference::findReference(extendedTypeNum(CaseId)).NumberSequenceId);

        custCollectionsCaseDetail.initFromCategory(CaseCategoryHierarchyDetail::find(_caseCategoryRecId));
        custCollectionsCaseDetail.CaseId = caseNumberSequence.num();
        custCollectionsCaseDetail.Description = _description;
        custCollectionsCaseDetail.Party = _partyRecId;
        custCollectionsCaseDetail.Status = CaseStatus::InProcess;
        custCollectionsCaseDetail.CategoryRecId = _caseCategoryRecId;
        custCollectionsCaseDetail.OwnerWorker = HcmWorker::userId2Worker(curUserId());

        custCollectionsCaseDetail.insert();

        custTable = CustTable::findByPartyRecId(_partyRecId);

        // Create the association to customer
        smmAssociationLink::createCaseAssociation(NoYes::Yes, custTable, custCollectionsCaseDetail.RecId);

        // Create follow up activity as needed. This call must occur after the case
        // is created since the method determines what type of activity to create
        // based upon the case status.
        CustCollectionsCaseDetail::createActivity(custCollectionsCaseDetail, custTable.RecId);
        ttscommit;

        return custCollectionsCaseDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RefRecId _caseRecId)
    {
        boolean doesExist = false;

        doesExist = (select firstonly RecId
            from custCollectionsCaseDetail
            where custCollectionsCaseDetail.RecId == _caseRecId).RecId != 0;

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static CustCollectionsCaseDetail find(recId _caseRecId, boolean _forUpdate = false)
    {
        CustCollectionsCaseDetail custCollectionsCaseDetail;

        if (_forUpdate)
        {
            custCollectionsCaseDetail.selectForUpdate (_forUpdate);
        }

        if (_caseRecId)
        {
            select firstonly custCollectionsCaseDetail
                where custCollectionsCaseDetail.RecId == _caseRecId;
        }

        return custCollectionsCaseDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCaseId</Name>
				<Source><![CDATA[
    static CustCollectionsCaseDetail findByCaseId(CaseId _caseId, boolean _forUpdate = false)
    {
        CustCollectionsCaseDetail custCollectionsCaseDetail;

        if (_forUpdate)
        {
            custCollectionsCaseDetail.selectForUpdate (_forUpdate);
        }

        if (_caseId)
        {
            select firstonly custCollectionsCaseDetail
                where custCollectionsCaseDetail.CaseId == _caseId;
        }

        return custCollectionsCaseDetail;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS304960</DeveloperDocumentation>
	<Label>@SYS304959</Label>
	<TableGroup>Main</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>CaseDetailBase</Extends>
	<Modules>AccountsReceivable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields />
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CaseDetailBase1_5563</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CaseDetailBase</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CaseDetailBase1_5563</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>CustCollectionsCaseDetail</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>