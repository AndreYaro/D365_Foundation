<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanTemplate</c> table.
    /// </summary>
    /// <param name="_budgetPlanTemplateRecId"> The record ID of the record to find. </param>
    /// <param name="_forUpdate"> A Boolean value that indicates whether to read the record for update; optional. </param>
    /// <param name="_concurrencyModel"> The concurrency model option to use when the record is read; optional. </param>
    /// <returns> A record in the <c>BudgetPlanTemplate</c> table; otherwise, an empty record. </returns>
    public static BudgetPlanTemplate find(
        BudgetPlanTemplateRecId     _budgetPlanTemplateRecId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanTemplate budgetPlanTemplate;

        if (_budgetPlanTemplateRecId)
        {
            budgetPlanTemplate.selectForUpdate(_forUpdate);

            if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanTemplate.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanTemplate
                where budgetPlanTemplate.RecId == _budgetPlanTemplateRecId;
        }

        return budgetPlanTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTemplateRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanTemplate</c> table for a given template record ID.
    /// </summary>
    /// <param name = "_docuTemplateRecId"></param>
    /// <param name = "_forUpdate"> A Boolean value that indicates whether to read the record for update; optional. </param>
    /// <param name = "_concurrencyModel"> The concurrency model option to use when the record is read; optional. </param>
    /// <returns> A record in the <c>BudgetPlanTemplate</c> table; otherwise, an empty record. </returns>
    public static BudgetPlanTemplate findByTemplateRecId(
        RecId               _docuTemplateRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanTemplate budgetPlanTemplate;

        if (_docuTemplateRecId)
        {
            budgetPlanTemplate.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanTemplate.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanTemplate
                where budgetPlanTemplate.DocuTemplate == _docuTemplateRecId;
        }

        return budgetPlanTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the delete action for a <c>BudgetPlanTemplate</c> record.
    /// </summary>
    public void delete()
    {
        RecId selectedTemplateRecId = this.DocuTemplate;

        super();

        DocuTemplate currentTemplate;

        select firstonly forupdate currentTemplate
                where currentTemplate.RecId == selectedTemplateRecId;

        if (currentTemplate)
        {
            ttsbegin;
            currentTemplate.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDocuTemplateDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanTemplate</c> table for a given display name.
    /// </summary>
    /// <param name = "_displayName"> The <c>DocuTemplateDisplayName</c> value. </param>
    /// <returns> The <c>BudgetPlanTemplate</c> record. </returns>
    public static BudgetPlanTemplate findByDocuTemplateDisplayName(DocuTemplateDisplayName _displayName)
    {
        BudgetPlanTemplate template;

        if (_displayName)
        {
            DocuTemplate docuTemplate;

            select firstonly template
                exists join docuTemplate
                    where docuTemplate.RecId == template.DocuTemplate
                        && docuTemplate.DisplayName == _displayName;
        }

        return template;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayNameByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>DocuTemplateDisplayName</c> value for a given <c>BudgetPlanTemplate</c> record ID.
    /// </summary>
    /// <param name = "_budgetPlanJustificationTemplateRecId"> The <c>BudgetPlanTemplateRecId</c> value. </param>
    /// <returns> The <c>DocuTemplateDisplayName</c> of the template. </returns>
    public static DocuTemplateDisplayName getDisplayNameByRecId(BudgetPlanTemplateRecId _budgetPlanJustificationTemplateRecId)
    {
        DocuTemplate docuTemplate;

        if (_budgetPlanJustificationTemplateRecId)
        {
            BudgetPlanTemplate budgetPlanTemplate;

            select firstonly displayName from docuTemplate
                exists join budgetPlanTemplate
                    where docuTemplate.RecId == budgetPlanTemplate.DocuTemplate
                        && budgetPlanTemplate.RecId == _budgetPlanJustificationTemplateRecId;
        }

        return docuTemplate.DisplayName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70239</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationTemplate</FormRef>
	<Label>@GLS70237</Label>
	<SingularLabel>@GLS70238</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>DocuTemplate</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>UsedOnProcessRestricted</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>BudgetPlanTemplate</Relation>
			<Table>BudgetPlanningProcess</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DocuTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RecId</ExtendedDataType>
			<Label>@Budget:BudgetPlan_DocuTemplateForeignKey</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocuTemplateRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DocuTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocuTemplate</Name>
					<Field>DocuTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>