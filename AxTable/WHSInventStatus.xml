<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the inventory status.
    /// </summary>
    public void delete()
    {
        if (WHSInventStatus::statusExists(this.InventStatusId))
        {
            throw error("@WAX3360");
        }

        super();

        WHSInventStatusCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSInventStatus, InventStatusBlocking):
                    if (this.InventStatusId && WHSInventStatus::statusExists(this.InventStatusId))
                    {
                        ret = checkFailed("@WAX3360");
                    }

                    if (this.InventStatusId && this.InventStatusBlocking && WHSInventStatus::isDefaultingStatus(this.InventStatusId))
                    {
                        ret = checkFailed("@WAX3361");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreateForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a forecast can be created with the given status.
    /// </summary>
    /// <param name="_inventStatusId">
    ///    The inventory status ID.
    /// </param>
    /// <param name="_showWarning">
    ///    A Boolean value that indicates if a a warning should be shown in the infolog; optional.
    /// </param>
    /// <returns>
    ///    true if a forecast can be created with the given status; otherwise, false.
    /// </returns>
    public static boolean allowCreateForecast(WHSInventStatusId _inventStatusId, boolean _showWarning = true)
    {
        return WHSInventStatus::allowCreatePlannedOrderOrForecast(_inventStatusId,strFmt("@WAX4883",_inventStatusId),_showWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreatePlannedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a planned order can be created with the given status.
    /// </summary>
    /// <param name="_inventStatusId">
    ///    The inventory status ID.
    /// </param>
    /// <param name="_showWarning">
    ///    A Boolean value that indicates if a a warning should be shown in the infolog; optional.
    /// </param>
    /// <returns>
    ///    true if a planned order can be created with the given status; otherwise, false.
    /// </returns>
    public static boolean allowCreatePlannedOrder(WHSInventStatusId _inventStatusId, boolean _showWarning = true)
    {
        return WHSInventStatus::allowCreatePlannedOrderOrForecast(_inventStatusId,strFmt("@WAX4884",_inventStatusId),_showWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreatePlannedOrderOrForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a planned order or forecast can be created with the given status.
    /// </summary>
    /// <param name="_inventStatusId">
    ///    The inventory status ID.
    /// </param>
    /// <param name="_warningIfNotAllowed">
    ///    A warning message to showifcreatin a planned order or forecast is not allowed.
    /// </param>
    /// <param name="_showWarning">
    ///    A Boolean value that indicates if a a warning should be shown in the infolog; optional.
    /// </param>
    /// <returns>
    ///    true if a planned order or  forecast can be created with the given status; otherwise, false.
    /// </returns>
    private static boolean allowCreatePlannedOrderOrForecast(WHSInventStatusId _inventStatusId, str _warningIfNotAllowed, boolean _showWarning = true)
    {
        WHSInventStatus     whsInventStatus;
        boolean             result = true;

        if (_inventStatusId)
        {
            whsInventStatus = WHSInventStatus::find(_inventStatusId);

            if (whsInventStatus.RecId != 0 && whsInventStatus.InventStatusBlocking)
            {
                if (_showWarning)
                {
                    result = checkFailed(_warningIfNotAllowed);
                }
                else
                {
                    result = false;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllStatusAvail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether all status are fully available.
    /// </summary>
    /// <param name="_fromStatus">
    /// Initial status.
    /// </param>
    /// <param name="_toStatus">
    /// Final status.
    /// </param>
    /// <param name="_siteId">
    /// Site id.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id.
    /// </param>
    /// <returns>
    /// True if all status are fully available.
    /// </returns>
    public static boolean checkAllStatusAvail(WHSInventStatus _fromStatus, WHSInventStatus _toStatus, InventSiteId _siteId, InventLocationId _inventLocationId)
    {
        WHSInventReserve inventReserve;
        WHSInventReserve inventReserveWh;
        InventDim inventDimWh;
        InventDim inventDim;
        InventDim inventReserveDim;
        InventDimParm inventDimParm;
        boolean goodToBlocking;
        boolean ret;

        goodToBlocking = (!_fromStatus.InventStatusBlocking && _fromStatus.InventStatusBlocking != _toStatus.InventStatusBlocking);

        inventDim.InventSiteId = _siteId;
        inventDim.InventLocationId = _inventLocationId;
        inventDim.InventStatusId = _fromStatus.InventStatusId;
        inventDim = InventDim::findOrCreate(inventDim);

        inventDimParm.initFromInventDim(inventDim);

        if (goodToBlocking)
        {
            if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
            {
                //Check all levels of reservation from Item to Status
                select firstonly RecId from inventReserve
                    where #InventDimFieldsFilter(inventReserve, inventDim, inventDimParm)
                        && inventReserve.ReservPhysical > 0
                        && inventReserve.IsItemCatchWeightEnabled == NoYes::No;
            }
            else
            {
                //Check all levels of reservation from Item to Status
                select firstonly RecId from inventReserve
                    #InventDimJoin(inventReserve.inventDimId, inventReserveDim, inventDim, inventDimParm)
                && inventReserve.ReservPhysical > 0
                && inventReserve.IsItemCatchWeightEnabled == NoYes::No;
            }

            if (!inventReserve.RecId)
            {
                // Check if any items are less available at WH level than at status level
                inventDimWh.initFromInventDim(inventDim);
                inventDimWh.InventStatusId = '';
                inventDimWh = InventDim::findOrCreate(inventDim);

                select firstonly RecId from inventReserve
                    where inventReserve.IsItemCatchWeightEnabled == NoYes::No
                    join InventDimId, ReservPhysical from inventReserveWh
                    where inventReserve.InventDimId == inventDim.InventDimId
                        && inventReserveWh.InventDimId == inventDimWh.InventDimId
                        && inventReserve.ItemId == inventReserveWh.ItemId
                        && inventReserve.AvailPhysical > inventReserveWh.AvailPhysical;
            }

            ret = inventReserve.RecId ? false : true;
        }
        else if (_fromStatus.InventStatusBlocking)
        {
            if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
            {
                // Check if any reserved at all (will be wmsLocation level or below)
                select firstonly RecId from inventReserve
                    where #InventDimFieldsFilter(inventReserve, inventDim, inventDimParm)
                        && inventReserve.ReservPhysical > 0
                        && inventReserve.IsItemCatchWeightEnabled == NoYes::No;
            }
            else
            {
                // Check if any reserved at all (will be wmsLocation level or below)
                select firstonly RecId from inventReserve
                    #InventDimJoin(inventReserve.inventDimId, inventReserveDim, inventDim, inventDimParm)
                && inventReserve.ReservPhysical > 0
                && inventReserve.IsItemCatchWeightEnabled == NoYes::No;
            }

            ret = inventReserve.RecId ? false : true;
        }
        else
        {
            select firstonly RecId from inventReserve
                where inventReserve.InventDimId     == inventDim.InventDimId
                    && inventReserve.ReservPhysical >  0
                    && inventReserve.IsItemCatchWeightEnabled == NoYes::No;

            ret = inventReserve.RecId ? false : true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Takes an inventDim and converts all inventory that is within that dim to the new status.
    /// </summary>
    /// <param name="_inventDim">
    ///     The <c>InventDim</c> ID that is being converted.
    /// </param>
    /// <param name="_newStatus">
    ///     The new inventory status ID.
    /// </param>
    /// <param name="_itemId">
    ///     The item ID. Optional parameter that is used to convert only inventory for that item.
    /// </param>
    public static void convertStatus(InventDim _inventDim, WHSInventStatusId _newStatus, ItemId _itemId = '')
    {
        #AviFiles

        InventDimParm inventDimParm;
        InventDim inventReserveInventDim;
        InventTable inventTable;
        InventDim statusLevelDim;
        InventDim newInventDim;
        WHSInventReserve inventReserve;
        WHSInventReserve statusLevelInventReserve;
        ItemId prevItemId;
        WHSInventStatusId prevStatusId;
        boolean openStatus;
        WHSWorkQuarantine quarantineWork;
        SysOperationProgress progessBar;

        if (_itemId != ''
            && PdsGlobal::pdsIsCWItem(_itemId))
        {
            warning(strfmt("@WAX:WarningCWItemStatusChange", _itemId));
            return;
        }

        ttsbegin;

        inventDimParm.initFromInventDim(_inventDim);

        
        if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
        {
            select count(RecId) from inventReserve
                where inventReserve.ReservPhysical == 0
                    && inventReserve.AvailPhysical >  0
                    && inventReserve.IsItemCatchWeightEnabled == NoYes::No
                    && #InventDimFieldsFilter(inventReserve, _inventDim, inventDimParm)
                    && inventReserve.wmsLocationId != ''
                    && (inventReserve.ItemId == _itemId || !_itemId)
                join inventTable
                    where inventTable.ItemId == inventReserve.ItemId;
        }
        else
        {
            select count(RecId) from inventReserve
                where inventReserve.ReservPhysical == 0
                    && inventReserve.AvailPhysical >  0
                    && inventReserve.IsItemCatchWeightEnabled == NoYes::No
                    #InventDimJoin(inventReserve.inventDimId, inventReserveInventDim, _inventDim, inventDimParm)
                    && inventReserveInventDim.wmsLocationId != ''
                    && (inventReserve.ItemId == _itemId || !_itemId)
                join inventTable
                    where inventTable.ItemId == inventReserve.ItemId;
        }

        progessBar = SysOperationProgress::newGeneral(#AviUpdate, "@WAX3364", inventReserve.RecId);

        while #InventDimSelect(inventReserveInventDim, _inventDim, inventDimParm)
            join inventReserve
                order by inventReserve.ItemId, inventReserveInventDim.InventStatusId
            where inventReserve.InventDimId == inventReserveInventDim.InventDimId
                && inventReserve.ReservPhysical == 0
                && inventReserve.AvailPhysical >  0
                && inventReserveInventDim.wmsLocationId != ''
                && (inventReserve.ItemId == _itemId || !_itemId)
                && inventReserve.IsItemCatchWeightEnabled == NoYes::No
            join inventTable
                where inventTable.ItemId == inventReserve.ItemId
        {
            // Check if serial primary stocking
            // Won't work if they somehow have available inventory with serial specified but dimGroup doesn't have primary active
            // Currently Serial can be assigned at picking (work) or packing containers. Both cases inventory should not be available with serial at any point.
            if (inventReserveInventDim.InventSerialId || !EcoResTrackingDimGroupSetup::newDimensionGroup(inventTable.trackingDimensionGroup()).getFieldSetup(fieldNum(InventDim, InventSerialId)).isPrimaryStockingEnabled())
            {
                // Check if batch controlled and has batch
                if (inventReserveInventDim.InventBatchId || !inventTable.whsBatchActive())
                {
                    // Check if location is license plate controlled and has LP
                    if (inventReserveInventDim.LicensePlateId || !inventReserveInventDim.wmsLocation().whsLocationIsLPControlled())
                    {
                        if (prevItemId != inventTable.ItemId || prevStatusId != inventReserveInventDim.InventStatusId)
                        {
                            // Check that the status isn't reserved
                            statusLevelDim.InventSiteId = inventReserveInventDim.InventSiteId;
                            statusLevelDim.InventLocationId = inventReserveInventDim.InventLocationId;
                            statusLevelDim.InventStatusId = inventReserveInventDim.InventStatusId;
                            statusLevelDim = InventDim::findOrCreate(statusLevelDim);

                            select firstonly ReservPhysical from statusLevelInventReserve
                                where statusLevelInventReserve.InventDimId == statusLevelDim.InventDimId
                                   && statusLevelInventReserve.ItemId == inventTable.ItemId;

                            if (statusLevelInventReserve.ReservPhysical == 0)
                            {
                                openStatus = true;
                            }
                            else
                            {
                                openStatus = false;
                            }
                        }

                        if (openStatus)
                        {
                            // Create New status dim from old dim
                            newInventDim.data(inventReserveInventDim);
                            newInventDim.InventStatusId = _newStatus;
                            newInventDim = InventDim::findOrCreate(newInventDim);

                            // Create Quarantine work to change the status of inventory.
                            quarantineWork.clear();
                            quarantineWork.setWorkId();
                            quarantineWork.ItemId = inventTable.ItemId;
                            quarantineWork.Qty = inventReserve.AvailPhysical;
                            quarantineWork.InventQtyRemain = quarantineWork.Qty;
                            quarantineWork.TransDateTime = DateTimeUtil::utcNow();
                            quarantineWork.InventDimIdFrom = inventReserve.InventDimId;
                            quarantineWork.InventDimIdTo = newInventDim.InventDimId;
                            quarantineWork.insert();
                            WHSWorkQuarantineExecutor::newWorkQuarantine(quarantineWork, quarantineWork.InventQtyRemain, false).execute();
                        }

                        prevItemId = inventTable.ItemId;
                        prevStatusId = inventReserveInventDim.InventStatusId;
                        progessBar.incCount();
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsInventStatus</c> record exists.
    /// </summary>
    /// <param name="_inventStatusId">
    /// Status id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSInventStatusId _inventStatusId)
    {
        return (_inventStatusId) &&
               (select firstonly RecId from whsInventStatus
                    where whsInventStatus.InventStatusId == _inventStatusId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSInventStatus</c> record with given parameters.
    /// </summary>
    /// <param name="_inventStatusId">
    /// Status id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSInventStatus find(WHSInventStatusId _inventStatusId, boolean _forupdate = false)
    {
        WHSInventStatus inventStatus;

        if (_inventStatusId)
        {
            inventStatus.selectForUpdate(_forupdate);

            select firstonly inventStatus
                where inventStatus.InventStatusId == _inventStatusId;
        }

        return inventStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSInventStatus</c> record by name.
    /// </summary>
    /// <param name="_name">
    /// Name of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [SysObsolete('This method should not be used since Name is not unique. Instead use find() method', false, 31\01\2016)]
    public static WHSInventStatus findByName(Name _name, boolean _forupdate = false)
    {
        WHSInventStatus inventStatus;

        if (_name)
        {
            inventStatus.selectForUpdate(_forupdate);

            select firstonly inventStatus
                where inventStatus.Name == _name;
        }

        return inventStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a particular status should invoke inventory blocking
    /// </summary>
    /// <param name="_inventStatusId">
    /// The inventory status to check
    /// </param>
    /// <returns>
    /// Returns true if the status should invoke inventory blocking
    /// </returns>
    public static boolean isBlockingStatus(WHSInventStatusId  _inventStatusId)
    {
        return _inventStatusId && (select firstonly InventStatusBlocking from whsInventStatus
                                        where whsInventStatus.InventStatusId == _inventStatusId).InventStatusBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a status is a default status.
    /// </summary>
    /// <param name="_statusId">
    /// Id of the status.
    /// </param>
    /// <returns>
    /// True if the status is a default status.
    /// </returns>
    public static boolean isDefaultingStatus(WHSInventStatusId _statusId)
    {
        if ((select firstonly RecId from inventLocation
                where inventLocation.DefaultStatusId == _statusId).RecId != 0)
        {
            return true;
        }

        if ((select firstonly RecId from InventSite
                where InventSite.DefaultInventStatusId == _statusId).RecId != 0)
        {
            return true;
        }

        if (WHSParameters::find().DefaultStatusId == _statusId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a lookup on <c>WHSInventStatus</c> with the option to exclude blocking statuses.
    /// </summary>
    /// <param name="_ctrl">
    ///     The form string control object reference
    /// </param>
    /// <param name="_includeBlocking">
    ///     A <c>NoYes</c> value that determines whether to include blocking statuses in the lookup.
    /// </param>
    public static void lookupInventStatus(FormStringControl _ctrl, NoYes _includeBlocking = NoYes::Yes)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSInventStatus), _ctrl);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(WHSInventStatus));

        queryBuildDataSource.addRange(fieldNum(WHSInventStatus, InventStatusBlocking)).value(SysQuery::value(_includeBlocking));

        sysTableLookup.addLookupfield(fieldNum(WHSInventStatus, InventStatusId));
        sysTableLookup.addLookupfield(fieldNum(WHSInventStatus, Name));
        sysTableLookup.addLookupfield(fieldNum(WHSInventStatus, InventStatusBlocking));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a status currently exists.
    /// </summary>
    /// <param name="_inventStatusId">
    /// Id of the status.
    /// </param>
    /// <returns>
    /// True if the status exists.
    /// </returns>
    public static boolean statusExists(WHSInventStatusId _inventStatusId)
    {
        InventSum inventSum;
        InventDim inventDim;
        InventTrans inventTrans;
        boolean ret = true;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.ClosedQty      == NoYes::No
               && inventSum.InventStatusId == _inventStatusId
               && inventSum.PhysicalInvent != 0;
        }
        else
        {
            select firstonly RecId from inventSum
            where inventSum.ClosedQty      == NoYes::No
               && inventSum.PhysicalInvent != 0
            join inventDim
                where inventDim.InventDimId == inventSum.InventDimId
                    && inventDim.InventStatusId == _inventStatusId;
        }

        if (!inventSum.RecId)
        {
            select firstonly RecId from inventTrans
                where (inventTrans.StatusIssue != StatusIssue::Sold
                    && inventTrans.StatusIssue != StatusIssue::None) || (inventTrans.StatusReceipt != StatusReceipt::Purchased
                    && inventTrans.StatusReceipt != StatusReceipt::None)
                join InventDimId, InventStatusId from inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                        && inventDim.InventStatusId == _inventStatusId;

            ret = (inventTrans.RecId != 0);

            // We need this additional check to account for the warehouse inventory stack only for inventory movement scenario for the negative inventory item.
            // Other than that the above checks should be enough.
            if (!ret && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
            {
                WHSInventReserve inventReserve;

                select firstonly RecId from inventReserve
                    where inventReserve.ReservPhysical != 0
                    exists join inventDim
                        where  inventDim.InventDimId == inventReserve.InventDimId
                            && inventDim.InventStatusId == _inventStatusId;

                ret = (inventReserve.RecId != 0);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a warning message in case the inventory status ID value does not exist.
    /// </summary>
    /// <param name="_inventStatusId">
    ///    The inventory status ID
    /// </param>
    /// <returns>
    ///    A warning message in case the inventory status ID value does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist(WHSInventStatusId _inventStatusId)
    {
        return strFmt("@WAX364", _inventStatusId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultInventStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default inventory status from the specified warehouse.
    /// </summary>
    /// <param name="_warehouse">
    /// The specified warehouse that used to default the inventory status.
    /// </param>
    /// <returns>
    /// An <c>WHSInventStatus</c> record if found; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// if the status is not default on the warehoue level
    /// try to get it from the site level. If failed or the warehouse is not specified, try to get the default status from
    /// the warehouse parameters
    /// </remarks>
    public static WHSInventStatus getDefaultInventStatus(InventLocationId _warehouse = '')
    {
        WHSInventStatus inventStatus;
        InventLocation  inventLocation;

        if (_warehouse)
        {
            inventLocation = InventLocation::find(_warehouse);
            inventStatus = WHSInventStatus::find(inventLocation.DefaultStatusId);
            if (!inventStatus)
            {
                inventStatus = WHSInventStatus::find(inventLocation.inventSite().DefaultInventStatusId);
            }
        }

        if (!inventStatus)
        {
            inventStatus = WHSInventStatus::find(WHSParameters::find().DefaultStatusId);
        }

        return inventStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the primary key field of this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        InventDim inventDim;
        WHSInventStatusId origWHSInventStatusId = this.orig().InventStatusId;

        ttsBegin;

        while select forupdate inventDim
            where inventDim.InventStatusId == origWHSInventStatusId
        {
            inventDim.InventStatusId = this.InventStatusId;
            inventDim.update(true);
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///	 Insert inventory status.
    /// </summary>
    public void insert()
    {
        super();

        WHSInventStatusCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4372</DeveloperDocumentation>
	<FormRef>WHSInventStatus</FormRef>
	<Label>@WAX357</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InventStatusId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>InventStatusIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventStatusIdIdx</PrimaryIndex>
	<ReplacementKey>InventStatusIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WHSAccountItemStatusDefault</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WHSAccountItemStatusDefault</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventLocation</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventLocation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSParameters</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>WHSParameters</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>VendTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventSite</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventSite</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventStatusBlocking</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventStatusBlocking</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSInventStatusBlocking</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStatusId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSInventStatusId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventStatusIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventStatusId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>