<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InflationAdjJournal_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InflationAdjJournal_MX extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.FromDate = InflationAdjJournal_MX::getFromDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the <c>modifiedField</c> method to allow for actions when a specific field is modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID that identifies the field that has been modified.
    /// </param>
    /// <remarks>
    ///    Populates the posting date field based on the value of the <c>To</c> date field.
    /// </remarks>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(InflationAdjJournal_MX, ToDate):
                this.TransDate = this.ToDate;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for all date validations.
    /// </summary>
    /// <returns>
    /// true if validation succeeds; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Validates the following conditions: a. The from date should be the starting date of the month. b.
    /// The to date should be the ending date of the month. c. The to date cannot be earlier than the from
    /// date. d. The from and the to dates should be in the same calendar year.
    /// </remarks>
    public boolean validateDates()
    {
        boolean ret = true;

        if (this.FromDate && dayofmth(this.FromDate) != 1)
        {
            ret = checkFailed("@SYS312862");
        }

        if (this.ToDate && this.ToDate != endmth(this.ToDate))
        {
            ret = checkFailed("@SYS312863");
        }

        if (this.ToDate < this.FromDate)
        {
            ret = checkFailed("@SYS22806");
        }

        if (year(this.FromDate) != year(this.ToDate))
        {
            ret = checkFailed("@SYS312864");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && !InflationAdjJournal_MX::isLastOpenRecord(this.RecId))
        {
            ret = checkFailed("@SYS313236");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateOpenPostedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates duplicate records in the inflation adjustment journal table for the <c>Open</c> and
    /// <c>Posted</c> status.
    /// </summary>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Indicates whether duplicate records exists for the <c>Open</c> and <c>Posted</c> status, because
    /// duplicate records can be allowed for the <c>Reversed</c> status.
    /// </remarks>
    public boolean validateDuplicateOpenPostedRecords()
    {
        InflationAdjJournal_MX  inflationAdjJournal;
        boolean                 ret = true;

        select count(RecId)
            from inflationAdjJournal;

        if (inflationAdjJournal.RecId > 1
            && this.Status != InflationAdjJournalStatus_MX::Reversed)
        {
            select count(RecId)
                from  inflationAdjJournal
                where inflationAdjJournal.FromDate == this.FromDate
                   && inflationAdjJournal.ToDate   == this.ToDate
                   && inflationAdjJournal.Status   == this.Status;

            if (any2int(inflationAdjJournal.RecId) > 1)
            {
                ret = checkfailed("@SYS318819");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the notes field is changed for a status other than the <c>Open</c> status.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The notes field cannot be changed for a status other than the <c>Open</c> status.
    /// </remarks>
    public boolean validateNotes()
    {
        boolean ret = true;

        if (this.Status != InflationAdjJournalStatus_MX::Open
            && this.orig().Notes != this.Notes)
        {
            ret = checkFailed(strfmt("@SYS313237", fieldid2pname(tablenum(InflationAdjJournal_MX), fieldnum(InflationAdjJournal_MX, Notes))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the posting layer field is changed for a status other than open.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The posting layer field cannot be changed for a status other than open.
    /// </remarks>
    public boolean validatePostingLayer()
    {
        boolean ret = true;

        if (this.Status != InflationAdjJournalStatus_MX::Open
            && this.orig().PostingLayer != this.PostingLayer)
        {
            ret = checkFailed(strfmt("@SYS313237", fieldid2pname(tablenum(InflationAdjJournal_MX), fieldnum(InflationAdjJournal_MX, PostingLayer))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.validateDates();

            ret = this.validatePostingLayer() && ret;

            ret = this.validateNotes() && ret;

            ret = this.validateDuplicateOpenPostedRecords() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForOpenPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>InflationAdjJournal_MX</c> table for a <c>from</c> date value and
    ///    <c>Open</c> status value.
    /// </summary>
    /// <param name="_fromDate">
    ///    The <c>From</c> date value to use to check if a record exists in the open status.
    /// </param>
    /// <returns>
    ///    true if a record exists for a <c>From</c> date value in open status; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is used to check if a record already exists for a From date value in the open status
    ///    and if the user tries to create a new record again. In this scenario, the system prompts an error
    ///    message to the user.
    /// </remarks>
    public static boolean checkForOpenPeriod(FromDate _fromDate)
    {
        InflationAdjJournal_MX inflationAdj;

        select RecId
            from  inflationAdj
            where inflationAdj.FromDate == _fromDate
               && inflationAdj.Status   == InflationAdjJournalStatus_MX::Open;

        return (inflationAdj.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>InflationAdjJournal</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>MainAccount</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        InflationAdjJournal_MX inflationAdjJournal;

        select firstonly
            RecId
        from
            inflationAdjJournal
        where
            inflationAdjJournal.RecId == _recId;

        return inflationAdjJournal != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any record exists in the <c>InflationAdjJournal_MX</c> table.
    /// </summary>
    /// <returns>
    /// true if any record exist in the table; otherwise, false.
    /// </returns>
    public static boolean existsRecord()
    {
        InflationAdjJournal_MX  inflationAdj;

        select firstonly RecId
            from  inflationAdj;

        return (inflationAdj.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InflationAdjJournal_MX</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>InflationAdjJournal_MX</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InflationAdjJournal_MX</c> table; otherwise, an empty record.
    /// </returns>
    public static InflationAdjJournal_MX find(
        RecId            _recId,
        boolean          _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        InflationAdjJournal_MX inflationAdjJournal;

        inflationAdjJournal.selectForUpdate(_forUpdate);
        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            inflationAdjJournal.concurrencyModel(_concurrencyModel);
        }

        select firstonly inflationAdjJournal
            where inflationAdjJournal.RecId == _recId;

        return inflationAdjJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>From</c> date value to be defaulted.
    /// </summary>
    /// <returns>
    ///    A <c>From</c> date value based on the status of the previous record.
    /// </returns>
    public static FromDate getFromDate()
    {
        InflationAdjJournal_MX  inflationAdjJournal;
        FromDate                frmDt;

        while select reverse FromDate, ToDate, Status
            from  inflationAdjJournal
        {
            if (inflationAdjJournal.Status == InflationAdjJournalStatus_MX::Reversed)
            {
                frmDt = inflationAdjJournal.FromDate;
            }
            else
            {
                break;
            }
        }

        if (!frmDt)
        {
            if (inflationAdjJournal)
            {
                frmDt = inflationAdjJournal.ToDate + 1;
            }
            else
            {
                frmDt = dateNull();
            }
        }

        return frmDt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInflationProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an inflation adjustment has been processed for a particular month and year.
    /// </summary>
    /// <param name="_month">
    ///    The month of the INPC rate table.
    /// </param>
    /// <param name="_year">
    ///    The year of the INPC rate table.
    /// </param>
    /// <returns>
    ///    true when an inflation adjustment has been processed for a particular month and year; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    The monthly INPC rates can be edited or deleted only when a processed record does not exist for a
    ///    particular month and year.
    /// </remarks>
    public static boolean isInflationProcessed(
        int _month,
        int _year)
    {
        InflationAdjJournal_MX inflationAdjJournal;
        FromDate               fromDate;

        fromDate = mkdate(1, _month, _year);

        select firstonly RecId
            from inflationAdjJournal
            where inflationAdjJournal.Status    == InflationAdjJournalStatus_MX::Posted
               && inflationAdjJournal.FromDate  <= fromDate
               && inflationAdjJournal.ToDate    >= endmth(fromDate);

        return (inflationAdjJournal.RecId!=0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastOpenRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record is the last record with the <c>Open</c> status value.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>recId</c> value of the current record.
    /// </param>
    /// <returns>
    ///    true if the record is the last record with the <c>Open</c> status value; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Checks whether the last record in the table has an <c>Open</c> status value. If it exists then
    ///    deletion is allowed.
    /// </remarks>
    public static boolean isLastOpenRecord(RecId _recId)
    {
        InflationAdjJournal_MX  inflationAdj;

        if (_recId == 0)
        {
            return false;
        }

        select RecId
            from inflationAdj
            order by FromDate desc, Status desc
            where inflationAdj.Status == InflationAdjJournalStatus_MX::Open;

        return (inflationAdj.RecId == _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastPostedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the reverse order is in the <c>Posted</c> status.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value of the current record.
    /// </param>
    /// <returns>
    /// true if the last record in reverse order exists in posted status; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Indicates whether the records in reverse order in the table has an <c>Posted</c> status. If it
    /// exists, then a reversal is allowed; otherwise, a reversal is not allowed.
    /// </remarks>
    public static boolean isLastPostedRecord(RecId  _recId)
    {
        InflationAdjJournal_MX  inflationAdj;

        if (_recId == 0)
        {
            return false;
        }

        while select Status, RecId
            from  inflationAdj
            order by FromDate desc, Status desc
        {
            if (inflationAdj.Status == InflationAdjJournalStatus_MX::Posted)
            {
                break;
            }
        }

        return (inflationAdj.Status == InflationAdjJournalStatus_MX::Posted
                && _recId == inflationAdj.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>MX</CountryRegionCodes>
	<DeveloperDocumentation>@SYS328299</DeveloperDocumentation>
	<Label>@SYS312352</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>PostingLayer</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingLayer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>From</Name>
			<Label>@SYS181135</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Notes</Name>
			<Label>@SYS40182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parameters</Name>
			<Label>@SYS28007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingLayer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS92945</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>To</Name>
			<Label>@SYS53942</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS86923</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReversedVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostingLayer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>CurrentOperationsTax</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReversedVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InflationAdjJournalStatus_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS14475</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GeneralJournalEntryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GeneralJournalEntryReverseIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReversedVoucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJournalEntryReverseVoucher</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>GeneralJournalEntry_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>GeneralJournalEntry_1_InflationAdjJournal_MX</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReversedVoucher</Name>
					<Field>ReversedVoucher</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>GeneralJournalEntryVoucher</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>GeneralJournalEntry</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>GeneralJournalEntry_InflationAdjJournal_MX</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>