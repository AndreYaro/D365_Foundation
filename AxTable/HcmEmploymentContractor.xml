<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmEmploymentContractor</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmEmploymentContractor extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = true;

        switch (_fieldIdToCheck)
        {
            case fieldNum(HcmEmploymentContractor, VendorID) :
                if (this.VendorID != '')
                {
                    if (this.VendorDataAreaID !='')
                    {
                        changecompany(this.VendorDataAreaID)
                        {
                            if (!VendTable::exist(this.VendorID))
                            {
                                ret = checkFailed(strFmt("@SYS315908", this.VendorID,
                                                            fieldPName(HcmEmploymentContractor,VendorID),
                                                            tablePName(VendTable)));
                            }
                        }
                    }
                    else
                    {
                        ret = checkFailed(strFmt("@AccountsPayable:VendorDataAreaIDValidation",
                            fieldPName(HcmEmploymentContractor, VendorDataAreaID),
                            fieldPName(HcmEmploymentContractor, VendorID)));
                    }

                }
                break;

            case fieldNum(HcmEmploymentContractor, PurchID) :
                if (this.PurchID != '')
                {
                    if (this.VendorDataAreaID !='')
                    {
                        changecompany(this.VendorDataAreaID)
                        {
                            if (!PurchTable::exist(this.PurchID))
                            {
                                ret = checkFailed(strFmt("@SYS315908", this.PurchID,
                                                                fieldPName(HcmEmploymentContractor,PurchID),
                                                                tablePName(PurchTable)));
                            }
                        }
                    }
                    else
                    {
                        ret = checkFailed(strFmt("@AccountsPayable:VendorDataAreaIDValidation",
                            fieldPName(HcmEmploymentContractor, VendorDataAreaID),
                            fieldPName(HcmEmploymentContractor, PurchID)));
                    }
                }
                break;

            default:
                ret = super(_fieldIdToCheck);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a record ID exists in <c>HcmEmploymentContractor</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    ///     The value of the record ID to check.
    /// </param>
    /// <returns>
    ///     true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmEmploymentContractorRecId _recId)
    {
        boolean ret = true;

        if (!HcmEmploymentContractor::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmEmploymentContractor::txtNotExist(), tableStr(HcmEmploymentContractor)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID in the <c>HcmEmploymentContractor</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check for existence.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(HcmEmploymentContractorRecId _recId)
    {
        utcdatetime validFrom, validTo;
        validFrom = DateTimeUtil::minValue();
        validTo   = DateTimeUtil::maxValue();

        return _recId && (select firstonly ValidTimeState(validFrom, validTo) RecId from hcmEmploymentContractor
                    where hcmEmploymentContractor.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmEmploymentContractor</c> table by using a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>HcmEmploymentContractor</c> table; otherwise, an empty record.
    /// </returns>
    public static HcmEmploymentContractor find(
    HcmEmploymentContractorRecId         _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmEmploymentContractor hcmEmploymentContractor;
        utcdatetime validFrom, validTo;
        validFrom = DateTimeUtil::minValue();
        validTo   = DateTimeUtil::maxValue();

        hcmEmploymentContractor.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmEmploymentContractor.concurrencyModel(_concurrencyModel);
        }

        select firstonly ValidTimeState(validFrom, validTo) hcmEmploymentContractor
             where hcmEmploymentContractor.RecId == _recId;

        return hcmEmploymentContractor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByEmployment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmEmploymentContractor</c> table by using the supplied value of the
    /// <c>Employment</c> field.
    /// </summary>
    /// <param name="_employment">
    /// The value of the <c>Employment</c> field to find.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> field value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// An empty buffer or one or more records from the <c>HcmEmploymentContractor</c> table.
    /// </returns>
    /// <remarks>
    ///  The
    ///  <c>
    ///  _validFrom
    ///  </c>
    ///   and
    ///  <c>
    ///  _validTo
    ///  </c>
    ///   values limit the table selection in the following way.
    ///  <list type="number">
    ///   <item>
    ///   <description>If no values are supplied for both the parameters, they use now. Therefore, the method
    ///   searches for only active records and returns either an empty or a valid record.</description>
    ///   </item>
    ///   <item>
    ///   <description>If only the first parameter value is supplied, the second parameter uses the first
    ///   one. The method searches for active records as of the supplied date time value and returns either
    ///   an empty or a valid record.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    If both parameters are supplied with values, the method searches for records whose <c>validFrom</c>
    ///    and <c>ValidTo</c> values fall in that interval. The method may return multiple records.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public static HcmEmploymentContractor findByEmployment(
    HcmEmploymentRecId  _employment,
    utcdatetime         _validFrom = DateTimeUtil::utcNow(),
    utcdatetime         _validTo   = _validFrom,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmEmploymentContractor hcmEmploymentContractor;

        hcmEmploymentContractor.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmEmploymentContractor.concurrencyModel(_concurrencyModel);
        }

        if (_employment)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmEmploymentContractor
                    where hcmEmploymentContractor.Employment == _employment;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmEmploymentContractor
                    where hcmEmploymentContractor.Employment == _employment;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) hcmEmploymentContractor
                    where hcmEmploymentContractor.Employment == _employment;
            }
        }

        return hcmEmploymentContractor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTimeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmEmploymentContractor</c> table by using a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> field value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmEmploymentContractor</c> table.
    /// </returns>
    /// <remarks>
    ///  The
    ///  <c>
    ///  _validFrom
    ///  </c>
    ///   and
    ///  <c>
    ///  _validTo
    ///  </c>
    ///   values limit the table selection in the following way.
    ///  <list type="number">
    ///   <item>
    ///   <description>If no values are supplied for both the parameters, they use now. Therefore, the method
    ///   searches for only active records and returns either an empty or a valid record.</description>
    ///   </item>
    ///   <item>
    ///   <description>If only the first parameter value is supplied, the second parameter uses the first
    ///   one. The method searches for active records as of the supplied date time value and returns either
    ///   an empty or a valid record.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    If both parameters are supplied with values, the method searches for records whose <c>validFrom</c>
    ///    and <c>ValidTo</c> values fall in that interval. The method returns either an empty or a valid
    ///    record.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public static HcmEmploymentContractor findByTimeState(
    HcmEmploymentContractorRecId    _recId,
    utcdatetime                     _validFrom = DateTimeUtil::utcNow(),
    utcdatetime                     _validTo   = _validFrom,
    boolean                         _forUpdate = false,
    ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmEmploymentContractor hcmEmploymentContractor;

        hcmEmploymentContractor.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmEmploymentContractor.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmEmploymentContractor
                    where hcmEmploymentContractor.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmEmploymentContractor
                    where hcmEmploymentContractor.RecId == _recId;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) hcmEmploymentContractor
                    where hcmEmploymentContractor.RecId == _recId;
            }
        }

        return hcmEmploymentContractor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record that corresponds to the supplied record ID value is active as of today.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record is active as of today; otherwise, false.
    /// </returns>
    public static boolean isActive(HcmEmploymentContractorRecId _recId)
    {
        HcmEmploymentContractor hcmEmploymentContractor;
        utcdatetime now = DateTimeUtil::utcNow();

        return _recId && (select ValidTimeState(now) RecId from hcmEmploymentContractor
                    where hcmEmploymentContractor.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriden to have ability to create event handlers.
    /// </summary>
    public void postLoad()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCacheLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriden to have ability to create event handlers.
    /// </summary>
    public void postCacheLoad()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS322246</DeveloperDocumentation>
	<FormRef>HcmWorker</FormRef>
	<Label>@SYS322253</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Employment</TitleField1>
	<TitleField2>VendorID</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>HumanResource</Modules>
	<ReplacementKey>HcmEmploymentContractor_AK1</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorDataAreaID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Employment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Employment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorDataAreaID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchReq</Name>
			<Label>@SYS94925</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchTable</Name>
			<Label>@SYS15812</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidTimeState</Name>
			<Label>@SYS8280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS305461</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Employment</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmEmploymentRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<Label>@SYS108785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PurchReq</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS108785</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorDataAreaID</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorID</Name>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@SYS304585</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmEmploymentContractor_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>Employment</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmEmployment_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmEmployment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Employment</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EmploymentContractor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Employment</Name>
					<Field>Employment</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchReq_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PurchReqTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReq</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EmploymentContractor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqTable</Name>
					<Field>PurchReqTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorDataAreaID</Name>
					<SourceEDT>DataAreaId</SourceEDT>
					<Field>VendorDataAreaID</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchID</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchID</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmEmploymentContractor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorDataAreaID</Name>
					<SourceEDT>DataAreaId</SourceEDT>
					<Field>VendorDataAreaID</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorID</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendorID</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>