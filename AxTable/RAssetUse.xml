<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetUse</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetUse extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approvedVATPeriod</Name>
				<Source><![CDATA[
        public boolean approvedVATPeriod()
    {
        return this.restoredVATLog().Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        ttsbegin;
        super();

        if (this.UseValueExport     ||
            this.UseValueNotliable)
        {
            RestoredVATCalcAssets_RU::updateOutputRun(this.AssetId, this.UseDate);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        ttsbegin;
        super();

        if(this.UseValueExport     ||
           this.UseValueNotliable)
        {
            RestoredVATCalcAssets_RU::updateOutputRun(this.AssetId, this.UseDate);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
        //BP deviation documented
    display RAssetName name()
    {
        return RAssetTable::find(this.AssetId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoredVATLog</Name>
				<Source><![CDATA[
        public RestoredVATLogTable_RU restoredVATLog(boolean _update = false)
    {
        RestoredVATLogTable_RU  restoredLogTable;
        TransDate               dateFrom, dateTo;

        [dateFrom, dateTo] = BookDataCalc_RU::datePeriodBook(this.UseDate);
        restoredLogTable   = RestoredVATLogTable_RU::find(dateTo, _update);

        return restoredLogTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriod</Name>
				<Source><![CDATA[
        public container taxPeriod()
    {
        return TaxReportPeriod::datePeriodPurchSalesBook_RU(this.UseDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        RAssetUse   rAssetUseOrig = this.orig();

        ttsbegin;

        super();

        if(rAssetUseOrig.UseValueExport     != this.UseValueExport      ||
           rAssetUseOrig.UseValueNotliable  != this.UseValueNotliable)
        {
            RestoredVATCalcAssets_RU::updateOutputRun(this.AssetId, this.UseDate);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean                         ret;
        RAssetStandards                 assetStandards;
        RAssetTransDate                 lastDepDate;
        RestoredVATLogTransOper_RU      logTransOper;
        RestoredVATLogTransOperAsset_RU logTransOperAsset;
        ;

        ret = super();
        if (ret)
        {
            while select assetStandards
                where assetStandards.AssetId == this.AssetId
            {
                lastDepDate = assetStandards.LastDepDate;
                if (RAssetSayTable::find(assetStandards.Say).TypeDepr == RAssetTypeDepr::Avto ||
                    assetStandards.assetDeprMethod(this.UseDate)      == RAssetDeprMethod::Value)
                {
                    if (lastDepDate && this.UseDate <= lastDepDate)
                    {
                        Box::info("@GLS116215");
                        return  false;
                    }
                }
            }
        }

        if ((this.UseValueExport     ||
             this.UseValueNotliable) &&
             this.approvedVATPeriod())
        {
            select firstonly RecId from logTransOper
                where logTransOper.Asset                                                &&
                        logTransOper.TransDate == this.restoredVATLog().TransDate
                exists join logTransOperAsset
                    where logTransOperAsset.LogTransOperRefRecId == logTransOper.RecId  &&
                            logTransOperAsset.AssetId              == this.AssetId;

            if (logTransOper)
            {
                ret = checkFailed(strFmt("@GLS114218", this.UseDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _p1)
    {
        boolean         ret;
        RAssetStandards assetStandards;
        RAssetTransDate startDepDate;

        void validateAssetStatus()
        {
            if (RAssetSuspend::findSuspend(this.AssetId, this.UseDate))
            {
                ret = checkFailed(strFmt("@GLS114245", this.UseDate));
            }

            assetStandards = RAssetStandards::find(this.AssetId, RAssetParameters::find().StandardIdDefault);
            if (assetStandards.DisposalDate && assetStandards.DisposalDate >= this.UseDate)
            {
                ret = checkFailed("@GLS114246");
            }
        }
        ;

        ret = super(_p1);
        if (ret)
        {
            switch(_p1)
            {
                case fieldNum(RAssetUse, UseDate):
                    while select assetStandards
                        where assetStandards.AssetId == this.AssetId
                    {
                        if (assetStandards.groupMethod() == RAssetDeprMethod::Value)
                        {
                            startDepDate = assetStandards.DepStartDate;
                            if (startDepDate && this.UseDate < startDepDate)
                            {
                                return checkFailed(strFmt("@GLS116568", this.UseDate, startDepDate));
                            }
                        }
                    }
                    break;

                case fieldNum(RAssetUse, UseValueExport):
                    if (this.UseValue == 0)
                    {
                        ret = checkFailed(strFmt("@GLS114244", fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValue))));
                    }

                    if (this.UseValue < (this.UseValueExport + this.UseValueNotliable))
                    {
                        ret = checkFailed(strFmt("@GLS114247",
                                                fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValue)),
                                                fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValueNotliable)),
                                                fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValueExport))));
                    }

                    if (this.UseValueExport && RAssetUse::existExportValuePeriod(this.AssetId, this.UseDate, this.RecId))
                    {
                        ret = checkFailed("@SYS99968");
                    }

                    if (this.approvedVATPeriod())
                    {
                        ret = checkFailed(strFmt("@GLS114218", this.UseDate));
                    }

                    validateAssetStatus();

                    if (this.UseValueExport && assetStandards.assetDeprMethod(this.UseDate) != RAssetDeprMethod::Value)
                    {
                        ret = checkFailed(strFmt("@GLS114196",
                                                 fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValue)),
                                                 assetStandards.assetDeprMethod(this.UseDate)));
                    }
                    break;

                case fieldNum(RAssetUse, UseValueNotliable):
                    if (this.UseValue == 0)
                    {
                        ret = checkFailed(strFmt("@GLS114244", fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValue))));
                    }

                    if (this.UseValue < (this.UseValueExport + this.UseValueNotliable))
                    {
                        ret = checkFailed(strFmt("@GLS114247",
                                                fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValue)),
                                                fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValueNotliable)),
                                                fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValueExport))));
                    }

                    if (this.approvedVATPeriod())
                    {
                        ret = checkFailed(strFmt("@GLS114218", this.UseDate));
                    }

                    validateAssetStatus();

                    if (this.UseValueNotliable && assetStandards.assetDeprMethod(this.UseDate) != RAssetDeprMethod::Value)
                    {
                        ret = checkFailed(strFmt("@GLS114196",
                                                 fieldId2pname(tableNum(RAssetUse), fieldNum(RAssetUse, UseValue)),
                                                 assetStandards.assetDeprMethod(this.UseDate)));
                    }

                    if (this.UseValueNotliable && RAssetUse::existExportValuePeriod(this.AssetId, this.UseDate, this.RecId))
                    {
                        ret = checkFailed("@SYS99968");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExportValuePeriod</Name>
				<Source><![CDATA[
        static boolean existExportValuePeriod(RAssetId  _assetId, StartDate  _useDate, recId _recId)
    {
        RAssetUse   rAssetUse;
        StartDate   startDate;
        EndDate     endDate;

        if (_useDate && _assetId)
        {
            startDate = endmth(prevMth(_useDate)) + 1;
            endDate   = endmth(_useDate);

            select firstonly RecId from rAssetUse
                where rAssetUse.UseDate             >= startDate &&
                      rAssetUse.UseDate             <= endDate   &&
                      rAssetUse.AssetId             == _assetId  &&
                      rAssetUse.RecId               != _recId    &&
                     (rAssetUse.UseValueExport      > 0          ||
                      rAssetUse.UseValueNotliable   > 0);
        }
        return rAssetUse.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMth</Name>
				<Source><![CDATA[
        public server static RAssetUse findMth(RAssetId    _assetId,
                                           StartDate   _useDate,
                                           boolean     _forupdate = false)
    {
        RAssetUse assetUse;
        ;

        if (_assetId && _useDate)
        {
            assetUse.selectForUpdate(_forupdate);
            select firstonly assetUse
                where assetUse.AssetId == _assetId &&
                      assetUse.UseDate >= dateStartMth(_useDate) &&
                      assetUse.UseDate <= endmth(_useDate);
        }

        return assetUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mthValue</Name>
				<Source><![CDATA[
        public server static RAssetUseValue mthValue(RAssetId    _assetId,
                                                 StartDate   _useDate)
    {
        RAssetUse assetUse;
        ;

        if (_assetId && _useDate)
        {
            select sum(UseValue) from assetUse
                where assetUse.AssetId == _assetId &&
                      assetUse.UseDate >= dateStartMth(_useDate) &&
                      assetUse.UseDate <= endmth(_useDate);
        }

        return assetUse.UseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriodValues</Name>
				<Source><![CDATA[
        client server static container taxPeriodValues(RAssetId _assetId,
                                                   FromDate _fromDate,
                                                   ToDate   _toDate)
    {
        RAssetUse   rAssetUse;

        select sum(UseValue), sum(UseValueExport), sum(UseValueNotliable) from rAssetUse
            where rAssetUse.UseDate  >= _fromDate &&
                  rAssetUse.UseDate  <= _toDate   &&
                  rAssetUse.AssetId  == _assetId;

        return [rAssetUse.UseValue, rAssetUse.UseValueExport, rAssetUse.UseValueNotliable];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<Label>@GLS116170</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>UseDate</TitleField2>
	<ClusteredIndex>RAssetIdDateId</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RAssetIdDateId</PrimaryIndex>
	<ReplacementKey>RAssetIdDateId</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Export</Name>
			<Label>@GLS112972</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseValueExport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseValueNotliable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>UseDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS40</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UseValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetUseValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UseValueExport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetUseValue</ExtendedDataType>
			<Label>@GLS114216</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UseValueNotliable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetUseValue</ExtendedDataType>
			<Label>@GLS114217</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RAssetIdDateId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UseDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RAssetUse</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>