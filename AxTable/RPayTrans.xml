<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountTypeDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account type.
    /// </summary>
    /// <returns>
    /// The account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display LedgerJournalACType accountTypeDisplay()
    {
        if (this.LedgerDimension)
        {
            return this.AccountType;
        }
        else
        {
            return this.accountTypeFind();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountTypeFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account type from payroll ledger accounts.
    /// </summary>
    /// <returns>
    /// The account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display LedgerJournalACType accountTypeFind()
    {
        RPaytitleposting rPaytitleposting;

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().AccountPostingProfile,
                                                         this.PayCtype,
                                                         this.Emplid,
                                                         this.HrmOrganisationId,
                                                         RPayHistory::getHistoryLineByDate(this.Emplid, this.TransDate).HcmTitle);

        return rPaytitleposting.AccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetReceiptClassCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PaymentOrderBudgetReceiptClassCode_RU budgetReceiptClassCode()
    {
        if (! this.TaxIncomeGroupCode)
        {
            return '';
        }

        return RPayTaxIncomeGroupTable::findCode(this.TaxIncomeGroupCode).PaymBudgetReceiptClassCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifiedReverseTrans</Name>
				<Source><![CDATA[
    private boolean canModifiedReverseTrans()
    {
        TransLink_RU tranLink;
        boolean      ret = true;

        setPrefix("@RUP162");

        select firstonly RecId from tranLink
            where tranLink.RefTableId == this.TableId &&
                  tranLink.RefSec     == this.RecId &&
                  tranLink.RefPri     != tranLink.RefSec;

        if (tranLink.RecId &&
           (this.SourceTableId == tableNum(RPayAverageEarnEmplPeriodTable) ||
            this.SourceTableId == tableNum(RPayAverageEarnValue)           ||
            this.SourceTableId == tableNum(RPayCivilContractAct)))
        {
            setPrefix(strFmt("@RUP742", this.Emplid, this.PayCtype));
            ret = checkFailed("@RUP2907");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifiedTrans</Name>
				<Source><![CDATA[
    #RpayModuleName
    private boolean canModifiedTrans()
    {
        setPrefix("@RUP162");

        if (this.PayPeriod > RPayParameters::payPeriod(this.Emplid))
        {
            return true;
        }

        if (endmth(this.PayPeriod) < RPayParameters::payPeriod(this.Emplid))
        {
            setPrefix(strFmt("@RUP742",this.Emplid,this.PayCtype));
            return checkFailed("@RUP434");
        }

        if (this.SourceTableId == tableNum(RPaySheetTrans) || this.RefSheetTransRecid)
        {
            setPrefix(strFmt("@RUP742",this.Emplid,this.PayCtype));
            return checkFailed("@RUP655");
        }

        if (! this.checkClosedModule(false))
        {
            return false;
        }

        if (this.Emplid)
        {
            RPayEmplCalculate::lastChangeAdd(this.Emplid,#ModuleNameTax);
        }

        if (this.TaxRedemption && !this.TaxIncomeGroupCode)
        {
            return checkFailed(strFmt("@GLS102641", fieldId2pname(this.TableId, fieldNum(RPayTrans, TaxIncomeGroupCode))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClosedModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the module is closed for calculations.
    /// </summary>
    /// <param name="_throwError">
    /// If true an exception error will be thrown.
    /// </param>
    /// <returns>
    /// False if calculations are prohibited, otherwise true.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Update has been cancelled.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean checkClosedModule(boolean _throwError = true)
    {
        if (RPayController::canModuleChanged(true, this.Emplid))
        {
            return true;
        }
        else
        {
            if (_throwError)
            {
                throw error("@SYS18447");
            }
            else
            {
                return false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeferrals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean checkDeferrals()
    {
        RDeferralsTable deferralsTable;
        RDeferralsTrans deferralsTrans;
        Common          sourceDocument;
        boolean ret = true;

        sourceDocument = this.sourceDocument();

        if (sourceDocument.RecId)
        {
            select firstonly RecId, DeferralsId from deferralsTrans
                where  deferralsTrans.StornoRecId == NoYes::No &&
                       deferralsTrans.TransType   != RDeferralsTransType::Receipt
                exists join deferralsTable
                    where deferralsTable.RefTableId  == sourceDocument.TableId &&
                          deferralsTable.RefRecId    == sourceDocument.RecId   &&
                          deferralsTable.DeferralsId == deferralsTrans.DeferralsId;

            if (deferralsTrans.RecId != 0)
                ret = checkFailed(strFmt("@RUP3111", deferralsTrans.DeferralsId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPosting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearPosting()
    {
        this.LedgerDimension        = 0;
        this.OffsetLedgerDimension  = 0;
        this.DefaultDimension       = 0;
        this.OffsetDefaultDimension = 0;
        this.AccountType            = LedgerJournalACType::Ledger;
        this.OffsetAccountType      = LedgerJournalACType::Ledger;
        this.Correct                = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTypeName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Name costTypeName()
    {
        return RPayTable::find(this.PayCtype).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSumStandardDeduction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display RPayAmount currentSumStandardDeduction()
    {
        RPayTrans   rPayTrans;
        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod     <= this.PayPeriod     &&
                  rPayTrans.SourceTableId == this.SourceTableId &&
                  rPayTrans.SourceRecId   == this.SourceRecId   &&
                  rPayTrans.Scanning      == this.Scanning;

        return -rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimensionDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension.
    /// </summary>
    /// <returns>
    /// The default dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault defaultDimensionDisplay()
    {
        if (this.DefaultDimension)
        {
            return this.DefaultDimension;
        }
        else
        {
            return this.defaultDimensionFind();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimensionFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension from payroll ledger accounts.
    /// </summary>
    /// <returns>
    /// The default dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault defaultDimensionFind()
    {
        RPaytitleposting rPaytitleposting;

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().AccountPostingProfile,
                                                         this.PayCtype,
                                                         this.Emplid,
                                                         this.HrmOrganisationId,
                                                         RPayHistory::getHistoryLineByDate(this.Emplid, this.TransDate).HcmTitle);

        return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(RHRMEmplTable::getWorkerDimension(this.Emplid), rPaytitleposting.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if defferals exist.
    /// </summary>
    /// <returns>
    /// True if defferals found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean deferralsExists()
    {
        RDeferralsTable deferralsTable;
        RDeferralsTrans deferralsTrans;
        Common          sourceDocument;
        boolean ret = false;

        sourceDocument = this.sourceDocument();

        if (sourceDocument.RecId)
        {
            select firstonly RecId from deferralsTrans
                where  deferralsTrans.StornoRecId == NoYes::No &&
                       deferralsTrans.TransType   != RDeferralsTransType::Receipt
                exists join deferralsTable
                    where deferralsTable.RefTableId  == sourceDocument.TableId &&
                          deferralsTable.RefRecId    == sourceDocument.RecId   &&
                          deferralsTable.DeferralsId == deferralsTrans.DeferralsId;

            ret = deferralsTrans.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (! this.canModifiedTrans())
        {
            return;
        }

        ttsbegin;
        TransLink_RU::rpayRemove(this.TableId, this.RecId);

        if (this.deferralsExists())
        {
            if (this.sourceDocument().TableId == this.TableId)
            {
                RPayTrans::reverseDeferrals(this);
            }

            if (!this.checkDeferrals())
            {
                throw Exception::Error;
            }
        }

        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension.
    /// </summary>
    /// <returns>
    /// The default dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault getDefaultDimension()
    {
        if (this.AccountType == LedgerJournalACType::Ledger)
        {
            return LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(this.LedgerDimension);
        }
        else
        {
            return this.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset default dimension.
    /// </summary>
    /// <returns>
    /// The default dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault getOffsetDefaultDimension()
    {
        if (this.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            return LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(this.OffsetLedgerDimension);
        }
        else
        {
            return this.OffsetDefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodeFromBranch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxCode getTaxCodeFromBranch()
    {
        TaxCode                 taxCode, taxCodeDefault;
        Branches_RU             branches_RU;
        VendTable               vendTable;
        TaxAuthorityOKATO_RU    taxAuthorityOKATO_RU;
        TaxPeriodHead           taxPeriodHead;
        TaxTable                taxTable;
        TaxGroupData            taxGroupData, taxGroupDataDefault;

        taxCodeDefault = RPayTaxIncomeGroupTable::findCode(this.TaxIncomeGroupCode).TaxCode;

        select firstonly * from vendTable
            exists join branches_RU
                where branches_RU.BranchId == this.BranchId &&
                      branches_RU.VendAccount == vendTable.AccountNum;

        select firstonly TaxAuthority from taxAuthorityOKATO_RU
            where taxAuthorityOKATO_RU.okato == vendTable.partyOKATOasOfDate_RU(this.CorrectedPeriod ? this.CorrectedPeriod : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        select firstonly TaxCode from taxTable
            where taxTable.TaxType_W == TaxType_W::RPayIncomeTax &&
                  taxTable.TaxCode   != taxCodeDefault
        exists join taxPeriodHead
            where taxPeriodHead.TaxPeriod == taxTable.TaxPeriod &&
                  taxPeriodHead.TaxAuthority == taxAuthorityOKATO_RU.TaxAuthority
        exists join taxGroupData
            where taxGroupData.TaxCode  == taxTable.TaxCode
        exists join taxGroupDataDefault
            where taxGroupDataDefault.TaxCode == taxCodeDefault &&
                  taxGroupDataDefault.TaxGroup == taxGroupData.TaxGroup;
        taxCode = taxTable.TaxCode;

        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEmplTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromEmplTable(RHRMEmplTable _emplTable)
    {
        this.Emplid            = _emplTable.EmployeeId;
        this.HrmOrganisationId = RPayHistory::getHistoryLineByDate(_emplTable.EmployeeId, this.TransDate).HrmOrganizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes payroll line from payroll journal line.
    /// </summary>
    /// <param name="_emplTable">
    /// The employee details table record.
    /// </param>
    /// <param name="_payJournalTrans">
    /// The payroll journal line.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromPayJournalTrans(RHRMEmplTable _emplTable, RPayJournalTrans _payJournalTrans)
    {
        this.SourceDate      = _payJournalTrans.TransDate;
        this.TransDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.PayPeriod       = endmth(_payJournalTrans.TransDate);
        this.CorrectedPeriod = this.PayPeriod;
        this.PayCtype        = _payJournalTrans.PayCtype;
        this.Amount          = _payJournalTrans.Amount;
        this.PayModuleCode   = _payJournalTrans.payJournalTable().JournalNameId;
        this.CounterUnit     = _payJournalTrans.JournalId;
        this.SourceTableId   = _payJournalTrans.TableId;
        this.SourceRecId     = _payJournalTrans.RecId;
        this.FamilyRecId     = _payJournalTrans.FamilyRecId;
        this.initFromEmplTable(_emplTable);
        this.updatePosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.PayPeriod  = RPayParameters::payPeriod(this.Emplid);
        this.SourceDate = RPayParameters::payPeriod(this.Emplid);
        this.CorrectedPeriod = RPayParameters::payPeriod(this.Emplid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    #RpayModuleName
    public void insert()
    {
        if (this.PayPeriod > RPayParameters::payPeriod(this.Emplid))
        {
            super();
            return;
        }

        if (endmth(this.PayPeriod) < RPayParameters::payPeriod(this.Emplid))
        {
            info("@RUP434");
            return;
        }

        if (! this.checkClosedModule(false))
        {
            return;
        }

        if (this.Emplid)
        {
            RPayEmplCalculate::lastChangeAdd(this.Emplid,#ModuleNameTax);
        }

        this.resetUnusedDefaultDimensions();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kinName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    edit PersonName kinName(boolean _set, RPayTrans _rPayTrans, PersonName _kinName)
    {
        RHRMVirtualNetworkFamily    family;

        if (_set)
        {
            family = RHRMVirtualNetworkFamily::findByRecId(str2recId(_kinName));
            if (family)
            {
                _rPayTrans.FamilyRecId = family.RecId;
            }
            else
            {
                _rPayTrans.FamilyRecId = RHRMVirtualNetworkFamily::findByKinName(
                                RHRMEmplTable::find(_rPayTrans.Emplid).personTable().PersonnelNumber,
                                _kinName
                                ).RecId;
            }
        }

        return RHRMVirtualNetworkFamily::findByRecId(_rPayTrans.FamilyRecId).KinName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account.
    /// </summary>
    /// <returns>
    /// The main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display DimensionDynamicDefaultAccount ledgerDimensionDisplay()
    {
        if (this.LedgerDimension)
        {
            return this.LedgerDimension;
        }
        else
        {
            return this.ledgerDimensionFind();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account from payroll ledger accounts.
    /// </summary>
    /// <returns>
    /// The main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display DimensionDynamicDefaultAccount ledgerDimensionFind()
    {
        RPaytitleposting rPaytitleposting;

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().AccountPostingProfile,
                                                         this.PayCtype,
                                                         this.Emplid,
                                                         this.HrmOrganisationId,
                                                         RPayHistory::getHistoryLineByDate(this.Emplid, this.TransDate).HcmTitle);

        if (rPaytitleposting.AccountType == LedgerJournalACType::Ledger)
        {
            return LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountRecId(LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(rPaytitleposting.LedgerDimension)), this.defaultDimensionDisplay());
        }
        else
        {
            return rPaytitleposting.LedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified field event.
    /// </summary>
    /// <param name="_fieldId">
    /// The modified field id.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RPayTrans, HrmOrganisationId):
            case fieldNum(RPayTrans, PayCtype) :
                this.clearPosting();
                this.updatePosting();
                break;
            case fieldNum(RPayTrans, AccountType):
                this.LedgerDimension  = 0;
                if (this.AccountType == LedgerJournalACType::Ledger)
                {
                    this.DefaultDimension = 0;
                }
                this.updateCorrectFlag();
                break;
            case fieldNum(RPayTrans, OffsetAccountType):
                this.OffsetLedgerDimension  = 0;
                if (this.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    this.OffsetDefaultDimension = 0;
                }
                this.updateCorrectFlag();
                break;
            case fieldNum(RPayTrans, LedgerDimension):
            case fieldNum(RPayTrans, OffsetLedgerDimension):
                this.updateCorrectFlag();
                break;
            case fieldNum(RPayTrans, TransDate) :
                this.HrmOrganisationId = RPayHistory::getHistoryLineByDate(this.Emplid, this.TransDate).HrmOrganizationId;
                this.clearPosting();
                this.updatePosting();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountTypeDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset account type.
    /// </summary>
    /// <returns>
    /// The offset account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display LedgerJournalACType offsetAccountTypeDisplay()
    {
        if (this.OffsetLedgerDimension)
        {
            return this.OffsetAccountType;
        }
        else
        {
            return this.offsetAccountTypeFind();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountTypeFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset account type from payroll ledger accounts.
    /// </summary>
    /// <returns>
    /// The offset account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display LedgerJournalACType offsetAccountTypeFind()
    {
        RPaytitleposting rPaytitleposting;

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                         this.PayCtype,
                                                         this.Emplid,
                                                         this.HrmOrganisationId,
                                                         RPayHistory::getHistoryLineByDate(this.Emplid, this.TransDate).HcmTitle);

        return rPaytitleposting.AccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetDefaultDimensionDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset default dimension.
    /// </summary>
    /// <returns>
    /// The main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault offsetDefaultDimensionDisplay()
    {
        if (this.OffsetDefaultDimension)
        {
            return this.OffsetDefaultDimension;
        }
        else
        {
            return this.offsetDefaultDimensionFind();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetDefaultDimensionFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset default dimension from payroll ledger accounts.
    /// </summary>
    /// <returns>
    /// The main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DimensionDefault offsetDefaultDimensionFind()
    {
        RPaytitleposting rPaytitleposting;

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                         this.PayCtype,
                                                         this.Emplid,
                                                         this.HrmOrganisationId,
                                                         RPayHistory::getHistoryLineByDate(this.Emplid, this.TransDate).HcmTitle);

        return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(RHRMEmplTable::getWorkerDimension(this.Emplid), rPaytitleposting.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimensionDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset ledger account.
    /// </summary>
    /// <returns>
    /// The main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display DimensionDynamicDefaultAccount offsetLedgerDimensionDisplay()
    {
        if (this.OffsetLedgerDimension)
        {
            return this.OffsetLedgerDimension;
        }
        else
        {
            return this.offsetLedgerDimensionFind();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimensionFind</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the offset ledger account from payroll ledger accounts.
    /// </summary>
    /// <returns>
    /// The main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display DimensionDynamicDefaultAccount offsetLedgerDimensionFind()
    {
        RPaytitleposting rPaytitleposting;

        rPaytitleposting = RPaytitleposting::findAccount(RPayParameters::find().OffsetAccountPostingProfile,
                                                         this.PayCtype,
                                                         this.Emplid,
                                                         this.HrmOrganisationId,
                                                         RPayHistory::getHistoryLineByDate(this.Emplid, this.TransDate).HcmTitle);

        if (rPaytitleposting.AccountType == LedgerJournalACType::Ledger)
        {
            return LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountRecId(LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(rPaytitleposting.LedgerDimension)), this.offsetDefaultDimensionDisplay());
        }
        else
        {
            return rPaytitleposting.LedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payEmplName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display  EmplName payEmplName()
    {
        return RHRMEmplTable::find(this.Emplid).personTable().fio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUnusedDefaultDimensions</Name>
				<Source><![CDATA[
    private void resetUnusedDefaultDimensions()
    {
        if (this.AccountType == LedgerJournalACType::Ledger && this.DefaultDimension != 0)
        {
            this.DefaultDimension = 0;
        }

        if (this.OffsetAccountType == LedgerJournalACType::Ledger && this.OffsetDefaultDimension != 0)
        {
            this.OffsetDefaultDimension = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restSumStandardDeduction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display server RPayAmount restSumStandardDeduction()
    {
        RPayTrans                       rPayTrans;
        RPayEmplStandardDeductionTable  rPayEmplStandardDeductionTable;

        select firstonly TotalSum from rPayEmplStandardDeductionTable
            where rPayEmplStandardDeductionTable.RecId       == this.SourceRecId   &&
                  rPayEmplStandardDeductionTable.TableId     == this.SourceTableId &&
                  rPayEmplStandardDeductionTable.PaySequence == this.Scanning;

        if (! rPayEmplStandardDeductionTable.TotalSum)
        {
            return 0;
        }

        select sum(Amount) from rPayTrans
            where rPayTrans.PayPeriod     <= this.PayPeriod     &&
                  rPayTrans.SourceTableId == this.SourceTableId &&
                  rPayTrans.SourceRecId   == this.SourceRecId   &&
                  rPayTrans.Scanning      == this.Scanning;

        return rPayEmplStandardDeductionTable.TotalSum + rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ledger dimension
    /// </summary>
    /// <param name="_ledgerJournalACType">
    /// The ledger account type.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The ledger dimension to set.
    /// </param>
    /// <param name="_defaultDimension">
    /// The default dimension to set.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setLedgerDimension(LedgerJournalACType      _ledgerJournalACType,
                                   DimensionDynamicAccount  _ledgerDimension,
                                   DimensionDefault         _defaultDimension,
                                   RHRMEmplId               _emplId)
    {
        DimensionDefault       defaultDimension;
        LedgerDimensionAccount ledgerDimensionAccount;

        this.AccountType     = _ledgerJournalACType;
        this.LedgerDimension = _ledgerDimension;

        defaultDimension = RPayTrans::createEmployeeDefaultDimension(_defaultDimension, _emplId);

        if (this.AccountType == LedgerJournalACType::Ledger)
        {
            ledgerDimensionAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(this.LedgerDimension);
            this.LedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionAccount, defaultDimension);
        }
        else
        {
            this.DefaultDimension = defaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the offset ledger dimension
    /// </summary>
    /// <param name="_offsetLedgerJournalACType">
    /// The ledger account type.
    /// </param>
    /// <param name="_offsetLedgerDimension">
    /// The ledger dimension to set.
    /// </param>
    /// <param name="_offsetDefaultDimension">
    /// The default dimension to set.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setOffsetLedgerDimension(LedgerJournalACType     _offsetLedgerJournalACType,
                                         DimensionDynamicAccount _offsetLedgerDimension,
                                         DimensionDefault        _offsetDefaultDimension,
                                         RHRMEmplId              _emplId)
    {
        DimensionDefault offsetDefaultDimension;

        this.OffsetAccountType     = _offsetLedgerJournalACType;
        this.OffsetLedgerDimension = _offsetLedgerDimension;

        offsetDefaultDimension = RPayTrans::createEmployeeDefaultDimension(_offsetDefaultDimension, _emplId);
        if (this.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            this.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(this.OffsetLedgerDimension, offsetDefaultDimension);
        }
        else
        {
            this.OffsetDefaultDimension = offsetDefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common sourceDocument()
    {
        Common ret;
        RPayAverageEarnValue    avgEarnPeriodValue;

        switch (this.SourceTableId)
        {
            case tableNum(RPayAverageEarnValue):

                select firstonly AverageEarnEmplPeriodRecid from avgEarnPeriodValue
                    where avgEarnPeriodValue.RecId == this.SourceRecId;

                ret = RPayAverageEarnEmplPeriodTable::findRecId(avgEarnPeriodValue.AverageEarnEmplPeriodRecid);
                break;

            default:
                ret = this;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSumStandardDeduction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display RPayAmount totalSumStandardDeduction()
    {
        RPayEmplStandardDeductionTable  rPayEmplStandardDeductionTable;

        select firstonly TotalSum from rPayEmplStandardDeductionTable
            where rPayEmplStandardDeductionTable.RecId       == this.SourceRecId &&
                  rPayEmplStandardDeductionTable.PaySequence == this.Scanning;

        return rPayEmplStandardDeductionTable.TotalSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (! this.canModifiedTrans())
        {
            return;
        }

        this.resetUnusedDefaultDimensions();

        super();

        if (this.checkDeferrals() && this.sourceDocument().TableId == this.TableId)
        {
            RPayTrans::reverseDeferrals(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorrectFlag</Name>
				<Source><![CDATA[
    private void updateCorrectFlag()
    {
        if (! (this.LedgerDimension && this.OffsetLedgerDimension))
        {
            this.Correct = NoYes::No;
        }
        else
        {
            if (this.DefaultDimension == (this.defaultDimensionFind() ? this.defaultDimensionFind() : this.DefaultDimension)  &&
               this.OffsetDefaultDimension == (this.offsetDefaultDimensionFind() ? this.offsetDefaultDimensionFind() : this.OffsetDefaultDimension) &&
               this.LedgerDimension == (this.ledgerDimensionFind() ? this.ledgerDimensionFind() : this.LedgerDimension)  &&
               this.OffsetLedgerDimension == (this.offsetLedgerDimensionFind() ? this.offsetLedgerDimensionFind() : this.OffsetLedgerDimension) &&
               this.AccountType == this.accountTypeFind() &&
               this.OffsetAccountType == this.offsetAccountTypeFind())
            {
                this.Correct = NoYes::Yes;
            }
            else
            {
                this.Correct = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePosting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updatePosting()
    {
        this.AccountType            = this.accountTypeDisplay();
        this.OffsetAccountType      = this.offsetAccountTypeDisplay();
        this.DefaultDimension       = this.defaultDimensionDisplay();
        this.OffsetDefaultDimension = this.offsetDefaultDimensionDisplay();
        this.OffsetLedgerDimension  = this.offsetLedgerDimensionDisplay();
        this.LedgerDimension        = this.ledgerDimensionDisplay();

        if (this.LedgerDimension && this.OffsetLedgerDimension)
        {
            this.Correct = NoYes::Yes;
        }
        else
        {
            this.Correct = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean      ret;
        ret = super();

        if (ret)
        {
            ret = this.canModifiedTrans();
        }

        if (ret)
        {
            ret = this.canModifiedReverseTrans();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.PayPeriod)
        {
            this.PayPeriod = endmth(this.PayPeriod);
        }

        if (this.SourceDate)
        {
            this.SourceDate = endmth(this.SourceDate);
        }
        else
        {
            this.SourceDate = endmth(this.PayPeriod);
        }

        if (ret)
        {
            ret = this.canModifiedTrans();
        }

        if (ret)
        {
            ret = RPayPostingProfileCheck::checkCurrentProfiles(this.PayCtype, '', this.Emplid, '');
        }

        if (ret)
        {
            ret = this.canModifiedReverseTrans();
        }

        if (ret)
        {
            ret = RPayTable::checkRelativeFilling(this.PayCtype, this.FamilyRecId);
        }

        if (! ret)
        {
            this.data(this.orig());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateChargeType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateChargeType(RPayChargeType  _payChargeType,
                                                        ReportPeriod_RU _payPeriod      = RPayParameters::payPeriod(),
                                                        RHRMEmplId      _emplId         = '')
    {
        RPayTrans   payTrans;
        RPayTable   payTable;

        select sum(Amount) from payTrans
            where payTrans.PayPeriod     == _payPeriod &&
                  (! _emplId                           ||
                   payTrans.Emplid       == _emplId)
        exists join payTable
            where payTable.PayCtype      == payTrans.PayCtype &&
                  payTable.PayChargeType == _payChargeType;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateCostType(RPayCostType    _payCostType,
                                                      ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
                                                      RHRMEmplId      _emplId ='')
    {
        RPayTrans      payTrans;

        select sum(Amount)  from payTrans
            where payTrans.PayPeriod == _payPeriod &&
                  payTrans.PayCtype  == _payCostType &&
                 (payTrans.Emplid    == _emplId ||
                 (_emplId ? false : true));

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFund</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFund(RPayCounterUnit _payCounterUnit,
                                                  ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
                                                  RHRMEmplId       _emplId ='')
    {
        RPayTrans      payTrans;
        RPayFundMember payFundMember;

        select sum(Amount)  from payTrans index hint PeriodEmplIdx
            where payTrans.PayPeriod == _payPeriod &&
                 (payTrans.Emplid == _emplId ||
                 (_emplId ? false : true))
         exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFundByCorrectedPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFundByCorrectedPeriod(RPayCounterUnit     _payCounterUnit,
                                                                   RPayCorrectedPeriod _correctedPeriod = RPayParameters::payPeriod(),
                                                                   RHRMEmplId
                                                                   _emplId ='')
    {
        RPayTrans      payTrans;
        RPayFundMember payFundMember;

        select sum(Amount)  from payTrans index hint PeriodEmplIdx
            where payTrans.CorrectedPeriod == _correctedPeriod &&
                 (payTrans.Emplid == _emplId ||
                 (_emplId ? false : true))
         exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFundByPayPeriodCorrectedPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFundByPayPeriodCorrectedPeriod(RPayCounterUnit     _payCounterUnit,
                                                                            ReportPeriod_RU     _payPeriod = RPayParameters::payPeriod(),
                                                                            RPayCorrectedPeriod _correctedPeriod = RPayParameters::payPeriod(),
                                                                            RHRMEmplId          _emplId ='')
    {
        RPayTrans      payTrans;
        RPayFundMember payFundMember;

        select sum(Amount)  from payTrans index hint PeriodEmplIdx
            where payTrans.CorrectedPeriod == _correctedPeriod &&
                  payTrans.PayPeriod       == _payPeriod &&
                  (payTrans.Emplid         == _emplId ||
                  (_emplId ? false : true))
        exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFundBySourceDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFundBySourceDate(RPayCounterUnit _payCounterUnit,
                                                              ReportPeriod_RU _sourceDate = RPayParameters::payPeriod(),
                                                              RHRMEmplId      _emplId ='')
    {
        RPayTrans      payTrans;
        RPayFundMember payFundMember;

        select sum(Amount)  from payTrans index hint PeriodEmplIdx
            where payTrans.SourceDate == _sourceDate &&
                 (payTrans.Emplid     == _emplId ||
                 (_emplId ? false : true))
        exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFundTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFundTotal(RPayCounterUnit _payCounterUnit,
                                                       ReportPeriod_RU _payPeriod,
                                                       RHRMEmplId      _emplId)
    {
        RPayTrans            payTrans;
        RPayFundMember       payFundMember;
        RHRMEmplTable        emplTable;

        select sum(Amount)  from payTrans index hint PeriodEmplIdx
            where payTrans.PayPeriod == _payPeriod
        exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype
        exists join emplTable
             where emplTable.EmployeeId    == payTrans.Emplid  &&
                  (emplTable.PayMainEmplId == _emplId || emplTable.EmployeeId == _emplId);

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFundTotalBySourceDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFundTotalBySourceDate(RPayCounterUnit _payCounterUnit,
                                                                   ReportPeriod_RU _payPeriod,
                                                                   RHRMEmplId      _emplId)
    {
        RPayTrans            payTrans;
        RPayFundMember       payFundMember;
        RHRMEmplTable        emplTable;

        select sum(Amount)  from payTrans index hint PeriodEmplIdx
            where payTrans.SourceDate == _payPeriod
        exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype
        exists join emplTable
             where emplTable.EmployeeId     == payTrans.Emplid &&
                   (emplTable.PayMainEmplId == _emplId || emplTable.EmployeeId == _emplId);

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFundTotalCorrectedPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFundTotalCorrectedPeriod(RPayCounterUnit     _payCounterUnit,
                                                                      ReportPeriod_RU     _payPeriod = RPayParameters::payPeriod(),
                                                                      RPayCorrectedPeriod _correctedPeriod = RPayParameters::payPeriod(),
                                                                      RHRMEmplId          _emplId ='')
    {
        RPayTrans            payTrans;
        RPayFundMember       payFundMember;
        RHRMEmplTable        emplTable;

        select sum(Amount)  from payTrans index hint PeriodEmplIdx
            where payTrans.CorrectedPeriod == _correctedPeriod &&
                  payTrans.PayPeriod       == _payPeriod
        exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype
         exists join emplTable
             where emplTable.EmployeeId    == payTrans.Emplid &&
                  (emplTable.PayMainEmplId == _emplId || emplTable.EmployeeId == _emplId);
        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmployeeDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the employee default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    /// The default dimension.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <returns>
    /// The default dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionDefault createEmployeeDefaultDimension(DimensionDefault _defaultDimension, RHRMEmplId _emplId)
    {
        return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(RHRMEmplTable::getWorkerDimension(_emplId), _defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmployeeLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the employee ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension.
    /// </param>
    /// <param name="_defaultDimension">
    /// The default dimension.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <returns>
    /// The ledger dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionDynamicAccount createEmployeeLedgerDimension(LedgerDimensionAccount _ledgerDimension, DimensionDefault _defaultDimension, RHRMEmplId _emplId)
    {
        DimensionDefault    defaultDimension;

        defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(RHRMEmplTable::getWorkerDimension(_emplId, _ledgerDimension), _defaultDimension);

        return LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountRecId(LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_ledgerDimension)), defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existsForGroup(RPayGroup _payGroup)
    {
        RPayTrans payTrans;

        select firstonly RecId from payTrans
            where (payTrans.Emplid == _payGroup);

        return payTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsFundAmountTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTrans existsFundAmountTotal(RPayCounterUnit _payCounterUnit,
                                                         ReportPeriod_RU _payPeriod,
                                                         RHRMEmplId      _emplId)
    {
        RPayTrans      payTrans;
        RPayFundMember payFundMember;
        RHRMEmplTable  emplTable;

        select firstonly payTrans
            where payTrans.PayPeriod == _payPeriod
        exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype
        exists join emplTable
             where emplTable.EmployeeId    == payTrans.Emplid &&
                  (emplTable.PayMainEmplId == _emplId || emplTable.EmployeeId == _emplId);

        return payTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTrans find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        RPayTrans payTrans;

        if (_recId)
        {
            payTrans.selectForUpdate(_forUpdate);

            select firstonly payTrans
                index hint recid
                where payTrans.RecId == _recId;
        }

        return payTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount.
    /// </summary>
    /// <param name="_payPeriod">
    /// The calculation period.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <param name="_byWorker">
    /// If true amont will be get separately for worker.
    /// </param>
    /// <param name="_payChargeType">
    /// The category.
    /// </param>
    /// <returns>
    /// The amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Amount getSumAmount(ReportPeriod_RU    _payPeriod,
                                             RHRMEmplId         _emplId,
                                             boolean            _byWorker,
                                             RPayChargeType     _payChargeType)
    {
        RPayTrans       rPayTrans;
        RefRecId        personTableId;

        Query                   query;
        QueryBuildDataSource    rpayTransqbds;
        QueryBuildDataSource    emplTableqbds;
        QueryBuildDataSource    payTableqbds;
        QueryRun                queryRun;

        query = new Query();
        rpayTransqbds = query.addDataSource(tableNum(RPayTrans));
        rpayTransqbds.addSelectionField(fieldNum(RPayTrans, Amount), SelectionField::Sum);
        rpayTransqbds.addRange(fieldNum(RPayTrans, PayPeriod)).value(queryValue(_payPeriod));

        payTableqbds = rpayTransqbds.addDataSource(tableNum(RPayTable));
        payTableqbds.addLink(fieldNum(RPayTrans, PayCtype), fieldNum(RPayTable, PayCtype));
        payTableqbds.addRange(fieldNum(RPayTable, PayChargeType)).value(queryValue(_payChargeType));
        payTableqbds.fetchMode(QueryFetchMode::One2One);

        if (_byWorker)
        {
            personTableId = RHRMEmplTable::find(_emplId).rhrmPersonTable;

            emplTableqbds = rpayTransqbds.addDataSource(tableNum(RHRMEmplTable));
            emplTableqbds.addLink(fieldNum(RPayTrans, Emplid), fieldNum(RHRMEmplTable, EmployeeId));
            emplTableqbds.addRange(fieldNum(RHRMEmplTable, rhrmPersonTable)).value(queryValue(personTableId));
            emplTableqbds.fetchMode(QueryFetchMode::One2One);
        }
        else
        {
            rpayTransqbds.addRange(fieldNum(RPayTrans, Emplid)).value(_emplId);
        }

        queryRun = new QueryRun(query);
        queryRun.next();
        rPayTrans = queryRun.get(tableNum(RPayTrans));

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDeferrals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static void reverseDeferrals(RPayTrans  _payTrans)
    {
        RDeferralsTable deferralsTable;
        RDeferralsTrans deferralsTrans;
        RDeferralsBook  deferralsBook;
        Common          sourceDocument;

        RDeferralsTransactionReversal transReversal;

        sourceDocument = _payTrans.sourceDocument();

        if (sourceDocument.RecId)
        {
            ttsbegin;
            while select forupdate deferralsTrans
                where deferralsTrans.TransType == RDeferralsTransType::Receipt &&
                     !deferralsTrans.StornoRecId
                join deferralsTable
                    where deferralsTable.DeferralsId == deferralsTrans.DeferralsId &&
                          deferralsTable.RefRecId    == sourceDocument.RecId       &&
                          deferralsTable.RefTableId  == sourceDocument.TableId
            {
                if (RDeferralsTransactionReversal::allowReversTransType(deferralsTrans.TransType))
                {
                    transReversal = RDeferralsTransactionReversal::construct(deferralsTrans);
                    transReversal.parmReverseAllModels(NoYes::No);
                    transReversal.runOperation();

                    update_recordset deferralsBook setting Depreciate = NoYes::Yes
                        where deferralsBook.DeferralsBookId == deferralsTrans.DeferralsBookId &&
                              deferralsBook.DeferralsId     == deferralsTrans.DeferralsId;
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayAmount taxAmount(RpayTaxIncomeGroupCode    _taxGroupCode,
                                ReportPeriod_RU           _periodFrom,
                                ReportPeriod_RU           _periodTo,
                                RHRMEmplId                _emplId,
                                boolean                   _redemption = false)
    {
        RPayTrans   payTrans;

        select sum(Amount) from payTrans
            where payTrans.Emplid               == _emplId      &&
                  payTrans.PayPeriod            >= _periodFrom  &&
                  payTrans.PayPeriod            <= _periodTo    &&
                  payTrans.TaxRedemption        == _redemption  &&
                  payTrans.TaxIncomeGroupCode   == _taxGroupCode;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFundByCorrectedReportPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total payroll amount by corrected and report period.
    /// </summary>
    /// <param name="_payCounterUnit">
    /// The fund base.
    /// </param>
    /// <param name="_correctedPeriod">
    /// Corrected period.
    /// </param>
    /// <param name="_reportPeriod">
    /// Reporting period.
    /// </param>
    /// <param name="_emplId">
    /// Employee number.
    /// </param>
    /// <returns>
    /// The total payroll amount by corrected and report period.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAmount calculateFundByCorrectedReportPeriod(
        RPayCounterUnit     _payCounterUnit,
        RPayCorrectedPeriod _correctedPeriod = RPayParameters::payPeriod(),
        ReportPeriod_RU     _reportPeriod = maxDate(),
        RHRMEmplId          _emplId ='')
    {
        RPayTrans      payTrans;
        RPayFundMember payFundMember;

        select sum(Amount) from payTrans index hint PeriodEmplIdx
            where payTrans.CorrectedPeriod  == _correctedPeriod &&
                  payTrans.PayPeriod        <= _reportPeriod &&
                 (payTrans.EmplId           == _emplId ||
                 (_emplId ? false : true))
         exists join payFundMember
            where payFundMember.CounterUnit == _payCounterUnit &&
                  payFundMember.PayCostType == payTrans.PayCtype;

        return payTrans.Amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RPayroll</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RUP6033</DeveloperDocumentation>
	<Label>@RUP186</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Emplid</TitleField1>
	<TitleField2>Amount</TitleField2>
	<ClusteredIndex>PeriodEmplIdx</ClusteredIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Emplid</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalcInfo</Name>
			<Label>@RUP2364</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayModuleCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Scanning</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CounterUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correct</Name>
			<Label>@SYS60544</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Correct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Department</Name>
			<Label>@GLS105760</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HrmOrganisationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS53632</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetDefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCtype</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Emplid</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IncomeTax</Name>
			<Label>@RUP6317</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxIncomeGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRedemption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineValue</Name>
			<Label>@RUP306</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyHour</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetAccount</Name>
			<Label>@GLS100952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PayType</Name>
			<Label>@RUP172</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCtype</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Periods</Name>
			<Label>@SYS4081</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefSheetTransRecid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relative</Name>
			<Label>@RUP2906</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>kinName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmountDebCred</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BranchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BranchId_RU</ExtendedDataType>
			<Label>@SYS84781</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalcTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@RUP251</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RUP192</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCorrectedPeriod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CounterUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCounterUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Emplid</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RHRMEmplId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FamilyRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RHRMFamilyRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HrmOrganisationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RpayHRMOrganizationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetDefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayCtype</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCostType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayModuleCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayModuleCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PayPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayDayHour</ExtendedDataType>
			<Label>@RUP355</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyHour</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayDayHour</ExtendedDataType>
			<Label>@GLS105378</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefSheetTransRecid</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Scanning</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySequence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SourceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
			<Label>@RUP393</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxIncomeGroupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RPayTax</ConfigurationKey>
			<ExtendedDataType>RpayTaxIncomeGroupCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxRedemption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RPayTax</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@RUP3133</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BaseDate</ExtendedDataType>
			<Label>@GLS105982</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PayPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayModuleCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Scanning</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CounterUnit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Emplid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxRedemption</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PeriodEmplIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PayPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Emplid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayCtype</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Emplid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxIncomeGroupCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxRedemption</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BranchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Branches_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Branches_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BranchId</Name>
					<SourceEDT>BranchId_RU</SourceEDT>
					<Field>BranchId</Field>
					<RelatedField>BranchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BranchIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OffsetDimension</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetDefaultDimension</Name>
					<Field>OffsetDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OffsetLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PayModuleTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayModuleTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayModuleTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayModuleCode</Name>
					<SourceEDT>RPayModuleCode</SourceEDT>
					<Field>PayModuleCode</Field>
					<RelatedField>PayModuleCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RHRMEmplTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RHRMEmplTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RHRMEmplTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Emplid</Name>
					<SourceEDT>RHRMEmplId</SourceEDT>
					<Field>Emplid</Field>
					<RelatedField>EmployeeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RHRMVirtualNetworkFamily</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RHRMVirtualNetworkFamily</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RHRMVirtualNetworkFamily</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FamilyRecId</Name>
					<SourceEDT>RHRMFamilyRecId</SourceEDT>
					<Field>FamilyRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayCounterTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayCounterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayCounterTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CounterUnit</Name>
					<SourceEDT>RPayCounterUnit</SourceEDT>
					<Field>CounterUnit</Field>
					<RelatedField>CounterUnit</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayHRMOrganization</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayHRMOrganization</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayHRMOrganization</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HrmOrganisationId</Name>
					<SourceEDT>RpayHRMOrganizationId</SourceEDT>
					<Field>HrmOrganisationId</Field>
					<RelatedField>hrmOrganizationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPaySeqTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPaySeqTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPaySeqTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Scanning</Name>
					<SourceEDT>RPaySequence</SourceEDT>
					<Field>Scanning</Field>
					<RelatedField>Scanning</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PayrunScanIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPaySheetTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPaySheetTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPaySheetTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefSheetTransRecid</Name>
					<SourceEDT>RefRecId</SourceEDT>
					<Field>RefSheetTransRecid</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>RPayTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCtype</Name>
					<SourceEDT>RPayCostType</SourceEDT>
					<Field>PayCtype</Field>
					<RelatedField>PayCtype</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayTaxIncomeGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayTaxIncomeGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxIncomeGroupCode</Name>
					<Field>TaxIncomeGroupCode</Field>
					<RelatedField>RpayTaxIncomeGroupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_RPayTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>