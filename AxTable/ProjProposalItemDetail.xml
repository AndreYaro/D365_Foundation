<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalItemDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProposalItemDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total line amount in the Invoice Proposal currency.
    /// </summary>
    /// <param name="_projProposalItem">
    /// The <c>ProjProposalItem</c> instance for the line.
    /// </param>
    /// <param name="_projProposalJour">
    /// ProjProposalJour instance for the invoice proposal
    /// </param>
    /// <param name="_lineAmount">
    /// The new line amount.
    /// </param>
    /// <returns>
    /// The new line amount if Brazilian parameters are enabled; otherwise, <c>_lineAmount</c>.
    /// </returns>
    /// <remarks>
    /// Calculates total line amount in Invoice Proposal currency
    /// </remarks>
    public AmountCur calculateAmountCur(ProjProposalItem _projProposalItem,
                                        ProjProposalJour _projProposalJour,
                                        AmountCur        _lineAmount)
    {
            AmountCur totalAmount;
              // <GBR>
            if (BrazilParameters::isEnabled() && _projProposalItem.IncludedTaxPercent_BR)
            {
                totalAmount =  PriceDisc::price2Amount(this.salesPriceInclTax_BR(_projProposalItem.IncludedTaxPercent_BR),
                                                    InventTable::find(_projProposalItem.ItemId).salesPriceUnit(),
                                                    0,
                                                    _projProposalItem.qty(),
                                                    0,
                                                    0,
                                                    0,
                                                    _projProposalJour.CurrencyId,
                                                    0,
                                                    false);
                return totalAmount;
            }
            // </GBR>

            return _lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmt</Name>
				<Source><![CDATA[
    display AmountCur lineAmt()
    {
        return ProjTrans::newProjProposalItemSale(this.projProposalItem(), this, this.projItemTransSale()).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls methods appropriate to modified fields.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field that is modified.
    /// </param>
    /// <remarks>
    ///    This method executes when any field in the table is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldnum(ProjProposalItemDetail, SalesPrice):
				ProjProposalItem projProposalItem				= this.projProposalItem();
				ProjProposalJour projProposalJour				= projProposalItem.projProposalJour();
				ProjFundingSourceRefId projFundingSourceRefId	= projProposalJour.FundingSource;
				ProjProposalId projProposalId					= ProjProposalJour.ProposalId;
				TransactionID transId							= projProposalItem.ProjTransId;
                ProjItemTrans projItemTrans = ProjItemTrans::find(transId);

				AmountCur newAmount			= PriceDisc::price2Amount(this.SalesPrice,
												InventTable::find(projProposalItem.ItemId).salesPriceUnit(),
												0,
												projProposalItem.qty(),
												0,
												0,
												0,
												projProposalJour.CurrencyId,
												0,
												false);

				AmountCur originalAmount    = this.orig().AmountCur;
                this.AmountCur              = this.calculateAmountCur(projProposalItem,projProposalJour, newAmount);

                ProjInvoiceProposalTransUpdate::updateProposalSummaryWithCategory(projProposalId, newAmount,
                                                            originalAmount, projItemTrans.ProjId, projItemTrans.CategoryId);

                this.update();

                break;

            default:
            super(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemTransSale</Name>
				<Source><![CDATA[
    public ProjItemTransSale projItemTransSale(boolean _update = false)
    {
        return ProjItemTransSale::find(this.SaleRefRecId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalItem</Name>
				<Source><![CDATA[
    public ProjProposalItem projProposalItem(boolean _forUpdate = false)
    {
        return ProjProposalItem::findRecId(this.ProposalRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceInclTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price including included taxes for this transaction.
    /// </summary>
    /// <param name="_includedTaxPercent_BR">
    ///     The tax percentage specified for this order; optional.
    /// </param>
    /// <returns>
    /// The sales price including included taxes for this transaction.
    /// </returns>
    public display SalesPriceInclTax_BR salesPriceInclTax_BR(TaxValue _includedTaxPercent_BR = this.projProposalItem().IncludedTaxPercent_BR)
    {
        return this.salesPrice / (1 -  _includedTaxPercent_BR / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                 ret;
        ProjItemTrans           projItemTrans;
        ProjProposalItem        projProposalItem;
        ProjProposalJour        projProposalJour;
        AmountCur               finalLineAmount;
        AmountCur               updatedLineAmount;
        AmountCur               originalAmount;
        ProjTrans               projTrans;
        ProjFundingSourceRefId  fundingSource;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(ProjProposalRevenueDetail, SalesPrice):
                projProposalItem  = this.projProposalItem();
                projProposalJour  = projProposalItem.projProposalJour();
                projItemTrans     = projProposalItem.projItemTrans();
                projTrans         = ProjTrans::construct(projItemTrans);

                updatedLineAmount = PriceDisc::price2Amount(this.SalesPrice,
                                                            InventTable::find(projProposalItem.ItemId).salesPriceUnit(),
                                                            0,
                                                            projProposalItem.qty(),
                                                            0,
                                                            0,
                                                            0,
                                                            projProposalJour.CurrencyId,
                                                            0,
                                                            false);

                originalAmount    = this.orig().AmountCur;

                finalLineAmount   = this.calculateAmountCur(projProposalItem, projProposalJour, updatedLineAmount)  - originalAmount;
                fundingSource     = projProposalJour.FundingSource;

                if (!this.verifyAndUpdateFundingLimit(projTrans, finalLineAmount, fundingSource))
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAndUpdateFundingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies and updates funding limit if the new line amount is within the funding limit.
    /// </summary>
    /// <param name="_projTrans">
    /// The <c>ProjTrans</c> record to verify and update.
    /// </param>
    /// <param name="_lineAmount">
    /// The line amount to check.
    /// </param>
    /// <param name="_fundingsource">
    /// The <c>RefId</c> value of the funding source.
    /// </param>
    /// <returns>
    /// True if the line amount is within the funding limits; otherwise, false.
    /// </returns>
    public boolean verifyAndUpdateFundingLimit(ProjTrans _projTrans, AmountCur _lineAmount, ProjFundingSourceRefId _fundingsource)
    {
        if (this.SalesPrice >= 0)
            {
                if (!ProjInvoiceProposalTransUpdate::validateFundingLimit(_lineAmount,
                                                        _projTrans,
                                                        _fundingsource))
                {
                    return  checkFailed("@SYS136009");
                }

                return true;
            }

        return checkFailed("@SYS118311");
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjProposalItemDetail find(RefRecId _saleRefRecId, ProjProposalId _proposalId = '', boolean _forUpdate = false)
    {
        ProjProposalId          proposalId = _proposalId;
        ProjProposalItem        projProposalItem = null;
        ProjProposalItemDetail  projProposalItemDetail = null;

        if (! proposalId)
        {
            proposalId  = ProjProposalItemDetail::findActiveProposalId(_saleRefRecId);
        }

        projProposalItemDetail.selectForUpdate(_forUpdate);

        if (_saleRefRecId && proposalId)
        {
            select projProposalItemDetail
                where projProposalItemDetail.SaleRefRecId == _saleRefRecId
                    join ProposalId, RecId from projProposalItem
                        where projProposalItem.RecId == projProposalItemDetail.ProposalRefRecId &&
                            projProposalItem.ProposalId == proposalId;
        }

        return projProposalItemDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveProposalId</Name>
				<Source><![CDATA[
    public static ProjProposalId findActiveProposalId(RefRecId _saleRefRecId)
    {
        RefRecId                saleRefRecId = _saleRefRecId;

        ProjProposalId          proposalId;

        ProjItemTransSale       projItemTransSale = ProjItemTransSale::find(_saleRefRecId);
        ProjProposalItem        projProposalItem;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjProposalJour        projProposalJour;
        ProjInvoiceItem         projInvoiceItem;
        ProjInvoiceItemDetail   projInvoiceItemDetail;

        if (projItemTransSale.TransStatus   == ProjTransStatus::Posted      ||
            projItemTransSale.TransStatus   == ProjTransStatus::Adjusted    ||
            projItemTransSale.TransStatus   == ProjTransStatus::Estimated   ||
            projItemTransSale.TransStatus   == ProjTransStatus::Eliminated)
        {
            return '';
        }

    //  test if only one proposal return this
        select count(RecId) from projProposalItemDetail
            where projProposalItemDetail.SaleRefRecId  == saleRefRecId;

        if (projProposalItemDetail.RecId <= 1)
        {
            select firstonly projProposalItemDetail
                where projProposalItemDetail.SaleRefRecId == saleRefRecId
                    join projProposalItem
                        where projProposalItem.RecId == projProposalItemDetail.ProposalRefRecId;

            proposalId = projProposalItem.ProposalId;
        }
        else
        {
    //  test if no invoice exists for proposal - return this
            select projProposalItemDetail
                where projProposalItemDetail.SaleRefRecId == _saleRefRecId
                    join projProposalItem
                        where projProposalItem.RecId == projProposalItemDetail.ProposalRefRecId
                        exists join projProposalJour
                            where projProposalJour.ProposalId == projProposalItem.ProposalId
                            notexists join projInvoiceItem
                                where projInvoiceItem.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                join projInvoiceItemDetail
                                    where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId
                                       && projInvoiceItemDetail.SaleRefRecId == projProposalItemDetail.SaleRefRecId;

            if (projProposalItem)
            {
                proposalId = projProposalItem.ProposalId;
            }
            else
            {
    //  test if invoice with no-ref exists for proposal - return this
                select RecId from projProposalItemDetail
                    where projProposalItemDetail.SaleRefRecId == _saleRefRecId
                        join projProposalItem
                            where projProposalItem.RecId == projProposalItemDetail.ProposalRefRecId
                            exists join projProposalJour
                                where projProposalJour.ProposalId == projProposalItem.ProposalId
                                join RecId from projInvoiceItem
                                    where projInvoiceItem.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                    join RecId from projInvoiceItemDetail
                                    where  projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId
                                       &&  projInvoiceItemDetail.SaleRefRecId == _saleRefRecId
                                       && !projInvoiceItemDetail.RefRecId;

                if (projProposalItem)
                {
                    proposalId  = projProposalItem.ProposalId;
                }
            }
        }

        return proposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposaleFromSalesLine</Name>
				<Source><![CDATA[
    public static ProjProposalItemDetail initProposaleFromSalesLine(SalesLine _salesLine)
    {
        ProjProposalItemDetail    projProposalItemDetail;

        projProposalItemDetail.SaleRefRecId = 0;
        projProposalItemDetail.SalesPrice   = _salesLine.SalesPrice;
        projProposalItemDetail.AmountCur    = _salesLine.LineAmount;

        return projProposalItemDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposaleFromTrans</Name>
				<Source><![CDATA[
    public static ProjProposalItemDetail initProposaleFromTrans(ProjItemTransSale _projItemTransSale)
    {
        ProjProposalItemDetail    projProposalItemDetail;

        projProposalItemDetail.SaleRefRecId   = _projItemTransSale.RecId;
        projProposalItemDetail.SalesPrice     = _projItemTransSale.SalesPrice;
        projProposalItemDetail.AmountCur      = _projItemTransSale.LineAmount;

        return projProposalItemDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// AmountCur will be calculated when the SalesPrice on the Invoice Proposal is modified.
    /// So when there is change in AmountCur then the Invoice Proposal Invoice amount should also be updated.
    /// </summary>
    /// <remarks>
    /// The Invoice Amount is updated when the AmountCur is updated on the Invoice Lines
    /// </remarks>
    public void update()
    {
        ProjProposalId    proposalId;
        // <GTE>
        ProjProposalItemDetail orig = this.orig();
        // </GTE>

        if (this.AmountCur != this.orig().AmountCur)
        {
            proposalId = this.projProposalItem().ProposalId;
        }

        super();

        if (proposalId)
        {
            ProjInvoiceProposalInsertLines::setProjProposalTotals(proposalId);
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.SalesPrice != orig.SalesPrice)
        {
            this.projProposalItem().markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS320565</DeveloperDocumentation>
	<Label>@SYS55262</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SaleRefRecId</TitleField1>
	<TitleField2>SalesPrice</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Proposal</Name>
			<Label>@SYS26457</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6901</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProposalRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SaleRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProposalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SaleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SaleRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjItemTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjItemTransSale</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SaleRefRecId</Name>
					<Field>SaleRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjProposalItem</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalRefRecId</Name>
					<Field>ProposalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>