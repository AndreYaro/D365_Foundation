<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjSchedRole</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAProjSchedRole extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignedHrs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calc the total assigned hours from WBS
    /// </summary>
    /// <returns>
    /// Hours to show how many hours are assigned for the current worker
    /// </returns>
    public display Hours assignedHrs()
    {
        ResAssignmentView resAssignmentView;
        #TimeConstants

        select sum(Capacity) from resAssignmentView
            where resAssignmentView.ActivityResource == this.RecId;

        return resAssignmentView ? resAssignmentView.Capacity / #SecondsPerHour : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCategoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return resource category name
    /// </summary>
    /// <returns>
    /// resource category name
    /// </returns>
    public display Description getResourceCategoryName()
    {
        return ResourceCategoryFacade::getName(this.ResourceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// invoked when there is field modified
    /// </summary>
    /// <param name="_fieldId">
    /// Field id
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            //---validate the start/end date based on project calendar
            case fieldNum(PSAProjSchedRole, psaRoleStartDate):
                if (!WorkCalendarDate::isDateOpen(ProjTable::find(this.ProjId).psaSchedCalendarId,this.psaRoleStartDate))
                {
                    this.psaRoleStartDate = this.orig().psaRoleStartDate;
                    checkFailed("@PSA11116");
                }
                if ((this.psaRoleStartDate && this.psaRoleEndDate) && this.psaRoleStartDate > this.psaRoleEndDate)
                {
                    this.psaRoleEndDate = this.psaRoleStartDate;
                }
                break;
            case fieldNum(PSAProjSchedRole, psaRoleEndDate):
                if (!WorkCalendarDate::isDateOpen(ProjTable::find(this.ProjId).psaSchedCalendarId,this.psaRoleEndDate))
                {
                    this.psaRoleEndDate = this.orig().psaRoleEndDate;
                    checkFailed("@PSA11116");
                }
                if ((this.psaRoleStartDate && this.psaRoleEndDate) && this.psaRoleStartDate > this.psaRoleEndDate)
                {
                    this.psaRoleEndDate = this.orig().psaRoleEndDate;
                    checkFailed("@PSA11100");
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return resource name
    /// </summary>
    /// <returns>
    /// Resource name
    /// </returns>
    public display Name resourceName()
    {
        return ResourceFacade::getName(this.Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Thie method delete project team role record by resource
    /// </summary>
    /// <param name="_projId">
    /// The target project id
    /// </param>
    /// <param name="_resource">
    /// The target resource
    /// </param>
    public static void deleteByResource(ProjId _projId, ResourceRecId _resource)
    {
        if (_projId != '' && _resource)
        {
            PSAProjSchedRole psaProjSchedRole;

            ttsbegin;
            select forupdate psaProjSchedRole
                where psaProjSchedRole.ProjId == _projId
                    && psaProjSchedRole.Resource == _resource;

            psaProjSchedRole.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PSAProjSchedRole</c> record for a given activity resoruce rec Id.
    /// </summary>
    /// <param name="_activityResource">
    /// The activity resource rec Id.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the <c>PSAProjSchedRole</c> record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>PSAProjSchedRole</c> table buffer.
    /// </returns>
    public static PSAProjSchedRole findByRecId(activityresourcerecid _activityResource, boolean _forUpdate = false)
    {
        PSAProjSchedRole    activityResource;

        activityResource.selectForUpdate(_forUpdate);

        if (_activityResource)
        {
            select firstonly activityResource where activityResource.RecId == _activityResource;
        }

        return activityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PSAProjSchedRole</c> record for a given project ID and resource record ID.
    /// </summary>
    /// <param name="_projectId">
    /// The project ID.
    /// </param>
    /// <param name="_resource">
    /// Resource record ID.
    /// </param>
    /// <param name="_forUpdate"> 
    /// true for record to be selected for update; otherwise false; optional.
    /// </param>
    /// <returns>
    /// The <c>PSAProjSchedRole</c> table buffer.
    /// </returns>
    public static PSAProjSchedRole findByResource(ProjId _projectId, ResourceRecId _resource, boolean _forUpdate = false)
    {
        PSAProjSchedRole projectRole;

        projectRole.selectForUpdate(_forUpdate);

        if (_projectId != '' && _resource)
        {
            select firstonly projectRole
                where projectRole.ProjId == _projectId
                    && projectRole.Resource == _resource;
        }

        return projectRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByResourceCategoryWithNoResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PSAProjSchedRole</c> record for a given project ID and resource category record ID where no resource define. It is use to look for planned resource record.
    /// </summary>
    /// <param name="_projectId">
    /// The project ID.
    /// </param>
    /// <param name="_resourceCategory">
    /// The project resource category record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// true for record to be selected for update; otherwise false; optional.
    /// </param>
    /// <returns>
    /// The <c>PSAProjSchedRole</c> table buffer.
    /// </returns>
    public static PSAProjSchedRole findByResourceCategoryWithNoResource(ProjId _projectId, ResourceCategoryRecId _resourceCategory, boolean _forUpdate = false)
    {
        PSAProjSchedRole projectRole;

        projectRole.selectForUpdate(_forUpdate);

        if (_projectId != '' && _resourceCategory)
        {
            select firstonly projectRole
                where projectRole.ProjId == _projectId
                    && projectRole.ResourceCategory == _resourceCategory
                    && projectRole.Resource == 0;
        }

        return projectRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PSAProjSchedRole</c> the first record for a given project ID and resource category record ID.
    /// </summary>
    /// <param name="_projectId">
    /// The project ID.
    /// </param>
    /// <param name="_resourceCategory">
    /// The project resource cateogry record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// true for record to be selected for update; otherwise false; optional.
    /// </param>
    /// <returns>
    /// The <c>PSAProjSchedRole</c> table buffer.
    /// </returns>
    public static PSAProjSchedRole findFirst(ProjId _projectId, ResourceCategoryRecId _resourceCategory = 0, boolean _forUpdate = false)
    {
        PSAProjSchedRole projectRole;

        projectRole.selectForUpdate(_forUpdate);

        if (_projectId != '' && _resourceCategory)
        {
            select firstonly projectRole
                where projectRole.ProjId == _projectId
                && projectRole.ResourceCategory == _resourceCategory;
        }
        else if (_projectId != '')
        {
            select firstonly projectRole
                where projectRole.ProjId == _projectId;
        }

        return projectRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyResourceReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// A method to check whether any resource has been reserved for the current project.
    /// </summary>
    /// <param name="_projectId">
    /// The project ID.
    /// </param>
    /// <returns>
    /// A boolean to indicate whether any resource has been reserved.
    /// </returns>
    public static boolean hasAnyResourceReserved(ProjId _projectId)
    {
        PSAProjSchedRole psaProjSchedRole;

        if (_projectId != '')
        {
            select firstonly RecId from psaProjSchedRole
                where psaProjSchedRole.ProjId == _projectId
                    && psaProjSchedRole.Resource != 0;
        }
        return psaProjSchedRole ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoResourceReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// A method to validate if the specified role has planned resource reserved.
    /// </summary>
    /// <param name="_roleRecId">
    /// Project role record ID.
    /// </param>
    /// <returns>
    /// true if there is planned resource reserved for the specified role; otherwise false.
    /// </returns>
    public static boolean hasNoResourceReserved(RecId _roleRecId)
    {
        PSAProjSchedRole     psaProjSchedRole;

        if (_roleRecId)
        {
            select firstonly RecId from psaProjSchedRole
                where psaProjSchedRole.RecId == _roleRecId
                    && psaProjSchedRole.Resource == 0;
        }

        return psaProjSchedRole ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasResourceCategoryHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if resource category has history or not.
    /// </summary>
    /// <param name="_resource">
    /// Worker
    /// </param>
    /// <param name="_resourceCategory">
    /// Role id
    /// </param>
    /// <param name="_roleRecency">
    /// Role Recency
    /// </param>
    /// <returns>
    /// True if role history exists, otherwise false
    /// </returns>
    static boolean hasResourceCategoryHistory(ResourceRecId _resource, ResourceCategoryRecId _resourceCategory, ProjActivityRoleRecency _roleRecency)
    {
        PSAProjSchedRole     psaProjSchedRole;
        TransDate            chkDate;
        utcdatetime          utcTimeNow = DateTimeUtil::utcNow();

        switch (_roleRecency)
        {
            case ProjActivityRoleRecency::Past6Months:
                chkDate = DateTimeUtil::date(DateTimeUtil::addMonths(utcTimeNow, -6));
                break;
            case ProjActivityRoleRecency::Past12Months:
                chkDate = DateTimeUtil::date(DateTimeUtil::addYears(utcTimeNow, -1));
                break;
            default:
                break;
        }

        if (chkDate)
        {
            //---check record exist in past 6 or 12 months
            select firstonly RecId from psaProjSchedRole
                where psaProjSchedRole.Resource == _resource
                    && psaProjSchedRole.ResourceCategory == _resourceCategory
                    && !(psaProjSchedRole.psaRoleEndDate < chkDate || psaProjSchedRole.psaRoleStartDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            //---check if there any record exist
            select firstonly RecId from psaProjSchedRole
                where psaProjSchedRole.Resource == _resource
                    && psaProjSchedRole.ResourceCategory == _resourceCategory
                    && psaProjSchedRole.psaRoleStartDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }

        return psaProjSchedRole ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasResourceReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// A method to validate if there is staffed resource reserved for the specified Project ID.
    /// </summary>
    /// <param name="_resource">
    /// Resource record ID.
    /// </param>    
    /// <param name="_projId">
    /// Project ID.
    /// </param>
    /// <returns>
    /// true if there is staffed resource reserved for the specified project ID; otherwise false.
    /// </returns>
    public static boolean hasResourceReserved(ResourceRecId     _resource,                                              
                                              ProjId            _projId)
    {
        PSAProjSchedRole     psaProjSchedRole;

        if (_resource && _projId != '')
        {
            select firstonly RecId from psaProjSchedRole
                where psaProjSchedRole.ProjId   == _projId
                    && psaProjSchedRole.Resource  == _resource;
        }

        return psaProjSchedRole ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTeamMemberForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new team member resource for the project.
    /// </summary>
    /// <param name="_projId">
    /// The project ID to create project manager role.
    /// </param>
    /// <param name="_workerRecId">
    /// Worker record ID.
    /// </param>
    /// <param name="_startDate">
    /// The resource's start date in the project.
    /// </param>
    /// <param name="_endDate">
    /// The resource's end date in the project.
    /// </param>
    /// <param name="_resourceLegalEntity">
    /// The resource's legal entity recid; optional.
    /// </param>
    public static void addTeamMemberForProject(ProjId		    _projId,
                                            HcmWorkerRecId		_workerRecId,
                                            TransDate			_startDate,
                                            TransDate			_endDate,
                                            LegalEntityRecId	_resourceLegalEntity = CompanyInfo::current())
    {
        LegalEntityRecId resourceLegalEntity = _resourceLegalEntity;
        ResourceRecId resourceRecId = ResourceFacade::findByWorker(_workerRecId, resourceLegalEntity);
        
        if (prmIsDefault(_resourceLegalEntity) && !resourceRecId)
        {
            // This worker is not a resource in the current legal entity. Hence detect if this is an intercompany resource which
            // share to this legal entity and being added to just one legal entity.

            ResourceWorkerView resourceWorker;
            ResCompanyResourceSchedulableView companyResource;
            
            int intercompanyResourceCounter;
            DataAreaId currentCompany = curExt();

            while select RecId from resourceWorker
                where resourceWorker.Worker == _workerRecId
            join SourceLegalEntity from companyResource
                where companyResource.Resource == resourceWorker.RecId
                    && companyResource.RecipientCompany == currentCompany
                    && companyResource.SourceCompany != currentCompany
            {
                if (!resourceRecId)
                {
                    resourceRecId = resourceWorker.RecId;
                }
                else
                {
                    // Set resourceRecId to 0 if the worker has more than one intercompany resource records which share to this company.
                    resourceRecId = 0;
                    break;
                }
            }
        }

        if (!resourceRecId)
        {
            info(strFmt("@Proj:ProjAddWorkerAsResourceInfo", HcmWorker::find(_workerRecId).name()));
        }
        else if (!PSAProjSchedRole::findByResource(_projId, resourceRecId))
        {
            ResProjTeamController projTeamController = ResProjTeamController::getInstanceFromProjId(_projId);
            projTeamController.add(ResourceCategoryFacade::defaultResourceCategory(), _startDate, _endDate, resourceRecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS4008909</DeveloperDocumentation>
	<Label>@SYS4008909</Label>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARoleEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARoleStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARoleEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARoleStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ExtendedDataType>ActivityResourceName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<ExtendedDataType>QuotationIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSARoleEndDate</Name>
			<ExtendedDataType>SchedToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSARoleStartDate</Name>
			<ExtendedDataType>SchedFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceLegalEntity</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LegalEntityRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoleId</Name>
			<AllowEdit>No</AllowEdit>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>PSASchedRoleId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerLegalEntity</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RootActivity</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ActivityRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PK</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResourceCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceDataAreaIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RootActivity</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RootActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RootActivityDataAreaIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RootActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RootActivityNameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RootActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CompanyResource</Name>
			<RelatedTable>ResCompanyResourceSchedulableView</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>Resource</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationId</Name>
					<Field>QuotationId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResActivityResourceView</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ResActivityResourceView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ActivityResource</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResActivityResourceEngagementView</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ResActivityResourceEngagementView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ActivityResource</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResActivityResourceEngagementViewV2</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ResActivityResourceEngagementViewV2</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ActivityResource</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RootActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RootActivity</Name>
					<Field>RootActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>