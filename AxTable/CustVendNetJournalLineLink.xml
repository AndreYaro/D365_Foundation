<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNetJournalLineLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendNetJournalLineLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified record exists in the <c>CustVendNetJournalLineLink</c> table.
    /// </summary>
    /// <param name = "_recId">
    /// The record ID for the <c>CustVendNetJournalLineLink</c> record.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        CustVendNetJournalLineLink custVendNetJournalLineLink = CustVendNetJournalLineLink::find(_recId);

        return custVendNetJournalLineLink.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustVendNetJournalLineLink</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID for the <c>CustVendNetJournalLineLink</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record.
    /// </param>
    /// <returns>
    /// A record in the <c>CustVendNetJournalLineLink</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendNetJournalLineLink find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendNetJournalLineLink custVendNetJournalLineLink;

        custVendNetJournalLineLink.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendNetJournalLineLink.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendNetJournalLineLink
            where custVendNetJournalLineLink.RecId == _recId;

        return custVendNetJournalLineLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>CustVendNetJournalLineLink</c> table associated
    /// with the given ledger journal line.
    /// </summary>
    /// <param name="_accountType">
    /// The account type of the account on the given journal line.
    /// </param>
    /// <param name="_ledgerJournalTransRecId">
    /// The record ID for the given journal line.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record.
    /// </param>
    /// <returns>
    /// A record in the <c>CustVendNetJournalLineLink</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendNetJournalLineLink findByJournalLine(
        LedgerJournalACType _accountType,
        RefRecId _ledgerJournalTransRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendNetJournalLineLink custVendNetJournalLineLink;

        custVendNetJournalLineLink.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendNetJournalLineLink.concurrencyModel(_concurrencyModel);
        }

        switch (_accountType)
        {
            case LedgerJournalACType::Cust:
                select firstonly custVendNetJournalLineLink
                    where custVendNetJournalLineLink.CustNetLineRecId == _ledgerJournalTransRecId;
                break;

            case LedgerJournalACType::Vend:
                select firstonly custVendNetJournalLineLink
                    where custVendNetJournalLineLink.VendNetLineRecId == _ledgerJournalTransRecId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return custVendNetJournalLineLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLinkedJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger journal line that is linked to the given journal line.
    /// </summary>
    /// <param name="_accountType">
    /// The account type of the account on the given journal line.
    /// </param>
    /// <param name="_ledgerJournalTransRecId">
    /// The record ID for the given journal line.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerJournalTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTrans findLinkedJournalLine(
        LedgerJournalACType _accountType,
        RefRecId _ledgerJournalTransRecId)
    {
        LedgerJournalTrans ledgerJournalTrans;

        CustVendNetJournalLineLink custVendNetJournalLineLink = CustVendNetJournalLineLink::findByJournalLine(
            _accountType,
            _ledgerJournalTransRecId);

        switch (_accountType)
        {
            case LedgerJournalACType::Cust:
                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.RecId == custVendNetJournalLineLink.VendNetLineRecId;
                break;

            case LedgerJournalACType::Vend:
                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.RecId == custVendNetJournalLineLink.CustNetLineRecId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalLineLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given journal line is linked to another journal line.
    /// </summary>
    /// <param name="_accountType">
    /// The account type of the account on the given journal line.
    /// </param>
    /// <param name="_ledgerJournalTransRecId">
    /// The record ID for the given journal line.
    /// </param>
    /// <returns>
    /// true if the journal line is linked; otherwise, false.
    /// </returns>
    public static boolean isJournalLineLinked(
        LedgerJournalACType _accountType,
        RefRecId _ledgerJournalTransRecId)
    {
        CustVendNetJournalLineLink custVendNetJournalLineLink = CustVendNetJournalLineLink::findByJournalLine(
            _accountType,
            _ledgerJournalTransRecId);

        return custVendNetJournalLineLink.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustVendNetting</ConfigurationKey>
	<DeveloperDocumentation>@CashManagement:CustVendNetJournalLineLinkDeveloperDocumentation</DeveloperDocumentation>
	<IsObsolete>Yes</IsObsolete>
	<Label>@CashManagement:CustVendNetJournalLineLink</Label>
	<Modules>Bank</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerJournalTrans</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustNetLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendNetLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxNetAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustNetLineRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendNetLineRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxNetAmount</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NetAmount</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendJournalLine</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendNetLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustJournalLine</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustNetLineRecId</Name>
					<Field>CustNetLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AccountType</Name>
					<RelatedField>AccountType</RelatedField>
					<ValueStr>LedgerJournalACType::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendJournalLine</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendNetLineRecId</Name>
					<Field>VendNetLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AccountType</Name>
					<RelatedField>AccountType</RelatedField>
					<ValueStr>LedgerJournalACType::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>