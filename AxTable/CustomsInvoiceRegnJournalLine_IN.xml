<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsInvoiceRegnJournalLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsInvoiceRegnJournalLine_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customsUpdatePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates PurchTable table CustomsInvoiceRegistered_IN field to No, if the record exists in CustomsInvoiceRegnJournalTable_IN for CustomsInvoiceRegnJournalline_IN record.
    /// </summary>
    public void customsUpdatePurchTable()
    {
        PurchTable_W  purchTable_W;

        ttsbegin;
        purchTable_W = purchTable_W::findByPurchTable(
            PurchTable::find(CustomsInvoiceRegnJournalTable_IN::find(this.CustomsInvoiceRegnJournalTableRecId).OrderId).RecId,
            true);
        if (purchTable_W)
        {
            purchTable_W.CustomsInvoiceRegistered_IN = NoYes::No;
            purchTable_W.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code using ReasonCodeMap.
    /// </summary>
    /// <param name="_set">
    /// true if the reason code is set; otherwise, false.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        return this.ReasonCodeMap::editReasonCode(_set, _reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment using ReasonCodeMap.
    /// </summary>
    /// <param name="_set">
    /// true if the reason comment is set; otherwise, false.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        return this.ReasonCodeMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifys field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        CustomsQty_IN                       totQty;
        PurchLine                           purchLineLoc;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;
        boolean                             isEnableOverDelivery;
        Percent                             subOverPct;
        UnitQty                             qtyOverDelivery;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(CustomsInvoiceRegnJournalLine_IN, Receive):

                purchLineLoc = PurchLine::findRecId(this.PurchLineRecId);
                select sum(Receive) from customsInvoiceRegnJournalLine
                    where customsInvoiceRegnJournalLine.PurchLineRecId == purchLineLoc.RecId
                       && customsInvoiceRegnJournalLine.RecId          != this.RecId;

                totQty  = customsInvoiceRegnJournalLine.Receive + this.Receive;

                isEnableOverDelivery = PurchParameters::find().OverDelivery;

                if (isEnableOverDelivery
                    && totQty > purchLineLoc.PurchQty)
                {
                    qtyOverDelivery = totQty - purchLineLoc.PurchQty;

                    subOverPct = (qtyOverDelivery / purchLineLoc.PurchQty) * 100;

                    if (subOverPct > purchLineLoc.OverDeliveryPct)
                    {
                        throw warning(strFmt("@SYS24920", subOverPct, purchLineLoc.OverDeliveryPct));
                    }
                }

                // To assign original value if Bill of Entry has been posted or Total quantity is greater than Purch quantity
                // when over delivery is disabled
                if ((this.BillOfEntry && !isEnableOverDelivery)
                    || (purchLineLoc.PurchQty < totQty && !isEnableOverDelivery)
                    || this.Receive == 0)
                {
                    this.Receive = this.orig().Receive;
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update customs invoice regn journal lien.
    /// </summary>
    public void update()
    {
        CustomsInvoiceRegnTrans_IN  customsInvoiceRegnTrans;

        ttsbegin;
        super();

        // To update the corresponding record in CustomsInvoiceRegnTrans_IN table if Updated check box is marked
        // and Receive field has been modified in CustomsInvoiceRegnJournalLine_IN Table.
        if (this.Updated
            && !this.BillOfEntry)
        {
            customsInvoiceRegnTrans = CustomsInvoiceRegnTrans_IN::findByInvoiceRegnJournalLineRecId(this.RecId, true);
            if (customsInvoiceRegnTrans
                && customsInvoiceRegnTrans.Receive != this.Receive)
            {
                customsInvoiceRegnTrans.Receive = this.Receive;
                customsInvoiceRegnTrans.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean     ret;

        ret = super();
        if (ret)
        {
            if (((CustomsInvoiceRegnJournalLineINBOEValidationDeleteFlight::instance().isEnabled()
                && CustomsVendBOETrans_IN::existNotCanceledPurchLine(this.PurchLineRecId, this.CustomsInvoiceRegnJournalTableRecId))
                || (!CustomsInvoiceRegnJournalLineINBOEValidationDeleteFlight::instance().isEnabled()
                && CustomsVendBOETrans_IN::findPurchLineRecId(this.PurchLineRecId)))
                && this.BillOfEntry == NoYes::Yes)
            {
                ret = checkFailed(strfmt("@SYS75284", tablestr(CustomsVendBOETrans_IN)));
            }
            if (ret)
            {
                this.customsUpdatePurchTable();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the lines in CustomsInvoiceRegnJournalLine_IN table were CustomsInvoiceRegnJournalTableRecId field is zero or Updated field in No.
    /// </summary>
    public static void clearLines()
    {
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLineLoc;

        ttsbegin;
        delete_from customsInvoiceRegnJournalLineLoc
            where customsInvoiceRegnJournalLineLoc.CustomsInvoiceRegnJournalTableRecId == 0
               || (customsInvoiceRegnJournalLineLoc.CustomsInvoiceRegnJournalTableRecId != 0
                   && customsInvoiceRegnJournalLineLoc.Updated == NoYes::No);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnJournalLine_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsInvoiceRegnJournalLine_IN table.
    /// </returns>
    public static CustomsInvoiceRegnJournalLine_IN find(
        RefRecId            _recId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        CustomsInvoiceRegnJournalLine_IN customsInvoiceRegnJournalLine;

        customsInvoiceRegnJournalLine.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsInvoiceRegnJournalLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsInvoiceRegnJournalLine
            where customsInvoiceRegnJournalLine.RecId == _recId;

        return customsInvoiceRegnJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceRegnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnJournalLine_IN table for the specified CustomsInvoiceRegnJournalTable_IN table RecId and PurchLine recId.
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalTable">
    /// The CustomsInvoiceRegnJournalTable_IN table RecId to find CustomsInvoiceRegnJournalLine_IN record.
    /// </param>
    /// <param name="_purchLine">
    /// The PurchLine recId to find CustomsInvoiceRegnJournalLine_IN record.
    /// </param>
    /// <param name="_forupdate">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected CustomsInvoiceRegnJournalLine_IN table record.
    /// </returns>
    public static CustomsInvoiceRegnJournalLine_IN findInvoiceRegnJournalLine(
        RefRecId    _customsInvoiceRegnJournalTable,
        RefRecId    _purchLine,
        boolean     _forupdate = false)
    {
        CustomsInvoiceRegnJournalLine_IN customsInvoiceRegnJournalLine;

        if (_customsInvoiceRegnJournalTable && _purchLine)
        {
            customsInvoiceRegnJournalLine.selectForUpdate(_forupdate);

            select firstonly customsInvoiceRegnJournalLine
                where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == _customsInvoiceRegnJournalTable
                   && customsInvoiceRegnJournalLine.PurchLineRecId == _purchLine;
        }

        return customsInvoiceRegnJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnJournalLine_IN table for the specified CustomsInvoiceRegnJournalTable_IN table RecId.
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalTablerecId">
    /// The CustomsInvoiceRegnJournalTable_IN table RecId to find CustomsInvoiceRegnJournalLine_IN record.
    /// </param>
    /// <param name="_forupdate">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected CustomsInvoiceRegnJournalLine_IN table recId.
    /// </returns>
    public static CustomsInvoiceRegnJournalLine_IN findRecId(
        RefRecId    _customsInvoiceRegnJournalTablerecId,
        boolean     _forupdate = false)
    {
        CustomsInvoiceRegnJournalLine_IN customsInvoiceRegnJournalLine;

        if (_customsInvoiceRegnJournalTablerecId)
        {
            customsInvoiceRegnJournalLine.selectForUpdate(_forupdate);

            select firstonly customsInvoiceRegnJournalLine
                where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == _customsInvoiceRegnJournalTablerecId;
        }

        return customsInvoiceRegnJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivePerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cumulative Receive quantity for specified CustomsInvoiceRegnJournalLine_IN table RecId.
    /// </summary>
    /// <param name="_customsInvoiceRegnJournalLineRecId">
    /// The CustomsInvoiceRegnJournalLine_IN table RecId to find the sum of receive quantity for CustomsInvoiceRegnJournalLine_IN.
    /// </param>
    /// <returns>
    /// Cumulative Receive quantity for CustomsInvoiceRegnJournalLine_IN record.
    /// </returns>
    public static CustomsQty_IN getReceivePerLine(RefRecId _customsInvoiceRegnJournalLineRecId)
    {
        CustomsInvoiceRegnTrans_IN customsInvoiceRegnTrans;

        select sum(Receive) from customsInvoiceRegnTrans
            where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == _customsInvoiceRegnJournalLineRecId;

        return customsInvoiceRegnTrans.Receive;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64136</DeveloperDocumentation>
	<Label>@GLS5752</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CustomsInvoiceRegnJournalTableRecId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustomsInvoiceRegnTrans_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsInvoiceRegnTrans_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Receive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsInvoiceRegnJournalTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Updated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Receive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsInvoiceRegnJournalTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsInvoiceRegnJournalTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillOfEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5641</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsInvoiceRegnJournalTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Receive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsQty_IN</ExtendedDataType>
			<Label>@SYS52744</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Updated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS439</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustomsInvoiceRegnJournalTableRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsInvoiceRegnJournalTableRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ReasonCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustomsInvoiceRegnJournalTableRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsInvoiceRegnJournalTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsInvoiceRegnJournalTableRecId</Name>
					<Field>CustomsInvoiceRegnJournalTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLineRecId</Name>
					<Field>PurchLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>