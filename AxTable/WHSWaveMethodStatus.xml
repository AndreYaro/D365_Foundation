<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveMethodStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWaveMethodStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayEstimatedCompletionDatetime</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Displays estimated completion date time.
    /// </summary>
    /// <returns>
    ///   The estimated completion date time.
    /// </returns>
    display utcdatetime displayEstimatedCompletionDatetime()
    {
        if (this.MethodEndDateTime > DateTimeUtil::minValue())
        {
            return DateTimeUtil::minValue();
        }

        int elapsedTimeInSeconds = DateTimeUtil::getDifference(DateTimeUtil::getSystemDateTime(), this.MethodStartDateTime);
        
        real locExecutedSteps = this.getExecutedSteps();

        if (locExecutedSteps > 0)
        {
            return DateTimeUtil::addSeconds(this.MethodStartDateTime, (this.TotalSteps * elapsedTimeInSeconds) / locExecutedSteps);
        }
        else 
        {
            return this.MethodStartDateTime;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPercentComplete</Name>
				<Source><![CDATA[
	/// <summary>
    ///   Displays the percentage of the completed steps.
	/// </summary>
	/// <returns>
	///   The percentage of the completed steps.
	/// </returns>
    display Percent displayPercentComplete()
    {       
        return (this.getExecutedSteps() / this.TotalSteps) * 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDuration</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Displays the percentage of the completed steps.
    /// </summary>
    /// <returns>
    ///   The percentage of the completed steps.
    /// </returns>
    display str displayDuration()
    {
        return time2StrHMS(this.getDuration());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPercentCompleteAndDuration</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Displays the percentage of the completed steps.
    /// </summary>
    /// <returns>
    ///   The percentage of the completed steps.
    /// </returns>
    display str displayPercentCompleteAndDuration()
    {
        if (this.MethodStartDateTime == DateTimeUtil::minValue())
        {
            return  '';
        }

        real completion = (this.getExecutedSteps() / this.TotalSteps) * 100;
        return strFmt("@WAX:WHSWaveProgressPercentCompleteAndDuration", completion == 100 ? 100 : completion, time2StrHMS(this.getDuration()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDuration</Name>
				<Source><![CDATA[
    private int64 getDuration()
    {
        if (this.MethodStartDateTime == DateTimeUtil::minValue())
        {
            return 0;
        }

        int duration;

        if (this.MethodEndDateTime == DateTimeUtil::minValue())
        {
            duration = DateTimeUtil::getDifference(DateTimeUtil::getSystemDateTime(), this.MethodStartDateTime);
        }
        else
        {
            duration = DateTimeUtil::getDifference(this.MethodEndDateTime, this.MethodStartDateTime);
        }

        return duration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExecutedSteps</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Displays the count of executed steps.
    /// </summary>
    /// <returns>
    ///   If post method is allocateWave,return count of allocated load lines,
    ///   otherwise return count of executed steps.
    /// </returns>
    display WHSExecutedSteps displayExecutedSteps()
    {
        return this.getExecutedSteps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutedSteps</Name>
				<Source><![CDATA[
    private WHSExecutedSteps getExecutedSteps()
    {
        WHSWaveMethodStatusDisplay waveMethodStatusDisplay = WHSWaveMethodStatusDisplay::getWaveMethodStatusDisplay(this);
        return waveMethodStatusDisplay.getExecutedSteps();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpdateWhenChildUpdated</Name>
				<Source><![CDATA[
    final boolean allowUpdateWhenChildUpdated()
    {
        WHSWaveMethodStatusUpdatePolicy waveMethodStatusUpdatePolicy = WHSWaveMethodStatusUpdatePolicy::getWaveMethodStatusUpdatePolicy(this.PostMethodName);
        return waveMethodStatusUpdatePolicy.allowUpdateWhenChildUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextWaveStep</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds next wave step.
	/// </summary>
	/// <returns>
	/// The next wave step.
	/// </returns>
    WHSWaveStep getNextWaveStep()
    {
        WHSWaveMethodStatus waveMethodStatus;

        select firstonly WaveStep from waveMethodStatus
            order by WaveStep desc
            where waveMethodStatus.WaveId       == this.WaveId &&
                  waveMethodStatus.RefRecId     == this.RefRecId;

        ++waveMethodStatus.WaveStep;

        return waveMethodStatus.WaveStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.WaveStep = this.getNextWaveStep();

        // Total Steps cannot be zero
        if (this.TotalSteps <= 0)
        {
            this.TotalSteps = 1;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update current wave method status.
    /// </summary>
    public void update()
    {
        // Total Steps cannot be zero
        if (this.TotalSteps <= 0)
        {
            this.TotalSteps = 1;
        }

        // If executed steps is greater than or equal to total steps then set ended date time
        if (this.ExecutedSteps >= this.TotalSteps)
        {
            this.MethodEndDateTime = DateTimeUtil::getSystemDateTime();
        }
        else if (this.MethodEndDateTime > DateTimeUtil::minValue())
        {
            this.MethodEndDateTime = DateTimeUtil::minValue();
        }

        real additionalSteps = (this.ExecutedSteps - this.orig().ExecutedSteps);

        super();

        // Update parent status
        ttsbegin;

        if (this.RefRecId && additionalSteps)
        {
            WHSWaveMethodStatus parentStatus = WHSWaveMethodStatus::findByRecId(this.RefRecId);
            if (parentStatus && 
                parentStatus.allowUpdateWhenChildUpdated())
            {
                WHSExecutedSteps parentExecutedSteps = parentStatus.ExecutedSteps + ((additionalSteps / this.TotalSteps) / max(1, parentStatus.TotalSteps));
                WHSWaveMethodStatus::createOrUpdateWaveMethodStatus(parentStatus.WaveId,
                                                                parentStatus.PostMethodName,
                                                                false,
                                                                parentStatus.RefRecId,
                                                                parentExecutedSteps);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateWaveMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates the method status.
    /// </summary>
    /// <param name="_waveId">
    ///    The wave ID that the method status is created or updated for.
    /// </param>
    /// <param name="_methodName">
    ///    The method name.
    /// </param>
    /// <param name="_stripClassName">
    ///    A Boolean value that defines if the class name should be stripped from the method name; optional.
    /// </param>
    /// <param name="_parentRecId">
    ///    The parent record ID.
    /// </param>
    /// <param name="_executedSteps">
    ///    The number of executed steps.
    /// </param>
    /// <param name="_totalSteps">
    ///    The number of total steps.
    /// </param>
    /// <param name="_startDateTime">
    ///    The started date and time; optional.
    /// </param>
    /// <returns>
    ///    The <c>WHSWaveMethodStatus</c> record.
    /// </returns>
    public static WHSWaveMethodStatus createOrUpdateWaveMethodStatus(
        WHSWaveId              _waveId,
        WHSPostMethodName      _methodName,
        boolean                _stripClassName  = true,
        RefRecId               _parentRecId     = 0,
        WHSExecutedSteps       _executedSteps   = 0,
        WHSTotalSteps          _totalSteps      = 0,
        WHSMethodStartDateTime _startDateTime   = DateTimeUtil::minValue())
    {
        WHSWaveMethodStatus  waveMethodStatus;

        if (WHSParameters::find().WaveProgressLog)
        {
            WHSPostMethodName methodName = _methodName;
            if (_stripClassName)
            {
                methodName = WHSWaveMethodStatus::methodNameWithoutClassName(methodName);
            }

            Debug::assert(_waveId != '');
            Debug::assert(methodName != '');

            // If WHSParameters::find().WaveProgressLog is enabled during processing, waveId and methodName can be blank.
            if (_waveId && methodName)
            {
                waveMethodStatus = WHSWaveMethodStatus::createOrUpdateWaveMethodStatusInUserConnectionWithRetry(_waveId, methodName, _parentRecId, _executedSteps, _totalSteps, _startDateTime);
            }
        }

        return waveMethodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateWaveMethodStatusInUserConnectionWithRetry</Name>
				<Source><![CDATA[
    static private WHSWaveMethodStatus createOrUpdateWaveMethodStatusInUserConnectionWithRetry(
        WHSWaveId              _waveId,
        WHSPostMethodName      _methodName,
        RefRecId               _parentRecId,
        WHSExecutedSteps       _executedSteps,
        WHSTotalSteps          _totalSteps,
        WHSMethodStartDateTime _startDateTime)
    {
        #OCCRetryCount

        try
        {
            return WHSWaveMethodStatus::createOrUpdateWaveMethodStatusInUserConnection(_waveId, _methodName, _parentRecId, _executedSteps, _totalSteps, _startDateTime);
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            throw Exception::UpdateConflictNotRecovered;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            throw Exception::DuplicateKeyExceptionNotRecovered;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateWaveMethodStatusInUserConnection</Name>
				<Source><![CDATA[
    private static WHSWaveMethodStatus createOrUpdateWaveMethodStatusInUserConnection(
        WHSWaveId              _waveId,
        WHSPostMethodName      _methodName,
        RefRecId               _parentRecId,
        WHSExecutedSteps       _executedSteps,
        WHSTotalSteps          _totalSteps,
        WHSMethodStartDateTime _startDateTime)
    {
        UserConnection connection = new UserConnection();

        try
        {
            connection.ttsbegin();

            WHSWaveMethodStatus waveMethodStatus = WHSWaveMethodStatus::findUsingUserConnection(_waveId, _methodName, _parentRecId, connection, true);
            if (waveMethodStatus)
            {
                waveMethodStatus.TotalSteps          = _totalSteps ? _totalSteps : waveMethodStatus.TotalSteps;
                waveMethodStatus.ExecutedSteps       = _executedSteps ? _executedSteps : waveMethodStatus.ExecutedSteps;
                waveMethodStatus.MethodStartDateTime = waveMethodStatus.MethodStartDateTime == DateTimeUtil::minValue() ? _startDateTime : waveMethodStatus.MethodStartDateTime;
                // Make sure Total steps is never zero
                waveMethodStatus.TotalSteps          = waveMethodStatus.TotalSteps ? waveMethodStatus.TotalSteps : 1;
                waveMethodStatus.update();
            }
            else
            {
                waveMethodStatus.setConnection(connection);
                waveMethodStatus.WaveId              = _waveId;
                waveMethodStatus.PostMethodName      = _methodName;
                waveMethodStatus.RefRecId            = _parentRecId;
                waveMethodStatus.TotalSteps          = _totalSteps ? _totalSteps : 1;
                waveMethodStatus.ExecutedSteps       = _executedSteps;
                waveMethodStatus.MethodStartDateTime = _startDateTime;
                waveMethodStatus.insert();
            }
            connection.ttscommit();

            return waveMethodStatus;
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeProgress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates execute steps of wave method status.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the wave method status to update.
    /// </param>
    /// <param name="_steps">
    ///    The steps to add to executed steps of wave method status.
    /// </param>
    /// <returns>
    ///    The <c>WHSWaveMethodStatus</c> record after update.
    /// </returns>
    [Hookable(false)]
    internal static WHSWaveMethodStatus makeProgress(RecId _recId, int _steps = 1)
    {
        return WHSWaveMethodStatus::makeProgressInUserConnectionWithRetry(_recId, _steps);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeProgressInUserConnectionWithRetry</Name>
				<Source><![CDATA[
    static private WHSWaveMethodStatus makeProgressInUserConnectionWithRetry(RecId _recId, int _steps)
    {
        #OCCRetryCount

        try
        {
            return WHSWaveMethodStatus::makeProgressInUserConnection(_recId, _steps);
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            throw Exception::UpdateConflictNotRecovered;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeProgressInUserConnection</Name>
				<Source><![CDATA[
    private static WHSWaveMethodStatus makeProgressInUserConnection(RecId _recId, int _steps)
    {
        WHSWaveMethodStatus  waveMethodStatus;

        if (WHSParameters::find().WaveProgressLog)
        {
            UserConnection connection = new UserConnection();

            try
            {
                connection.ttsbegin();

                waveMethodStatus.setConnection(connection);
                waveMethodStatus.selectForUpdate(true);

                select firstonly waveMethodStatus where waveMethodStatus.RecId == _recId;
                if (waveMethodStatus)
                {
                    waveMethodStatus.ExecutedSteps = waveMethodStatus.ExecutedSteps + _steps;
                    waveMethodStatus.update();
                }

                connection.ttscommit();
            }
            finally
            {
                connection.finalize();
            }
        }

        return waveMethodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWaveMethodStatus</c> record exists.
	/// </summary>
	/// <param name="_waveId">
	/// Wave id of the record.
	/// </param>
	/// <param name="_postMethodName">
	/// Post method name of the record.
	/// </param>
	/// <param name="_refRecId">
	/// The referenced record of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSWaveId _waveId,
                                WHSPostMethodName _postMethodName,
                                RefRecId _refRecId)
    {
        return (_waveId && _postMethodName) &&
               (select firstonly whsWaveMethodStatus
                where whsWaveMethodStatus.WaveId            == _waveId          &&
                      whsWaveMethodStatus.PostMethodName    == _postMethodName  &&
                      whsWaveMethodStatus.RefRecId          == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWaveMethodStatus</c> record with given parameters.
	/// </summary>
	/// <param name="_waveId">
	/// Wave id of the record.
	/// </param>
	/// <param name="_postMethodName">
	/// Post method name of the record.
	/// </param>
	/// <param name="_refRecId">
	/// Referenced record id of the record.
	/// </param>
	/// <param name="_forUpdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWaveMethodStatus find(WHSWaveId _waveId,
                                           WHSPostMethodName _postMethodName,
                                           RefRecId _refRecId,
                                           boolean _forUpdate = false)
    {
        return WHSWaveMethodStatus::findUsingUserConnection(_waveId, _postMethodName, _refRecId, null, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUsingUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWaveMethodStatus</c> record with given parameters.
    /// </summary>
    /// <param name="_waveId">
    /// Wave id of the record.
    /// </param>
    /// <param name="_postMethodName">
    /// Post method name of the record.
    /// </param>
    /// <param name="_refRecId">
    /// Referenced record id of the record.
    /// </param>
    /// <param name="_userConnection">
    /// A <c>UserConnection</c> connection that the record will be selected through. If null the default connection is used.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWaveMethodStatus findUsingUserConnection(
        WHSWaveId           _waveId,
        WHSPostMethodName   _postMethodName,
        RefRecId            _refRecId,
        UserConnection      _userConnection,
        boolean             _forUpdate = false)
    {
        WHSWaveMethodStatus waveMethodStatus;

        if (_userConnection)
        {
            waveMethodStatus.setConnection(_userConnection);
        }

        if (_waveId && _postMethodName)
        {
            waveMethodStatus.selectForUpdate(_forUpdate);

            select firstonly waveMethodStatus
                where waveMethodStatus.WaveId           == _waveId
                   && waveMethodStatus.PostMethodName   == _postMethodName
                   && waveMethodStatus.RefRecId         == _refRecId;
        }

        return waveMethodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWaveMethodStatus</c> record by id.
	/// </summary>
	/// <param name="_recId">
	/// Id of the record.
	/// </param>
	/// <param name="_forUpdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWaveMethodStatus findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        WHSWaveMethodStatus waveMethodStatus;

        if (_recId)
        {
            waveMethodStatus.selectForUpdate(_forUpdate);

            select firstonly waveMethodStatus
                where waveMethodStatus.RecId == _recId;
        }

        return waveMethodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>methodNameWithoutClassName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Strips the class name of a method name, if present.
    /// </summary>
    /// <param name="_methodName">
    ///    The method name.
    /// </param>
    /// <returns>
    ///    The stripped method name.
    /// </returns>
    public static WHSPostMethodName methodNameWithoutClassName(str _methodName)
    {
        int     periodPos;
        str     methodName = _methodName;

        periodPos = strFind(methodName,'.',1,strLen(methodName));

        if (periodPos)
        {
            methodName = subStr(methodName,periodPos+1,strLen(methodName));
        }

        return methodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWaveMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean up status records from previous run.
    /// </summary>
    /// <param name = "_whsWaveId">Wave to clean up.</param>
    [Hookable(false)]
    internal static void deleteWaveMethodStatus(WHSWaveId _whsWaveId)
    {
        UserConnection conn = new UserConnection();

        try
        {
            conn.ttsbegin();

            WHSwaveMethodStatus waveMethodStatus;
            waveMethodStatus.setConnection(conn);

            delete_from waveMethodStatus
                where waveMethodStatus.WaveId == _whsWaveId;

            conn.ttscommit();
        }
        finally
        {
            conn.finalize();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4480</DeveloperDocumentation>
	<Label>@WAX3139</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>WaveId</TitleField1>
	<TitleField2>PostMethodName</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WaveIdMethodNameRefRecIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveStep</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedSteps</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSteps</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodStartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodEndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveStep</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExecutedSteps</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSteps</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodStartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodEndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExecutedSteps</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSExecutedSteps</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>MethodEndDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMethodEndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>MethodStartDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMethodStartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostMethodName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPostMethodName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TotalSteps</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTotalSteps</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WaveStep</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveStep</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WaveIdMethodNameRefRecIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PostMethodName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSWaveMethodStatus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWaveMethodStatus</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWaveTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWaveTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveId</Name>
					<SourceEDT>WHSWaveId</SourceEDT>
					<Field>WaveId</Field>
					<RelatedField>WaveId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>