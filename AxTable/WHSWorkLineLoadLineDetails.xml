<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineLoadLineDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkLineLoadLineDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reduceInventQtyWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduces the <c>InventQtyWork</c> fields value with the specified quantity.
    /// </summary>
    /// <param name = "_workLine">The work line used to find the <c>WHSWorkLineLoadLineDetails</c> record that should be updated.</param>
    /// <param name = "_loadLineRecId">The reference to the load line.</param>
    /// <param name = "_reduceQty">The quantity that the <c>InventQtyWork</c> fields value should be reduced with. The value is expected to be positive.</param>
    /// <remarks>The <c>InventQtyWork</c> fields value is not reduced below 0.</remarks>
    public static void reduceInventQtyWork(
        WHSWorkLine _workLine,
        RefRecId _loadLineRecId,
        InventQty _reduceQty)
    {
        ttsbegin;

        WHSWorkLineLoadLineDetails workLineLoadLineDetails = WHSWorkLineLoadLineDetails::find(_workLine.WorkId, _workLine.LineNum, _loadLineRecId, true);

        if (workLineLoadLineDetails.InventQtyWork > 0)
        {
            workLineLoadLineDetails.InventQtyWork = max(0, workLineLoadLineDetails.InventQtyWork - _reduceQty);
            workLineLoadLineDetails.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineLoadLineDetailsFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create all necessary <c>WHSWorkLineLoadLineDetails</c> based on the provided <c>WHSWorkLine</c> record.
    /// </summary>
    /// <param name = "_workLine">Work line to add new records for.</param>
    /// <param name = "_copyFromWorkLine">Work line to copy the information from.</param>
    public static void createWorkLineLoadLineDetailsFromWorkLine(WHSWorkLine _workLine, WHSWorkLine _copyFromWorkLine)
    {
        boolean workLineLoadLineDetailsCopyFromExists;

        ttsbegin;

        WHSWorkTable workTableFrom = _copyFromWorkLine.whsWorkTable();

        if (workTableFrom.HasWorkLineLoadLineDetails)
        {
            WHSWorkLineLoadLineDetails workLineLoadLineDetailsCopyFrom;

            // We do not use insert_recordset here, since we can already have lines for the same load line present.
            while select LoadLineRefRecId, InventQtyWork, CapturedWeight from workLineLoadLineDetailsCopyFrom
                where workLineLoadLineDetailsCopyFrom.WorkId == _copyFromWorkLine.WorkId
                    && workLineLoadLineDetailsCopyFrom.LineNum == _copyFromWorkLine.LineNum
            {
                workLineLoadLineDetailsCopyFromExists = true;

                WHSWorkLineLoadLineDetails::createOrUpdateWorkLineLoadLineDetails(_workLine, workLineLoadLineDetailsCopyFrom.LoadLineRefRecId, workLineLoadLineDetailsCopyFrom.InventQtyWork, workLineLoadLineDetailsCopyFrom.CapturedWeight);
            }
        }

        // If we did not have WHSWorkLineLoadLineDetails on _copyFromWorkLine, create them based on initial pick work lines
        if (!workLineLoadLineDetailsCopyFromExists)
        {
            WHSWorkLine initialPickLine;

            while select LoadLineRefRecId, InventQtyWork, CapturedWeight from initialPickLine
                where initialPickLine.WorkId == _copyFromWorkLine.WorkId
                    && initialPickLine.LoadLineRefRecId != 0
                    && initialPickLine.WorkType == WHSWorkType::Pick
                    && initialPickLine.WorkStatus == WHSWorkStatus::Closed
                    && initialPickLine.InventQtyWork > 0
            {
                WHSWorkLineLoadLineDetails::createOrUpdateWorkLineLoadLineDetails(_workLine, initialPickLine.LoadLineRefRecId, initialPickLine.InventQtyWork, initialPickLine.CapturedWeight);
            }
        }

        WHSWorkLineLoadLineDetails::updateWorkTableWithHasWorkLineLoadLineDetails(_workLine.WorkId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkTableWithHasWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
	/// <summary>
    /// Set the has work line load line details to true for the <c>WHSWorkTable</c> record selected by the specified work ID.
    /// </summary>
    /// <param name = "_workId">Work ID of the work to be updated.</param>
    public static void updateWorkTableWithHasWorkLineLoadLineDetails(WHSWorkId _workId)
    {
       WHSWorkTable workTable = WHSWorkTable::find(_workId, true);

        if (!workTable.HasWorkLineLoadLineDetails)
        {
            workTable.HasWorkLineLoadLineDetails = true;
            workTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineLoadLineDetailsFromContainerId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create all necessary <c>WHSWorkLineLoadLineDetails</c> based on the provided container Id.
    /// </summary>
    /// <param name = "_workLine">Work line to add new records for.</param>
    /// <param name = "_containerId">Container Id to create records for.</param>
    public static void createWorkLineLoadLineDetailsFromContainerId(WHSWorkLine _workLine, WHSContainerId _containerId)
    {
        WHSContainerLine containerLine;

        while select containerLine
            where containerLine.ContainerId == _containerId
        {
            WHSWorkLineLoadLineDetails::createOrUpdateWorkLineLoadLineDetails(_workLine, containerLine.LoadLine, containerLine.getInventoryHandlingQuantity(), 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateWorkLineLoadLineDetails</Name>
				<Source><![CDATA[
    private static void createOrUpdateWorkLineLoadLineDetails(
        WHSWorkLine     _workLine, 
        RecId           _loadLineRecId, 
        InventQty       _inventQtyWork, 
        WHSTransWeight  _weight)
    {
        WHSWorkLineLoadLineDetails workLineLoadLineDetails;

        ttsbegin;

        workLineLoadLineDetails = WHSWorkLineLoadLineDetails::find(_workLine.WorkId, _workLine.LineNum, _loadLineRecId, true);

        if (workLineLoadLineDetails)
        {
            workLineLoadLineDetails.InventQtyWork += _inventQtyWork;
            workLineLoadLineDetails.CapturedWeight += _weight;
            workLineLoadLineDetails.update();
        }
        else
        {
            workLineLoadLineDetails.WorkId = _workLine.WorkId;
            workLineLoadLineDetails.LineNum = _workLine.LineNum;
            workLineLoadLineDetails.LoadLineRefRecId = _loadLineRecId;
            workLineLoadLineDetails.InventQtyWork = _inventQtyWork;
            workLineLoadLineDetails.CapturedWeight = _weight;
            workLineLoadLineDetails.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSWorkLineLoadLineDetails find(WHSWorkId _workId, WHSLineNum _lineNum, RecId _loadLineRecId, boolean _forUpdate = false)
    {
        WHSWorkLineLoadLineDetails workLineLoadLineDetails;

        workLineLoadLineDetails.selectForUpdate(_forUpdate);

        if (_workId && _lineNum && _loadLineRecId)
        {
            select firstonly workLineLoadLineDetails
                where workLineLoadLineDetails.WorkId == _workId
                    && workLineLoadLineDetails.LineNum == _lineNum
                    && workLineLoadLineDetails.LoadLineRefRecId == _loadLineRecId;
        }

        return workLineLoadLineDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForWorkLine</Name>
				<Source><![CDATA[
    public static boolean existForWorkLine(WHSWorkLine _workLine)
    {
        return _workLine &&
            (select firstonly RecId from WHSWorkLineLoadLineDetails
                where WHSWorkLineLoadLineDetails.WorkId == _workLine.WorkId
                    && WHSWorkLineLoadLineDetails.LineNum == _workLine.LineNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForLoadLine</Name>
				<Source><![CDATA[
    public static boolean existForLoadLine(WHSLoadLine _loadLine)
    {
        return _loadLine &&
            (select firstonly RecId from WHSWorkLineLoadLineDetails
                where WHSWorkLineLoadLineDetails.LoadLineRefRecId == _loadLine.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a query to iterate over <c>WHSWorkLineLoadLineDetails</c> for the specified workId.
    /// </summary>
    /// <param name = "_workId">Work Id to build the query for.</param>
    /// <param name = "_queryOnlyClosedWorkLines">Assume all work lines are closed, or allow for open/in-process one?</param>
    /// <returns>A <c>Query</c> object for iterating over <c>WHSWorkLineLoadLineDetails</c> lines.</returns>
    public static Query buildQueryFromWorkId(WHSWorkId _workId, boolean _queryOnlyClosedWorkLines = false)
    {
        WHSWorkLine pickWorkLineWithLoadLineDetails;

        if (!_queryOnlyClosedWorkLines)
        {
            // If we need to query Open/InProcess lines, it can mean we might have more than 1 staging Pick/Put pairs still pending
            // for this case WHSWorkLineLoadLineDetails would then be on the first Open/InProcess Pick line
            pickWorkLineWithLoadLineDetails = WHSWorkLine::firstOpenOrInProcessPickOrPutLine(_workId);

            //if we get a put we have a work that without previous staging, e.g. packed container picking, which has the details associated to the first pick line.
            if (pickWorkLineWithLoadLineDetails.workType == WHSWorkType::Put)
            {
                pickWorkLineWithLoadLineDetails = null;
            }
        }

        if (_queryOnlyClosedWorkLines || !pickWorkLineWithLoadLineDetails)
        {
            // If we need to only query for Closed lines, we query backwards.
            // Also do that if we did not find anything above as that might mean that all work is in fact closed, in which case
            // WHSWorkLineLoadLineDetails would be on the last Pick line
            pickWorkLineWithLoadLineDetails = WHSWorkLine::lastClosedPickLine(_workId);
        }

        // If we simply did not find such a line, or if we did, but it is one of the initial picks, we fail as something is wrong.
        if (!pickWorkLineWithLoadLineDetails || pickWorkLineWithLoadLineDetails.LoadLineRefRecId != 0)
        {
            throw error(strFmt("@WAX:WorkHasLoadLineDetailsButInvalidWorkLines", _workId));
        }

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(WHSWorkLineLoadLineDetails));
        qbds.addRange(fieldNum(WHSWorkLineLoadLineDetails, WorkId)).value(queryValue(_workId));
        qbds.addRange(fieldNum(WHSWorkLineLoadLineDetails, LineNum)).value(queryValue(pickWorkLineWithLoadLineDetails.LineNum));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromWorkIdGroupByProperty</Name>
				<Source><![CDATA[
    private static Query buildQueryFromWorkIdGroupByProperty(
        WHSWorkId   _workId, 
        FieldId     _fieldNum, 
        boolean     _queryOnlyClosedWorkLines = true)
    {
        Query query = WHSWorkLineLoadLineDetails::buildQueryFromWorkId(_workId, _queryOnlyClosedWorkLines);

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(WHSWorkLineLoadLineDetails));
        qbds.addSelectionField(fieldNum(WHSWorkLineLoadLineDetails, TableId), SelectionField::Max);

        QueryBuildDataSource qbdsLoadLine = qbds.addDataSource(tableNum(WHSLoadLine));
        qbdsLoadLine.relations(true);
        qbdsLoadLine.addGroupByField(_fieldNum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromWorkIdGroupByLoadIdAndQueryOpenWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a query to iterate over <c>WHSWorkLineLoadLineDetails</c> for the specified workId, for open and closed work lines.
    /// Group the resulting lines by LoadId.
    /// </summary>
    /// <param name = "_workId">Work Id to build the query for.</param>
    /// <returns>A <c>Query</c> object for iterating over <c>WHSWorkLineLoadLineDetails</c> lines.</returns>
    public static Query buildQueryFromWorkIdGroupByLoadIdAndQueryOpenWorkLines(WHSWorkId _workId)
    {
        return WHSWorkLineLoadLineDetails::buildQueryFromWorkIdGroupByProperty(_workId, fieldNum(WHSLoadLine, LoadId), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromWorkIdGroupByLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a query to iterate over <c>WHSWorkLineLoadLineDetails</c> for the specified workId, for closed work lines.
    /// Group the resulting lines by LoadId.
    /// </summary>
    /// <param name = "_workId">Work Id to build the query for.</param>
    /// <returns>A <c>Query</c> object for iterating over <c>WHSWorkLineLoadLineDetails</c> lines.</returns>
    public static Query buildQueryFromWorkIdGroupByLoadId(WHSWorkId _workId)
    {
        return WHSWorkLineLoadLineDetails::buildQueryFromWorkIdGroupByProperty(_workId, fieldNum(WHSLoadLine, LoadId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromWorkIdGroupByShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a query to iterate over <c>WHSWorkLineLoadLineDetails</c> for the specified workId, for closed work lines.
    /// Group the resulting lines by ShipmentId.
    /// </summary>
    /// <param name = "_workId">Work Id to build the query for.</param>
    /// <returns>A <c>Query</c> object for iterating over <c>WHSWorkLineLoadLineDetails</c> lines.</returns>
    public static Query buildQueryFromWorkIdGroupByShipmentId(WHSWorkId _workId)
    {
        return WHSWorkLineLoadLineDetails::buildQueryFromWorkIdGroupByProperty(_workId, fieldNum(WHSLoadLine, ShipmentId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFromWorkIdGroupByShipmentIdAndQueryOpenWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a query to iterate over <c>WHSWorkLineLoadLineDetails</c> for the specified workId, for open and closed work lines.
    /// Group the resulting lines by ShipmentId.
    /// </summary>
    /// <param name = "_workId">Work Id to build the query for.</param>
    /// <returns>A <c>Query</c> object for iterating over <c>WHSWorkLineLoadLineDetails</c> lines.</returns>
    public static Query buildQueryFromWorkIdGroupByShipmentIdAndQueryOpenWorkLines(WHSWorkId _workId)
    {
        return WHSWorkLineLoadLineDetails::buildQueryFromWorkIdGroupByProperty(_workId, fieldNum(WHSLoadLine, ShipmentId), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseQtyAndDeleteRecordIfNewQtyIsZeroOrLess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decreases current quantity.
    /// </summary>
    /// <param name="_inventQtyWork">
    /// Quantity to be removed.
    /// </param>
    /// <remarks>
    /// Negative quantities are ignored.
    /// </remarks>
    public void decreaseQtyAndDeleteRecordIfNewQtyIsZeroOrLess(WHSInventQtyWork _inventQtyWork)
    {
        if (_inventQtyWork > 0)
        {
            WHSInventQtyWork newInventQtyWork = this.InventQtyWork - _inventQtyWork;

            if (newInventQtyWork > 0)
            {
                this.InventQtyWork = newInventQtyWork;
                this.update();
            }
            else
            {
                this.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInventQtyWorkFromPackedContainerWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the total work quantity from the packed container picking work.
    /// </summary>
    /// <param name = "_loadLineRecId">Load line reference.</param>
    /// <returns>Total work quantity in inventory unit.</returns>
    [Hookable(false)]
    internal static InventQty totalInventQtyWorkFromPackedContainerWork(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSWorkLineLoadLineDetails workLineLoadLineDetails;
        WHSLineNum firstPutLineNum;
        WHSWorkId workId;
        WHSInventQtyWork inventWorkQty;
        WHSWorkTable workTable;

        while select WorkId, LineNum, InventQtyWork from workLineLoadLineDetails
            where workLineLoadLineDetails.LoadLineRefRecId == _loadLineRecId
            exists join workTable
                where  workTable.WorkId == workLineLoadLineDetails.WorkId
                    && workTable.WorkTransType == WHSWorkTransType::PackedContainerPicking
                    && workTable.WorkStatus != WHSWorkStatus::Combined
                    && workTable.WorkStatus != WHSWorkStatus::Cancelled
        {
            if (workId != workLineLoadLineDetails.WorkId)
            {
                WHSWorkLine firstPutWorkLine;
                select firstonly WorkId, LineNum from firstPutWorkLine
                        order by LineNum
                        where firstPutWorkLine.WorkId == workLineLoadLineDetails.WorkId
                            && firstPutWorkLine.WorkType == WHSWorkType::Put;

                firstPutLineNum = firstPutWorkLine.LineNum;
                workId = firstPutWorkLine.WorkId;
            }

            if (workLineLoadLineDetails.LineNum < firstPutLineNum)
            {
                inventWorkQty += workLineLoadLineDetails.InventQtyWork;
            }
        }

        return inventWorkQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNewWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves all <c>WHSWorkLineLoadLineDetails</c> records associated with a work line to a new work line.
    /// </summary>
    /// <param name="_origWorkId">
    ///    The Work ID the <c>WHSWorkLineLoadLineDetails</c> records are currently associated with.
    /// </param>
    /// <param name="_origLineNum">
    ///    The line number the <c>WHSWorkLineLoadLineDetails</c> records are currently associated with.
    /// </param>
    /// <param name="_newWorkId">
    ///    The Work ID the <c>WHSWorkLineLoadLineDetails</c> records must be associated with.
    /// </param>
    /// <param name="_newLineNum">
    ///    The new line number the <c>WHSWorkLineLoadLineDetails</c> records must be associated with.
    /// </param>
    internal static void moveToNewWorkLine(WHSWorkId  _origWorkId,
                                           LineNum    _origLineNum,
                                           WHSWorkId  _newWorkId,
                                           LineNum    _newLineNum)
    {
        if (!_origWorkId || !_newWorkId)
        {
            return;
        }

        WHSWorkLineLoadLineDetails workLineLoadLineDetails;

        ttsbegin;

        update_recordset workLineLoadLineDetails
            setting WorkId  = _newWorkId,
                    LineNum = _newLineNum
            where workLineLoadLineDetails.WorkId      == _origWorkId
                && workLineLoadLineDetails.LineNum    == _origLineNum;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WorkLineLoadLineDetailsDevDoc</DeveloperDocumentation>
	<Label>@WAX:WorkLineLoadLineDetails</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>WorkId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WorkLineLoadLineIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>WorkLineLoadLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadLineRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQtyWork</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventQtyWork</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkLineLoadLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadLineRefRecIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSWorkLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadLineRefRecId</Name>
					<Field>LoadLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>