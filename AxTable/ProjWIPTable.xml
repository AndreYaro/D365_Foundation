<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWIPTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjWIPTable extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjTable   projTable;

        ttsbegin;

        super();

        select forupdate projTable where projTable.wipProject  == this.ProjId;

        if (projTable)
        {
            projTable.wipProject = '';

            projTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        super();        

        boolean isWizard;

        ProjTableWizardParameters wizardParameters = ProjTableWizardParameters::current();

        if (wizardParameters && wizardParameters.projId() == this.ProjId)
        {
            isWizard = wizardParameters.isWizard();
        }

        if (!isWizard)
        {
            ProjTable projTable = ProjTable::find(this.ProjId, true);

            if (projTable.RecId && projTable.wipProject != this.ProjId)
            {
                projTable.wipProject = this.ProjId;
                projTable.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    display Description previewPaneTitle()
    {
        return strfmt('%1: %2',this.ProjId,this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable()
    {
        if(this.IsContractLineUsed && this.DefaultProject)
        {
            return ProjTable::find(this.DefaultProject);
        }
        return ProjTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projType</Name>
				<Source><![CDATA[
    display ProjType projType()
    {
        return this.projTable().Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret)
        {
            ProjId projIdAssociatedWithWIPProj = this.getAnotherAssociatedProject(this.ProjId);
            if (projIdAssociatedWithWIPProj)
            {
                // WIP project is also used in project '%1', deletion aborted!
                ret = checkFailed(strfmt("@SYS76864", projIdAssociatedWithWIPProj));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnotherAssociatedProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project ID of any other project that is associated with this wip project.
    /// </summary>
    /// <param name = "_projIdToExclude">Project ID to exclude while getting the associated projects.</param>
    /// <returns>First project ID found that is associated with the wip project.</returns>
    protected internal ProjId getAnotherAssociatedProject(ProjId _projIdToExclude)
    {
        ProjTable projTableLoc;
        select firstonly ProjId from projTableLoc
            where projTableLoc.wipProject == this.ProjId
				&& projTableLoc.ProjId != _projIdToExclude;

        return projTableLoc.ProjId;
	}

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _checkType = true)
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ProjTable projTableLocal = ProjTable::find(this.ProjId);
            boolean multicontractLineFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
            if (projTableLocal.Type == ProjType::FixedPrice || projTableLocal.Type == ProjType::Investment || (multicontractLineFeature && this.ProjRevenueProfileId))
            {
                ProjCompletePrincip completePrinciple;
                if (multicontractLineFeature)
                {
                    ProjRevenueProfile revProfile = ProjRevenueProfile::findByRevenueProfileId(this.ProjRevenueProfileId);
                        
                    if (revProfile)
                    {
                        completePrinciple = revProfile.CompletePrinciple;
                    }
                    else
                    {
                        ret = checkFailed(strFmt("@Proj:EstimateProjectRevenueProfileMissingError", this.ProjId));
                    }
                }
                else
                {
                    completePrinciple = ProjGroup::find(projTableLocal.ProjGroupId).CompletePrincip;
                }

                if (ret && completePrinciple == ProjCompletePrincip::NoWIP)
                {
                    ret = checkFailed("@SYS107847");
                }
            }
            else
            {
                if (_checkType && !multicontractLineFeature)
                {
                    // Project %1 must be of type Fixed price
                    ret = checkFailed(strfmt("@SYS77187", this.ProjId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedPriceEligibleForOnlyPLPosting</Name>
				<Source><![CDATA[
    public boolean fixedPriceEligibleForOnlyPLPosting()
    {
        return  ProjControlPeriodTable::eliminated(this.ProjId,this.ControlId) || this.wipEliminated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdate</Name>
				<Source><![CDATA[
    private boolean validateUpdate()
    {
        ProjWIPTable origWipProj = this.orig();

        if (this.hasPostedOrPendingEstimates())
        {
            if (this.ProjRevenueProfileId != origWipProj.ProjRevenueProfileId && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
				if (FeatureStateProvider::isFeatureEnabled(ProjEstimatesToRevRecRenameFeature::instance()))
				{
					return checkFailed(strFmt("@Proj:WIPProjRevenueProfileUpdateErrorV2", this.ProjId));
				}
				else
				{
					return checkFailed(strFmt("@Proj:WIPProjRevenueProfileUpdateError", this.ProjId));
				}
			}
			else
			{
				// If revenue estimate project has associated revenue estimates then period code cannot be updated.
				if (this.PeriodId != origWipProj.PeriodId)
				{
					return checkFailed(strFmt("@Proj:WIPPeriodCodeUpdateError", this.ProjId));
				}
        	}
		}

        return true;
	}

]]></Source>
			</Method>
			<Method>
				<Name>checkRemoveProjectV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it is valid to remove a project from the estimate project.
    /// </summary>
    /// <param name = "_projId">Project ID to be removed.</param>
    /// <param name = "_multipleContractLineFeatureEnabled">Boolean indicating if multiple contract line feature is enabled. False by default.</param>
    /// <returns></returns> 
    public static boolean checkRemoveProjectV2(ProjId _projId, boolean _multipleContractLineFeatureEnabled = false)
    {
		  boolean ret = true;

		  ProjEmplTrans projEmplTrans;
		  ProjEmplTransCost projEmplTransCost;
		  ProjCostTrans projCostTrans;
		  ProjCostTransCost projCostTransCost;
		  ProjItemTrans projItemTrans;
		  ProjItemTransCost projItemTransCost;
		  ProjOnAccTrans projOnAccTrans;
		  ProjOnAccTransSale projOnAccTransSale;
        boolean revRecLabelFeature = FeatureStateProvider::isFeatureEnabled(ProjEstimatesToRevRecRenameFeature::instance());

		  select firstonly projItemTrans
					where  projItemTrans.ProjId == _projId
						join projItemTransCost
							where ((projItemTransCost.InventTransId == projItemTrans.InventTransId
								&& projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId)
								&& (projItemTransCost.TransStatus == ProjTransStatus::Estimated
								||  projItemTransCost.TransStatus == ProjTransStatus::Eliminated));

		  if (projItemTrans)
          {
              return checkFailed(ProjWIPTable::getErrorMessage(_multipleContractLineFeatureEnabled, revRecLabelFeature, _projId, projItemTransCost.TransStatus, tableid2pname(tablenum(ProjItemTransCost))));
		  }

		  select firstonly projCostTrans
					where  projCostTrans.ProjId == _projId
						join projCostTransCost
							where ((projCostTransCost.TransId == projCostTrans.TransId)
								&& (projCostTransCost.TransStatus == ProjTransStatus::Estimated
								||  projCostTransCost.TransStatus == ProjTransStatus::Eliminated));

		  if (projCostTrans)
          {
              return checkFailed(ProjWIPTable::getErrorMessage(_multipleContractLineFeatureEnabled, revRecLabelFeature, _projId, projCostTransCost.TransStatus, tableid2pname(tablenum(ProjCostTransCost))));
		  }

		  select firstonly projEmplTrans
					where  projEmplTrans.ProjId == _projId
						join projEmplTransCost
							where ((projEmplTransCost.TransId == projEmplTrans.TransId)
								&& (projEmplTransCost.TransStatus == ProjTransStatus::Estimated ||
								projEmplTransCost.TransStatus == ProjTransStatus::Eliminated));

		  if (projEmplTrans)
          {
            return checkFailed(ProjWIPTable::getErrorMessage(_multipleContractLineFeatureEnabled, revRecLabelFeature, _projId, projEmplTransCost.TransStatus, tableid2pname(tablenum(ProjEmplTransCost))));
		  }

		  select firstonly projOnAccTrans
					where  projOnAccTrans.ProjID == _projId
						join projOnAccTransSale
							where ((projOnAccTransSale.TransId == projOnAccTrans.TransId)
								&& (projOnAccTransSale.TransStatus == ProjTransStatus::Estimated ||
								projOnAccTransSale.TransStatus == ProjTransStatus::Eliminated));

		  if (projOnAccTrans)
          {
              return checkFailed(ProjWIPTable::getErrorMessage(_multipleContractLineFeatureEnabled, revRecLabelFeature, _projId, projOnAccTransSale.TransStatus, tableid2pname(tablenum(ProjOnAccTransSale))));
		  }

        if (ProjRevRecContractValidationFlight::instance().isEnabled() && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
          {
              ProjTable projTable = ProjTable::find(_projId);
          
              if (!ProjRevRecHelper::allowRevRecProjectChange(projTable.WIPProject, _projId))
              {
                  return checkFailed(strFmt("@Proj:ProjRevProjectChangeError", projTable.WIPProject, _projId));
              }
          }

		  return true;
	}

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    private static str getErrorMessage(boolean _multipleContractLineFeatureEnabled, boolean _revRecLabelFeature, ProjId _projId, ProjTransStatus _transStatus, str _tableName)
    {
        str errorMessage;
        if (_multipleContractLineFeatureEnabled)
        {
            if (_revRecLabelFeature)
            {
                errorMessage = strFmt("@Proj:WIPProjUpdateErrorDueToExistingEstimatesV2",  _projId, _transStatus, _tableName);
            }
            else
            {
                errorMessage = strfmt("@Proj:WIPProjUpdateErrorDueToExistingEstimates", _projId, _transStatus, _tableName);
            }
        }
        else
        {
            errorMessage = strfmt("@SYS92409", _transStatus, _tableName);
        }
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProjWipId _projWipId)
    {
        if (_projWipId)
        {
            return (select projWIPTable where projWIPTable.ProjId == _projWipId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContractLineUsed</Name>
				<Source><![CDATA[
    public static boolean isContractLineUsed(ProjWipId _projWipId)
    {
        ProjWIPTable wipProject = ProjWIPTable::find(_projWipId);
        return wipProject.IsContractLineUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjWIPTable find(ProjWipId _projId, boolean _forUpdate = false)
    {
        ProjWIPTable projWIPTable = null;

        projWIPTable.selectForUpdate(_forUpdate);

        if (_projId)
        {
            select projWIPTable where projWIPTable.ProjId == _projId;
        }

        return projWIPTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjWIP</Name>
				<Source><![CDATA[
    public static void lookupProjWIP(FormStringControl _ctrl, ProjGroupId _projGroupId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(ProjWIPTable), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource1, queryBuildDataSource2, queryBuildDataSource3 ;
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldnum(ProjWIPTable, ProjId));
        sysTableLookup.addLookupfield(fieldnum(ProjWIPTable, Description));

        queryBuildDataSource1 = query.addDataSource(tablenum(ProjWIPTable));
        queryBuildDataSource2 = queryBuildDataSource1.addDataSource(tablenum(ProjTable));
        
        queryBuildDataSource3 = queryBuildDataSource2.addDataSource(tablenum(ProjGroup));
        queryBuildRange = queryBuildDataSource3.addRange(fieldnum(ProjTable, ProjGroupId));
        queryBuildRange.value(_projGroupId);

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            queryBuildRange = queryBuildDataSource3.addRange(fieldnum(ProjGroup, MatchingPrincip));
            queryBuildRange.value(SysQuery::valueNot(ProjMatchingPrincip::NoMatching));
        }
        
        queryBuildDataSource2.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource2.relations(true);

        queryBuildDataSource3.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource3.relations(true);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextControlPeriodFrom</Name>
				<Source><![CDATA[
    public static ProjPeriodFrom nextControlPeriodFrom(ProjWipId _projWipId)
    {
        ProjPeriodLine          projPeriodLine;
        ProjControlPeriodTable  lastControlPeriodTAble;
        ProjPeriodFrom          nextPeriod;
        ProjPeriodId            periodId;

        periodId = ProjWIPTable::find(_projWipId).PeriodId;

        if (periodId)
        {
            select reverse lastControlPeriodTAble
                order by PeriodFrom
                where   lastControlPeriodTAble.ProjId       == _projWipId
                &&      lastControlPeriodTAble.PeriodStatus != ProjControlPeriodStatus::Reversal
                &&      lastControlPeriodTAble.PeriodFrom   <  maxdate();

            if (lastControlPeriodTAble && (lastControlPeriodTAble.PeriodStatus  == ProjControlPeriodStatus::Reversal))
            {
                nextPeriod = lastControlPeriodTAble.PeriodFrom;
            }
            else
            {
                if (lastControlPeriodTAble)
                {
                    nextPeriod = ProjPeriodTable::nextPeriod(periodId, lastControlPeriodTAble.PeriodTo);
                }
                else
                {
                    // Actual period
                    nextPeriod = (select reverse firstonly projPeriodLine
                                         order by PeriodFrom
                                         where    projPeriodLine.PeriodId   == periodId
                                         &&       projPeriodLine.PeriodFrom <  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).PeriodFrom;

                    // Period -> just ended
                    nextPeriod = (select reverse firstonly projPeriodLine
                                         order by PeriodFrom
                                         where    projPeriodLine.PeriodId   == periodId
                                         &&       projPeriodLine.PeriodFrom <  nextPeriod).PeriodFrom;
                }
            }
        }

        return nextPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedOrPendingEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to check is wip project is associated with any estimate in non-reversed state.
    /// </summary>
    /// <returns>true if estimates found; otherwise, false.</returns>
	public boolean hasPostedOrPendingEstimates()
    {
        ProjControlPeriodTable controlPeriodTable;
		
		select firstonly RecId from controlPeriodTable
            where controlPeriodTable.ProjId == this.ProjId
                && controlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Reversal;

        return controlPeriodTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>ProjWIPTable</c> record.
    /// </summary>
    public void update()
    {
        if (this.validateUpdate())
        {
            super();
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjIdForRevenuePosting</Name>
				<Source><![CDATA[
    public static ProjId getProjIdForRevenuePosting(ProjId _wipProjId)
    {
        ProjId ret = _wipProjId;
        ProjWIPTable projwipTable = ProjWIPTable::find(_wipProjId);
        if(projwipTable && projwipTable.IsContractLineUsed && projwipTable.DefaultProject)
        {
            ret = projwiptable.DefaultProject;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124985</DeveloperDocumentation>
	<FormRef>ProjWIPTable</FormRef>
	<Label>@SYS68796</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>projIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>projIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjControlPeriodTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlPeriodTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjTable</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPEliminated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ControlSystem</Name>
			<Label>@SYS54063</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Elimination</Name>
			<Label>@SYS55651</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WIPEliminated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultProject</Name>
			<Label>DefaultProject</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultProject</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultContractLineNum</Name>
			<Label>@Proj:DefaultContractLine</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultContractLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PeriodId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjWipId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WIPEliminated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjWIPEliminated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjRevenueProfileId</Name>
			<ExtendedDataType>ProjRevenueProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsContractLineUsed</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ConfigurationKey>Project</ConfigurationKey>
			<FeatureClass>ProjContractLineBasedRevRecToggle</FeatureClass>
			<Label>@Proj:ProjWipTableContractLineUsed</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultProject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DefaultProjectId</ExtendedDataType>
			<FeatureClass>ProjContractLineBasedRevRecToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultContractLineNum</Name>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjControlDefaultContractLine</ExtendedDataType>
			<FeatureClass>ProjContractLineBasedRevRecToggle</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>projIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjControl</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjControl</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjControl</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjWIPTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ControlId</Name>
					<Field>ControlId</Field>
					<RelatedField>ControlId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ControlIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjWIPTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PeriodId</Name>
					<Field>PeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjRevenueProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjRevenueProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjRevenueProfileId</Name>
					<SourceEDT>ProjRevenueProfileId</SourceEDT>
					<Field>ProjRevenueProfileId</Field>
					<RelatedField>ProjRevenueProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS124986</EntityRelationshipRole>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>