<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25ProfitTotalsSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RTax25ProfitTotalsSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        RTax25ProfitTable       profitTable = RTax25ProfitTable::find(this.rTax25ProfitTable),
                                parent;
        RTax25ProfitTotalsSetup setup, tmp;
        boolean                 referenceNotFound = true;

        if (profitTable.ParentProfitRecId)
        {
            select tmp
                where tmp.RegisterId == this.RegisterId
                   && tmp.RecId      != this.RecId;

            while (referenceNotFound && tmp)
            {
                parent = RTax25ProfitTable::find(tmp.rTax25ProfitTable);
                while (referenceNotFound && parent)
                {
                    if (parent.RecId == this.rTax25ProfitTable)
                    {
                        referenceNotFound = false;
                    }
                    parent = RTax25ProfitTable::find(parent.ParentProfitRecId);
                }
                next tmp;
            }
        }

        ttsbegin;

        super();

        if (profitTable.ParentProfitRecId && referenceNotFound)
        {
            setup = RTax25ProfitTotalsSetup::find(profitTable.ParentProfitRecId, this.RegisterId, true);
            setup.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hangingLeaf</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean hangingLeaf()
    {
        RTax25ProfitTable       profit = RTax25ProfitTable::find(this.rTax25ProfitTable);
        RTax25ProfitTable       childProfit;
        RTax25ProfitTotalsSetup childSetup;
        boolean                 ret = false;

        if (! profit.existChild())
            return true;

        while select childSetup
            where childSetup.RegisterId == this.RegisterId
            exists join childProfit
                where childProfit.ParentProfitRecId == profit.RecId
                   && childProfit.RecId             == childSetup.rTax25ProfitTable
        {
            if (childSetup.hangingLeaf())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        RTax25ProfitTable profitTable = RTax25ProfitTable::find(this.rTax25ProfitTable);

        ttsbegin;

        super();

        if (profitTable.ParentProfitRecId)
        {
            RTax25ProfitTotalsSetup::createIfNotExists(profitTable.ParentProfitRecId, this.RegisterId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void create(
        RefRecId         _profitTableRecId,
        RTax25RegisterId _registerId)
    {
        RTax25ProfitTotalsSetup profitTotalsSetup;

        profitTotalsSetup.rTax25ProfitTable = _profitTableRecId;
        profitTotalsSetup.RegisterId = _registerId;
        profitTotalsSetup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllByDefault</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void createAllByDefault()
    {
        RTax25ProfitTable profit;

        if (Box::yesNo("@GLS104495", DialogButton::Yes) == DialogButton::Yes)
        {
            ttsbegin;
            while select profit
            {
                if (profit.existChild())
                    continue;

                RTax25ProfitTotalsSetup::createByDefault(profit.RecId);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createByDefault</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void createByDefault(RefRecId _profitTableRecId)
    {
        RTax25RegisterProfit     registerProfit;
        RTax25StdExpressionTable stdExpressionTable;
        RTax25StdSeq             stdSeq;
        RTax25ProfitTable        profitTable = RTax25ProfitTable::find(_profitTableRecId);
        container                registers = connull();
        int                      len = 0,
                                 idx;

        ttsbegin;

        while (profitTable)
        {
            while select RegisterId from registerProfit
                where registerProfit.rTax25ProfitTable == profitTable.RecId
            {
                if (! confind(registers, registerProfit.RegisterId))
                {
                    len ++;
                    registers = conins(registers, len, registerProfit.RegisterId);
                }
            }

            while select TableId from stdExpressionTable
                where stdExpressionTable.rTax25ProfitTable == profitTable.RecId
                join ChannelId from stdSeq
                    where stdSeq.SeqNum      == stdExpressionTable.SeqNum
                       && stdSeq.ChannelType == RTax25StdChannelType::Register
            {
                if (! confind(registers, stdSeq.ChannelId))
                {
                    len ++;
                    registers = conins(registers, len, stdSeq.ChannelId);
                }
            }

            profitTable = RTax25ProfitTable::find(profitTable.ParentProfitRecId);
        }

        for (idx = 1; idx <= len; idx++)
        {
            RTax25ProfitTotalsSetup::createIfNotExists(_profitTableRecId, conpeek(registers, idx));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIfNotExists</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void createIfNotExists(
        RefRecId          _profitTableRecId,
        RTax25RegisterId  _registerId)
    {
        if (!RTax25ProfitTotalsSetup::find(_profitTableRecId, _registerId))
        {
            RTax25ProfitTotalsSetup::create(_profitTableRecId, _registerId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParentReferences</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void createParentReferences(RTax25ProfitTable _profit = null)
    {
        RTax25ProfitTable       childProfit;
        RTax25ProfitTotalsSetup setup;

        while select childProfit
            where childProfit.ParentProfitRecId == _profit.RecId
        {
            RTax25ProfitTotalsSetup::createParentReferences(childProfit);
        }

        if (_profit.ParentProfitRecId)
        {
            while select RegisterId from setup
                where setup.rTax25ProfitTable == _profit.RecId
            {
                RTax25ProfitTotalsSetup::createIfNotExists(_profit.ParentProfitRecId, setup.RegisterId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRegisterProfitSetup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void deleteRegisterProfitSetup(
        RTax25RegisterId _registerId,
        RefRecId         _profitTableRecId)
    {
        RTax25ProfitTotalsSetup totalsSetup;

        select firstonly forupdate totalsSetup
            where totalsSetup.RegisterId        == _registerId
               && totalsSetup.rTax25ProfitTable == _profitTableRecId;

        totalsSetup.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RTax25ProfitTotalsSetup find(
        RefRecId         _profitTableRecId,
        RTax25RegisterId _registerId,
        NoYes            _forUpdate = false)
    {
        RTax25ProfitTotalsSetup profitTotalsSetup;

        profitTotalsSetup.selectForUpdate(_forUpdate);

        select firstonly profitTotalsSetup
            where profitTotalsSetup.rTax25ProfitTable == _profitTableRecId
               && profitTotalsSetup.RegisterId        == _registerId;

        return profitTotalsSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>repairReferences</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void repairReferences(RTax25ProfitTable _profit = null)
    {
        RTax25ProfitTable       profit;
        RTax25ProfitTotalsSetup setup;

        RTax25ProfitTotalsSetup::createParentReferences();

        ttsbegin;
        while select forupdate setup
            exists join profit
                where setup.rTax25ProfitTable == profit.RecId
        {
            if (!setup.hangingLeaf())
            {
                setup.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RTax25ProfitTable</FormRef>
	<Label>@GLS104363</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RTax25ProfitTable</TitleField1>
	<TitleField2>RegisterId</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProfitRegisteridx</ClusteredIndex>
	<Modules>RTax25</Modules>
	<PrimaryIndex>ProfitRegisteridx</PrimaryIndex>
	<ReplacementKey>ProfitRegisteridx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegisterId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegisterId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS26269</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegisterId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegisterId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25RegisterId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RTax25ProfitTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RTax25ProfitTableRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfitRegisteridx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RTax25ProfitTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RegisterId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25ProfitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RTax25ProfitTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RTax25ProfitTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RTax25ProfitTotalsSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RTax25ProfitTable</Name>
					<Field>RTax25ProfitTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RTax25RegisterTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RTax25RegisterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RegisterId</Name>
					<SourceEDT>RTax25RegisterId</SourceEDT>
					<Field>RegisterId</Field>
					<RelatedField>RegisterId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RegisterIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>