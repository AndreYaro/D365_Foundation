<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocumentReceivedXML_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EFDocumentReceivedXML_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the received xml fields using the class that parses the xml file
    /// </summary>
    /// <param name="_efDocumentIncomingXmlDoc">
    /// Class that is able to parse the nfe xml file
    /// </param>
    public void createFrom(EFDocumentIncomingXmlDocument_BR _efDocumentIncomingXmlDoc)
    {
        EFDocumentReceivedXmlView_BR incomingNfeXmlView;

        this.Accesskey = _efDocumentIncomingXmlDoc.getAccessKey();

        this.modifiedField(fieldNum(EFDocumentReceivedXML_BR, AccessKey));

        this.insert();

        incomingNfeXmlView.createFrom(this.RecId, _efDocumentIncomingXmlDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the id of the fiscal establishment associated with this record.
    /// </summary>
    /// <returns>
    /// The FiscalDocumentId valueof the FiscalEstablishment_BR table regiter that is
    /// associated with this record
    /// </returns>
    public FiscalEstablishmentId_BR getFiscalEstablishmentId()
    {
        FiscalEstablishment_BR receivedXmlFiscalEstablishment;

        select firstOnly FiscalEstablishmentId
            from receivedXmlFiscalEstablishment
                where receivedXmlFiscalEstablishment.RecId == this.FiscalEstablishment_BR;

        return receivedXmlFiscalEstablishment.FiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedFiscalDocument</Name>
				<Source><![CDATA[
    private FiscalDocument_BR getRelatedFiscalDocument()
    {
        FiscalDocument_BR           fiscalDocument;
        FiscalEstablishmentId_BR    fiscalEstablishmentId;
        #NFPrinting_BR

        fiscalEstablishmentId = this.getFiscalEstablishmentId();

        select firstOnly RecId from fiscalDocument
                order by createdDateTime desc
                where fiscalDocument.Direction              == FiscalDocDirection_BR::Incoming
                   && fiscalDocument.FiscalDocumentIssuer   == FiscalDocumentIssuer_BR::ThirdParty
                   && fiscalDocument.Model                  == #EFDDocModel
                   && fiscalDocument.Status                 == FiscalDocumentStatus_BR::Approved
                   && fiscalDocument.AccessKey              == this.Accesskey
                   && fiscalDocument.FiscalEstablishment    == fiscalEstablishmentId;

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves true indicating if there is record on EFDocumentXMLData associated with this record.
    /// </summary>
    /// <returns>
    /// Yes if there is at least one record on EFDocumentXMLDataassociated with this record; false otherwise
    /// </returns>
    public boolean hasAnyXml()
    {
        EFDocumentReceivedXMLData_BR xmlData;

        select firstOnly RecId from xmlData
            where xmlData.EFDocumentReceivedXML_BR == this.RecId;

        return xmlData.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasApprovedDivergences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the received XML record has a divergences approval related to it
    /// </summary>
    /// <returns>
    /// True if a divergences approval record is found, false otherwise
    /// </returns>
    public boolean hasApprovedDivergences()
    {
        return EFDocReceivedXmlApprovedDivergences_BR::exist(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDanfe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a value indicating if there is a danfe associated with this record.
    /// </summary>
    /// <returns>
    /// Yes if there is a danfe associated with this record; false otherwise
    /// </returns>
    public boolean hasDanfe()
    {
        EFDocumentReceivedDanfe_BR  danfeTable;

        select RecId from danfeTable
            where danfeTable.efDocumentReceivedXML_BR == this.RecId;

        return danfeTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.FiscalDocument_BR = this.getRelatedFiscalDocument().RecId;
        this.Posted            = this.FiscalDocument_BR ? NoYes::Yes : NoYes::No;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs extra validation or processing when some specific fields are modified
    /// </summary>
    /// <param name="_fieldId">
    /// The Id of the field that was modified
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(EFDocumentReceivedXML_BR, Accesskey):
                this.cnpjNum_BR             = FiscalInformationUtil_BR::formatCNPJ(EFDocAccessKeyBase_BR::getCNPJNumber(this.Accesskey));
                this.FiscalDocumentNumber   = EFDocAccessKeyBase_BR::getInvoiceNumber(this.Accesskey);
                this.FiscalDocumentSeries   = EFDocAccessKeyBase_BR::getInvoiceSeries(this.Accesskey);
                this.ibgeCode               = EFDocAccessKeyBase_BR::getIbgeCode(this.Accesskey);
                this.InquiryStatus          = FiscalDocumentStatus_BR::Created;
                this.ManualEntry            = NoYes::Yes;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the Vendor name based on CNPJ information. If the system cannot find any vendor with that Cnpj, then,
    /// it will search in the fiscal establishment table for a fiscal establishment that has that Cnpj. If the name is not found,
    /// then, it will search in the customer table.
    /// </summary>
    /// <returns>
    /// Return the name of the vendor, fiscal establishment or customer that has the Cnpj.
    /// </returns>
    display DirPartyName thirdPartyName()
    {
        SysGlobalObjectCache    sgoc = new SysGlobalObjectCache();
        container               result;
        DirPartyName            name;

        DirPartyName getVendorName(CNPJCPFNum_BR _cnpj)
        {
            DirPartyTable           dirPartyTable;
            VendTable               vendTable;

            select Name from dirPartyTable
                exists join vendTable
                where (dirPartyTable.RecId == vendTable.Party
                      && vendTable.cnpjcpfNum_BR == _cnpj);

            return dirPartyTable.Name;
        }

        DirPartyName getCustomerName(CNPJCPFNum_BR _cnpj)
        {
            DirPartyTable           dirPartyTable;
            CustTable               custTable;

            select Name from dirPartyTable
                exists join custTable
                    where (dirPartyTable.RecId == custTable.Party
                            && custTable.cnpjcpfNum_BR == _cnpj);

            return dirPartyTable.Name;
        }

        FiscalEstablishmentName_BR getFiscalEstablishmentName(CNPJCPFNum_BR _cnpj)
        {
            FiscalEstablishment_BR fiscalEstablishment;

            select Name
                from fiscalEstablishment
                    where fiscalEstablishment.CNPJCPFNum_BR == _cnpj;

            return fiscalEstablishment.Name;
        }

        DirPartyName getNameFromDatabase(CNPJCPFNum_BR _cnpj)
        {
            DirPartyName dirPartyTableName;

            dirPartyTableName = getVendorName(this.cnpjNum_BR);

            if (!dirPartyTableName)
            {
                dirPartyTableName = getFiscalEstablishmentName(this.cnpjNum_BR);

                if (!dirPartyTableName)
                {
                    dirPartyTableName = getCustomerName(this.cnpjNum_BR);
                }
            }

            return dirPartyTableName;
        }

        if (!this.cnpjNum_BR)
        {
            return '';
        }

        result = sgoc.find('EFDocumentReceveidXMLScope', [this.cnpjNum_BR]);

        if ( result == conNull() )
        {
            name = getNameFromDatabase(this.CNPJNum_BR);

            if (name)
            {
                sgoc.insert('EFDocumentReceveidXMLScope', [this.cnpjNum_BR], [name]);
            }
        }
        else
        {
            [name] = result;
        }

        return  name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && this.FiscalDocument_BR)
        {
            ret = checkFailed("@SYS4003327");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(EFDocumentReceivedXML_BR, Accesskey):
                if (!EFDocAccessKeyBase_BR::validate(this.Accesskey))
                {
                    ret = checkFailed("@SYS4110579");
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if record exists from a given access key
    /// </summary>
    /// <param name="_accessKey">
    /// The accessKey information used to search
    /// </param>
    /// <returns>
    /// Returns whether or not record was found
    /// </returns>
    public static boolean existsByAccessKey(EFDocAccessKey_BR _accessKey)
    {
        EFDocumentReceivedXML_BR receivedXml;

        select firstOnly RecId
            from receivedXml
            where receivedXml.Accesskey == _accessKey;

        return receivedXml.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the EFDocument Received XML record by AccessKey information
    /// </summary>
    /// <param name="_accessKey">
    /// The accessKey information used to search
    /// </param>
    /// <returns>
    /// Return record found
    /// </returns>
    public static EFDocumentReceivedXML_BR findByAccessKey(EFDocAccessKey_BR _accessKey)
    {
        EFDocumentReceivedXML_BR receivedXmlRecord;

        if (_accessKey)
        {
            select * from receivedXmlRecord
                where receivedXmlRecord.Accesskey == _accessKey;
        }

        return receivedXmlRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// find a Record on EFDocumentReceivedXML_BR using RecId information
    /// </summary>
    /// <param name="_recId">
    /// RecId inforamtion used to search
    /// </param>
    /// <param name="_forUpdate">
    /// define if the record will be update or not
    /// </param>
    /// <param name="_concurrencyModel">
    /// define the usage of concurrencyModel
    /// </param>
    /// <returns>
    /// Return the record from EFDocumentReceivedXML_BR
    /// </returns>
    public static EFDocumentReceivedXML_BR findByRecId(RecId    _recId,
                                            boolean             _forUpdate = false,
                                            ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EFDocumentReceivedXML_BR    efDocReceivedXML;

        if (_recId)
        {
            if (_forUpdate)
            {
                efDocReceivedXML.selectForUpdate(_forUpdate);
                efDocReceivedXML.concurrencyModel(_concurrencyModel);
            }

            select firstonly efDocReceivedXML
                where efDocReceivedXML.RecId == _recId;
        }

        return efDocReceivedXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyXmlForAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves true indicating if there is record on EFDocumentXMLData_BR related to the EFDocumentReceivedXML_BR for the given access key.
    /// </summary>
    /// <param name="_accessKey">Access key of the received xml that should contain the xml</param>
    /// <returns>
    /// Yes if there is at least one record on EFDocumentXMLData associated with the EFDocumentReceivedXml_BR record; false otherwise
    /// </returns>
    public static boolean hasAnyXmlForAccessKey(EFDocAccessKey_BR _accessKey)
    {
        EFDocumentReceivedXMLData_BR xmlData;
        EFDocumentReceivedXML_BR receivedXml;

        select firstOnly RecId from receivedXml
            where receivedXml.Accesskey == _accessKey;

        select firstOnly RecId from xmlData
            where xmlData.EFDocumentReceivedXML_BR == receivedXml.RecId;

        return xmlData.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReferenceToFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to find a record of EFDocumentReceivedXML_BR through the AccessKey field
    /// If the record is found, the FiscalDocument_BR field is updated to be cleared
    /// and the Posted field is set to No.
    /// </summary>
    /// <param name="_accessKey">
    /// Contains the AccessKey that will be used during the search.
    /// </param>
    public static void removeReferenceToFiscalDocument(EFDocAccessKey_BR _accessKey)
    {
        EFDocumentReceivedXML_BR receivedXml;

        select firstOnly forUpdate FiscalDocument_BR, Posted
            from receivedXml
                where receivedXml.AccessKey == _accessKey;

        if (receivedXml)
        {
            receivedXml.Posted            = NoYes::No;
            receivedXml.FiscalDocument_BR = 0;
            receivedXml.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceToFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to find a record of EFDocumentReceivedXML_BR through the AccessKey field
    /// If the record is found, the FiscalDocument_BR field is updated to reference the fiscal document
    /// received as parameter and the Posted field is set to Yes.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// Contains the AccessKey that will be used during the search and the RecId that
    /// will be used to update the found register.
    /// </param>
    public static void updateReferenceToFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        EFDocumentReceivedXML_BR receivedXml;

        select firstOnly forUpdate FiscalDocument_BR, Posted
            from receivedXml
                where receivedXml.AccessKey == _fiscalDocument.AccessKey;

        if (receivedXml)
        {
            receivedXml.Posted            = NoYes::Yes;
            receivedXml.FiscalDocument_BR = _fiscalDocument.RecId;
            receivedXml.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4003166</DeveloperDocumentation>
	<Label>@SYS4003089</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Accesskey</TitleField1>
	<TitleField2>FiscalEstablishment_BR</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>ReceivedXMLIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>FiscalBooksBrazil</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accesskey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IBGECode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CNPJNum_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InquiryStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnCodeDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS21873</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Accesskey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IBGECode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CNPJNum_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InquiryStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnCodeDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastInquiry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalEstablishment</Name>
			<Label>@GLS220103</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Accesskey</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EFDocAccessKey_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CNPJNum_BR</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CNPJNum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocument_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentNumber_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalDocumentSeries</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentSeries_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishment_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentRecId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IBGECode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StateIBGECode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InquiryStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4003102</Label>
			<EnumType>FiscalDocumentStatus_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastInquiry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EFDocRecXmlLastInquiryDateTime_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualEntry</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4003107</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1711</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EFDocReturnCode_BR</ExtendedDataType>
			<Label>@SYS4003104</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnCodeDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReceivedXMLIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Accesskey</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ToBeInquiredIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InquiryStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LastInquiry</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Accesskey</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FiscalEstablishment_BR</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>recVersion</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocument_BR</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>FiscalDocument_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocument_BR</Name>
					<Field>FiscalDocument_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalEstablisment_BR</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>FiscalEstablishment_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalEstablishment_BR</Name>
					<Field>FiscalEstablishment_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>