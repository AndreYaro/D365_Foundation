<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAActivityEstimates</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAActivityEstimates extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates product and mandatory dimension.
    /// </summary>
    /// <returns>
    /// True when product and mandatory dimensions are specified; otherwise false.
    /// </returns>
    public boolean checkInventDim()
    {
        boolean ret = true;

        if (this.ProjTransType == QuotationProjTransType::Item &&
        this.ItemId)
        {
            ret = InventDim::find(this.InventDimId).validateWriteMandatoryAndProductDim(this.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateQuotationLine</Name>
				<Source><![CDATA[
    protected boolean checkUpdateQuotationLine(boolean _isCalledFromSalesQuotationLine)
    {
        boolean                 ret = true;
        SalesQuotationLine      salesQuotationLine;
        SalesQuotationTable     salesQuotationTable;

        ttsbegin;

        if (!_isCalledFromSalesQuotationLine)
        {
            salesQuotationLine = SalesQuotationLine::findPSARefRecId(this.RecId, true);

            if (salesQuotationLine)
            {
                salesQuotationTable = SalesQuotationTable::find(salesQuotationLine.QuotationId);

                if (salesQuotationTable.isWBSEditable())
                {
                    salesQuotationLine.ProjActivity     = this.ActivityNumber;
                    salesQuotationLine.ProjTransType    = this.ProjTransType;
                    salesQuotationLine.ProjectResource  = this.Resource;
                    salesQuotationLine.ItemId           = this.ItemId;
                    salesQuotationLine.ProjCategoryId   = this.ProjCategoryId;
                    salesQuotationLine.SalesQty         = this.Quantity;
                    salesQuotationLine.SalesPrice       = this.UnitSalesPrice;
                    salesQuotationLine.CostPrice        = this.UnitCostPrice;
                    salesQuotationLine.LineAmount       = this.TotalSalesPrice;
                    salesQuotationLine.LinePropertyId   = this.LinePropertyId;
                    salesQuotationLine.ProjDescription  = this.Description;

                    if (this.InventDimId != '')
                    {
                        salesQuotationLine.InventDimId = this.InventDimId;
                    }

                    if (salesQuotationLine.validateWrite())
                    {
                        salesQuotationLine.update(false, null, true, true);
                    }
                }
                else
                {
                    ret = checkFailed(strFmt("@SYS123328", salesQuotationTable.QuotationStatus));
                }
            }
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearItemTransFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the fields that are only related to item transaction type.
    /// </summary>
    public void clearItemTransFields()
    {
        this.ItemId         = "";
        this.SalesCategory  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode(ProjId _projId = '')
    {
        CurrencyCode            currencyCode;
        ProjTable               projTable;
        ProjInvoiceTable        projInvoiceTable;

        if (_projId)
        {
            select firstOnly CurrencyId from projInvoiceTable
                exists join projTable
                where projTable.ProjId            == _projId
                   && projTable.ProjInvoiceProjId == projInvoiceTable.ProjInvoiceProjId;

            if (projInvoiceTable)
            {
                currencyCode = projInvoiceTable.CurrencyId;
            }

            //
            // Projects do not need to have a contract.
            // Use the currency value on the quotation, if there is no project or no contract associated to the project
            //
            if (!currencyCode)
            {
                currencyCode = this.salesQuotationTable().CurrencyCode;
            }
        }
        return currencyCode ? currencyCode : Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    public CustAccount custAccount()
    {
        SalesQuotationTable     salesQuotationTable;

        salesQuotationTable     = this.salesQuotationTable();
        
        return salesQuotationTable ?  salesQuotationTable.CustAccount : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category based on the sales category
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The sales category.
    /// </param>
    /// <returns>
    /// True whether the project category has been initialized.
    /// </returns>
    private boolean getDefaultProjectGlobalCategory(RefRecId _ecoResCategory)
    {
        boolean         ret;
        ProjCategoryId  projCategoryId;

        projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_ecoResCategory);
        if (projCategoryId)
        {
            this.ProjCategoryId = projCategoryId;
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCostPriceEstimateForPublishedActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total cost price for all estimates associated with the published version of an activity.
    /// </summary>
    /// <param name = "_activityNumber">The activity number for which the total estimate is desired.</param>
    /// <returns>The total cost price estimate.</returns>
    public static NonNegativeTotal getTotalCostPriceEstimateForPublishedActivity(smmActivityNumber _activityNumber)
    {
        PSAActivityEstimates    psaActivityEstimates;
        ProjPlanVersionDetail   projPlanVersionDetail;

        select sum(TotalCostPrice)
            from psaActivityEstimates
                exists join projPlanVersionDetail
                    where   psaActivityEstimates.ActivityNumber == _activityNumber
                        &&  psaActivityEstimates.ProjPlanHierarchyId == projPlanVersionDetail.HierarchyId
                        &&  projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent;

        return psaActivityEstimates.TotalCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageUnitCostPriceForPublishedActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the average unit cost price for all hour estimates associated with the published version of an activity.
    /// </summary>
    /// <param name = "_activityNumber">The activity number for which the total estimate is desired.</param>
    /// <returns>The average unit cost price estimate.</returns>
    public static NonNegativeCostPrice getAverageUnitCostPriceForPublishedActivity(smmActivityNumber _activityNumber)
    {
        NonNegativeCostPrice    averageUnitCostPrice;
        PSAActivityEstimates    psaActivityEstimates;
        ProjPlanVersionDetail   projPlanVersionDetail;

        select sum(Quantity) from psaActivityEstimates
            where psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour
            exists join projPlanVersionDetail
                where psaActivityEstimates.ActivityNumber == _activityNumber
                    && psaActivityEstimates.ProjPlanHierarchyId == projPlanVersionDetail.HierarchyId
                    && projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent;

        NonNegativeQuantity totalQuantity = psaActivityEstimates.Quantity;

        if (totalQuantity)
        {
            while select UnitCostPrice, Quantity from psaActivityEstimates
                where psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour
                exists join projPlanVersionDetail
                    where psaActivityEstimates.ActivityNumber == _activityNumber
                        && psaActivityEstimates.ProjPlanHierarchyId == projPlanVersionDetail.HierarchyId
                        && projPlanVersionDetail.VersionType == ProjPlanVersionType::PublishedCurrent
            {
                // Calculate the average unit cost price by sum of the unit cost price by weight.
                averageUnitCostPrice += psaActivityEstimates.UnitCostPrice * (psaActivityEstimates.Quantity / totalQuantity);
            }
        }

        return averageUnitCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageUnitCostPriceByHierarchyTaskId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the average unit cost price for all hour estimates by task hierarchy ID and task ID.
    /// </summary>
    /// <param name = "_hierarchyId">Task hierarchy ID.</param>
    /// <param name = "_taskId">Task ID.</param>
    /// <returns>The average unit cost price estimate.</returns>
    public static NonNegativeCostPrice getAverageUnitCostPriceByHierarchyTaskId(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        NonNegativeCostPrice averageUnitCostPrice;
        PSAActivityEstimates psaActivityEstimates;

        select sum(Quantity) from psaActivityEstimates
            where psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour
                && psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId;

        NonNegativeQuantity totalQuantity = psaActivityEstimates.Quantity;

        if (totalQuantity)
        {
            while select UnitCostPrice, Quantity from psaActivityEstimates
                where psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour
                    && psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                    && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId
            {
                // Calculate the average unit cost price by sum of the unit cost price by weight.
                averageUnitCostPrice += psaActivityEstimates.UnitCostPrice * (psaActivityEstimates.Quantity / totalQuantity);
            }
        }

        return averageUnitCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCostAtComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total cost price by the specific values.
    /// </summary>
    /// <param name = "_hierarchyId">The <c>ProjPlanVersion</c> hierarchy ID .</param>
    /// <param name = "_taskId">The <c>ProjPlanVersion</c> task ID, optional.</param>
    /// <returns>The total cost price.</returns>
    public static Amount getTotalCostAtComplete(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId  _taskId = 0)
    {
        PSAActivityEstimates psaActivityEstimates;

        if (_taskId)
        {
            select sum(TotalCostPrice) from psaActivityEstimates
                where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                    && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId;
        }
        else
        {
            select sum(TotalCostPrice) from psaActivityEstimates
                where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId;
        }

        return psaActivityEstimates.TotalCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalEffortEstimateForTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total effort for all estimates associated with a specific version of a task.
    /// </summary>
    /// <param name = "_hierarchyId">The hierarchy ID which specifies a specific version of the task.</param>
    /// <param name = "_taskId">The task ID for which the total estimate is desired.</param>
    /// <returns>The total effort estimate.</returns>
    public static Amount getTotalEffortEstimateForTask(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        PSAActivityEstimates psaActivityEstimates;
        select sum(Quantity) from psaActivityEstimates
                where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId
                && psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour;
        return psaActivityEstimates.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        InventDim inventDim = this.initInventDim(_inventTable);

        inventDim = InventDim::findOrCreate(inventDim);

        this.setInventDimId(inventDim.InventDimId, inventDim);

        this.SalesCategory    = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                                    this.ItemId,
                                                    EcoResCategoryNamedHierarchyRole::Sales).Category;

        this.ProjCategoryId = _inventTable.ProjCategoryId ? _inventTable.ProjCategoryId : this.ProjCategoryId;

        if (!_inventTable.ProjCategoryId && this.SalesCategory)
        {
            this.getDefaultProjectGlobalCategory(this.SalesCategory);
        }

        this.setLineProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    protected InventDim initInventDim(InventTable _inventTable)
    {
        InventDim inventDim;

        inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Sales, inventDim);

        SalesQuotationTable salesQuotationTable = this.salesQuotationTable();

        if (salesQuotationTable.InventLocationId || salesQuotationTable.InventSiteId)
        {
            inventDim.InventLocationId = salesQuotationTable.InventLocationId;
            inventDim.InventSiteId = salesQuotationTable.InventSiteId;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(ItemId     itemId       = this.ItemId,
                        boolean   _forUpdate    = false)
    {
        return InventTable::find(itemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    public void  itemIdChanged()
    {
        this.initFromInventTable(this.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        InventTable     inventTable;
        boolean         projCategoryDefaulted;
        CategoryId      oldCategoryId;
        PSAActivitySetup    psaActivitySetup;

        super(_fieldId);

        if (prmIsDefault(_transDate))
        {
            psaActivitySetup = PSAActivitySetup::findActivityNumber(this.ActivityNumber);
            if (psaActivitySetup && psaActivitySetup.PSASchedStart)
            {
                _transDate = psaActivitySetup.PSASchedStart;
            }
        }
        else if (!_transDate)
        {
            _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        boolean isProjEstimateQtyBasedSalesPriceFlightEnabled = ProjEstimateQtyBasedSalesPriceFlight::instance().isEnabled();

        switch (_fieldId)
        {
            case fieldNum(PSAActivityEstimates, ProjTransType):
                oldCategoryId = this.ProjCategoryId;

                switch (this.ProjTransType)
                {
                    case QuotationProjTransType::Hour:
                        this.clearItemTransFields();
                        this.ProjCategoryId = ProjParameters::find().EmplCategory;
                        break;

                    case QuotationProjTransType::Expense:
                        this.clearItemTransFields();
                        this.ResourceCategory = 0;
                        this.ProjCategoryId = ProjParameters::find().CostCategory;
                        break;

                    case QuotationProjTransType::Item:
                        this.ResourceCategory = 0;
                        this.ProjCategoryId = ProjParameters::find().ItemCategory;
                        break;

                    case QuotationProjTransType::Fee:
                        this.clearItemTransFields();
                        this.ResourceCategory = 0;
                        this.ProjCategoryId = ProjParameters::find().RevenueCategory;
                        break;
                }

                this.Quantity = 1;

                if (this.ProjCategoryId && oldCategoryId != this.ProjCategoryId)
                {
                    this.modifiedField(fieldNum(PSAActivityEstimates, ProjCategoryId), _transDate);
                }
                else
                {
                    this.setTotalCostSalesPrice();
                    this.setLineProperty();
                    this.setDescriptionFromProjCategory();
                }
                break;

            case fieldNum(PSAActivityEstimates, ProjCategoryId) :
                this.setCostSalesPrice("", "", _transDate);
                this.setTotalCostSalesPrice();
                this.setLineProperty();
                this.setDescriptionFromProjCategory();
                break;

            case fieldNum(PSAActivityEstimates, Resource) :
                this.setResourceCategory();
                this.setCostSalesPrice("", "", _transDate);
                this.setTotalCostSalesPrice();
                break;

            case fieldNum(PSAActivityEstimates, ResourceCategory) :
                this.setCostSalesPrice("", "", _transDate);
                this.setTotalCostSalesPrice();
                break;

            case fieldNum(PSAActivityEstimates, ItemId) :
                inventTable = this.inventTable();
                this.initializeInventDetails(inventTable, isProjEstimateQtyBasedSalesPriceFlightEnabled);
                break;

            case fieldNum(PSAActivityEstimates, SalesCategory) :
                if (this.SalesCategory)
                {
                    if (this.ItemId)
                    {
                        inventTable = this.inventTable();
                    }

                    if (!inventTable.ProjCategoryId)
                    {
                        projCategoryDefaulted = this.getDefaultProjectGlobalCategory(this.SalesCategory);
                        if (projCategoryDefaulted)
                        {
                            this.setLineProperty();
                        }
                    }
                }
                break;

            case fieldNum(PSAActivityEstimates, UnitCostPrice) :
                this.setSalesPriceFromCostPrice("", "", _transDate);
                this.setTotalCostSalesPrice();
                break;

            case fieldNum(PSAActivityEstimates, LinePropertyId) :
                this.setCostSalesPrice("", "", _transDate);
                this.setTotalCostSalesPrice();
                break;

            case fieldNum(PSAActivityEstimates, Quantity) :
                if (isProjEstimateQtyBasedSalesPriceFlightEnabled)
                {
                    this.setItemCostSalesPrice(true);
                }
            case fieldNum(PSAActivityEstimates, UnitSalesPrice) :
                this.setTotalCostSalesPrice();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyInventDim</Name>
				<Source><![CDATA[
    public void modifyInventDim(InventDim       _inventDim,
                            FieldId         _dimFieldId)
    {
        this.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retInventDim</Name>
				<Source><![CDATA[
    public InventDim  retInventDim()
    {
        return InventDim::find(this.InventDimId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTable</Name>
				<Source><![CDATA[
    public SalesQuotationTable salesQuotationTable()
    {   
        SalesQuotationTable salesQuotation = SalesQuotationTable::find(Hierarchy::find(this.ProjPlanhierarchyId).Name);
        
        return salesQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostSalesPrice</Name>
				<Source><![CDATA[
    public void setCostSalesPrice(ProjId _projId = '', CustAccount _custAccount = '', TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ProjTable   projTable;
        CustAccount custAccount = _custAccount ? _custAccount : this.custAccount();

        if (_projId)
        {
            projTable = ProjTable::find(_projId);
        }
        else
        {
            projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities::find(this.ActivityNumber), tableNum(ProjTable));
            if (!projTable)
            {
                projTable = ProjPlanVersionDetail::getProjTableByHierarchyId(this.ProjPlanHierarchyId);
            }		
        }

        ProjPriceParameters parameters;
        switch (this.ProjTransType)
        {
            case QuotationProjTransType::Hour     :
                if (!ResourceFacade::isResourceInCurrentCompany(this.Resource))
                {
                    this.UnitCostPrice = ProjTransferPrice::getResBorrowingCostPriceEstimate(this.Resource,
                                                                                                 ResourceFacade::getLegalEntityId(this.Resource),
                                                                                                 projTable.ProjId,
                                                                                                 this.ProjCategoryId,
                                                                                                 _transDate,
                                                                                                 this.ResourceCategory);
                }
                else
                {
                    parameters = this.createAndInitProjPriceParameters(projTable, _transDate, custAccount);
                    this.UnitCostPrice = ProjHourCostPrice::findCostPriceByPriceParameters(parameters);
                }
                this.setSalesPriceFromCostPrice(projTable.ProjId, custAccount, _transDate);

                break;

            case QuotationProjTransType::Expense  :
                parameters = this.createAndInitProjPriceParameters(projTable, _transDate, custAccount);
                this.UnitCostPrice = ProjCostPriceExpense::findCostPriceByPriceParameters(parameters);
                this.setSalesPriceFromCostPrice(projTable.ProjId, custAccount, _transDate);

                break;

            case QuotationProjTransType::Fee      :
                this.setRevenueSalesPrice(projTable.ProjId, _transDate);
                break;

            case QuotationProjTransType::Item     :
                this.setItemCostSalesPrice(true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitProjPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>ProjPriceParameters</c> class.
    /// </summary>
    /// <param name = "_projTable">A <c>ProjTable</c> record buffer.</param>
    /// <param name = "_transDate">A transaction date.</param>
    /// <param name = "_custAccount">A customer account.</param>
    /// <param name = "_costCurrency">Currency ID of the currency used for costs.</param>
    /// <param name = "_salesCurrency">Currency ID of the currency used for sales.</param>
    /// <returns>An instance of the <c>ProjPriceParameters</c> class.</returns>
    protected ProjPriceParameters createAndInitProjPriceParameters(
        ProjTable       _projTable,
        TransDate       _transDate,
        CustAccount     _custAccount,
        CurrencyCode    _costCurrency = '',
        CurrencyCode    _salesCurrency = '')
    {
        ProjPriceParameters parameters = ProjPriceParameters::construct();

        parameters.parmProjId(_projTable.ProjId);
        parameters.parmResourceRecId(this.Resource);
        parameters.parmProjCategoryId(this.ProjCategoryId);
        parameters.parmTransDate(_transDate);
        parameters.parmCustAccount(_custAccount);
        parameters.parmCostCurrencyCode(_costCurrency);
        parameters.parmProjLinePropertyId(this.LinePropertyId);
        parameters.parmSalesCurrencyCode(_salesCurrency);
        parameters.parmCostPrice(this.UnitCostPrice);
        parameters.parmResourceCategoryRecId(this.ResourceCategory);
        parameters.parmProjPriceGroupID(_projTable.ProjId ? ProjTable::findPriceGroup(_projTable.ProjId) : this.salesQuotationTable().PriceGroupId);
        
        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDescriptionFromProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the description of an estimate line based on project category.
    /// </summary>
    public void setDescriptionFromProjCategory()
    {
        if (this.ProjTransType != QuotationProjTransType::Item || !this.ItemId)
        {
            this.Description = ProjCategory::find(this.ProjCategoryId).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.retInventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemCostSalesPrice</Name>
				<Source><![CDATA[
    public void setItemCostSalesPrice(boolean _getDefaultPrice = false)
    {
        if (this.ItemId == "")
        {
            return;
        }

        InventTable inventTable = InventTable::find(this.ItemId);

        //set the Cost Price
        InventDim inventDim = InventDim::findInLegalEntity(this.InventDimId, curExt());
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);

        InventDimParm inventDimParmFinancial, inventDimParmActive;
        inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParmFinancial);
        inventDimGroupSetup.inventDimParmActive(inventDimParmActive);
        InventOnhand inventOnhand = InventOnhand::newParametersActive(this.ItemId, inventDim, inventDimParmFinancial, inventDimParmActive);

        NonNegativeCostPrice defaultCostPrice = inventOnhand.costPricePcs();
        if (!defaultCostPrice)
        {
            defaultCostPrice = inventTable.costPcsPrice(this.InventDimId);
        }

        //set the Sales Price
        PriceGroupId    priceGroup;
        CustAccount     custAccount;
        CurrencyCode    currency;

        SalesQuotationTable salesQuotation = this.salesQuotationTable();
        ProjTable projTable = ProjPlanVersionDetail::getProjTableByHierarchyId(this.ProjPlanHierarchyId);

        if (salesQuotation && !projTable)
        {
            custAccount = salesQuotation.CustAccount;
            currency = salesQuotation.CurrencyCode;
            priceGroup = salesQuotation.PriceGroupId;
        }
        else
        {
            custAccount = projTable.CustAccount;
            currency = projTable.accountingCurrency();
            priceGroup = projTable.ProjPriceGroup;
        }

        PriceDisc priceDisc = this.createPriceDiscInstance(this.createAndInitPriceDiscParameters(
                                    custAccount, // Cust account
                                    currency));

        priceDisc.findPrice(priceGroup);
        NonNegativeSalesPrice defaultSalesPrice = priceDisc.price();
        
        if (this.UnitCostPrice != defaultCostPrice || this.UnitSalesPrice != defaultSalesPrice)
        {
            boolean isProjEstimateQtyBasedSalesPriceFlightEnabled = ProjEstimateQtyBasedSalesPriceFlight::instance().isEnabled();

            this.UnitCostPrice  = defaultCostPrice || !isProjEstimateQtyBasedSalesPriceFlightEnabled? 
                                  defaultCostPrice : this.UnitCostPrice;
            this.UnitSalesPrice = defaultSalesPrice || !isProjEstimateQtyBasedSalesPriceFlightEnabled? 
                                  defaultSalesPrice : this.UnitSalesPrice;

            if (!_getDefaultPrice)
            {
                warning(strFmt("@SYP4882013", defaultCostPrice, defaultSalesPrice));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_accountNum">A <c>CustVendAC</c> value.</param>
    /// <param name = "_currencyCode">A <c>CurrencyCode</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(
        CustVendAC      _accountNum,
        CurrencyCode    _currencyCode)
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(this.itemId);
        parameters.parmInventDim(InventDim::findInLegalEntity(this.InventDimId, curExt()));
        parameters.parmUnitID(InventTableModule::getUnitIdByModuleType(this.itemId, ModuleInventPurchSales::Sales));
        parameters.parmPriceDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(this.quantity);
        parameters.parmAccountNum(_accountNum);
        parameters.parmCurrencyCode(_currencyCode);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the line property in the estimate line based on the project/group line properties setup.
    /// </summary>
    public void setLineProperty()
    {
        ProjTable   projTable;
        projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities::find(this.ActivityNumber), tableNum(ProjTable));

        if (!projTable)
        {
            projTable = ProjPlanVersionDetail::getProjTableByHierarchyId(this.ProjPlanHierarchyId);
        }

        this.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(projTable.ProjId, this.ProjCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceCategory</Name>
				<Source><![CDATA[
    public void setResourceCategory()
    {
        this.ResourceCategory = ResourceFacade::getResourceCategory(this.Resource, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRevenueSalesPrice</Name>
				<Source><![CDATA[
    public void setRevenueSalesPrice(ProjId _projId, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CurrencyCode currencyCode = CompanyInfoHelper::standardCurrency();
        if (!_projId)
        {
            SalesQuotationTable salesQuotation = SalesQuotationTable::find(Hierarchy::find(this.ProjPlanHierarchyId).Name);
            if (salesQuotation)
            {
                currencyCode = salesQuotation.CurrencyCode;
            }
        }
        else
        {
            currencyCode = this.currencyCode(_projId);
        }
        this.UnitSalesPrice = ProjRevenueSalesPrice::psaFindCustSalesPrice(_projId,
																	       this.custAccount(),
																	       this.Resource,
																	       this.ProjCategoryId,
                                                                           currencyCode,
																	       _transDate,
																	       this.ResourceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPriceFromCostPrice</Name>
				<Source><![CDATA[
    protected void setSalesPriceFromCostPrice(str _projId = "", CustAccount _custAccount = "", TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ProjTable projTable;
        SalesQuotationTable salesQuotation;
        boolean isQuotation = false;
        ProjId projId = _projId;

        if (!projId)
        {
            smmActivities smmActivities;
            if (this.ActivityNumber)
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
            }
            
            // Checks <c>ParentElementNumber</c> is null, since <c>SalesQuotationTable::findByActivityRecId()</c> had a lookup of <c>ParentElementNumber</c> is equal to null.
            if (smmActivities && !HierarchyTreeTable::findRefRecId(smmActivities.RecId).ParentElementNumber)
            {
                projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities, tableNum(ProjTable));
                salesQuotation = SalesQuotationTable::findByActivityRecId(smmActivities.RecId);
            }
            else if (this.ProjPlanHierarchyId)
            {
                projTable = ProjPlanVersionDetail::getProjTableByHierarchyId(this.ProjPlanHierarchyId);
                salesQuotation = SalesQuotationTable::find(Hierarchy::find(this.ProjPlanHierarchyId).Name);
            }

            if (!projTable && salesQuotation)
            {
                isQuotation = true;
            }

            projId = projTable.ProjId;
        }
        else
        {
            projTable = ProjTable::find(projid);
        }

        CurrencyCode salesCurrency;
        if (isQuotation)
        {
            salesCurrency = salesQuotation.CurrencyCode;
        }
        else
        {
            salesCurrency = this.currencyCode(projId);
        }

        CustAccount custAccount = _custAccount ? _custAccount : this.custAccount();
        ProjPriceParameters parameters;
        switch (this.ProjTransType)
        {
            case QuotationProjTransType::Hour     :
                parameters = this.createAndInitProjPriceParameters(projTable, _transDate, custAccount, '', salesCurrency);

                if (isQuotation)
                {
                    [this.UnitSalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(parameters, true);
                }
                else
                {
                    [this.UnitSalesPrice] = ProjHourSalesPrice::findHourSalesPriceByPriceParameters(parameters);
                }
                break;

            case QuotationProjTransType::Expense  :
                parameters = this.createAndInitProjPriceParameters(projTable, _transDate, custAccount, CompanyInfoHelper::standardCurrency(), salesCurrency);
                
                if (isQuotation)
                {
                    [this.UnitSalesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(parameters, true);
                }
                else
                {
                    [this.UnitSalesPrice] = ProjCostSalesPrice::findCostSalesPriceByPriceParameters(parameters);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalCostSalesPrice</Name>
				<Source><![CDATA[
    public void setTotalCostSalesPrice()
    {
        if (this.projTransType == QuotationProjTransType::Hour)
        {
            this.TotalCostPrice     = CurrencyExchangeHelper::price(this.Quantity * this.UnitCostPrice) + this.calcIndirectAmount(PSAIndirectComponentType::Cost);
            this.TotalSalesPrice    = CurrencyExchangeHelper::price(this.Quantity * this.UnitSalesPrice) + this.calcIndirectAmount(PSAIndirectComponentType::Revenue);
        }
        else
        {
            this.TotalCostPrice     = CurrencyExchangeHelper::price(this.Quantity * this.UnitCostPrice);
            this.TotalSalesPrice    = CurrencyExchangeHelper::price(this.Quantity * this.UnitSalesPrice);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIndirectAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the indirect cost for hour transactions.
    /// </summary>
    /// <param name = "_compType">
    /// The PSAIndirectComponent type.
    /// </param>
    /// <returns>
    /// Returns the indirect amount for hour transactions.
    /// </returns>
    private Amount calcIndirectAmount(PSAIndirectComponentType _compType)
    {
        Amount indirectCost = 0;
         
        Amount base = _compType == PSAIndirectComponentType::Cost ? this.unitCostPrice : this.unitSalesPrice;
        ProjTable projTable = ProjPlanVersionDetail::getProjTableByHierarchyId(this.ProjPlanHierarchyId);

        TransDate transDate;
        PSAActivitySetup psaActivitySetup = PSAActivitySetup::findActivityNumber(this.ActivityNumber);

        if (psaActivitySetup && psaActivitySetup.PSASchedStart)
        {
            transDate = psaActivitySetup.PSASchedStart;
        }
        else if(!transDate)
        {
            transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        PSAIndirectCostCalculation  indirectCostCalculation = new PSAIndirectCostCalculation();
        PSAIndirectComponentGroupId componentGroupId = PSAComponentGroupAssignment::findAssignment(projTable.ProjId,
                                                                        this.Resource,
                                                                        this.projCategoryId,
                                                                        transDate).IndirectComponentGroup;
        PSAIndirectComponent        indirectComponent;
        PSAIndirectCompoundingSetup indirectCompoundingSetup;

        while select ComponentId from indirectCompoundingSetup
            group by ComponentId
            exists join indirectComponent
                where indirectCompoundingSetup.ProjComponentGroupId == componentGroupId
                    && indirectCompoundingSetup.DateFrom <= transDate
                    && indirectComponent.ComponentId == indirectCompoundingSetup.ComponentId
        {
            indirectCost +=  indirectCostCalculation.calculate(base,
                                                                componentGroupId,
                                                                _compType,
                                                                indirectCompoundingSetup.ComponentId,
                                                                transDate,
                                                                0,
                                                                this.quantity);
        }

        return indirectCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _isCalledFromSalesQuotationLine = false)
    {
        if (this.checkUpdateQuotationLine(_isCalledFromSalesQuotationLine))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete(boolean validateOnly = false)
    {
        boolean            ret;
        SalesQuotationLine salesQuotationLine = SalesQuotationLine::findPSARefRecId(this.RecId, true);

        if (salesQuotationLine)
        {
            SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(salesQuotationLine.QuotationId);

            if (salesQuotationTable.isWBSEditable())
            {
                ret = super();
            }
            else
            {
                ret = checkFailed(strFmt("@PSA11101", salesQuotationTable.QuotationStatus));
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case(fieldNum(PSAActivityEstimates, ProjCategoryId)):
                if (!ProjCategory::validCategory(this.ProjCategoryId))
                {
                    ret = checkFailed("@PSA11059");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.ProjTransType == QuotationProjTransType::None)
        {
            ret = checkFailed("@SYS84629");
        }

        if (this.ProjTransType == QuotationProjTransType::Item && !this.ItemId && !this.SalesCategory)
        {
            ret = checkFailed("@PSA2870");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PSAActivityEstimates find(RecId       _recId,
                                 boolean     _forUpdate = false)
    {
        PSAActivityEstimates  psaActivityEstimates;

        if (_recId)
        {
            psaActivityEstimates.selectForUpdate(_forUpdate);

            select firstonly psaActivityEstimates
            where psaActivityEstimates.RecId == _recId;
        }

        return psaActivityEstimates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateWithHierarchyIdAndTaskIdExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an estimate exists for given hierarchy id and task id.
    /// </summary>
    /// <param name = "_hierarchyId">The ID of the hierarchy.</param>
    /// <param name = "_taskId">Hierarchy task id.</param>
    /// <returns>
    /// true when the estimate exists in the database; false otherwise.
    /// </returns>
    public static boolean estimateWithHierarchyIdAndTaskIdExists(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        PSAActivityEstimates  psaActivityEstimates;

        select firstonly RecId from psaActivityEstimates where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
            && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId;

        if (psaActivityEstimates)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEstimatesForTask</Name>
				<Source><![CDATA[
    public static boolean deleteEstimatesForTask(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId,
                                                boolean _validateOnly = false,
                                                boolean _silentValidation = false)
    {
        PSAActivityEstimates psaActivityEstimates;
        boolean                         validationResult = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ttsbegin;
            while select forupdate psaActivityEstimates where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId
            {
                if (psaActivityEstimates.validateDelete(_validateOnly))
                {
                    if (!_validateOnly)
                    {
                        psaActivityEstimates.delete();
                    }
                }
                else
                {
                    if (!_silentValidation)
                    {
                        throw Exception::Error;
                    }
                    else
                    {
                        validationResult = false;
                        break;
                    }
                }
            }
            ttscommit;
        }

        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHourEstimatesForTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the estimates for a given task.
    /// </summary>
    /// <param name = "_hierarchyId">The ID of the hierarchy.</param>
    /// <param name = "_taskId">The task ID.</param>
    /// <param name = "_validateOnly">Boolean flag to indicate validation; Optional</param>
    /// <param name = "_silentValidation">Boolean flag to indicate silent validation; Optional</param>
    /// <param name = "_wbsType">The type of the WBS.</param>    
    public static boolean deleteHourEstimatesForTask(HierarchyIdBase _hierarchyId,
                                                    ProjHierarchyTaskId _taskId,
                                                    boolean _validateOnly = false,
                                                    boolean _silentValidation = false,
                                                    ProjWBSType _wbsType = ProjWBSType::Project)
    {
        PSAActivityEstimates psaActivityEstimates;
        boolean              validationResult = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ttsbegin;
            while select forupdate psaActivityEstimates where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
                && psaActivityEstimates.ProjPlanHierarchyTaskId == _taskId
                && psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour
            {
                if (psaActivityEstimates.validateDelete(_validateOnly))
                {
                    if (!_validateOnly)
                    {
                        if (_wbsType == ProjWBSType::ProjectQuotation)
                        {
                            ProjCache::setActivityEstimatesCacheForProjectQuotation(psaActivityEstimates.ProjPlanHierarchyId, psaActivityEstimates.ProjPlanHierarchyTaskId, psaActivityEstimates.RecId);
                        }

                        psaActivityEstimates.delete();
                    }
                }
                else
                {
                    if (!_silentValidation)
                    {
                        throw Exception::Error;
                    }
                    else
                    {
                        validationResult = false;
                        break;
                    }
                }
            }
            ttscommit;
        }

        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCostAtCompleteForTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total cost price for all specific task.
    /// </summary>
    /// <param name = "_hierarchyId">The hierarchy ID which specifies a specific version of the task.</param>
    /// <param name = "_activityNumber">The activity numver for which the total costAtComplete is desired.</param>
    /// <returns>The total cost price.</returns>
    public static Amount getTotalCostAtCompleteForTask(HierarchyIdBase _hierarchyId, smmActivityNumber _activityNumber)
    {
        PSAActivityEstimates psaActivityEstimates;
        select sum(TotalCostPrice) from psaActivityEstimates
            where psaActivityEstimates.ProjPlanHierarchyId == _hierarchyId
            && psaActivityEstimates.ActivityNumber == _activityNumber;
        return psaActivityEstimates.TotalCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attaches a custom lookup for the project category field to the calling control.
    /// </summary>
    /// <param name="_formControl">
    /// The calling form control.
    /// </param>
    /// <param name="_projId">
    /// The project ID to look for categories.
    /// </param>
    /// <param name="_hasValidateCategories">
    /// A boolean value to indicate whether the project has category validation.
    /// </param>
    /// <returns>
    /// A lookup containing project categories.
    /// </returns>
    public static void createProjectCategoryLookup(FormControl _formControl, QuotationProjTransType _transactionType, ProjId _projId, boolean _hasValidateCategories)
    {
        ProjCategoryLookup  projCategoryLookup = new ProjCategoryLookup();

        projCategoryLookup.parmCategoryType(PSAActivityEstimates::getProjCategoryTypeForTransactionType(_transactionType));
        projCategoryLookup.parmFilterEstimate(true);
        projCategoryLookup.parmFilterSubscription(true);
        projCategoryLookup.parmShowInactiveCategories(ProjParameters::find().ShowInactiveCategories);
        projCategoryLookup.parmFormName('');

        Query projCategoryLookQuery = projCategoryLookup.buildQueryForWBSTaskCategory(_projId);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjCategory), _formControl);

        sysTableLookup.addLookupField(fieldNum(ProjCategory, CategoryId), true);
        sysTableLookup.addLookupField(fieldNum(ProjCategory, Name));

        sysTableLookup.parmQuery(projCategoryLookQuery);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCategoryTypeForTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ProjCategoryType</c> enumeration value for the specified <c>QuotationProjTransType</c> enumeration value.
    /// </summary>
    /// <param name = "_transactionType">
    /// A <c>QuotationProjTransType</c> enumeration value.
    /// </param>
    /// <returns>
    /// A <c>ProjCategoryType</c> enumeration value.
    /// </returns>
    public static ProjCategoryType getProjCategoryTypeForTransactionType(QuotationProjTransType _transactionType)
    {
        ProjCategoryType projCategoryType;

        switch (_transactionType)
        {
            case QuotationProjTransType::Hour:
                projCategoryType = ProjCategoryType::Hour;
                break;

            case QuotationProjTransType::Expense:
                projCategoryType = ProjCategoryType::Cost;
                break;

            case QuotationProjTransType::Fee:
                projCategoryType = ProjCategoryType::Revenue;
                break;

            case QuotationProjTransType::Item:
                projCategoryType = ProjCategoryType::Item;
                break;
        }

        return projCategoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityRecId</Name>
				<Source><![CDATA[
    public static ActivityRecId findActivityRecId(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        HierarchyTreeTable      hierarchyTreeTable;
        ProjPlanVersion         projPlanVersion;
        smmActivities           smmActivities;

        select firstonly RecId from smmActivities
            exists join hierarchyTreeTable
            where hierarchyTreeTable.RefRecId == smmActivities.RecId
            exists join projPlanVersion
                where projPlanVersion.HierarchyTreeTableRefRecId == hierarchyTreeTable.RecId
                    && projPlanVersion.HierarchyId == _hierarchyId
                    && projPlanVersion.HierarchyTaskId == _taskId;

        return smmActivities.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is kept for binary compatibility.
    /// </summary>
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is kept for binary compatibility.
    /// </summary>
    public void delete()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTransTypeFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>ProjTransType</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_projTransType"><c>QuotationProjTransType</c> enum type value.</param>
    [SysObsoleteAttribute('This method does not take into account the auto scheduling flag so is replaced by updateProjTransTypeFromTaskV2()', true, 09\09\2019)]
    public void updateProjTransTypeFromTask(QuotationProjTransType _projTransType)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTransTypeFromTaskV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>ProjTransType</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_projTransType"><c>QuotationProjTransType</c> enum type value.</param>
    /// <param name = "_autoScheduling">Flag to show if auto scheduling is turned on.</param>
    public void updateProjTransTypeFromTaskV2(QuotationProjTransType _projTransType, boolean _autoScheduling)
    {
        boolean isOrigProjTransTypeHour = this.ProjTransType == QuotationProjTransType::Hour;
        this.ProjTransType = _projTransType;
        this.modifiedField(fieldNum(PSAActivityEstimates, ProjTransType));

        ttsbegin;
        this.update();
            
        // If the estimate has been changed to or from an hour estimate, then update scheduling for the parent task
        if (isOrigProjTransTypeHour || this.ProjTransType == QuotationProjTransType::Hour)
        {
            ProjEstimate::updateTaskFromEstimatesV2(this.ProjPlanHierarchyId, this.ProjPlanHierarchyTaskId, _autoScheduling);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjCategoryIdFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>ProjCategoryId</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_projectCategoryId">Project category ID value to be updated.</param>
    [SysObsoleteAttribute('This method does not take into account the auto scheduling flag so is replaced by updateProjCategoryIdFromTaskV2()', true, 03\06\2019)]
    public void updateProjCategoryIdFromTask(QuotationProjCategory _projectCategoryId)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjCategoryIdFromTaskV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>ProjCategoryId</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_projectCategoryId">Project category ID value to be updated.</param>
    /// <param name = "_autoScheduling">Flag to show if auto scheduling is turned on. True by default to support existing usecases.</param>
    public void updateProjCategoryIdFromTaskV2(QuotationProjCategory _projectCategoryId, boolean _autoScheduling)
    {
        this.ProjCategoryId = _projectCategoryId;
        this.modifiedField(fieldNum(PSAActivityEstimates, ProjCategoryId));

        ttsbegin;
        this.update();

        // If the current estimate transaction type is hour, update scheduling parent tasks.
        if (this.ProjTransType == QuotationProjTransType::Hour)
        {
            ProjEstimate::updateTaskFromEstimatesV2(this.ProjPlanHierarchyId, this.ProjPlanHierarchyTaskId, _autoScheduling);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceCategoryFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>ResourceCategory</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_resourceCategory">Resource category record ID to be updated.</param>
    [SysObsoleteAttribute('This method does not take into account the auto scheduling flag so is replaced by updateResourceCategoryFromTaskV2()', true, 10\04\2019)]
    public void updateResourceCategoryFromTask(ResourceCategoryRecId _resourceCategory)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceCategoryFromTaskV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>ResourceCategory</c> field from work breakdown structure task 
    /// and updates task scheduling fields if autoscheduling is turned on.
    /// </summary>
    /// <param name = "_resourceCategory">Resource category record ID to be updated.</param>
    /// <param name = "_autoScheduling">Flag to show if auto scheduling is turned on. True by default to support existing usecases.</param>
    public void updateResourceCategoryFromTaskV2(ResourceCategoryRecId _resourceCategory, boolean _autoScheduling)
    {
        if (this.ProjTransType == QuotationProjTransType::Hour)
        {
            this.ResourceCategory = _resourceCategory;
            this.modifiedField(fieldNum(PSAActivityEstimates, ResourceCategory));

            ttsbegin;
            this.update();

            // If the current estimate transaction type is hour, update scheduling parent tasks.
            ProjEstimate::updateTaskFromEstimatesV2(this.ProjPlanHierarchyId, this.ProjPlanHierarchyTaskId, _autoScheduling);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantityFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>Quantity</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_quantity">Quantity value to be updated.</param>
    [SysObsoleteAttribute('This method does not take into account the auto scheduling flag so is replaced by updateQuantityFromTaskV2()', true, 20\10\2018)]
    public void updateQuantityFromTask(NonNegativeQuantity _quantity)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantityFromTaskV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>PSAActivityEstimates</c> table <c>Quantity</c> field from work breakdown structure task 
    /// and updates the task if autoScheduling is true
    /// </summary>
    /// <param name = "_quantity">Quantity value to be updated.</param>
    /// <param name = "_autoScheduling">Boolean to represent if auto scheduling is turned on.</param>
    public void updateQuantityFromTaskV2(NonNegativeQuantity _quantity, boolean _autoScheduling = true)
    {
        this.Quantity = _quantity;
        this.modifiedField(fieldNum(PSAActivityEstimates, Quantity));

        ttsbegin;
        this.update();

        // If the current estimate transaction type is hour and auto scheduling is enabled, update scheduling parent tasks.
        if (this.ProjTransType == QuotationProjTransType::Hour)
        {
            ProjEstimate::updateTaskFromEstimatesV2(this.ProjPlanHierarchyId, this.ProjPlanHierarchyTaskId, _autoScheduling);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnitCostPriceFromTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>UnitCostPrice</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_unitCostPrice">Unit cost price to be updated.</param>
    [SysObsoleteAttribute('This method does not take into account the auto scheduling flag so is replaced by updateUnitCostPriceFromTaskV2()', true, 03\06\2019)]
    public void updateUnitCostPriceFromTask(NonNegativeCostPrice _unitCostPrice)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnitCostPriceFromTaskV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>PSAActivityEstimates</c> table <c>UnitCostPrice</c> field from work breakdown structure task.
    /// </summary>
    /// <param name = "_unitCostPrice">Unit cost price to be updated.</param>
    /// <param name = "_autoScheduling">Flag to show if auto scheduling is turned on. True by default to support existing usecases.</param>
    public void updateUnitCostPriceFromTaskV2(NonNegativeCostPrice _unitCostPrice, boolean _autoScheduling)
    {
        this.UnitCostPrice = _unitCostPrice;
        this.modifiedField(fieldNum(PSAActivityEstimates, UnitCostPrice));

        ttsbegin;
        this.update();

        ProjEstimate::updateTaskFromEstimatesV2(this.ProjPlanHierarchyId, this.ProjPlanHierarchyTaskId, _autoScheduling);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetItemPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the unit price fields to 0.00
    /// </summary>
    private void resetItemPrices()
    {
        this.UnitCostPrice = 0.0;
        this.UnitSalesPrice = 0.0;
        this.TotalCostPrice = 0.0;
        this.TotalSalesPrice = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDetails</Name>
				<Source><![CDATA[
    private void initializeInventDetails(InventTable _inventTable, boolean _resetPrices = false)
    {
        this.initFromInventTable(_inventTable);

        this.Description = _inventTable.defaultProductName();

        if (_resetPrices)
        {
            this.resetItemPrices();
        }

        this.setItemCostSalesPrice(true);
        this.setTotalCostSalesPrice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@PSA11083</DeveloperDocumentation>
	<Label>@PSA11071</Label>
	<TitleField1>ActivityNumber</TitleField1>
	<TitleField2>ProjTransType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Project</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activity</Name>
			<Label>@SYS54618</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitSalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS334237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPlanHierarchyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HierarchyIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjPlanHierarchyTaskId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjHierarchyTaskId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationProjCategory</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS6114</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>QuotationProjTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonNegativeQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalCostPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonNegativeTotal</ExtendedDataType>
			<Label>@PSA11068</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalSalesPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonNegativeTotal</ExtendedDataType>
			<Label>@PSA11067</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitCostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonNegativeCostPrice</ExtendedDataType>
			<Label>@PSA11069</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonNegativeSalesPrice</ExtendedDataType>
			<Label>@PSA11070</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EstimateNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesLineRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>smmActivitiesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EcoResCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanTask</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjPlanHierarchyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPlanHierarchyTaskId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategoryCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryCost</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PSAActivityEstimates</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Cost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Expense</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategoryFee</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryFee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PSAActivityEstimates</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Revenue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Fee</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategoryHour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryHour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PSAActivityEstimates</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Hour</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategoryItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PSAActivityEstimates</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CategoryType</Name>
					<RelatedField>CategoryType</RelatedField>
					<ValueStr>ProjCategoryType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ProjTransType</Name>
					<Field>ProjTransType</Field>
					<ValueStr>QuotationProjTransType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCategory</Name>
					<Field>SalesCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>smmActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPlanVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjPlanVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WBSTasks</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WBSEstimates</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPlanHierarchyId</Name>
					<Field>ProjPlanHierarchyId</Field>
					<RelatedField>HierarchyId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPlanHierarchyTaskId</Name>
					<Field>ProjPlanHierarchyTaskId</Field>
					<RelatedField>HierarchyTaskId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjWBSTaskEstimateUnionView</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>ProjWBSTaskEstimateUnionView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceTableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SourceRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>