<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttribByItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsBatchAttribByItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attributeTypeDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the type defined for the related definition record in case a relation is defined.
    /// </summary>
    /// <returns>
    ///     A value of the <c>PdsBatchAttribType</c> enumeration.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PdsBatchAttribType attributeTypeDisplay()
    {
        PdsBatchAttribType  pdsBatchAttribType = -1;

        if (   this.PdsBatchAttribCode == TableGroupAll::Table
            && this.PdsBatchAttribRelation)
        {
            pdsBatchAttribType = PdsBatchAttrib::find(this.PdsBatchAttribRelation).PdsBatchAttribType;
        }

        return pdsBatchAttribType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventDuplicateAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if duplicate attributes are prevented for an item.
    /// </summary>
    /// <returns>true if duplicate attributes must be prevented; otherwise, false.</returns>
    [Replaceable]
    protected boolean preventDuplicateAttributes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks for the assignment of duplicate attributes to an item.
    /// </summary>
    /// <returns>
    ///  true if the assignment introduces duplicate attributes; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  For each attribute that is being introduced as a duplicate, an error message
    ///  is being shown in the info log.
    /// </remarks>
    public boolean checkDuplicateAttributes()
    {
        if (!this.preventDuplicateAttributes())
        {
            return true;
        }

        PdsBatchAttribByItem        byItem;
        PdsBatchAttribByAttribGroup byGroup;
        Set                         attrs = new Set(Types::String);
        Set                         duplicates = new Set(Types::String);
        SetEnumerator               attrsEnumerator;

        switch (this.PdsBatchAttribCode)
        {
            case TableGroupAll::Table:
                attrs.add(this.PdsBatchAttribRelation);
                break;
            case TableGroupAll::GroupId:
                while select PdsBatchAttribAttribId
                    from byGroup
                    where byGroup.PdsBatchAttribGroupId == this.PdsBatchAttribRelation
                {
                    attrs.add(byGroup.PdsBatchAttribAttribId);
                }
                break;
            case TableGroupAll::All:
                // if we already have an "all", then we need to add it
                attrs.add(enum2str(TableGroupAll::All));
                break;
        }
        while select PdsBatchAttribCode, PdsBatchAttribRelation
            from  byItem
            where  byItem.PdsBatchAttribItemId  == this.PdsBatchAttribItemId
                && byItem.RecId                 != this.RecId
        {
            switch (byItem.PdsBatchAttribCode)
            {
                case TableGroupAll::Table:
                    if ((this.PdsBatchAttribCode == TableGroupAll::All
                            || attrs.in(byItem.PdsBatchAttribRelation))
                        && !duplicates.in(byItem.PdsBatchAttribRelation))
                    {
                        error(strfmt("@PRO1679", byItem.PdsBatchAttribRelation));
                        duplicates.add(byItem.PdsBatchAttribRelation);
                    }
                    break;
                case TableGroupAll::GroupId:
                    while select PdsBatchAttribAttribId
                        from  byGroup
                        where byGroup.PdsBatchAttribGroupId == byItem.PdsBatchAttribRelation
                    {
                        if ((this.PdsBatchAttribCode == TableGroupAll::All
                                || attrs.in(byGroup.PdsBatchAttribAttribId))
                            && !duplicates.in(byGroup.PdsBatchAttribAttribId))
                        {
                            error(strfmt("@PRO1679", byGroup.PdsBatchAttribAttribId));
                            duplicates.add(byGroup.PdsBatchAttribAttribId);
                        }
                    }
                    break;
                case TableGroupAll::All:
                    // the mere existence of an all given we have a single attribute represents duplicates.
                    if (attrs.elements())
                    {
                        attrsEnumerator = attrs.getEnumerator();
                        while (attrsEnumerator.moveNext())
                        {
                            error(strfmt("@PRO1679", attrsEnumerator.current()));
                        }
                        return true;
                    }
                    return false;
            }
        }

        return duplicates.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemCustRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a narrower range can be accepted.
    /// </summary>
    /// <param name="_pdsBatchAttribMin">
    /// The minimum value.
    /// </param>
    /// <param name="_pdsBatchAttribMax">
    /// The maximum value.
    /// </param>
    /// <returns>
    /// true if the new range is accepted; otherwise, false.
    /// </returns>
    public boolean checkItemCustRange(PdsBatchAttribMin     _pdsBatchAttribMin,
                                      PdsBatchAttribMax     _pdsBatchAttribMax)
    {
        boolean ret = true;

        if (FormDataUtil::isFormDataSource(this))
        {
            PdsBatchAttribByItemCustomer  pdsBatchAttribByItemCustomer;

            select firstOnly recId from pdsBatchAttribByItemCustomer
                        where  (pdsBatchAttribByItemCustomer.PdsBatchAttribCode == 0 &&
                                pdsBatchAttribByItemCustomer.PdsBatchAttribRelation == this.PdsBatchAttribRelation);

            if (pdsBatchAttribByItemCustomer.RecId != 0)
            {
                if (_pdsBatchAttribMin > this.orig().PdsBatchAttribMin || _pdsBatchAttribMax < this.orig().PdsBatchAttribMax)
                {
                    ret = (Box::okCancel("@PDS1539", DialogButton::Ok) == DialogButton::Ok);
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValueAgainstAttribRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified value is allowed.
    /// </summary>
    /// <param name="_value">
    /// A real value that represents a overridden boundary value.
    /// </param>
    /// <param name="_forceCheck">
    /// A boolean value that determines if the check should be forced.
    /// </param>
    /// <returns>
    /// true if the specified value is allowed; otherwise, false.
    /// </returns>
    public boolean checkValueAgainstAttribRange(
        real        _value,
        boolean     _forceCheck = false)
    {
        boolean ret = true;

        if (   this.RecId
            || _forceCheck)
        {
            if (   _value < this.PdsBatchAttribMin
                || _value > this.PdsBatchAttribMax)
            {
                ret = checkFailed(strfmt("@SYS87701", this.PdsBatchAttribMin, this.PdsBatchAttribMax));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        if (this.canDeleteItemCustomerRelation())
        {
            this.deleteItemCustomerRelation();
        }
        this.deleteProductAttributeTransferRelation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteItemCustomerRelation</Name>
				<Source><![CDATA[
    protected boolean canDeleteItemCustomerRelation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteItemCustomerRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes related batch attributes set with selected item.
    /// </summary>
    private void deleteItemCustomerRelation()
    {
        PdsBatchAttribByItemCustomer byItemCust;

        if (this.PdsBatchAttribCode == TableGroupAll::Table)
        {
            delete_from byItemCust
                where  byItemCust.PdsBatchAttribItemId      == this.PdsBatchAttribItemId
                    && byItemCust.PdsBatchAttribRelation    == this.PdsBatchAttribRelation
                    && byItemCust.PdsBatchAttribCode        == TableGroupAll::Table;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProductAttributeTransferRelation</Name>
				<Source><![CDATA[
    private void deleteProductAttributeTransferRelation()
    {
        if (#PDSLotGenealogyEnabled)
        {
            PDSBatchAttribTransfer transfers;

            switch (this.PdsBatchAttribCode)
            {
                case TableGroupAll::All:
                    delete_from transfers
                        where (transfers.RawItemId == this.PdsBatchAttribItemId
                            || transfers.EndItemId == this.PdsBatchAttribItemId);
                    break;

                case TableGroupAll::GroupId:
                    PdsBatchAttribByAttribGroup batchAttributesGroup;

                    delete_from transfers
                        where (transfers.RawItemId        == this.PdsBatchAttribItemId
                            || transfers.EndItemId        == this.PdsBatchAttribItemId)
                        exists join batchAttributesGroup
                            where batchAttributesGroup.PdsBatchAttribGroupId  == this.PdsBatchAttribRelation
                               && batchAttributesGroup.PdsBatchAttribAttribId == transfers.PdsBatchAttribId;
                    break;

                case TableGroupAll::Table:
                    delete_from transfers
                        where transfers.PdsBatchAttribId == this.PdsBatchAttribRelation
                          && (transfers.RawItemId        == this.PdsBatchAttribItemId 
                          ||  transfers.EndItemId        == this.PdsBatchAttribItemId);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.PDSBaseValue = this.PdsBatchAttribTarget;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the item
    /// </summary>
    /// <returns>
    /// The item name
    /// </returns>
    public display ItemName itemName()
    {
        return InventTable::find(this.PdsBatchAttribItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsBatchAttribByItem, PdsBatchAttribMultiple):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)))
                {
                    this.PdsBatchAttribMultiple = this.pdsBatchAttrib().PdsBatchAttribMultiple;
                }
                break;

            case fieldNum(PdsBatchAttribByItem, PdsBatchAttribTarget):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)))
                {
                    this.PdsBatchAttribTarget = this.pdsBatchAttrib().PdsBatchAttribTarget;
                }
                break;

            case fieldNum(PdsBatchAttribByItem, PdsBatchAttribToleranceAction):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)))
                {
                    this.PdsBatchAttribToleranceAction = this.pdsBatchAttrib().PdsBatchAttribToleranceAction;
                }
                break;

            case fieldNum(PdsBatchAttribByItem, PdsBatchAttribMax):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)))
                {
                    this.PdsBatchAttribMax = this.pdsBatchAttrib().PdsBatchAttribMax;
                }
                break;

            case fieldNum(PdsBatchAttribByItem, PdsBatchAttribMin):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)))
                {
                    this.PdsBatchAttribMin = this.pdsBatchAttrib().PdsBatchAttribMin;
                }
                break;

            case fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItem, PdsBatchAttribCode)))
                {
                    this.PdsBatchAttribRelation = '';
                }
                break;

            case fieldNum(PdsBatchAttribByItem, PdsBatchAttribCode):
                if (this.isFieldSet(fieldNum(PdsBatchAttribByItem, PdsBatchAttribItemId)))
                {
                    this.PdsBatchAttribCode = TableGroupAll::Table;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                [fieldNum(PdsBatchAttribByItem, PdsBatchAttribMultiple),
                    [fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)]
                ],
                [fieldNum(PdsBatchAttribByItem, PdsBatchAttribTarget),
                    [fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)]
                ],
                [fieldNum(PdsBatchAttribByItem, PdsBatchAttribToleranceAction),
                    [fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)]
                ],
                [fieldNum(PdsBatchAttribByItem, PdsBatchAttribMax),
                    [fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)]
                ],
                [fieldNum(PdsBatchAttribByItem, PdsBatchAttribMin),
                    [fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation)]
                ],
                [fieldNum(PdsBatchAttribByItem, PdsBatchAttribCode),
                    [fieldNum(PdsBatchAttribByItem, PdsBatchAttribItemId)]
                ],
                [fieldNum(PdsBatchAttribByItem, PdsBatchAttribRelation),
                    [fieldNum(PdsBatchAttribByItem, PdsBatchAttribCode)]
                ]
              ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the related <c>PdsBatchAttrib</c> record in case a relation is defined.
    /// </summary>
    /// <returns>
    /// A <c>PdsBatchAttrib</c> record or no record.
    /// </returns>
    public PdsBatchAttrib pdsBatchAttrib()
    {
        PdsBatchAttrib  pdsBatchAttrib;

        if (   this.PdsBatchAttribCode == TableGroupAll::Table
            && this.PdsBatchAttribRelation)
        {
            pdsBatchAttrib = PdsBatchAttrib::find(this.PdsBatchAttribRelation);
        }

        return pdsBatchAttrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribTargetEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to edit the Batch attribute target value. Receives a string and saves as proper type.
    /// </summary>
    /// <param name="_set">
    /// Edit method called to set or view a value
    /// </param>
    /// <param name="_pdsBatchAttribTarget">
    /// Value to push if setting value.
    /// </param>
    /// <returns>
    /// Current batch attribute value, returned as string regardless of type.
    /// </returns>
    public edit PdsBatchAttribTarget pdsBatchAttribTargetEdit(
        boolean                 _set = false,
        PdsBatchAttribTarget    _pdsBatchAttribTarget = '')
    {
        if (_set && hasFieldAccess(
                tablenum(PdsBatchAttribByItem),
                fieldnum(PdsBatchAttribByItem, PdsBatchAttribTarget),
                AccessType::Edit))
        {
            if (this.pdsBatchAttrib().isValidAttribValueType(_pdsBatchAttribTarget,true))
            {
                this.PdsBatchAttribTarget = this.pdsBatchAttrib().locale2Storage(_pdsBatchAttribTarget);
            }
        }

        return this.pdsBatchAttrib().storage2Locale(this.PdsBatchAttribTarget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckAttribCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the batch attribute value fits the batch attribute range and multiple criteria.
    /// </summary>
    /// <param name="_batchAttribValue">Batch attribute value</param>
    /// <returns>true if the batch attribute value fits the attribute range criteria; otherwise, false.</returns>
    public boolean pdsCheckAttribCriteria(PdsBatchAttribValue _batchAttribValue)
    {
        boolean                         ret;
        PdsBatchAttrib                  batchAttrib;
        PdsBatchAttribMin               batchAttribMin;
        PdsBatchAttribMax               batchAttribMax;
        PdsBatchAttribToleranceAction   batchAttribToleranceAction;
        PdsBatchAttribMultiple          batchAttribMultiple;

        if (this.PdsBatchAttribCode != TableGroupAll::Table)
        {
            return true;
        }

        batchAttrib = PdsBatchAttrib::find(this.PdsBatchAttribRelation);

        [batchAttribMin, batchAttribMax, batchAttribToleranceAction, batchAttribMultiple] =
                    batchAttrib.getAttribRange(this.PdsBatchAttribItemId);

        ret = PdsBatchAttrib::isValidAttribRange(
                                            batchAttribMin,
                                            batchAttribMax,
                                            _batchAttribValue);

        ret = ret && PdsBatchAttrib::isValidAttribMultiple(
                                            batchAttribMin,
                                            batchAttribMultiple,
                                            _batchAttribValue);

        //
        // either the above checks return true
        // or returned false and shown error
        // which can be acceptable based on the tolerance action
        //
        ret = ret || (batchAttribToleranceAction == PdsBatchAttribToleranceAction::Warning);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.PDSBaseValue = this.PdsBatchAttribTarget;

        if (   this.PdsBatchAttribTarget != this.orig().PdsBatchAttribTarget
            && this.PdsBatchAttribCode   == TableGroupAll::Table)
        {
            InventTable inventTableLocal;
            inventTableLocal.skipDataMethods(true);
            inventTableLocal.skipAosValidation(true);
            update_recordset inventTableLocal setting PDSTargetFactor = str2Num(this.PDSBaseValue)
                    where inventTableLocal.ItemId               == this.PdsBatchAttribItemId
                       && inventTableLocal.PDSBaseAttributeId   == this.PdsBatchAttribRelation;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean         ret;
        InventTable     inventTable;

        ret = super();

        if (ret && (this.PdsBatchAttribCode == TableGroupAll::Table))
        {
            inventTable = InventTable::find(this.PdsBatchAttribItemId);
            if (this.PdsBatchAttribRelation == inventTable.PDSBaseAttributeId)
            {
                ret = checkFailed(strfmt("@PSC81", this.PdsBatchAttribRelation, inventTable.ItemId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean         ret;
        PdsBatchAttrib  attrib;

        ret = super(_fieldIdToCheck);

        if (ret && (_fieldIdToCheck == fieldnum(PdsBatchAttribByItem, PDSBaseValue)))
        {
            if (this.PdsBatchAttribCode == TableGroupAll::Table)
            {
                attrib = PdsBatchAttrib::find(this.PdsBatchAttribRelation);
            }
            if (this.PDSBaseValue != "")
            {
                if (attrib.PdsBatchAttribType == PdsBatchAttribType::Integer)
                {
                    this.PdsBatchAttribMultiple = real2int(this.PdsBatchAttribMultiple);
                }

                ret = PdsBatchAttrib::find(this.PdsBatchAttribRelation).isValidAttribValueType(this.(_fieldIdToCheck), true);

                if (ret
                    && (attrib.PdsBatchAttribType    == PdsBatchAttribType::Integer
                        || attrib.PdsBatchAttribType == PdsBatchAttribType::Realnumber))

                {
                    if (str2num(this.(_fieldIdToCheck)) < this.PdsBatchAttribMin
                        || str2num(this.(_fieldIdToCheck)) > this.PdsBatchAttribMax)
                    {
                        ret = checkFailed(strfmt("@SYS87701", attrib.PdsBatchAttribMin, attrib.PdsBatchAttribMax));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        fieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        boolean         ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(PdsBatchAttribByItem, PdsBatchAttribRelation):

                if (this.pdsBatchAttrib().PdsBatchAttribType == PdsBatchAttribType::Enumerate)
                {
                    if (!PdsBatchAttribEnumValues::existBatchAttribId(this.PdsBatchAttribRelation))
                    {
                        ret = checkFailed("@PDS1534");
                    }
                }
                break;
            case fieldstr(PdsBatchAttribByItem, PdsBatchAttribMin):
                ret = ret && this.checkItemCustRange(this.PdsBatchAttribMin, this.PdsBatchAttribMax)
                          && this.pdsBatchAttrib().checkValueAgainstAttribRange(this.PdsBatchAttribMin);
                break;
            case fieldstr(PdsBatchAttribByItem, PdsBatchAttribMax):
                ret = ret && this.checkItemCustRange(this.PdsBatchAttribMin, this.PdsBatchAttribMax)
                          && this.pdsBatchAttrib().checkValueAgainstAttribRange(this.PdsBatchAttribMax);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberBatchAttribute</Name>
				<Source><![CDATA[
    private boolean isNumberBatchAttribute(PdsBatchAttrib _pdsBatchAttrib)
    {
        if (_pdsBatchAttrib)
        {
            return _pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Integer
                    || _pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Realnumber;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRangeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the batch attribute range values.
    /// </summary>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateRangeValues()
    {
        boolean ret = true;
        PdsBatchAttrib pdsBatchAttrib = this.pdsBatchAttrib();

        if (!this.isNumberBatchAttribute(pdsBatchAttrib)
            && (this.PdsBatchAttribMin != 0
                || this.PdsBatchAttribMax != 0
                || this.PdsBatchAttribMultiple != 0))
        {
            ret = checkFailed("@PDS:MessageError_RangeValuesSpecifiedForNonNumberAttributes");
        }

        if (pdsBatchAttrib
            && pdsBatchAttrib.PdsBatchAttribType == PdsBatchAttribType::Integer
            && (xInfo::getNumberOfDecimals(this.PdsBatchAttribMin) != 0
                || xInfo::getNumberOfDecimals(this.PdsBatchAttribMax) != 0
                || xInfo::getNumberOfDecimals(this.PdsBatchAttribMultiple) != 0))
        {
            ret = checkFailed("@PDS:MessageError_InvalidIntegerRangeValues");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret
            && this.PdsBatchAttribCode != TableGroupAll::All
            && !this.PdsBatchAttribRelation)
        {
            ret = checkFailed("@PRO1680");
        }

        ret = ret && this.validateRangeValues();

        if (ret)
        {
            ret = PdsBatchAttrib::isValidAttribRange(this.PdsBatchAttribMin,this.PdsBatchAttribMax);
        }

        if (ret)
        {
            ret = !this.checkDuplicateAttributes();
        }

        if (ret)
        {
            ret = PdsBatchAttrib::isValidTargetValue(this.PdsBatchAttribRelation,
                                                     this.PdsBatchAttribMin,
                                                     this.PdsBatchAttribMax,
                                                     this.PdsBatchAttribMultiple,
                                                     this.PdsBatchAttribTarget,
                                                     this.pdsBatchAttrib().PdsBatchAttribType);
        }
        // check that potential potency relations are not broken by these changes
        ret  = ret && PdsBatchAttribByItem::checkBaseAttribRef(this);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchAttributesForItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an ordered list of all the batch attribute IDs assigned to an item.
    /// </summary>
    /// <param name="_itemId">
    ///     Item number that the batch attributes are associated with.
    /// </param>
    /// <returns>
    ///    An ordered list of all the batch attribute IDs assigned to an item.
    /// </returns>
    public static List batchAttributesForItem(ItemId _itemId)
    {
        PdsBatchAttrib              pdsBatchAttrib;
        PdsBatchAttribByItem        pdsBatchAttribByItem;
        PdsBatchAttribByAttribGroup pdsBatchAttribByAttribGroup;

        List                        attributes      = new List(Types::String);
        List                        groupAttributes = new List(Types::String);

        if (PdsBatchAttribByItem::existsAllForItem(_itemId))
        {
            while select PdsBatchAttribId
                from pdsBatchAttrib
                order by PdsBatchAttribId
            {
                attributes.addEnd(pdsBatchAttrib.PdsBatchAttribId);
            }
        }
        else
        {
            while select PdsBatchAttribRelation
                from pdsBatchAttribByItem
                order by PdsBatchAttribRelation
                where pdsBatchAttribByItem.PdsBatchAttribItemId == _itemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode  == TableGroupAll::Table
            {
                attributes.addEnd(pdsBatchAttribByItem.PdsBatchAttribRelation);
            }

            while select PdsBatchAttribAttribId
                from pdsBatchAttribByAttribGroup
                order by PdsBatchAttribAttribId
                join TableId from pdsBatchAttribByItem
                    where pdsBatchAttribByItem.PdsBatchAttribItemId    == _itemId
                        && pdsBatchAttribByItem.PdsBatchAttribCode     == TableGroupAll::GroupId
                        && pdsBatchAttribByItem.PdsBatchAttribRelation == pdsBatchAttribByAttribGroup.PdsBatchAttribGroupId
            {
                groupAttributes.addEnd(pdsBatchAttribByAttribGroup.PdsBatchAttribAttribId);
            }

            // Need to sort the attributes if any were loaded from both attributes by item and attributes through group since they will be ordered separately
            if (attributes.elements() && groupAttributes.elements())
            {
                attributes.appendList(groupAttributes);
                attributes = PdsBatchAttribByItem::sortBatchAttributeIds(attributes);
            }
            else if (groupAttributes.elements())
            {
                attributes = groupAttributes;
            }
        }

        return attributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBaseAttribRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the base attribute specified by an item is referenced in one of the product specific attributes. The base attribute must be referenced as a table in the list of product
    ///     specific attributes.
    /// </summary>
    /// <param name="_pdsBatchAttribByItem">
    ///     The current record being updated in the database.
    /// </param>
    /// <returns>
    ///     true if the specified item's base attribute is referenced in one of the product specific attributes or the item does not contain a base attribute; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the specified item contains a base attribute and it is not referenced in the list of product specific attributes, an error message is displayed.
    /// </remarks>
    public static boolean checkBaseAttribRef(PdsBatchAttribByItem _pdsBatchAttribByItem)
    {
        PdsBatchAttribByItem    validAttributeByItemRelation;
        PDSBaseAttributeId      pdsBaseAttributeId;
        boolean                 isValid             = true;

        if (_pdsBatchAttribByItem.PdsBatchAttribItemId)
        {
            pdsBaseAttributeId  = InventTable::find(_pdsBatchAttribByItem.PdsBatchAttribItemId).PDSBaseAttributeId;
            if (pdsBaseAttributeId)
            {
                validAttributeByItemRelation = PdsBatchAttribByItem::findItemId(_pdsBatchAttribByItem.PdsBatchAttribItemId, pdsBaseAttributeId, TableGroupAll::Table);
                // the change is always valid if we are modifying an attribute-item relation not used for potency purposes
                isValid = (validAttributeByItemRelation.RecId != _pdsBatchAttribByItem.RecId);

                if (!isValid)
                {
                    //this change is valid as long as this item relation is preserved
                    isValid =   (_pdsBatchAttribByItem.PdsBatchAttribRelation    == pdsBaseAttributeId)
                            &&  (_pdsBatchAttribByItem.PdsBatchAttribCode        == TableGroupAll::Table);

                    if (!isValid)
                    {
                        checkFailed(strFmt("@PSC769", _pdsBatchAttribByItem.PdsBatchAttribItemId, pdsBaseAttributeId, TableGroupAll::Table));
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PdsBatchAttribByItem</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The id of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId
            && (select pdsBatchAttribByItem
                where pdsBatchAttribByItem.RecId == _recId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an attribute is assigned to an item through an attribute group.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the item to check for the assignment.
    /// </param>
    /// <param name="_attribRelation">
    /// The attribute ID to check for the assignment.
    /// </param>
    /// <param name="_attribCode">
    /// The kind of relation for the <paramref name="_attribRelation"/> parameter.
    /// </param>
    /// <returns>
    /// true if the attribute is already assigned to the item through a group; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The check can only return true, if the <paramref name="_attribCode"/> parameter has a
    /// value of <c>TableGroupAll::Table</c>. All other kinds of attribute references cannot
    /// be assigned to the item through an attribute group.
    /// </remarks>
    public static boolean existInGroup(
        ItemId                  _itemId,
        PdsBatchAttribRelation  _attribRelation,
        PdsBatchAttribCode      _attribCode)
    {
        boolean                     ret = false;
        PdsBatchAttribByAttribGroup attribByAttribGroup;
        PdsBatchAttribByItem        attribByItem;

        if (_attribCode == TableGroupAll::Table)
        {
            select firstonly RecId
                from attribByItem
                where  attribByItem.PdsBatchAttribItemId            == _itemId
                    && attribByItem.PdsBatchAttribCode              == TableGroupAll::GroupId
                join RecId
                from attribByAttribGroup
                where  attribByAttribGroup.PdsBatchAttribGroupId    == attribByItem.PdsBatchAttribRelation
                    && attribByAttribGroup.PdsBatchAttribAttribId   == _attribRelation;

            if (attribByItem.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an attribute relation is assigned to an item.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the relation to check for assignment.
    /// </param>
    /// <param name="_attribRelation">
    /// The relation ID (attribute ID, attribute group ID or blank) of the relation to check for assignment.
    /// </param>
    /// <param name="_attribCode">
    /// The kind of relation for the <paramref name="_attribRelation"/> parameter.
    /// </param>
    /// <returns>
    /// true if the attribute relation is assigned to the item; otherwise, false.
    /// </returns>
    public static boolean existItemId(
        ItemId                  _itemId,
        PdsBatchAttribRelation  _attribRelation,
        PdsBatchAttribCode      _attribCode)
    {
        return _itemId
            && (select pdsBatchAttribByItem
                where  pdsBatchAttribByItem.PdsBatchAttribItemId    == _itemId
                    && pdsBatchAttribByItem.PdsBatchAttribRelation  == _attribRelation
                    && pdsBatchAttribByItem.PdsBatchAttribCode      == _attribCode
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemIdAny</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item has any attribute assigned to it.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the item to check for assignment.
    /// </param>
    /// <returns>
    /// true if attribute assignments exist for the item; otherwise false.
    /// </returns>
    public static boolean existItemIdAny(ItemId _itemId)
    {
        return _itemId
            && (select pdsBatchAttribByItem
                where pdsBatchAttribByItem.PdsBatchAttribItemId == _itemId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAllForItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating that the 'All' attribute assignment exists for an item.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID to search for.
    /// </param>
    /// <returns>
    ///    true of the 'All' attribute assignment exists for the item; otherwise, false.
    /// </returns>
    public static boolean existsAllForItem(ItemId _itemId)
    {
        return _itemId &&
            (select pdsBatchAttribByItem
                where pdsBatchAttribByItem.PdsBatchAttribItemId == _itemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode  == TableGroupAll::All).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PdsBatchAttribByItem</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the assignment record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PdsBatchAttribByItem</c> table; otherwise, an empty record.
    /// </returns>
    public static PdsBatchAttribByItem find(RecId _recId, boolean _forUpdate = false)
    {
        PdsBatchAttribByItem    attribByItem;

        if (!prmisdefault(_forUpdate))
        {
            attribByItem.selectForUpdate(_forUpdate);
        }

        select firstonly attribByItem
            where attribByItem.RecId == _recId;

        return attribByItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PdsBatchAttribByItem</c> table.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the relation to check for assignment.
    /// </param>
    /// <param name="_attribRelation">
    /// The relation ID (attribute ID, attribute group ID or blank) of the relation to check for assignment.
    /// </param>
    /// <param name="_attribCode">
    /// The kind of relation for the <paramref name="_attribRelation"/> parameter.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PdsBatchAttribByItem</c> table; otherwise, an empty record.
    /// </returns>
    public static PdsBatchAttribByItem findItemId(
        ItemId                  _itemId,
        PdsBatchAttribRelation  _attribRelation,
        PdsBatchAttribCode      _attribCode,
        boolean                 _forUpdate = false)
    {
        PdsBatchAttribByItem    attribByItem;

        if (!prmisdefault(_forUpdate))
        {
            attribByItem.selectForUpdate(_forUpdate);
        }

        select firstonly attribByItem
            where  attribByItem.PdsBatchAttribItemId    == _itemId
                && attribByItem.PdsBatchAttribRelation  == _attribRelation
                && attribByItem.PdsBatchAttribCode      == _attribCode;

        return attribByItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customized Lookup method to show only attribute that are of type integer of real
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which the lookup is done.
    /// </param>
    /// <param name="_filterStr">
    /// Filter expression provided
    /// </param>
    /// <param name="_ds">
    /// Datasource of the form used for filtering
    /// </param>
    /// <param name="_itemId">
    /// Item ID for which the lookup is performed
    /// </param>
    public static void pdsBatchAttribLookup(
        FormControl     _formControl,
        str             _filterStr,
        FormDataSource  _ds,
        ItemId          _itemId)
    {
        SysTableLookup          lookup;
        boolean                 filter = SysTableLookup::filterLookupPreRun(_formControl, _formControl, _ds);
        Query                   query  = new Query();
        QueryBuildDataSource    qbds, qbds2;

        lookup = SysTableLookup::newParameters(tablenum(PdsBatchAttribByItem), _formControl);
        qbds = query.addDataSource(tablenum(PdsBatchAttribByItem));
        qbds.addRange(fieldnum(PdsBatchAttribByItem, PdsBatchAttribItemId)).value(SysQuery::value( _itemId));
        qbds.addRange(fieldnum(PdsBatchAttribByItem, PdsBatchAttribCode)).value(SysQuery::value(TableGroupAll::Table));

        qbds2 = qbds.addDataSource(tablenum(PdsBatchAttrib));
        qbds2.addRange(fieldnum(PdsBatchAttrib, PdsBatchAttribType)).value(SysQuery::value(PdsBatchAttribType::Integer));
        qbds2.addRange(fieldnum(PdsBatchAttrib, PdsBatchAttribType)).value(SysQuery::value(PdsBatchAttribType::Realnumber));
        qbds2.joinMode(JoinMode::ExistsJoin);
        qbds2.relations(true);

        lookup.parmQuery(query);
        lookup.addLookupfield(fieldnum(PdsBatchAttribByItem, PdsBatchAttribRelation),true);
        lookup.addLookupfield(fieldnum(PdsBatchAttribByItem, PDSBaseValue));
        lookup.addLookupMethod(tableMethodStr(PdsBatchAttribByItem, attributeTypeDisplay));
        lookup.addSelectionField(fieldnum(PdsBatchAttribByItem, PdsBatchAttribCode));
        lookup.performFormLookup();

        SysTableLookup::filterLookupPostRun(filter, _filterstr, _formControl, _ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortBatchAttributeIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sorts a list of batch attribute IDs.
    /// </summary>
    /// <param name="_attributes">
    ///    A list of batch attribute IDs to sort.
    /// </param>
    /// <returns>
    ///    A sorted list of batch attribute IDs.
    /// </returns>
    private static List sortBatchAttributeIds(List _attributes)
    {
        ListEnumerator  attributeListEnumerator = _attributes.getEnumerator();
        Map             sortAttributeIdsMap     = new Map(Types::String, Types::Integer);
        MapEnumerator   sortedIdEnumerator;
        List            sortedResult;

        while (attributeListEnumerator.moveNext())
        {
            sortAttributeIdsMap.insert(attributeListEnumerator.current(), 0);
        }

        sortedIdEnumerator = sortAttributeIdsMap.getEnumerator();
        sortedResult       = new List(Types::String);
        while (sortedIdEnumerator.moveNext())
        {
            sortedResult.addEnd(sortedIdEnumerator.currentKey());
        }

        return sortedResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPotencyAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the current batch attribute is also the potency attribute set on the given <c>InventTable</c>.
    /// </summary>
    /// <param name="_inventTable">
    ///    The given <c>InventTable</c>.
    /// </param>
    /// <returns>
    ///    Yes if the current batch attribute is also the potency attribute set on the given <c>InventTable</c>. Otherwise, No.
    /// </returns>
    public NoYes isPotencyAttribute(InventTable _inventTable)
    {
        if (_inventTable 
            && this.PdsBatchAttribCode == TableGroupAll::Table
            && this.PdsBatchAttribRelation == _inventTable.PDSBaseAttributeId
            && this.PdsBatchAttribItemId == _inventTable.ItemId)
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@PDS1063</DeveloperDocumentation>
	<Label>@PRO1605</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PdsBatchAttribItemId</TitleField1>
	<TitleField2>PdsBatchAttribCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>PdsBatchAttribByItemIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBachAttribByItem</Name>
			<Label>@PRO1595</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttribRange</Name>
			<Label>@SYS24771</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribToleranceAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMultiple</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribTarget</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttribRelation</Name>
			<Label>@PRO1596</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPotency</Name>
			<Label>@PSC61</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PDSBaseValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PDSBaseValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSBaseValue</ExtendedDataType>
			<Label>@PSC633</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMultiple</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMultiple</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribTarget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribTarget</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribToleranceAction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsBatchAttribToleranceAction</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PdsBatchAttribByItemIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PdsBatchAttribItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>PdsBatchAttribItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PdsBatchAttribCode</Name>
					<Field>PdsBatchAttribCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribRelation</Name>
					<Field>PdsBatchAttribRelation</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttribGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsBatchAttribGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PdsBatchAttribCode</Name>
					<Field>PdsBatchAttribCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribRelation</Name>
					<Field>PdsBatchAttribRelation</Field>
					<RelatedField>PdsBatchAttribGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>