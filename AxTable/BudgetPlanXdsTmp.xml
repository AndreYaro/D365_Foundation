<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanXdsTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanXdsTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateUsingPosition</Name>
				<Source><![CDATA[
    private void populateUsingPosition()
    {
        BudgetPlanningSecurityModel         securityModel = BudgetPlanningSecurityModel::Position;
        BudgetPlanXdsTmp                    budgetPlanXdsTmp;
        HcmPositionDetail                   hcmPositionDetail;
        HcmPositionWorkerAssignment         hcmPositionWorkerAssignment;
        OMHierarchyPurpose                  omHierarchyPurpose;
        HcmWorkerRecId                      currentWorker = HcmWorkerLookup::currentWorker();
        OMExplodedOrganizationSecurityGraph orgGraph;
        utcDateTime                         now = DateTimeUtil::utcNow();

        // Insert all orgs that the user belongs to or all the ancestor orgs to the current org that the user belongs to
        insert_recordset budgetPlanXdsTmp(BudgetingOrganization, SecurityModel)
            select validTimeState(now) Organization, securityModel from orgGraph
                group by Organization
                exists join omHierarchyPurpose
                where omHierarchyPurpose.HierarchyType == orgGraph.OMHierarchyType
                    && omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::BudgetPlanning
                exists join hcmPositionDetail
                where (hcmPositionDetail.Department    == orgGraph.Organization
                       || hcmPositionDetail.Department == orgGraph.AncestorOrganization)
                    exists join hcmPositionWorkerAssignment
                    where hcmPositionWorkerAssignment.Position == hcmPositionDetail.Position
                        && hcmPositionWorkerAssignment.Worker   == currentWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateUsingSecurityRole</Name>
				<Source><![CDATA[
    private void populateUsingSecurityRole()
    {
        BudgetPlanningSecurityModel         securityModel = BudgetPlanningSecurityModel::SecurityRole;
        BudgetPlanXdsTmp                    budgetPlanXdsTmp;
        OMExplodedOrganizationSecurityGraph orgGraph;
        OMUserRoleOrganization              omUserRoleOrganization;
        OMHierarchyPurpose                  omHierarchyPurpose;
        UserId                              currentUserId = curUserId();

        // Insert all organizations the user has direct security access to view
        insert_recordset budgetPlanXdsTmp(BudgetingOrganization, SecurityModel)
            select OMInternalOrganization, securityModel from omUserRoleOrganization
                where omUserRoleOrganization.User == currentUserId
                    && !omUserRoleOrganization.OMHierarchyType;

        // And all organizations in a hierarchy
        insert_recordset budgetPlanXdsTmp(BudgetingOrganization, SecurityModel, OMHierarchyType)
            select Organization, securityModel, OMHierarchyType from orgGraph
                group by Organization, OMHierarchyType
                exists join omUserRoleOrganization
                    where omUserRoleOrganization.User                    == currentUserId
                        && omUserRoleOrganization.OMInternalOrganization == orgGraph.AncestorOrganization
                exists join omHierarchyPurpose
                where omHierarchyPurpose.HierarchyType     == omUserRoleOrganization.OMHierarchyType
                    && omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::BudgetPlanning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>xds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the table with a list of <c>BudgetPlanningProcess</c>, <c>BudgetingOrganization</c> and
    /// <c>OrganizationHierarchyTypeId</c> record IDs that the current user has access to.
    /// </summary>
    /// <returns>
    /// Returns the frequency with which the data in the table is refreshed.
    /// </returns>
    public RefreshFrequency xds()
    {
        this.populateUsingPosition();
        this.populateUsingSecurityRole();

        return RefreshFrequency::PerSession;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS150208</DeveloperDocumentation>
	<Label>@GLS150206</Label>
	<SingularLabel>@GLS150207</SingularLabel>
	<TitleField1>BudgetingOrganization</TitleField1>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetingOrganization</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BudgetingOrganizationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningProcess</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OMHierarchyType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>OrganizationHierarchyTypeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SecurityModel</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>BudgetPlanningSecurityModel</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>