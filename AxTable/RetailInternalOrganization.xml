<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInternalOrganization</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInternalOrganization extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the current record from <c>RetailInternalOrganization</c> table.
    /// </summary>
    /// <remarks>
    /// Populate <c>RetailInternalOrgInheritanceExploded</c> table.
    /// </remarks>
    public void delete()
    {
        super();

        // Populate the RetailInternalOrgInheritanceExploded table If inheritance is enabled for Organization.
        RetailInternalOrgInheritanceExploded::populate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record with default data.
    /// </summary>
    public void initValue()
    {
        super();
        this.LastModifiedDateTime = DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record 
    /// </summary>
    public void insert()
    {
        if (this.InheritEnabled)
        {
            this.CategoryHierarchy = 0;
        }

        super();

        if (this.shouldPopulateExplodedOnInsert())
        {
            // Populate the RetailInternalOrgInheritanceExploded table If inheritance is enabled for Organization.
            RetailInternalOrgInheritanceExploded::populate();
        }

        // Insert into RetailProdAttributeInternalOrgMetadata,
        //create the default attribute metadata only if organization has not inherited.
        if (this.InheritEnabled == false)
        {
            RetailProvisionedChannelProdAttrGroup::findOrAddInternalOrgProdAttributeGroup(this);
            this.insertDefaultProductAttributeMetadata();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPopulateExplodedOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if the exploded organization structure should be populated when a new internal organization is inserted.
    /// </summary>
    /// <returns>
    /// True if it should be populate; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This used on some bulk insert scenarios where populate should not be called on each insert.
    /// In those controlled cases, the method can be extended to return false.
    /// Note that populate has to be called at least once at the end of the bulk insert.
    /// </remarks>
    protected boolean shouldPopulateExplodedOnInsert()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultProductAttributeMetadata</Name>
				<Source><![CDATA[
    private void insertDefaultProductAttributeMetadata()
    {
        RetailSPChannelProdAttrMetadataHandler  metadataHandler;
        RetailInternalOrgAttributeGroup         internalOrgAttributeGroup;
        RetailProvisionedChannelProdAttrGroup   provisionedChannelProdAttrGroup;
        RetailProvisionedChannelProductAttribute provisionedChannelProductAttribute;
        EcoResAttributeGroupAttribute           channelProductAttributeGroupAttribute;
        RetailAttributeMetadata retailAttributeMetadata;

        ttsBegin;
        // Create metadata handler
        metadataHandler = new RetailSPChannelProdAttrMetadataHandler();

        // Insert metadata
        if (metadataHandler != null)
        {
            // Provisioned channel product attributes
            while select InternalOrganization, Modifier, AttributeGroup from internalOrgAttributeGroup
                where internalOrgAttributeGroup.InternalOrganization == this.RecId &&
                        internalOrgAttributeGroup.Modifier == RetailChannelAttributeModifier::Product
                exists join provisionedChannelProdAttrGroup
                    where provisionedChannelProdAttrGroup.AttributeGroup == internalOrgAttributeGroup.AttributeGroup &&
                            provisionedChannelProdAttrGroup.ChannelType == RetailChannelType::SharePointOnlineStore
            {
                while select AttributeGroup, Attribute from channelProductAttributeGroupAttribute
                    where channelProductAttributeGroupAttribute.AttributeGroup == internalOrgAttributeGroup.AttributeGroup
                    join Attribute, ChannelProductAttributeID from provisionedChannelProductAttribute
                    where provisionedChannelProductAttribute.Attribute == channelProductAttributeGroupAttribute.Attribute
                {
                    retailAttributeMetadata = RetailAttributeMetadata::findByAttribute(channelProductAttributeGroupAttribute.Attribute);

                    RetailProdAttributeInternalOrgMetadata::addUpdate(
                            this.RecId,
                            channelProductAttributeGroupAttribute.Attribute,
                            false,
                            RetailProductAttributeRelationType::Channel,
                            retailAttributeMetadata.Metadata,
                            retailAttributeMetadata.MetadataVersion);
                }
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record in <c>RetailInternalOrganization</c> table if parent organization exists.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the modified field.
    /// </param>
    /// <remarks>
    /// This method is automatically called from forms when any field is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        RetailInternalOrganization  internalOrganization;
        OMHierarchyRelationship omHierarchyRelationship;

        super(_fieldId);

        switch (_fieldId)
        {
            // create parent organization record into RetailInternalOrganization if it does not exist for the selected org (Legal entity, business unit etc.).
            // this is needed because if we do not have Parent's entry into RetailInternalOrganization table then it wouldn't show the childs products.
            case fieldNum(RetailInternalOrganization, InheritEnabled) :
                select firstOnly ParentOrganization from omHierarchyRelationship
                    where omHierarchyRelationship.HierarchyType == RetailInternalOrganization::getOMHierarchyType().RecId
                        && omHierarchyRelationship.ChildOrganization == this.InternalOrganization
                        && this.InheritEnabled
                    notExists join internalOrganization
                        where internalOrganization.InternalOrganization == omHierarchyRelationship.ParentOrganization;
                if (omHierarchyRelationship.ParentOrganization)
                {
                    ttsBegin;
                    internalOrganization.InternalOrganization = omHierarchyRelationship.ParentOrganization;
                    internalOrganization.CategoryHierarchy = this.CategoryHierarchy;
                    internalOrganization.insert();
                    ttsCommit;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update record in <c>RetailInternalOrganization</c> table.
    /// </summary>
    /// <param name="_syncToRetailChannelTable">
    /// sync flag for updating <c>RetailChannelTable</c>
    /// </param>
    public void update(boolean _syncToRetailChannelTable = true)
    {
        RetailChannelTable retailChannelTable;
        RetailInternalOrgCatHierarchyCollapsed retailInternalOrgCatHierarchyCollapsed;
        boolean inheritEnabledChanged;
        RetailInternalOrgAttributeGroup retailInternalOrgAttributeGroup;
        RetailProdAttributeInternalOrgMetadata retailProdAttributeInternalOrgMetadata;
        RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue;
        RetailInternalOrgProductInstanceValView retailInternalOrgProductInstanceValView;
        //<GEERU>
        RetailInventDimInternalOrgMetadata retailInventDimInternalOrgMetadata;
        //</GEERU>

        if (this.InheritEnabled != this.orig().InheritEnabled)
        {
            inheritEnabledChanged = true;
        }

        ttsBegin;

        super();

        if (inheritEnabledChanged)
        {
            RetailInternalOrgInheritanceExploded::populate();

            // Delete any customization to make this internal org exactly same as it parent.
            if (this.InheritEnabled)
            {
                this.CategoryHierarchy = 0;

                delete_from retailInternalOrgAttributeGroup
                    where retailInternalOrgAttributeGroup.InternalOrganization == this.RecId;

                delete_from retailProdAttributeInternalOrgMetadata
                    where retailProdAttributeInternalOrgMetadata.InternalOrganization == this.RecId;

                delete_from retailInternalOrgProductInstanceValue
                    exists join retailInternalOrgProductInstanceValView
                        where retailInternalOrgProductInstanceValView.InstanceValue == retailInternalOrgProductInstanceValue.RecId
                            && retailInternalOrgProductInstanceValView.InternalOrganization == this.RecId;

                //<GEERU>
                delete_from retailInventDimInternalOrgMetadata
                    where retailInventDimInternalOrgMetadata.InternalOrganization == this.RecId;
               //</GEERU>
            }
        }

        if (_syncToRetailChannelTable)
        {
            retailChannelTable = RetailChannelTable::findByOperatingUnitId(this.InternalOrganization);
            if (retailChannelTable)
            {
                retailInternalOrgCatHierarchyCollapsed = RetailInternalOrgCatHierarchyCollapsed::findByInternalOrganization(this.RecId);
                if (retailChannelTable.CategoryHierarchy != retailInternalOrgCatHierarchyCollapsed.CategoryHierarchy)
                {
                    retailChannelTable.selectForUpdate(true);
                    retailChannelTable.CategoryHierarchy = retailInternalOrgCatHierarchyCollapsed.CategoryHierarchy;
                    retailChannelTable.update(false);
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        if (this.InheritEnabled)
        {
            this.CategoryHierarchy = 0;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>RetailInternalOrganization</c> table by using the record ID.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailInternalOrganization</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailInternalOrganization find(RetailInternalOrgRefRecId _recId, boolean _forUpdate = false)
    {
        RetailInternalOrganization retailInternalOrg;

        retailInternalOrg.selectForUpdate(_forUpdate);
        select firstonly retailInternalOrg where retailInternalOrg.RecId == _recId;

        return retailInternalOrg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByChannelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find record in <c>RetailInternalOrganization</c> table.
    /// </summary>
    /// <param name="_channel">
    /// RecId from <c>RetailChannelTable</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// Select record for updating <c>RetailChannelTable</c> table.
    /// </param>
    /// <returns>
    /// Return the internal org.
    /// </returns>
    /// <remarks>
    /// Return the internal org based on channel id if found else return empty record.
    /// </remarks>
    public static RetailInternalOrganization findByChannelId(RefRecId _channel, boolean _forUpdate = false)
    {
        RetailInternalOrganization retailInternalOrganization;
        RetailChannelTable retailChannelTable;

        if (_channel)
        {
            if (_forUpdate)
            {
                retailInternalOrganization.selectForUpdate(_forUpdate);
            }

            select firstonly retailInternalOrganization
            exists join retailChannelTable
                where retailChannelTable.OMOperatingUnitID == retailInternalOrganization.InternalOrganization
                    && retailChannelTable.RecId == _channel;
        }

        return retailInternalOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOMInternalOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>RetailInternalOrganization</c> based on the RecId of an OM internal org.
    /// </summary>
    /// <param name="_omInternalOrgRefRecId">
    /// The value of OmInternalOrganization RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value.
    /// </param>
    /// <returns>
    /// A record in the RetailInternalOrganization; otherwise, an empty record.
    /// </returns>
    public static RetailInternalOrganization findByOMInternalOrganization(RefRecId _omInternalOrgRefRecId,
                                                                            boolean _forUpdate = false)
    {
        RetailInternalOrganization retailInternalOrg;

        retailInternalOrg.selectForUpdate(_forUpdate);
        select firstonly retailInternalOrg where retailInternalOrg.InternalOrganization == _omInternalOrgRefRecId;

        return retailInternalOrg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in <c>RetailInternalOrganization</c> table based on recid
    /// </summary>
    /// <param name="_retaiIntOrgRecId">
    /// recid of record
    /// </param>
    /// <param name="_forUpdate">
    /// select record to update
    /// </param>
    /// <returns>
    /// Selected record from <c>RetailInternalOrganization</c> table.
    /// </returns>
    /// <remarks>
    /// Selected a record from <c>RetailInternalOrganization</c> table and mark for update based on boolean flag.
    /// </remarks>
    public static RetailInternalOrganization findByRecId(RefRecId _retaiIntOrgRecId, boolean _forUpdate = false)
    {
        RetailInternalOrganization retailInternalOrganization;

        if (_retaiIntOrgRecId)
        {
            if (_forUpdate)
            {
               retailInternalOrganization.selectForUpdate(_forUpdate);
            }

            select firstOnly retailInternalOrganization
                where retailInternalOrganization.RecId == _retaiIntOrgRecId;
        }

        return retailInternalOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateByOMInternalOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the record in the <c>RetailInternalOrganization</c> based on the RecId of an OM internal org.
    /// </summary>
    /// <param name="_omInternalOrgRefRecId">
    /// The value of OmInternalOrganization RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value.
    /// </param>
    /// <returns>
    /// A record in the RetailInternalOrganization if _omInternalOrgRefRecId != 0; otherwise, an empty record.
    /// </returns>
    public static RetailInternalOrganization findOrCreateByOMInternalOrganization(RefRecId _omInternalOrgRefRecId, boolean _forUpdate = false)
    {
        RetailInternalOrganization retailInternalOrg;

        if (_omInternalOrgRefRecId)
        {
            retailInternalOrg.selectForUpdate(_forUpdate);

            select firstonly retailInternalOrg
                where retailInternalOrg.InternalOrganization == _omInternalOrgRefRecId;
            if (!retailInternalOrg)
            {
                retailInternalOrg.InternalOrganization = _omInternalOrgRefRecId;
                retailInternalOrg.insert();
            }
        }

        return retailInternalOrg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOMHierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets OmHierarchyType record for channel management by inheritance purpose.
    /// </summary>
    /// <returns>
    /// Returns OmHieraqrchyType for a hierarchy purpose.
    /// </returns>
    public static OMHierarchyType getOMHierarchyType()
    {
        OMHierarchyType         omHierarchy;
        OMHierarchyPurpose      omHierarchyPurpose;

        select firstonly RecId from omHierarchy
            where omHierarchy.Name
                join HierarchyType, HierarchyPurpose from omHierarchyPurpose
                where omHierarchyPurpose.HierarchyType == omHierarchy.RecId
                    && omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::RetailAssortment
                    && omHierarchyPurpose.IsDefault == NoYes::Yes;

        return omHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixInventDimReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks and fixes records in the <c>RetailInventDimInternalOrgMetadata</c> table.
    /// </summary>
    /// <remarks>
    ///    If a record for a dimension does not exist in the <c>RetailInventDimInternalOrgMetadata</c> table,
    ///    it is created. If a record exists, its line number is checked and fixed if it does not match the
    ///    position of a corresponding field in the <c>InventoryDimensions</c> field group of the
    ///    <c>InventDim</c> table.
    /// </remarks>
    public void checkFixInventDimReference()
    {
        RetailInventDimInternalOrgMetadata  retailInventDimInternalOrgMetadata;
        RetailInventDimIntOrgMetadataCollapsed retailInventDimIntOrgMetadataCollapsed;

        ListEnumerator                      enumerator  = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        FieldId                             dimFieldId;
        int                                 fieldNo;
        LineNum                             lineNumber;
        RecId                               metadataRecId;

        ttsbegin;

        while (enumerator.moveNext())
        {
            fieldNo++;
            dimFieldId = enumerator.current();
            if (this.InheritEnabled)
            {
                retailInventDimIntOrgMetadataCollapsed = RetailInventDimIntOrgMetadataCollapsed::findByIds(this.RecId, dimFieldId);
                lineNumber = retailInventDimIntOrgMetadataCollapsed.LineNumber;
                metadataRecId = retailInventDimIntOrgMetadataCollapsed.Origin;
            }
            else
            {
                retailInventDimInternalOrgMetadata = RetailInventDimInternalOrgMetadata::findByIds(this.RecId, dimFieldId);
                lineNumber = retailInventDimInternalOrgMetadata.LineNumber;
                metadataRecId = retailInventDimInternalOrgMetadata.RecId;
            }

            if (metadataRecId)
            {
                if (lineNumber != fieldNo)
                {
                    update_recordset retailInventDimInternalOrgMetadata
                        setting LineNumber = fieldNo
                        where retailInventDimInternalOrgMetadata.RecId == metadataRecId;
                }
            }
            else
            {
                retailInventDimInternalOrgMetadata.clear();
                retailInventDimInternalOrgMetadata.InternalOrganization = this.RecId;
                retailInventDimInternalOrgMetadata.DimensionFieldId    = dimFieldId;
                retailInventDimInternalOrgMetadata.initValue();
                retailInventDimInternalOrgMetadata.LineNumber          = fieldNo;
                retailInventDimInternalOrgMetadata.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RemoveCategoryHierarchyFromChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the specified category hierarchy from all the channels associated with it.
    /// </summary>
    /// <param name="_categoryHierarchy">
    /// Category hierarchy record id.
    /// </param>
    internal static void RemoveCategoryHierarchyFromChannels(EcoResCategoryHierarchyId _categoryHierarchy)
    {
        RetailInternalOrganization internalOrg;

        ttsbegin;

        update_recordset internalOrg 
        setting 
            CategoryHierarchy = 0
        where internalOrg.CategoryHierarchy == _categoryHierarchy;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1017</DeveloperDocumentation>
	<Label>@REX1016</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InternalOrganization</TitleField1>
	<TitleField2>InheritEnabled</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ChannelManagement</Modules>
	<ReplacementKey>InternalOrgIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InheritEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastModifiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InternalOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InheritEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LastModifiedDateTime</Name>
			<Label>@SYS130817</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastModifiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InheritEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@REX1018</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InternalOrganization</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInternalOrgRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastModifiedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ModifiedDateTime</ExtendedDataType>
			<Label>@SYS130817</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InternalOrgIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InternalOrganization</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryHierarchy</Name>
					<Field>CategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMInternalOrganization</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>OMInternalOrganization</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InternalOrganization</Name>
					<Field>InternalOrganization</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>