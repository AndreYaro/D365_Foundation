<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistrationGroupSetup_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxRegistrationGroupSetup_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkECC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks ECC of the tax registration group setup.
    /// </summary>
    /// <param name="_taxIdentificationNumber">
    /// The tax identification number.
    /// </param>
    /// <param name="_companyId">
    /// The company id.
    /// </param>
    /// <returns>
    /// Returns true if the check succeed.
    /// </returns>
    public boolean checkECC(
        TaxRegistrationNumberRecId_IN   _taxIdentificationNumber,
        CompanyId                       _companyId = curext())
    {
        boolean     ret = true;

        changecompany(_companyId)
        {
            if (_taxIdentificationNumber
                && !TaxRegistrationNumbers_IN::existRegistrationNumberByRecId(_taxIdentificationNumber))
            {
                ret = checkFailed(strfmt("@GLS5071", _taxIdentificationNumber, TaxType_IN::Excise, TaxRegistrationType_IN::Company));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to check whether passed registration number is of which tax type.
    /// </summary>
    /// <param name="_salesTaxRegistrationNumberRecId">
    /// Registration number which has to be checked
    /// </param>
    /// <param name="_companyId">
    /// Company to which registration number belongs to.
    /// </param>
    /// <returns>
    /// Returns true if registration number is of type sales tax; otherwise false.
    /// </returns>
    public boolean checkSalesTaxRegistrationNumber(TaxRegistrationNumberRecId_IN  _salesTaxRegistrationNumberRecId, CompanyId _companyId = curext())
    {
        boolean     ret = true;

        changecompany(_companyId)
        {
            if (_salesTaxRegistrationNumberRecId && !TaxRegistrationNumbers_IN::existRegistrationNumberByRecId(_salesTaxRegistrationNumberRecId))
            {
                ret = checkFailed(strfmt("@GLS5071", _salesTaxRegistrationNumberRecId, TaxType_IN::SalesTax, TaxRegistrationType_IN::Company));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSTC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record in the <c>TaxRegistrationNumbers_IN</c> table exists in the specified company or not.
    /// </summary>
    /// <param name="_taxIdentificationNumber">
    /// The registration number record ID for IN tax.
    /// </param>
    /// <param name="_companyId">
    /// The company ID; optional.
    /// </param>
    /// <returns>
    /// Returns true if the specified <c>TaxRegistrationNumbers_IN</c> record exists; otherwise, false.
    /// </returns>
    public boolean checkSTC(
        TaxRegistrationNumberRecId_IN   _taxIdentificationNumber,
        CompanyId                       _companyId = curext())
    {
        boolean     ret = true;

        changecompany(_companyId)
        {
            if (_taxIdentificationNumber
                && !TaxRegistrationNumbers_IN::existRegistrationNumberByRecId(_taxIdentificationNumber))
            {
                ret = checkFailed(strfmt("@GLS5071", _taxIdentificationNumber, TaxType_IN::ServiceTax, TaxRegistrationType_IN::Company));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checktaxRegistrationGroupNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if records exist in the table for the current record.
    /// </summary>
    /// <param name="_taxRegistrationGroupNumber">
    /// The field used to find in a table.
    /// </param>
    /// <param name="_taxType">
    /// The field used to find in a table.
    /// </param>
    /// <returns>
    /// True if record exist; otherwise, false.
    /// </returns>
    public boolean  checktaxRegistrationGroupNumber(TaxRegistrationNumberRecId_IN   _taxRegistrationGroupNumber,
                                                    TaxTypeRegistrationGroup_IN     _taxType)
    {
        boolean ret = false;

        switch (_taxType)
        {
            case TaxTypeRegistrationGroup_IN::SalesTax:
                ret = this.checkSalesTaxRegistrationNumber(_taxRegistrationGroupNumber);
                break;

            case TaxTypeRegistrationGroup_IN::VAT:
                ret = this.checkTIN(_taxRegistrationGroupNumber);
                break;

            case TaxTypeRegistrationGroup_IN::Excise:
                ret = this.checkECC(_taxRegistrationGroupNumber);
                break;

            case TaxTypeRegistrationGroup_IN::ServiceTax:
                ret = this.checkSTC(_taxRegistrationGroupNumber);
                break;

            case TaxTypeRegistrationGroup_IN::GST:
                ret = this.checkGST(_taxRegistrationGroupNumber);
                break;

            default:
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record in the <c>TaxRegistrationNumbers_IN</c> table exists
    /// for the specified registration number in the specified company or not.
    /// </summary>
    /// <param name="_taxIdentificationNumber">
    /// The registration number for IN tax.
    /// </param>
    /// <param name="_companyId">
    /// The company ID; optional.
    /// </param>
    /// <returns>
    /// Returns true if the specified <c>TaxRegistrationNumbers_IN</c> record exists; otherwise, false.
    /// </returns>
    public boolean checkTIN(
        TaxRegistrationNumberRecId_IN   _taxIdentificationNumber,
        CompanyId                       _companyId = curext())
    {
        boolean     ret = true;

        changecompany(_companyId)
        {
            if (_taxIdentificationNumber
                && !TaxRegistrationNumbers_IN::existRegistrationNumberByRecId(_taxIdentificationNumber))
            {
                ret = checkFailed(strfmt("@GLS5071", _taxIdentificationNumber, TaxType_IN::VAT, TaxRegistrationType_IN::Company));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRegistrationGroupNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the tax type from the specific criteria.
    /// </summary>
    /// <param name="_taxType">
    /// The field used to find in a table.
    /// </param>
    /// <returns>
    /// Returns the tax type.
    /// </returns>
    public TaxType_IN taxRegistrationGroupNumber(TaxTypeRegistrationGroup_IN _taxType)
    {
        TaxType_IN  taxType;

        switch (_taxType)
        {
            case TaxTypeRegistrationGroup_IN::Excise:
                taxType = TaxType_IN::Excise;
                break;
            case TaxTypeRegistrationGroup_IN::SalesTax:
                taxType = TaxType_IN::SalesTax;
                break;
            case TaxTypeRegistrationGroup_IN::ServiceTax:
                taxType = TaxType_IN::ServiceTax;
                break;
            case TaxTypeRegistrationGroup_IN::VAT:
                taxType = TaxType_IN::VAT;
                break;
            case TaxTypeRegistrationGroup_IN::GST:
                taxType = TaxType_IN::GST;
                break;

            default:
                break;
        }

        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates fields of specific tax type.
    /// </summary>
    /// <param name="_fieldName">
    /// The field to validate of specific tax type.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// True if the call to returns true; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName   _fieldName,
                                             int         _arrayIndex = 1)
    {
        boolean     ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldstr(TaxRegistrationGroupSetup_IN, TaxRegistrationNumberTable) :
                    ret = this.checktaxRegistrationGroupNumber(this.TaxRegistrationNumberTable,this.TaxType);
                    this.Description = TaxRegistrationNumbers_IN::find(this.TaxRegistrationNumberTable).Name;
                    break;

                case fieldstr(TaxRegistrationGroupSetup_IN, TaxType) :
                    ret = this.checktaxRegistrationGroupNumber(this.TaxRegistrationNumberTable,this.TaxType);
                    ret = this.checkTaxType();
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    /// True if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean                         ret;
        TaxRegistrationGroupSetup_IN    taxRegistrationGroupSetup;

        ret = super();

        select firstonly taxRegistrationGroupSetup
            where taxRegistrationGroupSetup.TaxRegistrationGroupName    == this.TaxRegistrationGroupName     &&
                taxRegistrationGroupSetup.TaxRegistrationNumberTable    == this.TaxRegistrationNumberTable   &&
                taxRegistrationGroupSetup.TaxType                       == this.TaxType;

        if (taxRegistrationGroupSetup && this.RecId == 0)
        {
            ret = checkFailed("@SYS35524");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxRegistrationGroupSetup_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxRegistrationGroupSetup_IN table.
    /// </returns>
    public static TaxRegistrationGroupSetup_IN find(RefRecId            _recId,
                                                    boolean             _forupdate = false,
                                                    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxRegistrationGroupSetup_IN taxRegistrationGroupSetup;

        taxRegistrationGroupSetup.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxRegistrationGroupSetup.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxRegistrationGroupSetup
            where taxRegistrationGroupSetup.RecId == _recId;

        return taxRegistrationGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxRegistrationGroupName_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxRegistrationGroupSetup_IN table for the specified record id.
    /// </summary>
    /// <param name="_taxRegistrationGroupName">
    /// The field used to find in a table.
    /// </param>
    /// <param name="_taxRegistrationNumber">
    /// The field used to find in a table.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// Returns table buffer
    /// </returns>
    public static TaxRegistrationGroupSetup_IN findByTaxRegistrationGroupName_IN(TaxRegistrationGroupNameRecID_IN    _taxRegistrationGroupName,
                                                                                 TaxRegistrationNumberRecId_IN       _taxRegistrationNumber,
                                                                                 boolean                             _forUpdate = false)
    {
        TaxRegistrationGroupSetup_IN    taxRegistrationGroupSetup;

        if (_taxRegistrationGroupName && _taxRegistrationNumber)
        {
            taxRegistrationGroupSetup.selectForUpdate(_forUpdate);

            select firstonly taxRegistrationGroupSetup
                where taxRegistrationGroupSetup.TaxRegistrationGroupName   == _taxRegistrationGroupName &&
                      taxRegistrationGroupSetup.TaxRegistrationNumberTable == _taxRegistrationNumber;
        }

        return taxRegistrationGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupTaxType2TaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get the tax type from specific criteria.
    /// </summary>
    /// <param name="_groupTaxType">
    /// The field used to find in a table.
    /// </param>
    /// <returns>
    /// Returns tax type.
    /// </returns>
    public static TaxType_IN groupTaxType2TaxType(TaxTypeRegistrationGroup_IN _groupTaxType)
    {
        TaxType_IN      taxType;

        switch (_groupTaxType)
        {
            case TaxTypeRegistrationGroup_IN::ServiceTax:
                taxType = TaxType_IN::ServiceTax;
                break;

            case TaxTypeRegistrationGroup_IN::Excise:
                taxType = TaxType_IN::Excise;
                break;

            case TaxTypeRegistrationGroup_IN::VAT:
                taxType = TaxType_IN::VAT;
                break;

            case TaxTypeRegistrationGroup_IN::SalesTax:
                taxType = TaxType_IN::SalesTax;
                break;

            case TaxTypeRegistrationGroup_IN::GST:
                taxType = TaxType_IN::GST;
                break;

            default:
                break;
        }
        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified record in the <c>TaxRegistrationNumbers_IN</c> table exists in the specified company or not.
    /// </summary>
    /// <param name="_taxIdentificationNumberRecId">
    /// The registration number record ID for IN tax.
    /// </param>
    /// <param name="_companyId">
    /// The company ID; optional.
    /// </param>
    /// <returns>
    /// Returns true if the specified <c>TaxRegistrationNumbers_IN</c> record exists; otherwise, false.
    /// </returns>
    public boolean checkGST(TaxRegistrationNumberRecId_IN _taxIdentificationNumberRecId, CompanyId _companyId = curext())
    {
        boolean ret = true;

        changecompany(_companyId)
        {
            if (_taxIdentificationNumberRecId
            && !TaxRegistrationNumbers_IN::existRegistrationNumberByRecId(_taxIdentificationNumberRecId))
            {
                ret = checkFailed(strfmt("@GLS5071", _taxIdentificationNumberRecId, TaxType_IN::GST, TaxRegistrationType_IN::Company));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the tax type is correct.
    /// </summary>
    /// <returns>
    /// Returns true if the tax type is correct; otherwise, false.
    /// </returns>
    public boolean checkTaxType()
    {
        TaxRegistrationGroupSetup_IN taxRegistrationGroupSetup;
        boolean ret = true;

        if (this.TaxType == TaxTypeRegistrationGroup_IN::GST)
        {
            select firstOnly taxRegistrationGroupSetup
                where taxRegistrationGroupSetup.TaxRegistrationGroupName == this.TaxRegistrationGroupName
                    && taxRegistrationGroupSetup.TaxType != TaxTypeRegistrationGroup_IN::GST;
        }
        else
        {
            select firstOnly taxRegistrationGroupSetup
                where taxRegistrationGroupSetup.TaxRegistrationGroupName == this.TaxRegistrationGroupName
                    && taxRegistrationGroupSetup.TaxType == TaxTypeRegistrationGroup_IN::GST;
        }

        if (taxRegistrationGroupSetup)
        {
            ret = checkFailed(strFmt("@TaxGST:ErrorMessageOfTaxType", this.TaxType, taxRegistrationGroupSetup.TaxType));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64208</DeveloperDocumentation>
	<FormRef>TaxRegistrationGroup_IN</FormRef>
	<Label>@GLS6221</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxRegistrationNumberTable</TitleField1>
	<TitleField2>TaxType</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS12687</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRegistrationGroupName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxRegistrationGroupNameRecID_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxRegistrationNumberTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Label>@GLS5569</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxTypeRegistrationGroup_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxRegistrationNumberTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegistrationNumberTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxRegistrationGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxRegistrationGroupName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistrationGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistrationGroup_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationGroup_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationGroup_IN_TaxRegistrationGroupSetup_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRegistrationGroupName</Name>
					<Field>TaxRegistrationGroupName</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistrationNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_TaxRegistrationGroupSetup_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRegistrationNumberTable</Name>
					<Field>TaxRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>