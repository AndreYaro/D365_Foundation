<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrProperty</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrProperty extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Check if property id exists in the <c>WrkCtrProperty</c> table.
    /// </summary>
    /// <param name = "_property">
    ///   The property Id of the <c>WrkCtrProperty</c> record to check for existence.
    /// </param>
    /// <returns>
    ///   True if the specified property Id exists; otherwise, false.
    ///   </returns>
    static boolean checkExist(PropertyId _property)
    {
        if (_property && ! WrkCtrProperty::exist(_property))
            return checkFailed(strfmt(WrkCtrProperty::txtNotExist(), _property));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create dimension for a given property id.
    /// </summary>
    /// <param name = "property">The property Id to create a dimension.</param>
    /// <returns>The combined dimension and value.</returns>
    static TempStr createDimensions(PropertyId property)
    {
        WrkCtrPropertyLine  wrkCtrPropertyLine;
        TempStr             txt   = '';

        while select Dimension, Value from wrkCtrPropertyLine
            index PropertyIdx               // not a hint
            where wrkCtrPropertyLine.PropertyId     == property
        {
            txt   = txt   + (txt   ? ',' :'');
            txt   += wrkCtrPropertyLine.Dimension + '='+ wrkCtrPropertyLine.Value;
        }
        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>WrkCtrProperty</c> table.
    /// </summary>
    /// <param name="_property">
    ///    The property Id of the <c>WrkCtrProperty</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    True if the specified property Id exists; otherwise, false.
    /// </returns>
    static boolean exist(PropertyId _property)
    {
        return WrkCtrProperty::find(_property).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WrkCtrProperty</c> table.
    /// </summary>
    /// <param name="_property">
    ///    The property Id of the <c>WrkCtrProperty</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>WrkCtrProperty</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrProperty find(PropertyId   _property,
                               boolean      _forUpdate = false)
    {
        WrkCtrProperty wrkCtrProperty;

        wrkCtrProperty.selectForUpdate(_forUpdate);

        if (_property)
            select firstonly wrkCtrProperty
                index hint PropertyIdx
                where wrkCtrProperty.PropertyId == _property;

        return wrkCtrProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>WrkCtrProperty</c> table.
    /// </summary>
    /// <param name="_property">
    ///    The property Id of the <c>WrkCtrProperty</c> record to check for name.
    /// </param>
    /// <returns>
    ///    Name of the property if the specified property id exists; otherwise, empty name.
    /// </returns>
    static Name name(PropertyId property)
    {
        return WrkCtrProperty::find(property).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// The message if property do not exist.
    /// </summary>
    /// <returns>Property  %1 does not exist.</returns>
    static TxtNotExist txtNotExist()
    {
        return "@SYS28074";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProdShop</ConfigurationKey>
	<DeveloperDocumentation>@SYS124220</DeveloperDocumentation>
	<FormRef>WrkCtrProperty</FormRef>
	<Label>@SYS10344</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PropertyId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>PropertyIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>PropertyIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WrkCtrPropertyLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrPropertyLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Property</Name>
			<Label>@SYS682</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PropertyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PropertyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PropertyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PropertyId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>