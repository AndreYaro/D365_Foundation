<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReceiptResetConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailReceiptResetConfiguration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>RetailReceiptResetConfiguration</c> by functionality profile ID.
    /// </summary>
    /// <param name = "_profileId">The functionality profile ID.</param>
    /// <param name = "_forUpdate">Determines if the record should be selected for update. Optional.</param>
    /// <returns>The <c>RetailReceiptResetConfiguration</c> record.</returns>
    public static RetailReceiptResetConfiguration findByProfileId(RetailFunctionalityProfileId _profileId, boolean _forUpdate = false)
    {
        RetailReceiptResetConfiguration configuration;

        configuration.selectForUpdate(_forUpdate);

        // for date effective feature, if you don't specify the date interval, it will return the current effective record.
        select firstonly configuration where configuration.FunctionalityProfileId == _profileId;

        return configuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailReceiptResetConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the retail receipt reset by functionality profile.
    /// </summary>
    /// <param name = "_profileId">The functionality profile ID.</param>
    /// <param name = "_resetDate">The reset date.</param>
    /// <param name = "_type">The type of the reset.</param>
    public static void setRetailReceiptResetConfiguration
        (
            RetailFunctionalityProfileId    _profileId,
            date                            _resetDate,
            RetailReceiptResetType          _type
        )
    {
        RetailReceiptResetConfiguration configuration;
        RetailFunctionalityProfile      profile;
        
        ttsbegin;

        profile = RetailFunctionalityProfile::find(_profileId);

        if (!profile)
        {
            throw error(strFmt("@RetailReceiptReset:NextResetDateHelpText", _profileId));
        }

        configuration = RetailReceiptResetConfiguration::findByProfileId(_profileId, true);

        if (configuration)
        {
            configuration.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
            configuration.ResetDate                 = _resetDate;
            configuration.Type                      = _type;
            configuration.Enabled                   = NoYes::Yes;
            configuration.update();
        }
        else
        {
            configuration.FunctionalityProfileId    = _profileId;
            configuration.ValidFrom                 = DateTimeUtil::utcNow();
            configuration.ValidTo                   = DateTimeUtil::maxValue();
            configuration.ResetDate                 = _resetDate;
            configuration.Type                      = _type;
            configuration.Enabled                   = NoYes::Yes;
            configuration.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRetailReceiptResetConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the retail receipt reset configuration by functionality profile.
    /// </summary>
    /// <param name = "_profileId">The functionality profile ID.</param>
    public static void clearRetailReceiptResetConfiguration(RetailFunctionalityProfileId _profileId)
    {
        RetailReceiptResetConfiguration configuration;
        RetailFunctionalityProfile      profile;

        ttsbegin;

        profile = RetailFunctionalityProfile::find(_profileId);

        if (!profile)
        {
            throw error(strFmt("@RetailReceiptReset:NextResetDateHelpText", _profileId));
        }

        configuration = RetailReceiptResetConfiguration::findByProfileId(_profileId, true);

        if (configuration)
        {
            configuration.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
            configuration.ResetDate = dateNull();
            configuration.Enabled   = NoYes::No;
            configuration.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextResetDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next receipt reset date.
    /// </summary>
    /// <returns>
    /// The next receipt reset date.
    /// </returns>
    public display date nextResetDate()
    {
        date nextResetDate, today;

        if (!this.Enabled)
        {
            return dateNull();
        }

        today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        switch (this.Type)
        {
            case RetailReceiptResetType::SingleTime:
                // If reset date is in the past, there's no next reset date as it is single time only.
                if (this.ResetDate <= today)
                {
                    nextResetDate = dateNull();
                }
                else
                {
                    nextResetDate = this.ResetDate;
                }
                break;
            case RetailReceiptResetType::YearlyRecurrence:
                // If reset date is in the past, we need to calculate the next reset date due to yearly recurrence.
                // Compare the date of reset date with today to determine if the next reset date is still in this year or next year.
                // e.g.: reset date = 2010-10-01, today = 2019-05-01, next reset date = 2019-10-01
                // e.g.: reset date = 2010-10-01, today = 2019-11-01, next reset date = 2020-10-01
                if (this.ResetDate <= today)
                {
                    int dateDay     = dayOfMth(this.ResetDate);
                    int dateMonth   = mthOfYr(this.ResetDate);
                    int thisYear    = year(today);

                    date thisYearResetDate = mkDate(dateDay, dateMonth, thisYear);

                    if (thisYearResetDate <= today)
                    {
                        nextResetDate = nextYr(thisYearResetDate);
                    }
                    else
                    {
                        nextResetDate = thisYearResetDate;
                    }
                }
                else
                {
                    nextResetDate = this.ResetDate;
                }
                break;
        }

        return nextResetDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentEffectiveResetDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currently effective reset date.
    /// </summary>
    /// <param name = "_lookForPreviousRecords">Determines if we should look for previous records.</param>
    /// </param>
    /// <returns>
    /// The currently effective reset date.
    /// </returns>
    public display date currentEffectiveResetDate(boolean _lookForPreviousRecords = true)
    {
        date        currentEffectiveDate, referenceDate;
        utcdatetime referenceDateTime, now;

        now                 = DateTimeUtil::getSystemDateTime();
        referenceDateTime   = now > this.ValidTo ? this.ValidTo : now;
        referenceDate       = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(referenceDateTime, DateTimeUtil::getUserPreferredTimeZone()));

        if (this.Enabled)
        {
            switch (this.Type)
            {
                case RetailReceiptResetType::SingleTime:
                    // The current effective reset date should be the reset date in case it is in the past.
                    if (this.ResetDate <= referenceDate)
                    {
                        currentEffectiveDate = this.ResetDate;
                    }
                    else
                    {
                        currentEffectiveDate = dateNull();
                    }
                    break;
                case RetailReceiptResetType::YearlyRecurrence:
                    // The current effective reset date should be the most recent past reset date.
                    // e.g.: reset date = 2010-10-01, today = 2019-05-01, current effective reset date = 2018-10-01
                    if (this.ResetDate <= referenceDate)
                    {
                        int dateDay     = dayOfMth(this.ResetDate);
                        int dateMonth   = mthOfYr(this.ResetDate);
                        int thisYear    = year(referenceDate);

                        date thisYearResetDate = mkDate(dateDay, dateMonth, thisYear);
                    
                        if (referenceDate >= thisYearResetDate)
                        {
                            currentEffectiveDate = thisYearResetDate;
                        }
                        else
                        {
                            currentEffectiveDate = prevYr(thisYearResetDate);
                        }
                    }
                    else
                    {
                        currentEffectiveDate = dateNull();
                    }
                    break;
            }
        }

        // If there's no current effective date with this record, we should look at the previous valid record.
        if (currentEffectiveDate == dateNull() && _lookForPreviousRecords && this.ValidFrom != DateTimeUtil::minValue())
        {
            RetailReceiptResetConfiguration previousConfiguration;
            utcdatetime                     minDateTime, maxDateTime;

            minDateTime = DateTimeUtil::minValue();
            maxDateTime = DateTimeUtil::addSeconds(this.ValidFrom, -1);

            boolean hasPreviousValidConfig = false;

            // look for the previous valid record
            while select validtimestate(minDateTime, maxDateTime) * from previousConfiguration
                order by previousConfiguration.ValidFrom desc
                where   previousConfiguration.FunctionalityProfileId    == this.FunctionalityProfileId
                &&      previousConfiguration.Enabled                   == NoYes::Yes
            {
                date validFrom  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(previousConfiguration.ValidFrom, DateTimeUtil::getUserPreferredTimeZone()));
                date validTo    = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(previousConfiguration.ValidTo, DateTimeUtil::getUserPreferredTimeZone()));

                if (previousConfiguration.ResetDate >= validFrom && previousConfiguration.ResetDate <= validTo)
                {
                    hasPreviousValidConfig = true;
                    break;
                }
            }

            if (hasPreviousValidConfig)
            {
                currentEffectiveDate = previousConfiguration.currentEffectiveResetDate(false);
            }
        }

        return currentEffectiveDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RetailReceiptReset:ResetDateConfigurationDevDoc</DeveloperDocumentation>
	<Label>@RetailReceiptReset:ResetDateConfiguration</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>FunctionalityProfileId</TitleField1>
	<TitleField2>ResetDate</TitleField2>
	<ClusteredIndex>RetailReceiptResetConfigurationIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>BrickAndMortarStore</Modules>
	<PrimaryIndex>RetailReceiptResetConfigurationIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FunctionalityProfileId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailFunctionalityProfileId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ResetDate</Name>
			<ExtendedDataType>RetailReceiptResetDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<EnumType>RetailReceiptResetType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Enabled</Name>
			<ExtendedDataType>RetailReceiptResetEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailReceiptResetConfigurationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FunctionalityProfileId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailFunctionalityProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailFunctionalityProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FunctionalityProfileId</Name>
					<SourceEDT>RetailFunctionalityProfileId</SourceEDT>
					<Field>FunctionalityProfileId</Field>
					<RelatedField>profileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>profileIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>