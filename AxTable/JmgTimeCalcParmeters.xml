<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTimeCalcParmeters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgTimeCalcParmeters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMustPayDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for checking whether the specified pay specification type must trigger pay.
    /// </summary>
    /// <param name="_paySpecType">
    /// The pay specification type to check.
    /// </param>
    /// <param name="_jmgTimeCalcParmeters">
    /// A record of the <c>JmgTimeCalcParmeters</c> table.
    /// </param>
    /// <param name = "_result">
    /// A <c>EventHandlerResult</c> object containing a boolean value that is true if the specified combination must trigger pay; otherwise, false.
    /// </param>
    static delegate void checkMustPayDelegate(
        JmgPaySpecTypeEnum      _paySpecType,
        JmgTimeCalcParmeters    _jmgTimeCalcParmeters,
        EventHandlerResult      _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMustPay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified combination of registration specification, profile specification type,
    /// and pay specification type must trigger pay.
    /// </summary>
    /// <param name="_stampSpectype">
    /// The registration specification to check.
    /// </param>
    /// <param name="_profSpectype">
    /// The profile specification type to check.
    /// </param>
    /// <param name="_paySpecType">
    /// The pay specification type to check.
    /// </param>
    /// <param name="_secondaryProfSpecType">
    /// The secondary profile specification type to check.
    /// </param>
    /// <returns>
    /// true if the specified combination must trigger pay; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The secondary profile specification type is used when handling paid breaks.
    /// </remarks>
    public static boolean checkMustPay(JmgStampTypeSpecEnum     _stampSpectype,
                                       JmgProfileSpecTypeEnum   _profSpectype,
                                       JmgPaySpecTypeEnum       _paySpecType,
                                       JmgProfileSpecTypeEnum   _secondaryProfSpecType)
    {
        JmgTimeCalcParmeters    jmgTimeCalcParmeters;
        boolean                 ret                     = true;

        if (_profSpectype            == JmgProfileSpecTypeEnum::BreakPay &&
            _secondaryProfSpecType  != JmgProfileSpecTypeEnum::Blank)
        {
            select firstonly jmgTimeCalcParmeters
                where jmgTimeCalcParmeters.StampTypeSpec    == _stampSpectype &&
                      jmgTimeCalcParmeters.ProfileSpecType  == _secondaryProfSpecType;
        }
        else
        {
            select firstonly jmgTimeCalcParmeters
                where jmgTimeCalcParmeters.StampTypeSpec    == _stampSpectype &&
                      jmgTimeCalcParmeters.ProfileSpecType  == _profSpectype;
        }

        switch (_paySpecType)
        {
            case JmgPaySpecTypeEnum::WorkTime :
                ret = jmgTimeCalcParmeters.PayOnPayTime;
                break;
            case JmgPaySpecTypeEnum::OverTime :
                ret = jmgTimeCalcParmeters.PayOnOverTime;
                break;
            case JmgPaySpecTypeEnum::Break :
                ret = jmgTimeCalcParmeters.PayOnBreak;
                break;
            case JmgPaySpecTypeEnum::FlexAdd :
                ret = jmgTimeCalcParmeters.PayOnFlexAddTime;
                break;
            case JmgPaySpecTypeEnum::FlexSub :
                ret = jmgTimeCalcParmeters.PayOnFlexSubTime;
                break;
            case JmgPaySpecTypeEnum::AddOn :
                ret = jmgTimeCalcParmeters.PayOnBonus;
                break;
            case JmgPaySpecTypeEnum::Absence :
                ret = jmgTimeCalcParmeters.PayOnAbsence;
                break;
            default:
                EventHandlerResult result = new EventHandlerResult();
                JmgTimeCalcParmeters::checkMustPayDelegate(_paySpecType, jmgTimeCalcParmeters, result);
                
                if (result.hasResult())
                {
                    ret = result.result();
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTimeParmsSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether time calculation parameters have been initialized.
    /// </summary>
    /// <param name="showError">
    /// true if an error must be shown to the user and the calculation parameters are not initialized;
    /// otherwise, false.
    /// </param>
    /// <returns>
    /// true if the calculation parameters have been initialized; otherwise, false.
    /// </returns>
    static boolean checkTimeParmsSetup(boolean showError = true)
    {
        JmgTimeCalcParmeters    jmgTimeCalcParmeters;

        Set                     stampTypeSet    = JmgTimeCalcParmeters::initializeStampTypeSpecSetForCalcParameters();
        Set                     profileSpecSet  = JmgTimeCalcParmeters::initializeProfileSpecTypeSetForCalcParameters();
        Integer                 wrkchkCounttab[];
        boolean                 ret = true;

        while select StampTypeSpec, ProfileSpecType
                from jmgTimeCalcParmeters
                order by StampTypeSpec, ProfileSpecType
        {
            if (stampTypeSet.in(jmgTimeCalcParmeters.StampTypeSpec)&& profileSpecSet.in(jmgTimeCalcParmeters.ProfileSpecType))
                wrkchkCounttab[1+jmgTimeCalcParmeters.StampTypeSpec] ++;
        }

        SetIterator stampTypeItr    = new SetIterator(stampTypeSet);
        while (ret && stampTypeItr.more())
        {
            if (wrkchkCounttab[1+stampTypeItr.value()] != profileSpecSet.elements())
                ret = false;
            stampTypeItr.next();
        }

        if ((! ret) && (showError))
            error("@SYS39360");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProfileSpecTypeSetForCalcParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a set with <c>JmgProfileSpecTypeEnum</c> values used for the calculation parameters.
    /// </summary>
    /// <returns>A set with <c>JmgProfileSpecTypeEnum</c> values used for the calculation parameters</returns>
    [Hookable]
    protected static Set initializeProfileSpecTypeSetForCalcParameters()
    {
        Set profileSpecSet = new Set(Types::Enum);
        profileSpecSet.add(JmgProfileSpecTypeEnum::WorkTime);
        profileSpecSet.add(JmgProfileSpecTypeEnum::OverTime);
        profileSpecSet.add(JmgProfileSpecTypeEnum::Break);
        profileSpecSet.add(JmgProfileSpecTypeEnum::BreakPay);
        profileSpecSet.add(JmgProfileSpecTypeEnum::FlexAdd);
        profileSpecSet.add(JmgProfileSpecTypeEnum::FlexSub);

        return profileSpecSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeStampTypeSpecSetForCalcParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a set with <c>JmgStampTypeSpecEnum</c> values used for the calculation parameters.
    /// </summary>
    /// <returns>A set with <c>JmgStampTypeSpecEnum</c> values used for the calculation parameters</returns>
    [Hookable]
    protected static Set initializeStampTypeSpecSetForCalcParameters()
    {
        Set stampTypeSet = new Set(Types::Enum);
        stampTypeSet.add(JmgStampTypeSpecEnum::Work);
        stampTypeSet.add(JmgStampTypeSpecEnum::AbsLegal);
        stampTypeSet.add(JmgStampTypeSpecEnum::AbsIllegal);
        stampTypeSet.add(JmgStampTypeSpecEnum::AbsLegalFlex);
        stampTypeSet.add(JmgStampTypeSpecEnum::AbsIllegalFlex);
        stampTypeSet.add(JmgStampTypeSpecEnum::FlexNoWork);

        return stampTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertparm</Name>
				<Source><![CDATA[
    private static void insertparm(JmgStampTypeSpec _sts, JmgProfileSpecType _pst, str calcStr, str payOnStr)
    {
        #define.Marked('Y')
        #define.AllUnMarked('NNNNNNN')
        
        JmgTimeCalcParmeters    newTimeCalc;

        calcStr                        += #AllUnMarked;
        payOnStr                       += #AllUnMarked;
        newTimeCalc.StampTypeSpec       = _sts;
        newTimeCalc.ProfileSpecType     = _pst;
        newTimeCalc.CalcWorkTime        = (substr(calcStr,1,1)  == #Marked);
        newTimeCalc.CalcPayTime         = (substr(calcStr,2,1)  == #Marked);
        newTimeCalc.CalcPayOverTime     = (substr(calcStr,3,1)  == #Marked);
        newTimeCalc.CalcAbsLegalTime    = (substr(calcStr,4,1)  == #Marked);
        newTimeCalc.CalcAbsIllegalTime  = (substr(calcStr,5,1)  == #Marked);
        newTimeCalc.CalcFlexAddTime     = (substr(calcStr,6,1)  == #Marked);
        newTimeCalc.CalcFlexSubTime     = (substr(calcStr,7,1)  == #Marked);
        newTimeCalc.PayOnPayTime        = (substr(payOnStr,1,1) == #Marked);
        newTimeCalc.PayOnOverTime       = (substr(payOnStr,2,1) == #Marked);
        newTimeCalc.PayOnBreak          = (substr(payOnStr,3,1) == #Marked);
        newTimeCalc.PayOnFlexSubTime    = (substr(payOnStr,4,1) == #Marked);
        newTimeCalc.PayOnFlexAddTime    = (substr(payOnStr,5,1) == #Marked);
        newTimeCalc.PayOnBonus          = (substr(payOnStr,6,1) == #Marked);
        newTimeCalc.PayOnAbsence        = (substr(payOnStr,7,1) == #Marked);

        newTimeCalc.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreDefaultSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the calculation parameters to their default values.
    /// </summary>
    /// <remarks>
    /// Add a post-method handler for restoring the default values for the calculation parameters when extending the <c>JmgProfileSpecTypeEnum</c> enumeration.
    /// </remarks>
    public static void restoreDefaultSetup()
    {

        JmgTimeCalcParmeters    jmgTimeCalcParmeters;

        delete_from jmgTimeCalcParmeters;

        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::Work,          JmgProfileSpecTypeEnum::WorkTime,   'YYNNNNN','YNNNNYN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::Work,          JmgProfileSpecTypeEnum::OverTime,   'YYYNNNN','YYNNNYN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::Work,          JmgProfileSpecTypeEnum::Break,      'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::Work,          JmgProfileSpecTypeEnum::BreakPay,   'NYNNNNN','NNYNNYN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::Work,          JmgProfileSpecTypeEnum::FlexAdd,    'YNNNNYN','NNNNYYN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::Work,          JmgProfileSpecTypeEnum::FlexSub,    'YYNNNNN','YNNNNYN');

        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegal,      JmgProfileSpecTypeEnum::WorkTime,   'NYNYNNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegal,      JmgProfileSpecTypeEnum::OverTime,   'NYNYNNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegal,      JmgProfileSpecTypeEnum::Break,      'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegal,      JmgProfileSpecTypeEnum::BreakPay,   'NYNYNNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegal,      JmgProfileSpecTypeEnum::FlexAdd,    'NYNYNNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegal,      JmgProfileSpecTypeEnum::FlexSub,    'NYNYNNN','NNNNNNY');

        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegal,    JmgProfileSpecTypeEnum::WorkTime,   'NNNNYNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegal,    JmgProfileSpecTypeEnum::OverTime,   'NNNNYNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegal,    JmgProfileSpecTypeEnum::Break,      'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegal,    JmgProfileSpecTypeEnum::BreakPay,   'NNNNYNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegal,    JmgProfileSpecTypeEnum::FlexAdd,    'NNNNYNN','NNNNNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegal,    JmgProfileSpecTypeEnum::FlexSub,    'NNNNYNN','NNNNNNY');

        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegalFlex,  JmgProfileSpecTypeEnum::WorkTime,   'NYNYNNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegalFlex,  JmgProfileSpecTypeEnum::OverTime,   'NYNYNNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegalFlex,  JmgProfileSpecTypeEnum::Break,      'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegalFlex,  JmgProfileSpecTypeEnum::BreakPay,   'NYNYNNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegalFlex,  JmgProfileSpecTypeEnum::FlexAdd,    'NYNYNNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsLegalFlex,  JmgProfileSpecTypeEnum::FlexSub,    'NYNYNNY','NNNYNNY');

        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegalFlex,JmgProfileSpecTypeEnum::WorkTime,   'NNNNYNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegalFlex,JmgProfileSpecTypeEnum::OverTime,   'NNNNYNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegalFlex,JmgProfileSpecTypeEnum::Break,      'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegalFlex,JmgProfileSpecTypeEnum::BreakPay,   'NNNNYNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegalFlex,JmgProfileSpecTypeEnum::FlexAdd,    'NNNNYNY','NNNYNNY');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::AbsIllegalFlex,JmgProfileSpecTypeEnum::FlexSub,    'NNNNYNY','NNNYNNY');

        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::FlexNoWork,    JmgProfileSpecTypeEnum::WorkTime,   'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::FlexNoWork,    JmgProfileSpecTypeEnum::OverTime,   'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::FlexNoWork,    JmgProfileSpecTypeEnum::Break,      'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::FlexNoWork,    JmgProfileSpecTypeEnum::BreakPay,   'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::FlexNoWork,    JmgProfileSpecTypeEnum::FlexAdd,    'NNNNNNN','NNNNNNN');
        JmgTimeCalcParmeters::insertparm(JmgStampTypeSpecEnum::FlexNoWork,    JmgProfileSpecTypeEnum::FlexSub,    'NYNNNNY','NNNYNNN');
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317315</DeveloperDocumentation>
	<FormRef>JmgTimeCalcParmeters</FormRef>
	<Label>@SYS39172</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>modifiedDateTime</TitleField1>
	<TitleField2>modifiedBy</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProfileStampSpec</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>ProfileStampSpec</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileSpecType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StampTypeSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcWorkTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcPayTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcPayOverTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcAbsLegalTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcAbsIllegalTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcFlexAddTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcFlexSubTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnPayTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnOverTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnBreak</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnFlexSubTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnFlexAddTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnBonus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnAbsence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7523</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcWorkTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcPayTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcPayOverTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcAbsLegalTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcAbsIllegalTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcFlexAddTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcFlexSubTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Paid</Name>
			<Label>@SYS38511</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayOnPayTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnOverTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnBreak</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnFlexSubTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnFlexAddTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnBonus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOnAbsence</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProfileType</Name>
			<Label>@SYS38392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileSpecType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RegSpecification</Name>
			<Label>@SYS38622</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StampTypeSpec</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcAbsIllegalTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgCalcAbsIllegalTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcAbsLegalTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgCalcAbsLegalTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcFlexAddTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgCalcFlexAddTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcFlexSubTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgCalcFlexSubTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcPayOverTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgCalcPayOverTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcPayTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgCalcPayTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcWorkTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgCalcWorkTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayOnAbsence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayOnAbsence</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayOnBonus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayOnBonus</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayOnBreak</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayOnBreak</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayOnFlexAddTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayOnFlexAddTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayOnFlexSubTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayOnFlexSubTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayOnOverTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayOnOverTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayOnPayTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayOnPayTime</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfileSpecType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileSpecType</ExtendedDataType>
			<EnumType>JmgProfileSpecTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StampTypeSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgStampTypeSpec</ExtendedDataType>
			<EnumType>JmgStampTypeSpecEnum</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfileStampSpec</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StampTypeSpec</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileSpecType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>