<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxSettlement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayTaxSettlement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>markTransAll</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void markTransAll(
        NoYes _select = NoYes::Yes,
        NoYes _open   = NoYes::Yes)
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    dataSource;
        RPayTaxTransOpen        rPayTaxTransOpen;
        RPayTaxTransSettlement  taxTransSettlement;
        SpecTransManager        specTransManager = SpecTransManager::newRefTableId(this, _open ? tablenum(RPayTaxTransOpen) : tablenum(RPayTaxTransSettlement), false);

        specTransManager.deleteAll();

        if (! _select)
        {
            return;
        }

        query = new Query();

        dataSource = query.addDataSource(tablenum(RPayTaxTransOpen));
        dataSource.addRange(fieldnum(RPayTaxTransOpen, TransDate)).value(queryRange(this.FromDate, this.ToDate));
        dataSource.addRange(fieldnum(RPayTaxTransOpen, BudgetReceiptClassCode)).value(this.BudgetReceiptClassCode);
        dataSource.addRange(fieldnum(RPayTaxTransOpen, BranchId)).value(RPayTaxSettlementTrans::branchIdOrTaxAuthorityRange(this));

        if (_open)
        {
            dataSource.addRange(fieldnum(RPayTaxTransOpen, Closed)).value(queryValue(NoYes::No));
        }
        else
        {
            dataSource = dataSource.addDataSource(tablenum(RPayTaxTransSettlement));
            dataSource.addLink(fieldnum(RPayTaxTransOpen, RecId), fieldnum(RPayTaxTransSettlement, TransRecId));
            dataSource.joinMode(JoinMode::InnerJoin);

            dataSource.addRange(fieldnum(RPayTaxTransSettlement, CanBeReversed)).value(queryValue(NoYes::Yes));
        }

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            if (_open)
            {
                rPayTaxTransOpen = queryRun.get(tablenum(RPayTaxTransOpen));

                specTransManager.insert(rPayTaxTransOpen.DataAreaId,
                                        rPayTaxTransOpen.TableId,
                                        rPayTaxTransOpen.RecId,
                                        rPayTaxTransOpen.Amount - rPayTaxTransOpen.SettleAmount,
                                        CompanyInfoHelper::standardCurrency());
            }
            else
            {
                taxTransSettlement = queryRun.get(tablenum(RPayTaxTransSettlement));

                specTransManager.insert(taxTransSettlement.DataAreaId,
                                        taxTransSettlement.TableId,
                                        taxTransSettlement.RecId,
                                        taxTransSettlement.SettleAmount,
                                        CompanyInfoHelper::standardCurrency());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        RPayTaxTransOpen        rPayTaxTransOpen;
        boolean                 ret;

        ret = super();

        if (ret)
        {
            query = new Query();
            dataSource = query.addDataSource(tablenum(RPayTaxTransOpen));
            dataSource.orderMode(OrderMode::GroupBy);
            dataSource.addSelectionField(fieldnum(RPayTaxTransOpen, RecId), SelectionField::Count);

            range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TransDate));
            range.value(queryRange(this.FromDate, this.ToDate));

            range = dataSource.addRange(fieldnum(RPayTaxTransOpen, BudgetReceiptClassCode));
            range.value(this.BudgetReceiptClassCode);

            range = dataSource.addRange(fieldnum(RPayTaxTransOpen, BranchId));
            range.value(RPayTaxSettlementTrans::branchIdOrTaxAuthorityRange(this));

            queryRun = new QueryRun(query);

            queryRun.next();
            rPayTaxTransOpen = queryRun.get(tablenum(RPayTaxTransOpen));

            if (rPayTaxTransOpen.RecId != 0)
            {
                ret = checkFailed("@RUP3487");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTaxSettlement find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        RPayTaxSettlement taxSettlement;

        if (_recId)
        {
            taxSettlement.selectForUpdate(_forUpdate);

            select firstonly taxSettlement
                index hint recid
                where taxSettlement.RecId == _recId;
        }

        return taxSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBranches</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfroms the view details to branches.
    /// </summary>
    /// <param name="_value">
    /// The value to find.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void jumpRefBranches(str _value)
    {
        Args                    args = new Args();
        MenuFunction            menuFunction;
        Branches_RU             branches;
        QueryRun                queryRun;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(Branches_RU));
        qbds.addRange(fieldNum(Branches_RU, BranchId)).value(_value);
        queryRun = new QueryRun(query);
        queryRun.next();

        branches = queryRun.get(tableNum(Branches_RU));

        menuFunction = new MenuFunction(menuitemdisplaystr(Branches_RU), MenuItemType::Display);

        if (branches)
        {
            args.lookupRecord(branches);
        }

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBudgetReceiptClassCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfroms the view details to budget receipt class codes.
    /// </summary>
    /// <param name="_value">
    /// The value to find.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void jumpRefBudgetReceiptClassCode(str _value)
    {
        Args args = new Args();
        MenuFunction menuFunction;
        PaymentOrderBudgetReceiptClassTable_RU paymentOrderBudgetReceiptClassTable;

        menuFunction = new MenuFunction(menuitemdisplaystr(PaymentOrderBudgetReceiptClassTable_RU), MenuItemType::Display);

        paymentOrderBudgetReceiptClassTable = PaymentOrderBudgetReceiptClassTable_RU::find(_value);

        if (paymentOrderBudgetReceiptClassTable)
        {
            args.lookupRecord(paymentOrderBudgetReceiptClassTable);
        }

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTaxAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfroms the view details to tax authorities.
    /// </summary>
    /// <param name="_value">
    /// The value to find.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public void jumpRefTaxAuthority(str _value)
    {
        Args                    args = new Args();
        MenuFunction            menuFunction;
        VendTable               vendTable;
        QueryRun                queryRun;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(VendTable));
        qbds.addRange(fieldNum(VendTable, AccountNum)).value(_value);
        queryRun = new QueryRun(query);
        queryRun.next();

        vendTable = queryRun.get(tableNum(VendTable));

        menuFunction = new MenuFunction(menuitemdisplaystr(VendTable), MenuItemType::Display);

        if (vendTable)
        {
            args.lookupRecord(vendTable);
        }

        menuFunction.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RPayTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RUP6173</DeveloperDocumentation>
	<FormRef>RPayTaxSettlement</FormRef>
	<Label>@RUP3220</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ExecutedDate</TitleField1>
	<TitleField2>ToDate</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetReceiptClassCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS24097</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parameters</Name>
			<Label>@SYS7764</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExecutedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetReceiptClassCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Branches</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchFilterType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Branches</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FreeTxt</ExtendedDataType>
			<Label>@GLS114705</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BranchFilterType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayBranchFilterType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetReceiptClassCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentOrderBudgetReceiptClassCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExecutedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS95468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Label>@SYS23633</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayTaxVendor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Label>@GLS116460</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS95471</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentOrderBudgetReceiptClassTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentOrderBudgetReceiptClassTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetReceiptClassCode</Name>
					<SourceEDT>PaymentOrderBudgetReceiptClassCode_RU</SourceEDT>
					<Field>BudgetReceiptClassCode</Field>
					<RelatedField>PaymentOrderBudgetReceiptClassCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymentOrderBudgetReceiptClassCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxVendor</Name>
					<Field>TaxVendor</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>