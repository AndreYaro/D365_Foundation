<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustDueDateOnAddressChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date on a <c>CustInvoicetable</c> record to a valid business day.
    /// </summary>
    /// <remarks>
    /// The method is run when the address for a document changes.
    /// </remarks>
    public void adjustDueDateOnAddressChange()
    {
        PaymTerm paymTerm;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        PaymCalendarProcessor paymCalendarProcessor;

        paymTerm = PaymTerm::find(this.Payment);

        if ((paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
            && PaymCalendarRule::existActiveRuleForRuleType(
                PaymCalendarModuleType::Customer,
                PaymCalendarRuleType::ThirdPartyLocation))
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(this);
            paymCalendarProcessor = PaymCalendarProcessor::construct();

            this.DueDate = paymCalendarProcessor.adjustDate(
                this.DueDate,
                paymTerm.CustomerUpdateDueDate,
                custFreeInvoiceCalcTotals);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDueDateOnPaymentMethodChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date on a <c>CustInvoiceTable</c> record to a valid business day.
    /// </summary>
    /// <remarks>
    /// The method is run when the payment method for a document changes.
    /// </remarks>
    public void adjustDueDateOnPaymentMethodChange()
    {
        PaymTerm paymTerm;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        PaymCalendarProcessor paymCalendarProcessor;

        paymTerm = PaymTerm::find(this.Payment);

        if ((paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
            && PaymCalendarCriteriaRule::existForPaymMode(PaymCalendarModuleType::Customer, curExt()))
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(this);
            paymCalendarProcessor = PaymCalendarProcessor::construct();

            this.DueDate = paymCalendarProcessor.adjustDate(
                this.DueDate,
                paymTerm.CustomerUpdateDueDate,
                custFreeInvoiceCalcTotals);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementDocumentTitle_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document title of the invoice agreement.
    /// </summary>
    /// <returns>
    ///     The agreement document title.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display AgreementDocumentTitle agreementDocumentTitle_RU()
    {
        return SalesAgreementHeaderExt_RU::salesAgreementHeader(this.AgreementHeaderExt_RU).DocumentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    AmountMST amountMST(AmountCur amountCur)
    {
        return CurrencyExchangeHelper::mstAmount(amountCur, this.CurrencyCode, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.euroTriangulation()), this.getExchRate(), this.getExchRateSecondary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscDate</Name>
				<Source><![CDATA[
    public void calcCashDiscDate()
    {
        TransDate transDate;

        if (this.CashDiscCode)
        {
            if (!this.CashDiscDate)
            {
                if (this.CashDiscBaseDate)
                {
                    transDate = this.CashDiscBaseDate;
                }
                else
                {
                    transDate = this.DocumentDate ? this.DocumentDate : this.InvoiceDate;
                }
                this.CashDiscDate = CashDisc::cashDiscDate(this.CashDiscCode, transDate);
            }
        }
        else
        {
            this.CashDiscDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscountBaseDate</Name>
				<Source><![CDATA[
    public void calcCashDiscountBaseDate()
    {
        if (this.CashDiscBaseDays)
        {
            this.CashDiscBaseDate = this.DocumentDate ? this.DocumentDate : this.InvoiceDate;

            if (PaymTerm::find(this.Payment).PaymMethod != NetCurrent::COD)
            {
                this.CashDiscBaseDate += this.CashDiscBaseDays;
            }
        }
        else
        {
            this.CashDiscBaseDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the due date for a specified transaction header to due date field.
    /// </summary>
    [Replaceable]
    void calcDue()
    {
        this.DueDate = this.paymentDueDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>transactionBalance</c> value of the free text invoice.
    /// </summary>
    /// <returns>
    /// The <c>transactionBalance</c> value of the free text invoice.
    /// </returns>
    public Amount calcInvoiceBalance()
    {
        CustInvoiceLine custInvoiceLine;
        Amount transactionBalance;

        transactionBalance = (select sum(AmountCur) from custInvoiceLine
                                where custInvoiceLine.ParentRecId == this.RecId).AmountCur;

        return transactionBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCorrect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the correction of an invoice that is either reversed or marked for payment in the <c>SpecTrans</c> table.
    /// </summary>
    /// <returns>
    /// true if the invoice is not reversed and not marked for payment in the <c>SpecTrans</c> table; otherwise, false.
    /// </returns>
    public boolean canCorrect()
    {
        CustTransOpen custTransOpen;
        CustTrans custTrans, custTransOrig;
        boolean ret = true;
        boolean reversed = false;

        custTrans = CustTrans::findFromInvoice(this.InvoiceId, this.InvoiceAccount);

        // Make sure to get the original CustTrans record and verify if it was reversed.
        [custTransOrig, reversed] = TransactionReversalTrans::findCustTransOrig(custTrans);

        if (custTransOrig)
        {
            if (reversed)
            {
                ret = false;
            }
            else
            {
                custTrans = custTransOrig;
            }
        }

        if (ret)
        {
            while select TableId, RecId from custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
            {
                if (SpecTrans::existByRef(custTransOpen.DataAreaId, custTransOpen.TableId, custTransOpen.RecId))
                {
                    ret = false;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the invoice line in order to activate the workflow on <c>CustFreeInvoice</c> form.
    /// </summary>
    /// <param name="workflowType">Workflow type</param>
    /// <returns>
    /// true if at least one invoice line exists and the <c>WorkflowApprovalState</c>
    /// field on <c>CustInvoiceTable</c> is equal to the <c>CustFreeInvoiceWFApprovalState::NotSubmitted</c> enumeration value; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str workflowType = '')
    {
        CustInvoiceLine custInvoiceLine;
        boolean canSubmit;

        if (!this.Posted && this.RecId)
        {
            select firstonly ParentRecId from custInvoiceLine
                where custInvoiceLine.ParentRecId == this.RecId;
            if (custInvoiceLine.ParentRecId != 0)
            {
                canSubmit = true;
            }
        }

        return canSubmit && this.WorkflowApprovalStatus == CustFreeInvoiceWFApprovalStatus::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscBaseDateModified</Name>
				<Source><![CDATA[
    public void cashDiscBaseDateModified()
    {
        this.DueDate = dateNull();
        this.calcDue();
        this.cashDiscCodeModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscCodeModified</Name>
				<Source><![CDATA[
    void cashDiscCodeModified()
    {
        this.CashDiscDate = dateNull();
        this.calcCashDiscDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccount</Name>
				<Source><![CDATA[
    boolean checkAccount()
    {
        CustVendorBlocked blockLevel = CustTable::blocked(this.OrderAccount);

        switch (blockLevel)
        {
            case CustVendorBlocked::All:
                return checkFailed(strFmt("@SYS18389", this.OrderAccount, enum2str(blockLevel)));
            case CustVendorBlocked::Invoice:
                warning(strFmt("@SYS18389", this.OrderAccount, enum2str(blockLevel)));
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    private boolean checkAgreement_RU()
    {
        SalesAgreementHeader salesAgreementHeader;
        boolean ok = true;

        if (CustInvoiceLine::exist(this.RecId))
        {
            ok = checkFailed("@GLS220553");
        }

        if (this.AgreementHeaderExt_RU)
        {
            salesAgreementHeader = SalesAgreementHeaderExt_RU::salesAgreementHeader(this.AgreementHeaderExt_RU);

            if (!salesAgreementHeader.canReleaseAgreement(this.InvoiceDate))
            {
                ok = checkFailed("@SYS103075");
            }

            if (salesAgreementHeader.CustAccount != this.OrderAccount)
            {
                ok = checkFailed(strFmt("@SYS112224",
                    salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
            }

            if (ok && this.InvoiceAccount && salesAgreementHeader.salesAgreementHeaderDefault().CustomerInvoiceAccount != this.InvoiceAccount)
            {
                ok = checkFailed(strFmt("@SYS112224",
                    salesAgreementHeader.SalesNumberSequence, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    boolean checkContactPerson()
    {
        if (this.ContactPersonId)
        {
            if (ContactPerson::find(this.ContactPersonId).getCustAccount() != this.OrderAccount)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether credit check is required for free text invoice or for the customer.
    /// </summary>
    /// <returns>
    /// true when credit check is required for free text invoices or for the customer; otherwise, false.
    /// </returns>
    protected boolean shouldCheckCreditLimit()
    {
        CustParameters custParameters = CustParameters::find();
        return (custParameters.freeInvoiceCheckCreditOnHeader() || this.custTable_InvoiceAccount().MandatoryCreditLimit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the actual credit limit check method if a credit limit check is required.
    /// </summary>
    /// <returns>
    /// Always returns true regardless of whether error or warning is selected.
    /// </returns>
    boolean checkCreditLimit()
    {
        boolean ret = true;

        if (this.shouldCheckCreditLimit())
        {
            CustCreditLimit custCreditLimit = CustCreditLimit::construct(this);
            custCreditLimit.check();
            ret = true; // always allow the user to continue regardless of whether error or warning is selected
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditNoteReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a credit note line is does not contain a reason comment.
    /// </summary>
    /// <remarks>
    /// This method is called when a new credit note is posted.
    /// </remarks>
    public void checkCreditNoteReason()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoPL, #isoHU, #isoCZ, #isoLT, #isoLV, #isoEE])
            && CustParameters::find().CreditNoteReasonReq)
        {
            this.checkCreditNoteReasonServer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditNoteReasonServer</Name>
				<Source><![CDATA[
    private void checkCreditNoteReasonServer()
    {
        CustInvoiceLine custInvoiceLine;

        // Find if a Credit note line is missing the Reason comment
        while select ReasonRefRecId, LineNum from custInvoiceLine
            order by LineNum
            where custInvoiceLine.ParentRecId               == this.RecId &&
                  ((custInvoiceLine.RefReturnInvoiceTrans_W != 0 && custInvoiceLine.CreditNoteInternalRef_PL == 0) ||
                  (custInvoiceLine.RefReturnInvoiceTrans_W  == 0 && custInvoiceLine.CreditNoteInternalRef_PL != 0))
        {
            if (custInvoiceLine.ReasonRefRecId == 0 || ReasonTableRef::find(custInvoiceLine.ReasonRefRecId).ReasonComment == '')
            {
                throw error(strFmt("@GLS220466",custInvoiceLine.LineNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if it is acceptable to change the currency on this free-text invoice.
    /// </summary>
    /// <remarks>
    /// If the currency has been modified, but the currency is not allowed to
    /// change, then a warning message is written to the Infolog and the original
    /// currency is restored.
    ///
    /// In addition to the existing base-Axapta checks, modifying the currency is
    /// disallowed if payments exist and modifying the currency is not allowed for
    /// one or more payments.
    /// </remarks>
    void checkCurrencyCode()
    {
        MCRCustPaymTotals mcrCustPaymTotals;

        if (this)
        {
            // check if the currency is allowed to be changed on payments
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
                && (this.CurrencyCode != this.orig().CurrencyCode))
            {
                mcrCustPaymTotals =
                    MCRCustPaymTotals::construct(this.TableId, this.RecId);

                if (mcrCustPaymTotals && !mcrCustPaymTotals.allowEditCurrency())
                {
                    warning("@MCR10940");

                    this.CurrencyCode = this.orig().CurrencyCode;
                }
            }

            if (this.CurrencyCode != this.orig().CurrencyCode &&
                MarkupTrans::existDifferentCurrency(this.TableId, this.RecId, this.CurrencyCode))
            {
                warning("@SYS24528");

                this.CurrencyCode = this.orig().CurrencyCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount clearingLedgerDimension()
    {
        return CustLedgerAccounts::clearingLedgerDimension(this.InvoiceAccount,
                                                   this.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    ClearingPeriod clearingPeriod()
    {
        return this.custTable_InvoiceAccount().clearingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode _currencyCode, CustInvoiceChangeCurrencyOption custInvoiceChangeCurrencyOption = CustInvoiceChangeCurrencyOption::CalculateWithNewRate)
    {
        CustInvoiceLine custInvoiceLine;
        MarkupTrans markupTrans;

        ttsbegin;

        while select forupdate custInvoiceLine
              where custInvoiceLine.ParentRecId == this.RecId
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                custInvoiceLine.convertCurrencyCode(_currencyCode, this.InvoiceDate, custInvoiceChangeCurrencyOption);
            }
            else
            {
                custInvoiceLine.convertCurrencyCode(_currencyCode, this.InvoiceDate);
            }

            custInvoiceLine.doUpdate();
        }

        while select forupdate markupTrans
              index hint TableRecIdIdx
              where markupTrans.TransTableId == this.TableId &&
                    markupTrans.TransRecId == this.RecId &&
                   !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(_currencyCode, this.InvoiceDate);
            markupTrans.doUpdate();
        }

        CustPaymSched::deleteCustPaymSched(this.TableId, this.RecId);

        this.CurrencyCode = _currencyCode;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    void copyPaymentSched(CustInvoiceJour custInvoiceJour)
    {
        CustPaymSched custPaymSched;
        CustVendPaymSched custVendPaymSched;

        ttsbegin;

        select custPaymSched
        where custPaymSched.ExtTableId == this.TableId &&
              custPaymSched.ExtRecId == this.RecId;

        if (custPaymSched.RecId)
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust, custInvoiceJour);
            custVendPaymSched.copyCustVendPaymSched(custPaymSched);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the invoice will create customer transactions based on <c>SalesPurchOperationTye_BR</c> configuration.
    /// </summary>
    /// <returns>
    /// Returns true is operation type is not set on <c>salesTable</c> or the operation type is configured to create customer transactions.
    /// </returns>
    public boolean createCustTrans_BR()
    {
        return BrazilParameters::isEnabled() == false
            || this.SalesPurchOperationType_BR == 0
            || SalesPurchOperationType_BR::find(this.SalesPurchOperationType_BR).CreateFinancialTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneTimeAccount</Name>
				<Source><![CDATA[
    void createOneTimeAccount()
    {
        this.OrderAccount = CustTable::createOneTimeAccount(this);
        this.initFromCustTable(this.custTable_OrderAccount());

        if (!this.InvoiceAccount)
            this.InvoiceAccount = this.OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    void createPaymentSched(CustFreeInvoiceCalcTotals _custFreeInvoiceCalcTotals = null)
    {
        CustVendPaymSched custVendPaymSched;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;

        // <GIN>
        CustInvoiceJour custInvoiceJourLoc;
        // </GIN>
        ;

        if (!_custFreeInvoiceCalcTotals)
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(this);
            custFreeInvoiceCalcTotals.calc();
        }
        else
        {
            custFreeInvoiceCalcTotals = _custFreeInvoiceCalcTotals;
        }

        if (this.hasLines())
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Cust,this);
            custVendPaymSched.setCustFreeInvoiceCalcTotals(custFreeInvoiceCalcTotals);

            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                select RecId from custInvoiceJourLoc
                    where custInvoiceJourLoc.InvoiceId == this.InvoiceId;
                if (custInvoiceJourLoc.RecId && PaymSched::find(this.PaymentSched).PaymBy != PaymSchedBy::AmountByPayment)
                {
                    custVendPaymSched.parmCheckPaymSchedule_IN(true);
                }
            }
            // </GIN>
            custVendPaymSched.createPaymSched(PaymSched::find(this.PaymentSched));

            if (CFMParameters::isModuleEnabled())
            {
                CFMPlannedPaymentCalc cfmPlannedPaymentCalc = CFMPlannedPaymentCalc::construct(this);

                if (cfmPlannedPaymentCalc)
                {
                    cfmPlannedPaymentCalc.calc();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote_W</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public boolean creditNote_W()
    {
        CustInvoiceLine invoiceLine;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU,#isoPL,#isoHU,#isoCZ,#isoLT,#isoLV,#isoEE]))
        {
            select firstonly RecId from invoiceLine
                where invoiceLine.ParentRecId == this.RecId &&
                      invoiceLine.RefReturnInvoiceTrans_W;
        }

        return invoiceLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour</Name>
				<Source><![CDATA[
    CustInvoiceJour custInvoiceJour()
    {
        CustInvoiceJour custInvoiceJour;
        if (this.InvoiceId)
        {
            select firstOnly custInvoiceJour
                    where custInvoiceJour.InvoiceId == this.InvoiceId &&
                          custInvoiceJour.InvoiceDate == this.InvoiceDate &&
                          custInvoiceJour.NumberSequenceGroup == this.NumberSequenceGroup;
        }
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceTable_W</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>CustInvoiceTable_W</c> associated with the current record.
    /// </returns>
    public CustInvoiceTable_W custInvoiceTable_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceTable_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTableExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>CustInvoiceTableExtensionTH</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>CustInvoiceTableExtensionTH</c> associated with the current record.
    /// </returns>
    public CustInvoiceTableExtensionTH custInvoiceTableExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceTableExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerName</Name>
				<Source><![CDATA[
    display CustName customerName()
    {
        return this.partyTable_CustAccount().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    CustTable custTable_InvoiceAccount(boolean update = false)
    {
        return CustTable::find(this.InvoiceAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_OrderAccount</Name>
				<Source><![CDATA[
    CustTable custTable_OrderAccount(boolean update = false)
    {
        return CustTable::find(this.OrderAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    // F2554, F423 Overridden to cancel all payments associated with this free-text invoice.
    // Cancelling the payments will in most cases result in deleting them. Any payments
    // that are not deleted will be set to have a 0.0 amount.
    public void delete()
    {
        MCRCustPaymTable mcrCustPaymTable;
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        ttsbegin;

        // cancel all payments
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            while select * from mcrCustPaymTable
                where mcrCustPaymTable.RefTableId == this.TableId
                      && mcrCustPaymTable.RefRecId == this.RecId
            {
                if (!mcrCustPaymTable.isCancelPaymAllowed())
                {
                    throw error("@MCR11122");
                }

                MCRCustPaymTable::cancelPaym(mcrCustPaymTable.RecId);
            }
        }

        SpecTransManager::newFromSpec(this).deleteAll();

        TradeBLWIJournalPurposeCodes::deleteRecord(this.RecId, TradeBLWITypeOfForm::CustFreeInvoice);

        if (isConfigurationkeyEnabled(configurationKeyNum(FreeTextInvoiceCorrection)))
        {
            CustRelatedInvoice::deleteOriginalInvoiceAssociation(this.RecId);
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
        }

        TaxUncommitted::deleteForDocumentHeader(tableNum(CustInvoiceTable), this.RecId);

        if (CustInvoiceTableNoDeleteWhenSourceDocAccEventPostedFlight::instance().isEnabled())
        {
            if (this.hasJournalizedOrCompleteAccountingEvent(this.SourceDocumentHeader))
            {
                SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

                throw error(strFmt("@SYS99087", sourceDocumentHeader.TypeEnumName));
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasJournalizedOrCompleteAccountingEvent</Name>
				<Source><![CDATA[
    private boolean hasJournalizedOrCompleteAccountingEvent(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        AccountingEvent accountingEvent;

        select firstonly recId from accountingEvent
            where (accountingEvent.State == AccountingEventState::Journalized
            || accountingEvent.State == AccountingEventState::Complete)
            && accountingEvent.SourceDocumentHeader == _sourceDocumentHeaderRecId;

        return accountingEvent.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecurrenceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete a singular recurrence invoice.
    /// </summary>
    /// <returns>
    /// A boolean value to represent that the recurrence invoice was deleted.
    /// </returns>
    [SysObsolete('This is no longer being used for the deletion of RecurrenceInvoice Records.', false, 30\6\2020)]
    public boolean deleteRecurrenceInvoice()
    {
        boolean isDeleted = true;
        RecurrenceInvoice recurrenceInvoice;

        delete_from recurrenceInvoice
            where recurrenceInvoice.CustInvoiceTable == this.RecId;
            
        return isDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    SalesEndDiscPct discPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCorrectionState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>CustFreeInvoiceCorrectionState</c> enum value that represents the correction state of the invoice.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The <c>CustInvoiceTable</c> table buffer.
    /// </param>
    /// <returns>
    /// The <c>CustFreeInvoiceCorrectionState</c> enum value that represents the correction state of the invoice.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display CustFreeInvoiceCorrectionState displayCorrectionState(CustInvoiceTable _custInvoiceTable)
    {
        CustRelatedInvoice custRelatedInvoice;
        CustFreeInvoiceCorrectionState invoiceState = '';

        if (isConfigurationkeyEnabled(configurationKeyNum(FreeTextInvoiceCorrection))
        // <GBR>
        || BrazilParameters::isEnabled()
        // </GBR>
        )
        {
            select RecId, InvoiceAssociationType from custRelatedInvoice
                where custRelatedInvoice.CustInvoice == _custInvoiceTable.RecId;

            if (custRelatedInvoice.RecId)
            {
                switch (custRelatedInvoice.InvoiceAssociationType)
                {
                    case InvoiceAssociationType::CorrectedInvoice:
                        invoiceState = "@SYS23175";
                        break;

                    case InvoiceAssociationType::OriginalInvoice:
                        invoiceState = "@SYS108913";
                        break;

                    case InvoiceAssociationType::AdjustingInvoice:
                        invoiceState = "@SYS300220";
                        break;
                }
            }
        }

        return invoiceState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustomerReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer reference for the order
    /// </summary>
    /// <returns>
    /// A customer reference.
    /// </returns>
    display CustomerReference displayCustomerReference()
    {
        CustomerReference custReference;

        if (hasFieldAccess(tableNum(CustInvoiceTable), fieldNum(CustInvoiceTable, CustomerRef)))
        {
            custReference = this.CustomerRef;
        }

        return custReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExchRate</Name>
				<Source><![CDATA[
    display CustExchRate displayExchRate(date _date = this.getExchangeRateDate())
    {
        #isoCountryRegionCodes

        if (this.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ,#isoEE,#isoHU,#isoLT,#isoLV,#isoPL,#isoRU]))
            {
                if (this.ExchRate_W)
                {
                    return exchangeRateHelper.displayStoredExchangeRate(this.ExchRate_W);
                }
            }

            return exchangeRateHelper.displayStoredExchangeRate(this.getExchRate(_date));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExchRateSecondary</Name>
				<Source><![CDATA[
    display ExchrateSecondary displayExchRateSecondary(date _date = this.getExchangeRateDate())
    {
        ExchangeRateHelper exchangeRateHelper;

        if (this.CurrencyCode)
        {
            exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
            return exchangeRateHelper.displayStoredExchangeRate(this.getExchRateSecondary(_date));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice account of the customer.
    /// </summary>
    /// <returns>
    /// An invoice account of the customer.
    /// </returns>
    display CustomerInvoiceAccount displayInvoiceAccount()
    {
        CustomerInvoiceAccount custInvoiceAccount;

        if (hasFieldAccess(tableNum(CustInvoiceTable), fieldNum(CustInvoiceTable, InvoiceAccount)))
        {
            custInvoiceAccount = this.InvoiceAccount;
        }

        return custInvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAccountName</Name>
				<Source><![CDATA[
    display DirPartyName displayInvoiceAccountName()
    {
        return CustTable::find(this.InvoiceAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total invoice amount for the required action on the <c>CustInvoiceTable</c> record.
    /// </summary>
    /// <returns>
    /// A string that contains the total invoice amount for the required action.
    /// </returns>
    display InvoiceAmountMST displayInvoiceAmount()
    {
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        InvoiceAmountMST invoiceAmount;
        container invoiceTotal;

        if (hasFieldAccess(tableNum(CustInvoiceLine), fieldNum(CustInvoiceLine, AmountCur)))
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(this);
            custFreeInvoiceCalcTotals.calc();
            invoiceTotal = custFreeInvoiceCalcTotals.displayFields();

            invoiceAmount = conPeek(invoiceTotal, CustFreeInvoiceCalcTotals::posTotalAmount());
        }

        return invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceLineDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of the customer invoice in the <c>CustInvoiceLine</c> record.
    /// </summary>
    /// <returns>
    /// A string that contains the description of the customer invoice line.
    /// </returns>
    display Description displayInvoiceLineDescription()
    {
        CustInvoiceLine custInvoiceLine;

        if (hasFieldAccess(tableNum(CustInvoiceLine), fieldNum(CustInvoiceLine, Description), AccessType::View))
        {
            select Description from custInvoiceLine
                where custInvoiceLine.ParentRecId == this.RecId;
        }

        return custInvoiceLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMostRecentComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last comment that was added to the task that was assigned to the
    /// <c>CustInvoiceTable</c> record.
    /// </summary>
    /// <returns>
    /// A string that contains the most recent comment that was added to the task for the
    /// <c>CustInvoiceTable</c> record.
    /// </returns>
    display CustFreeInvoiceMostRecentComment displayMostRecentComment()
    {
        WorkflowTrackingCommentTable workflowTrackingCommentTable;
        WorkflowWorkItemTable workflowWorkItemTable;
        WorkflowTrackingTable workflowTrackingTable;
        HcmWorker hcmWorker;
        CustFreeInvoiceMostRecentComment comment;
        UserInfo userInfo;
        Name name;

        if (hasFieldAccess(tableNum(WorkflowTrackingCommentTable), fieldNum(WorkflowTrackingCommentTable, Comment), AccessType::View))
        {
            select firstonly workflowWorkItemTable
                    order by CreatedDateTime desc
                    where workflowWorkItemTable.RefTableId == this.TableId &&
                            workflowWorkItemTable.RefRecId == this.RecId &&
                            workflowWorkItemTable.CompanyId == this.DataAreaId &&
                            workflowWorkItemTable.Status == WorkflowWorkItemStatus::Completed;

            workflowTrackingTable = Workflow::findLastTrackingRecordForWorkItem(workflowWorkItemTable);
            workflowTrackingCommentTable = WorkflowTrackingCommentTable::findTrackingId(workflowTrackingTable.TrackingId);

            hcmWorker = HcmWorker::find(DirPersonUserEx::worker(DirPersonUser::find(workflowTrackingTable.User)));
            if (hcmWorker)
            {
                name = strFmt("%1 (%2) : ", hcmWorker.name(), hcmWorker.PersonnelNumber);
            }
            else
            {
                select firstonly Name from userInfo where userInfo.Id == workflowTrackingTable.User;
                name = strFmt("%1 (%2) : ", userInfo.Name, workflowTrackingTable.User);
            }
            comment = strFmt("%1",datetime2str(DateTimeUtil::applyTimeZoneOffset(workflowTrackingCommentTable.CreatedDateTime, DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll)) + ' ';
            comment += name;
            comment += workflowTrackingCommentTable.Comment;
        }
        return comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequiredAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required action for the task that is assigned to the <c>CustInvoiceTable</c> record.
    /// </summary>
    /// <returns>
    /// A string that contains the required action.
    /// </returns>
    display CustFreeInvoiceRequiredAction displayRequiredAction()
    {
        WorkflowWorkItemTable workflowWorkItemTable;
        CustFreeInvoiceRequiredAction requiredAction;

        if (hasFieldAccess(tableNum(WorkflowWorkItemTable), fieldNum(WorkflowWorkItemTable, RecId), AccessType::View))
        {
            select firstonly RecId from workflowWorkItemTable
                    where workflowWorkItemTable.RefTableId == this.TableId &&
                            workflowWorkItemTable.RefRecId == this.RecId &&
                            workflowWorkItemTable.CompanyId == this.DataAreaId &&
                            workflowWorkItemTable.UserId == curUserId() &&
                            workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;
        }

        if (workflowWorkItemTable.RecId)
        {
            switch (this.WorkflowApprovalState)
            {
                case CustFreeInvoiceWFApprovalState::ChangeRequest :
                    requiredAction = "@SYS109048";
                    break;

                case CustFreeInvoiceWFApprovalState::PendingApproval :
                    requiredAction = "@SYS109902";
                    break;

                case CustFreeInvoiceWFApprovalState::PendingComplete :
                    requiredAction = "@SYS112063";
                    break;

                default :
                    requiredAction = "@SYS104366";
            }
        }

        return requiredAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequiredActionDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the due date for the required action on the <c>CustInvoiceTable</c> record.
    /// </summary>
    /// <returns>
    /// A string that contains the due date for the required action.
    /// </returns>
    display CustFreeInvoiceRequiredActionDueDate displayRequiredActionDueDate()
    {
        WorkflowWorkItemTable workflowWorkItemTable;
        CustFreeInvoiceRequiredActionDueDate dueDateStr;

        if (hasFieldAccess(tableNum(WorkflowWorkItemTable), fieldNum(WorkflowWorkItemTable, DueDateTime), AccessType::View))
        {
            select firstonly DueDateTime from workflowWorkItemTable
                    where workflowWorkItemTable.RefTableId == this.TableId &&
                            workflowWorkItemTable.RefRecId == this.RecId &&
                            workflowWorkItemTable.CompanyId == this.DataAreaId &&
                            workflowWorkItemTable.UserId == curUserId() &&
                            workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;
        }

        if (workflowWorkItemTable.DueDateTime != DateTimeUtil::minValue())
        {
            dueDateStr = strFmt("%1",datetime2str(DateTimeUtil::applyTimeZoneOffset(workflowWorkItemTable.DueDateTime, DateTimeUtil::getUserPreferredTimeZone()),DateFlags::FormatAll));
        }

        return dueDateStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowSubmitter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the user who submitted the invoice to workflow.
    /// </summary>
    /// <returns>
    /// A string that contains the user who submitted the invoice to workflow.
    /// </returns>
    display WorkflowSubmittingUser displayWorkflowSubmitter()
    {
        WorkflowTrackingStatusTable workflowTrackingStatusTable;
        WorkflowSubmittingUser workflowSubmittingUser;

        if (hasFieldAccess(tableNum(WorkflowTrackingStatusTable), fieldNum(WorkflowTrackingStatusTable, Originator), AccessType::View))
        {
            select Originator from workflowTrackingStatusTable
                where workflowTrackingStatusTable.ContextTableId == this.TableId &&
                    workflowTrackingStatusTable.ContextRecId == this.RecId;

            workflowSubmittingUser = SysWorkflowHelper::getDirPartyNameFromUserId(workflowTrackingStatusTable.Originator);
        }

        return workflowSubmittingUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispVATRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method for customer VAT registration number.
    /// </summary>
    /// <returns>
    /// display customer VAT registration number.
    /// </returns>
    public display TaxRegistrationNumber dispVATRegistrationNum()
    {
        CompanyInfoExtension_CN companyInfoExtensionCN;

        companyInfoExtensionCN = CompanyInfoExtension_CN::findByCompany(CompanyInfo::current());

        if (companyInfoExtensionCN.TaxRegistrationType)
        {
            return TaxRegistration::getTaxRegistrationNumberFromCust(this.OrderAccount, this.InvoiceDate, companyInfoExtensionCN.TaxRegistrationType);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    edit ContactPersonName editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPerson contactPerson;
        ContactPersonId contactPersonId;
        if (_set)
        {
            if (_name)
            {
                contactPersonId = this.ContactPersonId;
                contactPerson = ContactPerson::find(_name);
                this.ContactPersonId = contactPerson.ContactPersonId;

                if (this.ContactPersonId)
                {
                    _name = ContactPerson::find(this.ContactPersonId).personName();
                }
                else
                {
                    DirPartyTable partyTable;
                    CustTable     custTable;

                    select firstonly ContactPersonId from contactPerson
                        join TableId from custTable
                        where custTable.AccountNum          == this.OrderAccount
                           && contactPerson.ContactForParty == custTable.Party
                        join Name from partyTable
                        where partyTable.RecId == contactPerson.Party &&
                              partyTable.Name like _name;

                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId = contactPerson.ContactPersonId;
                        _name=partyTable.Name;
                    }
                }
            }
            else
            {
                this.ContactPersonId = '';
            }
            if (contactPersonId != this.ContactPersonId)
            {
                if (this.checkContactPerson())
                {
                    if (FormDataUtil::getFormDataSource(this))
                    {
                        FormDataUtil::getFormDataSource(this).refresh();
                    }
                }
                else
                {
                    this.ContactPersonId = contactPersonId;
                }
            }
        }
        else
        {
            _name = ContactPerson::find(this.ContactPersonId).personName();
        }
        return _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate_W</Name>
				<Source><![CDATA[
    edit CustExchRate editExchRate_W(boolean _set, CustExchRate _exchRate)
    {
        CustExchRate ret = 0;
        ExchangeRateHelper exchangeRateHelper;

        if (this.CurrencyCode)
        {
            exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

            if (_set)
            {
                this.ExchRate_W = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
            }

            if (this.ExchRate_W)
            {
                ret = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate_W);
            }
            else
            {
                ret = exchangeRateHelper.displayStoredExchangeRate(ExchangeRateHelper::exchRate(this.CurrencyCode, this.InvoiceDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOrderAccountName</Name>
				<Source><![CDATA[
    edit DirPartyName editOrderAccountName(boolean set, DirPartyName _name)
    {
        DirPartyTable dirPartyTable;

        // If this is being set, it's a One-time customer.
        if (set && _name != '')
        {
            dirPartyTable = DirPartyTable::findRec(this.custTable_OrderAccount().Party, true);
            dirPartyTable.Name = _name;
            dirPartyTable.update();

            //Set the Delivery Name so CustomerEntity.initFromCustInvoiceTable handles Name properly
            this.Name = _name;
        }

        return this.custTable_OrderAccount().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean set, ReasonCode _reasonCode)
    {
        ReasonCode reasonCode = strLRTrim(_reasonCode);
        RefRecId originalReasonRefRecID;
        FormDataSource formCustInvoiceTable;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.CorrectionReasonCode == 0)
            {
                this.CorrectionReasonCode = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode)
                {
                    //The reasonCode value is not blank.
                    // Save the current ReasonRefRecID for comparison.
                    originalReasonRefRecID = this.CorrectionReasonCode;
                    this.CorrectionReasonCode = ReasonTableRef::updateCode(reasonCode, this.CorrectionReasonCode);

                    if (this.CorrectionReasonCode == originalReasonRefRecID)
                    {
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current FormDataSource and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        formCustInvoiceTable = FormDataUtil::getFormDataSource(this);
                        if (formCustInvoiceTable)
                        {
                            formCustInvoiceTable.forceWrite(true);
                        }
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.CorrectionReasonCode = ReasonTableRef::updateCode(reasonCode, this.CorrectionReasonCode);
                }
            }

            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reasonCode will result in a blank comment because a blank reasonCode
            // will return an empty reasonTable buffer.

            this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.CorrectionReasonCode).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCodeForUnrealizedVAT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets and sets the reason code.
    /// </summary>
    /// <param name="set">
    ///     true if the reason code is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonCode">
    ///     The new reason code when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    ///     The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCodeForUnrealizedVAT(boolean set, ReasonCode _reasonCode)
    {
        ReasonCode reasonCodeLocal;
        CustInvoiceTableExtensionTH custInvoiceTableExtensionTH = this.custInvoiceTableExtensionTH();
        reasonCodeLocal = custInvoiceTableExtensionTH.editReasonCodeForUnrealizedVAT(set, _reasonCode);

        this.SysExtensionSerializerMap::packExtensionTable(custInvoiceTableExtensionTH);
        return reasonCodeLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean set, ReasonComment _reasonComment)
    {
        ReasonComment reasonComment = _reasonComment;

        if (set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.CorrectionReasonCode == 0)
            {
                this.CorrectionReasonCode = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
                this.CorrectionReasonCode = ReasonTableRef::updateComment(reasonComment, this.CorrectionReasonCode);
            }
        }
        else
        {
            reasonComment = ReasonTableRef::find(this.CorrectionReasonCode).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>euroTriangulation</Name>
				<Source><![CDATA[
    display EUROTriangulation euroTriangulation(date _date = this.InvoiceDate)
    {
        return Currency::triangulation(this.CurrencyCode, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    [SysObsolete('Please use the getExchRate() method for exchange rates and the displayExchRate() method for display exchange rates', false, 1\5\2020)]
    display CustExchRate exchRate(date _date = this.getExchangeRateDate())
    {
        return this.getExchRate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an exchange rate information.
    /// </summary>
    /// <param name = "_date">
    /// A date used to calculate exchange rate.
    /// </param>
    /// <returns>
    /// The exchange rate.
    /// </returns>
    public CustExchRate getExchRate(date _date = this.getExchangeRateDate())
    {
        #isoCountryRegionCodes

        if (this.CurrencyCode)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ,#isoEE,#isoHU,#isoLT,#isoLV,#isoPL,#isoRU]))
            {
                return this.ExchRate_W ? this.ExchRate_W : ExchangeRateHelper::exchRate(this.CurrencyCode, _date);
            }
            else
            {
                return ExchangeRateHelper::exchRate(this.CurrencyCode, _date);
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    [SysObsolete('Please use the getExchRateSecondary() method for exchange rates and the displayExchRateSecondary() method for display exchange rates', false, 1\5\2020)]
    display ExchrateSecondary exchRateSecondary(date _date = this.getExchangeRateDate())
    {
        return this.getExchRateSecondary(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the secondary exchange rate.
    /// </summary>
    /// <param name = "_date">
    /// A date used to calculate secondary exchange rate.
    /// </param>
    /// <returns>
    /// The secondary exchange rate.
    /// </returns>
    public CustExchRate getExchRateSecondary(date _date = this.getExchangeRateDate())
    {
        if (this.CurrencyCode)
        {
            return ExchangeRateHelper::exchRateSecond(this.CurrencyCode, _date);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    [SysObsolete('Please use the getReportingCurrencyExchRate method for exchange rates and the displayExchRateForReportingCurrency method for display exchange rates', false, 1\5\2020)]
    display ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = this.getExchangeRateDate())
    {
        return this.getReportingCurrencyExchRate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate.
    /// </summary>
    /// <param name = "_date">
    /// A date used to calculate exchange rate.
    /// </param>
    /// <returns>
    /// The reporting currency exchange rate.
    /// </returns>
    public CustExchRate getReportingCurrencyExchRate(date _date = this.getExchangeRateDate())
    {
        if (this.CurrencyCode)
        {
            Ledger ledger = Ledger::findByLegalEntity(this.companyInfo().RecId);
            if (ledger.ReportingCurrency)
            {
                ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(ledger.RecId, this.CurrencyCode, _date);
                helper.parmToCurrency(ledger.ReportingCurrency);
                helper.parmExchangeRateTypeRecId(ledger.ReportingCurrencyExchangeRateType);

                return helper.getExchangeRate1();
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRateSecondary</Name>
				<Source><![CDATA[
    [SysObsolete('Please use the getReportingCurrencyExchRateSecondary method for exchange rates and the displayExchRateForReportingCurrencySecondary method for display exchange rates', false, 1\5\2020)]
    display ReportingCurrencyExchRateSecondary reportingCurrencyExchangeRateSecondary(date _date = this.getExchangeRateDate())
    {
        return this.getReportingCurrencyExchRateSecondary(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency secondary exchange rate.
    /// </summary>
    /// <param name = "_date">
    /// A date used to calculate secondary exchange rate.
    /// </param>
    /// <returns>
    /// The reporting currency secondary exchange rate.
    /// </returns>
    public CustExchRate getReportingCurrencyExchRateSecondary(date _date = this.getExchangeRateDate())
    {
        if (this.CurrencyCode)
        {
            Ledger ledger = Ledger::findByLegalEntity(this.companyInfo().RecId);
            if (ledger.ReportingCurrency)
            {
                ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(ledger.RecId, this.CurrencyCode, _date);
                helper.parmToCurrency(ledger.ReportingCurrency);
                helper.parmExchangeRateTypeRecId(ledger.ReportingCurrencyExchangeRateType);

                return helper.getExchangeRate2();
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTxt</Name>
				<Source><![CDATA[
    display Description exchRateTxt()
    {
        return ExchangeRateHelper::exchRateTxt(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode, this.getExchRateSecondary(this.InvoiceDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTxtForReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the currencies used to calculate the reporting exchange rate for the transaction.
    /// </summary>
    /// <returns>
    /// Returns the exchange rate text for reporting currency.
    /// </returns>
    public display Description exchRateTxtForReportingCurrency()
    {
        Description exchRateTxtReporting;

        if (Ledger::isReportingCurrencyDefined())
        {
            exchRateTxtReporting = ExchangeRateHelper::exchRateTxtForReportingCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode, this.displayExchRateSecondForReportingCurrency(this.InvoiceDate));
        }

        return exchRateTxtReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInvoice4Paym_RU</Name>
				<Source><![CDATA[
    boolean existInvoice4Paym_RU()
    {
        CustInvoice4PaymFTILink custInvoice4PaymFTILink;

        select firstonly RecId from custInvoice4PaymFTILink
            where custInvoice4PaymFTILink.CustInvoiceTable == this.RecId;

        return custInvoice4PaymFTILink.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal establishment for the current customer invoice.
    /// </summary>
    /// <returns>
    /// A <c>FiscalEstablishment_BR</c> table buffer.
    /// </returns>
    public FiscalEstablishment_BR fiscalEstablishment()
    {
        return FiscalEstablishment_BR::find(this.FiscalEstablishment_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public AccountingDate parmExchangeRateDate()
    {
        return this.getExchangeRateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appropriate date for the determination of exchange rate.
    /// </summary>
    /// <param name="_date">
    /// The default date if the configured date has not been set.
    /// </param>
    /// <returns>
    /// A date used to calculate an exchange rate.
    /// </returns>
    #ISOCountryRegionCodes
    public AccountingDate getExchangeRateDate(date _date = dateNull())
    {
        AccountingDate exchangeRateDate;

        // check if this is an adjusting invoice, and if it is then we need to use the corrected invoice's exchange rate date
        var correctedInvoice = CustRelatedInvoice::findParentByCustInvoiceInvoiceType(this.RecId, InvoiceAssociationType::AdjustingInvoice);

        if (correctedInvoice)
        {
            if (CustInvoicePickExchangeRateDateFromOriginalInvoiceFlight::instance().isEnabled())
            {
                if (CustInvoiceCancellingExchangeRateFlight::instance().isEnabled())
                {
                    exchangeRateDate = correctedInvoice.getExchangeRateDate(correctedInvoice.InvoiceDate);
                }
                else
                {
                    exchangeRateDate = correctedInvoice.getExchangeRateDate(_date == dateNull() ? correctedInvoice.InvoiceDate : _date);
                }
            }
            else
            {
                exchangeRateDate = correctedInvoice.getExchangeRateDate(_date == dateNull() ? this.InvoiceDate : _date);
            }
        }
        else if (this.creditNote_W())
        {
            exchangeRateDate = this.getExchangeRateDateForCreditNote(_date);
        }
        else
        {
            exchangeRateDate = this.getExchangeRateDateByDateOfExchangeRateParameter(_date);
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDateByDateOfExchangeRateParameter</Name>
				<Source><![CDATA[
    private AccountingDate getExchangeRateDateByDateOfExchangeRateParameter(date _date)
    {
        AccountingDate exchangeRateDate;

        switch (SalesParameters::find().DateOfExchRate_W)
        {
            case DateOfExchRate_W::DateOfVATRegister:
                exchangeRateDate = this.VatDueDate_W;
                break;

            case DateOfExchRate_W::DocumentDate:
                exchangeRateDate = this.DocumentDate;
                break;

            case DateOfExchRate_W::DocumentDateEU:
                if (TaxGroupHeading::find(this.TaxGroup).euTrade_W)
                {
                    exchangeRateDate = this.DocumentDate;
                }
                else
                {
                    exchangeRateDate = this.getExchangeRateDateDefault(_date);
                }
                break;

            case DateOfExchRate_W::Auto:
                exchangeRateDate = DateOfExchRateAutoDetermination_W::getDate(this);
                break;

            default:
                exchangeRateDate = this.getExchangeRateDateDefault(_date);
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDateDefault</Name>
				<Source><![CDATA[
    private AccountingDate getExchangeRateDateDefault(date _date)
    {
        AccountingDate exchangeRateDate;

        if (_date)
        {
            exchangeRateDate = _date;
        }
        else
        {
            exchangeRateDate = this.InvoiceDate ? this.InvoiceDate : (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) ? DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) : dateNull());
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDateForCreditNote</Name>
				<Source><![CDATA[
    private AccountingDate getExchangeRateDateForCreditNote(date _date)
    {
        CustInvoiceTable custInvoiceTable;
        CustInvoiceLine invoiceLine;
        CustInvoiceTrans custInvoiceTrans;

        select firstonly RecId from invoiceLine
            where invoiceLine.ParentRecId == this.RecId
            join RecId from custInvoiceTrans
                where custInvoiceTrans.RecId == invoiceLine.RefReturnInvoiceTrans_W
            join custInvoiceTable
                where custInvoiceTable.SalesId == custInvoiceTrans.SalesId
                    && custInvoiceTable.InvoiceId == custInvoiceTrans.InvoiceId
                    && custInvoiceTable.InvoiceDate == custInvoiceTrans.InvoiceDate
                    && custInvoiceTable.numberSequenceGroup == custInvoiceTrans.NumberSequenceGroup;

        AccountingDate exchangeRateDate = custInvoiceTable.getExchangeRateDateByDateOfExchangeRateParameter(_date);

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCanceledRelatedInvoice_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if there is a Canceled invoice related to the current one.
    /// </summary>
    /// <returns>
    /// True if there is a canceled related invoice; otherwise, false.
    /// </returns>
    public boolean hasCanceledRelatedInvoice_BR()
    {
        CustRelatedInvoice custRelatedInvoice;

        select count(RecId) from custRelatedInvoice
            where custRelatedInvoice.OriginalCustInvoice == this.RecId &&
                    custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::AdjustingInvoice;

        return custRelatedInvoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines are associated with the invoice.
    /// </summary>
    /// <returns>true if there are any lines</returns>
    public boolean hasLines()
    {
        CustInvoiceLine custInvoiceLine;

        select firstonly RecId from custInvoiceLine
              where custInvoiceLine.ParentRecId == this.RecId;

        return (custInvoiceLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesOrCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines or miscellaneous charges are associated with the invoice.
    /// </summary>
    /// <returns>
    /// true if any lines or miscellaneous charges exist; otherwise, false.
    /// </returns>
    public boolean hasLinesOrCharges()
    {
        MarkupTrans markupTrans;

        if (this.hasLines())
        {
            return true;
        }

        select count(RecId) from markupTrans
              index hint TableRecIdIdx
              where markupTrans.TransTableId == this.TableId &&
                    markupTrans.TransRecId == this.RecId &&
                   !markupTrans.IsDeleted;

        if (markupTrans.RecId > 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithoutRefrence_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines don't have original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines don't have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithoutRefrence_MY()
    {
        CustInvoiceLine custInvoiceLine;
        CustInvoiceLine_W custInvoiceLine_W;

        select firstOnly custInvoiceLine
            where custInvoiceLine.ParentRecId == this.RecId
            notexists join custInvoiceLine_W
            where custInvoiceLine_W.CustInvoiceLine == custInvoiceLine.RecId
               && custInvoiceLine_W.RefInvoiceID_MY != "";
        if (custInvoiceLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithRefrence_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any lines have original invoice.
    /// </summary>
    /// <returns>
    /// true if any lines have original invoice; otherwise, false.
    /// </returns>
    public boolean hasLinesWithRefrence_MY()
    {
        CustInvoiceLine custInvoiceLine;
        CustInvoiceLine_W custInvoiceLine_W;

        select firstOnly custInvoiceLine
            where custInvoiceLine.ParentRecId == this.RecId
            exists join custInvoiceLine_W
            where custInvoiceLine_W.CustInvoiceLine == custInvoiceLine.RecId
               && custInvoiceLine_W.RefInvoiceID_MY != "";
        if (custInvoiceLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax information has changed.
    /// </summary>
    /// <param name="_originalCustInvoiceTable">
    /// The original customer invoice table record.
    /// </param>
    /// <param name="_dlvLocationId">
    /// The location ID of the delivery address.
    /// </param>
    /// <param name="_origDlvLocationId">
    /// The location ID of the original delivery address.
    /// </param>
    /// <returns>
    /// true if the tax information has changed; otherwise, false.
    /// </returns>
    public boolean hasTaxChanged(CustInvoiceTable _originalCustInvoiceTable, LogisticsLocationRecId _dlvLocationId = 0, LogisticsLocationRecId _origDlvLocationId = 0)
    {
        return
            (this.InclTax != _originalCustInvoiceTable.InclTax) ||
            (this.AccountingDistributionTemplate != _originalCustInvoiceTable.AccountingDistributionTemplate) ||
            (this.CashDiscCode != _originalCustInvoiceTable.CashDiscCode) ||
            (this.CashDiscPercent != _originalCustInvoiceTable.CashDiscPercent) ||
            (this.CurrencyCode != _originalCustInvoiceTable.CurrencyCode) ||
            (this.DlvTerm != _originalCustInvoiceTable.DlvTerm) ||
            (this.DocumentDate != _originalCustInvoiceTable.DocumentDate) ||
            (this.InvoiceAccount != _originalCustInvoiceTable.InvoiceAccount) ||
            (this.InvoiceDate != _originalCustInvoiceTable.InvoiceDate) ||
            (this.OrderAccount != _originalCustInvoiceTable.OrderAccount) ||
            (this.Payment != _originalCustInvoiceTable.Payment) ||
            (this.PostingProfile != _originalCustInvoiceTable.PostingProfile) ||
            (this.TaxGroup != _originalCustInvoiceTable.TaxGroup) ||
            (this.TaxItemGroup != _originalCustInvoiceTable.TaxItemGroup) ||
            (this.OverrideSalesTax != _originalCustInvoiceTable.OverrideSalesTax) ||
            (this.WithIGSTPayment_IN != _originalCustInvoiceTable.WithIGSTPayment_IN) ||
            (this.WouldYouClaimRefund_IN != _originalCustInvoiceTable.WouldYouClaimRefund_IN) ||
            this.hasTaxChangedForTaxIntegration(_originalCustInvoiceTable) ||
            (_dlvLocationId != _origDlvLocationId) ||
            (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
                && this.TaxPeriodPaymentCode_PL != _originalCustInvoiceTable.TaxPeriodPaymentCode_PL)
            ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxChangedForTaxIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax information has changed for tax integration of tax calculation service.
    /// </summary>
    /// <param name = "_originalCustInvoiceTable">
    /// The original cust invoice table which is updated.
    /// </param>
    /// <returns>
    /// true if the tax information has changed; otherwise, false.
    /// </returns>
    private boolean hasTaxChangedForTaxIntegration(CustInvoiceTable _originalCustInvoiceTable)
    {
        boolean isTaxIntegrationEnabled = this.isTaxIntegrationEnabled();

        return (isTaxIntegrationEnabled
                && (this.ListCode != _originalCustInvoiceTable.ListCode
                    || this.DeliveryPostalAddress != _originalCustInvoiceTable.DeliveryPostalAddress
                    || this.PostalAddress != _originalCustInvoiceTable.PostalAddress
                    || this.TransportationDocument != _originalCustInvoiceTable.TransportationDocument
                    || (TaxIntegrationUtils::isTaxIntegrationEnabledForTaxSolutionProvider()
                        && (this.InvoiceDate != _originalCustInvoiceTable.InvoiceDate
                            || this.DocumentDate != _originalCustInvoiceTable.DocumentDate
                            || this.VatDueDate_W != _originalCustInvoiceTable.VatDueDate_W))))
            || (isTaxIntegrationEnabled
                && (this.VATNum != _originalCustInvoiceTable.VATNum
                    || this.VATNumRecId != _originalCustInvoiceTable.VATNumRecId
                    || this.VATNumTableType != _originalCustInvoiceTable.VATNumTableType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWithholdTaxChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the withhold tax information has changed.
    /// </summary>
    /// <param name="_originalCustInvoiceTable">
    /// The original customer invoice table record.
    /// </param>
    /// <param name="_dlvLocationId">
    /// The location ID of the delivery address.
    /// </param>
    /// <param name="_origDlvLocationId">
    /// The location ID of the original delivery address.
    /// </param>
    /// <returns>
    /// A boolean value indicating whether taxes information has changed.
    /// </returns>
    public boolean hasWithholdTaxChanged_IN(CustInvoiceTable _originalCustInvoiceTable, LogisticsLocationRecId _dlvLocationId, LogisticsLocationRecId _origDlvLocationId)
    {
        return this.hasTaxChanged(_originalCustInvoiceTable, _dlvLocationId, _origDlvLocationId)
            || this.tdsGroup_IN != _originalCustInvoiceTable.tdsGroup_IN
            || this.tcsGroup_IN != _originalCustInvoiceTable.tcsGroup_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankAccounts_W</Name>
				<Source><![CDATA[
    public void initBankAccounts_W()
    {
        #isoCountryRegionCodes

        CurrencyCode standardCurrency;
        BankAccountID bankAccount;
        BankAccountID curBankAcc;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            this.CustBankAccount_LV = CustBankAccount::findDefault_LV(this.InvoiceAccount, this.CurrencyCode).AccountID;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]))
        {
            standardCurrency = CompanyInfoHelper::standardCurrency();
            bankAccount = BankAccountTable::findDefault_LV(standardCurrency).AccountID;
            curBankAcc = BankAccountTable::findDefault_LV(this.CurrencyCode).AccountID;

            if (curBankAcc || BankParameters::checkCurrCodeControl_W())
            {
                this.CurBankAccount_LV = standardCurrency != this.CurrencyCode ? curBankAcc : '';
            }

            this.BankAccount_LV = bankAccount ? bankAccount : CompanyInfo::find().Bank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CustInvoiceTable</c> table fields based on the <c>CustRecurrenceInvoiceDefaultType</c>
    /// field.
    /// </summary>
    /// <param name="_custInvoiceTemplate">
    /// An instance of a <c>CustInvoiceTemplate</c> table buffer.
    /// </param>
    /// <param name="_custTable">
    /// An instance of a <c>CustTable</c> table buffer.
    /// </param>
    /// <param name="_custRecurrenceInvoiceDefaultType">
    /// The default type for customer recurrence invoice setup.
    /// </param>
    /// <param name="_generationDate">
    /// The generation date of recurrence invoice.
    /// </param>
    public void initFromCustInvoiceTemplate(
        CustInvoiceTemplate _custInvoiceTemplate,
        CustTable _custTable,
        CustRecurrenceInvoiceDefaultType _custRecurrenceInvoiceDefaultType,
        TransDate _generationDate)
    {
        // <GIN>
        CustInvoiceTemplateTaxExtension_IN custInvoiceTplteTaxExtn;
        #ISOCountryRegionCodes
        // </GIN>
        this.OrderAccount = _custTable.AccountNum;
        this.OrderAccountRefRecId = _custTable.RecId;
        this.InvoiceAccount = _custTable.InvoiceAccount ? _custTable.InvoiceAccount : _custTable.AccountNum;

        this.setInvoiceAddress();

        var custParameters = CustParameters::find();
        var custTableFiscalAccount = this.getFiscalAccount(custParameters.getUseFiscalInvoiceAccount_ES());

        if (_custRecurrenceInvoiceDefaultType == CustRecurrenceInvoiceDefaultType::InvoiceTemplate)
        {
            this.LanguageId = _custInvoiceTemplate.LanguageId;
            this.PostingProfile = _custInvoiceTemplate.PostingProfile;
            this.TaxGroup = _custInvoiceTemplate.TaxGroup;
            this.TaxItemGroup = _custInvoiceTemplate.TaxItemGroup;
            this.OverrideSalesTax = _custInvoiceTemplate.OverrideSalesTax;
            this.Listcode = _custInvoiceTemplate.Listcode;
            this.CurrencyCode = _custInvoiceTemplate.CurrencyCode;
            this.Payment = _custInvoiceTemplate.Payment;
            this.PaymMode = _custInvoiceTemplate.PaymMode;
            this.PaymSpec = _custInvoiceTemplate.PaymSpec;
            this.PaymentSched = _custInvoiceTemplate.PaymentSched;
            this.CashDiscCode = _custInvoiceTemplate.CashDiscCode;
            this.GiroType = _custInvoiceTemplate.GiroType;
            this.DlvTerm = _custInvoiceTemplate.DlvTerm;
            this.CashDiscCode = _custInvoiceTemplate.CashDiscCode;
            this.CashDiscPercent = _custInvoiceTemplate.CashDiscPercent;
            this.DefaultDimension = _custInvoiceTemplate.DefaultDimension;
            this.InclTax = _custInvoiceTemplate.InclTax;

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                custInvoiceTplteTaxExtn = CustInvoiceTemplateTaxExtension_IN::findByCustInvoiceTemplateRecId(_custInvoiceTemplate.RecId);
                if (custInvoiceTplteTaxExtn)
                {
                    this.tdsGroup_IN = custInvoiceTplteTaxExtn.tdsGroup;
                    this.tcsGroup_IN = custInvoiceTplteTaxExtn.tcsGroup;
                    this.NatureOfAssessee_IN = custInvoiceTplteTaxExtn.NatureOfAssessee;
                }
            }
            // </GIN>
        }
        else
        {
            this.LanguageId = DirPartyTable::findRec(_custTable.Party).LanguageId;
            this.PostingProfile = custParameters.PostingProfile;
            this.TaxGroup = TaxSales::custTaxGroup(custTableFiscalAccount.DlvTerm, custTableFiscalAccount.TaxGroup);
            this.TaxItemGroup = Tax::taxItemGroup();
            this.CurrencyCode = _custTable.Currency;
            this.Payment = _custTable.PaymTermId;
            this.PaymMode = _custTable.PaymMode;
            this.PaymSpec = _custTable.PaymSpec;
            this.PaymentSched = _custTable.PaymSched;
            this.CashDiscCode = _custTable.CashDisc;
            this.CashDiscPercent = CashDisc::find(_custTable.CashDisc).Percent;
            this.GiroType = _custTable.GiroTypeFreeTextInvoice;
            this.DlvTerm = custTableFiscalAccount.DlvTerm;
            this.DefaultDimension = _custTable.DefaultDimension;
            this.InclTax = _custTable.InclTax;
            this.OverrideSalesTax = _custTable.OverrideSalesTax;
            this.setListCode();
        }

        this.UseDefaultFromCustomer = _custRecurrenceInvoiceDefaultType;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            this.CustBillingClassification = _custInvoiceTemplate.BillingClassification;
        }

        this.initRegistrationNumbersFromCustTable(custTableFiscalAccount, _generationDate);

        this.InvoiceDate = _generationDate;
        this.CustGroup = custTableFiscalAccount.CustGroup;
        this.WorkerSalesTaker = _custInvoiceTemplate.WorkerSalesTaker;
        this.AccountingDistributionTemplate = _custInvoiceTemplate.AccountingDistributionTemplate;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.vatOnPayment_RU = _custInvoiceTemplate.vatOnPayment_RU;
        }
        // </GEERU>

        this.setDeliveryLocation(_custRecurrenceInvoiceDefaultType != CustRecurrenceInvoiceDefaultType::InvoiceTemplate);

        this.NumberSequenceGroup = _custTable.NumberSequenceGroup;

        this.CashDiscBaseDays = _custTable.CashDiscBaseDays;
        this.calcCashDiscountBaseDate();
        this.calcCashDiscDate();

        this.CustBankAccountId = this.custTable_InvoiceAccount().BankAccount;
        this.calcDue();

        if (CustPaymModeTable::find(this.PaymMode).IsSEPA)
        {
            this.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(this.InvoiceAccount);
        }

        if (FinTagConfiguration::isFinTagConfigurationSet(_custTable.DataAreaId)
            && AccountsReceivableFinTagFlight::instance().isEnabled())
        {
            this.FinTag = _custInvoiceTemplate.FinTag;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable(CustTable custTable)
    {
        CustParameters custParameters = CustParameters::find();
        CustBillingClassification custBillingClassification;
        #ISOCountryRegionCodes

        // <GIN>
        boolean countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        TaxWithholdParameters_IN taxWithholdParameters;
        TaxInformationCustTable_IN taxInformationCustTable_IN;

        if (countryRegion_IN)
        {
            taxWithholdParameters = TaxWithholdParameters_IN::find();
        }
        // </GIN>
        
        this.OrderAccount = custTable.AccountNum;
        this.OrderAccountRefRecId = custTable.RecId;
        if (!this.InvoiceAccount)
        {
            this.InvoiceAccount = custTable.InvoiceAccount ? custTable.InvoiceAccount : custTable.AccountNum;
        }

        var custTableFiscalAccount = this.getFiscalAccount(custParameters.getUseFiscalInvoiceAccount_ES());
        if (CustParameters::isBillingClassificationEnabled())
        {
            custBillingClassification = CustBillingClassification::find(this.CustBillingClassification);
            if (!custBillingClassification.PaymTerm)
            {
                this.Payment = custTableFiscalAccount.PaymTermId;
            }
        }
        else
        {
            this.Payment = custTableFiscalAccount.PaymTermId;
        }
        this.initFromPayment();
        if (custTableFiscalAccount.PaymSched)
        {
            this.PaymentSched = custTableFiscalAccount.PaymSched;
        }
        this.PaymMode = custTableFiscalAccount.PaymMode;
        this.PaymSpec = custTableFiscalAccount.PaymSpec;

        if (!this.InvoiceDate)
        {
            this.InvoiceDate = CustInvoiceTable::getDefaultInvoiceDate();
        }

        this.LanguageId = DirPartyTable::findRec(custTable.Party).LanguageId;

        boolean isTaxUpdateTaxExemptNumberFromDeliveryAddressFlightEnabled = TaxUpdateTaxExemptNumberFromDeliveryAddressFlight::instance().isEnabled();
        if (!isTaxUpdateTaxExemptNumberFromDeliveryAddressFlightEnabled)
        {
            this.initRegistrationNumbersFromCustTable(custTableFiscalAccount, this.InvoiceDate);
        }

        this.TaxGroup = TaxSales::custTaxGroup(custTableFiscalAccount.DlvTerm, custTableFiscalAccount.TaxGroup);
        this.defaultOverrideSalesTax(custTable, custParameters);
        this.DlvTerm = custTableFiscalAccount.DlvTerm;
        this.Transport = DlvMode::find(custTable.DlvMode).Transport;
        this.CustGroup = custTableFiscalAccount.CustGroup;

        this.NumberSequenceGroup = custTable.NumberSequenceGroup;

        this.DefaultDimension = custTable.DefaultDimension;

        this.CashDiscCode = custTable.CashDisc;

        this.ContactPersonId = custTable.ContactPersonId;

        if (custTable.CashDisc && TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            this.CashDiscPercent = CashDisc::find(custTable.CashDisc).Percent;
        }

        this.CashDiscBaseDays = custTable.CashDiscBaseDays;
        this.calcCashDiscountBaseDate();
        this.calcCashDiscDate();

        this.PostingProfile = custParameters.PostingProfile;
        this.CurrencyCode = custTable.Currency;
        this.GiroType = custTable.GiroTypeFreeTextInvoice;
        this.CustBankAccountId = this.custTable_InvoiceAccount().BankAccount;

        this.setInvoiceAddress();
        this.setDeliveryLocation(true);
        if (isTaxUpdateTaxExemptNumberFromDeliveryAddressFlightEnabled)
        {
            this.initRegistrationNumbersFromCustTable(custTableFiscalAccount, this.InvoiceDate);
        }

        if (custParameters.CustNameFromVATNum)
        {
            this.setInvoiceNameFromVATNum(custParameters, custTableFiscalAccount);
        }

        this.InclTax = this.parmInlcTax(custTable);

        // <GEEPL>
        this.TaxPeriodPaymentCode_PL = custTable.TaxPeriodPaymentCode_PL;
        this.FiscalDocType_PL = custTable.FiscalDocType_PL;
        // </GEEPL>

        this.calcDue();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            this.BankCentralBankPurposeCode = custTable.BankCentralBankPurposeCode;
            this.BankCentralBankPurposeText = custTable.BankCentralBankPurposeText;
        }

        // <GIN>
        if (countryRegion_IN)
        {
            CustTable invoiceAccTable = this.custTable_InvoiceAccount();
            taxInformationCustTable_IN = invoiceAccTable.getTaxInformationCustTable_IN();

            if (taxWithholdParameters.tcsInvoice)
            {
                this.NatureOfAssessee_IN = taxInformationCustTable_IN.NatureOfAssessee;
                this.TCSGroup_IN = taxInformationCustTable_IN.TCSGroup;
            }

            if (taxWithholdParameters.tdsInvoice)
            {
                this.NatureOfAssessee_IN = taxInformationCustTable_IN.NatureOfAssessee;
                this.TDSGroup_IN = taxInformationCustTable_IN.TDSGroup;
            }
        }
        // </GIN>

        //<GEEPL>
        if (custTable.TaxPeriodPaymentCode_PL
            && PlTaxDueTable::find(custTable.TaxPeriodPaymentCode_PL).VatDateIsPaymentDate)
        {
            this.VatDueDate_W = this.DueDate;
        }
        //</GEEPL>

        // <GEEU>
        this.initBankAccounts_W();
        // </GEEU>

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            this.UnitedVATInvoice_LT = custTable.UnitedVATInvoice_LT;
        }
        // </GEELT>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.AgreementHeaderExt_RU = 0;
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postinitFromCustTableBR(custTable);
        }
        // </GBR>
        
        this.initFromCustTable_MX(CustTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInlcTax</Name>
				<Source><![CDATA[
    protected InclTax parmInlcTax(CustTable _custTable)
    {
        return _custTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRegistrationNumbersFromCustTable</Name>
				<Source><![CDATA[
    private void initRegistrationNumbersFromCustTable(CustTable _custTable, date _date)
    {
        _custTable.copyPrimaryRegistrationNumberToVATMap(this, _date);
        this.EnterpriseNumber = _custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable_MX</Name>
				<Source><![CDATA[
    void initFromCustTable_MX(CustTable custTable)
    {
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled() || EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            this.satPurpose_MX      = custTable.satPurpose_MX;
            this.satPaymMethod_MX   = custTable.satPaymMethod_MX;
            this.ForeignTrade_MX    = custTable.ForeignTrade_MX;

            if (this.ForeignTrade_MX)
            {
                this.NumRegIdTrib_MX = custTable.ForeignTaxRegistration_MX;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAddressAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default customer account to be used for the invoice (postal) address of this invoice.
    /// </summary>
    /// <returns>A <c>CustTable</c> record.</returns>
    /// <remarks>
    /// This method will return the invoice or order account depending on the InvoiceAddress setting of the order account.
    /// </remarks>
    public CustTable getInvoiceAddressAccount()
    {
        var orderAccountCustTable = this.custTable_OrderAccount();
        return orderAccountCustTable.InvoiceAddress == InvoiceOrderAccount::OrderAccount ?
                orderAccountCustTable : this.custTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalAccount</Name>
				<Source><![CDATA[
    private CustTable getFiscalAccount(UseFiscalInvoiceAccount _useFiscalAccount = UseFiscalInvoiceAccount::Never)
    {
        if (_useFiscalAccount == UseFiscalInvoiceAccount::Always ||
            (_useFiscalAccount == UseFiscalInvoiceAccount::Ask &&
             this.OrderAccount != this.InvoiceAccount &&
             Box::yesNo("@SYS112098"+'\n\n'+this.InvoiceAccount+'\n\n'+CustTable::promptAddress(this.InvoiceAccount, LogisticsLocationRoleType::Delivery),DialogButton::Yes)==DialogButton::Yes))
        {
            return this.custTable_InvoiceAccount();
        }
        else
        {
            return this.custTable_OrderAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFiscalDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fiscal document type information.
    /// </summary>
    /// <param name="_fiscalDocumentType">
    /// The new fiscal document type to use to initialize.
    /// </param>
    public void initFromFiscalDocumentType(RecId _fiscalDocumentType = this.FiscalDocumentType_BR)
    {
        FormDataObject obj;

        FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::findRecId(_fiscalDocumentType);

        if (!prmisDefault(_fiscalDocumentType))
        {
            this.FiscalDocumentType_BR = _fiscalDocumentType;
        }

        if (BrazilParameters::find().ChronologicalInvoiceNumbering && fiscalDocumentType.InvoiceIssueDate)
        {
            this.InvoiceDate = fiscalDocumentType.InvoiceIssueDate;
        }
        else if (!this.InvoiceDate)
        {
            this.InvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (FormDataUtil::isFormDataSource(this))
        {
            obj = FormDataUtil::getFormDataSource(this).object(fieldNum(CustInvoiceTable, InvoiceDate));
            obj.allowEdit(fiscalDocumentType.InvoiceIssueDate == dateNull());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPayment</Name>
				<Source><![CDATA[
    void initFromPayment()
    {
        this.PaymentSched = this.payment().PaymSched;
        this.refreshDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesAgreementHeader_RU</Name>
				<Source><![CDATA[
    private void initFromSalesAgreementHeader_RU(SalesAgreementHeader _salesAgreementHeader)
    {
        AgreementHeaderDefault agreementHeaderDefault = _salesAgreementHeader.agreementHeaderDefault();
        SalesAgreementHeaderDefault salesAgreementHeaderDefault = _salesAgreementHeader.salesAgreementHeaderDefault();
        SalesAgreementHeaderExt_RU salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::findBySalesAgreementHeader(_salesAgreementHeader.RecId);

        this.Payment = agreementHeaderDefault.PaymentTerms;
        this.PaymMode = salesAgreementHeaderDefault.CustomerMethodOfPayment;
        this.PaymSpec = salesAgreementHeaderDefault.CustomerPaymentSpec;

        if (! this.InvoiceDate)
        {
            this.InvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        this.CashDiscCode = agreementHeaderDefault.CashDiscountCode;
        this.CashDiscDate = dateNull();
        this.calcCashDiscDate();
        if (salesAgreementHeaderExt.CustPostingProfile)
        {
            this.PostingProfile = salesAgreementHeaderExt.CustPostingProfile;
        }
        if (agreementHeaderDefault.PaymentSchedule)
        {
            this.PaymentSched = agreementHeaderDefault.PaymentSchedule;
        }
        this.CurrencyCode = _salesAgreementHeader.Currency;
        this.calcDue();
        this.calcCashDiscDate();

        this.AgreementHeaderExt_RU = salesAgreementHeaderExt.RecId;

        this.DefaultDimension = this.copyDimension(_salesAgreementHeader.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxItemGroup</Name>
				<Source><![CDATA[
    void initFromTaxItemGroup()
    {
        this.TaxItemGroup = Tax::taxItemGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    void initRecord(FieldId _fieldId)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        ;

        if (_fieldId == fieldNum(CustInvoiceTable, OrderAccount))
        {
            this.InvoiceAccount = '';
        }

        this.initFromCustTable(this.custTable_OrderAccount());

        this.initFromTaxItemGroup();
        this.calcDue();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.AgreementHeaderExt_RU = 0;
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.defaultValueForWithTaxPayment_IN();
            this.defaultValueForWouldYouClaimRefund_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a customer invoice header record.
    /// </summary>
    /// <remarks>
    /// Inserts a <c>SourceDocumentHeader</c> record that stores the extension key that is used by the
    /// extension factory to create source document implementation objects.
    /// </remarks>
    void insert()
    {
        ttsbegin;

        // Create customer account if
        if (this.OneTimeCustomer && !this.OrderAccount)
            this.createOneTimeAccount();

        this.transferToOnetimeCustomer();

        // Set the order account RefRecId if it hasn't been set by now
        if (!this.OrderAccountRefRecId)
            this.OrderAccountRefRecId = this.custTable_OrderAccount().RecId;

        // Default invoice account
        if (!this.InvoiceAccount)
            this.InvoiceAccount = this.OrderAccount;

        this.initializeWorkflowApprovalStatusAndState();

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.defaultValueForWithTaxPayment_IN();
            this.defaultValueForWouldYouClaimRefund_IN();
        }

        super();
        //<GTH>
        this.SysExtensionSerializerMap::postInsert();
        //</GTH>

        // Default localization data
        TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Customer, this.RecId, this.InvoiceAccount, TradeBLWITypeOfForm::CustFreeInvoice);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CustVend);
            FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CFOP);
        }
        // </GBR>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkflowApprovalStatusAndState</Name>
				<Source><![CDATA[
    protected void initializeWorkflowApprovalStatusAndState()
    {
        if (CustInvoiceTableWorkflowDefaultingFixFlight::instance().isEnabled() && this.isWorkflowEnabledForFreeTextInvoice())
        {
            this.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Draft;
            this.WorkflowApprovalState = CustFreeInvoiceWFApprovalState::NotSubmitted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    InventProfileType_RU inventProfileType_RU()
    {
        return InventProfileType_RU::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateModified</Name>
				<Source><![CDATA[
    void invoiceDateModified()
    {
        this.paymentModified();
        this.cashDiscCodeModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateTime</Name>
				<Source><![CDATA[
    TransDateTime invoiceDateTime()
    {
        return DateTimeUtil::newDateTime(this.InvoiceDate, 0 , DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyCredited_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies, if any one of the lines of the posted transaction has been credited and that the credit note has not been cancelled.
    /// </summary>
    /// <returns>
    /// True, if the current invoice is already credited and not cancelled.
    /// </returns>
    public boolean isAlreadyCredited_W()
    {
        #ISOCountryRegionCodes
        CustInvoiceLine custInvoiceLine;
        CustInvoiceTrans custInvoiceTrans;
        CustRelatedInvoice custRelatedInvoice;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU,#isoPL,#isoHU,#isoCZ,#isoLT,#isoLV,#isoEE]))
        {
            select firstonly RecId from custInvoiceTrans
                exists join custInvoiceLine
                    where custInvoiceTrans.InvoiceId == this.InvoiceId &&
                        custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                        custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup &&
                        custInvoiceTrans.RecId == custInvoiceLine.RefReturnInvoiceTrans_W
                notexists join custRelatedInvoice
                    where custRelatedInvoice.CustInvoice == custInvoiceLine.ParentRecId &&
                        (custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::OriginalInvoice ||
                        custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::AdjustingInvoice);
        }

        return custInvoiceTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelInvoice_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the current invoice is a cancelation one.
    /// </summary>
    /// <returns>
    /// True if the current invoice is a cancelation one; otherwise, false.
    /// </returns>
    public boolean isCancelInvoice_BR()
    {
        CustRelatedInvoice custRelatedInvoice;

        select count(RecId) from custRelatedInvoice
            where custRelatedInvoice.ParentCustInvoice != 0 &&
                    custRelatedInvoice.CustInvoice == this.RecId;

        return custRelatedInvoice.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashPayment</Name>
				<Source><![CDATA[
    public boolean isCashPayment()
    {
        PaymTerm paymTerm = PaymTerm::find(this.Payment);

        if (paymTerm && paymTerm.Cash)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrectedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the invoice is a corrected invoice.
    /// </summary>
    /// <returns>
    /// true if the invoice is the corrected invoice; otherwise, false.
    /// </returns>
    public boolean isCorrectedInvoice()
    {
        boolean ret;

        if (isConfigurationkeyEnabled(configurationKeyNum(FreeTextInvoiceCorrection)))
        {
            ret = CustRelatedInvoice::doesInvoiceExistForType(this.RecId, InvoiceAssociationType::CorrectedInvoice);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the free text invoice can be edited.
    /// </summary>
    /// <returns>
    /// true if the free text invoice can be edited; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The free text invoice can be edited if it is not posted.
    /// </remarks>
    public boolean isEditable()
    {
        return !this.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserApprovalOwner</Name>
				<Source><![CDATA[
    public boolean isUserApprovalOwner()
    {
        return WorkflowWorkItem::isUserApprovalOwner(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserTaskOwner</Name>
				<Source><![CDATA[
    public boolean isUserTaskOwner()
    {
        return WorkflowWorkItem::isUserTaskOwner(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the work flow for the document is editable.
    /// </summary>
    /// <returns>
    /// If the work flow is editable, return true.
    /// </returns>
    public boolean isWorkflowEditable()
    {
        boolean isWorkflowEditable = true;

        if (this.WorkflowApprovalStatus &&
            this.WorkflowApprovalStatus != CustFreeInvoiceWFApprovalStatus::Draft &&
            this.WorkflowApprovalStatus != CustFreeInvoiceWFApprovalStatus::Rejected)
        {
            if (this.WorkflowApprovalStatus == CustFreeInvoiceWFApprovalStatus::PendingCompletion ||
                this.WorkflowApprovalStatus == CustFreeInvoiceWFApprovalStatus::ChangeRequested)
            {
                isWorkflowEditable = this.isUserTaskOwner() || this.isUserApprovalOwner();
            }
            else
            {
                isWorkflowEditable = false;
            }
        }

        return isWorkflowEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId location(LogisticsLocationRoleType _roleType = LogisticsLocationRoleType::Invoice)
    {
        if (_roleType == LogisticsLocationRoleType::Delivery)
        {
            return this.DeliveryLocation;
        }
        else
        {
            return LogisticsPostalAddress::getLocation(this.PostalAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetPaymStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates and returns for display purposes the payment status for a given transaction.
    /// </summary>
    /// <returns>
    ///  A status of the payment attached to the transaction.
    /// </returns>
    public display MCRCustPaymStatus mcrGetPaymStatus()
    {
        MCRCustPaymTotals mcrCustPaymTotals;

        mcrCustPaymTotals = MCRCustPaymTotals::construct(this.TableId, this.RecId);

        if (mcrCustPaymTotals)
        {
            return (mcrCustPaymTotals.getOverallPaymStatus());
        }

        return MCRCustPaymStatus::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the specified dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the specified dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )

        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustInvoiceTable, InvoiceAccount):
                this.initRecord(_fieldId);
                this.setListCode();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                    && FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
                {
                    this.defaultValueForWithTaxPayment_IN();
                    this.defaultValueForWouldYouClaimRefund_IN();
                }
                break;
            case fieldNum(CustInvoiceTable, OrderAccount):
                this.initRecord(_fieldId);
                this.setListCode();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    this.defaultValueForWithTaxPayment_IN();
                    this.defaultValueForWouldYouClaimRefund_IN();
                }
                break;
            case fieldNum(CustInvoiceTable, PostalAddress):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                    && !FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
                {
                    this.defaultValueForWithTaxPayment_IN();
                    this.defaultValueForWouldYouClaimRefund_IN();
                }
                this.setListCode();
                break;
            case fieldNum(CustInvoiceTable, OneTimeCustomer):
                if (!CustTable::createOneTimeAccountValidate())
                {
                    this.OneTimeCustomer = NoYes::No;
                }
                if (this.OneTimeCustomer && !this.OrderAccount)
                {
                    this.createOneTimeAccount();
                }
                break;
            case fieldNum(CustInvoiceTable, PaymMode):
                this.paymModeModified();
                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    this.adjustDueDateOnPaymentMethodChange();
                }
                break;
            case fieldNum(CustInvoiceTable, Payment):
                this.paymentModified();
                this.createPaymentSched();
                break;
            case fieldNum(CustInvoiceTable, CashDiscCode):
                this.cashDiscCodeModified();
                break;
            case fieldNum(CustInvoiceTable, InvoiceDate):
                this.invoiceDateModified();
                break;
            case fieldNum(CustInvoiceTable, DocumentDate):
                this.calcCashDiscountBaseDate();
                this.DueDate = dateNull();
                this.calcDue();
                this.cashDiscCodeModified();
                break;
            case fieldNum(CustInvoiceTable, BankCentralBankPurposeCode):
                this.BankCentralBankPurposeText = BankCentralBankPurpose::find(this.BankCentralBankPurposeCode).Text;
                break;
            case fieldNum(CustInvoiceTable, CustBillingClassification):
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    this.setPayment(this.custTable_OrderAccount().PaymTermId);
                    this.calcDue();
                }
                break;
            // <GEERU>
            case fieldNum(CustInvoiceTable, AgreementHeaderExt_RU):
                this.setAgreement_RU();
                break;
            // </GEERU>
            case fieldNum(CustInvoiceTable, CashDiscBaseDate):
                this.cashDiscBaseDateModified();
                break;
            case fieldNum(CustInvoiceTable, DeliveryDate_ES):
                if (PaymTerm::find(this.Payment).UseDeliveryDateForDueDate_ES)
                {
                    this.calcDue();
                }
                break;
            case fieldNum(CustInvoiceTable, DeliveryPostalAddress):
                this.DeliveryLocation = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Location;
            // intentionally fall through to the DeliveryLocation block instead of breaking
            case fieldNum(CustInvoiceTable, DeliveryLocation):
                this.TaxGroup = TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, this.DeliveryLocation);
            // intentionally fall through to the CustBankAccountId block instead of breaking
            case fieldNum(CustInvoiceTable, CustBankAccountId):
                if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
                {
                    this.adjustDueDateOnAddressChange();
                }
                break;
            case fieldNum(CustInvoiceTable, DirectDebitMandate):
                this.CustBankAccountId = CustDirectDebitMandate::find(this.DirectDebitMandate).BankAccount;
                break;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.postModifiedFieldBR(_fieldId);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeCovPlanned</Name>
				<Source><![CDATA[
    boolean mustBeCovPlanned()
    {
        return (this.Posted == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an extension table record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_custInvoiceTable_W">
    /// The extension table record.
    /// </param>
    public void packCustInvoiceTable_W(CustInvoiceTable_W _custInvoiceTable_W)
    {
        _custInvoiceTable_W.CustInvoiceTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceTable_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_CustomerInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_CustomerInvoice::CustomerFreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_CustomerInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_CustomerInvoice::CustomerInvoiceTotalsLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyTable_CustAccount</Name>
				<Source><![CDATA[
    DirPartyTable partyTable_CustAccount(boolean _forUpdate = false)
    {
        DirPartyTable partyTable;
        CustTable custTable;

        if (this.InvoiceAccount)
        {
            if (_forUpdate)
            {
                partyTable.selectForUpdate(_forUpdate);
            }

            select firstonly partyTable
                exists join custTable
                where custTable.Party == partyTable.RecId
                   && custTable.AccountNum == this.InvoiceAccount;
        }
        return partyTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    CustPaymDayId paymDayId()
    {
        CustPaymDayId paymDayId;

        paymDayId = this.custTable_InvoiceAccount().PaymDayId;

        if (!paymDayId)
            paymDayId = PaymTerm::find(this.Payment).PaymDayId;

        return paymDayId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    PaymTerm payment(boolean _update = false)
    {
        return PaymTerm::find(this.Payment, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentDueDate</Name>
				<Source><![CDATA[
    DueDate paymentDueDate()
    {
        DueDate dueDate;
        dueDate = CustInvoiceTable::paymentDueDateServer(this);

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentModified</Name>
				<Source><![CDATA[
    void paymentModified()
    {
        this.initFromPayment();
        this.calcCashDiscountBaseDate();
        this.DueDate = dateNull();
        this.calcDue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeModified</Name>
				<Source><![CDATA[
    void paymModeModified()
    {
        this.PaymModeMap::modifiedPaymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postinitFromCustTableBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Brazilian specific fields after the <c>CustInvoiceTable.initFromCustTable</c> method.
    /// </summary>
    /// <param name="custTable">
    /// The <c>CustTable</c> table buffer to initialize the current <c>CustInvoiceTable</c> table buffer from.
    /// </param>
    public void postinitFromCustTableBR(CustTable custTable)
    {
        this.CustFinalUser_BR = custTable.CustFinalUser_BR;
        this.ServiceCodeOnDlvAddress_BR = custTable.ServiceCodeOnDlvAddress_BR;
        this.FineCode_BR = custTable.FineCode_BR;
        this.InterestCode_BR = custTable.InterestCode_BR;
        this.PresenceType_BR = custTable.PresenceType_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postModifiedFieldBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs Brazilian specific operations after the <c>CustInvoiceTable.modifiedField</c> method.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> value of the table field that was modified.
    /// </param>
    public void postModifiedFieldBR(FieldId _fieldId)
    {
        CustPostingProfile custPostingProfile;

        switch (_fieldId)
        {
            case fieldNum(CustInvoiceTable, SalesPurchOperationType_BR):
                custPostingProfile = SalesPurchOperationType_BR::find(this.SalesPurchOperationType_BR).CustPostingProfile;

                if (custPostingProfile)
                {
                    this.PostingProfile = custPostingProfile;
                }
                break;
            case fieldNum(CustInvoiceTable, FiscalDocumentType_BR):
                this.initFromFiscalDocumentType();
                this.refreshDataSource();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes a data source.
    /// </summary>
    private void refreshDataSource()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            FormDataUtil::getFormDataSource(this).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDataSource_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a refresh if the <c>CustInvoiceTable</c> table is a form datasource.
    /// </summary>
    public void refreshDataSource_BR()
    {
        FormObjectSet formObjectSet;

        if (FormDataUtil::isFormDataSource(this))
        {
            formObjectSet = FormDataUtil::getFormDataSource(this);
            formObjectSet.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes invoice from the agreement.
    /// </summary>
    public void setAgreement_RU()
    {
        if (this.AgreementHeaderExt_RU)
        {
            this.initFromSalesAgreementHeader_RU(
                SalesAgreementHeaderExt_RU::salesAgreementHeader(this.AgreementHeaderExt_RU));
        }
        else
        {
            this.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(this.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the delivery location of the invoice.
    /// </summary>
    /// <param name="_updateTaxGroup">
    /// A boolean that indicates whether or not the invoice sales tax group should be updated based on the invoice delivery terms
    /// and the default delivery location; optional.
    /// </param>
    /// <remarks>
    /// Sets the value of the delivery location to the either the default delivery, invoice, or primary address of the order account,
    /// preferring addresses in that order of precedence.
    /// </remarks>
    void setDeliveryLocation(boolean _updateTaxGroup = true)
    {
        var logisticsLocationDefault = LogisticsLocationDefault::construct(this.custTable_OrderAccount());

        // Delivery location should always comes from OrderAccount
        var orderAccountDeliveryLocation = logisticsLocationDefault.getDefaultActiveLocation(LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
        if (!orderAccountDeliveryLocation)
        {
            orderAccountDeliveryLocation = logisticsLocationDefault.getDefaultLocationByType(LogisticsLocationRoleType::Invoice);
        }

        this.DeliveryLocation = orderAccountDeliveryLocation ?
                                orderAccountDeliveryLocation.RecId :
                                logisticsLocationDefault.getPrimaryPostalLocation().RecId;

        if (_updateTaxGroup)
        {
            this.TaxGroup = TaxSales::custTaxGroup(this.DlvTerm, this.TaxGroup, this.DeliveryLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAddress</Name>
				<Source><![CDATA[
    void setInvoiceAddress()
    {
        var custTableAddress = this.getInvoiceAddressAccount();

        this.Name = custTableAddress.name();

        var location = LogisticsLocationDefault::findSimpleDefault(custTableAddress,
            LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice));

        if (location)
        {
            this.PostalAddress = LogisticsPostalAddress::findByLocation(location.RecId).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceNameFromVATNum</Name>
				<Source><![CDATA[
    private void setInvoiceNameFromVATNum(CustParameters _custParameters,
                                          CustTable _custTable)
    {
        TaxVATNumTable taxVATNumTable;
        CountryRegionType countryRegionType;

        if (!_custTable)
        {
            _custTable = CustTable::find(this.InvoiceAccount);
        }

        taxVATNumTable = TaxVATNumTable::find(_custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.InvoiceDate), _custTable.postalAddress().CountryRegionId);

        if (taxVATNumTable.Name)
        {
            this.Name = taxVATNumTable.Name;
        }
        else
        {
            switch (_custParameters.MandatoryInvoiceVATNum)
            {
                case TaxVATNumCountryRegionType::None:
                    this.Name = _custTable.name();
                    break;
                case TaxVATNumCountryRegionType::DomesticEU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_custTable.postalAddress().CountryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::Domestic:
                        case CountryRegionType::EU:
                            this.Name = '';
                            break;
                        default:
                            this.Name = _custTable.name();
                            break;
                    }
                    break;
                case TaxVATNumCountryRegionType::EU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_custTable.postalAddress().CountryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::EU:
                            this.Name = '';
                            break;
                        default:
                            this.Name = _custTable.name();
                            break;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineCFOPTable_BR</Name>
				<Source><![CDATA[
    private void setLineCFOPTable_BR(CustInvoiceLine _custInvoiceLine)
    {
        CFOPValidation_BR cfopValidation;

        cfopValidation = CFOPValidation_BR::construct(_custInvoiceLine);

        if (!cfopValidation.checkCFOP(false))
        {
            _custInvoiceLine.cfopTable_BR = cfopValidation.getDefaultCFOP();
        }

        _custInvoiceLine.setTaxGroupAndTaxItemGroupFields_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    void setListCode()
    {
        LogisticsPostalAddress postalAddress = LogisticsPostalAddress::findRecId(this.PostalAddress);
        this.Listcode = EUSalesList::resolveListCodeByCountryState(postalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Payment by using the billing classification if it is defined on billing classification;
    /// otherwise, uses the terms of payment of the Customer.
    /// </summary>
    /// <param name="_custTablePaymTermId">
    /// The Terms of Payment of the selected Customer.
    /// </param>
    void setPayment(PaymTermId _custTablePaymTermId)
    {
        PaymTermId paymTermId;

        if (!this.Payment)
        {
            this.Payment = _custTablePaymTermId;
        }

        if (this.CustBillingClassification)
        {
            paymTermId = CustBillingClassification::find(this.CustBillingClassification).PaymTerm;
            if (paymTermId)
            {
                this.Payment = paymTermId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVATDueDate_W</Name>
				<Source><![CDATA[
    void setVATDueDate_W(VatDueDate_W _vatDueDate_W)
    {
        this.VatDueDate_W = _vatDueDate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAmountMST</Name>
				<Source><![CDATA[
    display AmountMST showAmountMST()
    {
        AmountMST amountMST;
        CustInvoiceLine custInvoiceLine;
        if (this.InvoiceId)
            amountMST = this.custInvoiceJour().InvoiceAmountMST;
        else
        {
            select sum(AmountCur) from custInvoiceLine
                where custInvoiceLine.ParentRecId == this.RecId;
            amountMST = this.amountMST(custInvoiceLine.AmountCur);
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentStatus</Name>
				<Source><![CDATA[
    display SourceDocumentAccountingStatus sourceDocumentStatus()
    {
        SourceDocumentHeader sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        return sourceDocumentHeader.AccountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount summaryLedgerDimension()
    {
        return CustLedgerAccounts::summaryLedgerDimension(this.InvoiceAccount,
                                              this.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToOnetimeCustomer</Name>
				<Source><![CDATA[
    void transferToOnetimeCustomer()
    {
        CustomerEntity custTable;

        if (this.OneTimeCustomer && !this.custTable_OrderAccount().Party)
        {
            ttsbegin;
            custTable = DirParty::constructFromCommon(this.custTable_OrderAccount(),
                                                       DateTimeUtil::getSystemDateTime(),
                                                       DirPartyType::None,
                                                       true,
                                                       false);
            custTable.initFromCustInvoiceTable(this);
            custTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> VendInvoiceInfoTable </c> to dirty
    /// </summary>
    private void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this);
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        CustInvoiceTable this_Orig = this.orig();
        CustomerEntity customer;

        MCRCustPaymTotals mcrCustPaymTotals;

        // <GEERU>
        #EECountryRegionCodes
        #ISOCountryRegionCodes
        // </GEERU>

        ttsbegin;

        this.checkCurrencyCode();

        super();
        //<GTH>
        this.SysExtensionSerializerMap::postUpdate();
        //</GTH>

        this.CovStatus = (this.CovStatus == 2 ? 1 : 0);

        if (this.OneTimeCustomer &&
           (this.Name != this_Orig.Name ||
            this.PostalAddress != this_Orig.PostalAddress))
        {
            customer = DirParty::constructFromCommon(this.custTable_OrderAccount(true),
                                                       DateTimeUtil::getSystemDateTime(),
                                                       DirPartyType::Organization,
                                                       true,
                                                       false);
            customer.initFromCustInvoiceTable(this);
            customer.update();
        }

        if (! this.InvoiceAccount)
        {
            this.InvoiceAccount = this.OrderAccount;
        }

        if (this_Orig.PaymentSched &&
            this_Orig.PaymentSched != this.PaymentSched)
        {
            CustPaymSched::deleteCustPaymSched(this.TableId, this.RecId);
        }

        // If the invoice account has changed, update the invoice account on all
        //  associated payments.
        if ((this.InvoiceAccount != this_Orig.InvoiceAccount)
            && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrCustPaymTotals =
                MCRCustPaymTotals::construct(this.TableId, this.RecId);

            // NOTE: throws exception::Error if not allowed to update
            mcrCustPaymTotals.updateInvoiceAccount(this.InvoiceAccount);
        }

        boolean alreadyRecalculatedSourceDoc = false;

        // The recalculation which was introduced for a bug fix has caused a regression.
        // But now the recalculation has been handled by new code by SDAF team, we don't need this code.
        // That's why the execution of the following code has been blocked in order to fix both the bug and regression
        // This code will be cleaned up in a major release.
        if (!CustFreeInvoiceRecalcDistributionsOnCurrencyChangeFlight::instance().isEnabled()
            && this.needsFullDistributionRecalculation(this_Orig))
        {
            this.recalculateDistributions();

            alreadyRecalculatedSourceDoc = true;
        }

        // if the date changes the exchangeRateDate on the related source document lines needs to be updated to match and distributions updated.
        if (this.InvoiceDate != this_Orig.InvoiceDate ||
            this.InclTax != this_Orig.InclTax)
        {
            if (!CustFreeInvoiceRecalcDistributionsOnCurrencyChangeFlight::instance().isEnabled()
                && !alreadyRecalculatedSourceDoc)
            {
                SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);
            }

            SourceDocumentHeaderProvider::updateExchangeRateDate(this.SourceDocumentHeader,this.InvoiceDate);
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (this_Orig.OrderAccount != this.OrderAccount)
            {
                FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CustVend);
            }

            if (this_Orig.CustFinalUser_BR != this.CustFinalUser_BR)
            {
                TaxUncommitted::deleteForDocumentHeader(this.TableId, this.RecId);
            }

            this.updateCustInvoiceLines_BR(this_Orig, this);
        }
        // </GBR>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.AgreementHeaderExt_RU != this_Orig.AgreementHeaderExt_RU)
            {
                this.updateLineAgreementDimension_RU();
            }
        }
        // </GEERU>

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if (this.hasTaxChanged(this_Orig)
                && CustRelatedInvoice::findByCustInvoice(this.RecId).InvoiceAssociationType != InvoiceAssociationType::AdjustingInvoice)
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDistributions</Name>
				<Source><![CDATA[
    private void recalculateDistributions()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(
                this,
                SourceDocumentLineAccountingStatus::Draft);

        SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(
                this,
                SourceDocumentLineAccountingStatus::FullyDistributed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsFullDistributionRecalculation</Name>
				<Source><![CDATA[
    internal boolean needsFullDistributionRecalculation(CustInvoiceTable _custInvoiceTable_orig)
    {
        return this.CurrencyCode != _custInvoiceTable_orig.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustInvoiceLines_BR</Name>
				<Source><![CDATA[
    private void updateCustInvoiceLines_BR(CustInvoiceTable _custInvoiceTable_Orig, CustInvoiceTable _custInvoiceTable)
    {
        CustInvoiceLine custInvoiceLine;
        LogisticsPostalAddress localLogisticsPostalAddress;
        SalesPurchOperationType_BR salesPurchOperationType_BR;
        boolean serviceCodeOnDlvAddressChanged;
        boolean salesPurchOperationTypeChanged;
        boolean fiscalEstablishmentChanged;

        serviceCodeOnDlvAddressChanged = _custInvoiceTable.ServiceCodeOnDlvAddress_BR != _custInvoiceTable_Orig.ServiceCodeOnDlvAddress_BR;
        salesPurchOperationTypeChanged = _custInvoiceTable.SalesPurchOperationType_BR != _custInvoiceTable_Orig.SalesPurchOperationType_BR;
        fiscalEstablishmentChanged = _custInvoiceTable.FiscalEstablishment_BR != _custInvoiceTable_Orig.FiscalEstablishment_BR;

        if (!serviceCodeOnDlvAddressChanged && !salesPurchOperationTypeChanged && !fiscalEstablishmentChanged)
        {
            return;
        }

        if (salesPurchOperationTypeChanged)
        {
            salesPurchOperationType_BR = SalesPurchOperationType_BR::find(_custInvoiceTable.SalesPurchOperationType_BR);
        }

        while select forupdate custInvoiceLine
                where custInvoiceLine.ParentRecId == _custInvoiceTable.RecId
        {
            if (serviceCodeOnDlvAddressChanged)
            {
                if (_custInvoiceTable.ServiceCodeOnDlvAddress_BR)
                {
                    localLogisticsPostalAddress = LogisticsPostalAddress::findRecId(_custInvoiceTable.PostalAddress);
                    custInvoiceLine.TaxServiceCode_BR = TaxServiceCode_BR::findDlvServiceCode(custInvoiceLine.TaxServiceCode_BR,
                                                                                              localLogisticsPostalAddress.CountryRegionId,
                                                                                              localLogisticsPostalAddress.State,
                                                                                              localLogisticsPostalAddress.City).ServiceCodeId;
                }
                else
                {
                    custInvoiceLine.TaxServiceCode_BR = TaxServiceCode_BR::find(custInvoiceLine.TaxServiceCode_BR).ParentServiceCode ? TaxServiceCode_BR::find(custInvoiceLine.TaxServiceCode_BR).ParentServiceCode : custInvoiceLine.TaxServiceCode_BR;
                }
            }

            if (salesPurchOperationType_BR && salesPurchOperationType_BR.LedgerDimension)
            {
                custInvoiceLine.LedgerDimension = salesPurchOperationType_BR.LedgerDimension;
            }

            if (fiscalEstablishmentChanged || salesPurchOperationTypeChanged)
            {
                this.setLineCFOPTable_BR(custInvoiceLine);
            }

            custInvoiceLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates cash flow forecasts for the <c>CustInvoiceTable</c> record.
    /// </summary>
    /// <param name = "_ledgerCoverage">The cash flow forecasting calculations.</param>
    public void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        #ISOCountryRegionCodes

        LedgerCoverage ledgerCoverage = _ledgerCoverage;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        TaxCov taxCov;

        CustInvoiceLine custInvoiceLine;

        CustPaymSched custPaymSched;
        CustPaymSchedLine custPaymSchedLine;
        CustInvoiceJour tmpInvoiceJour;

        SourceDocumentLine sourceDocumentLine;
        MarkupTrans markupTrans;

        AccDistLedgerDimAmountList accDistLedgerDimAmountList;
        AccDistLedgerDimAmountListEnumerator accDistLedgerDimAmountListEnumerator;
        AccDistLedgerDimAmount accDistLedgerDimAmount;

        if (this.mustBeCovPlanned())
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(this);
            custFreeInvoiceCalcTotals.calc();

            // Adjust the invoiceDate to today for unposted invoices.
            // The rest of dates (due date, payment due date) should follow from the invoice being posted today.
            TransDate today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            InvoiceDate invoiceDate = max(today, this.InvoiceDate);

            // Construct a cloned object with the new invoiceDate
            CustInvoiceTable invoiceIfPostedToday;
            buf2Buf(this, invoiceIfPostedToday);
            invoiceIfPostedToday.InvoiceDate = invoiceDate;

            // Figure out the due date if the invoice was posted today.
            DueDate dueDate = invoiceIfPostedToday.paymentDueDate();

            // Don't use this object any more.
            invoiceIfPostedToday = null;

            // Create payment schedule
            if (this.PaymentSched)
            {
                if (!CustPaymSched::exist(this.TableId, this.RecId))
                {
                    this.createPaymentSched(custFreeInvoiceCalcTotals);

                    tmpInvoiceJour.initFromCustInvoiceTable(this);
                    tmpInvoiceJour.initFromCustFreeInvoiceCalcTotals(custFreeInvoiceCalcTotals);

                    tmpInvoiceJour.FixedDueDate = dueDate;
                    tmpInvoiceJour.DueDate = dueDate;

                    tmpInvoiceJour.CashDiscDate = tmpInvoiceJour.DueDate;
                    tmpInvoiceJour.InvoiceDate = invoiceDate;

                    tmpInvoiceJour.insert();

                    this.copyPaymentSched(tmpInvoiceJour);
                    tmpInvoiceJour.createPaymentSched();

                    select firstonly custPaymSched
                        where custPaymSched.ExtTableId == tmpInvoiceJour.TableId &&
                              custPaymSched.ExtRecId == tmpInvoiceJour.RecId;
                }
                else
                {
                    select firstonly custPaymSched
                        where custPaymSched.ExtTableId == this.TableId
                            && custPaymSched.ExtRecId == this.RecId;
                }
            }

            ledgerCoverage.init(this);

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                ledgerCoverage.parmPostingProfile_RU(this.PostingProfile);
                ledgerCoverage.parmInventProfileType_RU(this.inventProfileType_RU());
            }
            // </GEERU>
            taxCov = new TaxCov(ledgerCoverage);

            // <GBR>
            if (this.createCustTrans_BR())
            {
                // </GBR>
                while select custInvoiceLine
                    index hint ParentRecIdIdx
                    where custInvoiceLine.ParentRecId == this.RecId
                    join RecId from sourceDocumentLine where sourceDocumentLine.RecId == custInvoiceLine.SourceDocumentLine
                {
                    // Create the distributions if needed for the line
                    SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(
                        custInvoiceLine, false, SourceDocumentLineAccountingStatus::FullyDistributed);

                    // Get the distributions for this line
                    accDistLedgerDimAmountList = AccDistLedgerDimAmountList::construct();
                    SourceDocumentLineProvider::getAccDistLedgerDimAmountList(sourceDocumentLine.RecId, accDistLedgerDimAmountList, false);
                    accDistLedgerDimAmountListEnumerator = accDistLedgerDimAmountList.getEnumerator();

                    while (accDistLedgerDimAmountListEnumerator.moveNext())
                    {
                        accDistLedgerDimAmount = accDistLedgerDimAmountListEnumerator.current();

                        ledgerCoverage.updateSum(invoiceDate,
                            LedgerPostingType::CustRevenue,
                            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(accDistLedgerDimAmount.parmLedgerDimension()),
                            custInvoiceLine.DefaultDimension,
                            this.CurrencyCode,
                            -accDistLedgerDimAmount.parmTransactionCurrencyAmount());
                    }
                }

                AmountCur invoiceAmount = custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount();

                PayPredPredictionResult predictionResult;
                if (this.useLedgerCovPayPredFeature())
                {
                    this.createOrUpdateProjectedInvoice(invoiceDate, dueDate, invoiceAmount);

                    predictionResult = this.findPredictionResult();
                }

                if (this.PaymentSched)
                {
                    while select DueAmount, DueDate from custPaymSchedLine
                        where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                    {
                        if (custPaymSchedLine.DueAmount)
                        {
                            DueDate paymentScheduleDueDate = max(today, custPaymSchedLine.DueDate);

                            this.updateLedgerCovForInvoiceAndPayment(predictionResult, ledgerCoverage, invoiceDate, paymentScheduleDueDate, custPaymSchedLine.DueAmount);
                        }
                    }
                }
                else
                {
                    this.updateLedgerCovForInvoiceAndPayment(predictionResult, ledgerCoverage, invoiceDate, dueDate, invoiceAmount);
                }

                while select RecId from sourceDocumentLine where
                        sourceDocumentLine.SourceDocumentHeader == this.SourceDocumentHeader &&
                        sourceDocumentLine.SourceRelationType == markupTrans.TableId
                    join markupTrans where
                        markupTrans.SourceDocumentLine == sourceDocumentLine.RecId
                {
                    // Create the distributions if needed for the line
                    SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(
                        markupTrans, false, SourceDocumentLineAccountingStatus::FullyDistributed);

                    // Get the distributions for this line
                    accDistLedgerDimAmountList = AccDistLedgerDimAmountList::construct();
                    SourceDocumentLineProvider::getAccDistLedgerDimAmountList(sourceDocumentLine.RecId, accDistLedgerDimAmountList, false);
                    accDistLedgerDimAmountListEnumerator = accDistLedgerDimAmountList.getEnumerator();

                    while (accDistLedgerDimAmountListEnumerator.moveNext())
                    {
                        accDistLedgerDimAmount = accDistLedgerDimAmountListEnumerator.current();

                        this.updateSumMarkupTrans(markupTrans,accDistLedgerDimAmount,markupTrans.SourceDocumentLine,invoiceDate,ledgerCoverage,this.DefaultDimension);
                    }
                }
                // <GBR>
            }
            // </GBR>

            taxCov.taxLedgerCov(custFreeInvoiceCalcTotals.tax().tmpTaxWorkTrans(), invoiceDate);

            ledgerCoverage.endCov();

            if (tmpInvoiceJour)
            {
                delete_from custPaymSched
                    where custPaymSched.ExtTableId == tmpInvoiceJour.TableId
                        && custPaymSched.ExtRecId == tmpInvoiceJour.RecId;

                tmpInvoiceJour.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateProjectedInvoice</Name>
				<Source><![CDATA[
    private void createOrUpdateProjectedInvoice(InvoiceDate _invoiceDate, DueDate _dueDate, AmountCur _invoiceAmount)
    {
        if (this.useLedgerCovPayPredFeature())
        {
            PayPredProjectedInvoice projectedInvoice = PayPredProjectedInvoice::find(this.TableId, this.RecId, true);

            projectedInvoice.CustomerId = this.InvoiceAccount;
            projectedInvoice.AccountingCurrency = Ledger::accountingCurrency();
            projectedInvoice.CashDiscountCode = this.CashDiscCode;
            projectedInvoice.CashDiscountPercent = this.CashDiscPercent;
            projectedInvoice.DueDate = _dueDate;
            projectedInvoice.InvoiceAmountAccounting = CurrencyExchangeHelper::amountCur2MST(_invoiceAmount, this.CurrencyCode);
            projectedInvoice.OrderAccount = this.OrderAccount;
            projectedInvoice.PaymentScheduleId = this.PaymentSched;
            projectedInvoice.TransType = LedgerTransType::Cust;
            projectedInvoice.InvoiceDate = _invoiceDate;
            projectedInvoice.SourceTableId = this.TableId;
            projectedInvoice.SourceRecId = this.RecId;

            projectedInvoice.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPredictionResult</Name>
				<Source><![CDATA[
    private PayPredPredictionResult findPredictionResult()
    {
        PayPredPredictionResult predictionResult;

        if (this.useLedgerCovPayPredFeature())
        {
            predictionResult = PayPredPredictionResult::findPredictionResult(this.TableId, this.RecId);
        }

        return predictionResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLedgerCovPayPredFeature</Name>
				<Source><![CDATA[
    private boolean useLedgerCovPayPredFeature()
    {
        return this.PaymentSched == '' && CashflowInsightsActivation::isPayPredIntegrationActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForInvoiceAndPayment</Name>
				<Source><![CDATA[
    private void updateLedgerCovForInvoiceAndPayment(
        PayPredPredictionResult _predictionResult,
        LedgerCoverage _ledgerCoverage,
        InvoiceDate _invoiceDate,
        DueDate _dueDate,
        AmountCur _invoiceAmount)
    {
        CustTable custTable = this.custTable_InvoiceAccount();

        //Invoice
        _ledgerCoverage.updateSum(
                _invoiceDate,
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.summaryLedgerDimension()).RecId,
                this.DefaultDimension,
                this.CurrencyCode,
                _invoiceAmount,
                0);

        if (_predictionResult.RecId != 0)
        {
            PayPredParameters payPredParameters = PayPredParameters::findOrCreate();

            //Payment summary
            LedgerCoveragePayment ledgerCoveragePayment = LedgerCoveragePayment::construct();
            ledgerCoveragePayment.updateSum(
                _ledgerCoverage,
                _predictionResult,
                payPredParameters.BucketLate1BoundaryDays,
                _dueDate,
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.summaryLedgerDimension()).RecId,
                custTable.DefaultDimension,
                this.CurrencyCode,
                -_invoiceAmount);

            //Payment clearing
            ledgerCoveragePayment.updateSum(
                _ledgerCoverage,
                _predictionResult,
                payPredParameters.BucketLate1BoundaryDays,
                _dueDate,
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.clearingLedgerDimension()).RecId,
                custTable.DefaultDimension,
                this.CurrencyCode,
                _invoiceAmount);
        }
        else
        {
            TransDate paymentDueDate = _ledgerCoverage.determinePaymentDueDateWithAverages(
                    LedgerCovAvgAverageDaysSelector::CustAverageDaysFromInvoiceToPayment,
                    custTable.AccountNum,
                    _dueDate,
                    this.clearingPeriod());

            //Payment summary
            _ledgerCoverage.updateSum(
                paymentDueDate,
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.summaryLedgerDimension()).RecId,
                custTable.DefaultDimension,
                this.CurrencyCode,
                -_invoiceAmount,
                0);

            //Payment clearing
            _ledgerCoverage.updateSum(
                paymentDueDate,
                LedgerPostingType::CustBalance,
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.clearingLedgerDimension()).RecId,
                custTable.DefaultDimension,
                this.CurrencyCode,
                _invoiceAmount,
                0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineAgreementDimension_RU</Name>
				<Source><![CDATA[
    private void updateLineAgreementDimension_RU()
    {
        CustInvoiceLine custInvoiceLine;

        if (this.AgreementHeaderExt_RU)
        {
            while select forupdate custInvoiceLine
                where custInvoiceLine.ParentRecId == this.RecId
            {
                custInvoiceLine.DefaultDimension = AgreementHeaderExt_RU::createAgreementDimension(this.AgreementHeaderExt_RU,
                    custInvoiceLine.DefaultDimension);
                custInvoiceLine.doUpdate();

                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(custInvoiceLine);
            }
        }
        else
        {
            while select forupdate custInvoiceLine
                where custInvoiceLine.ParentRecId == this.RecId
            {
                custInvoiceLine.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(custInvoiceLine.DefaultDimension);
                custInvoiceLine.doUpdate();

                custInvoiceLine.resetDistribution_RU();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reason code on all the associated lines that are based on a header reason code.
    /// </summary>
    /// <remarks>
    /// This method is called whenever the header reason code changes.
    /// </remarks>
    public void updateLineReasonCode()
    {
        CustInvoiceLine tmpCustInvoiceLine;
        ReasonTableRef reasonTableRefLine;
        ReasonCode reasonCode;

        reasonCode = ReasonTableRef::find(this.CorrectionReasonCode).Reason;

        ttsbegin;

        while select forupdate tmpCustInvoiceLine
            where tmpCustInvoiceLine.ParentRecId               == this.RecId &&
                  ((tmpCustInvoiceLine.RefReturnInvoiceTrans_W == 0 && tmpCustInvoiceLine.CreditNoteInternalRef_PL != 0) ||
                  (tmpCustInvoiceLine.RefReturnInvoiceTrans_W  != 0 && tmpCustInvoiceLine.CreditNoteInternalRef_PL == 0))
        {
            if (tmpCustInvoiceLine.ReasonRefRecId)
            {
                reasonTableRefLine = ReasonTableRef::find(tmpCustInvoiceLine.ReasonRefRecId, true);
                reasonTableRefLine.Reason = reasonCode;
                reasonTableRefLine.doUpdate();
            }
            else
            {
                if (reasonCode != "")
                {
                    reasonTableRefLine.Reason = reasonCode;
                    reasonTableRefLine.insert();

                    tmpCustInvoiceLine.ReasonRefRecId = reasonTableRefLine.RecId;
                    tmpCustInvoiceLine.doUpdate();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reason comment on all the associated lines that are based on a header reason comment.
    /// </summary>
    /// <remarks>
    /// This method is called whenever the header reason comment changes.
    /// </remarks>
    public void updateLineReasonComment()
    {
        CustInvoiceLine tmpCustInvoiceLine;
        ReasonComment   reasonComment;

        reasonComment = ReasonTableRef::find(this.CorrectionReasonCode).ReasonComment;

        ttsbegin;

        while select forupdate tmpCustInvoiceLine
            where tmpCustInvoiceLine.ParentRecId               == this.RecId &&
                  ((tmpCustInvoiceLine.RefReturnInvoiceTrans_W == 0 && tmpCustInvoiceLine.CreditNoteInternalRef_PL != 0) ||
                  (tmpCustInvoiceLine.RefReturnInvoiceTrans_W  != 0 && tmpCustInvoiceLine.CreditNoteInternalRef_PL == 0))
        {
            tmpCustInvoiceLine.editReasonComment(true, reasonComment);
            tmpCustInvoiceLine.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumMarkupTrans</Name>
				<Source><![CDATA[
    private void updateSumMarkupTrans(
        MarkupTrans _markupTrans,
        AccDistLedgerDimAmount _accDistLedgerDimAmount,
        SourceDocumentLineRefRecId _sourceDocumentLineRefRecId,
        TransDate _deliveryDate,
        LedgerCoverage _ledgerCoverage,
        DimensionDefault _defaultDimension)
    {
        MarkupTable markupTable;
        LedgerPostingType ledgerPostingType;
        AmountCur sign;

        markupTable = MarkupTrans::findBySourceDocumentLine(_sourceDocumentLineRefRecId).markupTable();

        if ((markupTable.CustType == MarkupType::LedgerAccount) || (markupTable.VendType == MarkupType::LedgerAccount))
        {
            ledgerPostingType = markupTable.CustType == MarkupType::LedgerAccount ? markupTable.CustPosting : markupTable.VendPosting;
            sign = markupTable.CustType == MarkupType::LedgerAccount ? 1.0 : -1.0;

            _ledgerCoverage.updateSum(_deliveryDate,
                ledgerPostingType,
                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_accDistLedgerDimAmount.parmLedgerDimension()),
                _defaultDimension,
                _markupTrans.CurrencyCode,
                _accDistLedgerDimAmount.parmTransactionCurrencyAmount() * sign);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoicePosted</Name>
				<Source><![CDATA[
    private boolean isInvoicePosted()
    {
        return this.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        ret = super();

        if (ret && this.isInvoicePosted())
        {
            ret = checkFailed(strFmt('%1-%2', this.InvoiceId, "@AccountsReceivable:FreeTextInvoiceHeaderEntityCheckDelete"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExcludeTaxFromInvoice</Name>
				<Source><![CDATA[
    private boolean validateExcludeTaxFromInvoice()
    {
        CustInvoiceLine custInvoiceLine;

        while select TaxGroup, TaxItemGroup from custInvoiceLine
            where custInvoiceLine.ParentRecId == this.RecId
        {
            if (!custInvoiceLine.validateExcludeTaxFromInvoice(this.InclTax))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret = super(p1);

        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        if (ret)
        {
            switch (p1)
            {
                case fieldNum(CustInvoiceTable, vatNum):
                    // Skip the VAT Number/Tax Exempt Number validation part for one time customer
                    if (this.custTable_InvoiceAccount().OneTimeCustomer)
                    {
                        ret = true;
                    }
                    else
                    {
                        ret = TaxVATNumTable::checkVATNum(this.vatNum, this, p1);
                        ret = ret && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(this.EnterpriseNumber, this.vatNum, true);
                    }
                    break;

                case (fieldNum(CustInvoiceTable, OrderAccount)):
                    ret = this.checkAccount();
                    break;

                // <GEEU>
                case fieldNum(CustInvoiceTable, BankAccount_LV):
                    if (this.BankAccount_LV && BankParameters::checkCurrCodeControl_W() && BankAccountTable::find(this.BankAccount_LV).CurrencyCode != CompanyInfoHelper::standardCurrency())
                    {
                        ret = checkFailed(strFmt("@SYS112224",
                                    this.BankAccount_LV,
                                    fieldId2pname(tableNum(CustInvoiceTable), fieldNum(CustInvoiceTable, BankAccount_LV)),
                                    tableId2pname(tableNum(BankAccountTable))));
                    }
                    break;

                case fieldNum(CustInvoiceTable, CurBankAccount_LV):
                    if (this.CurBankAccount_LV && BankParameters::checkCurrCodeControl_W() && BankAccountTable::find(this.CurBankAccount_LV).CurrencyCode != this.CurrencyCode)
                    {
                        ret = checkFailed(strFmt("@SYS112224",
                                    this.CurBankAccount_LV,
                                    fieldId2pname(tableNum(CustInvoiceTable), fieldNum(CustInvoiceTable, CurBankAccount_LV)),
                                    tableId2pname(tableNum(BankAccountTable))));
                    }
                    break;
                // </GEEU>

                // <GIN>
                case fieldNum(CustInvoiceTable, tdsGroup_IN):
                    if (TaxWithholdParameters_IN::isTDSActivate()
                            && this.tdsGroup_IN
                            && TaxWithholdGroupHeading::find(this.tdsGroup_IN).TaxType_IN != TaxWithholdCodeType_IN::TDS)
                    {
                        ret = checkFailed(strFmt("@GLS5461", this.tdsGroup_IN, TaxWithholdCodeType_IN::TDS));
                    }
                    break;

                case fieldNum(CustInvoiceTable, tcsGroup_IN):
                    if (TaxWithholdParameters_IN::isTCSActivate()
                            && this.tcsGroup_IN
                            && TaxWithholdGroupHeading::find(this.tcsGroup_IN).TaxType_IN != TaxWithholdCodeType_IN::TCS)
                    {
                        ret = checkFailed(strFmt("@GLS5461", this.tcsGroup_IN, TaxWithholdCodeType_IN::TCS));
                    }
                    break;
                // </GIN>

                // <GEERU>
                case fieldNum(CustInvoiceTable, AgreementHeaderExt_RU):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        ret = this.checkAgreement_RU();
                    }
                    break;

                case fieldNum(CustInvoiceTable, InvoiceDate):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        if (this.AgreementHeaderExt_RU)
                        {
                            if (SalesAgreementHeaderExt_RU::salesAgreementHeader(this.AgreementHeaderExt_RU).canReleaseAgreement(this.InvoiceDate) != true)
                            {
                                ret = checkFailed(strFmt("@GLS221056", fieldPName(CustInvoiceTable, InvoiceDate)));
                            }
                        }
                    }
                    break;
                // </GEERU>

                case fieldNum(CustInvoiceTable, AccountingDistributionTemplate):
                    ret = PurchLine::isTemplateIdPresentInReferenceTable(this.AccountingDistributionTemplate);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the due date is valid.
    /// </summary>
    /// <returns>true if the due date is valid; otherwise, false</returns>
    public boolean validateDueDate()
    {
        if(!this.isDueDateValid())
        {
            return checkFailed("@SYS152778");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDueDateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if due date is valid, when compared to invoice date.
    /// </summary>
    /// <returns>True if due date is valid; false otherwise.</returns>
    protected boolean isDueDateValid()
    {
        return (this.DueDate >= this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that cash payment and payment schedules are not consolidated.
    /// </summary>
    /// <returns>true if cash payment and payment schedules are not consolidated; otherwise, false</returns>
    public boolean validatePayment()
    {
        if (PaymTerm::isCashAccount(this.Payment) && this.PaymentSched )
        {
            return checkFailed("@SYS27358");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the discount date is valid.
    /// </summary>
    /// <returns>true if the discount date is valid; otherwise, false</returns>
    public boolean validateDiscountDate()
    {
        if (this.CashDiscDate && this.CashDiscDate < this.InvoiceDate)
        {
            return checkFailed("@SYS152780");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified <c>ReasonCode</c> is valid.
    /// </summary>
    /// <param name = "_reasonCode">The reason code to validate</param>
    /// <returns>true if the specified <c>ReasonCode</c> is valid, otherwise, false</returns>
    public boolean validateReasonCode(ReasonCode _reasonCode)
    {
        ReasonTable         reasonTable;
        LedgerJournalACType ledgerAccountType;
        LedgerJournalACType acttype;

        if (_reasonCode)
        {
            // General validation if Reason code is used.
            reasonTable = ReasonTable::find(_reasonCode);

            if (reasonTable.RecId == 0)
            {
                return checkFailed(strFmt("@SYS112224", _reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
            }

            acttype = LedgerJournalACType::Cust;
            ledgerAccountType = LedgerJournalACType::Ledger;

            if (!ReasonFormTable::checkReasonCodeForAccountType(this.CorrectionReasonCode, acttype))
            {
                return checkFailed("@SYS115522");
            }

            if (!ReasonFormTable::checkReasonCodeForAccountType(this.CorrectionReasonCode, ledgerAccountType))
            {
                return checkFailed("@SYS115522");
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the invoice account is valid.
    /// </summary>
    /// <returns>true if the invoice account is valid; otherwise, false</returns>
    public boolean validateInvoiceAccount()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Changed "this" to "this.RecId != 0". A MCRCustPaymTotals cannot
            //  be created until the invoice has been saved. Using "this" as the
            //  conditional works inconsistently, and should not be used. Explicitly
            //  checking the RecId is reliable and so is preferable.
            if (this.RecId != 0
                && this.InvoiceAccount != this.orig().InvoiceAccount)
            {
                MCRCustPaymTotals mcrCustPaymTotals =
                    MCRCustPaymTotals::construct(this.TableId, this.RecId);

                if (!mcrCustPaymTotals.allowEditInvoiceAccount())
                {
                    return checkFailed("@MCR11248");
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        // <GEERU><GEEU>
        #isoCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        boolean countryRegion_LV = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]);
        boolean countryRegion_LTLV = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT,#isoLV]);
        // </GEEU></GEERU>

        ret = super();

        ret = ret && this.validatePayment();

        if (this.Touched)
        {
            ret = ret && this.checkCreditLimit();
            this.Touched = NoYes::No;
        }

        ret = ret && this.validateDueDate();

        ret = ret && this.validateDiscountDate();

        if (ret)
        {
            // Retrieve the Reason code from the reason reference table.
            ReasonCode reasonCode = ReasonTableRef::find(this.CorrectionReasonCode).Reason;

            ret = this.validateReasonCode(reasonCode);
        }

        if (ret)
        {
            ret = this.validateInvoiceAccount();
        }

        // <GEERU>
        if (ret
            && countryRegion_RU)
        {
            ret = CustVendInvoiceJour::checkCorrectionParameters_RU(this.CorrectedInvoiceId_RU,
                                                                    this.CorrectedInvoiceDate_RU,
                                                                    this.Correct_RU);
        }

        if (this.Posted
            && ret
            && countryRegion_RU)
        {
            ret = FactureJour_RU::checkCorrectionParameters(this.CorrectedFactureExternalId_RU,
                                                            this.CorrectedFactureDate_RU,
                                                            this.Correct_RU,
                                                            this.CorrectionType_RU);
        }
        // </GEERU>

        // <GEEU>
        if (!this.CurBankAccount_LV && !this.Posted)
        {
            BankAccountTable::checkDefaultGiroBank_W(this.CurrencyCode);
        }

        if (ret && countryRegion_LTLV && this.ManualNumbering_W)
        {
            if (countryRegion_LV)
            {
                if ((!this.DocNumberingCode_LT && ! this.ManualInvoiceID_W) || (this.DocNumberingCode_LT && this.ManualInvoiceID_W))
                {
                    ret = checkFailed(strFmt("@GLS112074",
                                             fieldPName(LtInvoiceAutoNumberingTable, NumberingCode),
                                             fieldPName(CustInvoiceTable, ManualInvoiceID_W)));
                }
            }
            else
            {
                if (!this.DocNumberingCode_LT)
                {
                    ret = checkFailed(strFmt("@SYS26332", fieldPName(LtInvoiceAutoNumberingTable, NumberingCode)));
                }
            }
        }

        if (ret && this.InclTax && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT,#isoHU]))
        {
            ret = this.validateExcludeTaxFromInvoice();
        }
        // </GEEU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalsWithoutTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the totals for the <c>CustInvoiceTable</c> record without taxes.
    /// </summary>
    /// <param name="_currentRecord">
    /// Either the <c>CustInvoiceLine</c> record or the <c>CustInvoiceTable</c> record that is active when
    /// the call was made.
    /// </param>
    /// <remarks>
    /// This call is made before distributing or modifying the distributions for a <c>CustInvoiceTable</c>
    /// record to make sure that the totals are correct.
    /// </remarks>
    public static void calculateTotalsWithoutTaxes(Common _currentRecord)
    {
        CustInvoiceLine custInvoiceLine;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        CustInvoiceTable custInvoiceTable;

        if (_currentRecord.TableId == tableNum(CustInvoiceLine))
        {
            custInvoiceLine = _currentRecord;
            custInvoiceTable = custInvoiceLine.custInvoiceTable();
        }
        else
        {
            custInvoiceTable = _currentRecord;
        }

        // If taxes have not been calculated yet then this call should not
        // result in taxes being calculated.
        custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
        custFreeInvoiceCalcTotals.calc(0, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custOpenInvoices</Name>
				<Source><![CDATA[
    static CustInvoiceTable custOpenInvoices(CustAccount custAccount, boolean update = false)
    {
        CustInvoiceTable custInvoiceTable;

        custInvoiceTable.selectForUpdate (update);

        select custInvoiceTable
               index hint OrderAccountIdx
               where custInvoiceTable.OrderAccount == custAccount &&
                     custInvoiceTable.Posted == NoYes::No;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustOpenInvoice</Name>
				<Source><![CDATA[
    static boolean existCustOpenInvoice(CustAccount custAccount)
    {
        CustInvoiceTable custInvoiceTable;

        return (select firstonly RecId from custInvoiceTable
                    index hint OrderAccountIdx
                    where custInvoiceTable.OrderAccount == custAccount &&
                          custInvoiceTable.Posted == NoYes::No).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record from the <c>CustInvoiceTable</c> table that is based on the customer account
    /// number and the invoice status.
    /// </summary>
    /// <param name="_accountNum">
    /// The customer account for which the record is found.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice ID for which the record is found.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date for which the record is found.
    /// </param>
    /// <returns>
    /// The buffer of the <c>CustInvoiceTable</c> table.
    /// </returns>

    public static CustInvoiceTable findPostedInvoice(
        CustAccount _accountNum,
        InvoiceId _invoiceId,
        TransDate _invoiceDate )
    {
        CustInvoiceTable custInvoiceTable;

        select firstonly custInvoiceTable
        where custInvoiceTable.OrderAccount == _accountNum &&
                custInvoiceTable.InvoiceId == _invoiceId &&
                custInvoiceTable.InvoiceDate == _invoiceDate &&
                custInvoiceTable.Posted == NoYes::Yes;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static CustInvoiceTable findRecId(RecId recId, boolean update = false)
    {
        CustInvoiceTable custInvoiceTable;

        custInvoiceTable.selectForUpdate(update);

        select firstonly custInvoiceTable
                index hint recid
            where custInvoiceTable.RecId == recId;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCorrectionReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a correction reason code against <c>ParentRecId</c> field.
    /// </summary>
    /// <param name = "_parentRecId">A <c>ParentRecId</c> record RecId.</param>
    /// <returns>Return correction reason code.</returns>
    internal static ReasonRefRecID findCorrectionReasonCode(RefRecId _parentRecId)
    {
        CustInvoiceTable custInvoiceTableCorrected = CustInvoiceTable::findRecId(CustRelatedInvoice::findByParentCustInvoiceInvoiceType(_parentRecId, InvoiceAssociationType::CorrectedInvoice).CustInvoice);

        return custInvoiceTableCorrected.CorrectionReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a free text invoice header record with a given external invoice id.
    /// </summary>
    /// <param name = "_externalInvoiceId">The id of the external invoice.</param>
    /// <param name = "_update">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>CustInvoiceTable</c> table; otherwise, an empty record.</returns>
    public static CustInvoiceTable findExternalInvoiceId(CustomerExternalInvoiceId _externalInvoiceId, boolean _update = false)
    {
        CustInvoiceTable custInvoiceTable;

        custInvoiceTable.selectForUpdate(_update);

        select firstonly custInvoiceTable
            where custInvoiceTable.ExternalInvoiceId == _externalInvoiceId;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustInvoiceTable</c> record by the specified <c>SourceDocument</c> record.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// A <c>SourceDocument</c> record ID.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceTable</c> record.
    /// </returns>
    public static CustInvoiceTable findSourceDocumentHeader(
        RefRecId _sourceDocumentHeader)
    {
        CustInvoiceTable custInvoiceTable;

        select firstonly custInvoiceTable
            where custInvoiceTable.SourceDocumentHeader == _sourceDocumentHeader;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustInvoiceTable</c> record by using the specified <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A <c>SourceDocumentLine</c> record ID.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceTable</c> record.
    /// </returns>
    public static CustInvoiceTable findSourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        CustInvoiceTable custInvoiceTable;

        select firstonly custInvoiceTable
            where custInvoiceTable.SourceDocumentLine == _sourceDocumentLine;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInActiveWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the invoice is in an active workflow.
    /// </summary>
    /// <param name="_freeTextInvoiceRecId">
    /// The record ID of the table that is associated with the workflow.
    /// </param>
    /// <returns>
    /// true if the invoice is in an active workflow; otherwise, false.
    /// </returns>
    public static boolean isInActiveWorkflow(RecId _freeTextInvoiceRecId)
    {
        CustInvoiceTable custInvoiceTableLocal;
        boolean isInActiveWorkflow;

        if (_freeTextInvoiceRecId)
        {
            // Refind the customer free text invoice because the customer free text invoice list page
            // data source may not have all the fields selected.
            custInvoiceTableLocal = CustInvoiceTable::findRecId(_freeTextInvoiceRecId);

            isInActiveWorkflow = (custInvoiceTableLocal.WorkflowApprovalState != CustFreeInvoiceWFApprovalState::WorkflowCompleted &&
                custInvoiceTableLocal.WorkflowApprovalState != CustFreeInvoiceWFApprovalState::NotSubmitted);
        }

        return isInActiveWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentDueDateServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the due date for a specified transaction header.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// A <c>CustInvoiceTable</c> record for the header transaction.
    /// </param>
    /// <returns>
    /// The due date for the header transaction.
    /// </returns>
    static DueDate paymentDueDateServer(CustInvoiceTable _custInvoiceTable)
    {
        #isoCountryRegionCodes
        DueDate dueDate;
        TransDate transDate;
        PaymTerm paymTerm;
        PaymDueDateLimit_ES paymDueDateLimit;
        PaymCalendarProcessor paymCalendarProcessor;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;
        boolean isSpainEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]);

        paymTerm = PaymTerm::find(_custInvoiceTable.Payment);
        if (isSpainEnabled)
        {
            paymDueDateLimit = PaymDueDateLimit_ES::getCurrentValues(paymTerm.DueDateLimitGroupId_ES);
        }

        if (isSpainEnabled && paymTerm.UseDeliveryDateForDueDate_ES)
        {
            transDate = _custInvoiceTable.DeliveryDate_ES;
            if (!transDate)
            {
                return dateNull();
            }
        }
        else if (_custInvoiceTable.CashDiscBaseDate)
        {
            transDate = _custInvoiceTable.CashDiscBaseDate;
        }
        else
        {
            transDate = _custInvoiceTable.DocumentDate ? _custInvoiceTable.DocumentDate : _custInvoiceTable.InvoiceDate;
        }

        dueDate = paymTerm.due(transDate, _custInvoiceTable.paymDayId(), false, paymDueDateLimit);

        if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar))
            && paymTerm.CustomerUpdateDueDate != PaymentDueDateUpdatePolicy::NoUpdate)
        {
            paymCalendarProcessor = PaymCalendarProcessor::construct();
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(_custInvoiceTable);
            dueDate = paymCalendarProcessor.adjustDate(dueDate, paymTerm.CustomerUpdateDueDate, custFreeInvoiceCalcTotals);
        }

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    static boolean promptConvertCurrencyCode()
    {
        return (Box::okCancel("@SYS54756", DialogButton::Ok) == DialogButton::Ok);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCodeMethodToUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the dialog box that contains currency code conversion options.
    /// </summary>
    /// <returns>
    /// A container that contains a currency code conversion option that is selected by the user.
    /// </returns>
    public static container promptConvertCurrencyCodeMethodToUse()
    {
        Dialog dialog;
        DialogField dialogField;
        FormBuildRadioControl radioControl;

        dialog = new Dialog("@SPS41");
        dialog.addText("@SPS42");

        if (CustParameters::isBillingClassificationEnabled())
        {
            dialogField = dialog.addField(enumStr(CustInvoiceChangeCurrencyOption));
        }
        else
        {
            dialogField = dialog.addField(enumStr(CustInvoiceChangeCurrencyOption));
            radioControl = dialogField.control();
            radioControl.hideFirstEntry(true);
            radioControl.selection(1);
        }

        if (dialog.run())
            return [NoYes::Yes, dialogField.value()];

        return [NoYes::No, CustInvoiceChangeCurrencyOption::CalculateWithNewRate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WorkflowApprovalState</c> and <c>WorkflowApprovalStatus</c> fields of the
    /// <c>CustInvoiceTable</c> table, depending on the workflow events that have occurred.
    /// </summary>
    /// <param name="_freeTextInvoiceRecId">
    /// The record ID of the table which is associated with the workflow.
    /// </param>
    /// <param name="_freeTextInvoiceWorkflowState">
    /// The workflow state to be set.
    /// </param>
    /// <remarks>
    /// The method is called from the workflow event handler classes.
    /// </remarks>
    public static void setWorkflowState(RecId _freeTextInvoiceRecId,
                                 CustFreeInvoiceWFApprovalState _freeTextInvoiceWorkflowState)
    {
        CustInvoiceTable custInvoiceTable;

        ttsbegin;

        custInvoiceTable = CustInvoiceTable::findRecId(_freeTextInvoiceRecId,true);
        custInvoiceTable.WorkflowApprovalState = _freeTextInvoiceWorkflowState;

        switch (_freeTextInvoiceWorkflowState)
        {
            case CustFreeInvoiceWFApprovalState::Submitted:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Submitted;
                break;

            case CustFreeInvoiceWFApprovalState::NotSubmitted:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Draft;
                break;

            case CustFreeInvoiceWFApprovalState::PendingComplete:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::PendingCompletion;
                break;

            case CustFreeInvoiceWFApprovalState::Completed:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Completed;
                break;

            case CustFreeInvoiceWFApprovalState::PendingApproval:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::PendingApproval;
                break;

            case CustFreeInvoiceWFApprovalState::Approved:
            case CustFreeInvoiceWFApprovalState::WorkflowCompleted:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Approved;
                break;

            case CustFreeInvoiceWFApprovalState::Returned:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Rejected;
                break;

            case CustFreeInvoiceWFApprovalState::ChangeRequest:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::ChangeRequested;
                break;

            case CustFreeInvoiceWFApprovalState::PendingCancellation:
                custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::PendingCancellation;
                break;

            default:
                break;
        }

        custInvoiceTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subLedgerJournalizationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the status of the <c>SubLedgerJournalLine</c> record.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The record ID of the <c>CustInvoiceTable</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>SubLedgerJournalLine</c> record must be created; otherwise, false.
    /// </returns>
    static public boolean subLedgerJournalizationRequired(RefRecId _custInvoiceTable)
    {
        CustInvoiceTable custInvoiceTable;

        custInvoiceTable = CustInvoiceTable::findRecId(_custInvoiceTable);

        if (custInvoiceTable.SubLedgerJournalStatus == SubLedgerJournalStatus::Required)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginalInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if invoice is an original invoice.
    /// </summary>
    /// <param name = "_custInvoiceTable">
    /// The invoice to check.
    /// </param>
    /// <returns>
    /// true if original invoice; otherwise, false.
    /// </returns>
    public static boolean isOriginalInvoice(CustInvoiceTable _custInvoiceTable)
    {
        CustRelatedInvoice custRelatedInvoice;
        boolean isOriginal = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(FreeTextInvoiceCorrection)))
        {
            custRelatedInvoice = custRelatedInvoice::findByCustInvoice(_custInvoiceTable.RecId);

            if (custRelatedInvoice)
            {
                if (custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::OriginalInvoice ||
                    custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::CorrectedInvoice )
                {
                    isOriginal = true;
                }
                else
                {
                    isOriginal = false;
                }
            }
        }

        return isOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDate_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that posting date is not later than the current system date.
    /// </summary>
    /// <returns>
    /// True if the validates successfully otherwise false.
    /// </returns>
    public boolean checkDate_FR()
    {
        boolean ret = true;
        if (this.invoiceDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            if (Box::okCancel(strfmt("@ChronologicalNumbering:InvoiceDateLaterThanCurrentDate", this.invoiceDate, this.invoiceAccount,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), DialogButton::Cancel) == DialogButton::Cancel)
            {
                ret = checkFailed("@SYS21533");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ProjTable status based on project stage rules.
    /// </summary>
    /// <returns>
    /// True if the validates successfully otherwise false.
    /// </returns>
    public boolean validateProjectStatus()
    {
        CustInvoiceLine custInvoiceLine;
        ProjTable projTable;

        while select projTable
            exists join ProjId, ParentRecId from custInvoiceLine
                where custInvoiceLine.ParentRecId == this.RecId
                    && custInvoiceLine.ProjId == projTable.ProjId
        {
            if (!projTable.status().checkRule(ProjStatusRule::CreateInvoiceProposal))
            {
                return checkFailed(strFmt("@SPS796", projTable.Stage()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the invoice can be posted.
    /// </summary>
    /// <returns>true if the invoice can be posted; otherwise, false</returns>
    public boolean canPost()
    {
        #ISOCountryRegionCodes

        boolean workflowEnabled(WorkflowTypeName _workflowType)
        {
            // workflow is considered enabled if there is a default template or
            // there is an active template defined for the given workflow type
            return (select firstonly RecId from WorkflowTable
                        where WorkflowTable.TemplateName == _workflowType
                           && WorkflowTable.DefaultConfiguration == NoYes::Yes
                           && WorkflowTable.DataArea == curExt()).RecId ||
                    WorkflowTable::findActiveTemplate(_workflowType);
        }

        if (// the invoice has been saved
            this.RecId &&
            // the invoice is not in process or already posted
            this.isEditable() &&
            // the invoice is running in Russian context or is not part of a recurrence invoice
            (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) || !RecurrenceInvoice::existsByCustInvoiceTable(this.RecId)))
        {
            if (this.WorkflowApprovalStatus || workflowEnabled(workflowTypeStr(CustFreeTextInvoiceTemplate)))
            {
                WorkflowTable workflowTableFieldList;
                WorkflowVersionTable workflowVersionTable;

                select firstonly RecId from workflowVersionTable
                    where workflowVersionTable.Enabled == NoYes::Yes
                    exists join workflowTableFieldList
                        where workflowTableFieldList.RecId == workflowVersionTable.WorkflowTable
                            && workflowTableFieldList.TemplateName == workflowTypeStr(CustFreeTextInvoiceTemplate)
                            && workflowTableFieldList.DefaultConfiguration == NoYes::Yes
                            && workflowTableFieldList.DataArea == curExt();

                // the invoice is part of workflow or was created outside a workflow
                return (this.WorkflowApprovalStatus == CustFreeInvoiceWFApprovalStatus::Approved || !this.WorkflowApprovalStatus || !workflowVersionTable);
            }
            else
            {
                // the invoice is not part of workflow
                return strLen(this.OrderAccount) > 0;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer delivery address associated with the customer delivery location on the
    /// <c>CustInvoiceTable</c> table.
    /// </summary>
    /// <returns>
    /// The delivery address.
    /// </returns>
    /// <remarks>
    /// The current date effective delivery address is always returned.
    /// </remarks>
    public display LogisticsAddressing displayDeliveryAddress()
    {
        if (!hasFieldAccess(tableNum(LogisticsPostalAddress), fieldNum(LogisticsPostalAddress, Address), AccessType::View))
        {
            error("@SYS57330");
        }

        return Dirutility::replaceAddressTokenLanguage((LogisticsPostalAddress::findByLocation(LogisticsLocation::find(this.DeliveryLocation).Recid)), this.LanguageId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:CustInvoiceTableTaxDocumentRowDisplayFormat", this.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymSchedTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the total of the <c>CustPaymSched</c> against the total of
    /// <c>CustInvoiceTable</c> document
    /// </summary>
    /// <param name="_custPaymSched">
    /// <c>CustPaymSched</c> to check against, if null retrieves the <c>CustPaymSched</c>
    /// related to this <c>CustInvoiceTable</c> record
    /// </param>
    /// <returns>
    /// true if the totals match or if no <c>CustPaymSched</c> is found; otherwise false
    /// </returns>
    public boolean validatePaymSchedTotals(CustPaymSched _custPaymSched = null)
    {
        AmountCur totalAmount;
        boolean valid = true;
        CustPaymSched custPaymSched = (_custPaymSched ? _custPaymSched : CustPaymSched::find(this.TableId, this.RecId));

        if (custPaymSched)
        {
            CustFreeInvoiceCalcTotals freeTextTotals = new CustFreeInvoiceCalcTotals(this);
            freeTextTotals.calc();

            //<GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::includeTCSInInvoiceAmount(freeTextTotals.taxWithhold_IN()))
                {
                    totalAmount = freeTextTotals.custFreeInvoiceInvoiceAmount() + CurrencyExchange::roundWithRuleType(
                        freeTextTotals.custFreeInvoiceTaxWithholdTotal_IN(),
                        this.CurrencyCode,
                        CurrencyRoundingRuleType::SalesOrder);
                }
                else
                {
                    totalAmount = freeTextTotals.custFreeInvoiceInvoiceAmount() + freeTextTotals.custFreeInvoiceTaxWithholdTotal_IN();
                }
            }
            else
            {
                //</GIN>
                totalAmount = freeTextTotals.custFreeInvoiceInvoiceAmount();
            }

            valid = (custPaymSched.paymScheduleAmount() == totalAmount);
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a default invoice date.
    /// </summary>
    /// <returns>Default invoice date.</returns>
    public static TransDate getDefaultInvoiceDate()
    {
        TransDate defaultInvoiceDate;

        if (CustParameters::find().FreeTextInvoiceTimezonePreference == SalesDocumentTimezonePreference::LegalEntity)
        {
            defaultInvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getCompanyTimezone());
        }
        else
        {
            defaultInvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return defaultInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExchRateForReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate.
    /// </summary>
    /// <param name = "_date">
    /// Exchange rate date.
    /// </param>
    /// <returns>
    /// The exchange rate value from the record of <c>ExchangeRate</c> table.
    /// </returns>
    display ReportingCurrencyExchRate displayExchRateForReportingCurrency(date _date = this.getExchangeRateDate())
    {
        if (this.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

            return exchangeRateHelper.displayStoredExchangeRate(this.getReportingCurrencyExchRate(_date));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExchRateSecondForReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency second exchange rate.
    /// </summary>
    /// <param name = "_date">
    /// Exchange rate date.
    /// </param>
    /// <returns>
    /// The second exchange rate value from the record of <c>ExchangeRate</c> table.
    /// </returns>
    display ReportingCurrencyExchRateSecondary displayExchRateSecondForReportingCurrency(date _date = this.getExchangeRateDate())
    {
        if (this.CurrencyCode)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);

            return exchangeRateHelper.displayStoredExchangeRate(this.getReportingCurrencyExchRateSecondary(_date));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the accounting distributions for the <c>CustInvoiceTable</c> transaction.
    /// </summary>
    /// <returns>
    /// true if the distributions are valid; otherwise false.
    /// </returns>
    internal boolean validateAccountingDistributions()
    {
        return SourceDocumentProvider::areSourceDocAccDistAccountValid(SourceDocumentHeader::find(this.SourceDocumentHeader), true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowEnabledForFreeTextInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the default workflow configuration corresponding to the free text invoice template.
    /// </summary>
    /// <returns>
    /// True if workflow setup exists for free text invoice; otherwise, false.
    /// </returns>
    internal boolean isWorkflowEnabledForFreeTextInvoice()
    {
        WorkflowTable workflowTableFieldList;
        WorkflowVersionTable workflowVersionTable;

        select firstonly DefaultConfiguration, RecId from workflowTableFieldList
            where workflowTableFieldList.TemplateName == workflowTypeStr(CustFreeTextInvoiceTemplate)
                && workflowTableFieldList.DefaultConfiguration == NoYes::Yes
                && workflowTableFieldList.DataArea == curExt()
            exists join workflowVersionTable
                where workflowVersionTable.workflowTable == workflowTableFieldList.RecId
                && workflowVersionTable.Enabled == NoYes::Yes;

        return (WorkflowTable::findActiveTemplate(workflowTypeStr(CustFreeTextInvoiceTemplate))
                && workflowTableFieldList
                && this.WorkflowApprovalStatus != CustFreeInvoiceWFApprovalStatus::Rejected
                && this.WorkflowApprovalStatus != CustFreeInvoiceWFApprovalStatus::ChangeRequested
                && this.WorkflowApprovalStatus != CustFreeInvoiceWFApprovalStatus::PendingCompletion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueForWithTaxPayment_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the value of the tax with payment field
    /// </summary>
    public void defaultValueForWithTaxPayment_IN()
    {
        TaxGSTEPZCodeHelper taxGSTEPZCodeHelper = TaxGSTEPZCodeHelper::construct(this);
        this.WithIGSTPayment_IN = taxGSTEPZCodeHelper.isEPZCodeNotNone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueForWouldYouClaimRefund_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the value of the would you claim refund field.
    /// </summary>
    public void defaultValueForWouldYouClaimRefund_IN()
    {
        this.WouldYouClaimRefund_IN = this.WithIGSTPayment_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOverrideSalesTax</Name>
				<Source><![CDATA[
    private void defaultOverrideSalesTax(CustTable _custTable, CustParameters _custParameters)
    {
        this.OverrideSalesTax = _custTable.OverrideSalesTax || _custParameters.OverrideSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the export order value from free text invoice line.
    /// </summary>
    /// <returns>
    /// The export order value.
    /// </returns>
    public NoYes isExportOrder_IN()
    {
        CustInvoiceLine custInvoiceLine;

        select firstonly RecId from custInvoiceLine
            where custInvoiceLine.ParentRecId == this.RecId;

        TransTaxInformation transTaxInformation = TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(custInvoiceLine);

        return transTaxInformation.CustomsExportOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excludes the tax amount for each customer invoice line based on <c>CustInvoiceTable</c> record.
    /// </summary>
    /// <param name = "_recId">
    /// A record in the <c>CustInvoiceTable</c> table.
    /// </param>
    /// <returns>
    /// Total balance amount excluding tax charges.
    /// </returns>
    internal AmountCur amountExclTax(RecId _recId)
    {
        CustInvoiceLine custInvoiceLine;
        AmountCur amountCur = 0;

        while select custInvoiceLine
            where custInvoiceLine.ParentRecId == _recId
        {
            amountCur += custInvoiceLine.amountExclTax_W();
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIntegrationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether Tax Integration is enabled for specified business process.
    /// </summary>
    /// <returns>
    /// True if enable tax integration for FTI or Project, otherwise, false.
    /// </returns>
    internal boolean isTaxIntegrationEnabled()
    {
        TaxIntegrationBusinessProcess businessProcess = 
            TaxIntegrationUtils::getBusinessProcessByTable(this.TableId, this.RecId);

        return Tax::isTaxIntegrationEnabledForBusinessProcess(businessProcess);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124532</DeveloperDocumentation>
	<FormRef>CustInvoiceJournal</FormRef>
	<Label>@SYS60858</Label>
	<SingularLabel>@SYS98630</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>InvoiceId</TitleField1>
	<TitleField2>InvoiceAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InvoiceAccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustRelatedInvoice</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustRelatedInvoice</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PrintMgmtDocInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PrintMgmtDocInstance</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TaxWorkRegulation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWorkRegulation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RecurrenceInvoice</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingDistributionTemplate</Name>
			<Label>@sys300391</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowApprovalStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement_RU</Name>
			<Label>@SYS15240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementHeaderExt_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankAccounts_LV</Name>
			<Label>@SYS21829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankAccount_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurBankAccount_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBankAccount_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillingClassification</Name>
			<Label>@SPS337</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ComplementaryInvoice</Name>
			<Label>@GLS131</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComplementedInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceComplementaryType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CorrectedInvoice</Name>
			<Label>@SYS23845</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectionReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustingInvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction_RU</Name>
			<Label>@SYS13069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectionType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Correct_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedInvoiceId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedInvoiceDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedFactureExternalId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedFactureDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayExchRateSecondary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>exchRateTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeCustomer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS101280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Einvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceLineSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalDocType_PL</Name>
			<Label>@GLS109781</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocType_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFPSId_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPurchOperationType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustFinalUser_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PresenceType_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiroMoneyTransferSlip</Name>
			<Label>@SYS2723</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscBaseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate_ES</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonRealRevenue_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VatDueDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostponeVAT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintOverdueFineTxt_FR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAccount</Name>
			<Label>@SYS21836</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceId</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@SYS2515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRGiftCard</Name>
			<Label>@MCR30166</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRGiftCard</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MCRSalesID</Name>
			<Label>@MCR12613</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRSalesID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NotificationToTheCentralBank</Name>
			<Label>@SYS67156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsignorAccount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsigneeAccount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectDebitMandate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProvisionalAssessment_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOnPayment_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualNumbering_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocNumberingCode_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualInvoiceID_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostingRelease</Name>
			<Label>@SYS114594</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchOrderFormNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VatDueDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Services_BR</Name>
			<Label>@SYS35620</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCodeOnDlvAddress_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentHeader</Name>
			<Label>@SYS314386</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubLedgerJournalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Touched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax_IN</Name>
			<Label>@SYS33817</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NatureOfAssessee_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TDSGroup_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TCSGroup_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS54744</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayInvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCustomerReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayWorkflowSubmitter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayInvoiceLineDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayInvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRequiredAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayRequiredActionDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayMostRecentComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATPaymMethod_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATPurpose_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATIncotermCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceCFDIConfirmNumber_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignTrade_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalAddress_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumRegIdTrib_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceCertificate_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithIGSTPayment_IN</Name>
			<Label>@TaxGSTSEZ:WithIGSTPayment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithIGSTPayment_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WouldYouClaimRefund_IN</Name>
			<Label>@TaxGSTSEZ:WouldYouClaimRefund_IN</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WouldYouClaimRefund_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATNum</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumTableType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Label>@GLS5362</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
			<Label>@SYS300391</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AdjustingInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementHeaderExt_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AgreementHeaderExtRecId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccount_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL</CountryRegionCodes>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@GLS220786</Label>
			<RelationContext>BankAccount_LV</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscBaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CashDiscBaseDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDays</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber_MX</Name>
			<ExtendedDataType>CertificateNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFOPTable_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS200</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CFPSId_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CFPSId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ComplementedInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsigneeAccount_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccountConsignee_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsignorAccount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccountConsignor_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correct_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Correct_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedFactureDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureDate_RU</ExtendedDataType>
			<Label>@GLS104542</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectedFactureExternalId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FactureExternalId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedInvoiceDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedInvoiceDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectedInvoiceId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedInvoiceId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS111794</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CorrectionReasonCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CorrectionType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FactureCorrectionType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
			<Label>@SYS5727</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurBankAccount_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL</CountryRegionCodes>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@GLS108456</Label>
			<RelationContext>CurBankAccount_LV</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustBankAccount_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LV</CountryRegionCodes>
			<ExtendedDataType>CustBankAccountId</ExtendedDataType>
			<Label>@SYS24208</Label>
			<RelationContext>CustBankAccount_LV</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingClassification</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS371</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustFinalUser_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendFinalUser_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustGroupId</ExtendedDataType>
			<Label>@SYS3815</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate_ES</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES,HU</CountryRegionCodes>
			<ExtendedDataType>LedgerJournalDlvDate_ES</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryLocation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirectDebitMandate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustDirectDebitMandateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocNumberingCode_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtDocNumberingCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
			<Label>@SYS14021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EInvoiceLineSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceLineSpecific</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate_W</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,RU</CountryRegionCodes>
			<ExtendedDataType>CustExchRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FineCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>CustFineCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalAddress_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<Label>@MexicoCFDI:FiscalAddress</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FiscalDocType_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<EnumType>PlFiscalDocType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentType_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FiscalDocumentTypeRecID_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishment_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignTrade_MX</Name>
			<ExtendedDataType>ForeignTrade_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForInterestAdjustment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubInvoiceId</ExtendedDataType>
			<Label>@SYS104461</Label>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyPosted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>CustInterestCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceComplementaryType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>InvoiceComplementaryType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ManualInvoiceID_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@GLS221137</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualNumbering_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtInvoiceAutoNumbering</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCRGiftCard</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>MCRPayment</ConfigurationKey>
			<Label>@MCR30166</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRLedgerVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRNumberSequenceCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRSalesID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsInvoiceName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NatureOfAssessee_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NatureOfAssessee_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NonRealRevenue_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NonRealRevenue_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>numberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumRegIdTrib_MX</Name>
			<ExtendedDataType>NumRegIdTrib_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeCustomer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OneTimeCustomer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Posted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostponeVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicVatDueDate_W</ConfigurationKey>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>CzPostponeVAT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PresenceType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EFDocPresenceType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintOverdueFineTxt_FR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PrintOverdueFineTxt_FR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjIntercompany</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchOrderFormNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ReleaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostReleaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesPurchOperationType_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesPurchOperationTypeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATIncotermCode_MX</Name>
			<ExtendedDataType>SATIncoterm_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPaymMethod_MX</Name>
			<ExtendedDataType>SATPaymMethod_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPurpose_MX</Name>
			<ExtendedDataType>SATPurpose_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceCodeOnDlvAddress_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeOnDlvAddress_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS314386</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS319494</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SourceCertificate_MX</Name>
			<ExtendedDataType>SourceCertificate_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SubLedgerJournalStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SubLedgerJournalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<GroupPrompt>@SYS21919</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdCalculate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSGroup_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Label>@GLS5363</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Touched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeTouched</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitedVATInvoice_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitedVATInvoice_LT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VatDueDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VatDueDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATOnPayment_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATOnPayment_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesTaker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTaker</ExtendedDataType>
			<Label>@SYS4466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowApprovalState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>CustFreeInvoiceWFApprovalState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowApprovalStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustFreeInvoiceWFApprovalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OrderAccountRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,RU,IN</CountryRegionCodes>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceCFDIConfirmNumber_MX</Name>
			<ExtendedDataType>EInvoiceCFDIConfirmNumber_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProvisionalAssessment_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfProvisionalAssessment</HelpText>
			<Label>@TaxGST:ProvisionalAssessment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>CustomerExternalInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerInvoiceOriginId</Name>
			<ExtendedDataType>CustomerInvoiceOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WithIGSTPayment_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGSTSEZ:WithIGSTPayment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WouldYouClaimRefund_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGSTSEZ:WouldYouClaimRefund_IN</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseDefaultFromCustomer</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS314829</Label>
			<Visible>No</Visible>
			<EnumType>CustRecurrenceInvoiceDefaultType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExcludeFromDecoupledPostingProcess</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<FeatureClass>EnableEnhancedDelaySDAFJournalizerForSourceDocuments</FeatureClass>
			<Label>@AccountsReceivable:CustInvoiceTableExcludeFromDecoupledPostingProcess</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InvoiceAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Posted</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Posted</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountingDistributionTemplateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountingDistributionTemplate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerSalesTakerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalDocumentType_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalDocumentType_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustBillingClassificationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustBillingClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesPurchOperationType_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesPurchOperationType_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalEstablishment_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AgreementHeaderExt_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementHeaderExt_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomerInvoiceOriginIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomerInvoiceOriginId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExternalInvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalInvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceAddressMap_TH</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoicePostalAddress</MapField>
					<MapFieldTo>PostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FiscalDocumentTextUpdateTableMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxIntgrExportDocSourcePostingMap_CN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CustBankAccountId</MapField>
					<MapFieldTo>CustBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATInvoiceDescTable</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceOrderAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>Listcode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
					<MapFieldTo>Posted</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExemptVATNumMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AgreementHeaderExt_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementHeaderExt_RU</Name>
					<Field>AgreementHeaderExt_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankAccount_LV</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccount_LV</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankAccount_LV</Name>
					<Field>BankAccount_LV</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<SourceEDT>BankCentralBankPurposeCode</SourceEDT>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>CustCashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFOPTable_BR</Name>
					<Field>CFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CurBankAccount_LV</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CurBankAccount_LV</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurBankAccount_LV</Name>
					<Field>CurBankAccount_LV</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<Field>InvoiceAccount</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBankAccountId</Name>
					<Field>CustBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount_LV</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBankAccount_LV</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<Field>InvoiceAccount</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBankAccount_LV</Name>
					<Field>CustBankAccount_LV</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingClassification</Name>
					<Field>CustBillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustDirectDebitMandate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustDirectDebitMandate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirectDebitMandate</Name>
					<Field>DirectDebitMandate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustFineCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustFineSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FineCode_BR</Name>
					<Field>FineCode_BR</Field>
					<RelatedField>FineCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FineCode</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustGroup</Name>
					<SourceEDT>CustGroupId</SourceEDT>
					<Field>CustGroup</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInterestCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustInterestSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestCode_BR</Name>
					<Field>InterestCode_BR</Field>
					<RelatedField>InterestCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InterestCode</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<SourceEDT>CustInvoiceId</SourceEDT>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableRole>CustInvoiceTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustPaymModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>CustPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_InvoiceAmount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_InvoiceAmount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_OrderAmount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_OrderAmount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsigneeAccount_RU</Name>
					<SourceEDT>CustAccountConsignee_RU</SourceEDT>
					<Field>ConsigneeAccount_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryLocation_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryLocation_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryLocation</Name>
					<Field>DeliveryLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>CustDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocumentType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentType_BR</Name>
					<Field>FiscalDocumentType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalEstablishment_BR</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>FiscalEstablishment_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalEstablishment_BR</Name>
					<Field>FiscalEstablishment_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRNumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRNumberSequenceCode</Name>
					<Field>MCRNumberSequenceCode</Field>
					<RelatedField>NumberSequence</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MCRSalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MCRSalesID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SalesID</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRSalesID</Name>
					<Field>MCRSalesID</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroup</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>numberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>CustPaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostalAddress</Name>
					<Field>PostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CorrectionReasonCode</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>CorrectionReasonCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesPurchOperationType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesPurchOperationType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPurchOperationType_BR</Name>
					<Field>SalesPurchOperationType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeadingTCS_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdGroupHeading_1_CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TCSGroup_IN</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TCSGroup_IN</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeadingTDS_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdGroupHeading_CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TDSGroup_IN</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TDSGroup_IN</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsignorAccount_RU</Name>
					<SourceEDT>VendAccountConsignor_RU</SourceEDT>
					<Field>ConsignorAccount_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesTaker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkerSalesTaker_CustInvoiceTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesTaker</Name>
					<Field>WorkerSalesTaker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_OrderAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrderAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccountRefRecId</Name>
					<Field>OrderAccountRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPaymMethod_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTablePaymMethod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPaymMethod_MX</Name>
					<Field>SATPaymMethod_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>4</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPurpose_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ExtCodeTablePurpose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPurpose_MX</Name>
					<Field>SATPurpose_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>3</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomerInvoiceOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomerInvoiceOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerInvoiceOriginId</Name>
					<Field>CustomerInvoiceOriginId</Field>
					<RelatedField>OriginId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalAddress_MX</Name>
					<SourceEDT>LogisticsAddressCountryRegionId</SourceEDT>
					<Field>FiscalAddress_MX</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATIncoterm_MX</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATIncotermCode_MX</Name>
					<Field>SATIncotermCode_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<Value>5</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>