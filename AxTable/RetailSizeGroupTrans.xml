<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSizeGroupTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailSizeGroupTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSizeLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies and updates the length of bar code of the records that belong to the specified group.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// An error is thrown if the number in the bar code is longer than the specified length.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// An error is thrown if the number in bar code does not match with the length of number of bar codes
    /// for all codes present in the specified size group.
    /// </exception>
    void checkSizeLength()
    {
        RetailSizeGroupTrans   sizeGroupTrans,sizeGroupTrans2;
        int newLength, lengthOfOthers;
        str newNumber;

        select firstonly sizeGroupTrans
        where   sizeGroupTrans.SizeGroup == this.SizeGroup
        &&      sizeGroupTrans.Size != this.Size;

        if (sizeGroupTrans)
        {
            newLength = strLen(this.NoInBarcode);
            lengthOfOthers = strLen(sizeGroupTrans.NoInBarcode);
            if ((newLength > lengthOfOthers) && (lengthOfOthers != 0))
            {
                if (Box::yesNo("@RET4028"
                + "@RET3935",
                DialogButton::Yes,"@RET4029","@RET3936") == DialogButton::Yes)
                {
                    ttsbegin;
                    while select forupdate sizeGroupTrans2
                    where   sizeGroupTrans2.SizeGroup == this.SizeGroup
                    &&      sizeGroupTrans2.Size != this.Size
                    {
                        newNumber = strIns(sizeGroupTrans2.NoInBarcode,subStr('0000000000',1,(newLength - strLen(sizeGroupTrans2.NoInBarcode))),1);
                        sizeGroupTrans.NoInBarcode = newNumber;
                        sizeGroupTrans.update();
                        ttscommit;
                    }
                }
                else
                {
                    throw error(strFmt("@RET3937",lengthOfOthers));
                }
            }
            else
            {
                if (newLength < lengthOfOthers)
                {
                    throw error(strFmt("@RET4030",lengthOfOthers));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateVariantDescriptions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the variant descriptions for all variants of product masters in the SizeGroup.
    /// </summary>
    /// <remarks>
    ///     All existing variant descriptions related to the size group will be replaced.
    /// </remarks>
    public void generateVariantDescriptions()
    {
        EcoResProductMaster ecoResProductMaster;

        while select RecId from ecoResProductMaster
                where ecoResProductMaster.RetailSizeGroupId == this.SizeGroup
        {
            EcoResProductMaster::updateVariantDescriptions(ecoResProductMaster.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUpdateInventSize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts or updates the record into <c>EcoResProductMasterSize</c> table.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    /// <remarks>
    ///     This method is used to insert the records into <c>EcoResProductMasterSize</c> table if does not exist else update.
    /// </remarks>
    public boolean insertUpdateInventSize()
    {
        EcoResProductMaster     ecoResProductMaster;
        EcoResSize              ecoResSize;
        EcoResProduct           ecoResProduct;
        EcoResProductMasterSize ecoResProductMasterSize;

        ttsbegin;

        while select RetailSizeGroupId, RecId from ecoResProductMaster
                where ecoResProductMaster.RetailSizeGroupId == this.SizeGroup
        {
            // To check whether Size is existing or not into table EcoResProductMasterSize for particular product.
            select firstonly RecId from ecoResProduct
                where ecoResProduct.RecId == ecoResProductMaster.RecId
                 join forupdate ecoResProductMasterSize
                    where ecoResProductMasterSize.SizeProductMaster == ecoResProduct.RecId
                 join Name, RecId from ecoResSize
                    where ecoResSize.RecId == ecoResProductMasterSize.Size
                    &&    ecoResSize.Name  == this.Size;
            if (ecoResProductMasterSize.RecId)
            {
                this.populateSizeGroupProperties(ecoResProductMasterSize);
                ecoResProductMasterSize.update();
            }
            else
            {
                select firstonly Name from ecoResSize
                    where ecoResSize.Name == this.Size;
                if (ecoResSize)
                {
                    ecoResProductMasterSize.clear();
                    RetailSizeGroupTrans::populateInventSizeProperties(ecoResProductMasterSize, ecoResSize, ecoResProductMaster);
                    this.populateSizeGroupProperties(ecoResProductMasterSize);
                    ecoResProductMasterSize.insert();
                }
            }
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSizeGroupProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the given <c>EcoResProductMasterSize</c> record with the properties from <c>RetailSizeGroupTrans</c>.
    /// </summary>
    /// <param name = "_ecoResProductMasterSize">The <c>EcoResProductMasterSize</c> record to be updated.</param>
    public void populateSizeGroupProperties(EcoResProductMasterSize _ecoResProductMasterSize)
    {
        _ecoResProductMasterSize.RetailWeight       = this.Weight;
        _ecoResProductMasterSize.RetailDisplayOrder = this.DisplayOrder;

        if (!_ecoResProductMasterSize.noInBarcode)
        {
            _ecoResProductMasterSize.noInBarcode = this.noInBarcode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventSizeProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates an uninitialized <c>EcoResProductMasterSize</c> record.
    /// </summary>
    /// <param name = "_ecoResProductMasterSize">The <c>EcoResProductMasterSize</c> record to be updated.</param>
    /// <param name = "_ecoResSize">The <c>EcoResSize</c> that referenced by the size group.</param>
    /// <param name = "_ecoResProductMaster">The <c>EcoResProductMaster</c> that the size belongs to.</param>
    public static void populateInventSizeProperties(
        EcoResProductMasterSize _ecoResProductMasterSize,
        EcoResSize              _ecoResSize,
        EcoResProductMaster     _ecoResProductMaster)
    {
        _ecoResProductMasterSize.SizeProductDimensionAttribute    = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, InventSizeId));
        _ecoResProductMasterSize.Size                             = _ecoResSize.RecId;
        _ecoResProductMasterSize.SizeProductMaster                = _ecoResProductMaster.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        System.Text.RegularExpressions.Match regExMatch;
        str expectedFormat = '^#[a-fA-F0-9]{6}$';
        

        ret = super(_fieldIdToCheck);

        if (fieldExt2Id(_fieldIdToCheck) == fieldNum(RetailSizeGroupTrans, NoInBarcode))
        {
            ret = ret && this.validateNoInBarcode();
        }

        if (this.HexCode)
        {
            regExMatch = System.Text.RegularExpressions.Regex::Match(this.HexCode, expectedFormat);
            ret = regExMatch.get_Success();

            if (!ret)
            {
                ret = checkFailed("@Retail:RetailHexCodeValidationError");
            }

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoInBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the length of numbers in bar code of the current record is valid.
    /// </summary>
    /// <returns>
    /// true if the specified size has a different bar code value; otherwise, false.
    /// </returns>
    boolean validateNoInBarcode()
    {
        RetailSizeGroupTrans   sizeGroupTrans;

        if (this.NoInBarcode != "")
        {
            select firstonly sizeGroupTrans
            where   sizeGroupTrans.SizeGroup == this.SizeGroup
            &&      sizeGroupTrans.Size != this.Size
            &&      sizeGroupTrans.NoInBarcode == this.NoInBarcode;

            if (sizeGroupTrans)
            {
                return checkFailed(strFmt("@RET4031", this.Size));
            }

            this.checkSizeLength();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordHasChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record has changes.
    /// </summary>
    /// <returns>True if there are changes; otherwise, false.</returns>
    public boolean recordHasChanges()
    {
        return this.weight != this.orig().weight
            || this.DisplayOrder != this.orig().DisplayOrder
            || this.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record from the <c>EcoResProductMasterSize</c> table for all products using the given size group.
    /// </summary>
    /// <param name="_sizeGroupId">
    /// The size group ID number of the current record.
    /// </param>
    /// <param name="_sizeId">
    /// The size ID number of the current record.
    /// </param>
    /// <returns>
    /// true if the record is deleted successfully; otherwise, false.
    /// </returns>
    public static boolean deleteInventSize(RetailSizeGroupId _sizeGroupId, RetailSizeId _sizeId)
    {
        EcoResProductMaster     ecoResProductMaster;
        EcoResSize              ecoResSize;
        EcoResProduct           ecoResProduct;
        EcoResProductMasterSize ecoResProductMasterSize;

        while select RetailSizeGroupId, RecId from ecoResProductMaster
            where ecoResProductMaster.RetailSizeGroupId == _sizeGroupId
        {
            select firstonly RecId from ecoResProduct
                where ecoResProduct.RecId == ecoResProductMaster.RecId
                 join forupdate ecoResProductMasterSize
                    where ecoResProductMasterSize.SizeProductMaster == ecoResProduct.RecId
                 join Name, RecId from ecoResSize
                    where ecoResSize.RecId == ecoResProductMasterSize.Size
                    &&    ecoResSize.Name  == _sizeId;

            if (ecoResProductMasterSize)
            {
                if (ecoResProductMasterSize.validateDelete())
                {
                    ecoResProductMasterSize.delete();
                }
                else
                {
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailSizeGroupTrans</c> table.
    /// </summary>
    /// <param name="_groupId">
    /// The group ID number of the size group transaction to find.
    /// </param>
    /// <param name="_size">
    /// The size ID number of the transaction to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailSizeGroupTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailSizeGroupTrans find(RetailSizeGroupId   _groupId,
                                         RetailSizeId _size,
                                         boolean _forUpdate = false)
    {
        RetailSizeGroupTrans  sizeGroupTrans;

        if (_groupId && _size)
        {
            sizeGroupTrans.selectForUpdate(_forUpdate);

            select firstonly sizeGroupTrans
                index hint SizeGroupIdIdx
                where   sizeGroupTrans.SizeGroup == _groupId
                &&      sizeGroupTrans.Size == _size;
        }

        return sizeGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailSizeGroupTrans</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The reference record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailSizeGroupTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailSizeGroupTrans findByRecId(RefRecId _recId,
                                                   boolean  _forUpdate = false)
    {
        RetailSizeGroupTrans    retailSizeGroupTrans;
       
        if (_recId)
        {
            retailSizeGroupTrans.selectForUpdate(_forUpdate);

            select firstOnly retailSizeGroupTrans
                where retailSizeGroupTrans.RecId == _recId;
        }
    
        return retailSizeGroupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in <c>RetailSizeGroupTrans</c> table
    /// </summary>
    public void insert()
    {
        super();
    
        if (RetailMerchandisingKillSwitch::enableUpdateProductDimensionsInBatchJob())
        {
            RetailUpdateProductDimensionsWithVariantGroupsController::runFromSizeGroupTransTable(this.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>RetailSizeGroupTrans</c> table
    /// </summary>
    public void update()
    {
        if (RetailMerchandisingKillSwitch::enableUpdateProductDimensionsInBatchJob() && this.recordHasChanges())
        {
            RetailUpdateProductDimensionsWithVariantGroupsController::runFromSizeGroupTransTable(this.RecId);
        }
    
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>EcoResProductSize</ConfigurationKey>
	<DeveloperDocumentation>@RET6116</DeveloperDocumentation>
	<Label>@RET3174</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>sizeGroup</TitleField1>
	<TitleField2>size</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SizeGroupIdIdx</ClusteredIndex>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>SizeGroupIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sizeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>size</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sizeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>size</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sizeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>size</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>noInBarcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Barcode</Name>
			<Label>@RET3053</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>noInBarcode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET3040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>sizeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>size</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Weight</Name>
			<Label>@RET3055</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>weight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDisplayOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>noInBarcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailNoInBarcode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>size</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSizeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>sizeGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailSizeGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>RetailShortName</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Url</Name>
			<ExtendedDataType>MediaUrl</ExtendedDataType>
			<FeatureClass>RetailColorSwatchFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HexCode</Name>
			<ExtendedDataType>RetailHexCode</ExtendedDataType>
			<FeatureClass>RetailColorSwatchFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefinerGroup</Name>
			<ExtendedDataType>RetailRefinerGroup</ExtendedDataType>
			<FeatureClass>RetailColorSwatchFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SizeGroupIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>sizeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>size</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RetailDimensionGroupTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Dimension</MapField>
					<MapFieldTo>size</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DimensionGroup</MapField>
					<MapFieldTo>sizeGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DisplayOrder</MapField>
					<MapFieldTo>DisplayOrder</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>noInBarcode</MapField>
					<MapFieldTo>noInBarcode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>EcoResSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>EcoResSize</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>size</Name>
					<SourceEDT>RetailSizeId</SourceEDT>
					<Field>size</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailSizeGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailSizeGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>sizeGroup</Name>
					<SourceEDT>RetailSizeGroupId</SourceEDT>
					<Field>sizeGroup</Field>
					<RelatedField>sizeGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>