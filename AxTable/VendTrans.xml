<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>absRemainAmountMST</Name>
				<Source><![CDATA[
    display AmountMST absRemainAmountMST()
    {
        return abs(this.transData().remainAmountMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementDocumentTitle_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Document title of the Agreement for this transaction.
    /// </summary>
    /// <returns>
    /// The Document title of the Agreement.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AgreementDocumentTitle agreementDocumentTitle_RU()
    {
        return AgreementHeader::find(AgreementHeaderExt_RU::findByDefaultDimension(this.DefaultDimension).AgreementHeader).DocumentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Agreement Id from the DefaultDimension of this transaction.
    /// </summary>
    /// <returns>
    /// The Agreement Id.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AgreementId_RU agreementId_RU()
    {
        return AgreementHeaderExt_RU::findByDefaultDimension(this.DefaultDimension).AgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditCompanyBankAccountId</Name>
				<Source><![CDATA[
    public boolean allowEditCompanyBankAccountId()
    {
        return this.PromissoryNoteID == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditThirdPartyBankAccountId</Name>
				<Source><![CDATA[
    public boolean allowEditThirdPartyBankAccountId()
    {
        return this.PromissoryNoteID == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExchAdj</Name>
				<Source><![CDATA[
    display AmountMST amountExchAdj()
    {
        return this.transData().amountExchAdj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExchAdjReportingCurrency</Name>
				<Source><![CDATA[
    display AmountMSTSecondary amountExchAdjReportingCurrency()
    {
        return this.transData().amountExchAdjReportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankCurrencyTransferId_RU</Name>
				<Source><![CDATA[
    public BankCurrencyTransferId_RU bankCurrencyTransferId_RU()
    {
        return this.vendTrans_W().BankCurrencyTransferId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount clearingLedgerDimension()
    {
        return VendLedgerAccounts::clearingLedgerDimension(this.AccountNum, this.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    display ClearingPeriod clearingPeriod()
    {
        return VendTable::find(this.AccountNum).clearingPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>commPrepaymUsedAmount_RU</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display public AmountMST commPrepaymUsedAmount_RU()
    {
        return this.CustVendTrans::getCommPrepaymentUsedAmount_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        super();

        smmTransLog::initTrans(this, smmLogAction::delete);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispConsId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays consolidation invoice Id for this transaction.
    /// </summary>
    /// <returns>
    /// Consolidation invoice Id.
    /// </returns>
    public display CustVendConsId_JP dispConsId_JP()
    {
        return this.CustVendTrans::getConsId_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountingExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the <c>ExchRate</c> for this <c>VendTrans</c> in accounting currency.
    /// </summary>
    /// <returns>
    /// Returns the <c>ExchRate</c> for this <c>VendTrans</c> in accounting currency.
    /// </returns>
    public display ExchRate displayAccountingExchangeRate()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
        return exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayApprover</Name>
				<Source><![CDATA[
    public display DirPartyName displayApprover()
    {
        if (this.Approver)
        {
            return HcmWorker::worker2Name(this.Approver);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDiscountDate</Name>
				<Source><![CDATA[
    display CashDiscdate displayDiscountDate()
    {
        CustVendTransDetails custVendTransDetails = new CustVendTransDetails(this);
        return custVendTransDetails.firstCashDiscDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDiscountUsed</Name>
				<Source><![CDATA[
    display DiscAmount displayDiscountUsed()
    {
        CustVendTransDetails custVendTransDetails = new CustVendTransDetails(this);
        return custVendTransDetails.utilizedCashDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceDate_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice date.
    /// </summary>
    /// <returns>
    /// The invoice date.
    /// </returns>
    public display TaxUnrealizedPurchInvoiceDate displayInvoiceDate_TH()
    {
        TaxUnrealizedPurchInvoiceDate invoiceDate;

        if (this.TransType == LedgerTransType::Purch)
        {
            if (this.Voucher && this.TransDate)
            {
                invoiceDate = TaxTrans::find(this.Voucher, this.TransDate).taxTransExtensionTH().InvoiceDate;
            }
        }

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceReceiptDate_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the invoice receipt date.
    /// </summary>
    /// <returns>
    /// The invoice receipt date.
    /// </returns>
    public display TaxUnrealizedPurchInvoiceReceiptDate displayInvoiceReceiptDate_TH()
    {
        TaxUnrealizedPurchInvoiceReceiptDate invoiceReceiptDate;

        if (this.TransType == LedgerTransType::Purch)
        {
            if (this.Voucher && this.TransDate)
            {
                invoiceReceiptDate = TaxTrans::find(this.Voucher, this.TransDate).taxTransExtensionTH().InvoiceReceiptDate;
            }
        }

        return invoiceReceiptDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymentHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the vendor hold level, namely vendor, or invoice, depending on the hold type.
    /// </summary>
    /// <returns>
    /// The enumeration value is returned. The value can be a <c>Vendor</c> value, an <c>Invoice</c> value,
    /// or empty in case the vendor is not on hold.
    /// </returns>
    /// <remarks>
    /// The display method uses the <c>VendTable</c> form and the <c>VendTrans</c> form to evaluate the
    /// vendor hold type.
    /// </remarks>
    public display PaymHold displayPaymentHold()
    {
        PaymHold paymHold = PaymHold::No;
        InvoiceReleaseDate transDate;
        boolean isVendReleaseDateExpired;

        transDate = DateTimeUtil::newDateTime(this.TransDate,0);
        isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(this.AccountNum, transDate);

        if (VendTable::blocked(this.AccountNum) != CustVendorBlocked::No && !isVendReleaseDateExpired)
        {
            paymHold = PaymHold::Vendor;
        }
        if ((this.InvoiceReleaseDate != utcDateTimeNull() && DateTimeUtil::addDays(this.InvoiceReleaseDate,1) > transDate) || this.Approved == NoYes::No)
        {
            if (paymHold != PaymHold::No)
            {
                paymHold = PaymHold::VendInvoice;
            }
            else
            {
                paymHold = PaymHold::Invoice;
            }
        }

        return paymHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPersonnelNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the personnel number of the approver.
    /// </summary>
    /// <returns>
    /// The personnel number of the approver.
    /// </returns>
    /// <remarks>
    /// Do not cache this display method since this method is surfaced only on secondary tabs.
    /// </remarks>
    public display HcmPersonnelNumberId displayPersonnelNumber()
    {
        if (!this.Approver)
        {
            return '';
        }

        return HcmWorker::find(this.Approver).PersonnelNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRealVendName_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the real vendor name.
    /// </summary>
    /// <returns>
    /// The real vendor name.
    /// </returns>
    public display TaxUnrealizedPurchRealVendName displayRealVendName_TH()
    {
        TaxUnrealizedPurchRealVendName realVendName;

        if (this.TransType == LedgerTransType::Purch)
        {
            if (this.Voucher && this.TransDate)
            {
                realVendName = TaxTrans::find(this.Voucher, this.TransDate).taxTransExtensionTH().RealVendName;
            }
        }
        else if (this.TransType == LedgerTransType::Payment)
        {
            if (this.Voucher && this.TransDate && this.DocumentNum)
            {
                realVendName = LedgerJournalTrans::findJournalForVoucher(this.Voucher, this.TransDate).ledgerJournalTransExtensionTH().RealVendName;
            }
        }

        return realVendName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the reason code value.
    /// </summary>
    /// <returns>
    /// The reason code value.
    /// </returns>
    /// <remarks>
    /// Do not cache this display method since this method is surfaced only on secondary tabs.
    /// </remarks>
    public display ReasonCode displayReason()
    {
        return ReasonTableRef::find(this.ReasonRefRecId).Reason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the reason comment value.
    /// </summary>
    /// <returns>
    /// The reason comment value.
    /// </returns>
    /// <remarks>
    /// Do not cache this display method since this method is surfaced only on secondary tabs.
    /// </remarks>
    public display ReasonComment displayReasonComment()
    {
        return ReasonTableRef::find(this.ReasonRefRecId).ReasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor remittance address associated with the vendor remittance location on the
    /// <c>VendTable</c> table.
    /// </summary>
    /// <returns>
    /// The current date effective remittance address if the vendor transaction is not closed; otherwise,
    /// the closed date effective remittance address.
    /// </returns>
    /// <remarks>
    /// The current date effective remittance address is returned if the vendor transaction is not
    /// closed.The remittance address on the closed date is returned if the vendor transaction is closed.
    /// </remarks>
    public display RemittanceAddressing displayRemittanceAddress()
    {
        if (this.Closed > DateTimeUtil::date(DateTimeUtil::minValue()))
        {
            return LogisticsPostalAddress::addressFromRecId(this.RemittanceAddress);
        }

        return LogisticsLocationEntity::location2PostalAddress(this.RemittanceLocation).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceLocationDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the vendor remittance address description associated with the vendor.
    /// </summary>
    /// <returns>
    /// The vendor remittance address description associated with the vendor.
    /// </returns>
    /// <remarks>
    /// Do not cache this display method since this method is surfaced only on secondary tabs.
    /// </remarks>
    public display LogisticsDescription displayRemittanceLocationDescription()
    {
        return LogisticsLocation::find(this.RemittanceLocation).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTax1099Box</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>Tax1099Box</c> value.
    /// </summary>
    /// <returns>
    /// The <c>Tax1099Box</c> value.
    /// </returns>
    /// <remarks>
    /// Do not cache this display method since this method is surfaced only on secondary tabs.
    /// </remarks>
    public display Tax1099Box displayTax1099Box()
    {
        if (!this.Tax1099Fields)
        {
            return '';
        }

        return Tax1099Fields::find(this.Tax1099Fields).Tax1099Box;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxBranchDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax branch code depending on the default dimension.
    /// </summary>
    /// <returns>
    /// Returns tax branch code getted by default dimension.
    /// </returns>
    display TaxBranchCode displayTaxBranchDimension()
    {
        return TaxBranchType::getTBDisplayValueByDefaultDimension(this.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxInvoiceReceiptDate_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the tax invoice receipt date.
    /// </summary>
    /// <returns>
    /// The tax invoice receipt date.
    /// </returns>
    public display TaxUnrealizedPurchTaxInvoiceRcptDate displayTaxInvoiceReceiptDate_TH()
    {
        TaxUnrealizedPurchTaxInvoiceRcptDate taxInvoiceReceiptDate;

        if (this.TransType == LedgerTransType::Purch)
        {
            if (this.Voucher && this.TransDate && this.DocumentNum)
            {
                taxInvoiceReceiptDate = TaxTrans::find(this.Voucher, this.TransDate).taxTransExtensionTH().TaxInvoiceReceiptDate;
            }
        }
        else if (this.TransType == LedgerTransType::Payment)
        {
            if (this.Voucher && this.TransDate && this.DocumentNum)
            {
                taxInvoiceReceiptDate = LedgerJournalTrans::findJournalForVoucher(this.Voucher, this.TransDate).ledgerJournalTransExtensionTH().TaxInvoiceReceiptDate;
            }
        }

        return taxInvoiceReceiptDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxWithholdAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax withhold amount for display.
    /// </summary>
    /// <returns>
    /// The tax withhold amount for display.
    /// </returns>
    display AmountCur displayTaxWithholdAmount_IN()
    {
        TaxWithholdTrans_IN taxWithholdTransLoc;
        AmountCur amountCur;

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            select sum(TaxWithholdAmountCur), TaxType
                from taxWithholdTransLoc group by TaxType
                   where taxWithholdTransLoc.Invoice == this.Invoice;

            switch (taxWithholdTransLoc.TaxType)
            {
                case TaxWithholdCodeType_IN::TCS :
                    amountCur = abs(taxWithholdTransLoc.TaxWithholdAmountCur);
                    break;

                case TaxWithholdCodeType_IN::TDS:
                    amountCur = -abs(taxWithholdTransLoc.TaxWithholdAmountCur);
                    break;
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountCredit_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Transaction Currency Amount Credit.
    /// </summary>
    /// <returns>
    /// Transaction Currency Amount Credit.
    /// </returns>
    public display LedgerAmountCurCredit_CN displayTransactionCurAmountCredit_JP()
    {
        if (LedgerShowDebCredController_CN::isShowVendDRsCRsFeatureEnabled_JP())
        {
            return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyCreditAmount();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransactionCurAmountDebit_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Transaction Currency Amount Debit.
    /// </summary>
    /// <returns>
    /// Transaction Currency Amount Debit.
    /// </returns>
    public display LedgerAmountCurDebit_CN displayTransactionCurAmountDebit_JP()
    {
        if (LedgerShowDebCredController_CN::isShowVendDRsCRsFeatureEnabled_JP())
        {
            return LedgerShowDebCredRecord_CN::constructFromRecord(this).transactionCurrencyDebitAmount();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymModeDiscGraceDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number of grace days used to determine the cash discount.
    /// </summary>
    /// <param name = "_vendTransOpen">
    ///     A <c>VendTransOpen</c> table buffer.
    /// </param>
    /// <returns>
    ///     The number of grace days.
    /// </returns>
    protected DiscGraceDays getPaymModeDiscGraceDays(VendTransOpen _vendTransOpen)
    {
        return VendPaymModeTable::find(this.PaymMode).DiscGraceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateModified</Name>
				<Source><![CDATA[
    // The method recalculates the due date and the cash disc date of all belonging VendTransOpen
    // and the cash disc date of all belonging VendTransCashDisc.
    // The recalculation is based on transferred TransDate.
    public void documentDateModified(TransDate _transDate)
    {
        VendTransOpen vendTransOpen;
        VendTable vendTable;
        VendInvoiceJour vendInvoiceJour;
        VendTransCashDisc vendTransCashDisc;
        CashDisc cashDisc;

        while select forupdate vendTransOpen
                where vendTransOpen.RefRecId == this.RecId
        {
            vendTransOpen.DueDate = _transDate;
            vendInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(this.Invoice, this.Voucher, this.TransDate, this.AccountNum);
            if (vendInvoiceJour && vendInvoiceJour.Payment)
            {
                vendTransOpen.DueDate = PaymTerm::find(vendInvoiceJour.Payment).due(vendTransOpen.DueDate, vendInvoiceJour.PaymDayId);
            }
            if (!vendInvoiceJour)
            {
                vendTable = VendTable::find(this.AccountNum);
                if (vendTable && vendTable.PaymTermId)
                {
                    vendTransOpen.DueDate = PaymTerm::find(vendTable.PaymTermId).due(vendTransOpen.DueDate, vendTable.PaymDayId);
                }
            }

            cashDisc = CashDisc::find(this.CashDiscCode);
            while select forupdate vendTransCashDisc
                  where vendTransCashDisc.RefTableId == vendTransOpen.TableId &&
                        vendTransCashDisc.RefRecId == vendTransOpen.RecId
            {
                if (cashDisc && vendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc)
                {
                    vendTransCashDisc.CashDiscdate = CashDisc::cashDiscDate(cashDisc.CashDiscCode, _transDate);
                    cashDisc = CashDisc::find(cashDisc.CashDiscCodeNext);
                }
                else if (vendTransCashDisc.CashDiscDue == CashDiscDue::Due)
                {
                    vendTransCashDisc.CashDiscdate = vendTransOpen.DueDate;
                }
                vendTransCashDisc.update();
            }
            vendTransOpen.setCashDisc(cashDisc.discDate(_transDate), this.getPaymModeDiscGraceDays(vendTransOpen));

            vendTransOpen.update();
            VendPromissoryNoteJour::updateDueDate(this.PromissoryNoteID,vendTransOpen.DueDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentInvoiceDate</Name>
				<Source><![CDATA[
    public TransDate documentInvoiceDate()
    {
        return this.DocumentDate ? this.DocumentDate : this.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateCurToMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the exchange rate from the transaction currency to the monetary standard (MST) currency.
    /// </summary>
    /// <returns>
    ///    The exchange rate for the transaction.
    /// </returns>
    /// <remarks>
    ///    Returns the <c>ExchRate</c> field if there is no triangulation. If there is triangulation, returns
    ///    the <c>ExchRateSecond</c> field divided by the <c>ExchRate</c> field.
    /// </remarks>
    public ExchRate exchRateCurToMst()
    {
        ExchRate combinedRate;

        Debug::assert(this.ExchRate != 0);

        if (this.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::findDataArea(this.company()).RecId))
        {
            return 100.0;
        }
        else if (this.ExchRateSecond == 0)
        {
            combinedRate = this.ExchRate;
        }
        else if (this.ExchRate != 0)
        {
            combinedRate = (this.ExchRateSecond / this.ExchRate) * 100;
        }

        return combinedRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishmentId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal establishment identifier for this vendor transaction
    /// </summary>
    /// <returns>
    /// The fiscal establishment id
    /// </returns>
    public display FiscalEstablishmentId_BR fiscalEstablishmentId_BR()
    {
        FiscalEstablishment_BR fiscalEstablishment;
        FiscalEstablishmentVendInvoiceJour_BR vendInvoiceJour;
        VendTransPayment_BR vendTransPayment;

        if (!BrazilParameters::isEnabled())
        {
            return '';
        }

        select FiscalEstablishmentId from fiscalEstablishment
            exists join vendTransPayment
                where vendTransPayment.VendTrans == this.RecId
                    && fiscalEstablishment.RecId == vendTransPayment.FiscalEstablishment_BR;

        if (fiscalEstablishment.FiscalEstablishmentId)
        {
            return fiscalEstablishment.FiscalEstablishmentId;
        }

        select FiscalEstablishmentId from fiscalEstablishment
            exists join vendInvoiceJour
            where fiscalEstablishment.RecId == vendInvoiceJour.FiscalEstablishment_BR &&
                  vendInvoiceJour.VendTrans == this.RecId;

        return fiscalEstablishment.FiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentExtension_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the brazilian extension table for <c>VendTransPayment</c> table
    /// </summary>
    /// <param name="_packNewExtensionTable">
    /// Defines if <c>PAckExtension</c> field will receive a new reference of the extension table
    /// </param>
    /// <returns>
    /// The extension table associated to this base table
    /// </returns>
    public VendTransPayment_BR getPaymentExtension_BR(boolean _packNewExtensionTable = true)
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendTransPayment_BR), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPendingInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a pending invoice exists for this <c>VendTrans</c> table record.
    /// </summary>
    /// <returns>
    /// true if a pending invoice exists for this <c>VendTrans</c> table record; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display boolean hasPendingInvoice()
    {
        LedgerJournalTrans ledgerJournalTrans;
        Voucher localVoucher;

        // If the VendTrans Voucher values has not been updated yet we need to use the LedgerJournalVoucherChanged.ToVoucher value.
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged = LedgerJournalVoucherChanged::findFromVoucher(this.JournalNum, this.Voucher);

        if (ledgerJournalVoucherChanged.ToVoucher != '')
        {
            localVoucher = ledgerJournalVoucherChanged.ToVoucher;
        }
        else
        {
            localVoucher = this.Voucher;
        }

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.Voucher == localVoucher &&
                ledgerJournalTrans.JournalNum == this.JournalNum;

        return ledgerJournalTrans.hasPendingInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTransApproval</Name>
				<Source><![CDATA[
    public void initFromLedgerJournalTransApproval(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.Invoice = _ledgerJournalTrans.Invoice;
        this.DocumentNum = _ledgerJournalTrans.DocumentNum;
        this.DocumentDate = _ledgerJournalTrans.DocumentDate;

        this.Approver = _ledgerJournalTrans.Approver;
        this.Approved = this.Approver ? _ledgerJournalTrans.Approved : NoYes::No;
        this.ApprovedDate = _ledgerJournalTrans.TransDate;
        this.TransType = _ledgerJournalTrans.TransactionType;

        this.PaymMode = _ledgerJournalTrans.PaymMode;
        this.PaymSpec = _ledgerJournalTrans.PaymSpec;
        this.PaymReference = _ledgerJournalTrans.PaymReference;

        if (this.Approved && !this.Arrival)
        {
            this.SummaryAccountId = this.getUpdatedSummaryAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedArrivalAndSummaryAccounts</Name>
				<Source><![CDATA[
    private void updatedArrivalAndSummaryAccounts()
    {
        if (this.AccountNum
            && this.PostingProfile
            && VendTransSummaryAndArrivalAccountsFlight::instance().isEnabled())
        {
            //If Approved = Yes, it must fill the Summary Account, As vendTrans are getting created from many places , added logic in generic place.
            // Such as through invoice approval journal posting.
            if (this.Approved
                && !this.SummaryAccountId)
            {
                LedgerDimensionDefaultAccount summaryAccount = VendLedgerAccounts::summaryLedgerDimension(this.AccountNum, this.PostingProfile, false);

                this.SummaryAccountId =  MainAccount::findByLedgerDimension(summaryAccount).MainAccountId;
            }
            else if (!this.Approved
                     && this.SummaryAccountId
                     && !VendTransKeepMainAccountFlight::instance().isEnabled())
            {
                this.SummaryAccountId = '';
            }

            //If Arrival = Yes, it must fill the arrival Account, As vendTrans are getting created from many places , added logic in generic place.
            if (this.Arrival
                && !this.ArrivalAccountId)
            {
                LedgerDimensionDefaultAccount arrivalAccount = VendLedgerAccounts::purchasingLedgerDimensionV2(this.AccountNum, this.PostingProfile, false);

                this.ArrivalAccountId = MainAccount::findByLedgerDimension(arrivalAccount).MainAccountId;
            }
            else if (!this.Arrival
                     && this.ArrivalAccountId
                     && !VendTransKeepMainAccountFlight::instance().isEnabled())
            {
                this.ArrivalAccountId = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdatedSummaryAccount</Name>
				<Source><![CDATA[
    private MainAccountNum getUpdatedSummaryAccount()
    { 
        LedgerDimensionDefaultAccount summaryAccount = VendLedgerAccounts::summaryLedgerDimension(this.AccountNum, this.PostingProfile);

        return MainAccount::findByLedgerDimension(summaryAccount).MainAccountId;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoTableApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes VendTrans fields from relevan fields of VendInvoiceInfoTable.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">VendInvoiceInfoTable table record.</param>
    public void initFromVendInvoiceInfoTableApproval(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        this.Approved = _vendInvoiceInfoTable.Approved;
        this.Approver = _vendInvoiceInfoTable.Approver;
        this.ApprovedDate = _vendInvoiceInfoTable.TransDate;
        this.DocumentDate = _vendInvoiceInfoTable.DocumentDate;
        this.DocumentNum = _vendInvoiceInfoTable.DocumentNum;
        this.InvoiceReleaseDate = _vendInvoiceInfoTable.InvoiceReleaseDate;
        this.ReleaseDateComment = _vendInvoiceInfoTable.ReleaseDateComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostingProfile</Name>
				<Source><![CDATA[
    public void initFromPostingProfile(VendPostingProfile _vendPostingProfile)
    {
        VendLedger vendLedger;
        VendPostingProfile vendPostingProfile = _vendPostingProfile;

        if (! vendPostingProfile)
        {
            vendPostingProfile = VendParameters::find().PostingProfile;
        }

        vendLedger = VendLedger::find(vendPostingProfile);

        if (! vendLedger)
        {
            vendLedger.Settlement = NoYes::Yes;
            vendLedger.Cancel = NoYes::Yes;
            vendLedger.PostingProfile = '';
        }

        this.Settlement = vendLedger.Settlement;
        this.Cancel = vendLedger.Cancel;
        this.PostingProfileClose = vendLedger.PostingProfileClose;
        this.PostingProfile = vendLedger.PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current record into the <c>VendTrans</c> table.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The currency of the current record is empty.
    /// </exception>
    public void insert()
    {
        #ISOCountryRegionCodes
        VendTrans_W vendTrans_W;

        VendTransPayment_BR vendTransPayment_BR;

        if (this.CurrencyCode == '')
        {
            throw error(strFmt('%1  %2', tableId2name(this.TableId), "@SYS23229"));
        }

        if (this.AmountCur == this.SettleAmountCur && this.AmountMST == this.SettleAmountMST)
        {
            this.Closed = this.TransDate;
        }

        this.setApprovedDate();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendTrans_W = this.vendTrans_W();
            if (!vendTrans_W.DefaultDimensionReporting_RU)
            {
                vendTrans_W.DefaultDimensionReporting_RU = this.DefaultDimension;
                this.packVendTrans_W(vendTrans_W);
            }
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]))
        {
            vendTrans_W = this.vendTrans_W();
            this.packVendTrans_W(vendTrans_W);
        }

        ttsbegin;

        CustVendTransReportingCurrencyInitializer initializer = CustVendTransReportingCurrencyInitializer::newForTransaction(this);

        CurrencyCode transactionReportingCurrency = initializer.getReportingCurrencyForTransaction();

        if (transactionReportingCurrency != ''
            && this.ReportingCurrencyAmount == 0.0
            && this.ReportingCurrencyCrossRate == 0.0)
        {
            initializer.calculateReportingCurrencyAmount();
        }

        // <GJP>
        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            this.CustVendTrans::initConsInvoice_JP();
        }
        // </GJP>

        this.updatedArrivalAndSummaryAccounts();

        super();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            vendTransPayment_BR = this.getPaymentExtension_BR();
            vendTransPayment_BR.paymspecModified_BR(this.PaymMode, this.PaymSpec);
            this.SysExtensionSerializerMap::packExtensionTable(vendTransPayment_BR);
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GBR>

        if (this.TransType == LedgerTransType::Purch && LedgerParameters::find().IsZakatEnabled_SA)
        {
            GeneralJournalAccountEntryZakat_SA::updateSubLedgerInformation(this.Voucher, this.TransDate, this.DataAreaId);
        }

        smmTransLog::initTrans(this, smmLogAction::insert);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            VendTrans_IN::insertFromVendTrans(this);
        }
        // </GIN>

        // <GEERU>
        if (LedgerParameters::find().UsePrecalcData_RU)
        {
            RLedgerTurnoverType::updatePrecalcData(this, RLedgerTurnoverSheetType::VendTurnover);
        }
        // </GEERU>

        // <GEERU><GIN><GJP>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN, #isoRU, #isoJP, #isoGB, #isoPL]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GJP></GIN></GEERU>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventProfileType_RU</Name>
				<Source><![CDATA[
    InventProfileType_RU inventProfileType_RU()
    {
        return InventProfileType_RU::General;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    public boolean isCreditNote()
    {
        boolean ret = false;

        if (this.AmountCur > 0 && this.Invoice)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this transaction is for payment.
    /// </summary>
    /// <returns>
    /// Returns true when this transaction is for payment. Otherwise, returns false.
    /// </returns>
    /// <remarks>
    /// This method is copied from <c>CustTrans</c> table.
    /// </remarks>
    public boolean isPayment_JP()
    {
        boolean ret = true;

        if (this.Invoice ||
            this.TransType == LedgerTransType::Interest ||
            this.TransType == LedgerTransType::ExchAdjustment ||
            this.TransType == LedgerTransType::CollectionLetter)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReimbursement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the debit transaction is of reimbursement type.
    /// </summary>
    /// <returns>
    /// true if the debit transaction is of reimbursement type otherwise, false.
    /// </returns>
    public boolean isReimbursement()
    {
        SubledgerVoucherGeneralJournalEntry localSubledgerVoucherGeneralJournalEntry;
        GeneralJournalAccountEntry localGeneralJournalAccountEntry;
        boolean isReimbursementType;

        while select PostingType
            from localGeneralJournalAccountEntry
                exists join localSubledgerVoucherGeneralJournalEntry
                where localSubledgerVoucherGeneralJournalEntry.GeneralJournalEntry == localGeneralJournalAccountEntry.GeneralJournalEntry &&
                      localSubledgerVoucherGeneralJournalEntry.Voucher == this.Voucher &&
                      localSubledgerVoucherGeneralJournalEntry.VoucherDataAreaId == this.DataAreaId &&
                      localSubledgerVoucherGeneralJournalEntry.AccountingDate == this.TransDate
        {
            isReimbursementType = true;

            if (localGeneralJournalAccountEntry.PostingType != LedgerPostingType::CustReimbursement)
            {
                isReimbursementType = false;
                break;
            }
        }

        return isReimbursementType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransForConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this transaction is for consolidated invoice.
    /// </summary>
    /// <returns>
    /// Returns true when opposite transaction is for PO and related with consolidated invoice.
    /// Otherwise, returns false.
    /// </returns>
    public boolean isTransForConsInvoice_JP()
    {
        VendTrans vendTrans;
        VendTrans_W vendTrans_W;

        select firstonly RecId from vendTrans
                where vendTrans.RecId == this.OffsetRecid
                && vendTrans.TransType == LedgerTransType::Purch
            join VendConsInvoice_JP from vendTrans_W
                where vendTrans_W.VendTrans == vendTrans.RecId;

        if (vendTrans_W.VendConsInvoice_JP == 0 && TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(true))
        {
            VendTrans vendTransDiff;
            VendTrans_W vendTrans_WDiff;
            VendConsInvoice_JP vendConsInvoice_JP;

            select firstonly VendConsInvoice_JP from vendTrans_WDiff
                join vendTransDiff
                join vendConsInvoice_JP
                    where vendConsInvoice_JP.PostedVendTrans == vendTransDiff.RecId
                    && vendTrans_WDiff.VendTrans == vendTransDiff.RecId
                    && vendTransDiff.RecId == this.OffsetRecId;

            return vendTrans_WDiff.VendConsInvoice_JP != 0;
        }

        return vendTrans_W.VendConsInvoice_JP != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVATTaxAgentPaymentFromVendorFunds_RU</Name>
				<Source><![CDATA[
    public boolean isVATTaxAgentPaymentFromVendorFunds_RU()
    {
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;

        if (VendTable::find(this.AccountNum).vatTaxAgent_RU && this.Invoice)
        {
            vendInvoiceJour = VendInvoiceJour::findFromVendTrans(
                this.Invoice,
                this.TransDate,
                this.AccountNum,
                false,
                this.Voucher);

            select firstonly TaxGroup, TaxItemGroup, RecId from vendInvoiceTrans
                where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId &&
                      vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId &&
                      vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate &&
                      vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                      vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId &&
                      vendInvoiceTrans.TaxGroup &&
                      vendInvoiceTrans.TaxItemGroup;

            if (vendInvoiceTrans.RecId &&
                TaxTable::find(TaxTable::vatCode_RU(vendInvoiceTrans.TaxGroup,
                                                    vendInvoiceTrans.TaxItemGroup)).vatChargeSource_RU == VATChargeSource_RU::VendorFunds)
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendPaymEligibleForTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the vendor invoice or payment proposal line is eligible for transfer to the payment
    /// journal depending on the vendor hold type.
    /// </summary>
    /// <param name="_paymDate">
    /// The payment date
    /// </param>
    /// <returns>
    /// true if the vendor is not on hold; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Vendor hold is imposed on either vendor level or invoice level.
    /// </remarks>
    public boolean isVendPaymEligibleForTransfer(TransDate _paymDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        InvoiceReleaseDate invoiceReleaseDate;
        InvoiceReleaseDate transDate;

        CustVendorBlocked vendBlocked;
        VendAccount vendAccount;
        boolean isVendReleaseDateExpired;
        boolean ret = true;

        //initializations to the local variables for the local use to avoid repetitive method calls
        vendBlocked = VendTable::blocked(this.AccountNum);
        vendAccount = this.AccountNum;
        invoiceReleaseDate = this.InvoiceReleaseDate;
        transDate = DateTimeUtil::newDateTime(_paymDate, 0);
        isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(vendAccount,transDate);

        if ((vendBlocked == CustVendorBlocked::All || vendBlocked == CustVendorBlocked::Payment) && !isVendReleaseDateExpired)
        {
            ret = false;
        }
        else if (invoiceReleaseDate != utcDateTimeNull() && invoiceReleaseDate > transDate)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    display LanguageId languageId()
    {
        return DirPartyTable::findRec(VendTable::find(this.AccountNum).Party).LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendTrans, PaymMode) :
                this.PaymModeMap::modifiedPaymMode();
                break;
            case fieldNum(VendTrans, BankCentralBankPurposeCode):
                this.BankCentralBankPurposeText = BankCentralBankPurpose::find(this.BankCentralBankPurposeCode).Text;
                break;
            case fieldNum(VendTrans, RemittanceLocation) :
                this.VendPaymentGroup = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    display OpenPosting open()
    {
        OpenPosting hasOpenAmount;

        if (SettlementUtility::hasOpenAmountCur(this.AmountCur, this.SettleAmountCur))
        {
            hasOpenAmount = NoYes::Yes;
        }
        else
        {
            hasOpenAmount = NoYes::No;
        }

        return hasOpenAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>VendTrans_W</c> associated with the current record.
    /// </summary>
    /// <param name="_vendTrans_W">
    /// The <c>VendTrans_W</c> record.
    /// </param>
    public void packVendTrans_W(VendTrans_W _vendTrans_W)
    {
        _vendTrans_W.VendTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_vendTrans_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>SysExtensionSerializerExtensionMap</c> extension table's buffer inside the
    /// record's internal cache.
    /// </summary>
    /// <param name="_sysExtensionSerializerExtensionTableMap">
    /// <c>SysExtensionSerializerExtensionMap</c> to be packed.
    /// </param>
    /// <returns>
    /// true if success; otherwise false.
    /// </returns>
    public boolean packExtensionTable(SysExtensionSerializerExtensionMap _sysExtensionSerializerExtensionTableMap)
    {
        return this.SysExtensionSerializerMap::packExtensionTable(_sysExtensionSerializerExtensionTableMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>possibleCashDisc</Name>
				<Source><![CDATA[
    display VendCashDiscAmount possibleCashDisc(TransDate _transDate = this.TransDate)
    {
        CustVendTransDetails custVendTransDetails = new CustVendTransDetails(this, _transDate);

        return custVendTransDetails.possibleCashDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaPaymTermId</Name>
				<Source><![CDATA[
    display PaymTermId psaPaymTermId()
    {
        return VendTable::find(this.AccountNum).PaymTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaProjId</Name>
				<Source><![CDATA[
    display ProjId psaProjId()
    {
        return PurchTable::find(VendInvoiceJour::findFromVendTrans(this.Invoice, this.TransDate, this.AccountNum).PurchId).ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustVendSettlement</Name>
				<Source><![CDATA[
    public Query queryCustVendSettlement(boolean _update = false)
    {
        DictRelation dictRelation;
        DictField externDictField;
        DictField dictField;
        Query query = new Query();
        QueryBuildDataSource ds;
        Counter c;

        ds = query.addDataSource(tableNum(VendSettlement));

        dictRelation = new DictRelation(tableNum(VendSettlement));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c = 1; c <= dictRelation.lines(); c++)
            {
                externDictField = new DictField(this.TableId, dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(VendSettlement), dictRelation.lineTableValue(c));
                ds.addRange(dictField.id()).value(queryValue(this.(externDictField.id())));
            }
        }

        ds.update(_update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustVendTransOpen</Name>
				<Source><![CDATA[
    Query queryCustVendTransOpen(boolean _update = false)
    {
        DictRelation dictRelation;
        DictField externdictField;
        DictField dictField;
        Query query = new Query();
        Counter c;

        query.addDataSource(tableNum(VendTransOpen));

        dictRelation = new DictRelation(tableNum(VendTransOpen));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(VendTransOpen),dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(VendTransOpen)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        query.dataSourceTable(tableNum(VendTransOpen)).update(_update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCur</Name>
				<Source><![CDATA[
    display AmountCur remainAmountCur()
    {
        return this.transData().remainAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountMST</Name>
				<Source><![CDATA[
    display AmountMST remainAmountMST()
    {
        return this.transData().remainAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountReportingCurrency</Name>
				<Source><![CDATA[
    display AmountMSTSecondary remainAmountReportingCurrency()
    {
        return this.transData().remainAmountReportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversed</Name>
				<Source><![CDATA[
    display boolean reversed()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(VendTrans), this.RecId).Reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApprovedDate</Name>
				<Source><![CDATA[
    private void setApprovedDate()
    {
        if (this.Approved)
        {
            this.ApprovedDate = this.ApprovedDate ? this.ApprovedDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            this.ApprovedDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount summaryLedgerDimension(VendPostingProfile _postingProfile = this.PostingProfile)
    {
        return VendLedgerAccounts::summaryLedgerDimension(this.AccountNum, _postingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceNum</Name>
				<Source><![CDATA[
    display TraceNum traceNum()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(VendTrans), this.RecId).TraceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionPerDate</Name>
				<Source><![CDATA[
    public void transactionPerDate(TransDate _transDate)
    {
        VendSettlement vendSettlement;

        select sum(SettleAmountCur),sum(SettleAmountMST),sum(ExchAdjustment) from vendSettlement
            where vendSettlement.TransRecId == this.RecId &&
                  vendSettlement.TransDate > _transDate;

        this.SettleAmountCur -= vendSettlement.SettleAmountCur;
        this.SettleAmountMST -= vendSettlement.SettleAmountMST;
        this.ExchAdjustment -= vendSettlement.ExchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transData</Name>
				<Source><![CDATA[
    public VendTransData transData()
    {
        return CustVendTransData::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpen</Name>
				<Source><![CDATA[
    public VendTransOpen transOpen(DueDate _dueDate = dateNull(), boolean _forUpdate = false)
    {
        VendTransOpen vendTransOpen;

        vendTransOpen.selectForUpdate(_forUpdate);

        if (_dueDate == dateNull())
        {
            select vendTransOpen where vendTransOpen.RefRecId == this.RecId;
        }
        else
        {
            select vendTransOpen where vendTransOpen.RefRecId == this.RecId &&
                                        vendTransOpen.DueDate == _dueDate;
        }

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenForVendBank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendTransOpen</c> table.
    /// </summary>
    /// <param name="_vendBankAccount">
    /// The <c>ThirdPartyBankAccountId</c> field of the <c>VendTransOpen</c> table to find.
    /// </param>
    /// <param name="_dueDate">
    /// The <c>DueDate</c> field of the <c>VendTransOpen</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>VendTransOpen</c> table; otherwise, an empty buffer.
    /// </returns>
    public VendTransOpen transOpenForVendBank(VendBank _vendBankAccount, DueDate _dueDate, boolean _forUpdate = false)
    {
        VendTransOpen vendTransOpen;

        vendTransOpen.selectForUpdate(_forUpdate);

        select vendTransOpen where vendTransOpen.RefRecId == this.RecId &&
                                    vendTransOpen.ThirdPartyBankAccountId == _vendBankAccount &&
                                    vendTransOpen.DueDate == _dueDate;

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #ISOCountryRegionCodes

        ttsbegin;

        smmTransLog::initTrans(this, smmLogAction::update);

        this.setApprovedDate();

        VendTrans vendTrans_Orig = this.orig();

        if (this.Approver != vendTrans_Orig.Approver)
        {
            LedgerJournalTrans ledgerJournalTrans;
            ledgerJournalTrans.skipDataMethods(true);

            update_recordset ledgerJournalTrans
                setting Approver = this.Approver
                where ledgerJournalTrans.VendTransId == this.RecId;
        }

        // <GJP>
        // Consolidated invoice reference will be updated here for transaction of payment.
        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            this.CustVendTrans::initConsInvoice_JP();
        }
        // </GJP>

        this.updatedArrivalAndSummaryAccounts();

        super();

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            TaxTrans taxTrans;
            TaxTransRefundableVAT taxTransRefundableVAT;

            update_recordset taxTransRefundableVAT
                setting SettleDate = this.Closed
                exists join taxTrans
                    where taxTransRefundableVAT.TaxTrans == taxTrans.RecId &&
                            taxTrans.Voucher == this.Voucher &&
                            taxTrans.TransDate == this.TransDate;
        }
        // </GEEHU>

        if (this.DocumentDate && this.DocumentDate != vendTrans_Orig.DocumentDate)
        {
            this.documentDateModified(this.DocumentDate);
        }
        else if (!this.DocumentDate && vendTrans_Orig.DocumentDate)
        {
            this.documentDateModified(this.TransDate);
        }

        // <GJP>
        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            this.CustVendTrans::settleAmountMSTModified_JP();
        }
        // </GJP>

        // <GEERU><GIN><GJP>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN, #isoRU, #isoJP, #isoBR, #isoPL]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        // </GJP></GIN></GEERU>

        if (this.ThirdPartyBankAccountId != vendTrans_Orig.ThirdPartyBankAccountId
            && VendBankAccount::checkBankAccountIsActiveForDate(this.AccountNum, this.ThirdPartyBankAccountId, this.TransDate))
        {
            this.updateThirdPartyBankAccountIdInOpenTrans();
            this.updateCustVendBankAccountIdInLedgerJournalTrans();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendTrans, CompanyBankAccountId) :
                    if (!this.allowEditCompanyBankAccountId())
                    {
                        ret = checkFailed("@SYS88327");
                    }
                    else
                    {
                        ret = BankAccountTable::checkIsActive(this.CompanyBankAccountId, this.TransDate);
                    }
                    break;

                case fieldNum(VendTrans, TransDate) :
                    ret = BankAccountTable::checkIsActive(this.CompanyBankAccountId, this.TransDate);
                    break;

                case fieldNum(VendTrans, ThirdPartyBankAccountId) :
                    if (!this.allowEditThirdPartyBankAccountId())
                    {
                        ret = checkFailed("@SYS88328");
                    }
                    break;

                case fieldNum(VendTrans, InvoiceReleaseDate) :
                    if (this.InvoiceReleaseDate != utcDateTimeNull() && DateTimeUtil::addDays(this.InvoiceReleaseDate,1) < DateTimeUtil::utcNow())
                    {
                        ret = checkFailed("@SYS114595");
                    }
                    break;

                case fieldNum(VendTrans, VendPaymentGroup) :
                    ret = VendPaymentGroupManager::validatePaymentGroup(this, true);
                    break;

                case fieldNum(VendTrans, RemittanceLocation) :
                    ret = VendPaymentGroupManager::validatePaymentGroup(this, true, fieldNum(VendTrans, RemittanceLocation));
                    break;

                case fieldNum(VendTrans, PaymReference) :
                    BankChequeNum bankChequeNum = LedgerJournalTrans::findByCustVendTrans(this).BankChequeNum;
                    if (bankChequeNum && bankChequeNum != this.PaymReference)
                    {
                        ret = checkFailed(strFmt("@CashManagement:ErrorChangePaymReference", bankChequeNum));
                    }
                    break;
                
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatTaxAgentAmount_RU</Name>
				<Source><![CDATA[
    public Amount vatTaxAgentAmount_RU(TaxCode _taxCode, TransDate _paymDate, boolean _convertToMST = true)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatTaxAgentBaseAmount_RU</Name>
				<Source><![CDATA[
    public TaxBase vatTaxAgentBaseAmount_RU(TaxCode _taxCode)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatTaxAgentBaseAmountMST_RU</Name>
				<Source><![CDATA[
    public TaxBase vatTaxAgentBaseAmountMST_RU(TaxCode _taxCode, TransDate _transDate)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>VendInvoiceJour</c> for the given <c>VendTrans</c>.
    /// </summary>
    /// <param name="_forupdate">
    /// True if <c>VendInvoiceJour</c> is to be read with update priveledges.
    /// </param>
    /// <returns>
    /// Returns <c>VendInvoiceJour</c>.
    /// </returns>
    public VendInvoiceJour vendInvoiceJour(boolean _forupdate = false)
    {
        VendInvoiceJour vendInvoiceJour;
     
        vendInvoiceJour.selectForUpdate(_forupdate);

        select firstonly vendInvoiceJour
                where vendInvoiceJour.InvoiceAccount == this.AccountNum &&
                    vendInvoiceJour.InvoiceDate == this.TransDate &&
                    vendInvoiceJour.InvoiceId == this.Invoice &&
                    vendInvoiceJour.LedgerVoucher == this.Voucher;

        if (vendInvoiceJour.RecId == 0)
        {
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

            select ToVoucher, ToDate from ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.FromVoucher == this.Voucher
                    && ledgerJournalVoucherChanged.FromDate == this.TransDate;

            select firstonly vendInvoiceJour
                where vendInvoiceJour.InvoiceAccount == this.AccountNum &&
                    vendInvoiceJour.InvoiceDate == ledgerJournalVoucherChanged.ToDate &&
                    vendInvoiceJour.InvoiceId == this.Invoice &&
                    vendInvoiceJour.LedgerVoucher == ledgerJournalVoucherChanged.ToVoucher;
        }
        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour_RU</Name>
				<Source><![CDATA[
    public VendInvoiceJour vendInvoiceJour_RU(boolean _forupdate = false)
    {
        VendInvoiceJour vendInvoiceJour;

        vendInvoiceJour.selectForUpdate(_forupdate);

        select firstonly vendInvoiceJour
            where vendInvoiceJour.InvoiceAccount == this.AccountNum &&
                  vendInvoiceJour.InvoiceDate == this.TransDate &&
                  vendInvoiceJour.InvoiceId == this.Invoice &&
                  vendInvoiceJour.LedgerVoucher == this.Voucher;

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTableName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display VendName vendTableName()
    {
        VendTable vendTable;
        DirPartyTable partyTable;

        select firstonly Name from partyTable
            join Party, AccountNum from vendTable
                    where vendTable.Party == partyTable.RecId &&
                          vendTable.AccountNum == this.AccountNum;

        return partyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTrans_W</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>VendTrans_W</c> record.
    /// </returns>
    public VendTrans_W vendTrans_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(VendTrans_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransVoucherByLedgerVoucher</Name>
				<Source><![CDATA[
    public static void findVendTransVoucherByLedgerVoucher(VendTransVoucherMapToLedgerVoucherTmp _voucherMap)
    {
        VendTrans vendTrans;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        LedgerJournalVoucherChanged ledgerJournalVoucherChangedTwice;

        update_recordset _voucherMap
            setting Voucher = _voucherMap.LedgerVoucher,
                    TransDate = _voucherMap.AccountingDate
            where _voucherMap.Voucher == ''
            exists join vendTrans
                where vendTrans.Voucher == _voucherMap.LedgerVoucher
                   && vendTrans.TransDate == _voucherMap.AccountingDate;

        update_recordset _voucherMap
           setting Voucher = vendTrans.Voucher,
                   TransDate = vendTrans.TransDate
           where _voucherMap.Voucher == ''
           join ledgerJournalVoucherChanged
               where ledgerJournalVoucherChanged.ToVoucher == _voucherMap.LedgerVoucher
                  && ledgerJournalVoucherChanged.ToDate == _voucherMap.AccountingDate
           join vendTrans
               where vendTrans.Voucher == ledgerJournalVoucherChanged.FromVoucher
                  && vendTrans.TransDate == ledgerJournalVoucherChanged.FromDate;
           
        update_recordset _voucherMap
           setting Voucher = vendTrans.Voucher,
                   TransDate = vendTrans.TransDate
           where _voucherMap.Voucher == ''
           join ledgerJournalVoucherChanged
               where ledgerJournalVoucherChanged.ToVoucher == _voucherMap.LedgerVoucher
                  && ledgerJournalVoucherChanged.ToDate == _voucherMap.AccountingDate
           join ledgerJournalVoucherChangedTwice
               where ledgerJournalVoucherChangedTwice.ToVoucher == ledgerJournalVoucherChanged.FromVoucher
                  && ledgerJournalVoucherChangedTwice.ToDate == ledgerJournalVoucherChanged.FromDate
           join vendTrans
               where vendTrans.Voucher == ledgerJournalVoucherChangedTwice.FromVoucher
                  && vendTrans.TransDate == ledgerJournalVoucherChangedTwice.FromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceMST</Name>
				<Source><![CDATA[
    public static AmountMST balanceMST(VendAccount _vendAccount)
    {
        VendTrans vendTrans;

        select sum(AmountMST), sum(SettleAmountMST) from vendTrans
            where vendTrans.AccountNum == _vendAccount;

        return (vendTrans.AmountMST - vendTrans.SettleAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the balance in reporting currency for the specified vendor account.
    /// </summary>
    /// <param name = "_vendAccount">
    /// Vendor account number.
    /// </param>
    /// <returns>
    /// The balance for the specified vendor account in reporting currency.
    /// </returns>
    public static AmountMSTSecondary balanceReportingCurrency(VendAccount _vendAccount)
    {
        VendTrans vendTrans;

        select sum(ReportingCurrencyAmount), sum(SettleAmountReporting) from vendTrans
            where vendTrans.AccountNum == _vendAccount;

        return (vendTrans.ReportingCurrencyAmount - vendTrans.SettleAmountReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSettlementOutsideCashDiscDate</Name>
				<Source><![CDATA[
    public static AmountCur calcSettlementOutsideCashDiscDate(RecId _recId,TransDate _cashDiscDate)
    {
        AmountCur amountCur = 0;
        VendSettlement vendSettlementFieldList;
        VendTrans vendTransFieldList;
        DiscGraceDays discGraceDays;

        while select OffsetCompany, OffsetRecid, SettleAmountCur from vendSettlementFieldList
            where vendSettlementFieldList.TransRecId == _recId
        {
            changecompany(vendSettlementFieldList.OffsetCompany)
            {
                select TransDate, PaymMode from vendTransFieldList
                    where vendTransFieldList.RecId == vendSettlementFieldList.OffsetRecid;

                if (vendTransFieldList.TransDate > _cashDiscDate)
                {
                    discGraceDays = VendPaymModeTable::discGraceDays(vendTransFieldList.PaymMode);

                    if (date2num(vendTransFieldList.TransDate) > date2num(_cashDiscDate) + discGraceDays)
                    {
                        amountCur += vendSettlementFieldList.SettleAmountCur;
                    }
                }
            }
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!VendTrans::exist(_recId))
        {
            ret = checkFailed(strFmt(VendTrans::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCanBeSettled_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public static boolean checkIfCanBeSettled_RU(VendTrans _vendTransDebet,
                                                        VendTrans _vendTransCredit,
                                                        TransDate _settlementDate,
                                                        DimSettlementType_RU _dimSettlementType = DimSettlementType_RU::None)
    {
        VendInvoiceJour jourDebet,
                        jourCredit,
                        jourOriginal;

        boolean ret = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            if (_vendTransDebet.Invoice)
            {
                ret = PurchBookTable_RU::checkIfCanBeSettled_RU(_vendTransDebet,
                                                                _vendTransCredit,
                                                                _settlementDate);
            }

            if (_vendTransCredit.Invoice)
            {
                ret = ret && PurchBookTable_RU::checkIfCanBeSettled_RU(_vendTransCredit, _vendTransDebet, _settlementDate);

                jourCredit = _vendTransCredit.vendInvoiceJour_RU();
                if (jourCredit.CorrectionType_RU == FactureCorrectionType_RU::Revision && jourCredit.creditNote())
                {
                    jourOriginal = VendInvoiceJour::findRecId(jourCredit.refOriginalInvoiceRecId_RU());
                    if (_vendTransDebet.Invoice)
                    {
                        jourDebet = _vendTransDebet.vendInvoiceJour_RU();
                    }

                    if (! _vendTransDebet.Invoice ||
                        ((jourDebet.CorrectionType_RU != FactureCorrectionType_RU::Revision ||
                          jourDebet.refOriginalInvoiceRecId_RU() != jourOriginal.RecId) &&
                          jourDebet.RecId != jourOriginal.RecId))
                    {
                        if (jourOriginal.vendTrans().remainAmountMST())
                        {
                            ret = checkFailed("@SYS4081864");
                        }
                    }
                }
            }
            if (_vendTransDebet.Prepayment)
            {
                ret = ret && SalesBookTable_RU::checkIfCanBeSettled_RU(_vendTransCredit, _vendTransDebet, _settlementDate);
            }

            if (_vendTransCredit.Prepayment)
            {
                ret = ret && SalesBookTable_RU::checkIfCanBeSettled_RU(_vendTransDebet, _vendTransCredit, _settlementDate);
            }
        }

        if (CustVendTransPostingLog_RU::usePostingLog())
        {
            if (!AllowSettleSameCustVendTransOnSameDate_RUFlight::instance().isEnabled())
            {
                ret = ret && ! CustVendTransPostingLog_RU::exist(_settlementDate,
                                                             _vendTransDebet.TableId,
                                                             _vendTransDebet.RecId,
                                                             _vendTransCredit.RecId,
                                                             _vendTransDebet.company(),
                                                             _vendTransCredit.company());
            }
        }

        if (_dimSettlementType != DimSettlementType_RU::None)
        {
            ret = ret && CustVendSettle::checkTransDimension_RU(_vendTransDebet, _vendTransCredit, _dimSettlementType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlementPendingUnpostedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a settlement is pending unposted payments.
    /// </summary>
    /// <returns>true if a settlement is pending unposted payments; otherwise, false.</returns>
    internal boolean isSettlementPendingUnpostedPayment()
    {
        boolean isSettlementPendingUnpostedPayment;

        // Check for settlements that are pending on unposted payments.
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(this);
        VendTransOpen vendTransOpen = VendTransOpen::findRefId(this.RecId);

        if (specTransManager.existForOtherSpec(vendTransOpen.company(), vendTransOpen.TableId, vendTransOpen.RecId))
        {
            isSettlementPendingUnpostedPayment = true;
        }

        return isSettlementPendingUnpostedPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettledCustTransOnSameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a settled customer transaction exists on the same voucher.
    /// </summary>
    /// <returns>true if a settled customer transaction exists for the same voucher; otherwise, false.</returns>
    internal boolean isSettledCustTransOnSameVoucher()
    {
        CustTrans custTrans;
        boolean isSettledCustTransOnSameVoucher;

        select firstonly RecId, SettleAmountCur from custTrans
            where custTrans.Voucher == this.Voucher
               && custTrans.TransDate == this.TransDate;

        if (custTrans.RecId && (custTrans.SettleAmountCur != 0))
        {
            isSettledCustTransOnSameVoucher = true;
        }

        return isSettledCustTransOnSameVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesVendInvoicePoolRecordExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a vendor invoice pool record exists for this <c>VendTrans</c> record.
    /// </summary>
    /// <returns>true if a vendor invoice pool record exists for this <c>VendTrans</c> record; otherwise, false.</returns>
    internal boolean doesVendInvoicePoolRecordExist()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        boolean doesVendInvoicePoolRecordExist;

        // if there is a Vend Invoice Pool record do not allow reversal
        select firstOnly RecId from ledgerJournalTrans
            where ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                && ledgerJournalTrans.Approved == NoYes::No
                && ledgerJournalTrans.VendTransId == this.RecId
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                   && ledgerJournalTable.Posted == NoYes::No
                   && ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool;

        if (ledgerJournalTrans.RecId)
        {
            doesVendInvoicePoolRecordExist = true;
        }

        return doesVendInvoicePoolRecordExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReversal</Name>
				<Source><![CDATA[
    public static boolean checkReversal(VendTrans _vendTrans)
    {
        boolean ret = false;
        TransactionReversalTrans transactionReversalTrans;

        transactionReversalTrans = TransactionReversalTrans::findTransactionReversalTrans(tableNum(VendTrans), _vendTrans.RecId);

        if (_vendTrans.SettleAmountCur)
        {
            if (transactionReversalTrans.Reversed)
            {
                ret = true;
            }
        }
        else
        {
            if (!transactionReversalTrans.Reversed || transactionReversalTrans.Original)
            {
                ret = true;
            }
        }

        if (_vendTrans.PaymId
            && (_vendTrans.SettleAmountCur || _vendTrans.SettleAmountMST)
            || _vendTrans.PromissoryNoteID
            || !_vendTrans.Approved)
        {
            ret = false;
        }

        if (_vendTrans.TransType == LedgerTransType::ExchAdjustment
            || _vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::InvoiceRemitted)
        {
            ret = false;
        }

        if (_vendTrans.BankLCImportLine != 0)
        {
            ret = false;
        }

        if (_vendTrans.isSettlementPendingUnpostedPayment())
        {
            ret = false;
        }

        if (ret)
        {
            ret = _vendTrans.CustVendTrans::checkMultiTransByVoucherDate();
        }

        if (ret)
        {
            if (_vendTrans.isSettledCustTransOnSameVoucher())
            {
                // check if the settled amount is set because it was reversed
                if (!transactionReversalTrans.Reversed)
                {
                    ret = false;
                }
            }
        }

        if (ret)
        {
            if (_vendTrans.doesVendInvoicePoolRecordExist())
            {
                ret = false;
            }
        }

        ret = ret && !VendTrans::checkJournalLineWithVendorOnBothSidesExists(_vendTrans);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chkVendTransReorg</Name>
				<Source><![CDATA[
    public static boolean chkVendTransReorg(TableId _tableId,RecId _recId, VendAccount _vendAccount)
    {
        SpecTrans specTransLocal;
        VendTransOpen vendTransOpenLocal;
        VendTrans vendTransLocal;
        CurrencyCode currencyCodeLocal = '';
        RecId controlId;
        Voucher voucherLocal;
        boolean cfmPaymentRequestsEnabled = CFMParameters::isPaymentRequestsEnabled();

        // This is called in the context of a changeCompany statement which explains the use of curext()
        while select forceselectorder crossCompany RefTableId, RefRecId, Code, Balance01 from specTransLocal
            where specTransLocal.SpecTableId == _tableId
                && specTransLocal.SpecRecId == _recId
                && specTransLocal.SpecCompany == curext()
            join RefRecId, AmountCur from vendTransOpenLocal
                where vendTransOpenLocal.TableId == specTransLocal.RefTableId
                    && vendTransOpenLocal.RecId == specTransLocal.RefRecId
                    && vendTransOpenLocal.DataAreaId == specTransLocal.RefCompany
            join CurrencyCode, AmountCur, Invoice, Voucher from vendTransLocal
                where vendTransLocal.RecId == vendTransOpenLocal.RefRecId &&
                      vendTransLocal.AccountNum == _vendAccount
        {
            if (specTransLocal.Code != currencyCodeLocal)
            {
                if (currencyCodeLocal)
                {
                    return false;
                }
                currencyCodeLocal = vendTransLocal.CurrencyCode;
            }
            if (vendTransLocal.RecId != controlId)
            {
                if (!controlId)
                {
                    controlId = vendTransLocal.RecId;
                }
                else
                {
                    return false;
                }
            }

            if (vendTransLocal.Voucher != voucherLocal)
            {
                if (!voucherLocal)
                {
                    voucherLocal = vendTransLocal.Voucher;
                }
                else
                {
                    return false;
                }
            }
            if (vendTransOpenLocal.AmountCur != specTransLocal.Balance01)
            {
                return false;
            }

            if (cfmPaymentRequestsEnabled && CFMPaymentRequestTable::existByHeader(CFMPaymentRequestSourceType::VendInvoice, vendTransLocal.RecId))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return (select firstonly
                     RecId
                from
                     vendTrans
                 where
                     vendTrans.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForSubledgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a subledger voucher is used by a vendor subledger journal transaction.
    /// </summary>
    /// <param name="_subledgerVoucher">
    /// The subledger voucher.
    /// </param>
    /// <param name="_subledgerVoucherDataAreaId">
    /// The subledger voucher data area ID.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name="_reverseExistCheck">
    /// A Boolean value that determines whether to reverse the exist check; optional.
    /// </param>
    /// <returns>
    /// true if the subledger voucher is used by a vendor subledger voucher transaction; otherwise, false.
    /// </returns>
    public static boolean existForSubledgerJournal(
        Voucher _subledgerVoucher,
        SelectableDataArea _subledgerVoucherDataAreaId,
        TransDate _accountingDate,
        boolean _reverseExistCheck = false)
    {
        VendTrans vendTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        AccountingEvent accountingEvent;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalEntry subledgerJournalEntry;
        boolean ret;

        changecompany(_subledgerVoucherDataAreaId)
        {
            select RecId from vendTrans
                where vendTrans.Voucher == _subledgerVoucher
                    && vendTrans.TransDate == _accountingDate
            exists join accountingEvent
                where accountingEvent.RecId == vendTrans.AccountingEvent
            exists join subledgerJournalEntry
                where subledgerJournalEntry.AccountingEvent == accountingEvent.RecId
            exists join subledgerJournalAccountEntry
                where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId
                    && subledgerVoucherLink.AccountingDate == vendTrans.TransDate
                    && subledgerVoucherLink.Voucher == vendTrans.Voucher
                    && subledgerVoucherLink.VoucherDataAreaId == vendTrans.DataAreaId;

            if (_reverseExistCheck)
            {
                ret = (vendTrans == null);
            }
            else
            {
                ret = (vendTrans != null);
            }
        }

        // <GBR>
        if (!ret && BrazilParameters::isEnabled())
        {
            ret = VendTrans::existForSubledgerJournal_BR(_subledgerVoucher, _subledgerVoucherDataAreaId, _accountingDate);
        }
        // </GBR>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForSubledgerJournal_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether there is a <c>VendInvoiceJour</c> associated with the voucher
    /// and whether it does not generate vendor transactions.
    /// </summary>
    /// <param name="_subledgerVoucher">
    /// The subledger voucher.
    /// </param>
    /// <param name="_subledgerVoucherDataAreaId">
    /// The subledger voucher data area ID.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date.
    /// </param>
    /// <returns>
    /// True if there is a <c>VendInvoiceJour</c> associated with the voucher
    /// and whether it does not generate vendor transactions; otherwise, false.
    /// </returns>
    public static boolean existForSubledgerJournal_BR(Voucher _subledgerVoucher, SelectableDataArea _subledgerVoucherDataAreaId, TransDate _accountingDate)
    {
        VendInvoiceJour vendInvoiceJour;

        changecompany(_subledgerVoucherDataAreaId)
        {
            select firstonly vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher == _subledgerVoucher
                    && vendInvoiceJour.InvoiceDate == _accountingDate;

            if (vendInvoiceJour && !vendInvoiceJour.createVendTrans_BR())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendTrans find(RecId _recId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTrans vendTrans;

        vendTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            vendTrans
            where
            vendTrans.RecId == _recId;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCrossCompany</Name>
				<Source><![CDATA[
    internal static VendTrans findCrossCompany(RecId _recId, boolean _forupdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTrans vendTrans;

        vendTrans.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly crosscompany vendTrans
            where vendTrans.RecId == _recId;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountVoucherDate</Name>
				<Source><![CDATA[
    public static VendTrans findAccountVoucherDate(VendAccount _vendAccount, Voucher _voucher, TransDate _transDate)
    {
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        VendTrans vendTrans;

        select FromVoucher, FromDate from ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToDate == _transDate
                && ledgerJournalVoucherChanged.ToVoucher == _voucher;

        if (ledgerJournalVoucherChanged.RecId != 0)
        {
            select firstonly vendTrans
                where vendTrans.AccountNum == _vendAccount
                    && vendTrans.Voucher == ledgerJournalVoucherChanged.FromVoucher
                    && vendTrans.TransDate == ledgerJournalVoucherChanged.FromDate;
        }
        else
        {
            select firstonly vendTrans
                where vendTrans.AccountNum == _vendAccount
                    && vendTrans.Voucher == _voucher
                    && vendTrans.TransDate == _transDate;
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    public static VendTrans findByCompany(CompanyId _companyId, RecId _recId , boolean _forupdate = false,ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTrans vendTrans;

        changecompany (_companyId)
        {
            vendTrans = VendTrans::find(_recId, _forupdate, _concurrencyModel);
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendTrans</c> record in the given JournalBatch.
    /// </summary>
    /// <param name="_JournalNum">
    /// The <c>Journal Batch Number</c> for which to search.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the returned <c>VendTrans</c> is selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendTrans</c> record.
    /// </returns>
    internal static VendTrans findByJournalNumber(
        LedgerJournalId _JournalNum,
        boolean _forUpdate = false)
    {
        VendTrans vendTrans;
        vendTrans.selectForUpdate(_forUpdate);

        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly vendTrans
                join ledgerJournalTrans
                    where vendTrans.RecId == ledgerJournalTrans.VendTransId
                        && ledgerJournalTrans.JournalNum == _JournalNum;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefVoucher_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds ref voucher information.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher information.
    /// </param>
    /// <returns>
    /// The instance of the <c>VendTrans</c> class.
    /// </returns>
    public static VendTrans findRefVoucher_IN(Voucher _voucher)
    {
        VendTrans vendTrans;
        VendTrans_W vendTrans_W;

        if (_voucher)
        {
            select firstonly vendTrans
                    where vendTrans.Voucher == _voucher
                exists join vendTrans_W
                    where vendTrans_W.VendTrans == vendTrans.RecId && vendTrans_W.AdvancePayment_IN == NoYes::Yes;
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDate</Name>
				<Source><![CDATA[
    public static VendTrans findVoucherDate(Voucher _voucher, TransDate _transDate)
    {
        VendTrans vendTrans;

        if (_voucher && _transDate)
        {
            select firstonly vendTrans
                index hint VoucherDateIdx
                where vendTrans.Voucher == _voucher && vendTrans.TransDate == _transDate;
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInvoiceAccountNumber</Name>
				<Source><![CDATA[
    public static VendTrans findByInvoiceAccountNumber(VendInvoiceId _invoice, VendAccount _vendAccount, TransDate _transDate, boolean _forUpdate = false)
    {
        VendTrans vendTrans;
        if(_invoice && _vendAccount && _transDate)
        {
            select firstonly forupdate vendTrans
                where vendTrans.Invoice == _invoice 
                   && vendTrans.AccountNum == _vendAccount 
                   && vendTrans.TransDate == _transDate;
        }
        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a <c>VendTrans</c> table record for a given voucher, transaction, and transaction type.
    /// </summary>
    /// <param name="_voucher">
    ///    The <c>Voucher</c> to search for.
    /// </param>
    /// <param name="_transDate">
    ///    The <c>TransDate</c> to search for.
    /// </param>
    /// <param name="_transType">
    ///    The <c>TransType</c> to search for.
    /// </param>
    /// <returns>
    ///    A <c>VendTrans</c> table record if found.
    /// </returns>
    public static VendTrans findVoucherDateType(Voucher _voucher, TransDate _transDate,LedgerTransType _transType)
    {
        VendTrans vendTrans;

        if (_voucher && _transDate)
        {
            select firstonly vendTrans
                where vendTrans.Voucher == _voucher &&
                      vendTrans.TransDate == _transDate &&
                      vendTrans.TransType == _transType;
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleInvoiceCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of invoices settled with the given payment record ID.
    /// </summary>
    /// <param name="_vendTransRecID">
    /// The payment record ID.
    /// </param>
    /// <returns>
    /// The number of invoices settled.
    /// </returns>
    public static int getSettleInvoiceCount(RecId _vendTransRecID)
    {
        VendTrans vendTrans;

        select crosscompany count(RecId) from vendTrans
            where vendTrans.OffsetRecid == _vendTransRecID;

        return any2int(vendTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLCRelatedTransToBeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is any Letter of Credit that is related to the <c>VendTrans</c> record that
    /// has to be reversed.
    /// </summary>
    /// <param name="_vendTable">
    /// The vender to check.
    /// </param>
    /// <returns>
    /// true if there is any Letter of Credit that is related to the <c>VendTrans</c> record that has to be
    /// reversed; otherwise, false.
    /// </returns>
    public static boolean hasLCRelatedTransToBeReversed(VendTable _vendTable)
    {
        boolean ret = false;
        SpecTrans specTransLocal;
        VendSettlement vendSettlementLocal;
        VendTrans vendTransLocal;

        if (BankLCImportFeatureChecker::checkBankLCImportEnabled())
        {
            select firstonly RecId from specTransLocal
                where specTransLocal.SpecCompany == _vendTable.company()
                    && specTransLocal.SpecTableId == _vendTable.TableId
                    && specTransLocal.SpecRecId == _vendTable.RecId
                exists join RecId from vendSettlementLocal
                    where vendSettlementLocal.TableId == specTransLocal.RefTableId
                        && vendSettlementLocal.RecId == specTransLocal.RefRecId
                        && vendSettlementLocal.DataAreaId == specTransLocal.RefCompany
                exists join RecId from vendTransLocal
                    where vendTransLocal.RecId == vendSettlementLocal.TransRecId
                        && vendTransLocal.AccountNum == vendSettlementLocal.AccountNum
                        && vendTransLocal.DataAreaId == vendSettlementLocal.TransCompany
                        && vendTransLocal.BankLCImportLine != 0;
            if (specTransLocal.RecId != 0)
            {
                // Letter of Credit related transaction could not be reversed.
                checkFailed("@SYS321799");
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendBalance</Name>
				<Source><![CDATA[
    public static AmountMST initVendBalance(CustVendAC _custVendAC)
    {
        VendTrans vendTrans;

        select sum (AmountMST) from vendTrans
            where vendTrans.AccountNum == _custVendAC;

        return vendTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransact</Name>
				<Source><![CDATA[
    public static boolean reverseTransact(
        Common _common,
        LedgerVoucher _parentLedgerVoucher = null,
        SettleDatePrinc _datePrinciple = SettleDatePrinc::DateOfPayment,
        TransDate _saveDate = dateNull(),
        boolean _useDatePrinciple = true,
        Voucher _paymentVoucher = '')
    {
        LedgerVoucher reversalLedgerVoucher;
        CustVendReversePosting custVendReversePosting;
        TransDate transDate;
        LedgerVoucherGroup ledgerVoucherGroup;
        VendTable vendTable;
        LedgerJournalTrans ledgerJournalTrans;
        str account;
        // <GEERU>
        SettleDatePrinc datePrinciple;
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        switch (_common.TableId)
        {
            case tableNum(VendTable) :
                vendTable = _common;
                transDate = vendTable.getSettleDate(_datePrinciple, _saveDate);
                account = vendTable.AccountNum;
                break;

            case tableNum(LedgerJournalTrans) :
                ledgerJournalTrans = _common;
                transDate = ledgerJournalTrans.TransDate;
                account = ledgerJournalTrans.parmAccount();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        ledgerVoucherGroup = LedgerVoucherGroup::construct();

        custVendReversePosting = CustVendReversePosting::construct(_common, ledgerVoucherGroup);
        custVendReversePosting.parmTransDate(transDate);
        // <GEERU>
        if (! TaxParameters::find().ReverseSettlementDatePrinciple_W
         && ! countryRegion_RU)
        {
            // </GEERU>
            custVendReversePosting.parmDatePrinciple(_datePrinciple);
            // <GEERU>
        }
        if (countryRegion_RU)
        {
            datePrinciple = custVendReversePosting.parmDatePrinciple();
        }
        // </GEERU>
        if (_parentLedgerVoucher != null)
        {
            custVendReversePosting.parmParentVoucher(_parentLedgerVoucher.lastVoucher());
        }
        // <GEERU>
        if (countryRegion_RU
            && ! _useDatePrinciple)
        {
            custVendReversePosting.parmDatePrinciple(_datePrinciple);
            custVendReversePosting.parmSaveDate_W(_saveDate);
        }
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custVendReversePosting.parmPaymentVoucher_BR(_paymentVoucher);
        }
        // <GBR>

        custVendReversePosting.updateNow();
        // <GEERU>
        if (countryRegion_RU)
        {
            custVendReversePosting.parmDatePrinciple(datePrinciple);
        }
        // </GEERU>

        // Validate and post the ledger voucher group for reverse settlement
        ledgerVoucherGroup.end();

        VendTrans::updateBudgetForCashDiscounts_PSN(ledgerVoucherGroup);

        if (countryRegion_RU)
        {
            CustVendReversePostingLog_RU::createTransLink(custVendReversePosting.parmReversePostingLogSet_RU());
        }

        // if the _parentLedgerVoucher was passed is not null this means that this reversal is being done in the
        // same database transactions as the some other transaction, and these transaction must be linked.
        // The _parentLedgerVoucher is null this means that the reversal is not being done as part of a larger
        // transaction, this is not an error.
        if (_parentLedgerVoucher != null && _parentLedgerVoucher.parmCompanyId() == curext())
        {
            reversalLedgerVoucher = ledgerVoucherGroup.findLedgerVoucher(curext(), custVendReversePosting.findNumberSequenceCodeByCompany(curext()));

            if (reversalLedgerVoucher != null)
            {
                reversalLedgerVoucher.createVoucherLinks(_parentLedgerVoucher.lastVoucher(), _parentLedgerVoucher.lastTransDate());
            }
        }

        TransactionLog::create(TransactionLogType::VendTransEdit, strFmt("@SYS82246", account));

        ledgerVoucherGroup.createTransactionLog(TransactionLogType::VendTransEdit, "@SYS91317");

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransact</Name>
				<Source><![CDATA[
    public static boolean settleTransact(
        VendTable _vendTable,
        LedgerVoucher _ledgerVoucher = null,
        boolean _balancePostingProfile = true,
        SettleDatePrinc _saveDatePrinciple = SettleDatePrinc::DateOfPayment,
        TransDate _saveDate = dateNull()
        ,DimSettlementType_RU _dimSettlementType = DimSettlementType_RU::None
        )
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        #OCCRetryCount
        LedgerVoucher ledgerVoucher = _ledgerVoucher;
        TransDate transDate;
        VendTrans vendTrans;
        VendTransData vendTransData;

        transDate = _vendTable.getSettleDate(_saveDatePrinciple, _saveDate);

        try
        {
            ttsbegin;

            vendTransData = vendTrans.transData();
            // set the datePrinciple and selected date variable before calling updateOffsetVoucher.
            // These variables are used in the updateOffsetVoucher method.
            vendTransData.parmDatePrinciple(_saveDatePrinciple);
            vendTransData.parmSelectedDate(_saveDate);
            vendTransData.updateOffsetVoucher(SettlementType::SelectedTransact,
                                                      ledgerVoucher,
                                                      _vendTable,
                                                      _balancePostingProfile
                                                      // <GEERU>
                                                      ,SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) ? _dimSettlementType : DimSettlementType_RU::None
                                                      // </GEERU>
                                                      );

            TransactionLog::create(TransactionLogType::VendTransEdit, strFmt("@SYS82246", _vendTable.AccountNum));

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>VendTrans</c> table record for a given journal number and transaction date.
    /// </summary>
    /// <param name = "_journalNum">
    ///     The <c>JournalNum</c> to search on.
    /// </param>
    /// <param name = "_transDate">
    ///     The <c>TransDate</c> to search on.
    /// </param>
    /// <returns>
    ///    A <c>VendTrans</c> table record if found.
    /// </returns>
    public static VendTrans findByJournalNum(JournalNumNotPosted _journalNum, TransDate _transDate)
    {
        VendTrans vendTrans;

        if (_journalNum && _transDate)
        {
            select firstonly vendTrans
            where vendTrans.JournalNum == _journalNum &&
                  vendTrans.TransDate == _transDate;
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateThirdPartyBankAccountIdInOpenTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates ThirdPartyBankAccountId field of related <c>VendTransOpen</c> records.
    /// </summary>
    private void updateThirdPartyBankAccountIdInOpenTrans()
    {
        VendTransOpen relatedVendTransOpen;

        update_recordset relatedVendTransOpen
            setting ThirdPartyBankAccountId = this.ThirdPartyBankAccountId
            where relatedVendTransOpen.AccountNum == this.AccountNum
                && relatedVendTransOpen.RefRecId == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetForCashDiscounts_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the actual expenditures of the budget for the cash discounts.
    /// </summary>
    /// <param name="_ledgerVoucherGroup">
    /// The <c>LedgerVoucherGroup</c> class object containing the settlement cash discount records.
    /// </param>
    public static void updateBudgetForCashDiscounts_PSN(LedgerVoucherGroup _ledgerVoucherGroup)
    {
        Map voucherGroupMap;
        MapEnumerator voucherGroupMapEnumerator;
        LedgerVoucher ledgerVoucher;
        LedgerVoucherList ledgerVoucherList;
        LedgerVoucherObject ledgerVoucherObject;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        BudgetControlGeneralJournalEntry budgetControlGeneralJournalEntry;
        boolean moreItems;
        VendTrans vendTrans;
        vendTrans vendTransInvoice;
        CashDisc cashDisc;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
                && Ledger::isLedgerBudgetControlEnabled())
        {
            voucherGroupMap = _ledgerVoucherGroup.getInternalCollection();
            voucherGroupMapEnumerator = voucherGroupMap.getEnumerator();

            while (voucherGroupMapEnumerator.moveNext())
            {
                ledgerVoucher = voucherGroupMapEnumerator.currentValue();
                ledgerVoucherList = ledgerVoucher.getInternalCollection();
                moreItems = ledgerVoucherList.first();

                while (moreItems)
                {
                    ledgerVoucherObject = ledgerVoucherList.item();
                    LedgerRecId ledgerRecId = ledgerVoucherObject.parmLedger().RecId;

                    while select crossCompany ReciD,
                        SubledgerVoucher,
                        SubledgerVoucherDataAreaId,
                        AccountingDate,
                        Ledger
                        from generalJournalEntry
                        where generalJournalEntry.SubledgerVoucher == ledgerVoucherObject.parmSubledgerVoucher()
                            && generalJournalEntry.SubledgerVoucherDataAreaId == ledgerVoucherObject.parmSubledgerVoucherDataAreaId()
                            && generalJournalEntry.AccountingDate == ledgerVoucherObject.parmAccountingDate()
                            && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                            && generalJournalEntry.Ledger == ledgerRecId
                        join LedgerDimension, TransactionCurrencyAmount, TransactionCurrencyCode
                            from generalJournalAccountEntry
                            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                                && generalJournalAccountEntry.PostingType == LedgerPostingType::VendCashDisc
                        exists join vendTrans
                            where vendTrans.voucher == generalJournalEntry.SubledgerVoucher
                                && vendTrans.dataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId
                                && vendTrans.TransDate == generalJournalEntry.AccountingDate
                                && vendTrans.TransType == LedgerTransType::CashDiscount
                        exists join vendTransInvoice
                            where vendTransInvoice.RecId == vendTrans.OffsetRecid
                        exists join cashDisc
                            where cashDisc.CashDiscCode == vendTransInvoice.CashDiscCode
                                && cashDisc.dataAreaId == generalJournalEntry.SubledgerVoucherDataAreaId
                                && cashDisc.DiscountOffsetMethod_PSN == DiscountOffsetMethod::InvoiceAccount

                    {
                        if (BudgetControlConfiguration::isSourceIntegratorEnabled(
                                                generalJournalEntry.Ledger,
                                                BudgetControlSourceIntegrator::VendorInvoice))

                        {
                            if (!budgetControlGeneralJournalEntry)
                            {
                                budgetControlGeneralJournalEntry = BudgetControlGeneralJournalEntry::newGeneralJournalEntry(
                                                            generalJournalEntry.RecId,
                                                            generalJournalEntry.SubledgerVoucher);
                                budgetControlGeneralJournalEntry.saveBudgetSource();
                            }

                            budgetControlGeneralJournalEntry.addLedgerDimensionDetail(
                                                    generalJournalEntry.SubledgerVoucherDataAreaId,
                                                    generalJournalAccountEntry.LedgerDimension,
                                                    generalJournalAccountEntry.TransactionCurrencyAmount,
                                                    generalJournalAccountEntry.TransactionCurrencyCode);
                        }
                    }

                    if (budgetControlGeneralJournalEntry)
                    {
                        BudgetControlAccountingJournalProcessor::submitGeneralJournalToCheckBudgetServer(budgetControlGeneralJournalEntry);
                        budgetControlGeneralJournalEntry = null;
                    }

                    moreItems = ledgerVoucherList.next();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor transaction is of type purchase order.
    /// </summary>
    /// <returns>
    /// True when the vendor transaction is of type purchase order else false.
    /// </returns>
    public boolean isTypePurch()
    {
        boolean ret;

        if ((this.TransType == LedgerTransType::Purch) ||
            (this.vendInvoiceJour().PurchaseType == PurchaseType::Purch))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxAmountToPost</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true), SysObsoleteAttribute('This method is not used anymore', false, 30\6\2020)]
    display AmountCur displayTaxAmountToPost()
    {
        AmountMST taxAmountMSTToPost;
        AmountCur taxAmountToPost;
        TaxAmountCur taxAmountCur;
        TaxAmountCur taxAmountCurTotal;

        LedgerJournalVoucherChanged changedVoucher = LedgerJournalVoucherChanged::findFromVoucher(this.JournalNum, this.Voucher);

        LedgerJournalTrans ledgerJournalTrans = changedVoucher ?
            LedgerJournalTrans::findJournalForVoucher(changedVoucher.toVoucher, changedVoucher.ToDate)
            : ledgerJournalTrans::findJournalForVoucher(this.Voucher, this.TransDate);

        // If tax is posted this function get tax from Invoice Register and sum of Invoice Approval Journal and Invoice Register
        // If both these taxes are same then Invoice Approval Journal did not have any new taxes and hence the taxamount is zero.
        if (LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Posted)
        {
            taxAmountCur = Tax::netTaxTotalMSTVoucherDate(ledgerJournalTrans.Voucher,ledgerJournalTrans.TransDate,ledgerJournalTrans.JournalNum);
            taxAmountCurTotal = Tax::taxTotal(ledgerJournalTrans.Voucher,ledgerJournalTrans.TransDate,ledgerJournalTrans.JournalNum, false);

            if (taxAmountCur == taxAmountCurTotal)
            {
                taxAmountCurTotal = 0;
            }
        }
        else
        {
            LedgerJournalEngine_Server ledgerServer = LedgerJournalEngine_Server::construct();
            LedgerJournalTrans_Asset ledgerJournalAsset = LedgerJournalTrans_Asset::find(ledgerJournalTrans.RecId);
            [taxAmountMSTToPost, taxAmountToPost] =
                ledgerServer.calcTotalTaxAmount(ledgerJournalTrans, ledgerJournalAsset, false, false);
            taxAmountCurTotal = taxAmountToPost;
        }
        return taxAmountCurTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxAmountReverse</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display AmountCur displayTaxAmountReverse()
    {
        TransDate transDate;
        Voucher voucher;
        LedgerJournalTrans ledgerJournalTrans;

        LedgerJournalVoucherChanged changedVoucher = LedgerJournalVoucherChanged::findFromVoucher(this.JournalNum, this.Voucher);

        if (changedVoucher)
        {
            LedgerJournalTable ledgerJournalTable;

            // Find <c>LedgerJournalTrans</c> from invoice register.
            // If record id of invoice register is bigger than invoice approval,
            // select firstonly by using 'LedgerJournalTrans::findJournalForVoucher(changedVoucher.FromVoucher, changedVoucher.FromDate)'
            // won't get the correct <c>LedgerJournalTrans</c> that mapped to <c>TaxTrans</c>.
            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.Voucher == changedVoucher.FromVoucher
                    && ledgerJournalTrans.TransDate == changedVoucher.FromDate
                    && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                    && ledgerJournalTrans.Transferred == NoYes::No
                    && ledgerJournalTrans.NoEdit == NoYes::No
                exists join ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger;

            // If the transaction isn't invoice register, find <c>LedgerJournalTrans</c> by from voucher and from date.
            if (!ledgerJournalTrans)
            {
                ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(changedVoucher.FromVoucher, changedVoucher.FromDate);
            }
        }
        else
        {
            ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(this.Voucher, this.TransDate);
        }

        return Tax::taxTotal(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate, ledgerJournalTrans.JournalNum, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInvoiceRegisterVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method displays the original invoice register voucher number for invoice register approved vouchers in vendor transactions form
    /// </summary>
    /// <param name="_vendTrans">
    /// Vendtrans buffer is passed as argument for which the original invoice register voucher number should be displayed.
    /// </param>
    /// <returns>
    /// Returns the original invoice register voucher number for invoice register approved vouchers.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display Voucher originalInvoiceRegisterVoucher(VendTrans _vendTrans)
    {
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        select firstonly FromVoucher from  ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.ToVoucher == _vendTrans.Voucher
                && ledgerJournalVoucherChanged.ToDate == _vendTrans.TransDate
                && ledgerJournalVoucherChanged.JournalNum == _vendTrans.JournalNum
                && ledgerJournalVoucherChanged.ToVoucher != ledgerJournalVoucherChanged.FromVoucher;

        return ledgerJournalVoucherChanged.FromVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalLineWithVendorOnBothSidesExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there is a journal, offset account and ledger account posted for the vendor account.
    /// </summary>
    /// <param name = "_vendTrans">
    /// Vendor transaction.
    /// </param>
    /// <returns>
    /// true, if transactions exist; otherwise, false.
    /// </returns>
    internal static boolean checkJournalLineWithVendorOnBothSidesExists(VendTrans _vendTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly RecId from ledgerJournalTrans
            where ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
                && ledgerJournalTrans.LedgerDimension
                && ledgerJournalTrans.OffsetLedgerDimension
                && ledgerJournalTrans.Voucher == _vendTrans.Voucher
                && ledgerJournalTrans.TransDate == _vendTrans.TransDate;

        return ledgerJournalTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTax1099ForeignIndicator</Name>
				<Source><![CDATA[
    public display Tax1099ForeignEntityIndicator displayTax1099ForeignIndicator()
    {
        VendTable vendTable = VendTable::find(this.AccountNum);

        return vendTable.ForeignEntityIndicator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendTransInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>The <c>CustVendTransInterface</c> object.</returns>
    public CustVendTransInterface custVendTransInterface()
    {
        return this.CustVendTrans::custVendTransInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deEcritureLib_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the text from the transaction.
    /// </summary>
    /// <returns>
    /// A text from <c>VendTrans</c> record if found, or from connected <c>TransactionLog</c> record if found, or N/A.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display TransTxt deEcritureLib_FR()
    {
        TransTxt txt = this.Txt ? this.Txt : TransactionLog::find(this.createdTransactionId).Txt;

        return txt ? txt : "@SYS180118";
    }

]]></Source>
			</Method>
			<Method>
				<Name>deJournalLib_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the type from connected <c>TransactionLog</c> record in French.
    /// </summary>
    /// <returns>
    /// The string containing a transaction type.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display TransTxt deJournalLib_FR()
    {
        TransTxt ret;

        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(this.Voucher, this.TransDate);

        if (ledgerJournalTrans)
        {
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);
            if (ledgerJournalTable)
            {
                ret = ledgerJournalTable.ledgerJournalName().Name;
            }
        }

        if (!ret)
        {
            if (this.TransType)
            {
                ret = SysLabel::labelId2String(new DictEnum(enumNum(LedgerTransType)).index2LabelId(this.TransType), 'fr');
            }
            else
            {
                ret = SysLabel::labelId2String(new DictEnum(enumNum(TransactionLogType)).index2LabelId(TransactionLog::find(this.createdTransactionId).Type), 'fr');
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deLedgerAccount_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays Ledger account in a format for GDPdU export.
    /// </summary>
    /// <returns>
    /// A ledger account if it doesn't have financial dimensions set,
    /// otherwise ledger account with financial dimensions split by dimensions separator.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display LedgerAccount deLedgerAccount_FR()
    {
        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(
            VendLedgerAccounts::summaryLedgerDimension(this.AccountNum, this.PostingProfile, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deLedgerAccountName_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays Ledger account name in a format for GDPdU export.
    /// </summary>
    /// <returns>
    /// The ledger account name.
    /// </returns>
    /// <remarks>
    /// This method is used for Data Export for France.
    /// </remarks>
    public display AccountName deLedgerAccountName_FR()
    {
        return MainAccount::findByMainAccountId(this.deLedgerAccount_FR()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendBankAccountIdInLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void updateCustVendBankAccountIdInLedgerJournalTrans()
    {
        LedgerJournalTrans ledgerJournalTrans;

        update_recordset ledgerJournalTrans
            setting CustVendBankAccountId = this.ThirdPartyBankAccountId
            where ledgerJournalTrans.VendTransId == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCombinedExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingCombinedExchangeRate()
    {
        return this.custVendTransInterface().getReportingCombinedExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchangeRate1</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingExchangeRate1()
    {
        return this.custVendTransInterface().getReportingExchangeRate1();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchangeRate2</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate getReportingExchangeRate2()
    {
        return this.custVendTransInterface().getReportingExchangeRate2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExchangeHelperReportingExchRate</Name>
				<Source><![CDATA[
    internal void setExchangeHelperReportingExchRate(CurrencyExchangeHelper _currencyHelper)
    {
        this.custVendTransInterface().setExchangeHelperReportingExchRate(_currencyHelper);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret
            && VendBankAccountChangeProposalFeature::instance().isEnabled()
            && VendBankAccount::validateIsDraft(this.AccountNum, this.ThirdPartyBankAccountId))
        {
            ret = checkFailed(strFmt("@AccountsPayable:VendBankAccountValidateIsDraftError", this.ThirdPartyBankAccountId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126062</DeveloperDocumentation>
	<FormRef>VendTrans</FormRef>
	<Label>@SYS2753</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AccountDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>VendTrans_W</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendTrans_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LedgerCov</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerCov</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>Tax1099BoxDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>Tax1099BoxDetail</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendSettlement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendSettlement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendTrans_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendTrans_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetRecid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement_RU</Name>
			<Label>@SYS332501</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>agreementId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>agreementDocumentTitle_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RBOVendTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateSecond</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyCrossRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchRateSecondary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank</Name>
			<Label>@SYS22173</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyBankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThirdPartyBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCImportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCImportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS101280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExchangeAdjustment</Name>
			<Label>@SYS55328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendExchAdjustmentUnrealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendExchAdjustmentRealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingExchAdjustmentRealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingExchAdjustmentUnrealized</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchAdjustmentReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExchangeRates</Name>
			<Label>@SYS55328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastExchAdj</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastExchAdjVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastExchAdjRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastExchAdjRateReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approver</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceReleaseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseDateComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInvoicePurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Journal</Name>
			<Label>@SYS6790</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Correct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Prepayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostingProfiles</Name>
			<Label>@SYS24751</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfileClose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfileApprove</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfileCancel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfileReOpen</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingChangeVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS80304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceProject</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PromissoryNote</Name>
			<Label>@SYS71440</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PromissoryNoteStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankRemittanceFileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Remittance</Name>
			<Label>@sys152838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemittanceLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemittanceAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Settlement</Name>
			<Label>@SYS10163</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettleAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastSettleDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Settlement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleTax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleTax1099StateAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleAmountReporting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SettlementStatus</Name>
			<Label>@SYS21685</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfileClose</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099Fields</Name>
			<Label>@SYS24226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorTransactions</Name>
			<Label>@SYS2753</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Arrival</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendPaymentGroup</Name>
			<Label>@SYS133130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPaymentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendTransReferenceVoucher_IN</Name>
			<Label>@GLS222673</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VoucherReference</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingEvent</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurDebCred</ExtendedDataType>
			<CorrectionFlagField>Correct</CorrectionFlagField>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTDebCred</ExtendedDataType>
			<CorrectionFlagField>Correct</CorrectionFlagField>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Approved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ApprovedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ApprovedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Approver</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmApprover</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Arrival</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ArrivalId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCImportLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankRemittanceFileId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankRemittanceFileIdVend</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cancel</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Cancelled</ExtendedDataType>
			<Label>@SYS4412</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscBaseDate</Name>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Closed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<GroupPrompt>@SYS13342</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correct</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Correct</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EUROTriangulation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjustment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchAdjustment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchAdjustmentReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchAdjustment</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRateSecond</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FixedExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FixedExchRate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceProject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS50055</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>InvoiceReleaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceReleaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>VendInvoiceRegisterApproval</ConfigurationKey>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastExchAdj</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS128752</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LastExchAdjRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Label>@sys98723</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LastExchAdjRateReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastExchAdjVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@sys98724</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastSettleAccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@SYS107392</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastSettleCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS107393</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastSettleDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22069</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastSettleVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS22848</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetRecid</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU,IN,JP,BR</CountryRegionCodes>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymReference</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymTermId</Name>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingChangeVoucher</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
			<Label>@SYS12371</Label>
			<SaveContents>No</SaveContents>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfileApprove</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
			<Label>@SYS16449</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfileCancel</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
			<Label>@SYS12483</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfileClose</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
			<Label>@SYS18742</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfileReOpen</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
			<Label>@SYS22066</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Prepayment</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS59473</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PromissoryNoteID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPromissoryNoteID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PromissoryNoteSeqNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>VendPromissoryNote</ConfigurationKey>
			<ExtendedDataType>CustVendNegInstSeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PromissoryNoteStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>VendPromissoryNote</ConfigurationKey>
			<ExtendedDataType>VendPromissoryNoteStatus</ExtendedDataType>
			<EnumType>CustVendNegInstStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RBOVendTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCustTrans</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReleaseDateComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReleaseDateComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RemittanceAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RemittanceAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RemittanceLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RemittanceLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyCrossRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyExchangeRate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingExchAdjustmentRealized</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchAdjustmentRealized</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingExchAdjustmentUnrealized</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchAdjustmentUnrealized</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS13383</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmountMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS93947</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleAmountReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Settlement</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAutoSettlement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleTax1099Amount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SettleTax1099Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SettleTax1099StateAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SettleTax1099StateAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099Amount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Tax1099Date</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Date</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099Fields</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Tax1099FieldsRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099Num</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099RecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099State</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099State</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099StateAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099StateAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInvoicePurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxInvoicePurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ThirdPartyBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankThirdPartyAccountId</ExtendedDataType>
			<GroupPrompt>@SYS8079</GroupPrompt>
			<Label>@SYS88299</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransactionTextLarge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VendExchAdjustmentRealized</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchAdjustmentRealized</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VendExchAdjustmentUnrealized</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendExchAdjustmentUnrealized</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportingCurrencyExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchRateSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportingCurrencyExchRateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ArrivalAccountId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MainAccountNum</ExtendedDataType>
			<HelpText>@AccountsPayable:ArrivalAccountIdHelpText</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@AccountsPayable:ArrivalAccountId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SummaryAccountId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MainAccountNum</ExtendedDataType>
			<HelpText>@AccountsPayable:SummaryAccountIdHelpText</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS11733</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_VendTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>journalNum</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountDate1099Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099FieldsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReasonTableRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ReasonRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ApproverIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Approver</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CompanyAccount</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClosedAccount</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Closed</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OffsetRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OffsetRecid</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingEvent</MapField>
					<MapFieldTo>AccountingEvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountCur</MapField>
					<MapFieldTo>AmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AmountMST</MapField>
					<MapFieldTo>AmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Approved</MapField>
					<MapFieldTo>Approved</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Approver</MapField>
					<MapFieldTo>Approver</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Arrival</MapField>
					<MapFieldTo>Arrival</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ArrivalAccountId</MapField>
					<MapFieldTo>ArrivalAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeCode</MapField>
					<MapFieldTo>BankCentralBankPurposeCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeText</MapField>
					<MapFieldTo>BankCentralBankPurposeText</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
					<MapFieldTo>BankLCImportLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankRemittanceFileId</MapField>
					<MapFieldTo>BankRemittanceFileId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CancelledPayment_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscBaseDate</MapField>
					<MapFieldTo>CashDiscBaseDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Closed</MapField>
					<MapFieldTo>Closed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyBankAccountId</MapField>
					<MapFieldTo>CompanyBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Correct</MapField>
					<MapFieldTo>Correct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustBillingClassification</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendNegInstId_JP</MapField>
					<MapFieldTo>PromissoryNoteID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DataArea</MapField>
					<MapFieldTo>DataAreaId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EPPaymentType_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EPPaymentWay_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EUROTriangulation</MapField>
					<MapFieldTo>EUROTriangulation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustment</MapField>
					<MapFieldTo>ExchAdjustment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustmentRealized</MapField>
					<MapFieldTo>VendExchAdjustmentRealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustmentReporting</MapField>
					<MapFieldTo>ExchAdjustmentReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchAdjustmentUnrealized</MapField>
					<MapFieldTo>VendExchAdjustmentUnrealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecond</MapField>
					<MapFieldTo>ExchRateSecond</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedExchRate</MapField>
					<MapFieldTo>FixedExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Invoice</MapField>
					<MapFieldTo>Invoice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceProject</MapField>
					<MapFieldTo>InvoiceProject</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceReleaseDate</MapField>
					<MapFieldTo>InvoiceReleaseDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdj</MapField>
					<MapFieldTo>LastExchAdj</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdjRate</MapField>
					<MapFieldTo>LastExchAdjRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdjRateReporting</MapField>
					<MapFieldTo>LastExchAdjRateReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastExchAdjVoucher</MapField>
					<MapFieldTo>LastExchAdjVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleAccountNum</MapField>
					<MapFieldTo>LastSettleAccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleCompany</MapField>
					<MapFieldTo>LastSettleCompany</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleDate</MapField>
					<MapFieldTo>LastSettleDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LastSettleVoucher</MapField>
					<MapFieldTo>LastSettleVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Mandate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOrderID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstId</MapField>
					<MapFieldTo>PromissoryNoteID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstSeqNum</MapField>
					<MapFieldTo>PromissoryNoteSeqNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstStatus</MapField>
					<MapFieldTo>PromissoryNoteStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OffsetRecId</MapField>
					<MapFieldTo>OffsetRecid</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
					<MapFieldTo>PaymId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymReference</MapField>
					<MapFieldTo>PaymReference</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymTermId</MapField>
					<MapFieldTo>PaymTermId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Prepayment</MapField>
					<MapFieldTo>Prepayment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReasonRefRecId</MapField>
					<MapFieldTo>ReasonRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReleaseDateComment</MapField>
					<MapFieldTo>ReleaseDateComment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyAmount</MapField>
					<MapFieldTo>ReportingCurrencyAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyCrossRate</MapField>
					<MapFieldTo>ReportingCurrencyCrossRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchRate</MapField>
					<MapFieldTo>ReportingCurrencyExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingCurrencyExchRateSecondary</MapField>
					<MapFieldTo>ReportingCurrencyExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingExchAdjustmentRealized</MapField>
					<MapFieldTo>ReportingExchAdjustmentRealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReportingExchAdjustmentUnrealized</MapField>
					<MapFieldTo>ReportingExchAdjustmentUnrealized</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailCustTrans</MapField>
					<MapFieldTo>RBOVendTrans</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmount_MX</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmountCur</MapField>
					<MapFieldTo>SettleAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmountMST</MapField>
					<MapFieldTo>SettleAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleAmountReporting</MapField>
					<MapFieldTo>SettleAmountReporting</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Settlement</MapField>
					<MapFieldTo>Settlement</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleTax1099Amount</MapField>
					<MapFieldTo>SettleTax1099Amount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SettleTax1099StateAmount</MapField>
					<MapFieldTo>SettleTax1099StateAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SummaryAccountId</MapField>
					<MapFieldTo>SummaryAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Amount</MapField>
					<MapFieldTo>Tax1099Amount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099Fields</MapField>
					<MapFieldTo>Tax1099Fields</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099RecId</MapField>
					<MapFieldTo>Tax1099RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099State</MapField>
					<MapFieldTo>Tax1099State</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099StateAmount</MapField>
					<MapFieldTo>Tax1099StateAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInvoiceId</MapField>
					<MapFieldTo>TaxInvoicePurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ThirdPartyBankAccountId</MapField>
					<MapFieldTo>ThirdPartyBankAccountId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransType</MapField>
					<MapFieldTo>TransType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendorVATDate</MapField>
					<MapFieldTo>VendorVATDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
					<MapFieldTo>VendPaymentGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingEvent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingEvent</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingEvent</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingEvent</Name>
					<Field>AccountingEvent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Approver_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Approver_VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Approver</Name>
					<Field>Approver</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyBankAccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>CompanyBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<SourceEDT>BankCentralBankPurposeCode</SourceEDT>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankChequePaymentTrans</Name>
			<EntityRelationshipRole>@SYS126063</EntityRelationshipRole>
			<RelatedTable>BankChequePaymTrans</RelatedTable>
			<RelatedTableRole>BankChequePaymentTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceTransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>InvoiceVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCImportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCImportLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>BankLCImportLine_VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCImportLine</Name>
					<Field>BankLCImportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankRemittanceFilesVend</Name>
			<EntityRelationshipRole>@SYS125120</EntityRelationshipRole>
			<RelatedTable>BankRemittanceFilesVend</RelatedTable>
			<RelatedTableRole>BankRemittanceFilesVend</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankRemittanceFileId</Name>
					<Field>BankRemittanceFileId</Field>
					<RelatedField>FileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>CashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LastSettleCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>LastSettleCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FactureJourAmountDifference_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FactureJour_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FactureJourAmountDifference_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>FactureType_Extern</Name>
					<RelatedField>FactureType</RelatedField>
					<ValueStr>FactureType_RU::AmoutDifference</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>FactureModule_RU::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>CustVendInvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>FactureDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>CustVendTransRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125128</EntityRelationshipRole>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecId</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RemittanceAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RemittanceAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RemittanceAddress</Name>
					<Field>RemittanceAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RemittanceLocation_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RemittanceLocation_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RemittanceLocation</Name>
					<Field>RemittanceLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Tax1099Detail</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>Tax1099BoxDetail</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099Detail</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Tax1099Detail_VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099RecId</Name>
					<Field>Tax1099RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Tax1099Fields</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Tax1099Fields</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099Fields</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099Fields</Name>
					<Field>Tax1099Fields</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Tax1099State</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099State</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099State</Name>
					<SourceEDT>Tax1099State</SourceEDT>
					<Field>Tax1099State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ThirdPartyBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123560</EntityRelationshipRole>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ThirdPartyBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ThirdPartyBankAccountId</Name>
					<Field>ThirdPartyBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpBankPaym2Invoice</Name>
			<EntityRelationshipRole>@SYS125129</EntityRelationshipRole>
			<RelatedTable>TmpBankPaym2Invoice</RelatedTable>
			<RelatedTableRole>TmpBankPaym2Invoice</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceTransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>InvoiceVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendExchRateAdjustment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125123</EntityRelationshipRole>
			<RelatedTable>VendExchRateAdjustment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendExchRateAdjustment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>createdTransactionId</Name>
					<Field>createdTransactionId</Field>
					<RelatedField>createdTransactionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EntityRelationshipRole>@SYS125125</EntityRelationshipRole>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger_PostingChangeVoucher</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedger_PostingChangeVoucher</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingChangeVoucher</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingChangeVoucher</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger_PostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger_PostingProfileApprove</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedger_PostingProfileApprove</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfileApprove</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfileApprove</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger_PostingProfileCancel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedger_PostingProfileCancel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfileCancel</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfileCancel</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger_PostingProfileClose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedger_PostingProfileClose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfileClose</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfileClose</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger_PostingProfileReOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendLedger_PostingProfileReOpen</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfileReOpen</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfileReOpen</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymentMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126065</EntityRelationshipRole>
			<RelatedTable>VendPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPaymentMode</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>VendPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymentModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125126</EntityRelationshipRole>
			<RelatedTable>VendPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPaymentModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendPromissoryNoteJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendPromissoryNoteJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromissoryNoteID</Name>
					<SourceEDT>VendPromissoryNoteID</SourceEDT>
					<Field>PromissoryNoteID</Field>
					<RelatedField>PromissoryNoteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PromissoryNoteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPromissoryNoteTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126066</EntityRelationshipRole>
			<RelatedTable>VendPromissoryNoteTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPromissoryNoteTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PromissoryNoteID</Name>
					<Field>PromissoryNoteID</Field>
					<RelatedField>PromissoryNoteId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendStateTaxID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126067</EntityRelationshipRole>
			<RelatedTable>VendStateTaxID</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendStateTaxID</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099State</Name>
					<Field>Tax1099State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_AccountNum</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_LastSettleAcountNum</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_LastSettleAccountNum</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LastSettleAccountNum</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>LastSettleAccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans_AccountNum</Name>
			<EntityRelationshipRole>@SYS123521</EntityRelationshipRole>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableRole>VendTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTrans_OffsetRecid</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTrans_OffsetRecid</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetRecid</Name>
					<SourceEDT>VendTransRefRecId</SourceEDT>
					<Field>OffsetRecid</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransVoucher</Name>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableRole>VendTransVoucher</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymTermId</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymTermId</Name>
					<Field>PaymTermId</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>