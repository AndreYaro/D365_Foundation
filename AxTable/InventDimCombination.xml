<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCombination</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCombination extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultProductDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a description of a product variant that this record represents.
    /// </summary>
    /// <returns>
    ///     A description of a product variant in the company language.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResDescription defaultProductDescription()
    {
        return this.productDescription(CompanyInfo::languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a name of a product variant that this record represents.
    /// </summary>
    /// <returns>
    ///     A name of a product variant in the company language.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display EcoResProductName defaultProductName()
    {
        return this.productName(CompanyInfo::languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item sales group ID for this item variant.
    /// </summary>
    /// <param name = "_moduleType">The type of tax group ID.</param>
    /// <returns>The tax group ID specific to this variant if it is specifically defined, otherwise the tax group ID defined on the item master.</returns>
    internal TaxItemGroup getTaxItemGroupId(ModuleInventPurchSales _moduleType)
    {
        TaxItemGroup taxItemGroup;

        if (_moduleType == ModuleInventPurchSales::Purch
            && this.TaxItemGroupIdPurch)
        {
            return this.TaxItemGroupIdPurch;
        }
        else if (_moduleType == ModuleInventPurchSales::Sales
            && this.TaxItemGroupIdSales)
        {
            return this.TaxItemGroupIdSales;
        }

        return InventTableModule::find(this.ItemId, _moduleType).TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>InventDimCombination</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, unprocessed entries are removed from the distribution list.
    /// </remarks>
    public void delete()
    {
        ItemId itemId = this.ItemId;

        ttsbegin;

        this.deleteUpdateItemBarcode();

        super();

        this.deleteConfigChoice();

        InventDistinctProduct::deleteReleasedItem(itemId, this.InventDimId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUpdateItemBarcode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void deleteUpdateItemBarcode()
    {
        InventItemBarcode itemBarcode;
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            update_recordset itemBarcode
            setting RetailVariantId = ""
            where itemBarcode.ItemId == this.ItemId
               && itemBarcode.RetailVariantId == this.RetailVariantId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteConfigChoice</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void deleteConfigChoice()
    {
        EcoResTmpProductDimValue    ecoResTmpProductDimValue;
        ConfigChoice                configChoice;
        EcoResConfigurationName     configName = this.inventDim().ConfigId;
        boolean                     shouldDeleteConfigChoice;

        List productDimValuesList = EcoResProductVariantDimValue::newProductVariantDim_ConfigId().getDimValues(InventTable::itemProduct(this.ItemId), null);
        shouldDeleteConfigChoice = !this.isConfigurationInProductDimensionValuesList(productDimValuesList, configName);
        
        if (shouldDeleteConfigChoice)
        {
            delete_from configChoice
                where configChoice.ItemId   == this.ItemId
                   && configChoice.ConfigId == configName;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationInProductDimensionValuesList</Name>
				<Source><![CDATA[
    private boolean isConfigurationInProductDimensionValuesList(List _productDimValuesList, EcoResConfigurationName _configName)
    {
        ListEnumerator productDimValuesListEnumerator = _productDimValuesList.getEnumerator();
        while (productDimValuesListEnumerator.moveNext())
        {
            if (productDimValuesListEnumerator.current() == _configName)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId</Name>
				<Source><![CDATA[
    public ExternalItemId externalItemId(
            ModuleInventCustVend    _moduleInventCustVend,
            CustVendAC              _custVendAccount)
    {
        CustVendExternalItem                custVendExternalItem;
        ModuleInventPurchSalesVendCustGroup moduleInventPurchSalesVendCustGroup;
        CustVendItemGroupId                 custVendItemGroupId;

        if (_custVendAccount)
        {
            if (_moduleInventCustVend == ModuleInventCustVend::Cust)
            {
                moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::Cust;
            }
            else
            {
                moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::Vend;
            }

            custVendExternalItem    = CustVendExternalItem::find(moduleInventPurchSalesVendCustGroup, this.ItemId, this.InventDimId, _custVendAccount);

            if (!custVendExternalItem)
            {
                if (_moduleInventCustVend == ModuleInventCustVend::Cust)
                {
                    moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::CustGroup;
                    custVendItemGroupId                 = CustTable::find(_custVendAccount).CustItemGroupId;
                }
                else
                {
                    moduleInventPurchSalesVendCustGroup = ModuleInventPurchSalesVendCustGroup::VendGroup;
                    custVendItemGroupId                 = VendTable::find(_custVendAccount).VendItemGroupId;
                }

                custVendExternalItem    = CustVendExternalItem::find(moduleInventPurchSalesVendCustGroup, this.ItemId, this.InventDimId, custVendItemGroupId);
            }
        }

        return custVendExternalItem.ExternalItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasForecastPurch</Name>
				<Source><![CDATA[
    display ForecastHasPurch hasForecastPurch()
    {
        ForecastPurch   forecastPurch;
        InventDim       inventDim;
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParm;

        inventDimCriteria = this.inventDim();
        inventDimParm.initFromInventDimCombination(this);

        select firstonly forceplaceholders RecId from forecastPurch
            where forecastPurch.ItemId == this.ItemId
        #InventDimExistsJoin(forecastPurch.InventDimId, inventDim, inventDimCriteria, inventDimParm);

        return forecastPurch.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasForecastSales</Name>
				<Source><![CDATA[
    display ForecastHasSales hasForecastSales()
    {
        ForecastSales   forecastSales;
        InventDim       inventDim;
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParm;

        inventDimCriteria = this.inventDim();
        inventDimParm.initFromInventDimCombination(this);

        select firstonly forceplaceholders RecId from forecastSales
            where forecastSales.ItemId == this.ItemId
        #InventDimExistsJoin(forecastSales.InventDimId, inventDim, inventDimCriteria, inventDimParm);

        return forecastSales.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether open available inventory exists for this combination.
    /// </summary>
    /// <returns>
    /// true if open available inventory exists; otherwise, false.
    /// </returns>
    [SysObsolete("Please use the method hasOpenInventSumQuantity if you want to check for open quantity.", false, 31\03\2019)]
    boolean hasOpenInventSum()
    {
        InventDim  inventDimCriteria = this.inventDim();

        Query query = new Query();
        QueryBuildDataSource inventDimDataSource = query.addDataSource(tableNum(InventDim));
        inventDimDataSource.firstOnly(true);
        inventDimDataSource.addSelectionField(fieldNum(InventDim, RecId));
        InventDim::queryAddRangeForProductDimensions(inventDimDataSource, inventDimCriteria);

        QueryBuildDataSource inventSumDataSource = inventDimDataSource.addDataSource(tableNum(InventSum));
        inventSumDataSource.addSelectionField(fieldNum(InventSum, TableId));

        inventSumDataSource.addRange(fieldNum(InventSum, Closed)).value(queryValue(NoYes::No));
        inventSumDataSource.addRange(fieldNum(InventSum, ItemId)).value(queryValue(this.ItemId));
        inventSumDataSource.relations(true);
        inventSumDataSource.fetchMode(QueryFetchMode::One2One);

        QueryRun queryRun = new QueryRun(query);
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the product variant has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the product variant has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    public boolean hasOpenInventSumQuantity()
    {
        InventDim  inventDimCriteria = this.inventDim();

        Query query = new Query();
        QueryBuildDataSource inventDimDataSource = query.addDataSource(tableNum(InventDim));
        inventDimDataSource.firstOnly(true);
        inventDimDataSource.addSelectionField(fieldNum(InventDim, RecId));
        InventDim::queryAddRangeForProductDimensions(inventDimDataSource, inventDimCriteria);

        QueryBuildDataSource inventSumDataSource = inventDimDataSource.addDataSource(tableNum(InventSum));
        inventSumDataSource.addSelectionField(fieldNum(InventSum, TableId));

        inventSumDataSource.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
        inventSumDataSource.addRange(fieldNum(InventSum, ItemId)).value(queryValue(this.ItemId));
        inventSumDataSource.relations(true);
        inventSumDataSource.fetchMode(QueryFetchMode::One2One);

        QueryRun queryRun = new QueryRun(query);
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the new released product variant record.
    /// </summary>
    /// <param name = "_skipDistinctProductVariantValidation">A boolean parameter indicating whether the validation of the specified distinct product variant must be skipped.</param>
    public void insert(
        boolean _skipDistinctProductVariantValidation = false)
    {
        if (InventTableDataSharingFeature::isEnabled())
        {
            var contextSkipDistinctProductVariantValidation = InventDimCombinationInsertSkipDistinctProductVariantValidationContext::current();
            if (contextSkipDistinctProductVariantValidation)
            {
                this.insertValidation(contextSkipDistinctProductVariantValidation.parmSkipDistinctProductVariantValidation());
                this.insertInitialization();

                ttsbegin;
        
                super();

                ttscommit;

                // InventDistinctProduct::insertReleasedItem is handle for all companies from the initial company after super() call.
                return;
            }

            using (InventDimCombinationInsertSkipDistinctProductVariantValidationContext context = InventDimCombinationInsertSkipDistinctProductVariantValidationContext::newSkipDistinctProductVariantValidation(_skipDistinctProductVariantValidation))
            {
                this.insertValidation(_skipDistinctProductVariantValidation);
                this.insertInitialization();

                ttsbegin;
        
                super();

                InventDistinctProduct::insertReleasedItem(InventTable::find(this.ItemId), this.InventDimId);

                ttscommit;
            }
        }
        else
        {
            this.insertValidation(_skipDistinctProductVariantValidation);
            
            ttsbegin;
            
            this.insertInitialization();
        
            super();

            InventDistinctProduct::insertReleasedItem(InventTable::find(this.ItemId), this.InventDimId);

            ttscommit;
        }

        if (RetailPricingFeatureToggle::isRetailDiscountPerformanceImprovementFeatureEnabled() &&
            (RetailPricingUseLegacyRetailPeriodicDiscountPublisherFlight::instance().isEnabled() || !RetailPeriodicDiscountPublisherEventHandler::isDataImporting()))
        {
            // After a new variant is added/released to the current company.
            RetailPeriodicDiscountPublisher::publishProductVariantChanges(this.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValidation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void insertValidation(boolean _skipDistinctProductVariantValidation = false)
    {
        EcoResProduct product = InventTable::find(this.ItemId).Product();

        if (!product.isProductMaster())
        {
            throw error(EcoResProductMaster::txtNotExist());
        }

        InventDim inventDimLocal = this.inventDim();

        if (!_skipDistinctProductVariantValidation)
        {
            container productDimensions = EcoResProductVariantDimValue::getDimensionValuesContainerByInventDim(inventDimLocal);

            EcoResDistinctProductVariant distinctProductVariant = EcoResProductVariantManager::findDistinctProductVariant(product.RecId, productDimensions);

            if (!distinctProductVariant.RecId)
            {
                throw error("@SYS341822");
            }
            else if (distinctProductVariant.RecId != this.DistinctProductVariant)
            {
                throw error("@SYS341823");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInitialization</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void insertInitialization()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && !this.RetailVariantId
            && !this.isTmp())
        {
            NumberSequenceCode numberSequenceCode = InventDimCombination::numberSequenceCode();
            // provide the reason for retail number sequence failure.
            if (!numberSequenceCode)
            {
                // Variant number sequence is not set.
                throw error ("@RET260884");
            }
            this.RetailVariantId = NumberSeq::newGetNumFromCode(numberSequenceCode).num();

            // Finds the duplicate RetailVariantId in InventDimCombination table.
            // This will prevent to save duplicate RetailVariantId in case number sequence overlaps.
            if (this.RetailVariantId)
            {
                InventDimCombination inventDimCombination = InventDimCombination::findVariantId(this.RetailVariantId);
                if (inventDimCombination.RecId)
                {
                    throw error (strFmt("@Retail:RetailVariantIdExist", this.RetailVariantId));
                }
            }

            InventDim inventDim;
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, this.inventDim(), inventDim);

            InventItemBarcode itemBarcode;
            update_recordset itemBarcode
            setting RetailVariantId = this.RetailVariantId
            where itemBarcode.ItemId == this.ItemId
                && itemBarcode.InventDimId == InventDim::findDim(inventDim).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an <c>InventDim</c> record corresponding to the item dimension fields on an
    /// <c>InventDimCombination</c> record.
    /// </summary>
    /// <returns>
    /// The <c>InventDim</c> record corresponding to the <c>InventDimCombination</c> record.
    /// </returns>
    public InventDim  inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item description based on the language parameter and the item dimensions in the
    ///    <c>InventDimCombination</c> record.
    /// </summary>
    /// <param name="_languageId">
    ///    The language; optional.
    /// </param>
    /// <returns>
    ///    An item description that can contain item dimension information.
    /// </returns>
    display ItemFreeTxt  itemDescription(LanguageId _languageId = CompanyInfo::languageId())
    {
        EcoResDescription ecoResDescription = this.productDescription(_languageId);
        if (ecoResDescription)
        {
            return ecoResDescription;
        }
        return this.productName(_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a description of a product variant that this record represents.
    /// </summary>
    /// <param name="_languageId">
    ///     The ID of a language for which a name is retrieved.
    /// </param>
    /// <returns>
    ///     A description of a product variant.
    /// </returns>
    public EcoResDescription productDescription(
        LanguageId      _languageId)
    {
        return EcoResProductTranslation::getDescriptionOrDefaultDescription(this.DistinctProductVariant, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a name of a product that this record represents.
    /// </summary>
    /// <param name="_languageId">
    ///     The ID of a language for which a name is retrieved.
    /// </param>
    /// <returns>
    ///     A name of a product variant.
    /// </returns>
    public EcoResProductName productName(
        LanguageId      _languageId)
    {
        return EcoResProduct::find(this.DistinctProductVariant).productName(_languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related product image.
    /// </summary>
    /// <returns>Packed image reference.</returns>
    public display container productImage()
    {
        ImageReference imageData = EcoResProductImage::releasedProductVariantImage(this);
        return imageData.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImageThumbnail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the related product image thumbnail.
    /// </summary>
    /// <returns>Packed image reference.</returns>
    public display container productImageThumbnail()
    {
        ImageReference imageData = EcoResProductImage::releasedProductVariantImage(this, EcoResProductImageSize::Thumbnail);
        return imageData.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>InventDimCombination</c> table and sets the InventDim Id.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, action is inserted into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void update()
    {
        InventItemBarcode   itemBarcode;
        InventDim   inventDim;

        this.InventDimId = this.inventDim().InventDimId;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, this.inventDim(), inventDim);

            update_recordset itemBarcode
            setting RetailVariantId = ""
            where itemBarcode.ItemId == this.ItemId
               && itemBarcode.RetailVariantId == this.RetailVariantId
               && itemBarcode.InventDimId != InventDim::findDim(inventDim).InventDimId;

            update_recordset itemBarcode
            setting RetailVariantId = this.RetailVariantId
            where itemBarcode.ItemId == this.ItemId
               && itemBarcode.InventDimId == InventDim::findDim(inventDim).InventDimId;
        }

        if (this.ProductLifecycleStateId != this.orig().ProductLifecycleStateId)
        {
            InventDistinctProduct::updateProductLifecycleStateFromInventDimCombination(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.hasOpenInventSumQuantity())
        {
            return checkFailed(strFmt("@SYS79457", tablePName(InventSum)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimIdForProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the inventory dimension ID for the specified set of product dimensions.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer containing the product dimensions.</param>
    /// <returns>The inventory dimension ID of the <c>InventDim</c> buffer that contains only the enabled product dimensions.</returns>
    public static InventDimId getInventDimIdForProductDimensions(InventDim _inventDim)
    {
        InventDim inventDimProductDimensions;

        //return if no product dimensions are specified since we are not going to find an inventDimCombination based on the inventDim
        if (!_inventDim.anyProductDimensionSpecified())
        {
            return inventDimProductDimensions.InventDimId;
        }

        //only initialize product dimensions since that are the only dimensions that can be related to the inventDimCombination
        inventDimProductDimensions.initFromInventDim(_inventDim, InventDimMetaDataCache::dimProductDimEnabledFieldList());
        inventDimProductDimensions = InventDim::findDim(inventDimProductDimensions);

        return inventDimProductDimensions.InventDimId;
	}

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(
        ItemId      _itemId,
        InventDimId _inventDimId)
    {
        InventDimCombination inventDimCombination;

        select firstonly RecId from inventDimCombination
            where inventDimCombination.ItemId         == _itemId
               && inventDimCombination.InventDimId    == _inventDimId;

        return _itemId && inventDimCombination.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByInventDim</Name>
				<Source><![CDATA[
    static public boolean existByInventDim(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        if (!_itemId)
        {
            return false;
		}
        InventDimId inventDimIdProductDimensions = InventDimCombination::getInventDimIdForProductDimensions(_inventDim);
        return inventDimIdProductDimensions &&  InventDimCombination::exist(_itemId, inventDimIdProductDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existEntry</Name>
				<Source><![CDATA[
    static public boolean existEntry(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        if (!_itemId)
        {
            return false;
        }

        Query query = new Query();
        QueryBuildDataSource inventDimCombinationDataSource = query.addDataSource(tableNum(InventDimCombination));
        inventDimCombinationDataSource.addRange(fieldNum(InventDimCombination, ItemId)).value(queryValue(_itemId));
        inventDimCombinationDataSource.firstOnly(true);
        inventDimCombinationDataSource.addSelectionField(fieldNum(InventDimCombination, RecId));

        QueryBuildDataSource inventDimDataSource = inventDimCombinationDataSource.addDataSource(tableNum(InventDim));
        inventDimDataSource.relations(true);
        inventDimDataSource.fetchMode(QueryFetchMode::One2One);
        inventDimDataSource.joinMode(JoinMode::ExistsJoin);

        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.currentInventDimFieldId();
            if (_inventDim.(fieldId))
            {
                inventDimDataSource.addRange(fieldId).value(queryValue(_inventDim.(fieldId)));
            }
        }

        QueryRun queryRun = new QueryRun(query);
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventDimCombination find(
        ItemId      _itemId,
        InventDimId _inventDimId,
        boolean     _forUpdate = false)
    {
        InventDimCombination    inventDimCombination;

        inventDimCombination.selectForUpdate(_forUpdate);

        select firstonly inventDimCombination
            where       inventDimCombination.ItemId         == _itemId
                &&      inventDimCombination.InventDimId    == _inventDimId;

        return inventDimCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDistinctProductVariant</Name>
				<Source><![CDATA[
    static public InventDimCombination findByDistinctProductVariant(
        RefRecId    _distinctProductVariant,
        boolean     _update = false)
    {
        InventDimCombination  inventDimCombination;

        inventDimCombination.selectForUpdate(_update);

        if (_distinctProductVariant)
        {
            select firstonly inventDimCombination
                where inventDimCombination.DistinctProductVariant == _distinctProductVariant;
        }

        return inventDimCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInventDim</Name>
				<Source><![CDATA[
    static public InventDimCombination findByInventDim(
        ItemId      _itemId,
        InventDim   _inventDim,
        boolean     _forUpdate = false)
    {
        InventDimCombination inventDimCombination;

        if (!_itemId)
        {
            return inventDimCombination;
        }

        InventDimId inventDimIdProductDimensions = InventDimCombination::getInventDimIdForProductDimensions(_inventDim);
        
		if (inventDimIdProductDimensions)
		{
             inventDimCombination = InventDimCombination::find(_itemId, inventDimIdProductDimensions, _forUpdate);
		}

        return inventDimCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static public InventDimCombination findRecId(
        RecId       _recId,
        DataAreaId  _dataAreaId = curExt2dataareaid(tableNum(InventDimCombination)),
        boolean     _forUpdate  = false)
    {
        InventDimCombination inventDimCombination;

        if (_recId)
        {
            inventDimCombination.selectForUpdate(_forUpdate);

            select firstonly crossCompany inventDimCombination
                where inventDimCombination.RecId   == _recId
                && inventDimCombination.DataAreaId == _dataAreaId;
        }

        return inventDimCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventDimCombination</c> table, depending on the variant
    /// number.
    /// </summary>
    /// <param name="_variantId">
    /// The ID of the variant.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventDimCombination</c> table; otherwise, an empty record.
    /// </returns>
    static InventDimCombination findVariantId(RetailVariantId   _variantId,
                                              boolean           update = false)
    {
        InventDimCombination  inventDimCombination;

        inventDimCombination.selectForUpdate(update);

        if (_variantId)
        {
            select firstonly inventDimCombination
                where inventDimCombination.RetailVariantId == _variantId;
        }
        return inventDimCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a number sequence reference for variant number.
    /// </summary>
    /// <returns>
    /// The number sequence code for the variant number.
    /// </returns>
    static NumberSequenceCode numberSequenceCode()
    {
        return RetailParameters::numRefVariantId().numberSequenceTable().NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static public TxtNotExist txtNotExist()
    {
        return "@SYS73899";
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefItemIdProductInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the open product information dialog functionality for an item with inventory dimensions.
    /// </summary>
    /// <param name="_itemId">The ID of an item.</param>
    /// <param name="_inventDimId">The ID of an inventory dimension.</param>
    public static void jumpRefItemIdProductInformation(ItemId _itemId, InventDimId _inventDimId)
    {
        if (_itemId && _inventDimId)
        {
            InventDimCombination inventDimCombination = InventDimCombination::find(_itemId, _inventDimId);

            if (inventDimCombination)
            {
                Args args = new Args();
                args.record(inventDimCombination);

                new MenuFunction(menuItemDisplayStr(EcoResProductInformation), MenuItemType::Display).run(args);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124000</DeveloperDocumentation>
	<FormRef>EcoResProductVariantsPerCompany</FormRef>
	<Label>@SYS320706</Label>
	<ListPageRef>EcoResProductVariantsPerCompany</ListPageRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryIndex>ItemIdx</PrimaryIndex>
	<ReplacementKey>ItemIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>defaultProductName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>defaultProductName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Retail</Name>
			<Label>@RET3014</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailVariantId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DistinctProductVariant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Taxation</Name>
			<Label>@SYS300191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupIdSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupIdPurch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DistinctProductVariant</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailVariantId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailVariantId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProductLifecycleStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductLifecycleStateId</ExtendedDataType>
			<Label>@SCM:EcoResProductLifecycleState</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupIdSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<FeatureClass>EcoResProductVariantItemSalesTaxGroupFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupIdPurch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<FeatureClass>EcoResProductVariantItemSalesTaxGroupFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DistinctProductVariant</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailVariantId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VariantIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailVariantId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResDistinctProductVariant</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResDistinctProductVariant</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResDistinctProductVariant</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResDistinctProductVariant_InventDimCombination</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DistinctProductVariant</Name>
					<Field>DistinctProductVariant</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123828</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>Item_Variant</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductLifecycleState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResProductLifecycleState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductLifecycleStateId</Name>
					<Field>ProductLifecycleStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupSales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupIdSales</Name>
					<Field>TaxItemGroupIdSales</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupPurch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupIdPurch</Name>
					<Field>TaxItemGroupIdPurch</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>