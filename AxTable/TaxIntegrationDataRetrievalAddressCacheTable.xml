<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationDataRetrievalAddressCacheTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationDataRetrievalAddressCacheTable</c> is a table for caching table <c>LogisticsPostalAddress</c>.
/// </summary>
internal class TaxIntegrationDataRetrievalAddressCacheTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records <c>TaxIntegrationDataRetrievalAddressCacheTable</c> by entity type, role type and entity id.
    /// </summary>
    /// <param name = "_entityType">Logistics location entity type.</param>
    /// <param name = "_entityId">Logistics location entity id.</param>
    /// <param name = "_roleType">Logistics location role type.</param>
    /// <param name = "_forUpdate">true if it need to update, otherwise, false.</param>
    /// <param name = "_fromDateTime">The from date.</param>
    /// <param name = "_toDateTime">The to date.</param>
    /// <returns>The <c>TaxIntegrationDataRetrievalAddressCacheTable</c> record.</returns>
    /// <remarks>
    /// Suggest to use <c>TaxIntegrationDataRetrievalAddressCacheTable::findByCacheKey</c> instead for better performance if the date time parameters are not required.
    /// </remarks>
    public static TaxIntegrationDataRetrievalAddressCacheTable find(
        TaxIntegrationDataRetrievalLogisticsEntityType _entityType,
        TaxIntegrationDataRetrievalEntityId _entityId,
        LogisticsLocationRoleType _roleType,
        boolean _forUpdate = false,
        utcDateTime _fromDateTime = DateTimeUtil::utcNow(),
        utcDateTime _toDateTime = DateTimeUtil::utcNow())
    {
        TaxIntegrationDataRetrievalAddressCacheTable taxIntegrationDataRetrievalAddressCacheTable;

        if (_entityId)
        {
            if (_forUpdate)
            {
                taxIntegrationDataRetrievalAddressCacheTable.selectForUpdate(_forUpdate);
            }

            select firstonly validTimeState(_fromDateTime, _toDateTime) taxIntegrationDataRetrievalAddressCacheTable
                where taxIntegrationDataRetrievalAddressCacheTable.EntityType == _entityType
                    && taxIntegrationDataRetrievalAddressCacheTable.RoleType == _roleType
                    && taxIntegrationDataRetrievalAddressCacheTable.EntityId == _entityId;

        }
        return taxIntegrationDataRetrievalAddressCacheTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records <c>TaxIntegrationDataRetrievalAddressCacheTable</c> by entity type, role type and entity id.
    /// </summary>
    /// <param name = "_entityType">Logistics location entity type.</param>
    /// <param name = "_entityId">Logistics location entity id.</param>
    /// <param name = "_roleType">Logistics location role type.</param>
    /// <param name = "_forUpdate">true if it need to update, otherwise, false.</param>
    /// <returns>The <c>TaxIntegrationDataRetrievalAddressCacheTable</c> record.</returns>
    public static TaxIntegrationDataRetrievalAddressCacheTable findByCacheKey(
        TaxIntegrationDataRetrievalLogisticsEntityType _entityType,
        TaxIntegrationDataRetrievalEntityId _entityId,
        LogisticsLocationRoleType _roleType,
        boolean _forUpdate = false)
    {
        TaxIntegrationDataRetrievalAddressCacheTable taxIntegrationDataRetrievalAddressCacheTable;

        if (_entityId)
        {
            if (_forUpdate)
            {
                taxIntegrationDataRetrievalAddressCacheTable.selectForUpdate(_forUpdate);
            }

            select firstonly taxIntegrationDataRetrievalAddressCacheTable
                where taxIntegrationDataRetrievalAddressCacheTable.EntityType == _entityType
                    && taxIntegrationDataRetrievalAddressCacheTable.RoleType == _roleType
                    && taxIntegrationDataRetrievalAddressCacheTable.EntityId == _entityId;

        }
        return taxIntegrationDataRetrievalAddressCacheTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets recId for table <c>LogisticsPostalAddress.</c>.
    /// </summary>
    /// <param name = "_entityType">Logistics location entity type.</param>
    /// <param name = "_entityId">Logistics location entity id.</param>
    /// <param name = "_roleType">Logistics location role type.</param>
    /// <returns>Returns container for cache value.</returns>
    public static RecId getLogisticsPostalAddressRecId(
        TaxIntegrationDataRetrievalLogisticsEntityType _entityType,
        TaxIntegrationDataRetrievalEntityId _entityId,
        LogisticsLocationRoleType _roleType)
    {
        TaxIntegrationDataRetrievalAddressCacheTable taxIntegrationDataRetrievalAddressCacheTable;

        if (_entityId)
        {
            select firstonly LogisticsPostalAddress from taxIntegrationDataRetrievalAddressCacheTable
            where taxIntegrationDataRetrievalAddressCacheTable.EntityType == _entityType
                && taxIntegrationDataRetrievalAddressCacheTable.RoleType == _roleType
                && taxIntegrationDataRetrievalAddressCacheTable.EntityId == _entityId;
        }

        return taxIntegrationDataRetrievalAddressCacheTable.LogisticsPostalAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Visible>No</Visible>
	<CacheLookup>Found</CacheLookup>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntityType</Name>
			<EnumType>TaxIntegrationDataRetrievalLogisticsEntityType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoleType</Name>
			<EnumType>LogisticsLocationRoleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntityId</Name>
			<ExtendedDataType>TaxIntegrationDataRetrievalEntityId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsPostalAddress</Name>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LogisticsPostalAddress</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CacheKey</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>EntityType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RoleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EntityId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>