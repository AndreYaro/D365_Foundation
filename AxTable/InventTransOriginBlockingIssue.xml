<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOriginBlockingIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransOriginBlockingIssue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteOriginRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator of the issued transactions and the inventory blocking.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// The ID of the inventory transactions originator. It is the primary key on the <c>InventTransOrigin</c> table.
    /// </param>
    public static void deleteOriginRelationship(InventTransOriginId _inventTransOriginId)
    {
        InventTransOriginBlockingIssue  inventTransOriginBlockingIssue;

        ttsbegin;

        delete_from inventTransOriginBlockingIssue
            where inventTransOriginBlockingIssue.InventTransOrigin == _inventTransOriginId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator of the issued transactions and the inventory blocking.
    /// </summary>
    /// <param name="_inventBlockingId">
    /// The ID of the inventory blocking. It is the primary key on the <c>InventBlocking</c> table.
    /// </param>
    public static void deleteOwnerRelationship(RefRecId _inventBlockingId)
    {
        InventTransOriginBlockingIssue  inventTransOriginBlockingIssue;

        ttsbegin;

        delete_from inventTransOriginBlockingIssue
            where inventTransOriginBlockingIssue.InventBlockingIssue == _inventBlockingId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the inventory transactions originator of the issued transactions for the
    ///    inventory blocking.
    /// </summary>
    /// <param name="_inventBlockingId">
    ///    The ID of the inventory blocking. It is the primary key on the <c>InventBlocking</c> table.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transactions originator.
    /// </returns>
    public static InventTransOriginId findInventTransOriginId(RefRecId _inventBlockingId)
    {
        InventTransOriginBlockingIssue  inventTransOriginBlockingIssue;

        select firstonly InventTransOrigin from inventTransOriginBlockingIssue
            where inventTransOriginBlockingIssue.InventBlockingIssue == _inventBlockingId;

        return inventTransOriginBlockingIssue.InventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInventBlockingIssue</Name>
				<Source><![CDATA[
    public static InventTransOriginBlockingIssue findByInventBlockingIssue(RefRecId _inventBlockingId, boolean _forUpdate = false)
    {
        InventTransOriginBlockingIssue inventTransOriginBlockingIssue;

        if (_inventBlockingId)
        {
            inventTransOriginBlockingIssue.selectForUpdate(_forUpdate);

            select firstonly inventTransOriginBlockingIssue
                where inventTransOriginBlockingIssue.InventBlockingIssue == _inventBlockingId;
        }

        return inventTransOriginBlockingIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the blocking order related to the ID of the inventory transactions originator.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The ID of the inventory transactions originator. It is the primary key on the
    ///    <c>InventTransOrigin</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the buffer should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventBlocking</c> table if one exists; otherwise an empty record.
    /// </returns>
    /// <remarks>
    ///    Retrieves an empty buffer if no related record exists.
    /// </remarks>
    public static InventBlocking inventBlocking(InventTransOriginId _inventTransOriginId,
                                                       boolean             _forUpdate = false)
    {
        InventBlocking                  inventBlocking;
        InventTransOriginBlockingIssue  inventTransOriginBlockingIssue;

        inventBlocking.selectForUpdate(_forUpdate);

        select firstonly inventBlocking
            exists join inventTransOriginBlockingIssue
            where inventTransOriginBlockingIssue.InventBlockingIssue    == inventBlocking.RecId
               && inventTransOriginBlockingIssue.InventTransOrigin      == _inventTransOriginId;

        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the relationship between the inventory transactions originator of the issued transactions and the inventory blocking.
    /// </summary>
    /// <param name="_inventBlockingId">
    /// The ID of the inventory blocking. It is the primary key on the <c>InventBlocking</c> table.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The ID of the inventory transactions originator. It is the primary key on the <c>InventTransOrigin</c> table.
    /// </param>
    public static void writeOriginOwnerRelationship(RefRecId _inventBlockingId, InventTransOriginId _inventTransOriginId)
    {
        InventTransOriginBlockingIssue  inventTransOriginBlockingIssue;
        Counter                         logCount = infologLine();

        ttsbegin;

        try
        {
            inventTransOriginBlockingIssue.InventBlockingIssue  = _inventBlockingId;
            inventTransOriginBlockingIssue.InventTransOrigin    = _inventTransOriginId;

            inventTransOriginBlockingIssue.insert();
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::lastDuplicateKeyViolatingTable() == inventTransOriginBlockingIssue.TableId)
            {
                update_recordset inventTransOriginBlockingIssue
                setting InventTransOrigin = _inventTransOriginId
                where inventTransOriginBlockingIssue.InventBlockingIssue == _inventBlockingId
                   && inventTransOriginBlockingIssue.InventTransOrigin   != _inventTransOriginId;
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
            infolog.clear(logCount);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS325105</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS133565</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InventTransOrigin</TitleField1>
	<TitleField2>InventBlockingIssue</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>InventBlockingIssueIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>InventBlockingIssueIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBlockingIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventBlockingIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventBlockingIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventBlockingIssue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransOriginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventBlockingIssueIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventBlockingIssue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBlocking</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventBlocking</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventBlocking_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBlocking_InventTransOriginBlockingIssue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventBlockingIssue</Name>
					<Field>InventBlockingIssue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransOrigin_InventTransOriginBlockingIssue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>