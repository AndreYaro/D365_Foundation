<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchy_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportHierarchy_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the TaxReportHierarchy_IN table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the TaxReportHierarchy_IN record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!TaxReportHierarchy_IN::exist(_recId))
        {
            isExisting = checkFailed(strfmt(TaxReportHierarchy_IN::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TaxReportHierarchy_IN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxReportHierarchy_IN</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        TaxReportHierarchy_IN taxReportHierarchy;

        if(_recId)
        {
            select firstonly
                RecId
            from
                taxReportHierarchy
            where
                taxReportHierarchy.RecId == _recId;
        }

        return taxReportHierarchy.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxReportHierarchy_IN</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxReportHierarchy_IN</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///  A record in the <c>TaxReportHierarchy_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxReportHierarchy_IN find(
        RecId _recId,
        boolean _forUpdate = false)
    {
        TaxReportHierarchy_IN taxReportHierarchy;

        taxReportHierarchy.selectForUpdate(_forUpdate);

        if(_recId)
        {
            select firstonly
                    taxReportHierarchy
                where
                    taxReportHierarchy.RecId == _recId;
        }

        return taxReportHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxReportHierarchy_IN</c> table.
    /// </summary>
    /// <param name="_hierarchyName">
    /// The name of the <c>TaxReportHierarchy_IN</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxReportHierarchy_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxReportHierarchy_IN findByName(
        Name                            _hierarchyName,
        boolean                         _forUpdate = false)
    {
        TaxReportHierarchy_IN taxReportHierarchy;

        taxReportHierarchy.selectForUpdate(_forUpdate);

        select firstonly
                taxReportHierarchy
            where
             taxReportHierarchy.Name == _hierarchyName;

        return taxReportHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the TaxReportHierarchy_IN table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxSolutionScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields from the <c>TaxSolutionScope</c> record.
    /// </summary>
    /// <param name="_taxReportHierarchy">
    /// The <c>TaxReportHierarchy_IN</c> record.
    /// </param>
    /// <param name="_taxSolutionScope">
    /// The <c>TaxSolutionScope</c> record.
    /// </param>
    /// <returns>
    /// The <c>TaxReportHierarchy_IN</c> record.
    /// </returns>
    public static TaxReportHierarchy_IN initFromTaxSolutionScope(TaxReportHierarchy_IN _taxReportHierarchy = null, TaxSolutionScope _taxSolutionScope = null)
    {
        TaxSolutionScope taxSolutionScope = _taxSolutionScope;
        TaxSolutionScopeSetup taxSolutionScopeSetup;

        if (!taxSolutionScope)
        {
            taxSolutionScopeSetup = TaxSolutionScopeSetup::findByLedger(Ledger::current());
            taxSolutionScope = TaxSolutionScope::find(taxSolutionScopeSetup.TaxSolutionScope);
        }

        _taxReportHierarchy.TaxSolutionScope = taxSolutionScope.RecId;

        return _taxReportHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxReportHierarchy_IN</c> table.
    /// </summary>
    /// <param name="_hierarchyName">
    /// The name of the <c>TaxReportHierarchy_IN</c> record.
    /// </param>
    /// <param name="_classId">
    /// The id of the handler class.
    /// </param>
    /// <param name="_taxSolutionScope">
    /// The id of the <c>TaxSolutionScope</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxReportHierarchy_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxReportHierarchy_IN findByKey(
        Name _hierarchyName,
        ClassId _classId,
        TaxSolutionScopeRecId _taxSolutionScope = 0,
        boolean _forUpdate = false)
    {
        TaxReportHierarchy_IN taxReportHierarchy;

        taxReportHierarchy.selectForUpdate(_forUpdate);

        select firstonly taxReportHierarchy
            where taxReportHierarchy.TaxSolutionScope == _taxSolutionScope
                && taxReportHierarchy.RefClassId == _classId
                && taxReportHierarchy.Name == _hierarchyName;

        return taxReportHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jumps to Tax Report Hierarchy.
    /// </summary>
    /// <param name="_hierarchyName">
    /// The name of the <c>TaxReportHierarchy_IN</c> record.
    /// </param>
    /// <param name="_caller">
    /// The caller.
    /// </param>
    public static void jumpRef(Name _hierarchyName, FormRun _caller)
    {
        Args args = new Args();

        args.parm(_hierarchyName);
        args.caller(_caller);

        new MenuFunction(menuitemDisplayStr(TaxReportHierarchyList_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4005628</DeveloperDocumentation>
	<Label>@SYS4005626</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>IsSetoffable</TitleField2>
	<Modules>Tax</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSetoffable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Label>@SYS5711</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSetoffable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefClassId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS39462</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSetoffable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4005682</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefClassId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClassId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxSolutionScope</Name>
			<ExtendedDataType>TaxSolutionScopeRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TaxSolutionScope</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxSolutionScope</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxSolutionScope</Name>
					<Field>TaxSolutionScope</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>