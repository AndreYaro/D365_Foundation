<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementReference extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRelationShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a link between two <c>AgreementHeader</c> records.
    /// </summary>
    /// <param name="_sourceAgreement">
    /// The source agreement header record for which to create the link.
    /// </param>
    /// <param name="_derivedAgreement">
    /// The derived agreement header record for which to create the link.
    /// </param>
    /// <param name="_isIntraCompany_RU">
    /// The intracompany flag.
    /// </param>
    /// <remarks>
    /// The purpose of this method is to create a link between an intercompany sales agreement and an
    /// intercompany purchase agreement.
    /// </remarks>
    public static void createRelationShip(AgreementHeaderRecId _sourceAgreement,
                                          AgreementHeaderRecId _derivedAgreement
                                          , boolean _isIntraCompany_RU = false
                                          )
    {
        AgreementReference  agreementReference;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        ttsbegin;
        agreementReference.SourceAgreement  = _sourceAgreement;
        agreementReference.DerivedAgreement = _derivedAgreement;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            agreementReference.IsIntraCompany_RU = _isIntraCompany_RU;
        }
        // </GEERU>
        agreementReference.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDerivedAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the agreement header is derived.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    /// The record ID of the agreement header record to investigate.
    /// </param>
    /// <param name="_isIntraCompany_RU">
    /// The intracompany flag.
    /// </param>
    /// <returns>
    /// true if the agreement header is derived; otherwise, false
    /// </returns>
    public static boolean existDerivedAgreement(AgreementHeaderRecId _agreementHeaderRecId
                                                ,boolean _isIntraCompany_RU = false
    )
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return (select firstonly RecId from agreementReference
                where agreementReference.DerivedAgreement == _agreementHeaderRecId
                   && agreementReference.IsIntraCompany_RU == _isIntraCompany_RU).RecId != 0;
        }
        // </GEERU>
        return (select firstonly RecId from agreementReference where agreementReference.DerivedAgreement == _agreementHeaderRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSourceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the agreement header is source.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    /// The record ID of the agreement line record to investigate.
    /// </param>
    /// <param name="_isIntraCompany_RU">
    /// The intracompany flag.
    /// </param>
    /// <returns>
    /// true if the agreement header is source; otherwise, false
    /// </returns>
    public static boolean existSourceAgreement(AgreementHeaderRecId _agreementHeaderRecId
                                               , boolean _isIntraCompany_RU = false
    )
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return (select firstonly RecId from agreementReference
                where agreementReference.SourceAgreement == _agreementHeaderRecId
                   && agreementReference.IsIntraCompany_RU == _isIntraCompany_RU).RecId != 0;
        }
        // </GEERU>
        return (select firstonly RecId from agreementReference where agreementReference.SourceAgreement == _agreementHeaderRecId).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeInterCompany</ConfigurationKey>
	<DeveloperDocumentation>@SYS332496</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS332495</Label>
	<TableGroup>Worksheet</TableGroup>
	<Visible>No</Visible>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DerivedAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIntraCompany_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsIntraCompany_RU</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceAgreement</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceAgreementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceAgreement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DerivedAgreementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DerivedAgreement</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DerivedAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DerivedAgreement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DerivedAgreement</Name>
					<Field>DerivedAgreement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceAgreement</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceAgreement</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AgreementReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceAgreement</Name>
					<Field>SourceAgreement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>