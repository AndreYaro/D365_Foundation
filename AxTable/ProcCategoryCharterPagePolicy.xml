<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcCategoryCharterPagePolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProcCategoryCharterPagePolicy extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                         ret;
        ProcCategoryPage                procCategoryPage, procCategoryPageSelect;
        ProcCategoryCharterPagePolicy   procCategoryCharterPagePolicy;

        ret = super();

        if (ret)
        {
            procCategoryPage = ProcCategoryPage::find(this.ProcurementCategoryPage);

            select count(RecId) from procCategoryCharterPagePolicy
                where procCategoryCharterPagePolicy.BuyingLegalEntity == this.BuyingLegalEntity
                    && procCategoryCharterPagePolicy.RecId != this.RecId
                join RecId from procCategoryPageSelect
                    where  procCategoryPageSelect.RecId == procCategoryCharterPagePolicy.ProcurementCategoryPage
                        && procCategoryPageSelect.ProcurementCategory == procCategoryPage.ProcurementCategory;

            if (procCategoryCharterPagePolicy.RecId)
            {
                ret = checkFailed(strfmt("@SYS328411", tablepname(ProcCategoryCharterPagePolicy), tablestr(ProcCategoryCharterPagePolicy) ));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified category exists in the <c>ProcCategoryCharterPagePolicy</c> table;
    ///    if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record in the <c>ProcCategoryCharterPagePolicy</c> table to check for
    ///    existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false
    /// </returns>
    public static boolean checkExist(RefRecId _recId)
    {
        if (_recId && ProcCategoryCharterPagePolicy ::exist(_recId))
            return true;

        return checkFailed(strfmt(ProcCategoryCharterPagePolicy ::txtNotExist(), tablepname(ProcCategoryCharterPagePolicy), _recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ProcCategoryCharterPagePolicy</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (ProcCategoryCharterPagePolicy::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ProcCategoryCharterPagePolicy</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the record should be read for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>ProcCategoryCharterPagePolicy</c> table if found; otherwise, an empty buffer.
    /// </returns>

    public static ProcCategoryCharterPagePolicy find(RefRecId _recId, boolean _forUpdate = false)
    {
        ProcCategoryCharterPagePolicy  procCategoryCharterPagePolicy = null;

        if (_recId)
        {
            procCategoryCharterPagePolicy.selectForUpdate(_forUpdate);
            select firstonly procCategoryCharterPagePolicy where procCategoryCharterPagePolicy.RecId == _recId;
        }

        return procCategoryCharterPagePolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPageLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified organization page policy in the <c>ProcCategoryCharterPagePolicy</c> table.
    /// </summary>
    /// <param name="_categoryPageId">
    /// The category page ID to find.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to select the record for update.
    /// </param>
    /// <returns>
    /// A record of the <c>ProcCategoryCharterPagePolicy</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProcCategoryCharterPagePolicy findPageLegalEntity(RecId _categoryPageId, RecId _legalEntityRecId, boolean _forUpdate = false)
    {
        ProcCategoryCharterPagePolicy   procCategoryCharterPagePolicy;

        if (_legalEntityRecId != 0)
        {
            procCategoryCharterPagePolicy.selectForUpdate(_forUpdate);
            select firstonly procCategoryCharterPagePolicy
                where procCategoryCharterPagePolicy.ProcurementCategoryPage == _categoryPageId
                    && procCategoryCharterPagePolicy.BuyingLegalEntity  == _legalEntityRecId;
        }

        return procCategoryCharterPagePolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>ProcCategoryCharterPagePolicy</c> table
    ///    does not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates a record does not exist.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS327065";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCategory</ConfigurationKey>
	<DeveloperDocumentation>@SYS309793</DeveloperDocumentation>
	<Label>@SYS301986</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProcurementCategoryPage</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>CategoryPageLegalEntityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryPage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryPage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryPage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategoryPage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BuyingLegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategoryPage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryPageLegalEntityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcurementCategoryPage</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BuyingLegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProcCategoryCharterPagePolicy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BuyingLegalEntity</Name>
					<Field>BuyingLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcCategoryPage</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProcCategoryPage</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProcCategoryPage</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProcCategoryPage_ProcCategoryCharterPagePolicy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategoryPage</Name>
					<Field>ProcurementCategoryPage</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>