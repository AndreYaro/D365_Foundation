<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdComponentGroupTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdComponentGroupTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean                         ret;
        TaxWithholdComponentTable_IN    taxWithholdComponentTable;

        ret = super();

        if (ret)
        {
            if (this.ComponentGroup)
            {
                select firstonly TaxWithholdComponentGroup from taxWithholdComponentTable
                    where taxWithholdComponentTable.TaxType                   == this.TaxType
                       && taxWithholdComponentTable.TaxWithholdComponentGroup == this.RecId;
                if (taxWithholdComponentTable)
                {
                    ret = ret && checkFailed(strfmt("@GLS5453", this.ComponentGroup));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = TaxWithholdParameters_IN::checkParameter(this.TaxType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdComponentGroupTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <param name="_componentGroup">
    /// Tax withhold component group.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    public static boolean exist(TaxWithholdType_IN             _taxType,
                                TaxWithholdComponentGroup_IN   _componentGroup)
    {
        return (select firstonly RecId from taxWithholdComponentGroupTable_IN
                    index hint TypeGroupIdx
                    where taxWithholdComponentGroupTable_IN.TaxType           == _taxType
                       && taxWithholdComponentGroupTable_IN.ComponentGroup    == _componentGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdComponentGroupTable_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdComponentGroupTable_IN</c> table.
    /// </returns>
    public static TaxWithholdComponentGroupTable_IN find(RefRecId            _recId,
                                                         boolean             _forupdate        = false,
                                                         ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroupTable;

        taxWithholdComponentGroupTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdComponentGroupTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdComponentGroupTable
            where taxWithholdComponentGroupTable.RecId == _recId;

        return taxWithholdComponentGroupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdComponentGroupTable_IN</c> table for the specified Ttax type and Component group.
    /// </summary>
    /// <param name="_taxType">
    ///  Tax type to find the record.
    /// </param>
    /// <param name="_componentGroup">
    /// component group, to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdComponentGroupTable_IN</c> table.
    /// </returns>
    static public TaxWithholdComponentGroupTable_IN findByComponentGroup(TaxWithholdType_IN               _taxType,
                                                                         TaxWithholdComponentGroup_IN     _componentGroup,
                                                                         boolean                          _forUpdate = false)
    {
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroupTable;

        if (_componentGroup)
        {
            taxWithholdComponentGroupTable.selectForUpdate(_forUpdate);
            select firstonly taxWithholdComponentGroupTable
                index hint TypeGroupIdx
                where taxWithholdComponentGroupTable.TaxType        == _taxType
                   && taxWithholdComponentGroupTable.ComponentGroup == _componentGroup;
        }
        return taxWithholdComponentGroupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Performs "Go to main table" operation.
    /// </summary>
    /// <param name="_componentGroup">
    /// Withholding Component to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Withholding tax type to filter the lookup form based on tax type.
    /// </param>
    public static void jumpRef(TaxWithholdComponentGroup_IN _componentGroup,
                               TaxWithholdType_IN           _taxType)
    {
        Args    args = new Args();

        args.parm(_componentGroup);
        args.parmEnumType(enumnum(TaxWithholdType_IN));
        args.parmEnum(_taxType);
        new MenuFunction(menuitemdisplaystr(TaxWithholdComponentGroupTable_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens lookup form for Component group based on Tax type.
    /// </summary>
    /// <param name="_ctrl">
    ///  The calling form control.
    /// </param>
    /// <param name="_taxType">
    /// Tax type , to filter the component group based on specified tax type.
    /// </param>
    /// <returns>
    /// The selected record.
    /// </returns>
    public static Common lookupComponentGroup(FormControl _ctrl, TaxWithholdType_IN   _taxType)
    {
        Common                  selectedRecord;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxWithholdComponentGroupTable_IN), _ctrl, true);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdComponentGroupTable_IN, ComponentGroup));
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdComponentGroupTable_IN, Name));

        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdComponentGroupTable_IN));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdComponentGroupTable_IN, TaxType)).value(queryValue(_taxType));

        sysTableLookup.parmQuery(query);
        selectedRecord = sysTableLookup.performFormLookup();
        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withholdtaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return tax type ,whether it is TCS or TDS tax type.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type value.
    /// </param>
    /// <returns>
    ///  returns  Withholding tax type .
    /// </returns>
    public static TaxWithholdType_IN withholdtaxType(TaxWithholdType_IN    _taxType)
    {
        TaxWithholdType_IN  taxType;

        switch (_taxType)
        {
            case TaxWithholdType_IN::TCS:
                taxType = TaxWithholdType_IN::TCS;
                break;

            case TaxWithholdType_IN::TDS:
                taxType = TaxWithholdType_IN::TDS;
                break;

            default:
                break;
        }
        return taxType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63814</DeveloperDocumentation>
	<FormRef>TaxWithholdComponentGroupTable_IN</FormRef>
	<Label>@GLS5479</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ComponentGroup</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TypeGroupIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxWithholdCertificatesTable_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdCertificatesTable_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SectionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SectionCode</Name>
			<Label>@GLS5354</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SectionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation</Name>
			<Label>@SYS33550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ComponentGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdComponentGroup_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ComponentGroupTableINDescriptionHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SectionCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdSectionCode_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ComponentGroupTableINSectionCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:ComponentGroupTableINStatusHelpText</HelpText>
			<EnumType>TaxWithholdComponentStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TypeGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ComponentGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>