<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTaxWithholdTrans</Name>
				<Source><![CDATA[
    public void copyTaxWithholdTrans(TaxWithholdTrans  _taxWithholdTrans,
                                     Voucher           _voucher,
                                     TransDate         _transDate,
                                     Integer           _sign)
    {
        //<GTH>
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionFrom;
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTo;
        //</GTH>

        this.Voucher                   = _voucher;
        this.TransDate                 = _transDate;
        this.LedgerDimension           = _taxWithholdTrans.LedgerDimension;
        this.TaxWithholdCode           = _taxWithholdTrans.TaxWithholdCode;
        this.TaxWithholdGroup          = _taxWithholdTrans.TaxWithholdGroup;
        this.VendAccount               = _taxWithholdTrans.VendAccount;
        this.VoucherInvoice            = _taxWithholdTrans.VoucherInvoice;
        this.Invoice                   = _taxWithholdTrans.Invoice;
        this.CompetenceDate            = _taxWithholdTrans.CompetenceDate;
        this.JournalNum                = _taxWithholdTrans.JournalNum;
        this.InvoiceCurrency           = _taxWithholdTrans.InvoiceCurrency;
        this.InvoiceAmount             = _taxWithholdTrans.InvoiceAmount * _sign;
        this.InvoiceTaxAmount          = _taxWithholdTrans.InvoiceTaxAmount * _sign;
        this.InvoiceBaseAmount         = _taxWithholdTrans.InvoiceBaseAmount * _sign;
        this.InvoiceNotTaxableByTreaty = _taxWithholdTrans.InvoiceNotTaxableByTreaty * _sign;
        this.InvoiceNotTaxableExpenses = _taxWithholdTrans.InvoiceNotTaxableExpenses * _sign;
        this.InvoiceExemptedAmount     = _taxWithholdTrans.InvoiceExemptedAmount * _sign;
        this.InvoiceWithholdBaseAmount = _taxWithholdTrans.InvoiceWithholdBaseAmount * _sign;
        this.InvoiceTaxWithholdAmount  = _taxWithholdTrans.InvoiceTaxWithholdAmount * _sign;
        this.PaymCurrency              = _taxWithholdTrans.PaymCurrency;
        this.PaymNotTaxableByTreaty    = _taxWithholdTrans.PaymNotTaxableByTreaty * _sign;
        this.PaymNotTaxableExpenses    = _taxWithholdTrans.PaymNotTaxableExpenses * _sign;
        this.PaymExemptedAmount        = _taxWithholdTrans.PaymExemptedAmount * _sign;
        this.PaymWithholdBaseAmount    = _taxWithholdTrans.PaymWithholdBaseAmount * _sign;
        this.PaymTaxWithholdAmount     = _taxWithholdTrans.PaymTaxWithholdAmount * _sign;
        this.NotTaxableByTreaty        = _taxWithholdTrans.NotTaxableByTreaty * _sign;
        this.NotTaxableExpenses        = _taxWithholdTrans.NotTaxableExpenses * _sign;
        this.ExemptedAmount            = _taxWithholdTrans.ExemptedAmount * _sign;
        this.WithholdBaseAmount        = _taxWithholdTrans.WithholdBaseAmount * _sign;
        this.TaxWithholdAmount         = _taxWithholdTrans.TaxWithholdAmount * _sign;
        this.TaxWithholdCurrency       = _taxWithholdTrans.TaxWithholdCurrency;
        this.TaxNotTaxableByTreaty     = _taxWithholdTrans.TaxNotTaxableByTreaty * _sign;
        this.TaxNotTaxableExpenses     = _taxWithholdTrans.TaxNotTaxableExpenses * _sign;
        this.TaxExemptedAmount         = _taxWithholdTrans.TaxExemptedAmount * _sign;
        this.TaxWithholdBaseAmount     = _taxWithholdTrans.TaxWithholdBaseAmount * _sign;
        this.TaxTaxWithholdAmount      = _taxWithholdTrans.TaxTaxWithholdAmount * _sign;
        this.SpecTransId               = _taxWithholdTrans.SpecTransId;
        this.VendTransInvoiceId        = _taxWithholdTrans.VendTransInvoiceId;
        this.Posted                    = _taxWithholdTrans.Posted;
        this.VendTransPaymId           = _taxWithholdTrans.VendTransPaymId;
        this.PaymCompany               = _taxWithholdTrans.PaymCompany;
        this.PaymVendor                = _taxWithholdTrans.PaymVendor;

        if (TaxWithhold::enableAdvancedTaxWithhold())
        {
            this.TaxWithholdPeriodHead_TH  = _taxWithholdTrans.TaxWithholdPeriodHead_TH;
            this.TaxWithholdItemGroupHeading_TH = _taxWithholdTrans.TaxWithholdItemGroupHeading_TH;
            this.CustAccount               = _taxWithholdTrans.CustAccount;
            this.CustTransInvoiceId        = _taxWithholdTrans.CustTransInvoiceId;
            this.CustTransPaymId           = _taxWithholdTrans.CustTransPaymId;
            this.VendorType_TH             = _taxWithholdTrans.VendorType_TH;

            if (TaxWithholdSetupWithholdingTaxCurrencyExchRateHelper::isEnabledWHTCurrencyExchRateParam())
            {
                this.TaxWithholdExchRate = _taxWithholdTrans.TaxWithholdExchRate;
                this.TaxWithholdExchRateDate = _taxWithholdTrans.TaxWithholdExchRateDate;
            }

            //<GTH>
            if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
            {
                taxWithholdTransExtensionFrom   = _taxWithholdTrans.taxWithholdTransExtensionTH();
                taxWithholdTransExtensionTo     = this.taxWithholdTransExtensionTH();

                taxWithholdTransExtensionTo.ExpenseLedgerDimension                  = taxWithholdTransExtensionFrom.ExpenseLedgerDimension;
                taxWithholdTransExtensionTo.ReceiptNumber                           = taxWithholdTransExtensionFrom.ReceiptNumber;
                taxWithholdTransExtensionTo.HideInReports                           = taxWithholdTransExtensionFrom.HideInReports;
                taxWithholdTransExtensionTo.AccountingCurUpdatedWithholdBaseAmt     = taxWithholdTransExtensionFrom.AccountingCurUpdatedWithholdBaseAmt * _sign;
                taxWithholdTransExtensionTo.InvoiceCurUpdatedWithholdBaseAmount     = taxWithholdTransExtensionFrom.InvoiceCurUpdatedWithholdBaseAmount * _sign;
                taxWithholdTransExtensionTo.AccountingCurExpenseAmount              = taxWithholdTransExtensionFrom.AccountingCurExpenseAmount * _sign;
                taxWithholdTransExtensionTo.TransCurExpenseAmount                   = taxWithholdTransExtensionFrom.TransCurExpenseAmount * _sign;
                taxWithholdTransExtensionTo.InvoiceCurExpenseAmount                 = taxWithholdTransExtensionFrom.InvoiceCurExpenseAmount * _sign;
                taxWithholdTransExtensionTo.LedgerJournalTrans                      = taxWithholdTransExtensionFrom.LedgerJournalTrans;
            }
            //</GTH>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrency</Name>
				<Source><![CDATA[
    display CurrencyCode defaultCurrency()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (! this.orig().Posted)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountingCurDeductableAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the deductable amount in accounting currency.
    /// </summary>
    /// <returns>
    /// The deductable amount in accounting currency.
    /// </returns>
    public display TaxWithholdAccountingCurDeductableAmt displayAccountingCurDeductableAmount()
    {
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTH;

        // Not right to use SysExtensionSerializerMap::getExtensionTable() here as this display method may be used in grid.
        taxWithholdTransExtensionTH.SysExtensionSerializerExtensionMap::LoadByBase(this.RecId);

        return this.TaxWithholdAmount - taxWithholdTransExtensionTH.AccountingCurExpenseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceCurDeductableAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the deductable amount in invoice currency.
    /// </summary>
    /// <returns>
    /// The deductable amount in invoice currency.
    /// </returns>
    public display TaxWithholdInvoiceCurDeductableAmount displayInvoiceCurDeductableAmount()
    {
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTH;

        // Not right to use SysExtensionSerializerMap::getExtensionTable() here as this display method may be used in grid.
        taxWithholdTransExtensionTH.SysExtensionSerializerExtensionMap::LoadByBase(this.RecId);

        return this.InvoiceTaxWithholdAmount - taxWithholdTransExtensionTH.InvoiceCurExpenseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransCurDeductableAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the transaction amount.
    /// </summary>
    /// <returns>
    /// The amount
    /// </returns>
    public display TaxWithholdTransCurDeductableAmount displayTransCurDeductableAmount()
    {
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTH;

        // Not right to use SysExtensionSerializerMap::getExtensionTable() here as this display method may be used in grid.
        taxWithholdTransExtensionTH.SysExtensionSerializerExtensionMap::LoadByBase(this.RecId);

        return this.TaxTaxWithholdAmount - taxWithholdTransExtensionTH.TransCurExpenseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTaxWithholdGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the withhold group.
    /// </summary>
    /// <param name="_set">
    /// True means edit.
    /// </param>
    /// <param name="_value">
    /// The value
    /// </param>
    /// <returns>
    /// The value to return
    /// </returns>
    public edit TaxWithholdGroup editTaxWithholdGroup(
        boolean             _set,
        TaxWithholdGroup    _value)
    {
        if (_set)
        {
            if (TaxWithholdGroupHeading::checkExist(_value))
            {
                this.TaxWithholdGroup = _value;

                // If the current withholding tax code is not in new group, clear it.
                if (!TaxWithholdGroupData::exist(this.TaxWithholdGroup, this.TaxWithholdCode))
                {
                    this.TaxWithholdCode = '';
                }
            }
        }

        return this.TaxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will initialize the <c>TaxWithholdTrans</c> buffer with the information from either the
    /// <c>CustTrans</c> table or the <c>VendTrans</c> table.
    /// </summary>
    /// <param name="_custVendTrans">
    /// A <c>CustTrans</c> table or a <c>VendTrans</c> table that will be used in the method.
    /// </param>
    public void initFromCustVendTrans(CustVendTrans  _custVendTrans)
    {
        this.VoucherInvoice     = _custVendTrans.Voucher;
        this.Invoice            = _custVendTrans.Invoice;
        this.CompetenceDate     = _custVendTrans.DocumentDate ?
                                                _custVendTrans.DocumentDate : _custVendTrans.TransDate;
        this.InvoiceCurrency    = _custVendTrans.CurrencyCode;

        if (_custVendTrans.TableId == tableNum(VendTrans))
        {
            this.VendTransInvoiceId = _custVendTrans.RecId;
            this.VendAccount        = _custVendTrans.AccountNum;
        }
        else
        {
            this.CustTransInvoiceId = _custVendTrans.RecId;
            this.CustAccount        = _custVendTrans.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public void initFromLedgerJournalTrans(LedgerJournalTrans  _ledgerJournalTrans)
    {
        //<GTH>
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTH;
        //</GTH>

        #isoCountryRegionCodes
        this.Voucher          = _ledgerJournalTrans.Voucher;
        this.TransDate        = _ledgerJournalTrans.TransDate;
        this.JournalNum       = _ledgerJournalTrans.JournalNum;

        this.PaymVendor       = _ledgerJournalTrans.parmAccount();
        this.PaymCurrency     = _ledgerJournalTrans.CurrencyCode;
        this.PaymCompany      = _ledgerJournalTrans.Company;

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
        {
            taxWithholdTransExtensionTH = this.taxWithholdTransExtensionTH();
            taxWithholdTransExtensionTH.LedgerJournalTrans = _ledgerJournalTrans.RecId;
            this.SysExtensionSerializerMap::packExtensionTable(taxWithholdTransExtensionTH);
        }
        //</GTH>

        // If WHT is enabled - set the account information
        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
        {
            switch (_ledgerJournalTrans.AccountType)
            {
                case LedgerJournalACType::Cust :
                        this.CustAccount = _ledgerJournalTrans.parmAccount();
                    break;

                default :
                        this.VendAccount = _ledgerJournalTrans.parmAccount();
                    break;
            }

            this.TaxWithholdItemGroupHeading_TH = _ledgerJournalTrans.TaxWithholdItemGroupHeading_TH;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits withholding tax exchange rate.
    /// </summary>
    internal void initTaxWithholdExchRate()
    {
        LedgerParameters ledgerParameters = LedgerParameters::find();

        if (ledgerParameters.RecId && ledgerParameters.TaxWithholdExchangeRateType && this.TaxWithholdExchRateDate != dateNull())
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(this.PaymCurrency, this.TaxWithholdCurrency);
            exchangeRateHelper.parmExchangeDate(this.TaxWithholdExchRateDate);
            exchangeRateHelper.parmExchangeRateTypeRecId(ledgerParameters.TaxWithholdExchangeRateType);
            exchangeRateHelper.parmLedgerRecId(Ledger::current());

            ExchRate corssRate = exchangeRateHelper.getCrossRate();

            this.TaxWithholdExchRate = corssRate ? corssRate : exchangeRateHelper.getExchangeRate1();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdExchRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits withholding tax exchange rate date.
    /// </summary>
    /// <param name = "_custVendTrans">An object instance of <c>CustVensTrans</c>.</param>
    /// <param name = "_ledgerJournalTrans">An object instance of <c>LedgerJournalTrans</c>.</param>
    internal void initTaxWithholdExchRateDate(CustVendTrans _custVendTrans, LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerParameters ledgerParameters = LedgerParameters::find();

        if (ledgerParameters.RecId)
        {
            switch (ledgerParameters.TaxWithholdCalcDateType)
            {
                case TaxWithholdCalcDateType::DocumentDate :
                    this.TaxWithholdExchRateDate = _ledgerJournalTrans.DocumentDate != dateNull() ? _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate ;
                    break;

                case TaxWithholdCalcDateType::InvoiceDate :
                    if (_custVendTrans.TableId == tableNum(CustTrans))
                    {
                        this.TaxWithholdExchRateDate = _custVendTrans.TransDate != dateNull() ? _custVendTrans.TransDate : _custVendTrans.DocumentDate;
                    }
                    else
                    {
                        this.TaxWithholdExchRateDate = _custVendTrans.DocumentDate != dateNull() ? _custVendTrans.DocumentDate : _custVendTrans.TransDate;
                    }
                    break;

                case TaxWithholdCalcDateType::PaymentDate :
                    this.TaxWithholdExchRateDate = _ledgerJournalTrans.TransDate;
                    break;

                default :
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWithholdTable</Name>
				<Source><![CDATA[
    public void initFromTaxWithholdTable()
    {
        TaxWithholdTable  taxWithholdTable;
        TaxWithholdLedgerAccountGroup_TH taxWithholdLedgerAccountGroup;
        //<GTH>
        TaxWithholdTransExtensionTH      taxWithholdTransExtensionTH;
        //<GTH>

        if (this.TaxWithholdCode)
        {
            taxWithholdTable = TaxWithholdTable::find(this.TaxWithholdCode);

            if (!TaxWithhold::enableAdvancedTaxWithhold())
            {
                this.LedgerDimension     = taxWithholdTable.LedgerDimension;
                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    if (this.VendAccount)
                    {
                        this.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(this.LedgerDimension, VendTrans::find(this.VendTransInvoiceId).DefaultDimension);
                    }
                    else if (this.CustAccount)
                    {
                        this.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(this.LedgerDimension, CustTrans::find(this.CustTransInvoiceId).DefaultDimension);
                    }
                }
                // </GBR>
            }
            else
            {
                this.LedgerDimension = taxWithholdTable.LedgerDimension;
                taxWithholdLedgerAccountGroup = TaxWithholdLedgerAccountGroup_TH::find(
                                                    taxWithholdTable.TaxWithholdLedgerAccountGroup_TH);
                if (this.VendAccount)
                {
                    this.LedgerDimension = taxWithholdLedgerAccountGroup.TaxWithholdLedgerDimension;
                }
                else if (this.CustAccount)
                {
                    this.LedgerDimension = taxWithholdLedgerAccountGroup.TaxWithholdOffsetLedgerDimension;
                }

                //<GTH>
                if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
                {
                    taxWithholdTransExtensionTH = this.taxWithholdTransExtensionTH();
                    taxWithholdTransExtensionTH.ExpenseLedgerDimension = taxWithholdLedgerAccountGroup.ExpenseLedgerDimension;
                    this.SysExtensionSerializerMap::packExtensionTable(taxWithholdTransExtensionTH);
                }
                //<GTH>
            }

            this.TaxWithholdCurrency = taxWithholdTable.CurrencyCode;

            if (TaxWithholdSetupWithholdingTaxCurrencyExchRateHelper::isEnabledWHTCurrencyExchRateParam())
            {
                this.initTaxWithholdExchRate();
            }

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.TaxWithholdPeriod_BR      = taxWithholdTable.TaxWithholdPeriod_BR;
            }
            // </GBR>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWithholdTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TaxWithholdTrans</c> record.
    /// </summary>
    /// <param name="_taxWithholdTrans">
    /// Buffer of <c>TaxWithholdTrans_IN</c> table.
    /// </param>
    public void initFromTaxWithholdTrans_IN(TaxWithholdTrans_IN _taxWithholdTrans)
    {
        ttsbegin;
        this.Voucher                            = _taxWithholdTrans.Voucher;
        this.TransDate                          = _taxWithholdTrans.TransDate;
        this.LedgerDimension                    = _taxWithholdTrans.LedgerDimension;
        this.TaxWithholdCode                    = _taxWithholdTrans.TaxWithholdCode;
        this.TaxWithholdGroup                   = _taxWithholdTrans.TaxWithholdGroup;
        this.TaxType_IN                         = _taxWithholdTrans.TaxType;
        this.TaxWithholdComponentTable_IN       = _taxWithholdTrans.TaxWithholdComponent;
        this.TaxWithholdComponentGroupTable_IN  = _taxWithholdTrans.TaxWithholdComponentGroup;
        this.VendAccount                        = _taxWithholdTrans.VendAccount;
        this.Invoice                            = _taxWithholdTrans.Invoice;
        this.JournalNum                         = _taxWithholdTrans.JournalNum;
        this.InvoiceCurrency                    = _taxWithholdTrans.CurrencyCode;
        this.InvoiceAmount                      = _taxWithholdTrans.AmountOriginMST;
        this.PaymWithholdBaseAmount             = _taxWithholdTrans.AmountOriginMST;
        this.InvoiceTaxAmount                   = _taxWithholdTrans.TaxTaxWithholdAmount;
        this.PaymCurrency                       = _taxWithholdTrans.TaxWithholdCurrency;
        this.PaymTaxWithholdAmount              = _taxWithholdTrans.TaxWithholdAmount;
        this.WithholdBaseAmount                 = _taxWithholdTrans.TaxWithholdBaseAmountCur;
        this.TaxWithholdAmount                  = _taxWithholdTrans.TaxWithholdAmount;
        this.TaxTaxWithholdAmount               = _taxWithholdTrans.TaxWithholdAmount;
        this.TaxWithholdCurrency                = _taxWithholdTrans.TaxWithholdCurrency;
        this.TaxWithholdBaseAmount              = _taxWithholdTrans.TaxWithholdBaseAmountCur;
        this.PaymCompany                        = _taxWithholdTrans.PaymAccount;
        this.PaymVendor                         = _taxWithholdTrans.PaymAccount;
        this.SettlementVoucher                  = _taxWithholdTrans.SettlementVoucher;
        this.VoucherInvoice                     = _taxWithholdTrans.InvoiceVoucher;
        this.VendTransInvoiceId                 = _taxWithholdTrans.CustVendTransInvoiceId;
        this.VendTransPaymId                    = _taxWithholdTrans.TransPaymId;
        this.Posted                             = _taxWithholdTrans.Posted;
        this.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        //<GTH>
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTH;
        //<GTH>

        if (TaxWithhold::enableAdvancedTaxWithhold() && ! this.TaxWithholdPeriodHead_TH)
        {
            this.TaxWithholdPeriodHead_TH = TaxWithholdTable::find(this.TaxWithholdCode).TaxWithholdPeriodHead_TH;
        }

        if (BrazilParameters::isEnabled()
            && this.Source_BR != TaxWithholdSource::WithholdTax)
        {
            this.TaxRepCounter_BR = TaxWithholdTable::taxWithholdVersion(this.TaxWithholdPeriod_BR,
                                                                         this.TransDate);
        }

        //<GTH>
        // Allocate the certification number when inserting the first withholding trans of each ledgerjournaltrans.
        if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
        {
            taxWithholdTransExtensionTH = this.taxWithholdTransExtensionTH();

            if (this.VendAccount != ''
                && this.CustAccount == ''
                && !TaxWithholdTrans::existLedgerJournalTrans(taxWithholdTransExtensionTH.LedgerJournalTrans))
            {
                ttsbegin;

                ledgerJournalTrans              = LedgerJournalTrans::findRecId(taxWithholdTransExtensionTH.LedgerJournalTrans, false);
                ledgerJournalTransExtensionTH   = LedgerJournalTransExtensionTH::findByLedgerJournalTrans(taxWithholdTransExtensionTH.LedgerJournalTrans, true);

                if (ledgerJournalTransExtensionTH
                    && ledgerJournalTransExtensionTH.RecId
                    && ledgerJournalTransExtensionTH.CertificateNumber == '')
                {
                    if (DirPartyTable::findRec(VendTable::find(ledgerJournalTrans.parmAccount()).Party).baseType() == DirPartyBaseType::Person)
                    {
                        ledgerJournalTransExtensionTH.CertificateNumber = NumberSeq::newGetNum(VendParameters::numRefTaxWithholdPND3Number()).num();
                    }
                    else
                    {
                        ledgerJournalTransExtensionTH.CertificateNumber = NumberSeq::newGetNum(VendParameters::numRefTaxWithholdPND53Number()).num();
                    }
                    ledgerJournalTransExtensionTH.CertificateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    ledgerJournalTransExtensionTH.update();
                }
                ttscommit;
            }
        }

        ttsBegin;
        //</GTH>
        super();
        //<GTH>
        this.SysExtensionSerializerMap::postInsert();
        ttsCommit;
        //</GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountExclTax</Name>
				<Source><![CDATA[
    display AmountCur invoiceAmountExclTax()
    {
        AmountCur baseAmount;
        #isoCountryRegionCodes

        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]) || TaxWithholdingGlobalFeature::isFeatureAndParamEnabled())
            && sign(this.InvoiceAmount) != sign(this.InvoiceTaxAmount)
            && this.InvoiceTaxAmount > 0)
        {
            baseAmount = this.InvoiceAmount - this.InvoiceTaxAmount * -1;
        }
        else
        {
            PaymSchedTaxDistribution taxDistribution = this.getTaxDistributionFromCustVendTransOpen();
            PaymSchedId paymentSched = this.getOriginalPaymentSched();
            PaymSchedTaxDistribution taxDistributionPaymSched = this.getTaxDistributionFromPaymSched();
            if (paymentSched && (taxDistribution == PaymSchedTaxDistribution::FirstRate || taxDistribution == PaymSchedTaxDistribution::LastRate))
            {
                baseAmount = this.InvoiceAmount - this.getActualTaxAmount();
            }
            else if (!paymentSched || taxDistributionPaymSched == PaymSchedTaxDistribution::Proportional)
            {
                baseAmount = this.InvoiceAmount - this.InvoiceTaxAmount;
            }
            else
            {
                baseAmount = this.InvoiceAmount;
            }
        }
        return CurrencyExchangeHelper::amount(baseAmount, this.InvoiceCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTotalAmount_BR</Name>
				<Source><![CDATA[
    AmountCur invoiceTotalAmount_BR()
    {
        if (this.CustTransInvoiceId)
        {
            return CustTrans::find(this.CustTransInvoiceId).AmountCur;
        }
        else
        {
            return -VendTrans::find(this.VendTransInvoiceId).AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the field value
    /// </summary>
    /// <param name="_fieldName">
    /// Field Name
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(TaxWithholdTrans, TaxWithholdAmount):
                if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
                {
                    this.InvoiceTaxWithholdAmount = CurrencyExchangeHelper::curAmount(this.TaxWithholdAmount, this.InvoiceCurrency, this.TransDate);
                }
                break;

            case fieldStr(TaxWithholdTrans, TaxWithholdItemGroupHeading_TH):
                if (!TaxWithholdOnItem_TH::exist(
                        TaxWithholdItemGroupHeading_TH::find(this.TaxWithholdItemGroupHeading_TH).TaxWithholdItemGroup,
                        this.TaxWithholdCode))
                {
                    this.TaxWithholdCode = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdTransExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the witholding extension table for TH
    /// </summary>
    /// <returns>
    /// The instance of the extension table
    /// </returns>
    public TaxWithholdTransExtensionTH taxWithholdTransExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(TaxWithholdTransExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (this.Source_BR != TaxWithholdSource::WithholdTax)
            {
                this.TaxRepCounter_BR = TaxWithholdTable::taxWithholdVersion(this.TaxWithholdPeriod_BR,
                                                                             this.TransDate);
            }
        }
        // </GBR>

        if ((! this.orig().Posted) || (this.orig().SpecTransId != 0))
        {
            //<GTH>
            ttsBegin;
            //</GTH>
            super();
            //<GTH>
            this.SysExtensionSerializerMap::postUpdate();
            ttsCommit;
            //</GTH>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        ;
        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TaxWithholdTrans,InvoiceExemptedAmount):
                case fieldNum(TaxWithholdTrans,InvoiceTaxWithholdAmount):
                    if (! this.TaxWithholdCode)
                    {
                        ret = checkFailed("@SYS81671");
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field value.
    /// </summary>
    /// <param name="_fieldName">
    /// Field Name
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index
    /// </param>
    /// <returns>
    /// True, if the validaiton is correct.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean                                 ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(TaxWithholdTrans, TaxWithholdCode):
                    if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
                    {
                        ret = TaxWithholdGroupData::checkExist(this.TaxWithholdGroup, this.TaxWithholdCode)
                            && TaxWithholdOnItem_TH::checkExist(
                                    TaxWithholdItemGroupHeading_TH::find(this.TaxWithholdItemGroupHeading_TH).TaxWithholdItemGroup,
                                    this.TaxWithholdCode);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        boolean brazilIsEnabled = BrazilParameters::isEnabled();

        // TaxWithholdTrans stores customer based transactions as well for Thailand and Saudi Arabia.
        if (ret
            && !this.VendAccount
			&& !brazilIsEnabled
            && !TaxWithhold::enableAdvancedTaxWithhold())
        {
            ret = checkFailed(strFmt("@SYS26332",fieldId2pname(
                            tableNum(TaxWithholdTrans), fieldNum(TaxWithholdTrans, VendAccount))));
        }

        // Prevent custAccount and VendAccount to be blank at the same time
        if (ret
            && (TaxWithhold::enableAdvancedTaxWithhold()
			|| brazilIsEnabled)
            && !this.CustAccount
            && !this.VendAccount)
        {
            ret = checkFailed("@SYS99959");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountTotalWHT</Name>
				<Source><![CDATA[
    public static TaxWithholdAmount amountTotalWHT(LedgerJournalId _ledgerJournalId)
    {
        TaxWithholdTrans    taxWithholdTrans;

        if (TaxWithhold::enableAdvancedTaxWithhold())
        {
            select sum(PaymTaxWithholdAmount)
                from taxWithholdTrans
                    where taxWithholdTrans.JournalNum  == _ledgerJournalId;
        }
        else
        {
            taxWithholdTrans = null;
        }

        return taxWithholdTrans.PaymTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CompanyId _company, Voucher _voucher, TransDate _transDate )
    {
        boolean ret = true;
        ;

        if (!TaxWithholdTrans::exist(_company, _voucher, _transDate))
        {
            ret = checkFailed(strFmt(TaxWithholdTrans::txtNotExist(), _voucher, date2StrUsr(_transDate, DateFlags::FormatAll)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxWithholdTrans_BR</Name>
				<Source><![CDATA[
    static TaxWithholdTrans copyTaxWithholdTrans_BR(TaxWithholdTrans _taxWithholdTrans,
                                  Voucher           _voucher,
                                  TransDate         _transDate
                                  )
    {
        TaxWithholdTrans reverseWithholdTrans;
        Integer                 sign = -1;

        reverseWithholdTrans                           = _taxWithholdTrans.data();
        reverseWithholdTrans.Voucher                   = _voucher;
        reverseWithholdTrans.TransDate                 = _transDate;
        reverseWithholdTrans.LedgerDimension           = _taxWithholdTrans.LedgerDimension;
        reverseWithholdTrans.TaxWithholdCode           = _taxWithholdTrans.TaxWithholdCode;
        reverseWithholdTrans.TaxWithholdGroup          = _taxWithholdTrans.TaxWithholdGroup;
        reverseWithholdTrans.VendAccount               = _taxWithholdTrans.VendAccount;
        reverseWithholdTrans.VoucherInvoice            = _taxWithholdTrans.VoucherInvoice;
        reverseWithholdTrans.Invoice                   = _taxWithholdTrans.Invoice;
        reverseWithholdTrans.CompetenceDate            = _taxWithholdTrans.CompetenceDate;
        reverseWithholdTrans.JournalNum                = _taxWithholdTrans.JournalNum;
        reverseWithholdTrans.InvoiceCurrency           = _taxWithholdTrans.InvoiceCurrency;
        reverseWithholdTrans.InvoiceAmount             = _taxWithholdTrans.InvoiceAmount * sign;
        reverseWithholdTrans.InvoiceTaxAmount          = _taxWithholdTrans.InvoiceTaxAmount * sign;
        reverseWithholdTrans.InvoiceBaseAmount         = _taxWithholdTrans.InvoiceBaseAmount * sign;
        reverseWithholdTrans.InvoiceNotTaxableByTreaty = _taxWithholdTrans.InvoiceNotTaxableByTreaty * sign;
        reverseWithholdTrans.InvoiceNotTaxableExpenses = _taxWithholdTrans.InvoiceNotTaxableExpenses * sign;
        reverseWithholdTrans.InvoiceExemptedAmount     = _taxWithholdTrans.InvoiceExemptedAmount * sign;
        reverseWithholdTrans.InvoiceWithholdBaseAmount = _taxWithholdTrans.InvoiceWithholdBaseAmount * sign;
        reverseWithholdTrans.InvoiceTaxWithholdAmount  = _taxWithholdTrans.InvoiceTaxWithholdAmount * sign;
        reverseWithholdTrans.PaymCurrency              = _taxWithholdTrans.PaymCurrency;
        reverseWithholdTrans.PaymNotTaxableByTreaty    = _taxWithholdTrans.PaymNotTaxableByTreaty * sign;
        reverseWithholdTrans.PaymNotTaxableExpenses    = _taxWithholdTrans.PaymNotTaxableExpenses * sign;
        reverseWithholdTrans.PaymExemptedAmount        = _taxWithholdTrans.PaymExemptedAmount * sign;
        reverseWithholdTrans.PaymWithholdBaseAmount    = _taxWithholdTrans.PaymWithholdBaseAmount * sign;
        reverseWithholdTrans.PaymTaxWithholdAmount     = _taxWithholdTrans.PaymTaxWithholdAmount * sign;
        reverseWithholdTrans.NotTaxableByTreaty        = _taxWithholdTrans.NotTaxableByTreaty * sign;
        reverseWithholdTrans.NotTaxableExpenses        = _taxWithholdTrans.NotTaxableExpenses * sign;
        reverseWithholdTrans.ExemptedAmount            = _taxWithholdTrans.ExemptedAmount * sign;
        reverseWithholdTrans.WithholdBaseAmount        = _taxWithholdTrans.WithholdBaseAmount * sign;
        reverseWithholdTrans.TaxWithholdAmount         = _taxWithholdTrans.TaxWithholdAmount * sign;
        reverseWithholdTrans.TaxWithholdCurrency       = _taxWithholdTrans.TaxWithholdCurrency;
        reverseWithholdTrans.TaxNotTaxableByTreaty     = _taxWithholdTrans.TaxNotTaxableByTreaty * sign;
        reverseWithholdTrans.TaxNotTaxableExpenses     = _taxWithholdTrans.TaxNotTaxableExpenses * sign;
        reverseWithholdTrans.TaxExemptedAmount         = _taxWithholdTrans.TaxExemptedAmount * sign;
        reverseWithholdTrans.TaxWithholdBaseAmount     = _taxWithholdTrans.TaxWithholdBaseAmount * sign;
        reverseWithholdTrans.TaxTaxWithholdAmount      = _taxWithholdTrans.TaxTaxWithholdAmount * sign;
        reverseWithholdTrans.SpecTransId               = 0;
        reverseWithholdTrans.VendTransInvoiceId        = _taxWithholdTrans.VendTransInvoiceId;
        reverseWithholdTrans.Posted                    = _taxWithholdTrans.Posted;
        reverseWithholdTrans.VendTransPaymId           = _taxWithholdTrans.VendTransPaymId;
        reverseWithholdTrans.PaymCompany               = _taxWithholdTrans.PaymCompany;
        reverseWithholdTrans.PaymVendor                = _taxWithholdTrans.PaymVendor;

        return reverseWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CompanyId _company, Voucher _voucher, TransDate _transDate )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxWithholdTrans
                 where
                     taxWithholdTrans.PaymCompany == _company &&
                     taxWithholdTrans.Voucher == _voucher &&
                     taxWithholdTrans.TransDate == _transDate).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustTransPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TaxWithholdTrans</c> record for a given customer transaction.
    /// </summary>
    /// <param name="_custTrans">
    /// The CustTrans record to use to find withholding tax transactions.
    /// </param>
    /// <returns>
    /// Returns true if a withholding tax transaction was found. False, otherwise.
    /// </returns>
    public static boolean existCustTransPaym(CustTrans _custTrans)
    {
        boolean found;

        if (_custTrans.RecId != 0)
        {
            found = (select firstonly RecId
                from taxWithholdTrans
                where taxWithholdTrans.CustTransPaymId == _custTrans.RecId).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustVendTransPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whether there is a record related to the specified cust/vend transaction.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The specified cust/vend transaction.
    /// </param>
    /// <returns>
    /// true if found a <C>TaxWithholdTrans</C>; otherwise, return false.
    /// </returns>
    public static boolean existCustVendTransPaym(CustVendTrans _custVendTrans)
    {
        boolean found;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans):
                found = TaxWithholdTrans::existCustTransPaym(_custVendTrans);
                break;

            case tableNum(VendTrans):
                found = TaxWithholdTrans::existVendTransPaym(_custVendTrans);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existJournalId</Name>
				<Source><![CDATA[
    public static boolean existJournalId(LedgerJournalId journalId)
    {
        return journalId && (select firstonly RecId from taxWithholdTrans
                            where taxWithholdTrans.JournalNum == journalId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the <c>LedgerJournalTrans</c> is existed
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    /// The recid
    /// </param>
    /// <returns>
    /// True, if it is existed.
    /// </returns>
    public static boolean existLedgerJournalTrans(LedgerJournalTransRefRecId _ledgerJournalTransRecId)
    {
        return taxWithholdTransExtensionTH::existLedgerJournalTrans(_ledgerJournalTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriod_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdTrans</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date is used to find record.
    /// </param>
    /// <param name="_toDate">
    /// The to date is used to find record.
    /// </param>
    /// <param name="_taxPeriodRecId">
    /// The record id of tax period is used to find record.
    /// </param>
    /// <returns>
    /// Returns true if record exists; otherwise, false.
    /// </returns>
    static boolean existPeriod_TH(TransDate            _fromDate,
                                  TransDate            _toDate,
                                  TaxWithholdPeriodId_TH _taxPeriodRecId)
    {
        TaxWithholdTrans taxWithholdTrans;

        if (TaxWithhold::enableAdvancedTaxWithhold())
        {
            select firstonly RecId from taxWithholdTrans
                where taxWithholdTrans.TaxWithholdPeriodHead_TH == _taxPeriodRecId
                        && taxWithholdTrans.TransDate >= _fromDate
                        && taxWithholdTrans.TransDate <= _toDate;

            return (taxWithholdTrans.RecId != 0);
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVendTransPaym</Name>
				<Source><![CDATA[
    public static boolean existVendTransPaym(VendTrans _vendTrans)
    {
        boolean found;

        if (_vendTrans.RecId != 0)
        {
            found = (select firstonly RecId
                from taxWithholdTrans
                where taxWithholdTrans.VendTransPaymId == _vendTrans.RecId).RecId != 0;
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static TaxWithholdTrans findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        TaxWithholdTrans taxWithholdTrans;

        taxWithholdTrans.selectForUpdate(_forUpdate);
        if (_recId)
        {
            select firstonly taxWithholdTrans
                where taxWithholdTrans.RecId == _recId;
        }

        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxWithholdTrans find(
        CompanyId _company,
        Voucher _voucher,
        TransDate _transDate ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdTrans taxWithholdTrans;
        ;

        taxWithholdTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxWithholdTrans
            where
                taxWithholdTrans.PaymCompany == _company &&
                taxWithholdTrans.Voucher == _voucher &&
                taxWithholdTrans.TransDate == _transDate;

        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustVendTransPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the trans by the given Cust or Vend trans.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The given cust or vend trans.
    /// </param>
    /// <returns>
    /// The found trans.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If it is not cust trans or vend trans, it will raise error.
    /// </exception>
    public static TaxWithholdTrans findByCustVendTransPaym(CustVendTrans _custVendTrans)
    {
        TaxWithholdTrans  taxWithholdTrans;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans):
                taxWithholdTrans = TaxWithholdTrans::findCustTransPaym(_custVendTrans);
                break;

            case tableNum(VendTrans):
                taxWithholdTrans = TaxWithholdTrans::findVendTransPaym(_custVendTrans);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTransPaym</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns <c>TaxWithholdTrans</c> record for a given customer transaction.
    /// </summary>
    /// <param name="_custTrans">
    /// The CustTrans record to use to find withholding tax transactions.
    /// </param>
    /// <param name="_forupdate">
    /// Determines if the returned <c>CustTrans</c> is selected for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use.
    /// </param>
    /// <returns>
    /// Returns a  <c>TaxWithholdTrans</c> table buffer.
    /// </returns>
    public static TaxWithholdTrans findCustTransPaym(CustTrans _custTrans,
                                                            boolean _forupdate = false,
                                                            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdTrans  taxWithholdTrans;

        taxWithholdTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdTrans.concurrencyModel(_concurrencyModel);
        }

        if (_custTrans.RecId)
        {
            select firstonly taxWithholdTrans
                where taxWithholdTrans.CustTransPaymId == _custTrans.RecId;
        }
        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransPaym</Name>
				<Source><![CDATA[
    public static TaxWithholdTrans  findVendTransPaym(VendTrans _vendTrans)
    {
        TaxWithholdTrans  taxWithholdTrans;
        ;
        if (_vendTrans.RecId)
        {
            select firstonly taxWithholdTrans
                where taxWithholdTrans.VendTransPaymId == _vendTrans.RecId;
        }
        return taxWithholdTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdAmountTotal</Name>
				<Source><![CDATA[
    public static TaxWithholdAmountCur taxWithholdAmountTotal(Query _query)
    {
        TaxWithholdTrans      taxWithholdTrans;
        Query                 query;
        QueryRun              queryRun;
        TaxWithholdAmount     taxWithholdAmount;
        TaxWithholdAmountCur  invoiceTaxWithholdAmount;
        QueryBuildDataSource  qB;
        CurrencyCode     currencyCode;
        boolean          companyCurrency;
        ;

        query = new Query();
        SysQuery::mergeRanges(query, _query);
        qB = query.dataSourceNo(1);
        qB.orderMode(OrderMode::GroupBy);
        qB.addSortField(fieldNum(TaxWithholdTrans, InvoiceCurrency));

        qB.addSelectionField(fieldNum(TaxWithholdTrans, TaxWithholdAmount), SelectionField::Sum);
        qB.addSelectionField(fieldNum(TaxWithholdTrans, InvoiceTaxWithholdAmount), SelectionField::Sum);
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            taxWithholdTrans = queryRun.getNo(1);
            taxWithholdAmount     += taxWithholdTrans.TaxWithholdAmount;
            invoiceTaxWithholdAmount += taxWithholdTrans.InvoiceTaxWithholdAmount;

                if (! currencyCode)
                {
                    currencyCode = taxWithholdTrans.InvoiceCurrency;
                }
                if (currencyCode != taxWithholdTrans.InvoiceCurrency)
                {
                    companyCurrency = true;
                }
        }
        if (companyCurrency)
        {
            return taxWithholdAmount;
        }
        else
        {
            return invoiceTaxWithholdAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102259";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWithholdTransOpenTransId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the VendTransOpenRecId in the <c>TaxWitholdTrans</c> table
    /// </summary>
    /// <remarks>
    /// When withholding tax records are reversed via the CustVendReversePosting class,
    /// sometimes it is unknown at the time of processing the withholding tax records what the
    /// TaxWithholdTrans.VendTransOpenRecId value should be since the VendTransOpen or
    /// CustTransOpen table do not yet exist.  In this case, the TaxWithholdTrans.VendTransOpenRecId
    /// is set to zero and updated here after all reverse posting is done.
    /// </remarks>

    public static void updateTaxWithholdTransOpenTransId_BR()
    {
        TaxWithholdTrans    taxWithholdTrans;
        VendTrans           vendTransLoc;
        CustTrans           custTransLoc;
        RecId               transOpenRecId;
        ;

        ttsbegin;
        while select forupdate crosscompany taxWithholdTrans
            where taxWithholdTrans.CustVendTransOpenRecId_BR == 0 &&
                taxWithholdTrans.VoucherInvoice == ''  // Reversed TaxWithholdTrans records have a blank VoucherInvoice field
        {
            changecompany(taxWithholdTrans.company())
            {
                if (taxWithholdTrans.Source_BR == TaxWithholdSource::VendPayment)
                {
                    vendTransLoc = VendTrans::find(taxWithholdTrans.VendTransInvoiceId);
                    if (vendTransLoc)
                    {
                        transOpenRecId = VendTransOpen::findRefId(vendTransLoc.RecId).RecId;
                    }
                }
                else
                {
                    custTransLoc = CustTrans::find(taxWithholdTrans.CustTransInvoiceId);
                    if (custTransLoc)
                    {
                        transOpenRecId = CustTransOpen::findRefId(custTransLoc.RecId).RecId;
                    }
                }
                taxWithholdTrans.CustVendTransOpenRecId_BR = transOpenRecId;
                taxWithholdTrans.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalPaymentSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the setting of the payment schedule of the PO header.
    /// </summary>
    private PaymSchedId getOriginalPaymentSched()
    {
        PurchTable purchTable;
        VendTransOpen vendTransOpen;
        SpecTrans specTrans;
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;

        select PaymentSched from purchTable
            join vendInvoiceJour
                where vendInvoiceJour.PurchId == purchTable.PurchId
            join vendTrans
                where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
                    && vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount
                    && vendTrans.TransDate == vendInvoiceJour.InvoiceDate
            join vendTransOpen
                where vendTransOpen.AccountNum == vendTrans.AccountNum
                    && vendTransOpen.RefRecId == vendTrans.RecId
            join specTrans
                where specTrans.RefCompany == vendTransOpen.dataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RecId == this.SpecTransId;

        return purchTable.PaymentSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the taxAmount of the current transaction.
    /// </summary>
    private Amount getActualTaxAmount()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        VendTrans vendTrans = VendTrans::find(this.VendTransInvoiceId);

        select sum(SourceRegulateAmountCur) from taxTrans
            join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                    && taxTrans.Voucher == vendTrans.Voucher
                    && taxTrans.TransDate == vendTrans.TransDate;

        return taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDistributionFromCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the installment record on vendTransOpen table.
    /// </summary>
    private PaymSchedTaxDistribution getTaxDistributionFromCustVendTransOpen()
    {
        SpecTrans specTrans;
        VendTransOpen vendTransOpen;

        select TaxDistribution from vendTransOpen
            join specTrans
                where specTrans.RefCompany == vendTransOpen.dataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RecId == this.SpecTransId;

        return vendTransOpen.TaxDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDistributionFromPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find out what staging is setup in the payment schedule interface.
    /// </summary>
    private PaymSchedTaxDistribution getTaxDistributionFromPaymSched()
    {
        PurchTable purchTable;
        SalesTable salesTable;
        SpecTrans specTrans;
        VendTransOpen vendTransOpen;
        CustTransOpen custTransOpen;
        VendInvoiceJour vendInvoiceJour;
        CustInvoiceJour custInvoiceJour;
        VendTrans vendTrans;
        CustTrans custTrans;
        PaymSched paymSched;

        select TaxDistribution from paymSched
            join purchTable
                where purchTable.PaymentSched == paymSched.Name
            join vendInvoiceJour
                where vendInvoiceJour.PurchId == purchTable.PurchId
            join vendTrans
                where vendTrans.Voucher == vendInvoiceJour.LedgerVoucher
                    && vendTrans.AccountNum == vendInvoiceJour.InvoiceAccount
                    && vendTrans.TransDate == vendInvoiceJour.InvoiceDate
            join vendTransOpen
                where vendTransOpen.AccountNum == vendTrans.AccountNum
                    && vendTransOpen.RefRecId == vendTrans.RecId
            join specTrans
                where specTrans.RefCompany == vendTransOpen.dataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RecId == this.SpecTransId;

        return paymSched.TaxDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTaxWithholdExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits withholding tax exchange rate.
    /// </summary>
    /// <param name = "set">True means edit.</param>
    /// <param name = "_taxWithholdExchRate">The withholding tax exchange rate.</param>
    /// <returns>The withholding tax exchange rate.</returns>
    public edit ExchRate editTaxWithholdExchRate(boolean set, ExchRate _taxWithholdExchRate)
    {
        ExchRate taxWithholdExchRate = _taxWithholdExchRate;
        
        if (this.PaymCurrency && this.TaxWithholdCurrency)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(this.PaymCurrency, this.TaxWithholdCurrency);
            exchangeRateHelper.parmExchangeDate(this.TaxWithholdExchRateDate);
            exchangeRateHelper.parmExchangeRateTypeRecId(LedgerParameters::find().TaxWithholdExchangeRateType);
            exchangeRateHelper.parmLedgerRecId(Ledger::current());

            if (set)
            {
                this.TaxWithholdExchRate = exchangeRateHelper.prepareExchangeRateForStorage(taxWithholdExchRate);
                taxWithholdExchRate = exchangeRateHelper.displayStoredExchangeRate(this.TaxWithholdExchRate);
            }
            else
            {
                taxWithholdExchRate = exchangeRateHelper.displayStoredExchangeRate(this.TaxWithholdExchRate);
            }
        }

        return taxWithholdExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxWithholdTransExistForMarkedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether withholding tax is calculated for settlement marked trans.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The payment journal line.</param>
    /// <returns>The record id for <c>TaxWithholdTrans</c>.</returns>
    public static RefRecId isTaxWithholdTransExistForMarkedTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        TaxWithholdTrans taxWithholdTrans;

        select firstonly RecId from taxWithholdTrans
            exists join specTrans
                where specTrans.RecId == taxWithholdTrans.SpecTransId
                    && specTrans.SpecCompany == _ledgerJournalTrans.company()
                    && specTrans.SpecTableId == _ledgerJournalTrans.TableId
                    && specTrans.SpecRecId == _ledgerJournalTrans.RecId;

        return taxWithholdTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicWithholdingTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126144</DeveloperDocumentation>
	<Label>@SYS81714</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceWithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmountInTaxWithholdCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultCurrency</Name>
			<Label>@SYS23938</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>defaultCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotTaxableByTreaty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NotTaxableExpenses</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExemptedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntersectionWithholdBaseAmount_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettlementVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdIsSelected_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Settled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartyId_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceCurrency</Name>
			<Label>@SYS66021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceNotTaxableByTreaty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceNotTaxableExpenses</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceExemptedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceWithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymCurrency</Name>
			<Label>@SYS66023</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymNotTaxableByTreaty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymNotTaxableExpenses</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymExemptedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymWithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reporting</Name>
			<Label>@SYS81753</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompetenceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdSlipNum_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdPeriod_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialReport</Name>
			<Label>@SYS10223</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxWithholdCurrency</Name>
			<Label>@SYS81746</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxNotTaxableByTreaty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxNotTaxableExpenses</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxExemptedAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxTaxWithholdAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdAccumulatedBaseAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxWithholdGroup</Name>
			<Label>@SYS81675</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroupTable_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentTable_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxWithholdPeriod</Name>
			<Label>@SYS60050</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorType_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTransInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTransPaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransPaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTransInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJourTransRecId_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefCustVendTransRecId_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendTransOpenRecId_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanBeReversed_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CompetenceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS81716</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>TH,SA,GB,IE,BR</CountryRegionCodes>
			<ExtendedDataType>CustTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransPaymId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>TH,SA,GB,IE,BR</CountryRegionCodes>
			<ExtendedDataType>CustTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustVendTransOpenRecId_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExemptedAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmount</ExtendedDataType>
			<Label>@SYS81742</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntersectionWithholdBaseAmount_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYS81729</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS81718</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS81723</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS66021</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceExemptedAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81727</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceNotTaxableByTreaty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81724</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceNotTaxableExpenses</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81726</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS81720</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceTaxWithholdAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81731</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceWithholdBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYS81729</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJourTransRecId_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NotTaxableByTreaty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmount</ExtendedDataType>
			<Label>@SYS81740</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NotTaxableExpenses</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmount</ExtendedDataType>
			<Label>@SYS81741</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PartyId_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>DirPartyNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS14025</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS66023</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaymExemptedAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81737</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaymNotTaxableByTreaty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81735</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaymNotTaxableExpenses</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81736</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaymTaxWithholdAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81739</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@SYS118747</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaymWithholdBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYS81738</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Posted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefCustVendTransRecId_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Settled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>TH,SA,GB,IE,BR</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS79585</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SettlementVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<EnumType>TaxWithholdSource</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SpecTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxExemptedAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81750</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxNotTaxableByTreaty</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81748</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxNotTaxableExpenses</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81749</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TaxRepCounter_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxVersion</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxTaxWithholdAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmountCur</ExtendedDataType>
			<Label>@SYS81752</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdCodeType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdAmount</ExtendedDataType>
			<Label>@SYS81745</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYS81751</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponentGroupTable_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5350</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponentTable_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5357</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS81746</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdIsSelected_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<Label>@GLS725</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdPeriod_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdPeriod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdPeriodHead_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdPeriodId_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdSlipNum_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdSlipNum_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorType_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdVendorType_TH</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendTransInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendTransPaymId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS53939</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherInvoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS53864</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WithholdBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBase</ExtendedDataType>
			<Label>@SYS81744</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdAccumulatedBaseAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBaseCur</ExtendedDataType>
			<Label>@SYP4882043</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmountInTaxWithholdCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<HelpText>@Tax_WithholdTax:InvoiceAmountInTaxWithholdCurrencyHelpText</HelpText>
			<Label>@Tax_WithholdTax:InvoiceAmountInTaxWithholdCurrency</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<HelpText>@Tax_WithholdTax:TaxWithholdExchRateHelp</HelpText>
			<Label>@Tax_WithholdTax:TaxWithholdExchRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxWithholdExchRateDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@Tax_WithholdTax:WithholdingTaxExchangeRateDate</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymCompany</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SpecTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SpecTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>JournalNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SpecTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueCombination_Ta</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdItemGroupHeading_THIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SettledIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Settled</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdComponentGroupTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdComponentGroupTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdComponentTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>CRSEIndia</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdComponentTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_InvoiceCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>InvoiceCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_PaymCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_PaymCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>PaymCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_TaxWithholdCurrency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_TaxWithholdCurrency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TaxWithholdCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTrans_CustTransInvoiceId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransInvoiceId</Name>
					<SourceEDT>CustTransRefRecId</SourceEDT>
					<Field>CustTransInvoiceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTrans_CustTransPaymId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTrans_CustTransPaymId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransPaymId</Name>
					<SourceEDT>CustTransRefRecId</SourceEDT>
					<Field>CustTransPaymId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>PaymCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJourTransRecId_BR</Name>
					<Field>LedgerJourTransRecId_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SpecTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SpecTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SpecTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecTransId</Name>
					<Field>SpecTransId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentGroupTable_INFK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentGroupTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponentGroupTable_IN</Name>
					<Field>TaxWithholdComponentGroupTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentTable_INFK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponentTable_IN</Name>
					<Field>TaxWithholdComponentTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdItemGroupHeading_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdItemGroupHeading_TH_TaxWithholdTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdPeriodHead_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdPeriodHead_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdPeriodHead_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdPeriodHead_TH_TaxWithholdTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdPeriodHead_TH</Name>
					<Field>TaxWithholdPeriodHead_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_PaymVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_PaymVendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymVendor</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>PaymVendor</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_VendAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTransInvoice</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTransInvoiceId</Name>
					<SourceEDT>VendTransRefRecId</SourceEDT>
					<Field>VendTransInvoiceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransOpen</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendTransOpenRecId_BR</Name>
					<Field>CustVendTransOpenRecId_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransPaym</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTransPaym</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTransPaymId</Name>
					<SourceEDT>VendTransRefRecId</SourceEDT>
					<Field>VendTransPaymId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>