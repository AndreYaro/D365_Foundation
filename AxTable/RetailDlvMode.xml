<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDlvMode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDlvMode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isPickupDeliveryMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if input DlvModeId is a valid pickup delivery mode.
    /// </summary>
    /// <param name = "_code">The delivery mode code.</param>
    /// <returns>treu if it's a pickup, false if it's not.</returns>
    public static boolean isPickupDeliveryMode(DlvModeId _code)
    {
        if (!_code)
        {
            return false;
        }

        boolean isMultiplePickupFeatureEnabled = RetailMultiplePickupDeliveryModeFeatureExposure::isEnabled();

        if (isMultiplePickupFeatureEnabled)
        {
            RetailDlvMode retailDlvMode;

            select firstonly RecId from retailDlvMode
                where retailDlvMode.Type == RetailDlvModeType::Pickup
                && retailDlvMode.Code == _code;

            if (retailDlvMode)
            {
                return true;
            }

            return false;
        }
        else
        {
            return _code == RetailParameters::find().PickUpDeliveryModeCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickupDeliveryModes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get pickup delivery mode codes.
    /// </summary>
    /// <returns>A temp table includs pickup delivery mode codes.</returns>
    public static RetailDlvModeTmp getPickupDeliveryModes()
    {
        RetailDlvModeTmp pickupDeliveryModeTmp;

        boolean isMultiplePickupFeatureEnabled = RetailMultiplePickupDeliveryModeFeatureExposure::isEnabled();

        if (isMultiplePickupFeatureEnabled)
        {
            RetailDlvMode retailDlvMode;

            insert_recordset pickupDeliveryModeTmp(Code)
                select Code from retailDlvMode
                    where retailDlvMode.Type == RetailDlvModeType::Pickup;
        }
        else
        {
            DlvModeId pickupDlvMode = RetailParameters::find().PickUpDeliveryModeCode;
            if (pickupDlvMode)
            {
                pickupDeliveryModeTmp.Code = pickupDlvMode;
                pickupDeliveryModeTmp.insert();
            }
        }

        return pickupDeliveryModeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate field.
    /// </summary>
    /// <param name = "_fieldIdToCheck">Field id to check.</param>
    /// <returns>true if validation is ok; otherwise, false.</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {    
        boolean ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(RetailDlvMode, Code) :
                ret = this.validatePickupDeliveryModeCode();
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate delete.
    /// </summary>
    /// <returns>true if validation is ok; otherwise, false.</returns>
    public boolean validateDelete()
    {    
        boolean ret = super();

        return ret && this.validatePickupDeliveryModeOnSalesOrders(this.Code);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickupDeliveryModeCode</Name>
				<Source><![CDATA[
    private boolean validatePickupDeliveryModeCode()
    {
        DlvModeId updatedPickupModeId = this.Code;

        if (updatedPickupModeId != this.orig().Code
            && !this.validatePickupDeliveryModeOnSalesOrders(updatedPickupModeId))
        {
            return false;
        }

        RetailParameters retailParameters = RetailParameters::find();

        if ((retailParameters.CarryOutDeliveryModeCode)
            && (retailParameters.CarryOutDeliveryModeCode == updatedPickupModeId))
        {
            return checkFailed("@Retail:PickupCarryOutDlvModeValidation");
        }
        else if ((retailParameters.ElectronicDeliveryModeCode)
                && (retailParameters.ElectronicDeliveryModeCode == updatedPickupModeId))
        {
            return checkFailed("@Retail:PickupElectronicDlvModeValidation");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePickupDeliveryModeOnSalesOrders</Name>
				<Source><![CDATA[
    private boolean validatePickupDeliveryModeOnSalesOrders(DlvModeId _dlvMode)
    {
        SalesLine salesLine;

        select firstonly RecId from salesLine
            where salesLine.DlvMode == _dlvMode
                && (salesLine.salesStatus == SalesStatus::Backorder
                    || salesLine.salesStatus == SalesStatus::Delivered);

        if (salesLine)
        {
            return checkFailed(strFmt('@Retail:InvalidPickUpDeliveryModeCode', _dlvMode));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@Retail:RetailDlvModeDeveloperDocumentation</DeveloperDocumentation>
	<Label>@Retail:RetailDlvMode</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CodeIdx</ClusteredIndex>
	<Modules>TransactionsAndOrders</Modules>
	<PrimaryIndex>CodeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<ExtendedDataType>DlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<EnumType>RetailDlvModeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>RetailDisplayOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Code</Name>
					<SourceEDT>DlvModeId</SourceEDT>
					<Field>Code</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>