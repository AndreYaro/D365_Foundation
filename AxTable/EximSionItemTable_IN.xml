<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximSionItemTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximSionItemTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        EximSionItemTableRelationship_IN sionItemTableRelation;

        ttsbegin;

        super();

        delete_from sionItemTableRelation
            where sionItemTableRelation.SionItemTableRecId == this.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays item name.
    /// </summary>
    /// <returns>
    /// The item name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the specified field to its original value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    public void modifiedFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(EximSionItemTable_IN, ItemId) :
                this.Unit = InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
                break;

            case fieldstr(EximSionItemTable_IN, Basis),
                 fieldstr(EximSionItemTable_IN, Value),
                 fieldstr(EximSionItemTable_IN, Qty) :

                switch (this.Basis)
                {
                    case EximSionBasis_IN::PctOfFOB,
                         EximSionBasis_IN::Value :
                        this.AllowedQty = this.Qty;
                        break;

                    case EximSionBasis_IN::NetPct :
                        if (this.Value > 100)
                        {
                            this.Value = 100;
                        }
                        if (this.Value < -100)
                        {
                            this.Value = -100;
                        }

                        this.AllowedQty = this.Qty + (this.Qty * this.Value/100);
                        break;

                    case EximSionBasis_IN::PctOfInput :
                        this.Value = 0;
                        if (!EximSionItemTableRelationship_IN::existSionItemTableRelation(this.RecId))
                        {
                            this.AllowedQty = 0;
                        }
                        break;

                    case EximSionBasis_IN::StandardQty :
                        this.Value = 0;
                        if (!EximSionStandardQtyTable_IN::findByRef(this.RecId))
                        {
                            this.AllowedQty = 0;
                        }
                        break;
                }

                if (this.ApplyRestriction)
                {
                    this.RestrictedAllowedQty = this.AllowedQty - (this.AllowedQty * this.RestrictedPct/100);
                }
                break;

            case fieldstr(EximSionItemTable_IN, ApplyRestriction) :
                if (!this.ApplyRestriction)
                {
                    this.RestrictedPct = 0;
                    this.RestrictedAllowedQty = 0;
                }
                break;

            case fieldstr(EximSionItemTable_IN, RestrictedPct) :
                this.RestrictedAllowedQty = this.AllowedQty - (this.AllowedQty * this.RestrictedPct/100);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean                          ret;
        EximSionItemTableRelationship_IN sionItemTableRelation;

        ret = super();

        if (ret)
        {
            select firstonly RelatedSionItemTableRecId
                from sionItemTableRelation
                    where sionItemTableRelation.RelatedSionItemTableRecId == this.RecId;

            if (sionItemTableRelation.RelatedSionItemTableRecId)
            {
                ret = checkfailed(strfmt("@GLS5078", tablepname(EximSionItemTableRelationship_IN)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(
        fieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean ret = true;

        switch (_fieldName)
        {
            case fieldstr(EximSionItemTable_IN, Value) :
                if ((this.Basis == EximSionBasis_IN::PctOfFOB
                    || this.Basis == EximSionBasis_IN::Value)
                    && this.Value < 0)
                {
                    ret = checkfailed("@SYS118311");
                }
                break;

            case fieldstr(EximSionItemTable_IN, RestrictedPct) :
                if (this.RestrictedPct < 0 || this.RestrictedPct > 100)
                {
                    ret = checkfailed("@GLS61450");
                }
                break;
        }

        return ret && super(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret
            && (this.Basis == EximSionBasis_IN::PctOfFOB
            || this.Basis == EximSionBasis_IN::Value)
            && this.Value < 0)
        {
            ret = checkfailed("@SYS118311");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears EximSionItemTableRelationship_IN and EximSionStandardQtyTable_IN for update with latest values.
    /// </summary>
    /// <param name="_basis">
    ///    The SION basis for calculated values for allowed quantity etc.
    /// </param>
    /// <param name="_sionItemTableRecId">
    ///    EximSionItemTableRecId_IN recid passed
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deleteItems(
        EximSionBasis_IN          _basis,
        EximSionItemTableRecId_IN _sionItemTableRecId)
    {
        EximSionItemTableRelationship_IN sionItemTableRelation;
        EximSionStandardQtyTable_IN      sionStandardQtyTable;

        ttsBegin;
        if (_basis != EximSionBasis_IN::PctOfInput
            && EximSionItemTableRelationship_IN::existSionItemTableRelation(_sionItemTableRecId))
        {
            delete_from sionItemTableRelation
                where sionItemTableRelation.SionItemTableRecId == _sionItemTableRecId;
        }

        if (_basis != EximSionBasis_IN::StandardQty
            && EximSionStandardQtyTable_IN::findByRef(_sionItemTableRecId))
        {
            delete_from sionStandardQtyTable
                where sionStandardQtyTable.SionItemTableRecId == _sionItemTableRecId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_sionLineRecId">
    /// The sion line record id of the <c>EximSionItemTable_IN</c> table record.
    /// </param>
    /// <param name="_itemId">
    /// The item id of the <c>EximSionItemTable_IN</c> table record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        EximSionLineRecId_IN _sionLineRecId,
        ItemId               _itemId)
    {
        return _sionLineRecId && _itemId
            && (select firstonly RecId from EximSionItemTable_IN
                    where EximSionItemTable_IN.SionLineRecId == _sionLineRecId
                       && EximSionItemTable_IN.ItemId        == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximSionItemTable_IN table for the specified id.
    /// </summary>
    /// <param name="_eximSionItemTableRecId">
    /// The unique record id to find record from EximSionItemTable_IN.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximSionItemTable_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximSionItemTable_IN find(
        RefRecId            _eximSionItemTableRecId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximSionItemTable_IN    eximSionItemTable;

        eximSionItemTable.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximSionItemTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximSionItemTable
            where eximSionItemTable.RecId == _eximSionItemTableRecId;

        return eximSionItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSionItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds sion item.
    /// </summary>
    /// <param name="_sionLineRecId">
    /// The sion line RecId.
    /// </param>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_forupdate">
    /// The forUpdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximSionItemTable_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximSionItemTable_IN findSionItem(
        RefRecId _sionLineRecId,
        ItemId   _itemId,
        boolean  _forupdate = false)
    {
        EximSionItemTable_IN sionItemTable;

        if (_sionLineRecId && _itemId)
        {
            sionItemTable.selectForUpdate(_forupdate);

            select firstonly sionItemTable
                order by RecId
                where sionItemTable.SionLineRecId == _sionLineRecId
                   && sionItemTable.ItemId        == _itemId;
        }

        return sionItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupItemsTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookups items table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control.
    /// </param>
    /// <param name="_sionItemTableRelation">
    /// The sion item table relation.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupItemsTable(
        FormStringControl                _ctrl,
        EximSionItemTableRelationship_IN _sionItemTableRelation)
    {
        Args                 args;
        FormRun              formRun;
        EximSionItemTable_IN sionItemTable;

        sionItemTable = EximSionItemTable_IN::find(_sionItemTableRelation.SionItemTableRecId);

        args = new Args();
        args.name(menuitemDisplayStr(EximSionItemTableRelationshipLookup_IN));
        args.record(sionItemTable);
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);

        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllowedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates allowed quantity.
    /// </summary>
    /// <param name="_allowedQty">
    /// The allowed quantity.
    /// </param>
    /// <param name="_sionItemTableRecId">
    /// The sion item table RecId.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateAllowedQty(
        Qty                       _allowedQty,
        EximSionItemTableRecId_IN _sionItemTableRecId)
    {
        EximSionItemTable_IN sionItemTable;
        Qty                  restAllowedQty;

        sionItemTable  = EximSionItemTable_IN::find(_sionItemTableRecId);
        if (sionItemTable.ApplyRestriction)
        {
            restAllowedQty =  (_allowedQty - (_allowedQty * sionItemTable.RestrictedPct/100));
        }

        ttsbegin;
        update_recordset sionItemTable
        setting AllowedQty           = _allowedQty,
                RestrictedAllowedQty = restAllowedQty
            where
                sionItemTable.RecId == _sionItemTableRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSionItemLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates sion item lines.
    /// </summary>
    /// <param name="_sionLineRecId">
    /// The sion line RecId.
    /// </param>
    //    First update all Standard Quantity Items
    //        a. Quantity is editable on the sion items.  So the new quantity needs to be considered.
    //        b. Rest of the fields are user defined and will not get changed unless changed manually.
    //
    //    Second update all Percentage of Input items having related items with basis percenatge of input
    //        a. Related items use the allowed quantity from the items in in Sion Items
    //        b. Dependencies need to be evaluated and updated accordingly.
    //        c. The cyclic check while creating the related items takes care that calculations won't be cyclic

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateSionItemLines(EximSionLineRecId_IN _sionLineRecId)
    {
        EximSionItemTable_IN             sionItemTable;
        EximSionStandardQtyTable_IN      sionStandardQtyTable;
        EximSionItemTableRelationship_IN sionItemTableRelation;
        EximSionItemTableRelationship_IN sionItemTableRelationCopy;
        Qty                              calcQty;
        Qty                              allowedQty;
        boolean                          progress = true;

        ttsbegin;

        // updating the items with basis standard items
        while select forupdate sionStandardQtyTable
            join forupdate Qty, AllowedQty, ApplyRestriction, RestrictedAllowedQty, RestrictedPct from sionItemTable
                where sionItemTable.RecId         == sionStandardQtyTable.SionItemTableRecId
                   && sionItemTable.Basis         == EximSionBasis_IN::StandardQty
                   && sionItemTable.SionLineRecId == _sionLineRecId
        {
            [calcQty, allowedQty] = sionStandardQtyTable.calcQty(sionItemTable.Qty);

            sionStandardQtyTable.CalculatedQty = calcQty;
            sionStandardQtyTable.AllowedQty    = allowedQty;
            sionStandardQtyTable.update();

            sionItemTable.AllowedQty = allowedQty;
            if (sionItemTable.ApplyRestriction)
            {
                sionItemTable.RestrictedAllowedQty = sionItemTable.AllowedQty - (sionItemTable.AllowedQty * sionItemTable.RestrictedPct/100);
            }
            sionItemTable.update();
        }

        // check all items that are referred to in related items for any difference in allowed qty value
        while (progress)
        {
            while select AllowedQty, RestrictedAllowedQty from sionItemTable
                group by AllowedQty, RestrictedAllowedQty
                join RelatedSionItemTableRecId from sionItemTableRelation
                    group by RelatedSionItemTableRecId
                    where ((sionItemTable.RestrictedAllowedQty
                       && (sionItemTable.RestrictedAllowedQty != sionItemTableRelation.AllowedQty))
                       || (!sionItemTable.RestrictedAllowedQty
                       && (sionItemTable.AllowedQty           != sionItemTableRelation.AllowedQty)))
                       && sionItemTable.RecId                 == sionItemTableRelation.RelatedSionItemTableRecId
                       && sionItemTable.SionLineRecId         == _sionLineRecId
            {
                // first update the related items for the allowed quantity value
                allowedQty = sionItemTable.RestrictedAllowedQty ? sionItemTable.RestrictedAllowedQty : sionItemTable.AllowedQty;

                update_recordset sionItemTableRelationCopy
                setting AllowedQty = allowedQty
                    where sionItemTableRelationCopy.RelatedSionItemTableRecId == sionItemTableRelation.RelatedSionItemTableRecId;
            }

            // recalculate the allowed quantity for the related items and update the sion items
            while select forupdate AllowedQty, ApplyRestriction , RestrictedAllowedQty, RestrictedPct
                from sionItemTable
                    where sionItemTable.Basis         == EximSionBasis_IN::PctOfInput
                       && sionItemTable.SionLineRecId == _sionLineRecId
            {
                sionItemTable.AllowedQty = EximSionItemTableRelationship_IN::calculateAllowedQty(sionItemTable.RecId);

                if (sionItemTable.ApplyRestriction)
                {
                    sionItemTable.RestrictedAllowedQty = sionItemTable.AllowedQty -
                                                            (sionItemTable.AllowedQty * sionItemTable.RestrictedPct/100);
                }

                sionItemTable.update();
            }

            select count(SionLineRecId) from sionItemTable
                join AllowedQty, RelatedSionItemTableRecId from sionItemTableRelation
                where ((sionItemTable.RestrictedAllowedQty
                   && (sionItemTable.RestrictedAllowedQty != sionItemTableRelation.AllowedQty))
                   || (!sionItemTable.RestrictedAllowedQty
                   && (sionItemTable.AllowedQty           != sionItemTableRelation.AllowedQty)))
                   && sionItemTable.RecId                 == sionItemTableRelation.RelatedSionItemTableRecId
                   && sionItemTable.SionLineRecId         == _sionLineRecId;

            if (!sionItemTable.SionLineRecId)
            {
                progress = false;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS61479</DeveloperDocumentation>
	<Label>@GLS61438</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Unit</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EximSionStandardQtyTable_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximSionStandardQtyTable_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyRestriction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictedAllowedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictedPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS23497</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SionLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Restriction</Name>
			<Label>@SYS56075</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApplyRestriction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictedPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RestrictedAllowedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SionItemData</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllowedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
			<Label>@GLS61441</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyRestriction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS61444</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Basis</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximSionBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RestrictedAllowedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
			<Label>@GLS61446</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RestrictedPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EximPercentage_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SionLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximSionLineRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EximValue_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SionLineItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SionLineRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>EximSionLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximSionLine_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximSionLine_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximSionLine_IN_EximSionItemTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SionLineRecId</Name>
					<Field>SionLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>