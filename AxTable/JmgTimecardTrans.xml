<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTimecardTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgTimecardTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>imageJobType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the image job type.
    /// </summary>
    /// <returns>
    /// An integer that represents the image job type.
    /// </returns>
    display JmgLabelImageJobType imageJobType()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the image module.
    /// </summary>
    /// <returns>
    /// An integer that represents the image that represents the module.
    /// </returns>
    display JmgLabelImageModule imageModule()
    {
        return this.module();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValuesOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values when an update is made to the <c>JmgTimecardTrans</c> table
    /// </summary>
    public void initValuesOnUpdate()
    {
        JmgIpcActivity  jmgIpcActivity;
        JmgTermJob      job;
        if (this.JourRegType == JmgJourRegTypeEnum::SignIn ||
            this.JourRegType == JmgJourRegTypeEnum::SignOut)
        {
            if (this.JourRegType == JmgJourRegTypeEnum::SignIn)
            {
                jmgIpcActivity = JmgIpcActivity::findJobId(JmgIpcActivity::findSignInJobId());
            }
            else
            {
                jmgIpcActivity = JmgIpcActivity::findJobId(JmgIpcActivity::findSignOutJobId());
            }
            this.JobId = jmgIpcActivity.JobId;
            this.JobRef = jmgIpcActivity.Category;

            //this.StopDate = this.StartDate;
            //this.StopTime = this.StartTime;
            this.StopDateTime = this.StartDateTime;
        }
        else if (this.JobId && (!this.JobRef || this.JourRegType))
        {
            job                 = JmgTermJob::construct(this.JobId);
            this.JourRegType    = job.jourRegType();
            this.JobRef         = job.jobRef();
        }

        if (this.JourRegType == JmgJourRegTypeEnum::SwitchCode)
        {
            throw error("@SYS4008457");
        }

        // Initialize ProjCategory
        if (this.JourRegType                                            &&
            this.orig().JourRegType != this.JourRegType                 &&
            this.orig().JourRegType != JmgJourRegTypeEnum::PrjActivity  &&
            this.orig().JourRegType != JmgJourRegTypeEnum::PrjProject   &&
            (this.JourRegType       == JmgJourRegTypeEnum::PrjActivity  ||
             this.JourRegType       == JmgJourRegTypeEnum::PrjProject))
        {
            // If registration type has changed to a project/project activity, then init
            // cost category based on value from employee table.
            if (!this.ProjCategory)
                this.ProjCategory  = JmgEmployee::find(this.Worker).ProjCategoryId;
    }
        else if (this.JourRegType                                       &&
            this.orig().JourRegType != this.JourRegType                 &&
            this.JourRegType        != JmgJourRegTypeEnum::PrjActivity  &&
            this.JourRegType        != JmgJourRegTypeEnum::PrjProject)
        {
            // If registration type has changed to any
            // other type, then set cost category to empty:
            this.ProjCategory  = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>JmgTimecardTrans</c> record in the database.
    /// </summary>
    /// <remarks>
    /// If no <c>JmgTimecardTable</c> record exist for the profile date and worker that are specified on
    /// the <c>JmgTimecardTrans</c> record, a <c>JmgTimecardTrans</c> record is created.
    /// </remarks>
    public void insert()
    {
        JmgTimecardTable jmgTimecardTable;
        this.initValuesOnUpdate();
        super();

        if (this.Worker && this.ProfileDate)
        {
            jmgTimecardTable = JmgTimecardTable::find(this.Worker, this.ProfileDate);

            if (!jmgTimecardTable)
            {
                jmgTimecardTable.initWorkerProfileDate(this.Worker, this.ProfileDate);
                jmgTimecardTable.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the job description that is associated with the <c>JmgTimecardTrans</c> table.
    /// </summary>
    /// <returns>
    /// the job description that is associated with the <c>JmgTimecardTrans</c> table.
    /// </returns>
    public display JmgDescription jobDescription()
    {
        JmgTermJob job;
        job = JmgTermJob::construct(this.JobId);
        return job.jobDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates when fields are changed in the <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field in which to change the value.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        JmgJobTableType jobType;
        ProjCategoryId  projCatId;
        //If category is changed, check if it was mandatory, and deny change.
        jobType = JmgJobTable::find(this.JobId).Type;
        if ((_fieldId == fieldNum(JmgTimecardTrans, ProjCategory)) && jobType == JmgJobTableType::ProjActivity)
        {
            if (ProjActivity::findJobId(this.JobId).Mandatory)
            {
                warning("@SYS81827");
                this.ProjCategory = ProjActivity::findJobId(this.JobId).CategoryDefault;
            }
        }

        super(_fieldId);
        if (_fieldId != fieldNum(JmgTimecardTrans, JobId))
            return;

        //If job Id has changed, check if job id is activity or budget. If so, transfer category. If no category, transfer employees preferred
        if (jobType == JmgJobTableType::ProjActivity)
        {
            projCatId = ProjActivity::findJobId(this.JobId).CategoryDefault;
            if (ProjCategory::find(projCatId).CategoryType != ProjCategoryType::Hour)
                projCatId = '';
        }
        else if (jobType == JmgJobTableType::ProjBudget)
            projCatId = ProjForecastEmpl::findJobId(this.JobId).CategoryId;

        if (!projCatId)
            projCatId = JmgEmployee::find(this.Worker).ProjCategoryId;

        this.ProjCategory = projCatId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the module, which is that is associated with the job ID that is specified on the
    /// <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <returns>
    /// An <c>JmgModuleEnum</c> value that represents the module from which the job originates.
    /// </returns>
    public display JmgModule module()
    {
        JmgModule ret;
        switch (this.JourRegType)
        {
            case JmgJourRegTypeEnum::Empty:
                break;
            case JmgJourRegTypeEnum::Absence:
            case JmgJourRegTypeEnum::BreakReg:
            case JmgJourRegTypeEnum::IndActivity:
            case JmgJourRegTypeEnum::SignIn:
            case JmgJourRegTypeEnum::SignOut:
            case JmgJourRegTypeEnum::StartTeam:
            case JmgJourRegTypeEnum::StopTeam:
                ret = JmgModuleEnum::IPC;
                break;
            case JmgJourRegTypeEnum::MrpOverlap:
            case JmgJourRegTypeEnum::MrpProcess:
            case JmgJourRegTypeEnum::MrpQueueAfter:
            case JmgJourRegTypeEnum::MrpQueueBefore:
            case JmgJourRegTypeEnum::MrpSetup:
            case JmgJourRegTypeEnum::MrpTransport:
                ret = JmgModuleEnum::PROD;
                break;
            case JmgJourRegTypeEnum::PrjActivity:
            case JmgJourRegTypeEnum::PrjProject:
                ret = JmgModuleEnum::PROJ;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project ID that is associated with this <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <returns>
    /// The project ID that is associated with this <c>JmgTimecardTrans</c> record.
    /// </returns>
    display ProjId projectId()
    {
        if (this.module() == JmgModuleEnum::PROJ)
        {
            return this.JobRef;
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>regTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the registration time on the <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <param name="_set">
    /// true if the registration time value must be updated; otherwise, false.
    /// </param>
    /// <param name="_value">
    /// The new value of registration time to set.
    /// </param>
    /// <returns>
    /// The registration time formatted as a string.
    /// </returns>
    public edit JmgTimeString regTime(boolean _set, JmgTimeString _value)
    {
        if (_set)
        {
            this.Seconds = JmgProfileSeconds::unFormattedSeconds(_value, JmgSecondPresentationEnum::Centitime);
        }
        return JmgProfileSeconds::formattedSeconds(this.Seconds, JmgSecondPresentationEnum::Centitime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stampType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the registration type that is associated with this <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <returns>
    /// The registration type that is associated with this <c>JmgTimecardTrans</c> record.
    /// </returns>
    public display JmgStampType stampType()
    {
        JmgStampType ret;
        switch (this.JourRegType)
        {
            case JmgJourRegTypeEnum::Empty:
                break;
            case JmgJourRegTypeEnum::Absence:
                ret = JmgStampTypeEnum::Absence;
                break;
            case JmgJourRegTypeEnum::BreakReg:
                ret = JmgStampTypeEnum::Break;
                break;
            case JmgJourRegTypeEnum::IndActivity:
            case JmgJourRegTypeEnum::SignIn:
            case JmgJourRegTypeEnum::SignOut:
            case JmgJourRegTypeEnum::StartTeam:
            case JmgJourRegTypeEnum::StopTeam:
            case JmgJourRegTypeEnum::MrpOverlap:
            case JmgJourRegTypeEnum::MrpProcess:
            case JmgJourRegTypeEnum::MrpQueueAfter:
            case JmgJourRegTypeEnum::MrpQueueBefore:
            case JmgJourRegTypeEnum::MrpSetup:
            case JmgJourRegTypeEnum::MrpTransport:
            case JmgJourRegTypeEnum::PrjActivity:
            case JmgJourRegTypeEnum::PrjProject:
                ret = JmgStampTypeEnum::Work;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the start time on the <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <param name="_set">
    /// true if the start time must be updated with the specified value; otherwise, false.
    /// </param>
    /// <param name="_value">
    /// The new value for the start time.
    /// </param>
    /// <returns>
    /// The start time.
    /// </returns>
    public edit JmgTime startTime(boolean _set, JmgTime _value)
    {
        JmgDate myDate;
        if (_set)
        {
            myDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.StartDateTime,DateTimeUtil::getUserPreferredTimeZone()));
            this.StartDateTime = DateTimeUtil::newDateTime(myDate,_value,DateTimeUtil::getUserPreferredTimeZone());
        }
        return DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(this.StartDateTime,DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the stop time on the <c>JmgTimecardTrans</c> record.
    /// </summary>
    /// <param name="_set">
    /// true if the stop time must be updated with the specified value; otherwise, false.
    /// </param>
    /// <param name="_value">
    /// The new value for the stop time.
    /// </param>
    /// <returns>
    /// The stop time.
    /// </returns>
    public edit JmgTime stopTime(boolean _set, JmgTime _value)
    {
        JmgDate myDate;
        if (_set)
        {
            myDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.StopDateTime,DateTimeUtil::getUserPreferredTimeZone()));
            this.StopDateTime = DateTimeUtil::newDateTime(myDate,_value,DateTimeUtil::getUserPreferredTimeZone());
        }
        return DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(this.StopDateTime,DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgTimecardTrans</c> record in the database.
    /// </summary>
    public void update()
    {
        this.initValuesOnUpdate();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        ProjValCheckTrans   projValCheckTrans;

        ret = super();

        if (ret && this.module()    == JmgModuleEnum::PROJ)
        {
            if (!this.ProjCategory)
            {
                ret = checkFailed("@SYS78502");
            }
            if (ret)
            {
                projValCheckTrans   = new ProjValCheckTrans();
                projValCheckTrans.checkResourceCategory(true);
                projValCheckTrans.checkResourceProj(true);
                projValCheckTrans.checkProjCategory(true);

                ret = projValCheckTrans.validateMandatory(this);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTermRegStartRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>JmgTimecardTrans</c> record by using the record ID of a <c>JmgTermReg</c> record.
    /// </summary>
    /// <param name="_startRecId">
    /// The record ID of a <c>JmgTermReg</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the record that is returned must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>JmgTimecardTrans</c> record.
    /// </returns>
    public static JmgTimecardTrans findTermRegStartRecId(JmgTermRegStartRecID _startRecId, boolean _forUpdate = false)
    {
        JmgTimecardTrans jmgTimecardTrans;

        jmgTimecardTrans.selectForUpdate(_forUpdate);

        if (_startRecId)
        {
            select jmgTimecardTrans
                where jmgTimecardTrans.TermRegStartRecID == _startRecId;
        }
        return jmgTimecardTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageListModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>FormWindowControl</c> object with the image list that is used to depict different
    /// modules.
    /// </summary>
    /// <param name="formWindowControl">
    /// The <c>FormWindowControl</c> object to initialize.
    /// </param>
    static void imageListModule(FormWindowControl formWindowControl = null)
    {
        #JmgIcons

        Imagelist imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());

        imagelist.add(new Image(#JMG_IMG_MODULE_IPC));
        imagelist.add(new Image(#JMG_IMG_MODULE_PROD));
        imagelist.add(new Image(#JMG_IMG_MODULE_PROJ));

        if (formWindowControl)
            formWindowControl.imageList(imagelist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>JmgTimecardTrans</c> and related <c>JmgStampJournalTrans</c> records in the database.
    /// </summary>
    public void delete()
    {
        JmgTimecardTable jmgTimecardTable = JmgTimecardTable::find(this.worker, this.profileDate);

        if (jmgTimecardTable.dateCalculated())
        {
            throw error(strfmt("@SYS39809", date2StrUsr(jmgTimecardTable.ProfileDate, DateFlags::FormatAll)));
        }

        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgCalcApproveForm      jmgCalcApproveForm   = JmgCalcApproveForm::construct();

        while select forUpdate jmgStampJournalTrans
            where jmgStampJournalTrans.Worker        == this.Worker
                && jmgStampJournalTrans.ProfileDate  == this.ProfileDate
                && jmgStampJournalTrans.JobId        == this.JobId
                && jmgStampJournalTrans.StartTime    == DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(this.StartDateTime, DateTimeUtil::getOriginatingTimeZone(this.StartDateTime)))
                && jmgStampJournalTrans.StopTime     == DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(this.StopDateTime,  DateTimeUtil::getOriginatingTimeZone(this.StopDateTime)))
        {
            jmgStampJournalTrans.delete();
            jmgCalcApproveForm.transactionDeleted(jmgStampJournalTrans);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317317</DeveloperDocumentation>
	<Label>@SYS39867</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>ProfileDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>EmplIdProfileDateIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JourRegType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>jobDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>regTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Employee</Name>
			<Label>@SYS4705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JourRegType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>jobDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS35894</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JourRegType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>jobDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>regTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Properties</Name>
			<Label>@SYS10344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JobIDAbs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerPilot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrIdPilot</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobFinished</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnCallActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TermReg</Name>
			<Label>@SYS39346</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TermRegStartRecID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TermRegStopRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Time</Name>
			<Label>@SYS11965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>regTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS3043</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobFinished</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@sys8524</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobIDAbs</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobIDAbs</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJobRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JourRegType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgJourRegType</ExtendedDataType>
			<EnumType>JmgJourRegTypeEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OnCallActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgIpcActivityIdOnCallNoRegs</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Seconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDateTime</ExtendedDataType>
			<Label>@SYS39127</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StopDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDateTime</ExtendedDataType>
			<Label>@SYS39128</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TermRegStartRecID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgTermRegStartRecID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TermRegStopRecID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>JmgTermRegStopRecID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerPilot</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId_JobPilot</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>JmgJob</ConfigurationKey>
			<ExtendedDataType>WrkCtrId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrIdPilot</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWrkCtrIdPilot</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplIdProfileDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerPilotIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerPilot</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgTimecardTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerPilot</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_JmgTimecardTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerPilot</Name>
					<Field>WorkerPilot</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HRMAbsenceCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HRMAbsenceCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JobIDAbs</Name>
					<Field>JobIDAbs</Field>
					<RelatedField>JmgJobId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgTermReg_start</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgTermReg</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RawStartRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ElectronicTimecardRegistration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TermRegStartRecID</Name>
					<Field>TermRegStartRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgTermReg_stop</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgTermReg</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RawStopRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ElectronicTimecardRegistration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TermRegStopRecID</Name>
					<Field>TermRegStopRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgTimecardTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgTimecardTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ElectronicTimecard</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ElectronicTimecardRegistration</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileDate</Name>
					<Field>ProfileDate</Field>
					<RelatedField>ProfileDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OnCallJmgIpcActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgIpcActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OnCallJmgIpcActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgTimecardTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OnCallActivity</Name>
					<Field>OnCallActivity</Field>
					<RelatedField>Activity</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>SignIn_Extern</Name>
					<RelatedField>SignIn</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>JmgStampTypeEnum::OnCall</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategory</Name>
					<Field>ProjCategory</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourcePilotWrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourcePilotWrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgTimecardTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrIdPilot</Name>
					<Field>WrkCtrIdPilot</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResourceWrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResourceWrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>JmgTimecardTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrId</Name>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<RelatedField>IsIndividualResource</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>