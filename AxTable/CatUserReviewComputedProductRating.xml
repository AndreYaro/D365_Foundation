<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatUserReviewComputedProductRating</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatUserReviewComputedProductRating extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(RefRecId _product)
    {
        return CatUserReviewComputedProductRating::exist(_product) ? true
            : checkFailed(strfmt(CatUserReviewComputedProductRating::txtNotExist(), _product));
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeAggregateAllProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the average rating and the total number of ratings of all the  <c>EcoResProduct</c> objects in the <c>CatUserReviewProduct</c> table.
    /// </summary>
    public static void computeAggregateAllProduct()
    {
        CatUserReviewProduct                catUserReviewProduct;
        CatUserReviewComputedProductRating  catUserReviewComputedProductRating;
        CatParameters                       catParameters;
        utcdatetime                         utcCutOffDate;

        ttsbegin;

        catParameters = CatParameters::find();
        utcCutOffDate = DateTimeUtil::newDateTime(catParameters.CutoffDate , 0);

        delete_from catUserReviewComputedProductRating;

        insert_recordset catUserReviewComputedProductRating (AverageRating , NumRatings , Product)
            select   avg (Rating) , count(RecId)  , Product
            from catUserReviewProduct
            group by Product
            where catUserReviewProduct.Rating != 0
                && catUserReviewProduct.CreatedDateTime >= utcCutOffDate;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeAggregateByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the average rating and the total number of ratings of the corresponding
    /// <c>EcoResProduct</c> object.
    /// </summary>
    /// <param name="_product">
    /// The record ID of the corresponding <c>EcoResProduct</c> object.
    /// </param>
    /// <param name="_cutOffDate">
    /// A <c>CatUserReviewCutoffDate</c> value that specifies the date before to filter user review ratings.
    /// </param>
    public static void computeAggregateByProduct(RefRecId _product , CatUserReviewCutoffDate _cutOffDate = DateTimeUtil::date(DateTimeUtil::minValue()) )
    {
        CatUserReviewProduct                catUserReviewProduct;
        CatUserReviewComputedProductRating  catUserReviewComputedProductRating;
        CatParameters                       catParameters;
        utcdatetime                         utcCutOffDate;

        ttsbegin;

        if (_cutOffDate == DateTimeUtil::date(DateTimeUtil::minValue()))
        {
            catParameters = CatParameters::find();
            _cutOffDate = catParameters.CutoffDate;
        }

        utcCutOffDate = DateTimeUtil::newDateTime(catParameters.CutoffDate , 0);

        select count (RecId) , avg (Rating) , Product
            from catUserReviewProduct
            group by Product
            where catUserReviewProduct.Product == _product
                 && catUserReviewProduct.Rating != 0 // Comments exists but no Rating
                 && catUserReviewProduct.CreatedDateTime >= utcCutOffDate;

        select forupdate NumRatings , AverageRating
            from catUserReviewComputedProductRating
            where catUserReviewComputedProductRating.Product == _product;

        catUserReviewComputedProductRating.Product = _product;
        catUserReviewComputedProductRating.NumRatings = int642int(catUserReviewProduct.RecId);
        catUserReviewComputedProductRating.AverageRating = catUserReviewProduct.Rating;

        // if a product exists in catUserReviewComputedProductRating
        if (catUserReviewComputedProductRating.RecId != 0)
        {
            catUserReviewComputedProductRating.update();
        }
        else
        {
            catUserReviewComputedProductRating.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>CatUserReviewComputedProductRating</c>
    ///    table.
    /// </summary>
    /// <param name="_product">
    ///    The record ID of the corresponding <c>EcoResProduct</c> row.
    /// </param>
    /// <returns>
    ///    <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean exist(RefRecId _product)
    {
        return (CatUserReviewComputedProductRating::find(_product).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatUserReviewComputedProductRating</c> table.
    /// </summary>
    /// <param name="_product">
    ///    The record ID of the corresponding <c>EcoResProduct</c> row.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>CatUserReviewComputedProductRating</c> record, if it is found; otherwise, an empty record
    ///    buffer.
    /// </returns>
    public static CatUserReviewComputedProductRating find(RefRecId _product, boolean _forUpdate = false)
    {
        CatUserReviewComputedProductRating catUserReviewComputedProductRating;

        if (_product)
        {
            catUserReviewComputedProductRating.selectForUpdate(_forUpdate);
            select firstonly catUserReviewComputedProductRating
                where catUserReviewComputedProductRating.Product == _product;
        }

        return catUserReviewComputedProductRating;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS102239";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcEmployeeProcurementSite</ConfigurationKey>
	<DeveloperDocumentation>@SYS318556</DeveloperDocumentation>
	<Label>@SYS312759</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Product</TitleField1>
	<TitleField2>AverageRating</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>Product</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>Product</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumRatings</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumRatings</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AverageRating</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumRatings</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberOfRatings</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Product</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResProduct_CatUserReviewComputedProductRating</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>