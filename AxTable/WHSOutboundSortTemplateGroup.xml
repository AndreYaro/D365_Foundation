<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundSortTemplateGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSOutboundSortTemplateGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>groupFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays field name based off of referenced field Id.
    /// </summary>
    /// <returns>
    /// The field name of the sort template criteria record's referenced field Id.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSGroupFieldLabel groupFieldName()
    {
        return fieldId2PName(this.GroupTableId, this.GroupFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays table name based off of referenced table Id.
    /// </summary>
    /// <returns>
    /// The table name of the sort template criteria record's referenced table Id.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSGroupTableLabel groupTableName()
    {
        return tableId2PName(this.GroupTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSortTemplateGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates sort template group records based off a query's sort criteria.
    /// </summary>
    /// <param name="_sortTemplateId">
    /// The specific sorting template id the groups will be created for.
    /// </param>
    /// <param name="_packedQueryRun">
    /// The packed query run object whose query's sort fields will be used to create grouping records.
    /// </param>
    [Hookable(false)]
    internal static void createSortTemplateGroup(
        WHSOutboundSortTemplateId   _sortTemplateId,
        container                   _packedQueryRun)
    {
        if (_packedQueryRun != conNull())
        {
            ttsbegin;

            WHSOutboundSortTemplateGroup sortTemplateCriteria;
    
            QueryRun queryRun = new QueryRun(_packedQueryRun);
    
            delete_from sortTemplateCriteria
                where sortTemplateCriteria.SortTemplateId == _sortTemplateId;
    
            int sortCount = queryRun.query().orderByFieldCount();
    
            RecordInsertList recordInsertList = new RecordInsertList(tableNum(WHSOutboundSortTemplateGroup));

            LineNum lineNum;

            for (int i = 1; i <= sortCount; ++i)
            {
                QueryOrderByField queryOrderByField = queryRun.query().orderByField(i);
				
                var dictField = new SysDictField(queryOrderByField.dataSource().table(), queryOrderByField.fieldID());

                if (queryOrderByField
                    && dictField.baseType() == Types::String)
                {
                    ++lineNum;
    
                    sortTemplateCriteria.clear();
                    sortTemplateCriteria.LineNumber     = lineNum;
                    sortTemplateCriteria.SortTemplateId = _sortTemplateId;
                    sortTemplateCriteria.GroupTableId   = queryOrderByField.dataSource().table();
                    sortTemplateCriteria.GroupFieldId   = queryOrderByField.fieldID();
    
                    recordInsertList.add(sortTemplateCriteria);
                }
            }
    
            if (lineNum)
            {
                recordInsertList.insertDatabase();
            }
    
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSOutboundSortTemplateGroup find(
        WHSOutboundSortTemplateId   _sortTemplateId,
        WHSOutboundSortGroupTableId _groupTableId,
        WHSOutboundSortGroupFieldId _groupFieldId,
        boolean                     _forUpdate = false)
    {
        WHSOutboundSortTemplateGroup sortTemplateCriteria;
    
        if (_sortTemplateId && _groupTableId && _groupFieldId)
        {
            if (_forUpdate)
            {
                sortTemplateCriteria.selectForUpdate(_forUpdate);
            }
    
            select firstonly sortTemplateCriteria
                where sortTemplateCriteria.SortTemplateId   == _sortTemplateId
                &&    sortTemplateCriteria.GroupTableId       == _groupTableId
                &&    sortTemplateCriteria.GroupFieldId       == _groupFieldId;
        }
    
        return sortTemplateCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForSortTemplateId</Name>
				<Source><![CDATA[
    public static boolean existForSortTemplateId(WHSOutboundSortTemplateId _sortTemplateId)
    {
        return _sortTemplateId && (select firstOnly RecId from WHSOutboundSortTemplateGroup
								       where WHSOutboundSortTemplateGroup.SortTemplateId == _sortTemplateId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSOutboundSortTemplateGroupDevDocumentation</DeveloperDocumentation>
	<FormRef>WHSOutboundSortTemplateGroup</FormRef>
	<Label>@WAX:WHSOutboundSortTemplateGroupLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>GroupTableId</TitleField1>
	<TitleField2>GroupFieldId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>SortTemplateIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>SortTemplateRefTableRefFieldIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SortTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SortTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortTemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortTemplateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortGroupFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortGroupTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SortGroupBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortGroupBy</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SortTemplateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SortTemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SortTemplateRefTableRefFieldIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SortTemplateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupFieldId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>OutboundSortTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSOutboundSortTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SortTemplateId</Name>
					<Field>SortTemplateId</Field>
					<RelatedField>SortTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>