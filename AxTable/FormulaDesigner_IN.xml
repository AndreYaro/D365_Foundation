<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormulaDesigner_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FormulaDesigner_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resetTaxPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets tax priority.
    /// </summary>
    /// <returns>
    /// The check status.
    /// </returns>
    int resetTaxPriority()
    {
        FormulaDesigner_IN  formulaDesigner;
        FormulaDesigner_IN  formulaDesignerLoc;
        int                 counter;
        int                 checkStatus = 0;
        ;

        FormulaDesigner_IN::checkTaxCode(this.TaxItemGroup,this.TaxCode);

        ttsbegin;

        delete_from formulaDesigner
            where formulaDesigner.id           == this.id
               && formulaDesigner.TaxItemGroup == this.TaxItemGroup;

        while select id from formulaDesigner
            order by id asc
            where formulaDesigner.TaxItemGroup == this.TaxItemGroup
        {
            counter ++;
            if (formulaDesigner.id > counter)
            {
                select firstonly forupdate formulaDesignerLoc
                    where formulaDesignerLoc.id           == formulaDesigner.id
                       && formulaDesignerLoc.TaxItemGroup == this.TaxItemGroup;

                if (counter == 1 && formulaDesignerLoc.TaxableBasis == TaxableBasis_IN::ExclAmount)
                {
                    formulaDesignerLoc.TaxableBasis = TaxableBasis_IN::LineAmount;
                    checkStatus = 1;
                }
                formulaDesignerLoc.id = counter;
                formulaDesignerLoc.doUpdate();
            }
        }

        ttscommit;
        return checkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean isValid;
        str     last;
        #Operator_IN
        ;

        last = substr(this.CalcExp, strlen(this.CalcExp), 1);
        if (last == num2char(#fourTwo) || last == num2char(#fourthree) || last == num2char(#fourfive) || last == num2char(#fourseven))
        {
            isValid = false;
        }
        else
        {
             super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        TaxItemGroupHeading taxItemGroupHeading;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(FormulaDesigner_IN,TaxableBasis):
                    if (this.id == 1 && this.TaxableBasis == TaxableBasis_IN::ExclAmount)
                    {
                        this.TaxableBasis = TaxableBasis_IN::LineAmount;
                        ret = checkFailed("@GLS5282");
                    }
                    break;
                case fieldnum(FormulaDesigner_IN,TaxCode):
                    if (TaxTable::find(this.TaxCode).TaxType_IN == TaxType_IN::None)
                    {
                        ret = false;
                    }
                    else if (!TaxOnItem::find(this.TaxItemGroup,this.TaxCode))
                    {
                        ret = false;
                    }
                    break;
                case fieldnum(FormulaDesigner_IN, PriceInclTax):
                    taxItemGroupHeading = TaxItemGroupHeading::find(this.TaxItemGroup);
                    if (taxItemGroupHeading.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
                        && taxItemGroupHeading.ReverseChargePercentage_IN
                        && this.PriceInclTax == NoYes::Yes )
                    {
                        ret = checkFailed("@SYS4002034");
                    }
                    break;
                default :
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        TaxItemGroupHeading taxItemGroupHeading;

        ret = super();

        taxItemGroupHeading = TaxItemGroupHeading::find(this.TaxItemGroup);
        if (taxItemGroupHeading.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
            && taxItemGroupHeading.ReverseChargePercentage_IN != 0
            && this.PriceInclTax == NoYes::Yes )
        {
            ret = checkFailed("@SYS4002034");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether can delete the tax code record.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group id.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    static void checkTaxCode(
        TaxItemGroup   _taxItemGroup,
        TaxCode        _taxCode)
    {
        FormulaDesigner_IN formulaDesigner;
        #Operator_IN
        ;

        while select CalcExp from formulaDesigner
            where formulaDesigner.TaxItemGroup == _taxItemGroup
        {
            if (strscan(formulaDesigner.CalcExp,num2char(#nintyOne) + _taxCode + num2char(#nintythree),0,strlen(formulaDesigner.CalcExp)))
            {
                throw error(strfmt("@GLS5292",_taxCode));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFormulaDesignerItemLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes formula designer item lines.
    /// </summary>
    /// <param name="_id">
    /// The instance of the <c>ID_IN</c> class.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The tax item group.
    /// </param>
    /// <param name="_formulaDesigner">
    /// The formula designer.
    /// </param>
    public static void deleteFormulaDesignerItemLines(ID_IN _id, TaxItemGroup _taxItemGroup, FormulaDesigner_IN _formulaDesigner = null)
    {
        FormulaDesigner_IN formulaDesigner;
        ;

        formulaDesigner = _formulaDesigner;

        delete_from formulaDesigner
            where formulaDesigner.id             == _id
               && formulaDesigner.TaxItemGroup   == _taxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinTaxableBasisForPriceIncl_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determins the taxable basis which is price inclusive for a specified tax item group.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group.
    /// </param>
    /// <returns>
    /// The taxable basis.
    /// </returns>
    public static TaxableBasis_IN determinTaxableBasisForPriceIncl_IN(TaxItemGroup _taxItemGroup)
    {
        FormulaDesigner_IN  formulaDesigner;

        if (_taxItemGroup)
        {
            // If exists a formula designer use MRP as taxable basis and mark the price inclusive,
            // all other formula designers which mark the price inclusive should be considered the tax
            // is included in the MRP
            select firstOnly RecId from formulaDesigner
                where formulaDesigner.TaxItemGroup  == _taxItemGroup
                    && formulaDesigner.PriceInclTax == NoYes::Yes
                    && formulaDesigner.TaxableBasis == TaxableBasis_IN::MRP;

            if (formulaDesigner.RecId)
            {
                return TaxableBasis_IN::MRP;
            }
        }

        return TaxableBasis_IN::LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>FormulaDesigner_IN</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>FormulaDesigner_IN</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean exist(recId _recId)
    {
        if (_recId)
        {
            return (select firstonly RecId from formulaDesigner_IN
                    where formulaDesigner_IN.RecId  == _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the formula designer exists by item group information.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group information.
    /// </param>
    /// <returns>
    /// Returns true if the formula designer exist.
    /// </returns>
    static boolean existByItemGroup(TaxItemGroup _taxItemGroup)
    {
        return _taxItemGroup &&
            (select formulaDesigner_IN
                where formulaDesigner_IN.TaxItemGroup == _taxItemGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the FormulaDesigner_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing FormulaDesigner_IN table.
    /// </returns>
    public static FormulaDesigner_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        FormulaDesigner_IN    formulaDesigner;

        formulaDesigner.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            formulaDesigner.concurrencyModel(_concurrencyModel);
        }

        select firstonly formulaDesigner
            where formulaDesigner.RecId == _recId;

        return formulaDesigner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the formula designer by the tax code.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group information.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_forUpdate">
    /// True if the record of the formula designer will be update.
    /// </param>
    /// <returns>
    /// The instance of the <c>FormulaDesigner_IN</c> class.
    /// </returns>
    static FormulaDesigner_IN findByTaxCode(
        TaxItemGroup    _taxItemGroup,
        TaxCode         _taxCode,
        boolean         _forUpdate = false)
    {
        FormulaDesigner_IN    formulaDesigner;

        if (_taxItemGroup && _taxCode)
        {
            formulaDesigner.selectForUpdate(_forUpdate);
            select firstonly formulaDesigner
                where formulaDesigner.TaxItemGroup == _taxItemGroup &&
                      formulaDesigner.TaxCode      == _taxCode;
        }
        return formulaDesigner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds formula designer by tax item group.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group.
    /// </param>
    /// <returns>
    /// The instance of the <c>FormulaDesigner_IN</c> class.
    /// </returns>
    public static FormulaDesigner_IN findByTaxItemGroup(
        TaxItemGroup    _taxItemGroup)
    {
        FormulaDesigner_IN    formulaDesigner;
        ;

        if (_taxItemGroup)
        {
            select firstonly formulaDesigner
                where formulaDesigner.TaxItemGroup == _taxItemGroup;
        }
        return formulaDesigner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCountTaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds tax lines count.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_id">
    /// The instance of the <c>ID_IN</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>ID_IN</c> class.
    /// </returns>
    public static ID_IN findCountTaxLines(TaxItemGroup  _taxItemGroup,
                                          TaxCode       _taxCode,
                                          ID_IN         _id = 0)
    {
        FormulaDesigner_IN  formulaDesigner;
        ;
        if (_id != 0)
        {
            select count(id) from formulaDesigner
                where formulaDesigner.TaxItemGroup == _taxItemGroup
                   && formulaDesigner.TaxCode      == _taxCode
                   && formulaDesigner.id           == _id;
        }
        else
        {
            select count(id) from formulaDesigner
                where formulaDesigner.TaxItemGroup == _taxItemGroup
                   && formulaDesigner.TaxCode      == _taxCode;
        }

        return formulaDesigner.id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in <c>FormulaDesigner_IN</c> table.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group is used to find record..
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>FormulaDesigner_IN</c> table; otherwise, an empty record.
    /// </returns>
    static FormulaDesigner_IN findPriceInclTax(TaxItemGroup    _taxItemGroup,
                                               boolean         _forUpdate = false)
    {
        FormulaDesigner_IN formulaDesigner;
        ;

        if (_taxItemGroup)
        {
            formulaDesigner.selectForUpdate(_forUpdate);
            select firstonly formulaDesigner
                order by id
                where formulaDesigner.TaxItemGroup == _taxItemGroup &&
                      formulaDesigner.PriceInclTax == NoYes::Yes;
        }
        return formulaDesigner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxIdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets maximum id value of the <c>FormulaDesigner_IN</c> record table with specified tax item group.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group id.
    /// </param>
    /// <returns>
    /// The maximum id value.
    /// </returns>
    static int getMaxIdValue(TaxItemGroup _taxItemGroup)
    {
        FormulaDesigner_IN    formulaDesigner_IN;
        ;

        select maxof(id) from formulaDesigner_IN
            where formulaDesigner_IN.TaxItemGroup == _taxItemGroup;

        return (formulaDesigner_IN.id) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTypes_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used gets Taxtypes for common tax Codes
    /// </summary>
    /// <param name="_taxGroup">
    /// taxGroup
    /// </param>
    /// <param name="_taxItemGroup">
    /// taxItemGroup
    /// </param>
    /// <returns>
    /// Container for common tax code TaxType values.
    /// </returns>
    static container getTaxTypes_IN(TaxGroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        TaxGroupData        taxGroupData;
        TaxOnItem           taxOnItem;
        TaxTable            taxTable;
        FormulaDesigner_IN  formulaDesigner;
        container           taxTypes;

        while select TaxGroup from taxGroupData
            where taxGroupData.TaxGroup  == _taxGroup
        join TaxItemGroup from taxOnItem
            where taxOnItem.TaxItemGroup == _taxItemGroup
        join TaxCode from formulaDesigner
            where formulaDesigner.TaxItemGroup == taxOnItem.TaxItemGroup
               && taxOnItem.TaxCode      == taxGroupData.TaxCode
               && formulaDesigner.TaxCode == taxOnItem.TaxCode
        join TaxType_IN from taxTable
            group by TaxType_IN
            where taxTable.TaxCode == formulaDesigner.TaxCode
        {
            taxTypes = conins(taxTypes, 1, taxTable.TaxType_IN);
        }

        return taxTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceInclTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is incl tax line price.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// The tax item group.
    /// </param>
    /// <returns>
    /// If 'True', the price is incl tax.
    /// </returns>
    public static boolean isPriceInclTaxLine(TaxItemGroup _taxItemGroup)
    {
        return (_taxItemGroup
            && (select firstonly recId from FormulaDesigner_IN
                    where FormulaDesigner_IN.TaxItemGroup == _taxItemGroup
                       && FormulaDesigner_IN.PriceInclTax == NoYes::Yes).RecId
                       != 0
               );
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceInclTaxOnLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether Pric.incl tax is marked and Taxable basis is line amount for particular Item group.
    /// </summary>
    /// <param name="_taxItemGroup">
    /// tax item group to check.
    /// </param>
    /// <returns>
    /// Returns true or false based on Pric.incl tax is marked and Taxable basis is line amount for particular Item group.
    /// </returns>
    public static boolean isPriceInclTaxOnLineAmount(TaxItemGroup _taxItemGroup)
    {
        return (_taxItemGroup
            && (select firstonly recId from FormulaDesigner_IN
                    where FormulaDesigner_IN.TaxItemGroup == _taxItemGroup
                       && FormulaDesigner_IN.PriceInclTax == NoYes::Yes
                       && (FormulaDesigner_IN.TaxableBasis == TaxableBasis_IN::LineAmount
                           || FormulaDesigner_IN.TaxableBasis == TaxableBasis_IN::Assessable)).RecId
                       != 0
               );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63751</DeveloperDocumentation>
	<FormRef>FormulaDesigner_IN</FormRef>
	<Label>@GLS5279</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxItemGroup</TitleField1>
	<TitleField2>TaxCode</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TaxItemGroupIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxItemGroupIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxableBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceInclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcExp</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxableBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceInclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcExp1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcExp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalcExp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalcExp_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalcExp1</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalcExp_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ID_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceInclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceInclTax_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxableBasis</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxableBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Label>@SYS76477</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxItemGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxItemGroupPriceBasisIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxItemGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PriceInclTax</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxableBasis</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>