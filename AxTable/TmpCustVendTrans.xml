<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpCustVendTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpCustVendTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateLineCreditLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>TmpCustVendTrans</c> buffer with a credit limit.
    /// </summary>
    /// <param name = "_creditLimit">The credit limit.</param>
    /// <param name = "_showAmountAsTotal">Whether credit limit should be shown as a total accounting currency amount or an accounting currency amount.</param>
    /// <returns>The <c>TmpCustVendTrans</c> buffer.</returns>
    [HookableAttribute]
    protected static TmpCustVendTrans populateLineCreditLimit(
        AmountMST   _creditLimit,
        boolean     _showAmountAsTotal
        )
    {
        TmpCustVendTrans tmpCustVendTrans;

        tmpCustVendTrans.Txt = "@SYS1532";
        if (_showAmountAsTotal)
        {
            tmpCustVendTrans.TotalAmountMst = _creditLimit;
        }
        else
        {
            tmpCustVendTrans.AmountMst      = _creditLimit;
        }
        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLineCreditRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>TmpCustVendTrans</c> buffer with a remaining credit limit.
    /// </summary> 
    /// <param name = "_creditLimitRemain">The remaining credit limit.</param>
    /// <param name = "_showAmountAsTotal">Whether remaining credit limit should be shown as a total accounting currency amount or an accounting currency amount.</param>
    /// <returns>The <c>TmpCustVendTrans</c> buffer.</returns>
    [HookableAttribute]
    protected static TmpCustVendTrans populateLineCreditRemain(
        AmountMST   _creditLimitRemain,
        boolean     _showAmountAsTotal
        )
    {
        TmpCustVendTrans tmpCustVendTrans;

        tmpCustVendTrans.Txt = "@SYS94872";
        if (_showAmountAsTotal)
        {
            tmpCustVendTrans.TotalAmountMst = _creditLimitRemain;
        }
        else
        {
            tmpCustVendTrans.AmountMst      = _creditLimitRemain;
        }
        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLineOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>TmpCustVendTrans</c> buffer with a line ordered.
    /// </summary>
    /// <param name = "_ordered">The line ordered.</param>
    /// <param name = "_showAmountAsTotal">Whether remaining credit limit should be shown as a total accounting currency amount or an accounting currency amount.</param>
    /// <returns>The <c>TmpCustVendTrans</c> buffer.</returns>
    [HookableAttribute]
    protected static TmpCustVendTrans populateLineOrdered(
        AmountMST   _ordered,
        boolean     _showAmountAsTotal
        )
    {
        TmpCustVendTrans tmpCustVendTrans;

        tmpCustVendTrans.Txt = "@SYS16279";
        if (_showAmountAsTotal)
        {
            tmpCustVendTrans.TotalAmountMst = _ordered;
        }
        else
        {
            tmpCustVendTrans.AmountMst      = _ordered;
        }
        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLinePackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>TmpCustVendTrans</c> buffer with a line packing slip amount.
    /// </summary>
    /// <param name = "_packingSlip">The line packing slip amount.</param>
    /// <param name = "_showAmountAsTotal">Whether remaining credit limit should be shown as a total accounting currency amount or an accounting currency amount.</param>
    /// <returns>The <c>TmpCustVendTrans</c> buffer.</returns>
    [HookableAttribute]
    protected static TmpCustVendTrans populateLinePackingSlip(
        AmountMST   _packingSlip,
        boolean     _showAmountAsTotal
        )
    {
        TmpCustVendTrans tmpCustVendTrans;

        tmpCustVendTrans.Txt = "@SYS11549";
        if (_showAmountAsTotal)
        {
            tmpCustVendTrans.TotalAmountMst = _packingSlip;
        }
        else
        {
            tmpCustVendTrans.AmountMst      = _packingSlip;
        }
        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLineTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>TmpCustVendTrans</c> buffer with a line total, and adjusts its total accounting currency amount and accounting currency 
    /// amount to reflect the value provided.
    /// </summary>
    /// <param name = "_sumAmountMST">The new total accounting currency amount and accounting currency amount.</param>
    /// <returns>The <c>TmpCustVendTrans</c> buffer.</returns>
    [HookableAttribute]
    protected static TmpCustVendTrans populateLineTotal(AmountMST _sumAmountMST)
    {
        TmpCustVendTrans tmpCustVendTrans;

        tmpCustVendTrans.AmountMst      = _sumAmountMST;
        tmpCustVendTrans.TotalAmountMst = _sumAmountMST;
        tmpCustVendTrans.Txt            = "@SYS94871";

        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLineTotalReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>TmpCustVendTrans</c> buffer with a line total, and adjusts its reporting currency
    /// amount to reflect the value provided.
    /// </summary>
    /// <param name = "_sumAmountReportingCurrency">The new total reporting currency amount.</param>
    /// <returns>The <c>TmpCustVendTrans</c> buffer.</returns>
    [HookableAttribute]
    protected static TmpCustVendTrans populateLineTotalReportingCurrency(AmountMSTSecondary _sumAmountReportingCurrency)
    {
        TmpCustVendTrans tmpCustVendTrans;

        tmpCustVendTrans.ReportingCurrencyAmount = _sumAmountReportingCurrency;
        tmpCustVendTrans.Txt = "@AccountsPayable:ReportingCurrencyBalanceDescriptionValue";

        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxExternalInvoiceId_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the tax external invoice id.
    /// </summary>
    /// <returns>
    /// Tax external invoice id.
    /// </returns>
    public display TaxExternalMultiInvoiceId_CN displayTaxExternalInvoiceId_CN()
    {
        // <GCN>
        #Characters

        int externalInvoiceCount;
        TaxExternalMultiInvoiceId_CN taxExternalMultiInvoiceId;
        TaxIntgrExportDocumentOperationView_CN taxIntgrExportDocumentOperationView_CN;

        while select ExternalInvoiceId from taxIntgrExportDocumentOperationView_CN
            where taxIntgrExportDocumentOperationView_CN.InvoiceId == this.Invoice
        {
            if (taxIntgrExportDocumentOperationView_CN.ExternalInvoiceId)
            {
                if (externalInvoiceCount != 0)
                {
                    taxExternalMultiInvoiceId += #comma;
                }

                taxExternalMultiInvoiceId += taxIntgrExportDocumentOperationView_CN.ExternalInvoiceId;

                externalInvoiceCount += 1;
            }
        }

        externalInvoiceCount = 0;

        return taxExternalMultiInvoiceId;
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>custCalcSalesTotals</Name>
				<Source><![CDATA[
    static container custCalcSalesTotals(CustAccount          _custAccount,
                                         CurrencyCode         _currencyCode,
                                         AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = 0
                                         )
    {
        CustCreditLimit custCreditLimit;
        SalesTotals     salesTotals;
        SalesTable      salesTable;
        // <GEERU>
        SalesTable_RU   salesTableRU;
        // </GEERU>
        AmountMST       mcrCreditCardBalance = 0;

        salesTable.CustAccount  = _custAccount;
        salesTable.initFromCustTable();

        // <GEERU>
        salesTableRU.AgreementHeaderExt_RU = _agreementHeaderExtRecId;
        salesTable.packSalesTable_RU(salesTableRU);
        // </GEERU>

        salesTotals = SalesTotals::construct(salesTable);

        // <GEERU>
        salesTotals.parmCheckAgreementLimit_RU(_agreementHeaderExtRecId != 0);
        // </GEERU>

        salesTotals.calc();

        custCreditLimit = CustCreditLimit::construct(salesTable);

        // <GEERU>
        custCreditLimit.parmCheckAgreementLimit_RU(_agreementHeaderExtRecId != 0);
        // </GEERU>

        //Return credit card balance as well.
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrCreditCardBalance = custCreditLimit.MCRBalanceCreditCard();
        }
        return [salesTotals.displayFieldsCurrency(_currencyCode)]   +
               [custCreditLimit.balanceEstimate()]                  +
               [custCreditLimit.useEstimated()]   +
               [mcrCreditCardBalance];
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransBalanceCurrency</Name>
				<Source><![CDATA[
    static TmpCustVendTrans custTransBalanceCurrency(
        CustAccount         _accountNum,
        boolean             _addTotalAndCredit      = false,
        CurrencyCode        _currencyCode           = '',
        BankLCBankDocument  _bankLCBankDocument     = BankLCBankDocumentType::All)
    {
        TmpCustVendTrans    tmpCustVendTrans = null;
        CustTrans           custTrans;
        CustTransOpen       custTransOpen;
        BankLCCustTrans     bankLCCustTrans;

        AmountMST           sumAmountMST;
        AmountMST           creditRemain;
        AmountMST           creditLimit;

        container           displayFields;
        AmountMST           balanceEstimate;
        AmountMST           balanceCreditCard;
        boolean             useEstimated;
        AmountMSTSecondary  sumReportingCurrencyAmount;

        sumAmountMST        = 0;
        creditRemain        = 0;
       
        QueryRun queryRun = new QueryRun(TmpCustVendTrans::getCustTransForCurrencyCodeAndDoumentTypeQuery(_accountNum, _bankLCBankDocument));
        while (queryRun.next())
        {
            custTrans  = queryRun.get(tableNum(custTrans));
            custTransOpen  = queryRun.get(tableNum(custTransOpen));
            
            tmpCustVendTrans = TmpCustVendTrans::insertTmpCustVendTransForCustBalance(
                tmpCustVendTrans,
                _accountNum,
                custTrans,
                custTransOpen);

            sumAmountMST += tmpCustVendTrans.AmountMst;
            sumReportingCurrencyAmount += tmpCustVendTrans.ReportingCurrencyAmount;
        }

        if (_addTotalAndCredit)
        {
            tmpCustVendTrans.data(TmpCustVendTrans::populateLineTotal(sumAmountMST));
            tmpCustVendTrans.insert();

            tmpCustVendTrans.data(TmpCustVendTrans::populateLineTotalReportingCurrency(sumReportingCurrencyAmount));
            tmpCustVendTrans.insert();

            // Add line with packing slip or orderd amount
            if  (CustParameters::find().CreditMaxCheck != TypeOfCreditmaxCheck::None)
            {
                //Return back the credit card balance.
                [displayFields, balanceEstimate, useEstimated, balanceCreditCard] = TmpCustVendTrans::custCalcSalesTotals(_accountNum, _currencyCode);

                TmpCustVendTrans::insertTmpCustVendTransBasedOnTypeOfCreditmaxCheck(tmpCustVendTrans, balanceEstimate, useEstimated);

                creditLimit = conpeek(displayFields, TradeTotals::posCreditMax());

                creditRemain -= TmpCustVendTrans::getAmountToDecreaseCreditRemaining(balanceEstimate, useEstimated);
    
                //Display any unposted credit card amount
                if (useEstimated && balanceCreditCard
                    && isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
                {
                    tmpCustVendTrans.data(TmpCustVendTrans::MCRCreateLineCreditCard(-balanceCreditCard, false));
                    tmpCustVendTrans.insert();
                    //Add the credit card unposted back to the balance.
                    creditRemain += balanceCreditCard;
                }

                creditRemain = TmpCustVendTrans::calculateRemainingCredit(displayFields, creditRemain, creditLimit);

                tmpCustVendTrans.data(TmpCustVendTrans::populateLineCreditLimit(creditLimit, false));
                tmpCustVendTrans.insert();

                tmpCustVendTrans.data(TmpCustVendTrans::populateLineCreditRemain(creditRemain, false));
                tmpCustVendTrans.insert();
            }
        }
        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRemainingCredit</Name>
				<Source><![CDATA[
    protected static AmountMST calculateRemainingCredit(
        container _displayFields,
        AmountMST _creditRemain,
        AmountMST _creditLimit)
    {

        if (_creditLimit)
        {
            _creditRemain += conpeek(_displayFields, TradeTotals::posFreeValue());
        }
        else
        {
            _creditRemain = 0;
        }

        return _creditRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpCustVendTransBasedOnTypeOfCreditmaxCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates and inserts the given <c>TmpCustVendTrans</c> table buffer based on the <c>TypeOfCreditmaxCheck</c> from the <c>CustParameters</c> table.
    /// </summary>
    /// <param name = "_tmpCustVendTrans">The <c>TmpCustVendTrans</c> table buffer to be inserted.</param>
    /// <param name = "_balanceEstimate">The balance amount for the current customer.</param>
    /// <param name = "_useEstimated">Indicates whether or not to use the estimated balance or not when deciding to insert the record or not.</param>
    public static void insertTmpCustVendTransBasedOnTypeOfCreditmaxCheck(TmpCustVendTrans _tmpCustVendTrans, AmountMST _balanceEstimate, boolean _useEstimated)
    {
        switch (CustParameters::find().CreditMaxCheck)
        {
            case TypeOfCreditmaxCheck::BalanceDelivered:
                if (_useEstimated)
                {
                    _tmpCustVendTrans.data(TmpCustVendTrans::populateLinePackingSlip(_balanceEstimate, false));
                    _tmpCustVendTrans.insert();
                }
                break;

            case TypeOfCreditmaxCheck::BalanceAll:
                if (_useEstimated)
                {
                    _tmpCustVendTrans.data(TmpCustVendTrans::populateLineOrdered(_balanceEstimate, false));
                    _tmpCustVendTrans.insert();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToDecreaseCreditRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount that should decrease the credit remaining amount based on the <c>TypeOfCreditmaxCheck</c> from the <c>CustParameters</c> table.
    /// </summary>
    /// <param name = "_balanceEstimate">The balance amount for the current customer.</param>
    /// <param name = "_useEstimated">Indicates whether or not to use the estimated balance or not when determining the amount to decrease the credit remaining amount.</param>
    /// <returns>The amount by which the credit remaining amount should be decreased.</returns>
    public static AmountMST getAmountToDecreaseCreditRemaining(AmountMST _balanceEstimate, boolean _useEstimated)
    {
        AmountMST amountToDecreaseCreditRemain;

        switch (CustParameters::find().CreditMaxCheck)
        {
            case TypeOfCreditmaxCheck::BalanceDelivered:
            case TypeOfCreditmaxCheck::BalanceAll:
                if (_useEstimated)
                {
                    amountToDecreaseCreditRemain = _balanceEstimate;
                }
                break;
        }

        return amountToDecreaseCreditRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBalanceEstimateFromTypeOfCreditmaxCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the estimated balance amount for the given <c>VendAccount</c> based on the <c>TypeOfCreditmaxCheck</c> from the <c>CustParameters</c> table.
    /// </summary>
    /// <param name = "_accountNum">The current vendor account.</param>
    /// <returns>The estimated balance amount.</returns>
    public static AmountMST determineBalanceEstimateFromTypeOfCreditmaxCheck(VendAccount _accountNum)
    {
        AmountMST balanceEstimate;

        switch (VendParameters::find().CreditMaxCheck)
        {
            case TypeOfCreditmaxCheck::BalanceDelivered:
                balanceEstimate = PurchTable::balanceAmountDelivered(_accountNum);
                break;

            case TypeOfCreditmaxCheck::BalanceAll:
                balanceEstimate = PurchTable::balanceAmountNotInvoiced(_accountNum);
                break;
        }

        return balanceEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpCustVendTransForCustBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates and inserts a new <c>TmpCustVendTrans</c> buffer with the values provided.
    /// </summary>
    /// <param name = "_tmpCustVendTrans">The <c>TmpCustVendTrans</c> that will be inserted with the information provided.</param>
    /// <param name = "_accountNum">The Account Number.</param>
    /// <param name = "_custTrans">The <c>CustTrans</c> element to be used with the <c>TmpCustVendTrans</c> buffer.</param>
    /// <param name = "_custTransOpen">The <c>CustTransOpen</c> element to buffer be used with the <c>TmpCustVendTrans</c> buffer.</param>
    /// <returns>The <c>TmpCustVendTrans</c> element that was inserted with the new data.</returns>
    [HookableAttribute]
    protected static TmpCustVendTrans insertTmpCustVendTransForCustBalance(
        TmpCustVendTrans _tmpCustVendTrans,
        CustAccount     _accountNum,
        CustTrans       _custTrans,
        CustTransOpen   _custTransOpen)
    {       
        TmpCustVendTrans::populateTmpCustVendTransForCustBalance(_tmpCustVendTrans, _accountNum, _custTrans, _custTransOpen);
        _tmpCustVendTrans.insert();

        return _tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpCustVendTransForCustBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>TmpCustVendTrans</c> buffer with the provided data which is summarized based on <c>getCustTransForCurrencyCodeAndDoumentTypeQuery</c>.
    /// </summary>
    /// <param name = "_tmpCustVendTrans">Buffer element to be populated.</param>
    /// <param name = "_accountNum">The Account Number to be inserted in the buffer.</param>
    /// <param name = "_custTrans"><c>CustTrans</c> element to be used.</param>
    /// <param name = "_custTransOpen"><c>CustTransOpen</c> element to be used.</param>
    [HookableAttribute]
    protected static void populateTmpCustVendTransForCustBalance(
        TmpCustVendTrans _tmpCustVendTrans,
        CustAccount     _accountNum,
        CustTrans       _custTrans,
        CustTransOpen   _custTransOpen)
    {
        _tmpCustVendTrans.CurrencyCode   = _custTrans.CurrencyCode;
        _tmpCustVendTrans.AmountCur      = _custTransOpen.AmountCur;
        container exchAdjustments        = TmpCustVendTrans::findExchAdjustmentsFromCustTransForAccountNum(_accountNum, _custTrans.CurrencyCode);
        _tmpCustVendTrans.AmountMst      = TmpCustVendTrans::calculateAmountMstForTmpCustVendTrans(_custTransOpen.AmountMST, _custTransOpen.ExchAdjUnrealized, conPeek(exchAdjustments, 1));
        _tmpCustVendTrans.ReportingCurrencyAmount = TmpCustVendTrans::calculateReportingCurrencyAmountForTmpCustVendTrans(_custTransOpen.ReportingCurrencyAmount,
                                                                                                                          _custTransOpen.ExchAdjUnrealizedReporting,
                                                                                                                          conPeek(exchAdjustments, 2));
        _tmpCustVendTrans.TotalAmountMst = _tmpCustVendTrans.AmountMst;
        _tmpCustVendTrans.Txt            = "@SYS77886";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExchAdjustmentsFromCustTransForAccountNum</Name>
				<Source><![CDATA[
    protected static container findExchAdjustmentsFromCustTransForAccountNum(CustAccount _accountNum, CurrencyCode _currencyCode)
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        select sum(CustExchAdjustmentUnrealized), sum(ReportingExchAdjustmentUnrealized) from custTrans
                where custTrans.CurrencyCode == _currencyCode && custTrans.AccountNum == _accountNum
            exists join RefRecId from custTransOpen
                where custTrans.RecId == custTransOpen.RefRecId;
        return [custTrans.CustExchAdjustmentUnrealized, custTrans.ReportingExchAdjustmentUnrealized];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpCustVendTransForVendBalance</Name>
				<Source><![CDATA[
    protected static TmpCustVendTrans insertTmpCustVendTransForVendBalance(
        TmpCustVendTrans _tmpCustVendTrans,
        VendAccount _accountNum,
        VendTrans _vendTrans,
        VendTransOpen _vendTransOpen)
    {
        _tmpCustVendTrans.CurrencyCode = _vendTrans.CurrencyCode;
        _tmpCustVendTrans.AmountCur = _vendTransOpen.AmountCur;
        container exchAdjustments = TmpCustVendTrans::findExchAdjustmentsFromVendTransForAccountNum(_accountNum, _vendTrans.CurrencyCode);

        _tmpCustVendTrans.AmountMst = TmpCustVendTrans::calculateAmountMstForTmpCustVendTrans(
            _vendTransOpen.AmountMST,
            _vendTransOpen.ExchAdjUnrealized,
            conPeek(exchAdjustments, 1));

        _tmpCustVendTrans.ReportingCurrencyAmount = TmpCustVendTrans::calculateReportingCurrencyAmountForTmpCustVendTrans(
            _vendTransOpen.ReportingCurrencyAmount,
            _vendTransOpen.ExchAdjUnrealizedReporting,
            conPeek(exchAdjustments, 2));

        _tmpCustVendTrans.Txt = "@SYS77886";
        _tmpCustVendTrans.insert();

        return _tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExchAdjustmentsFromVendTransForAccountNum</Name>
				<Source><![CDATA[
    private static container findExchAdjustmentsFromVendTransForAccountNum(VendAccount _accountNum, CurrencyCode _currencyCode)
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        select sum(VendExchAdjustmentUnrealized), sum(ReportingExchAdjustmentUnrealized) from vendTrans
                where vendTrans.CurrencyCode == _currencyCode && vendTrans.AccountNum == _accountNum
            exists join RefRecId from vendTransOpen
                where vendTrans.RecId == vendTransOpen.RefRecId;
        return [vendTrans.VendExchAdjustmentUnrealized, vendTrans.ReportingExchAdjustmentUnrealized];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountMstForTmpCustVendTrans</Name>
				<Source><![CDATA[
    protected static AmountMST calculateAmountMstForTmpCustVendTrans(AmountMSTDebCred _custVendTransOpenAmountMST,
                                                                   AmountMSTDebCred _custVendTransOpenExchAdjUnrealized,
                                                                   AmountMSTExchAdjustment _custVendTransExchAdjustmentUnrealized)
    {
        return _custVendTransOpenAmountMST - (_custVendTransOpenExchAdjUnrealized - _custVendTransExchAdjustmentUnrealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportingCurrencyAmountForTmpCustVendTrans</Name>
				<Source><![CDATA[
    private static AmountMSTSecondary calculateReportingCurrencyAmountForTmpCustVendTrans(AmountMSTSecondary _custVendTransOpenReportingCurrencyAmount,
                                                                                          AmountMSTExchAdjustment _custVendTransOpenExchAdjUnrealizedReporting,
                                                                                          AmountMSTExchAdjustment _custVendTransReportingExchAdjustmentUnrealized)
    {
        return _custVendTransOpenReportingCurrencyAmount - (_custVendTransOpenExchAdjUnrealizedReporting - _custVendTransReportingExchAdjustmentUnrealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRCreateLineCreditCard</Name>
				<Source><![CDATA[
    private static TmpCustVendTrans MCRCreateLineCreditCard(AmountMST    _creditCard,
                                                           boolean      _showAmountAsTotal)
    {
        TmpCustVendTrans tmpCustVendTrans;

        tmpCustVendTrans.Txt = "@MCR20754";
        if (_showAmountAsTotal)
        {
            tmpCustVendTrans.TotalAmountMst = _creditCard;
        }
        else
        {
            tmpCustVendTrans.AmountMst      = _creditCard;
        }
        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCalcSalesTotals</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    static container vendCalcSalesTotals(CustAccount                _vendAccount,
                                         AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = 0
                                         )
    {
        VendTable       vendTable;
        PurchTotals     purchTotals;
        PurchTable      purchTable;
        // <GEERU>
        PurchTable_RU   purchTable_RU;
        // </GEERU>

        vendTable = VendTable::find(_vendAccount);
        purchTable.initFromVendTable(vendTable);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTable_RU = purchTable.purchTable_RU();
            purchTable_RU.AgreementHeaderExt_RU = _agreementHeaderExtRecId;
            purchTable.packPurchTable_RU(purchTable_RU);
        }
        // </GEERU>

        purchTotals = PurchTotals::newPurchTable(purchTable, PurchUpdate::All);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            purchTotals.parmCheckAgreementLimit_RU(_agreementHeaderExtRecId != 0);
        }
        // </GEERU>

        purchTotals.calc();

        return [purchTotals.displayFields()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTransBalanceCurrency</Name>
				<Source><![CDATA[
    static TmpCustVendTrans vendTransBalanceCurrency(
        VendAccount         _accountNum,
        boolean             _addTotalAndCredit  = false,
        BankLCBankDocument  _bankLCBankDocument = BankLCBankDocumentType::All)
    {
        TmpCustVendTrans    tmpCustVendTrans = null;
        VendTrans           vendTrans;
        VendTransOpen       vendTransOpen;
        BankLCVendTrans     bankLCVendTrans;

        container           displayFields;
        AmountMST           sumAmountMST;
        AmountMST           balanceEstimate;
        AmountMST           creditRemain;
        AmountMST           creditLimit;
        AmountMSTSecondary  sumAmountReportingCurrency;

        sumAmountMST        = 0;
        creditRemain        = 0;
        sumAmountReportingCurrency = 0;

        QueryRun queryRun = new QueryRun(TmpCustVendTrans::getVendTransForCurrencyCodeAndDoumentTypeQuery(_accountNum, _bankLCBankDocument));
        while (queryRun.next())
        {
            vendTrans  = queryRun.get(tableNum(VendTrans));
            vendTransOpen  = queryRun.get(tableNum(VendTransOpen));
            
            tmpCustVendTrans = TmpCustVendTrans::insertTmpCustVendTransForVendBalance(
                    tmpCustVendTrans,
                    _accountNum,
                    vendTrans,
                    vendTransOpen);

            sumAmountMST += tmpCustVendTrans.AmountMst;
            sumAmountReportingCurrency += tmpCustVendTrans.ReportingCurrencyAmount;
        }

        if (_addTotalAndCredit)
        {
            tmpCustVendTrans.data(TmpCustVendTrans::populateLineTotal(sumAmountMST));
            tmpCustVendTrans.insert();

            tmpCustVendTrans.data(TmpCustVendTrans::populateLineTotalReportingCurrency(sumAmountReportingCurrency));
            tmpCustVendTrans.insert();

            // Add line with packing slip or orderd amount
            if  (VendParameters::find().CreditMaxCheck != TypeOfCreditmaxCheck::None)
            {
                [displayFields] = TmpCustVendTrans::vendCalcSalesTotals(_accountNum);

                balanceEstimate = TmpCustVendTrans::determineBalanceEstimateFromTypeOfCreditmaxCheck(_accountNum);

                TmpCustVendTrans::insertTmpCustVendTransBasedOnTypeOfCreditmaxCheck(tmpCustVendTrans, balanceEstimate, true);
                creditRemain -= TmpCustVendTrans::getAmountToDecreaseCreditRemaining(balanceEstimate, true);
                
                creditLimit = conPeek(displayFields, PurchTotals::posCreditMax());

                if (creditLimit)
                {
                    creditRemain += conPeek(displayFields, PurchTotals::posFreeValue());
                }
                else
                {
                    creditRemain = 0;
                }

                tmpCustVendTrans.data(TmpCustVendTrans::populateLineCreditLimit(creditLimit, false));
                tmpCustVendTrans.insert();

                tmpCustVendTrans.data(TmpCustVendTrans::populateLineCreditRemain(creditRemain, false));
                tmpCustVendTrans.insert();
            }
        }

        return tmpCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransForCurrencyCodeAndDoumentTypeQuery</Name>
				<Source><![CDATA[
    protected static Query getCustTransForCurrencyCodeAndDoumentTypeQuery(CustAccount _accountNum, BankLCBankDocument  _bankLCBankDocument = BankLCBankDocumentType::All)
    {
        Query query = new Query(queryStr(TmpCustTransAmountForCurrencyCodeQuery));
        QueryBuildDataSource qbdsCustTrans, qbdsBankLCCustTrans;

        qbdsCustTrans = query.dataSourceTable(tableNum(CustTrans));

        qbdsCustTrans.addRange(fieldNum(CustTrans, AccountNum)).value(_accountNum);

        if (_bankLCBankDocument != BankLCBankDocumentType::All)
        {
            qbdsBankLCCustTrans = qbdsCustTrans.addDataSource(tableNum(BankLCCustTrans));
            qbdsBankLCCustTrans.addRange(fieldNum(BankLCCustTrans, BankDocumentType)).value(enum2Str(_bankLCBankDocument));
            qbdsBankLCCustTrans.joinMode(JoinMode::ExistsJoin);
            qbdsBankLCCustTrans.addLink(fieldNum(CustTrans, BankLCExportLine), fieldNum(BankLCCustTrans, BankLCExportLine));
        }

        return query; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransForCurrencyCodeAndDoumentTypeQuery</Name>
				<Source><![CDATA[
    protected static Query getVendTransForCurrencyCodeAndDoumentTypeQuery(VendAccount _accountNum, BankLCBankDocument  _bankLCBankDocument = BankLCBankDocumentType::All)
    {
        Query query = new Query(queryStr(TmpVendTransAmountForCurrencyCodeQuery));
        QueryBuildDataSource qbdsVendTrans, qbdsBankLCVendTrans;

        qbdsVendTrans = query.dataSourceTable(tableNum(VendTrans));

        qbdsVendTrans.addRange(fieldNum(VendTrans, AccountNum)).value(_accountNum);

        if (_bankLCBankDocument != BankLCBankDocumentType::All)
        {
            qbdsBankLCVendTrans = qbdsVendTrans.addDataSource(tableNum(BankLCVendTrans));
            qbdsBankLCVendTrans.addRange(fieldNum(BankLCVendTrans, BankDocumentType)).value(enum2Str(_bankLCBankDocument));
            qbdsBankLCVendTrans.joinMode(JoinMode::ExistsJoin);
            qbdsBankLCVendTrans.addLink(fieldNum(VendTrans, BankLCImportLine), fieldNum(BankLCVendTrans, BankLCImportLine));
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS1084</Label>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMst</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS53072</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Due</Name>
			<Label>@SYS14021</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NegotiableInstrument</Name>
			<Label>@SYS71438</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NegInstId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankRemittanceFileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustOverview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Invoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTaxExternalInvoiceId_CN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstSeqNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NegInstStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDiscNoticeDeadline</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BankDiscNoticeDeadline</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDiscNoticeDeadline</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankRemittanceFileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankRemittanceFileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscdate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS10499</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Invoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NegInstId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNegInstId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NegInstSeqNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNegInstSeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NegInstStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustVendNegInstStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalAmountMst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS9242</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMSTSecondary</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Company</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>Company</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>