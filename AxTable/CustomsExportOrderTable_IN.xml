<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsExportOrderTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsExportOrderTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertCustomsExportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts <c> CustomsExportOrderLine_IN </c> table record from specified CustInvoiceTrans records.
    /// </summary>
    public void insertCustomsExportLine()
    {
        CustomsExportOrderLine_IN customsExportOrderLineLoc;
        CustInvoiceTrans          custInvoiceTransLoc;

        delete_from customsExportOrderLineLoc
                    where   customsExportOrderLineLoc.InvoiceDate   == this.InvoiceDate &&
                            customsExportOrderLineLoc.InvoiceId     == this.InvoiceId   &&
                            customsExportOrderLineLoc.SalesId       == this.SalesId;

        while select custInvoiceTransLoc
            where custInvoiceTransLoc.InvoiceId           == this.InvoiceId
               && custInvoiceTransLoc.SalesId             == this.SalesId
               && custInvoiceTransLoc.NumberSequenceGroup == SalesTable::find(this.SalesId).NumberSequenceGroup
        {
            this.insertCustomsExportOrderLineLoc(custInvoiceTransLoc.lineAmountInclTax(),
                                                 MarkupTrans::findCustomsValue_IN(custInvoiceTransLoc.TableId, custInvoiceTransLoc.RecId),
                                                 custInvoiceTransLoc.SalesPrice,
                                                 custInvoiceTransLoc.Qty,
                                                 custInvoiceTransLoc.SalesId,
                                                 custInvoiceTransLoc.ItemId,
                                                 custInvoiceTransLoc.InvoiceId,
                                                 custInvoiceTransLoc.InvoiceDate,
                                                 custInvoiceTransLoc.InventTransId,
                                                 custInvoiceTransLoc.RecId,
                                                 custInvoiceTransLoc.LineDisc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustomsExportLine_Proj</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts <c> CustomsExportOrderLIne_IN </c> table records from specified ProjItemTrans,ProjInvoiceJour record.
    /// </summary>
    public void insertCustomsExportLine_Proj()
    {
        CustomsExportOrderLine_IN   customsExportOrderLineLoc;
        ProjItemTrans               projItemTransLoc;
        ProjProposalItem            projProposalItemLoc;
        ProjInvoiceJour             projInvoiceJourLoc;

        delete_from customsExportOrderLineLoc
                    where   customsExportOrderLineLoc.InvoiceDate   == this.InvoiceDate &&
                            customsExportOrderLineLoc.InvoiceId     == this.InvoiceId   &&
                            customsExportOrderLineLoc.SalesId       == this.SalesId;

        while select ProjTransId, TransactionOrigin, ItemId, InventTransId, RecId from projItemTransLoc
            join ProjTransId, ProposalId from projProposalItemLoc
            join ProposalId, ProjInvoiceId, InvoiceDate from projInvoiceJourLoc
            where projItemTransLoc.ProjTransId == projProposalItemLoc.ProjTransId
               && (projItemTransLoc.TransactionOrigin == ProjOrigin::ItemRequirement
               ||  projItemTransLoc.TransactionOrigin == ProjOrigin::SalesOrder)
               && projProposalItemLoc.ProposalId == projInvoiceJourLoc.ProposalId
               && projInvoiceJourLoc.ProjInvoiceId == this.InvoiceId
        {
            this.insertCustomsExportOrderLineLoc(projItemTransLoc.lineAmount(),
                                                 MarkupTrans::findCustomsValue_IN(projItemTransLoc.TableId, projItemTransLoc.RecId),
                                                 projItemTransLoc.salesPrice(),
                                                 projItemTransLoc.Qty,
                                                 this.SalesId,
                                                 projItemTransLoc.ItemId,
                                                 projInvoiceJourLoc.ProjInvoiceId,
                                                 projInvoiceJourLoc.InvoiceDate,
                                                 projItemTransLoc.InventTransId,
                                                 projItemTransLoc.RecId,
                                                 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustomsExportOrderLineLoc</Name>
				<Source><![CDATA[
        // <summary>
    ///  inserts CustomsExportOrderLIne_IN table records from specified CustInvoiceTrans records and ProjItemTrans,ProjInvoiceJour records.
    /// </summary>
    /// </summary>
    /// <param name="_lineAmount">
    /// <c> _lineAmount </c> as a param.
    /// </param>
    /// <param name="_value">
    /// <c> _value </c> as a param.
    /// </param>
    /// <param name="_exportPrice">
    /// <c> _exportPrice </c> as a param.
    /// </param>
    /// <param name="_exportQty">
    /// <c> _exportQty </c> as a param.
    /// </param>
    /// <param name="_salesId">
    /// <c> _salesId </c> as a param.
    /// </param>
    /// <param name="_itemId">
    /// <c> _itemId </c> as a param.
    /// </param>
    /// <param name="_invoiceId">
    /// <c> _invoiceId </c> as a param.
    /// </param>
    /// <param name="_invoiceDate">
    /// <c> _invoiceDate </c> as a param.
    /// </param>
    /// <param name="_inventTransId">
    /// <c> _inventTransId </c> as a param.
    /// </param>
    /// <param name="_RecId">
    /// <c> _RecId </c> as a param.
    /// </param>
    /// <param name="_lineDisc">
    /// <c> _lineDisc </c> as a param.
    /// </param>
    private void insertCustomsExportOrderLineLoc(SalesLineAmount _lineAmount, MarkupValue _value, SalesPrice _exportPrice,
                                                SalesOrderedQty _exportQty, SalesIdBase _salesId, ItemId _itemId, ExportInvoiceId_IN _invoiceId,
                                                CustomsDate_IN _invoiceDate, InventTransId _inventTransId, RefRecId _recId,
                                                SalesLineDisc _lineDisc)
    {
            CustomsExportOrderLine_IN   customsExportOrderLineLocal;

            ttsbegin;
            customsExportOrderLineLocal.LineAmount            = _lineAmount;
            customsExportOrderLineLocal.Value                 = _value;
            customsExportOrderLineLocal.ExportPrice           = _exportPrice;
            customsExportOrderLineLocal.ExportQty             = _exportQty;
            customsExportOrderLineLocal.SalesId               = _salesId;
            customsExportOrderLineLocal.ItemId                = _itemId;
            customsExportOrderLineLocal.InvoiceId             = _invoiceId;
            customsExportOrderLineLocal.InvoiceDate           = _invoiceDate;
            customsExportOrderLineLocal.InventTransId         = _inventTransId;
            customsExportOrderLineLocal.CustInvoiceTransRecId = _recId;
            customsExportOrderLineLocal.LineDisc              = _lineDisc;
            customsExportOrderLineLocal.insert();
            this.insertIntoMarkupTrans(customsExportOrderLineLocal);
            ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustomsExportTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts <c> CustomsExportOrderTable_IN </c> table record from specified CustInvoiceJour record.
    /// </summary>
    public void insertCustomsExportTable()
    {
        CustInvoiceTrans            custInvoiceTrans;
        CustInvoiceJour             custInvoiceJour;

        select firstonly InvoiceId, SalesId, NumberSequenceGroup, InvoiceDate from custInvoiceTrans
            where custInvoiceTrans.InvoiceId            == this.InvoiceId &&
                  custInvoiceTrans.SalesId              == this.SalesId   &&
                  custInvoiceTrans.NumberSequenceGroup  == SalesTable::find(this.SalesId).NumberSequenceGroup;

        this.InvoiceDate    = custInvoiceTrans.InvoiceDate;

        custInvoiceJour     = CustInvoiceJour::findFromCustInvoiceTrans(custInvoiceTrans.SalesId,
                                                                        custInvoiceTrans.InvoiceId,
                                                                        custInvoiceTrans.InvoiceDate,
                                                                        custInvoiceTrans.NumberSequenceGroup);

        this.LedgerVoucher  = custInvoiceJour.LedgerVoucher;
        this.InvoiceAmount  = custInvoiceJour.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustomsExportTable_Proj</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts <c> CustomsExportOrderTable_IN </c> table record from specified ProjInvoiceJour record.
    /// </summary>
    public void insertCustomsExportTable_Proj()
    {
        ProjInvoiceJour projInvoiceJour;

        ttsbegin;

        select ProjInvoiceId, InvoiceDate, LedgerVoucher, InvoiceAmount from projInvoiceJour
            where projInvoiceJour.ProjInvoiceId == this.InvoiceId;

        this.InvoiceDate    = projInvoiceJour.InvoiceDate;
        this.LedgerVoucher  = projInvoiceJour.LedgerVoucher;
        this.InvoiceAmount  = projInvoiceJour.InvoiceAmount;
        this.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts MarkUpTrans records from Specified CustomsExportOrderLine_IN table record.
    /// </summary>
    /// <param name="_customsExportOrderLine">
    /// The CustomsExportOrderLine_IN record for updating markupTrans.
    /// </param>
    public void insertIntoMarkupTrans(CustomsExportOrderLine_IN   _customsExportOrderLine)
    {
        MarkupTrans markUpTransLoc;
        MarkupTrans markupTrans;
        SalesLine   salesLine;

        if (_customsExportOrderLine.RecId)
        {
            salesLine = SalesLine::findInventTransId(_customsExportOrderLine.InventTransId);
            delete_from markUpTransLoc
                where   markUpTransLoc.TransTableId == _customsExportOrderLine.TableId &&
                        markUpTransLoc.TransRecId   == _customsExportOrderLine.RecId;

            while select markUpTransLoc
                where   markUpTransLoc.TransTableId == tablenum(CustInvoiceTrans) &&
                        markUpTransLoc.TransRecId   == _customsExportOrderLine.CustInvoiceTransRecId
            {
                markupTrans = markUpTransLoc.data();
                markupTrans.TransTableId    = _customsExportOrderLine.TableId;
                markupTrans.TransRecId      = _customsExportOrderLine.RecId;
                markupTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifys field.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c> field id </c>.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        CustomsExportOrderLine_IN  customsExportOrderLine;
        SalesTable                 salesTableLoc;

        super(_fieldId);
        switch (_fieldId)
        {
            case fieldnum(CustomsExportOrderTable_IN, SalesId):
                //Blank out the field on selection.
                this.InvoiceId = '';
                this.LedgerVoucher  = '';
                this.InvoiceAmount  = 0;
                this.CurrencyCode    = SalesTable::find(this.SalesId).CurrencyCode;
                break;

            case fieldnum(CustomsExportOrderTable_IN, InvoiceId):

                select firstonly RecId from customsExportOrderLine
                    where customsExportOrderLine.SalesId   == this.SalesId
                       && customsExportOrderLine.InvoiceId == this.InvoiceId;

                salesTableLoc = SalesTable::find(this.SalesId);

                if (!customsExportOrderLine.RecId)
                {
                    // Check the SalesType and Document status to create the records from Project ItemReq & SalesOrder into CustomsExportOrderTable_IN & CustomsExportOrderLine_IN.
                    if ((salesTableLoc.SalesType == SalesType::ItemReq                      &&
                        (salesTableLoc.DocumentStatus == DocumentStatus::ProjectPackingSlip ||
                         salesTableLoc.DocumentStatus == DocumentStatus::Invoice            ||
                         salesTableLoc.DocumentStatus == DocumentStatus::ShippingBill_IN))  ||
                        (salesTableLoc.SalesType == SalesType::Sales                        &&
                         salesTableLoc.ProjId                                               &&
                        (salesTableLoc.DocumentStatus == DocumentStatus::ProjectInvoice     ||
                         salesTableLoc.DocumentStatus == DocumentStatus::ShippingBill_IN)))
                    {
                            this.insertCustomsExportTable_Proj();
                            this.insertCustomsExportLine_Proj();
                    }
                    else if (salesTableLoc.DocumentStatus == DocumentStatus::Invoice ||
                             salesTableLoc.DocumentStatus == DocumentStatus::ShippingBill_IN)
                    {
                            this.insertCustomsExportTable();
                            this.insertCustomsExportLine();
                    }
                }
                break;

            default: break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!CustomsShippingBillTrans_IN::checkShippingBillNotDone(this.SalesId, this.InvoiceId))
            {
                ret = checkFailed(strfmt("@SYS75284", tablepname(CustomsShippingBillTrans_IN)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean             ret;
        SalesTable          salesTableLoc;
        SalesLine           salesLineLoc;
        ProjInvoiceJour     projInvoiceJour;
        ProjProposalItem    projProposalItem;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(CustomsExportOrderTable_IN, SalesId) :
                    if (this.SalesId)
                    {
                        if (!SalesTable::checkCustomsExportOrder_IN(this.SalesId))
                        {
                            ret = checkFailed(strfmt("@GLS5772",this.SalesId));
                        }
                    }
                    break;
                case fieldnum(CustomsExportOrderTable_IN, InvoiceId) :
                    if (this.SalesId)
                    {
                        salesTableLoc = SalesTable::find(this.SalesId);

                        // Check the SalesType and Document status to validates the invoiceid from Project ItemReq & SalesOrders.
                        if (salesTableLoc.SalesType == SalesType::ItemReq &&
                            salesTableLoc.ProjId                          &&
                           (salesTableLoc.DocumentStatus == DocumentStatus::ProjectPackingSlip ||
                            salesTableLoc.DocumentStatus == DocumentStatus::ProjectInvoice     ||
                            salesTableLoc.DocumentStatus == DocumentStatus::Invoice            ||
                            salesTableLoc.DocumentStatus == DocumentStatus::ShippingBill_IN))
                        {
                            select RecId from projInvoiceJour
                                exists join  ProposalId, ProjTransId from projProposalItem
                                exists join ProjTransId, SalesId from salesLineLoc
                                where projInvoiceJour.ProjInvoiceId == this.InvoiceId
                                   && projProposalItem.ProposalId   == projInvoiceJour.ProposalId
                                   && salesLineLoc.ProjTransId      == projProposalItem.ProjTransId
                                   && salesLineLoc.SalesId          == this.SalesId;
                            if (!projInvoiceJour.RecId)
                            {
                                ret = checkFailed(strfmt("@GLS5749",this.InvoiceId));
                            }
                        }
                        else if (salesTableLoc.DocumentStatus == DocumentStatus::ShippingBill_IN ||
                                 salesTableLoc.DocumentStatus == DocumentStatus::Invoice)
                        {
                            if (!CustInvoiceJour::checkExportInvoiceId_IN(this.SalesId, this.InvoiceId))
                            {
                                ret = checkFailed(strfmt("@GLS5749",this.InvoiceId));
                            }
                        }
                    }
                    break;
                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if CustomsExportOrderTable_IN table record exists for specified SalesId.
    /// </summary>
    /// <param name="_salesId">
    /// The SalesId of salesOrder selected for ExportOrder.
    /// </param>
    /// <returns>
    /// true if CustomsExportOrderTable_IN table record is found otherwise, false
    /// </returns>
    public static boolean existSalesId(SalesIdBase _salesId)
    {
        return _salesId && (select customsExportOrderTable_IN
                            where customsExportOrderTable_IN.SalesId == _salesId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if SalesParmLine record exists for specified ParmId and TableRefId.
    /// </summary>
    /// <param name="_parmId">
    /// The parmId of SalesParmLine record.
    /// </param>
    /// <param name="_tableRefId">
    /// The recordTableRefId of SalesParmLine.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existTableRefId(
        ParmId          _parmId,
        TradeLineRefId  _tableRefId)
    {
        if (_parmId  &&  _tableRefId)
        {
            return (select firstonly RecId from salesParmLine
                        where salesParmLine.ParmId      == _parmId
                           && salesParmLine.TableRefId  == _tableRefId).RecId != 0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsExportOrderTable_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsExportOrderTable_IN table.
    /// </returns>
    public static CustomsExportOrderTable_IN find(
        RefRecId            _recId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        CustomsExportOrderTable_IN customsExportOrderTable;

        customsExportOrderTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsExportOrderTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsExportOrderTable
            where customsExportOrderTable.RecId == _recId;

        return customsExportOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySalesID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsExportOrderTable_IN table for the specified SalesId, ExportInvoiceId and CustomsDate.
    /// </summary>
    /// <param name="_salesId">
    /// The salesId for which CustomsExportOrderTable_IN needs to be queried.
    /// </param>
    /// <param name="_invoiceId">
    /// The ExportInvoiceId for which CustomsExportOrderTable_IN needs to be queried.
    /// </param>
    /// <param name="_date">
    /// The date on which Export order was invoiced.
    /// </param>
    /// <param name="_forUpdate">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// Selected CustomsExportOrderTable_IN table record.
    /// </returns>
    public static CustomsExportOrderTable_IN findBySalesID(
        SalesIdBase        _salesId,
        ExportInvoiceId_IN _invoiceId,
        CustomsDate_IN     _date,
        boolean            _forUpdate = false)
    {
        CustomsExportOrderTable_IN customsExportOrderTable;

        if (_salesId && _invoiceId && _date)
        {
            customsExportOrderTable.selectForUpdate(_forUpdate);
            select firstonly customsExportOrderTable
                where customsExportOrderTable.SalesId     == _salesId
                   && customsExportOrderTable.InvoiceId   == _invoiceId
                   && customsExportOrderTable.InvoiceDate == _date;
        }
        return customsExportOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefForInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Jumps ref for invoice id.
    /// </summary>
    public static void jumpRefForInvoiceId()
    {
        Args    args = new Args();

        new MenuFunction(menuitemdisplaystr(CustInvoiceJournal), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>CustomsExportOrderTable_IN</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupSalesId(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(CustomsExportOrderTable_IN), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(CustomsExportOrderTable_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(CustomsExportOrderTable_IN, SalesId));
        sysTableLookup.addLookupfield(fieldnum(CustomsExportOrderTable_IN, SalesId));
        sysTableLookup.addLookupfield(fieldnum(CustomsExportOrderTable_IN, InvoiceId));
        sysTableLookup.addLookupfield(fieldnum(CustomsExportOrderTable_IN, InvoiceDate));
        sysTableLookup.addLookupfield(fieldnum(CustomsExportOrderTable_IN, LedgerVoucher));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64156</DeveloperDocumentation>
	<Label>@GLS5725</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>InvoiceId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>InvoiceNumIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustomsExportOrderLine_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsExportOrderLine_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS79829</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ExportInvoiceId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InvoiceNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTrans</Name>
			<RelatedTable>CustInvoiceTrans</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>