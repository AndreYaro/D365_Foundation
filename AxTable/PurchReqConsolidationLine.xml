<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqConsolidationLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqConsolidationLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmountAfterConsolidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates line amount after consolidation.
    /// Used for fact boxes.
    /// </summary>
    /// <returns>
    /// Line amount calculated based on the new unit price and discounts.
    /// </returns>
    public AmountCur calcAmountAfterConsolidation()
    {
        PurchReqLine    purchReqLine;
        PurchReqLine    tmpPurchReqLine;
        DiscAmount      lineDisc;
        DiscPct         linePercent;

        purchReqLine = PurchReqLine::find(this.PurchReqLineID);

        tmpPurchReqLine.setTmp();

        lineDisc    = this.calcConsolidationLineDisc();
        linePercent = this.calcConsolidationLinePercent();

        tmpPurchReqLine.data(purchReqLine.data());
        tmpPurchReqLine.VendAccount     = this.NewVendor;
        tmpPurchReqLine.CurrencyCode    = this.CurrencyCode;
        tmpPurchReqLine.PurchPrice      = this.NewPurchPrice;
        tmpPurchReqLine.LineDisc        = lineDisc;
        tmpPurchReqLine.LinePercent     = linePercent;
        tmpPurchReqLine.doInsert();

        return tmpPurchReqLine.calcLineAmount(this.NewPurchQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountBeforeConsolidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns line amount before consolidation.
    /// Used for fact boxes.
    /// </summary>
    /// <returns>
    /// Line amount from purchase requisition line.
    /// </returns>
    public AmountCur calcAmountBeforeConsolidation()
    {
        PurchReqLine    purchReqLine;

        purchReqLine = PurchReqLine::find(this.PurchReqLineID);

        return  purchReqLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsolidationLineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates line discount amount based on current line discount amount value and its status.
    /// </summary>
    /// <returns>
    /// Line discount amount used for consolidation line.
    /// </returns>
    public DiscAmount calcConsolidationLineDisc()
    {
        PurchReqLine    purchReqLine;
        DiscAmount      lineDisc;

        purchReqLine = PurchReqLine::find(this.PurchReqLineID);
        lineDisc     = purchReqLine.LineDisc;

        if (this.Discount > 0)
        {
            switch (this.DiscountStatus)
            {
                case PurchReqConsolidationDiscountStatus::Replace:
                    lineDisc = this.Discount;
                    break;
                case PurchReqConsolidationDiscountStatus::InAddition:
                    lineDisc = lineDisc + this.Discount;
                    break;
            }
        }

        return lineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsolidationLinePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates line discount percentage based on current line discount percentage value and its status.
    /// </summary>
    /// <returns>
    /// Line discount percentage used for consolidation line.
    /// </returns>
    public DiscPct calcConsolidationLinePercent()
    {
        PurchReqLine    purchReqLine;
        DiscAmount      lineAmountAfterDiscount;
        LineAmount      lineInitialAmount;
        DiscPct         linePercent;

        purchReqLine = PurchReqLine::find(this.PurchReqLineID);
        linePercent  = purchReqLine.LinePercent;

        if (this.DiscountPercent > 0)
        {
            switch (this.DiscountPercentStatus)
            {
                case PurchReqConsolidationDiscountStatus::Replace:
                    linePercent = this.DiscountPercent;
                    break;
                case PurchReqConsolidationDiscountStatus::InAddition:
                    if (purchReqLine.LinePercent > 0)
                    {
                        // Calculate line amount after purchase requisiton line percentage discount
                        lineInitialAmount = purchReqLine.PurchPrice * purchReqLine.PurchQty;

                        if (lineInitialAmount > 0)
                        {
                            lineAmountAfterDiscount = lineInitialAmount - lineInitialAmount * purchReqLine.LinePercent / 100;

                            // Calculate line amount after consolidation line percentage discount
                            lineAmountAfterDiscount = lineAmountAfterDiscount - lineAmountAfterDiscount * this.DiscountPercent / 100 ;

                            // Calculate combined discount based on difference than initial amount and amount after the two discounts
                            linePercent = (lineInitialAmount- lineAmountAfterDiscount) / lineInitialAmount * 100;
                        }
                    }
                    else
                    {
                        linePercent = this.DiscountPercent;
                    }
                    break;
            }
        }

        return linePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsolidationPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets consolidation line unit price
    /// </summary>
    /// <returns>
    /// Unit price for consolidation line.
    /// </returns>
    public DiscAmount calcConsolidationPrice()
    {
        if (this.NewPurchPrice > 0)
        {
            return this.NewPurchPrice;
        }

        return PurchReqLine::find(this.PurchReqLineID).PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the consolidation line amount.
    /// </summary>
    /// <returns>
    /// The calculated consolidation line amount.
    /// </returns>
    /// <remarks>
    /// The amount is calculated by multiplying quantity by the price minus the discount.
    /// </remarks>
    public AmountCur calcLineAmount()
    {
        return this.calcAmountAfterConsolidation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the behavior when vendor field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// Field which triggered event handler.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        PurchReqLine    purchReqLine;

        switch (_fieldId)
        {
            case fieldNum(PurchReqConsolidationLine, NewVendor):

                if (this.NewVendor == '')
                {
                    this.CurrencyCode   = Ledger::accountingCurrency();
                }
                else
                {
                    this.CurrencyCode   = VendTable::find(this.NewVendor).Currency;
                }

                purchReqLine = PurchReqLine::find(this.PurchReqLineID);
                purchReqLine.VendAccount = this.NewVendor;

                // Use the same recalculation as purchase requisition line when vendor gets changed
                purchReqLine.modifiedFieldVendAccount(true, true);

                this.NewPurchPrice      = purchReqLine.PurchPrice;
                this.Discount           = purchReqLine.LineDisc;
                this.DiscountPercent    = purchReqLine.LinePercent;
                this.NewPurchAgreement  = purchReqLine.PurchAgreement;
                break;
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        this.setDataAreaForModifiedField(fieldName2id(this.TableId, _fieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataAreaForModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>DataArea</c> field if a corresponding field value is modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field number in the <c>PurchReqConsolidationLine</c> table.
    /// </param>

    public void setDataAreaForModifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(PurchReqConsolidationLine, NewVendor) : this.NewVendorDataAreaId = this.NewVendor ? getCompany(tableNum(VendTable)) : ""; break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(PurchReqConsolidationLine, NewRequestedDate) :
                    ret = this.validateRequestedDate();
                    break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequestedDate</Name>
				<Source><![CDATA[
    boolean validateRequestedDate()
    {
        boolean                 ret = true;

        if (this.NewRequestedDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            ret = checkFailed("@SYS344763");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display Name vendorName()
    {
        if (this.NewVendor == "")
        {
            return "";
        }
        else
        {
            return VendTable::find(this.NewVendor).name();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinesFromPurchReqLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase consolidation lines from the specified purchase requisition IDs.
    /// </summary>
    /// <param name="_purchReqlineRecId">
    /// A list that contains purchase requisition IDs.
    /// </param>
    /// <param name="_purchReqConsolidationId">
    /// The purchase consolidation record ID table header.
    /// </param>
    public static void addLinesFromPurchReqLines(List _purchReqlineRecId, RecId  _purchReqConsolidationId)
    {
        ListEnumerator              listEnumerator;
        PurchReqConsolidation       purchReqConsolidation;
        PurchReqConsolidationLine   purchReqConsolidationLine;
        PurchReqLine                purchReqLine;

        ttsbegin;
        listEnumerator = _purchReqlineRecId.getEnumerator();
        while (listEnumerator.moveNext())
        {
            purchReqConsolidation = PurchReqConsolidation::find(_purchReqConsolidationId, true);
            purchReqLine          = PurchReqLine::find(listEnumerator.current(), true);

            if (purchReqLine)
            {
                purchReqConsolidationLine.initValue();
                purchReqConsolidationLine.PurchReqConsolidationId =_purchReqConsolidationId;
                purchReqConsolidationLine.PurchReqLineID          = listEnumerator.current();
                purchReqConsolidationLine.NewPurchPrice           = purchReqLine.PurchPrice;
                purchReqConsolidationLine.NewRequestedDate        = purchReqLine.RequiredDate;
                purchReqConsolidationLine.NewVendor               = purchReqLine.VendAccount;
                purchReqConsolidationLine.NewVendorDataAreaId     = purchReqLine.VendAccountDataArea;
                purchReqConsolidationLine.NewPurchQty             = purchReqLine.PurchQty;
                purchReqConsolidationLine.Discount                = purchReqLine.LineDisc;
                purchReqConsolidationLine.DiscountPercent         = purchReqLine.LinePercent;
                purchReqConsolidationLine.NewLineAmount           = purchReqLine.LineAmount;
                purchReqConsolidationLine.CurrencyCode            = purchReqLine.CurrencyCode;
                purchReqConsolidationLine.NewPurchAgreement       = purchReqLine.PurchAgreement;
                purchReqConsolidationLine.insert();
                purchReqLine.PurchReqConsolidationStatus = PurchReqConsolidationStatus::Pending;
                purchReqLine.update();
            }
        }

        PurchReqConsolidationLine::updateTotal(purchReqConsolidation);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyMultiEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchReqConsolidationLine</c> records with the item, purchase price, requested date,
    /// vendor, vendor quote number, discounts
    /// </summary>
    /// <param name="_purchReqConsolidationLine">
    /// The current <c>PurchReqConsolidationLine</c> list of record IDs.
    /// </param>
    /// <param name="_multiEdit">
    /// The instantiated class provided to the user to enter multiedit data.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Each <c>PurchReqConsolidationLine</c> record does not have the same currency code.
    /// </exception>
    public static void applyMultiEdit(List _purchReqConsolidationLine, PurchReqConsolidationMultiEdit _multiEdit)
    {
        PurchReqConsolidationLine   purchReqConsolidationLine;
        CurrencyCode                currencyCode;
        boolean                     isFirst         = true;
        ListEnumerator              listEnumerator  = new ListEnumerator();

        // if attempting to update purchase price or discount, validate all selections have same currency code
        listEnumerator = _purchReqConsolidationLine.getEnumerator();

        ttsbegin;
        while (listEnumerator.moveNext())
        {
            purchReqConsolidationLine = PurchReqConsolidationLine::find(listEnumerator.current(), true);

            if (_multiEdit.parmPurchReqRequiredDate())
            {
                purchReqConsolidationLine.NewRequestedDate = _multiEdit.parmPurchReqRequiredDate();
            }

            if (!purchReqConsolidationLine.validateRequestedDate())
            {
                throw error("@SYS344763");
            }

            if (_multiEdit.parmCurrencyValidationNeeded())
            {
                if (isFirst)
                {
                    currencyCode    = purchReqConsolidationLine.CurrencyCode;
                    isFirst         = false;
                }
                else
                {
                    if (currencyCode != purchReqConsolidationLine.CurrencyCode)
                    {
                        throw error("@SYS131467");
                    }
                }
            }

            if (_multiEdit.parmPurchReqPrice())
            {
                purchReqConsolidationLine.NewPurchPrice = _multiEdit.parmPurchReqPrice();
            }

            if (_multiEdit.parmDiscAmount() > 0)
            {
                if (_multiEdit.parmDiscAmount() > purchReqConsolidationLine.NewPurchPrice)
                {
                    throw error("@SYS328579");
                }

                purchReqConsolidationLine.Discount              = _multiEdit.parmDiscAmount();
                purchReqConsolidationLine.DiscountStatus        = _multiEdit.parmDiscAmountStatus();
                purchReqConsolidationLine.DiscountPercent       = 0;
                purchReqConsolidationLine.DiscountPercentStatus = PurchReqConsolidationDiscountStatus::Replace;
            }

            if (_multiEdit.parmDiscPercent() > 0)
            {
                purchReqConsolidationLine.DiscountPercent       = _multiEdit.parmDiscPercent();
                purchReqConsolidationLine.DiscountPercentStatus = _multiEdit.parmDiscPercentStatus();
                purchReqConsolidationLine.Discount              = 0;
                purchReqConsolidationLine.DiscountStatus        = PurchReqConsolidationDiscountStatus::Replace;
            }

            if (_multiEdit.parmVendAccount())
            {
                purchReqConsolidationLine.NewVendor = _multiEdit.parmVendAccount();
                purchReqConsolidationLine.setDataAreaForModifiedField(fieldNum(PurchReqConsolidationLine, NewVendor));
            }

            if (_multiEdit.parmVendQuoteNumber())
            {
                purchReqConsolidationLine.NewVendorQuoteNumber = _multiEdit.parmVendQuoteNumber();
            }

            purchReqConsolidationLine.NewLineAmount = purchReqConsolidationLine.calcAmountAfterConsolidation();

            purchReqConsolidationLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyOpportunities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies every value change made in the <c>PurchReqConsolidationLine</c> records to the
    /// corresponding <c>PurchReqLine</c> records.
    /// </summary>
    /// <param name="_listToUpdate">
    /// A list that contains <c>PurchReqConsolidationnLine</c> record IDs to update.
    /// </param>
    /// <param name="_listToReject">
    /// A list that contains <c>PurchReqConsolidationnLine</c> record IDs to reject.
    /// </param>
    /// <param name="_purchReqConsolidation">
    /// The <c>PurchReqConsolidation</c> record to update the consolidation status to Closed.
    /// </param>
    /// <remarks>
    /// If no changes were made to a <c>PurchReqConsolidationLine</c> record, the consolidation status of
    /// the corresponding <c>PurchReqLine</c> record is set to Consolidation Rejected.
    /// </remarks>
    public static void applyOpportunities(List _listToUpdate, List _listToReject, PurchReqConsolidation _purchReqConsolidation)
    {
        ListEnumerator              listEnumerator;
        PurchReqLine                purchReqLine;
        PurchReqConsolidationLine   purchReqConsolidationLine;
        PurchReqConsolidation       purchReqConsolidation;

        ttsbegin;

        listEnumerator = _listToUpdate.getEnumerator();
        while (listEnumerator.moveNext())
        {
            purchReqConsolidationLine = PurchReqConsolidationLine::find(listEnumerator.current(),false);
            purchReqLine              = PurchReqLine::find(purchReqConsolidationLine.PurchReqLineID,true);

            purchReqLine.VendQuoteNumber             = purchReqConsolidationLine.NewVendorQuoteNumber;
            purchReqLine.PurchReqConsolidationStatus = PurchReqConsolidationStatus::Consolidated;
            purchReqLine.doUpdate();
        }

        purchReqConsolidation = PurchReqConsolidation::find(_purchReqConsolidation.RecId,true);
        purchReqConsolidation.Status = PurchReqConsolidationActiveStatus::Closed;
        purchReqConsolidation.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Purchase Requisition Consolidation Line exists in the <c>PurchReqConsolidationLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The recId in the <c>PurchReqConsolidationLine</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, it displays an error message and returns false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        if (_recId && !PurchReqConsolidationLine::exist(_recId))
            return checkFailed(strFmt(PurchReqConsolidationLine::txtNotExist(), _recId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>PurchReqConsolidationLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PurchReqConsolidationLine</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId  _recId)
    {
        return _recId
            && (select firstonly RecId from purchReqConsolidationLine
                where purchReqConsolidationLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchReqConsolidationLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PurchReqConsolidationLine</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchReqConsolidationLine</c> table; otherwise, an empty record.
    /// </returns>
    static public PurchReqConsolidationLine find(RecId _recId, boolean _forUpdate = false)
    {
        PurchReqConsolidationLine purchReqConsolidationLine;

        if (_recId)
        {
            purchReqConsolidationLine.selectForUpdate(_forUpdate);

            select firstonly purchReqConsolidationLine where purchReqConsolidationLine.RecId == _recId;
        }

        return purchReqConsolidationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByConsolidationID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchReqConsolidationLine</c> table.
    /// </summary>
    /// <param name="_consolidationID">
    /// The Purchase Requisition Aggregation ID of the <c>PurchReqConsolidationLine</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchReqConsolidationLine</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchReqConsolidationLine findByConsolidationID(RefRecId _consolidationID, boolean _forupdate = false)
    {
        PurchReqConsolidationLine purchReqConsolidationLine;

        if (_consolidationID)
        {
            purchReqConsolidationLine.selectForUpdate(_forupdate);

            select firstonly purchReqConsolidationLine where
                purchReqConsolidationLine.PurchReqConsolidationId == _consolidationID;
        }

        return purchReqConsolidationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReqLineId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchReqConsolidationLine</c> table.
    /// </summary>
    /// <param name="_purchReqId">
    /// The Purchase Requisition Line ID of the <c>PurchReqConsolidationLine</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchReqConsolidationLine</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchReqConsolidationLine findByReqLineId(RefRecId _purchReqId, boolean _forupdate = false)
    {
        PurchReqConsolidationLine purchReqConsolidationLine;

        if (_purchReqId)
        {
            purchReqConsolidationLine.selectForUpdate(_forupdate);

            select firstonly purchReqConsolidationLine where purchReqConsolidationLine.PurchReqLineID == _purchReqId;
        }

        return purchReqConsolidationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectOpportunities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rejects every currently selected <c>PurchReqConsolidationLine</c> item in the
    /// <c>PurchReqConsolidation</c> form for consolidation.
    /// </summary>
    /// <param name="_purchReqConsolidationLine">
    /// The current <c>PurchReqConsolidationLine</c> list of record IDs.
    /// </param>
    public static void rejectOpportunities(List _purchReqConsolidationLine)
    {
        PurchReqLine                purchReqLine;
        ListEnumerator              listEnumerator = new ListEnumerator();
        PurchReqConsolidationLine   purchReqConsolidationLine;

        listEnumerator = _purchReqConsolidationLine.getEnumerator();
        ttsbegin;

        while (listEnumerator.moveNext())
        {
            purchReqConsolidationLine = PurchReqConsolidationLine::find(listEnumerator.current(),true);
            purchReqLine              = PurchReqLine::find(purchReqConsolidationLine.PurchReqLineID,true);

            purchReqLine.PurchReqConsolidationStatus = PurchReqConsolidationStatus::None;
            purchReqLine.VendQuoteNumber             = "";
            purchReqLine.update();

            purchReqConsolidationLine.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPurchReqConsolidationWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified icon in the <c>PurchReqLinePOCreationCode</c> table.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The record ID of the <c>PurchReqLine</c> record.
    /// </param>
    /// <returns>
    /// An icon in the <c>PurchReqLinePOCreationCode</c> table; otherwise, an empty buffer.
    /// </returns>
    public static PurchReqConsolidationWarning showPurchReqConsolidationWarning(PurchReqLine _purchReqLine)
    {
        #ResAppl
        PurchReqConsolidation     purchReqConsolidation;
        PurchReqConsolidationLine purchReqConsolidationLine;

        select RecId from purchReqConsolidation
          join RecId from purchReqConsolidationLine
         where purchReqConsolidationLine.PurchReqLineID == _purchReqLine.RecId
            && purchReqConsolidation.RecId              == purchReqConsolidationLine.PurchReqConsolidationId
            && purchReqConsolidation.TargetedEndDate    <= DateTimeUtil::date(DateTimeUtil::utcNow());

        if (purchReqConsolidation.RecId > 0)
        {
            return #ImageWarning;
        }

        return #ImageBlank2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>PurchReqConsolidationLine</c> table does
    /// not exist.
    /// </summary>
    /// <returns>
    /// The message that states a record does not exist.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS131367";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an approximate total of every line item based on a single currency code.
    /// </summary>
    /// <param name="_purchReqConsolidation">
    /// The currently selected <c>PurchReqConsolidation</c> record in the <c>PurchReqConsolidation</c> form.
    /// </param>
    /// <remarks>
    /// This method is called whenever a change is made to a <c>PurchReqConsolidationLine</c> value.This
    /// method also updates the Aggregation Opportunity total quantity and net amount in the
    /// <c>PurchReqConsolidation</c> table.
    /// </remarks>
    public static void updateTotal(PurchReqConsolidation _purchReqConsolidation)
    {
        Qty                         qty;
        AmountCur                   amount;
        AmountCur                   tempAmount;
        PurchReqConsolidationLine   purchReqConsolidationLine;

        ttsbegin;
        while select forupdate purchReqConsolidationLine
            where purchReqConsolidationLine.PurchReqConsolidationId == _purchReqConsolidation.RecId
        {
            // Check to see if data has been changed in each line
            tempAmount = purchReqConsolidationLine.calcLineAmount();
            if (purchReqConsolidationLine.NewLineAmount != tempAmount)
            {
                //update if changed
                purchReqConsolidationLine.NewLineAmount = tempAmount;
                purchReqConsolidationLine.update();
            }

            // Total for consolidation opportunity will be shown in the consolidation currency,
            // if the consolidation line has a different currency we need to use exchange rate.
            if (purchReqConsolidationLine.CurrencyCode != _purchReqConsolidation.CurrencyCode)
            {
                purchReqConsolidationLine.NewPurchPrice =
                    ExchangeRateHelper::curPrice2CurPrice(purchReqConsolidationLine.NewPurchPrice, purchReqConsolidationLine.CurrencyCode, _purchReqConsolidation.CurrencyCode);
                tempAmount = purchReqConsolidationLine.calcLineAmount();
            }

            amount += tempAmount;
            qty += purchReqConsolidationLine.NewPurchQty;
        }

        //update the header record
        _purchReqConsolidation.NetAmount = amount;
        _purchReqConsolidation.TotalQty = qty;
        _purchReqConsolidation.selectForUpdate();
        _purchReqConsolidation.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReqConsolidation</ConfigurationKey>
	<DeveloperDocumentation>@SYS315412</DeveloperDocumentation>
	<Label>@SYS130701</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RecId</TitleField1>
	<TitleField2>PurchReqConsolidationId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqLineID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewPurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewRequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Discount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchReqConsolidationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewVendorQuoteNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewPurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewLineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountPercentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consolidation</Name>
			<Label>@SYS131468</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchReqLineID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewPurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewRequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Discount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchReqConsolidationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewVendorQuoteNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewPurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewLineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountPercentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewPurchAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NewVendorDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Discount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DiscountPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DiscountPercentStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS340463</Label>
			<EnumType>PurchReqConsolidationDiscountStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DiscountStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchReqConsolidationDiscountStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewLineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NewPurchAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewPurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewPurchQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>NewRequestedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqRequiredDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NewVendor</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NewVendorDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NewVendorQuoteNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendQuoteNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqConsolidationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqConsolidationRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqLineID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqConsolidationReqLineId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_PurchReqConsolidationTable</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchReqConsolidationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_PurchReqLine</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchReqLineID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyCode</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NewVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NewVendorDataAreaId</Name>
					<Field>NewVendorDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NewVendor</Name>
					<Field>NewVendor</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchaseAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NewPurchAgreement</Name>
					<Field>NewPurchAgreement</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchReqAggregation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqConsolidation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReqConsolidation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchReqConsolidation_PurchReqConsolidationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqConsolidationId</Name>
					<Field>PurchReqConsolidationId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchReqLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchReqLine</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PurchReqLine_PurchReqConsolidationLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqLineID</Name>
					<Field>PurchReqLineID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>