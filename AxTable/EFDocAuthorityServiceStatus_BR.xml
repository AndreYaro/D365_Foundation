<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocAuthorityServiceStatus_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;

public class EFDocAuthorityServiceStatus_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertIfDoesntExist</Name>
				<Source><![CDATA[
        private static void insertIfDoesntExist(EFDocAuthorityServiceStatus_BR _eFDocAuthorityServiceStatus, FiscalEstablishment_BR _fiscalEstablishment, EFDocAuthorityId_BR _authorityId, CityIBGECode_BR _cUf)
    {
        select _eFDocAuthorityServiceStatus
                where _eFDocAuthorityServiceStatus.CUF == _cUf
                      && _eFDocAuthorityServiceStatus.AuthorityId == _authorityId
                      && _eFDocAuthorityServiceStatus.EFDocEnvironment == _fiscalEstablishment.EFDocEnvironment;

        if (!_eFDocAuthorityServiceStatus)
        {
            _eFDocAuthorityServiceStatus.EFDocEnvironment       = _fiscalEstablishment.EFDocEnvironment;

            _eFDocAuthorityServiceStatus.UseAdvCertificateStore = SystemParameters::find().UseAdvCertificateStore;
            if(_eFDocAuthorityServiceStatus.UseAdvCertificateStore && _fiscalEstablishment.EFDocKeyVaultCertificateRef )
            {
                _eFDocAuthorityServiceStatus.KeyVaultCertificateRef = _fiscalEstablishment.EFDocKeyVaultCertificateRef;
                
                X509Certificate2 certificate = CertificateHelper_BR::getDigitalCertificate(_fiscalEstablishment.EFDocKeyVaultCertificateRef,
                                                                                           _fiscalEstablishment.EFDocDigitalCertificateSubject);
                _eFDocAuthorityServiceStatus.CertificateSubjectName = certificate.Subject;
            }
            else
            {
                _eFDocAuthorityServiceStatus.CertificateSubjectName = _fiscalEstablishment.EFDocDigitalCertificateSubject;
                _eFDocAuthorityServiceStatus.KeyVaultCertificateRef = _fiscalEstablishment.EFDocKeyVaultCertificateRef;
            }

            _eFDocAuthorityServiceStatus.EFDocVersion           = _fiscalEstablishment.EFDocVersion;
            _eFDocAuthorityServiceStatus.AuthorityId            = _authorityId;
            _eFDocAuthorityServiceStatus.FiscalEstablishment_BR = _fiscalEstablishment.RecId;
            _eFDocAuthorityServiceStatus.UF                     = _fiscalEstablishment.postalAddress().State;
            _eFDocAuthorityServiceStatus.CUF                    = _cUf;

            _eFDocAuthorityServiceStatus.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates temp table EFDocAuthorityServiceStatus_BR with data from fiscal establishments and authorities
    /// Finds all fiscal establishments and insert its own authority
    /// - Checks if authority already exits before inserting
    /// - Adds SVC authority foreach inserted auth
    /// </summary>
    /// <param name="eFDocAuthorityServiceStatus">
    /// <c>EFDocAuthorityServiceStatus_BR</c> instance to populate
    /// </param>
    /// <returns>
    /// Populated table <c>EFDocAuthorityServiceStatus_BR</c>
    /// </returns>
    public static EFDocAuthorityServiceStatus_BR populate(EFDocAuthorityServiceStatus_BR eFDocAuthorityServiceStatus)
    {
        FiscalEstablishment_BR          fiscalEstablishment;
        EFDocAuthority_BR               authority;
        LogisticsAddressCity           city;
        CityIBGECode_BR                 cUf;

        while select fiscalEstablishment
        {
            city = LogisticsAddressCity::findRecId(fiscalEstablishment.postalAddress().CityRecId, false);
            cUf = subStr(city.IBGECode_BR, 1, 2);

            authority   = EFDocAuthority_BR::findById(fiscalEstablishment.EFDocAuthority);

            EFDocAuthorityServiceStatus_BR::insertIfDoesntExist(eFDocAuthorityServiceStatus, fiscalEstablishment, authority.AuthorityId, cUf);

            if (authority.SVCAuthorityId)
            {
                EFDocAuthorityServiceStatus_BR::insertIfDoesntExist(eFDocAuthorityServiceStatus, fiscalEstablishment, authority.SVCAuthorityId, cUf);
            }
        }

        return eFDocAuthorityServiceStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<Label>@SYS4002978</Label>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS4002978</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UF</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EFDocEnvironment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnMessage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageResponseTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormattedPlannedReturn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnNotes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EFDocVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AuthorityId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EFDocAuthorityId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AverageResponseTime</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TimeInSeconds</ExtendedDataType>
			<Label>@SYS4002969</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateSubjectName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CUF</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CityIBGECode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EFDocEnvironment</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>EFDocEnvironment_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EFDocVersion</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>EFiscalDocVersion_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishment_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormattedPlannedReturn</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>String30</ExtendedDataType>
			<Label>@SYS4002975</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PlannedReturn</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SysUtcDateTime</ExtendedDataType>
			<Label>@SYS4002975</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EFDocReturnCode_BR</ExtendedDataType>
			<Label>@SYS4002971</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnMessage</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EFDocReturnMessage_BR</ExtendedDataType>
			<Label>@SYS4002973</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnNotes</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EFDocReturnMessage_BR</ExtendedDataType>
			<Label>@SYS4002967</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UF</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CityIBGECode_BR</ExtendedDataType>
			<Label>@SYS21924</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificateRef</Name>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseAdvCertificateStore</Name>
			<ExtendedDataType>UseAdvCertificateStore</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EFDocAuthority</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>EFDocAuthority_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AuthorityId</Name>
					<Field>AuthorityId</Field>
					<RelatedField>AuthorityId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ID</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalEstablishment</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>FiscalEstablishment_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalEstablishment_BR</Name>
					<Field>FiscalEstablishment_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificateRef</Name>
					<Field>KeyVaultCertificateRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>