<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountRenameTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerAccountRenameTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>chartOfAccountsName</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the name of the chart of accounts.
    /// </summary>
    /// <returns>
    ///   Name of the chart of accounts.
    /// </returns>
    display Name chartOfAccountsName()
    {
        return LedgerChartOfAccounts::find(this.ChartOfAccounts).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromAccountName</Name>
				<Source><![CDATA[
    display LedgerJournalAccountName fromAccountName()
    {
        return MainAccount::getLocalizedNameByMainAccountId(this.FromAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameReverse</Name>
				<Source><![CDATA[
    public void renameReverse()
    {
        MainAccount                         fromMainAccount, toMainAccount;
        DimensionAttributeValue             dimAttrValue;

        if (Box::yesNo("@GLS103639", DialogButton::Yes) != DialogButton::Yes)
            return;

        ttsbegin;

        fromMainAccount = MainAccount::findByMainAccountId(this.FromAccount);

        if (this.BlockAccount)
        {
            dimAttrValue    = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount),
                                                                                             fromMainAccount.RecId,
                                                                                             true);
            dimAttrValue.IsSuspended             = NoYes::No;
            dimAttrValue.IsBlockedForManualEntry = NoYes::No;

            dimAttrValue.update();
        }
        else
        {
            toMainAccount   = MainAccount::findByMainAccountId(this.ToAccount, true);

            if (fromMainAccount)
                throw error(strFmt("@GLS111338", toMainAccount.MainAccountId));

            toMainAccount.MainAccountId = this.FromAccount;
            toMainAccount.update();
        }

        this.ProcessStatus  =   LedgerAccountRenameStatus_RU::None;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toAccountName</Name>
				<Source><![CDATA[
    display LedgerJournalAccountName toAccountName()
    {
        return MainAccount::getLocalizedNameByMainAccountId(this.ToAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;

        ret = super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LedgerAccountRenameTable_RU, ToAccount)      :
                if (LedgerAccountRenameTable_RU::findToAccount(this.ToAccount) && this.ToAccount)
                   ret = checkFailed("@GLS103637");
                if (this.BlockAccount == NoYes::Yes && this.ToAccount && this.ToAccount != this.FromAccount)
                    ret = checkFailed(strFmt("@GLS103643", this.FromAccount));
                break;
            case fieldNum(LedgerAccountRenameTable_RU, BlockAccount)   :
                if (this.BlockAccount == NoYes::Yes && this.ToAccount && this.ToAccount != this.FromAccount)
                    ret = checkFailed(strFmt("@GLS103643", this.FromAccount));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>affectedCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns comma delimited list of companies,  affected by renaming.
    /// </summary>
    /// <returns>
    ///   List of affected companies.
    /// </returns>
    public static str affectedCompanies()
    {
        str                         ret;
        Ledger                      ledger;
        LedgerAccountRenameTable_RU rename;
        while select PrimaryForLegalEntity from ledger
            group PrimaryForLegalEntity
            exists join rename
                where rename.ChartOfAccounts == ledger.ChartOfAccounts
        {
            if (ret)
            {
               ret += "@GLS116882";
            }
            ret += CompanyInfo::findRecId(ledger.PrimaryForLegalEntity).DataArea;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerAccountRenameTable_RU</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the LedgerAccountRenameTable_RU record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerAccountRenameTable_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerAccountRenameTable_RU find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerAccountRenameTable_RU ledgerAccountRenameTable;

        ledgerAccountRenameTable.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerAccountRenameTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerAccountRenameTable
            where ledgerAccountRenameTable.RecId == _recId;

        return ledgerAccountRenameTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromAccount</Name>
				<Source><![CDATA[
    public static LedgerAccountRenameTable_RU findFromAccount(MainAccountNum _mainAccount,
                                                              boolean        _forUpdate = false)
    {
        LedgerAccountRenameTable_RU renameTableFrom;

        if (_mainAccount)
        {
            renameTableFrom.selectForUpdate(_forUpdate);

            select firstonly renameTableFrom
                where renameTableFrom.FromAccount == _mainAccount;
        }

        return renameTableFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToAccount</Name>
				<Source><![CDATA[
    public static LedgerAccountRenameTable_RU findToAccount(MainAccountNum _mainAccount,
                                                            boolean        _forUpdate = false)
    {
        LedgerAccountRenameTable_RU renameTableTo;

        if (_mainAccount)
        {
            renameTableTo.selectForUpdate(_forUpdate);

            select firstonly renameTableTo
                where renameTableTo.ToAccount == _mainAccount;
        }

        return renameTableTo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS103628</DeveloperDocumentation>
	<FormRef>LedgerAccountRenameTable_RU</FormRef>
	<Label>@GLS103632</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FromAccount</TitleField1>
	<TitleField2>ToAccount</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>FromMainAccountIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>FromMainAccountIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChartOfAccounts</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TempAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChartOfAccounts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TempAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BlockAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlockAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS2675</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ChartOfAccounts</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerChartOfAccountsRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
			<Label>@GLS103645</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerAccountRenameStatus_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TempAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountNum</ExtendedDataType>
			<Label>@GLS103642</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FromMainAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ChartOfAccounts</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ToAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ToAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerAccountRenameTable_RU</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>LedgerAccountRenameTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerAccountRenameTable_RU</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerAccountRenameTable_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromAccount</Name>
					<Field>FromAccount</Field>
					<RelatedField>FromAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerChartOfAccounts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerChartOfAccounts</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ChartOfAccounts</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ChartOfAccounts</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ChartOfAccounts</Name>
					<Field>ChartOfAccounts</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>