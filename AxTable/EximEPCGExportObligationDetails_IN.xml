<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEPCGExportObligationDetails_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximEPCGExportObligationDetails_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayActualExports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays actual exports value amount.
    /// </summary>
    /// <returns>
    /// The actual exports value amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayActualExports()
    {
        return EximEPCGExportObligationDetails_IN::assessableValue(this.FromDateTime,
                                                                   this.ToDateTime,
                                                                   this.SchemeTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayExportObligationAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays export obligation amount.
    /// </summary>
    /// <returns>
    /// The export obligation amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayExportObligationAmt()
    {
        AmountMST expObligationAmt;

        expObligationAmt = EximEPCGExportObligationDetails_IN::netDifferenceAmount(this.FromDateTime,
                                                                                   this.ToDateTime,
                                                                                   this.SchemeTableRecId,
                                                                                   this.ExportObligationPeriodRecId);
        return expObligationAmt < 0 ? 0 : expObligationAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNetDiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays difference of export value and annual average amount.
    /// </summary>
    /// <returns>
    /// The difference of export value and annual average amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display AmountMST displayNetDiff()
    {
        return EximEPCGExportObligationDetails_IN::netDifferenceAmount(this.FromDateTime,
                                                                      this.ToDateTime,
                                                                      this.SchemeTableRecId,
                                                                      this.ExportObligationPeriodRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>annualAverageAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets AnnualAverageMST amount from EximEPCGSchemeApprove_IN table for given EximEPCGExportObligationPeriod_IN table RecId.
    /// </summary>
    /// <param name="_exportObligationPeriodRecId">EximEPCGExportObligationPeriod_IN table RecId</param>
    /// <returns>AmountMST</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST annualAverageAmount(EximEPCGExportObligationPeriodRecId_IN _exportObligationPeriodRecId)
    {
        EximEPCGSchemeApprove_IN          epcgSchemeApproval;
        EximEPCGExportObligationPeriod_IN epcgExportObligationPeriod;

        select SchemeApproveRecId from epcgExportObligationPeriod
            where epcgExportObligationPeriod.RecId == _exportObligationPeriodRecId
                join AnnualAverageMST from epcgSchemeApproval
                where epcgSchemeApproval.RecId == epcgExportObligationPeriod.SchemeApproveRecId;

        return epcgSchemeApproval.AnnualAverageMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cumulative ExportValue from the EximEPCGExportTrans_IN table for given EximEPCGSchemeTable_IN table RecId, FromDateTime, and ToDateTime.
    /// </summary>
    /// <param name="_fromDateTime">FromDateTime</param>
    /// <param name="_toDateTime">ToDateTime</param>
    /// <param name="_schemeTableRecId">EximEPCGSchemeTable_IN table RecId</param>
    /// <returns>AmountMST</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST assessableValue(
        FromDateTime                _fromDateTime,
        ToDateTime                  _toDateTime,
        EximEPCGSchemeTableRecId_IN _schemeTableRecId)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        EximEPCGSchemeApprove_IN    epcgSchemeApproval;
        CustInvoiceJour             custInvoiceJour;
        CustInvoiceTrans            custInvoiceTrans;
        EximEPCGExportTrans_IN      epcgExportTrans;
        AmountMST                   assessableValue;
        TransDate                   fromDate;
        TransDate                   toDate;

        fromDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_fromDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        toDate   = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_toDateTime, DateTimeUtil::getUserPreferredTimeZone()));

        ttsbegin;

        while select SchemeTableRecId, CustomsShippingBillTransRecId, ExportValue
            from epcgExportTrans
            where epcgExportTrans.SchemeTableRecId == _schemeTableRecId
            join RecId, RealizedInvoices
                from epcgSchemeApproval
                    where epcgSchemeApproval.SchemeTableRecId == epcgExportTrans.SchemeTableRecId
            join customsShippingBillTrans
                where customsShippingBillTrans.RecId            == epcgExportTrans.CustomsShippingBillTransRecId
                   && customsShippingBillTrans.ShippingBillDate >= fromDate
                   && customsShippingBillTrans.ShippingBillDate <= toDate
            join  RecId, InventTransId, InvoiceId, InvoiceDate
                from custInvoiceTrans
                    where custInvoiceTrans.SalesId       == customsShippingBillTrans.SalesId
                       && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                       && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate
                       && custInvoiceTrans.ItemId == customsShippingBillTrans.ItemId
                       && custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
            join SalesId, InvoiceId, InvoiceAccount, InvoiceDate, NumberSequenceGroup
                from custInvoiceJour
                    where custInvoiceJour.SalesId             == custInvoiceTrans.SalesId
                       && custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId
                       && custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate
                       && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup
        {
            if (epcgSchemeApproval.RealizedInvoices)
            {
                if (customsShippingBillTrans
                    && EximEPCGExportObligationDetails_IN::isRealized(customsShippingBillTrans,
                                                                      epcgSchemeApproval.RealizedInvoices))
                {
                    assessableValue += epcgExportTrans.ExportValue;
                }
            }
            else
            {
                assessableValue += epcgExportTrans.ExportValue;
            }
        }
        ttscommit;

        return assessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximEPCGExportObligationDetails_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximEPCGExportObligationDetails_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGExportObligationDetails_IN find(
        RecId               _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximEPCGExportObligationDetails_IN eximEPCGExportObligationDetails;

        eximEPCGExportObligationDetails.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximEPCGExportObligationDetails.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximEPCGExportObligationDetails
            where eximEPCGExportObligationDetails.RecId == _recId;

        return eximEPCGExportObligationDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRealized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Specified CustomsShippingBillTrans_IN record is realized.
    /// </summary>
    /// <param name="_customsShippingBillTrans">CustomsShippingBillTrans_IN table recId</param>
    /// <param name="_realizedInvoice">NoYesId</param>
    /// <returns>true if the CustomsShippingBillTrans_IN record is realized otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isRealized(
        CustomsShippingBillTrans_IN _customsShippingBillTrans,
        NoYesId                     _realizedInvoice = false)
    {
        CustTrans       custTrans;
        CustInvoiceJour custInvoiceJour;
        CustTransOpen   custTransOpen;
        boolean         realizedInvoice;

        if (_realizedInvoice)
        {
            select firstonly RecId, Invoice, AccountNum, TransDate
                from custTrans
                    where custTrans.Invoice == _customsShippingBillTrans.InvoiceId
                notexists join RefRecId
                    from custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId
                join InvoiceId, InvoiceAccount, InvoiceDate, SalesId
                    from custInvoiceJour
                        where custInvoiceJour.InvoiceId      == custTrans.Invoice
                           && custInvoiceJour.InvoiceAccount == custTrans.AccountNum
                           && custInvoiceJour.InvoiceDate    == custTrans.TransDate
                           && custInvoiceJour.SalesId        == _customsShippingBillTrans.SalesId;

            if (custTrans.RecId)
            {
                realizedInvoice = true;
            }
        }

        return realizedInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netDifferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the difference of ExportValue and AnnualAverageAmounts for specified EximEPCGSchemeTableRecId_IN, FromDateTime and ToDateTime.
    /// </summary>
    /// <param name="_fromDateTime">FromDateTime</param>
    /// <param name="_toDateTime">ToDateTime</param>
    /// <param name="_schemeTableRecId">EximEPCGSchemeTableRecId_IN</param>
    /// <param name="_exportObligationPeriodRecId">EximEPCGExportObligationPeriodRecId_IN</param>
    /// <returns>AmountMST</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST netDifferenceAmount(
        FromDateTime                            _fromDateTime,
        ToDateTime                              _toDateTime,
        EximEPCGSchemeTableRecId_IN             _schemeTableRecId,
        EximEPCGExportObligationPeriodRecId_IN  _exportObligationPeriodRecId)
    {
        return (EximEPCGExportObligationDetails_IN::assessableValue(_fromDateTime,
                                                                    _toDateTime,
                                                                    _schemeTableRecId)
                - EximEPCGExportObligationDetails_IN::annualAverageAmount(_exportObligationPeriodRecId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62446</DeveloperDocumentation>
	<Label>@GLS62069</Label>
	<TitleField1>Block</TitleField1>
	<TitleField2>FromDateTime</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExportObligationPeriodRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchemeTableRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Block</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximBlockNum_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExportObligationPeriodRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SchemeTableRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ToDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EximEPCGExportObligationPeriodIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExportObligationPeriodRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EximEPCGSchemeTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SchemeTableRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximEPCGExportObligationPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximEPCGExportObligationPeriod_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximEPCGExportObligationPeriod_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximEPCGExportObligationPeriod_IN_EximEPCGExportObligationDetails_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExportObligationPeriodRecId</Name>
					<Field>ExportObligationPeriodRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximEPCGSchemeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximEPCGSchemeTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximEPCGSchemeTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximEPCGSchemeTable_IN_EximEPCGExportObligationDetails_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SchemeTableRecId</Name>
					<Field>SchemeTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>