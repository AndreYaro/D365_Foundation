<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequePaymTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankChequePaymTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayRemittanceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor remittance address that is associated with the vendor <c>RemittanceAddress</c>
    /// field on the <c>BankChequePaymTrans</c> table.
    /// </summary>
    /// <returns>
    /// The remittance address.
    /// </returns>
    public display RemittanceAddressing displayRemittanceAddress()
    {
        if (!hasFieldAccess(tableNum(LogisticsPostalAddress), fieldNum(LogisticsPostalAddress, Address), AccessType::View))
        {
            error("@SYS57330");
        }

        //Address based off of the address table recid on the table
        return LogisticsPostalAddress::addressFromRecId(this.RemittanceAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRemittanceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor remittance location name that is associated with the vendor
    /// <c>RemittanceAddress</c> field on the <c>BankChequePaymTrans</c> table.
    /// </summary>
    /// <returns>
    /// The remittance location name.
    /// </returns>
    public display RemittanceLocationName displayRemittanceLocation()
    {
        return LogisticsPostalAddress::locationNameFromRecId(this.RemittanceAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmountBankCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the payment amount in the bank currency.
    /// </summary>
    /// <returns>
    /// The payment amount in the bank currency.
    /// </returns>
    /// <remarks>
    /// It was determined that this value will be calculated instead of saved in the table.It is needed in
    /// several scenarios and those scenarios only expect a reasonable number of check payment
    /// transactions. In scenarios that contain many payment transactions, know that the performance of
    /// this method may be an issue. If such scenarios do occur, we should re-consider persisting this
    /// calculated amount.
    /// </remarks>
    public AmountCur paymentAmountBankCur()
    {
        AmountCur paymAmount;
        CurrencyExchangeHelper paymExchRateHelper;
        CurrencyExchangeHelper bankExchRateHelper;
        CurrencyCode bankCur;
        CurrencyCode paymCompanyCurrencyCode;
        CurrencyCode bankCompanyCurrencyCode;

        // get the bank currency
        bankCur = BankAccountTable::find(this.AccountId).CurrencyCode;

        if (bankCur == this.CurrencyCode)
        {
            // Currencies are the same between the bank and payment amount
            paymAmount = this.PaymentAmountCur;
            return paymAmount;
        }

        // This section of code could be written a little tighter if I assumed the RecipientCompany
        // was always available. I chose not to make that assumption to make this code more durable
        // in non cross company scearnios in which the RecipientCompany does not exist.
        if (this.RecipientCompany && this.company() != this.RecipientCompany)
        {
            // convert to payment company currency
            paymExchRateHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(this.RecipientCompany).RecId),
                this.TransDate);

            paymAmount = paymExchRateHelper.calculateTransactionToAccounting(this.CurrencyCode, this.PaymentAmountCur, false);

            // Get currency code for payment company and bank company
            bankCompanyCurrencyCode = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
            paymCompanyCurrencyCode = Ledger::accountingCurrency(CompanyInfo::findDataArea(this.RecipientCompany).RecId);

            // convert payment company currency to bank company currency
            if (paymCompanyCurrencyCode != bankCompanyCurrencyCode)
            {
                paymAmount = paymExchRateHelper.calculateAccountingToTransaction(bankCompanyCurrencyCode, paymAmount, false);
            }
        }
        else
        {
            // convert from transaction currency to company currency
            paymExchRateHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(this.company()).RecId),
                this.TransDate);

            paymAmount = paymExchRateHelper.calculateTransactionToAccounting(this.CurrencyCode, this.PaymentAmountCur, false);
        }

        // convert company currency to bank currency
        bankCur = BankAccountTable::find(this.AccountId).CurrencyCode;

        bankExchRateHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::primaryLedger(CompanyInfo::findDataArea(this.company()).RecId),
            this.TransDate);

        paymAmount = bankExchRateHelper.calculateAccountingToTransaction(bankCur, paymAmount, true);

        return paymAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!BankChequePaymTrans::exist(_recId))
        {
            ret = checkFailed(strfmt(BankChequePaymTrans::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from bankChequePaymTrans
            where bankChequePaymTrans.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BankChequePaymTrans find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankChequePaymTrans bankChequePaymTrans;

        bankChequePaymTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankChequePaymTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankChequePaymTrans
            where bankChequePaymTrans.RecId == _recId;

        return bankChequePaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBankChequeNumAndInvoiceId</Name>
				<Source><![CDATA[
    public static BankChequePaymTrans findByBankChequeNumAndInvoiceId(
        BankChequeNum _bankChequeNum,
        BankAccountID _bankAccountId,
        VendInvoiceId _invoiceId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankChequePaymTrans bankChequePaymTrans;

        bankChequePaymTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankChequePaymTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly bankChequePaymTrans
            where bankChequePaymTrans.ChequeNum == _bankChequeNum
                && bankChequePaymTrans.AccountId == _bankAccountId
                && bankChequePaymTrans.InvoiceId == _invoiceId;

        return bankChequePaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    public static BankChequePaymTrans findByLedgerJournalTrans(
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendTrans _custVendTransInvoice,
        BankAccountID _bankAccountId, 
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankChequePaymTrans bankChequePaymTrans;

        bankChequePaymTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            bankChequePaymTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly crosscompany bankChequePaymTrans
            where bankChequePaymTrans.InvoiceTransDate == _custVendTransInvoice.TransDate
                && bankChequePaymTrans.InvoiceVoucher == _custVendTransInvoice.Voucher
                && bankChequePaymTrans.InvoiceId == _custVendTransInvoice.Invoice
                && bankChequePaymTrans.ChequeNum == _ledgerJournalTrans.BankChequeNum
                && bankChequePaymTrans.AccountId == _bankAccountId
                && bankChequePaymTrans.DataAreaId == _ledgerJournalTrans.OffsetCompany;

        return bankChequePaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByLedgerJournalTransCustVendTrans</Name>
				<Source><![CDATA[
    internal static void deleteByLedgerJournalTransCustVendTrans(LedgerJournalTrans _ledgerJournalTrans, CustVendTrans _custVendTransInvoice, BankAccountId _bankAccountId)
    {
        BankChequePaymTrans bankChequePaymTransToDelete = BankChequePaymTrans::findByLedgerJournalTrans(_ledgerJournalTrans, _custVendTransInvoice, _bankAccountId, true);

        if (bankChequePaymTransToDelete)
        {
            changecompany(bankChequePaymTransToDelete.DataAreaId)
            {
                bankChequePaymTransToDelete.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankChequePaymTrans</Name>
				<Source><![CDATA[
    public static BankChequePaymTrans createBankChequePaymTrans(
        LedgerJournalTrans _ledgerJournalTrans,
        BankAccountID _bankAccountId,
        CustVendTrans _custVendTrans,
        AmountCur _settleAmountCur,
        DiscAmount _cashDiscAmountCur)
    {
        BankChequePaymTrans bankChequePaymTrans;

        bankChequePaymTrans.RecipientAccountNum = _ledgerJournalTrans.parmAccount();
        bankChequePaymTrans.RecipientCompany = _ledgerJournalTrans.Company;
        bankChequePaymTrans.Voucher = _ledgerJournalTrans.Voucher;
        bankChequePaymTrans.TransDate = _ledgerJournalTrans.TransDate;
        bankChequePaymTrans.ChequeNum = _ledgerJournalTrans.BankChequeNum;
        bankChequePaymTrans.AccountId = _bankAccountId;

        bankChequePaymTrans.CurrencyCode = _custVendTrans.CurrencyCode;
        bankChequePaymTrans.InvoiceId = _custVendTrans.Invoice;
        bankChequePaymTrans.InvoiceTransDate = _custVendTrans.TransDate;
        bankChequePaymTrans.InvoiceVoucher = _custVendTrans.Voucher;
        bankChequePaymTrans.InvoiceCompany = _custVendTrans.DataAreaId;
        bankChequePaymTrans.InvoiceAccountNum = _custVendTrans.AccountNum;

        bankChequePaymTrans.CashDiscAmountCur = _cashDiscAmountCur;
        bankChequePaymTrans.PaymentAmountCur = _settleAmountCur;

        return bankChequePaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves several invoice settled counts for a given check number and bank account ID.
    /// </summary>
    /// <param name="_bankChequeNum">
    /// A value of the <c>BankChequeNum</c> type that contains the cheque number of the payment.
    /// </param>
    /// <param name="_accountId">
    /// A value of the <c>CompanyBankAccountId</c> type that contains the bank account ID of the payment.
    /// </param>
    /// <returns>
    /// Number of invoice settled.
    /// </returns>
    public static int getInvoiceCount(BankChequeNum _bankChequeNum, CompanyBankAccountId _accountId)
    {
        BankChequePaymTrans bankChequePaymTrans;

        select count(RecId) from bankChequePaymTrans
            group by bankChequePaymTrans.AccountId, bankChequePaymTrans.ChequeNum
            where bankChequePaymTrans.AccountId == _accountId
                && bankChequePaymTrans.ChequeNum == _bankChequeNum;

        return any2int(bankChequePaymTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankCheque</ConfigurationKey>
	<DeveloperDocumentation>@SYS127018</DeveloperDocumentation>
	<FormRef>BankChequePaymentTrans</FormRef>
	<Label>@SYS50960</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RecipientAccountNum</TitleField1>
	<TitleField2>InvoiceId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AccountIdChequeNumIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>AccountIdChequeNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChequeNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecipientType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecipientAccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Remittance</Name>
			<Label>@sys152838</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemittanceAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendPaymentGroup</Name>
			<Label>@SYS133130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPaymentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Voucher</Name>
			<Label>@SYS12371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS4376</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChequeNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankChequeNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS11818</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS10499</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS50964</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaymentAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS1943</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecipientAccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecipientCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Label>@SYS10499</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecipientType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankChequeRecipientType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RemittanceAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RemittanceAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymentGrouping</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdChequeNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ChequeNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankChequeTable</Name>
			<EntityRelationshipRole>@SYS127011</EntityRelationshipRole>
			<RelatedTable>BankChequeTable</RelatedTable>
			<RelatedTableRole>BankChequeTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>BankChequePaymTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ChequeNum</Name>
					<Field>ChequeNum</Field>
					<RelatedField>ChequeNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountId</Name>
					<Field>AccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<EntityRelationshipRole>@SYS127019</EntityRelationshipRole>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableRole>CustTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>BankChequePaymTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCompany</Name>
					<Field>InvoiceCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>RecipientType</Name>
					<Field>RecipientType</Field>
					<ValueStr>BankChequeRecipientType::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceTransDate</Name>
					<Field>InvoiceTransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceVoucher</Name>
					<Field>InvoiceVoucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecipientCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>RecipientCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RemittanceAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RemittanceAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankChequePaymTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RemittanceAddress</Name>
					<Field>RemittanceAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<EntityRelationshipRole>@SYS127019</EntityRelationshipRole>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableRole>VendTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>BankChequePaymTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCompany</Name>
					<Field>InvoiceCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>RecipientType</Name>
					<Field>RecipientType</Field>
					<ValueStr>BankChequeRecipientType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceTransDate</Name>
					<Field>InvoiceTransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceVoucher</Name>
					<Field>InvoiceVoucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>