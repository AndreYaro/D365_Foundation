<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionBudgetAccountLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionBudgetAccountLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>futureRecordExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a future dated record that corresponds to the current record exists.
    /// </summary>
    /// <returns>
    /// true if a future record exists; otherwise, false .
    /// </returns>
    public boolean futureRecordExists()
    {
        #define.addSeconds(1)
        boolean futureRecordExists = false;
        utcdatetime maxDateValue = DateTimeUtil::maxValue();
        utcdatetime futureFromDate;
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;

        if (this.RecId && this.ValidTo < maxDateValue)
        {
            futureFromDate = (DateTimeUtil::addSeconds(this.ValidTo, #addSeconds));

            select firstonly ValidTimeState(futureFromDate, maxDateValue) RecId from hcmPositionBudgetAccountLine
                where hcmPositionBudgetAccountLine.Position == this.Position
                && hcmPositionBudgetAccountLine.LegalEntity == this.LegalEntity;

            futureRecordExists = (hcmPositionBudgetAccountLine.RecId != 0);
        }

        return futureRecordExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>BudgetPurposeType</c> value for a record.
    /// </summary>
    /// <param name="_showErrorMessage">
    /// A Boolean value that indicates whether to show any error messages; optional.
    /// </param>
    /// <returns>
    /// true if the <c>BudgetPurposeType</c> value is valid; otherwise, false .
    /// </returns>
    public boolean validateBudgetPurposeType(boolean _showErrorMessage = false)
    {
        boolean isValid = true;
        LabelType errorMessage;

        if ((select firstonly hcmBudgetPurposeTypeDetail
                where hcmBudgetPurposeTypeDetail.BudgetPurposeType == this.BudgetPurposeType).RecId != 0)
        {
            // The budget purpose type must have a detail record
            if (!HcmBudgetPurposeTypeDetail::findByBudgetPurposeTypeLegalEntityOnly(this.BudgetPurposeType, this.LegalEntity))
            {
                isValid = false;
                errorMessage = SysLabel::labelId2String(literalStr("@SYS4006539"));
            }
        }

        if (!isValid && _showErrorMessage)
        {
            checkFailed(errorMessage);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(HcmPositionBudgetAccountLine, BudgetPurposeType):
                ret = ret && this.validateBudgetPurposeType(true);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.validateBudgetPurposeType(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if a record ID exists in <c>HcmPositionBudgetAccountLine</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    ///    The value of the record ID to check.
    /// </param>
    /// <returns>
    ///    true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionBudgetAccountLineRecId _recId)
    {
        boolean ret = true;

        if (!HcmPositionBudgetAccountLine::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmPositionBudgetAccountLine::txtNotExist(), tableStr(HcmPositionBudgetAccountLine)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionBudgetAccountLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmPositionBudgetAccountLineRecId _recId)
    {
        utcdatetime validFrom, validTo;
        validFrom = DateTimeUtil::minValue();
        validTo   = DateTimeUtil::maxValue();

        return _recId && (select firstonly ValidTimeState(validFrom, validTo) RecId from hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionBudgetAccountLine</c> table that is based on a specified record
    /// ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionBudgetAccountLine</c> record.
    /// </returns>
    public static HcmPositionBudgetAccountLine find(
    HcmPositionBudgetAccountLineRecId         _recId,
    boolean                                   _forUpdate = false,
    ConcurrencyModel                          _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;
        utcdatetime validFrom, validTo;
        validFrom = DateTimeUtil::minValue();
        validTo   = DateTimeUtil::maxValue();

        hcmPositionBudgetAccountLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionBudgetAccountLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly ValidTimeState(validFrom, validTo) hcmPositionBudgetAccountLine
             where hcmPositionBudgetAccountLine.RecId == _recId;

        return hcmPositionBudgetAccountLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPositionLEBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionBudgetAccountLine</c> table that is based on the specified
    /// <c>Position</c> , <c>LegalEntity</c>, and <c>BudgetPurposeType</c> values.
    /// </summary>
    /// <param name="_position">
    /// The value of the <c>Position</c> field to find.
    /// </param>
    /// <param name="_legalEntity">
    /// The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The value of the <c>BudgetPurposeType</c> field to find.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record or multiple records from the <c>HcmPositionBudgetAccountLine</c> Table; otherwise, an
    /// empty record.
    /// </returns>
    public static HcmPositionBudgetAccountLine findByPositionLEBudgetPurposeType(
    HcmPositionRecId            _position,
    CompanyInfoRecId            _legalEntity,
    HcmBudgetPurposeTypeRecId   _budgetPurposeType,
    utcdatetime                 _validFrom = DateTimeUtil::utcNow(),
    utcdatetime                 _validTo   = _validFrom,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;

        hcmPositionBudgetAccountLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionBudgetAccountLine.concurrencyModel(_concurrencyModel);
        }

        if (_position && _legalEntity && _budgetPurposeType)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.Position == _position &&
                    hcmPositionBudgetAccountLine.LegalEntity == _legalEntity &&
                    hcmPositionBudgetAccountLine.BudgetPurposeType == _budgetPurposeType;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.Position == _position &&
                    hcmPositionBudgetAccountLine.LegalEntity == _legalEntity &&
                    hcmPositionBudgetAccountLine.BudgetPurposeType == _budgetPurposeType;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.Position == _position &&
                    hcmPositionBudgetAccountLine.LegalEntity == _legalEntity &&
                    hcmPositionBudgetAccountLine.BudgetPurposeType == _budgetPurposeType;
            }
        }

        return hcmPositionBudgetAccountLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPositionLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>HcmPositionBudgetAccountLine</c> table.
    /// </summary>
    /// <param name="_position">
    /// The value of the <c>Position</c> field of the record to find.
    /// </param>
    /// <param name="_legalEntity">
    /// The value of the <c>CompanyInfoRecId</c> field of the record to find.
    /// </param>
    /// <param name="_validFrom">
    /// The value of the <c>ValidFrom</c> field.
    /// </param>
    /// <param name="_validTo">
    /// The value of the <c>ValidTo</c> field.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record or multiple records in the <c>HcmPositionBudgetAccountLine</c> table; otherwise, an empty
    /// record.
    /// </returns>
    public static HcmPositionBudgetAccountLine findByPositionLegalEntity(
    HcmPositionRecId        _position,
    CompanyInfoRecId        _legalEntity,
    utcdatetime             _validFrom = DateTimeUtil::utcNow(),
    utcdatetime             _validTo   = _validFrom,
    boolean                 _forUpdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;

        hcmPositionBudgetAccountLine.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionBudgetAccountLine.concurrencyModel(_concurrencyModel);
        }

        if (_position)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.Position == _position
                    &&    hcmPositionBudgetAccountLine.LegalEntity == _legalEntity;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.Position == _position
                    &&    hcmPositionBudgetAccountLine.LegalEntity == _legalEntity;
            }
            else
            {
                select ValidTimeState(_validFrom, _validTo) hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.Position == _position
                    &&    hcmPositionBudgetAccountLine.LegalEntity == _legalEntity;
            }
        }

        return hcmPositionBudgetAccountLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTimeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionBudgetAccountLine</c> table that is based on a specified record
    /// ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> field value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> field value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionBudgetAccountLine</c> record.
    /// </returns>
    /// <remarks>
    /// This method tries to get the record and is an expensive operation.
    /// </remarks>
    public static HcmPositionBudgetAccountLine findByTimeState(
    HcmPositionBudgetAccountLineRecId       _recId,
    utcdatetime                             _validFrom = DateTimeUtil::utcNow(),
    utcdatetime                             _validTo   = _validFrom,
    boolean                                 _forUpdate = false,
    ConcurrencyModel                        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;

        hcmPositionBudgetAccountLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionBudgetAccountLine.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.RecId == _recId;
            }
            else
            {
                select firstonly ValidTimeState(_validFrom, _validTo) hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.RecId == _recId;
            }
        }

        return hcmPositionBudgetAccountLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveByTimeState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the record that corresponds to a specified record ID is active in the specified
    /// date time values.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <param name="_validFrom">
    /// A <c>ValidFrom</c> value.
    /// </param>
    /// <param name="_validTo">
    /// A <c>ValidTo</c> value.
    /// </param>
    /// <returns>
    /// true if the record is active in the specified date time values; otherwise, false .
    /// </returns>
    public static boolean isActiveByTimeState(
    HcmPositionBudgetAccountLineRecId   _recId,
    utcdatetime                         _validFrom = DateTimeUtil::utcNow(),
    utcdatetime                         _validTo   = _validFrom)
    {
        HcmPositionBudgetAccountLine hcmPositionBudgetAccountLine;

        if (_recId)
        {
            if (prmisDefault(_validFrom) && prmisDefault(_validTo))
            {
                select firstonly RecId from hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.RecId == _recId;
            }
            else if (_validFrom == _validTo)
            {
                select firstonly ValidTimeState(_validFrom) RecId from hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.RecId == _recId;
            }
            else
            {
                select firstonly ValidTimeState(_validFrom, _validTo) RecId from hcmPositionBudgetAccountLine
                    where hcmPositionBudgetAccountLine.RecId == _recId;
            }
        }

        return _recId && hcmPositionBudgetAccountLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeTypeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays description of the budget purpose type.
    /// </summary>
    public display HrmDescription purposeTypeDescription()
    {
        return HcmBudgetPurposeType::find(this.BudgetPurposeType).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costElementType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays cost element type of the budget purpose type.
    /// </summary>
    public display HcmBudgetCostElementType costElementType()
    {
        return HcmBudgetPurposeType::find(this.BudgetPurposeType).CostElementType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS190013</DeveloperDocumentation>
	<Label>@GLS190015</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Position</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>PositionLegalEntityPurposeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS98362</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetAccount</Name>
			<Label>@SYS342443</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidTimeState</Name>
			<Label>@SYS8280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPurposeType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBudgetPurposeTypeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Label>@SYS322242</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Position</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PositionLegalEntityPurposeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Position</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BudgetPurposeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPurposeType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmBudgetPurposeType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPurposeType</Name>
					<Field>BudgetPurposeType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Position</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPosition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Position</Name>
					<Field>Position</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>