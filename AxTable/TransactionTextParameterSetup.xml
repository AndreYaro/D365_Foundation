<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionTextParameterSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransactionTextParameterSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference field value.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether a new value has been set.
    /// </param>
    /// <param name="_fieldLabel">
    /// Name of a field in the AOT. 
    /// </param>
    /// <returns>
    /// A <c>FieldLabel</c> of the selected reference field.
    /// </returns>
    /// <remarks>
    /// This is an edit method use on the <c>TransactionTexts</c> form.
    /// </remarks>
    public edit FieldLabel editFieldLabel(boolean _set, FieldLabel _fieldLabel)
    {
        if (_set)
        {
            this.ReferenceFieldName = _fieldLabel;
        }

        return fieldId2pname(tableName2Id(this.ReferenceTableName), fieldName2id(tableName2Id(this.ReferenceTableName), this.ReferenceFieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTableLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference table value.
    /// </summary>
    /// <param name="_set">
    /// Indicates whether a new value has been set.
    /// </param>
    /// <param name="_tableLabel">
    /// Name of a table in the AOT. 
    /// </param>
    /// <returns>
    /// A <c>TableLabel</c> label of the selected reference table.
    /// </returns>
    /// <remarks>
    /// This is an edit method use on the <c>TransactionTexts</c> form.
    /// </remarks>
    public edit TableLabel editTableLabel(boolean _set, TableLabel _tableLabel)
    {
        if (_set)
        {
            this.ReferenceTableName = _tableLabel;
            this.ReferenceFieldName = '';
        }

        return this.ReferenceTableName == '' ? '' : tableId2pname(tableName2Id(this.ReferenceTableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParametersNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ParameterNumber</c> field value.
    /// </summary>
    /// <remarks>
    /// This value must always be larger than or equal to four.
    /// </remarks>
    public void initParametersNum()
    {
        #Define.ParametersNumStart(4)
        TransactionTextParameterSetup   transactionTextParameterSetup;

        if (this.TransactText)
        {
            select maxof(ParameterNumber) from transactionTextParameterSetup
                where transactionTextParameterSetup.TransactText == this.TransactText;

            if (transactionTextParameterSetup.ParameterNumber)
            {
                this.ParameterNumber = transactionTextParameterSetup.ParameterNumber + 1;
            }
            else
            {
                this.ParameterNumber = #ParametersNumStart;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the field value is correct.
    /// </summary>
    /// <param name="_fieldName">
    /// The <c>FieldName</c> to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// What index in the array the field is.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(TransactionTextParameterSetup, ParameterNumber):
                    ret = this.validateParametersNum();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParametersNum</Name>
				<Source><![CDATA[
    private boolean validateParametersNum()
    {
        #Define.ParametersNumStart(4)
        boolean     ret = true;

        if (this.ParameterNumber < #ParametersNumStart)
        {
            ret = checkFailed("@GLS63903");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        // Check ReferenceTableName and ReferenceFieldName explicitly so we can show custom error messages
        if (!this.ReferenceTableName)
        {
            warning(strFmt("@SYS84753", "@SYS34989"));
            ret = false;
        }

        if (!this.ReferenceFieldName)
        {
            warning(strFmt("@SYS84753", "@SYS117996"));
            ret = false;
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the parameters in the <c>TransTxtParameterSetup_CN</c> table exist.
    /// </summary>
    /// <param name="_transactTxt">
    /// The record ID of the <c>TransactTxt</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the parameters exists; otherwise, false.
    /// </returns>
    public static boolean existParameters(RefRecId _transactTxt)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     TransactionTextParameterSetup
                 where
                     TransactionTextParameterSetup.TransactText == _transactTxt).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdRangeByTransactTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a range of <c>TableId</c> values associated with a particular transaction type.
    /// </summary>
    /// <param name="_transactTxt">
    /// The <c>TransactTxt</c> record to use for building the range.
    /// </param>
    /// <returns>
    /// A container holding the valid <c>TableId</c> values associated with the transaction type.
    /// </returns>
    public static container getTableIdRangeByTransactTxt(RefRecId _transactTxt)
    {
        container                   tableIdRange;
        TransactTxt                 transactTxt;
        TransactionTextContext      transactionTextContext;

        select firstonly TransactionType from transactTxt
            where transactTxt.RecId == _transactTxt;

        transactionTextContext = TransactionTextContext::newForTransactionType(transactTxt.TransactionType);

        tableIdRange = transactionTextContext.getSupportedTables();

        return tableIdRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values that will be used for the field reference lookup.
    /// </summary>
    /// <param name="_refTableId">
    /// The <c>TableId</c> value to use for the lookup.
    /// </param>
    /// <returns>
    /// A <c>TmpSysTableField</c> buffer holding the valid values that can be used in the lookup.
    /// </returns>
    public static TmpSysTableField initFieldLookup(RefTableId _refTableId)
    {
        TmpSysTableField        tmpSysTableField;
        SqlDictionary           sqlDictionary;      

        while select sqlDictionary
            where sqlDictionary.tabId   == _refTableId 
			&& sqlDictionary.fieldId != 0
        {
            SysDictField sysDictField = new sysDictField(_refTableId, sqlDictionary.fieldId);

            // Do not show any fields which have been marked as SysDeleted or are not visible
            if (sysDictField != null && sysDictField.configurationKeyIdDefined() != 
				configurationKeyNum(SysDeletedObjects60) && sysDictField.visible())
            {
                tmpSysTableField.FieldId    = sqlDictionary.fieldId;
                tmpSysTableField.FieldName  = fieldId2name(_refTableId, sqlDictionary.fieldId);
                tmpSysTableField.FieldLabel = fieldId2pname(_refTableId, sqlDictionary.fieldId);

                tmpSysTableField.insert();
            }
        }

        return tmpSysTableField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values that will be used for the table reference lookup.
    /// </summary>
    /// <param name="_tableIdRange">
    /// A container that contains the range of the <c>TableId</c> values to use for the lookup.
    /// </param>
    /// <returns>
    /// A <c>TmpSysTableField</c> buffer holding the valid values that can be used in the lookup.
    /// </returns>
    public static TmpSysTableField initTableLookup(container _tableIdRange)
    {
        TmpSysTableField        tmpSysTableField;
        SqlDictionary           sqlDictionary;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryRun                queryRun;

        queryBuildDataSource    = query.addDataSource(tableNum(SqlDictionary));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSortField(fieldNum(SqlDictionary, tabId));
        queryBuildRange         = queryBuildDataSource.addRange(fieldNum(SqlDictionary, tabId));

        queryBuildRange.value(con2Str(_tableIdRange));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            sqlDictionary = queryRun.get(tableNum(SqlDictionary));

            tmpSysTableField.DictTableId    = sqlDictionary.tabId;
            tmpSysTableField.TableLabel     = tableId2pname(sqlDictionary.tabId);
            tmpSysTableField.TableName      = tableId2name(sqlDictionary.tabId);

            tmpSysTableField.insert();
        }

        return tmpSysTableField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for reference field name.
    /// </summary>
    /// <param name="_formControl">
    /// The form control tied to the lookup.
    /// </param>
    /// <param name="_refTableId">
    /// The <c>TableId</c> value that will be used to look up the field names.
    /// </param>
    public static void lookupReferenceFieldName(FormControl _formControl, RefTableId _refTableId)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(TmpSysTableField), _formControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource    = query.addDataSource(tableNum(TmpSysTableField));
        queryBuildDataSource.addSortField(fieldNum(TmpSysTableField, FieldLabel));

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(TmpSysTableField, FieldName));
        sysTableLookup.addLookupfield(fieldNum(TmpSysTableField, FieldLabel));

        sysTableLookup.parmTmpBuffer(TransactionTextParameterSetup::initFieldLookup(_refTableId));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup for reference table name.
    /// </summary>
    /// <param name="_formControl">
    /// The form control tied to the lookup.
    /// </param>
    /// <param name="_transactTxt">
    /// The record ID of the <c>TransactTxt</c> record to use for lookup.
    /// </param>
    public static void lookupReferenceTableName(FormControl    _formControl, RefRecId  _transactTxt)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(TmpSysTableField), _formControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        container               tableIdRange;

        queryBuildDataSource    = query.addDataSource(tableNum(TmpSysTableField));
        queryBuildDataSource.addSortField(fieldNum(TmpSysTableField, TableLabel));

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(TmpSysTableField, TableName));
        sysTableLookup.setLabel("@SYS34989");
        sysTableLookup.addLookupfield(fieldNum(TmpSysTableField, TableLabel));
        sysTableLookup.setLabel("@SYS68625");

        tableIdRange = TransactionTextParameterSetup::getTableIdRangeByTransactTxt(_transactTxt);

        sysTableLookup.parmTmpBuffer(TransactionTextParameterSetup::initTableLookup(tableIdRange));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GLS220298</DeveloperDocumentation>
	<Label>@GLS63900</Label>
	<TitleField1>TransactText</TitleField1>
	<TitleField2>ParameterNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>APARShared</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParameterNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParameterNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactText</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParameterNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceFieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceTableName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransTxtParameters</Name>
			<Label>@GLS63902</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParameterNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editTableLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editFieldLabel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ParameterNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransactionTextParameterNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceFieldName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceTableName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TableName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransactText</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransactionTextParamIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactText</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParameterNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransactTxt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TransactTxt</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TransactTxt</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerTransactTxtParameterSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactText</Name>
					<Field>TransactText</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>