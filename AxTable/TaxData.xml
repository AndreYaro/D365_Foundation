<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxData extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustomDuty_RU</Name>
				<Source><![CDATA[
    boolean checkCustomDuty_RU()
    {
        boolean ret = true;

        if (!this.CustomCurrencyCode_RU && TaxTable::find(this.TaxCode).CustomCombinedRate_RU != CustomCombinedRate_RU::None)
        {
            ret = checkFailed(strFmt("@GLS115316", fieldId2pname(tableNum(TaxData), fieldNum(TaxData, CustomCurrencyCode_RU))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    boolean checkInterval()
    {
        // <GIN>
        #ISOCountryRegionCodes
        TaxType_IN  taxTypeLoc;
        boolean     isIndia = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        // </GIN>
        ;

        if ((this.TaxFromDate && ! this.TaxToDate) || (! this.TaxFromDate && this.TaxToDate))
            return checkFailed("@Tax:FromToDatesEmpty");

        if (this.TaxFromDate > this.TaxToDate)
            return checkFailed("@SYS16982");

        if (this.TaxLimitMax        &&
           (this.TaxLimitMin       > this.TaxLimitMax))
            return checkFailed("@Tax:LowerLimitLessThanUpperLimitCheck");

        // <GIN>
        if (isIndia)
        {
            taxTypeLoc = this.getTaxType_IN();
            if (taxTypeLoc == TaxType_IN::Excise
                && this.TaxFromDate
                && TaxData::existDataWithoutDateforTariffCode_IN(this.ExciseTariffCodes_IN, this.TaxCode, this.RecId))
            {
                return checkFailed("@SYS22088");
            }

            else if (taxTypeLoc == TaxType_IN::Customs
                    && this.TaxFromDate
                    && TaxData::existDataWithoutDateCustomsTariffCode_IN(this.CustomsTariffCodeTable_IN, this.TaxCode, this.RecId))
            {
                return checkFailed("@SYS22088");
            }

            else if (taxTypeLoc == TaxType_IN::SalesTax
                    && this.TaxFromDate
                    && TaxData::existDataWithoutDateforFormType_IN(this.SalesTaxFormTypes_IN, this.TaxCode, this.RecId))
            {
                return checkFailed("@SYS22088");
            }

            else if (taxTypeLoc == TaxType_IN::VAT
                     && this.TaxFromDate
                     && TaxData::existDataWithoutDate(this.TaxCode, this.RecId))
            {
                return checkFailed("@SYS22088");
            }
            else if (taxTypeLoc == TaxType_IN::ServiceTax
                     && this.TaxFromDate
                     && TaxData::existDataWithoutDate(this.TaxCode, this.RecId))
            {
                return checkFailed("@SYS22088");
            }
        }
        else
        {
        // </GIN>
            if (this.TaxFromDate && TaxData::existDataWithoutDate(this.TaxCode, this.RecId))
                return checkFailed("@SYS22088");
        // <GIN>
        }
        if (isIndia)
        {
            if (this.SalesTaxFormTypes_IN)
            {
                if (TaxData::existSamePeriod(this.TaxCode,
                                            this.TaxFromDate,
                                            this.TaxToDate,
                                            this.RecId))
                {
                    if (TaxData::existAmountOverlap_IN(this.SalesTaxFormTypes_IN,
                                                    this.TaxCode,
                                                    this.TaxFromDate,
                                                    this.TaxToDate,
                                                    this.TaxLimitMin,
                                                    this.TaxLimitMax,
                                                    this.RecId))
                    {
                        return checkFailed("@Tax:AmountLimitOverlap");
                    }
                }

                else
                {
                    if (TaxData::existPeriodOverlap_IN(this.SalesTaxFormTypes_IN,
                                                    this.TaxCode,
                                                    this.TaxFromDate,
                                                    this.TaxToDate,
                                                    this.RecId))
                    {
                        return checkFailed("@Tax:DateIntervalOverlap");
                    }
                }
            }

            else if (this.ExciseTariffCodes_IN)
            {
                if (TaxData::existExciseSamePeriod_IN(this.ExciseTariffCodes_IN,
                                                    this.TaxCode,
                                                    this.TaxFromDate,
                                                    this.TaxToDate,
                                                    this.RecId))
                {
                    if (TaxData::existExciseAmountOverlap_IN(this.ExciseTariffCodes_IN,
                                                        this.TaxCode,
                                                        this.TaxFromDate,
                                                        this.TaxToDate,
                                                        this.TaxLimitMin,
                                                        this.TaxLimitMax,
                                                        this.RecId))
                    {
                        return checkFailed("@Tax:AmountLimitOverlap");
                    }
                }
                else
                {
                    if (TaxData::existExcisePeriodOverlap_IN(this.ExciseTariffCodes_IN,
                                                            this.TaxCode,
                                                            this.TaxFromDate,
                                                            this.TaxToDate,
                                                            this.RecId))
                    {
                        return checkFailed("@Tax:DateIntervalOverlap");
                    }
                }
            }

            else if (this.CustomsTariffCodeTable_IN)
            {
                if (TaxData::existSameCustomsTariffCode_IN (this.TaxCode,
                                                            this.CustomsTariffCodeTable_IN))
                {
                    if (TaxData::existCustomsSamePeriod_IN(this.TaxCode,
                                                        this.CustomsTariffCodeTable_IN,
                                                        this.TaxFromDate,
                                                        this.TaxToDate,
                                                        this.RecId))
                    {
                        if (TaxData::existCustomsAmountOverlap_IN(this.TaxCode,
                                                                this.CustomsTariffCodeTable_IN,
                                                                this.TaxFromDate,
                                                                this.TaxToDate,
                                                                this.TaxLimitMin,
                                                                this.TaxLimitMax,
                                                                this.RecId))
                        {
                            return checkFailed("@Tax:AmountLimitOverlap");
                        }
                    }
                    else
                    {
                        if (TaxData::existCustomsPeriodOverlap_IN(this.TaxCode,
                                                                this.CustomsTariffCodeTable_IN,
                                                                this.TaxFromDate,
                                                                this.TaxToDate,
                                                                this.RecId))
                        {
                            return checkFailed("@Tax:DateIntervalOverlap");
                        }
                    }
                }
            }
            else
            {
                if (TaxData::existSamePeriod(this.TaxCode,
                                            this.TaxFromDate,
                                            this.TaxToDate,
                                            this.RecId))
                {
                    if (TaxData::existAmountOverlap(this.TaxCode,
                                                    this.TaxFromDate,
                                                    this.TaxToDate,
                                                    this.TaxLimitMin,
                                                    this.TaxLimitMax,
                                                    this.RecId))
                        return checkFailed("@Tax:AmountLimitOverlap");
                }
                else
                {
                    if (TaxData::existPeriodOverlap(this.TaxCode,
                                                    this.TaxFromDate,
                                                    this.TaxToDate,
                                                    this.RecId))
                        return checkFailed("@Tax:DateIntervalOverlap");
                }
            }
        }
        else
        {
        // </GIN>
            if (TaxData::existSamePeriod(this.TaxCode,
                                            this.TaxFromDate,
                                            this.TaxToDate,
                                            this.RecId))
            {
                if (TaxData::existAmountOverlap(this.TaxCode,
                                                this.TaxFromDate,
                                                this.TaxToDate,
                                                this.TaxLimitMin,
                                                this.TaxLimitMax,
                                                this.RecId))
                    return checkFailed("@Tax:AmountLimitOverlap");
            }
            else
            {
                if (TaxData::existPeriodOverlap(this.TaxCode,
                                                this.TaxFromDate,
                                                this.TaxToDate,
                                                this.RecId))
                    return checkFailed("@Tax:DateIntervalOverlap");
            }

        // <GIN>
        }
        // </GIN>
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        TaxCache::clearScope(TaxCacheScope::TaxData);
        TaxCache::clearScope(TaxCacheScope::TaxDataExistCodeAndDate);


        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustomsDirection_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customs direction for display.
    /// </summary>
    /// <returns>
    /// The customs direction for display.
    /// </returns>
    display Direction_IN displayCustomsDirection_IN()
    {
        return CustomsTariffCodeTable_IN::find(this.CustomsTariffCodeTable_IN).Direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispVATRatio</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method displays the value of Thailand Average VAT ratio.
    /// </summary>
    /// <returns>
    ///     The value of Thailand Average VAT ratio.
    /// </returns>
    public display TaxAverageVATRatio dispVATRatio()
    {
        TaxAverageVATRatio   ret;

        if (this.VATExemptPct)
        {
            ret = 100 - this.VATExemptPct;
        }
        else
        {
            ret = 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the indirect tax taxtype for current tax data.
    /// </summary>
    /// <returns>
    /// The taxtype for current tax data.
    /// </returns>
    public TaxType_IN getTaxType_IN()
    {
        return TaxTable::find(this.TaxCode).TaxType_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        super();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.CustomCalcQty_RU      = 1;
            this.CustomCurrencyCode_RU = InventParameters::find().CustomStatisticCurrencyCode_RU;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        TaxCache::clearScope(TaxCacheScope::TaxData);
        TaxCache::clearScope(TaxCacheScope::TaxDataExistCodeAndDate);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentForTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the percent for tax.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <param name="_salesPurchJournalLine">
    /// The sales purch journal line.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValue</c> class.
    /// </returns>
    public TaxValue  percentForTax_IN(TaxCode                    _taxCode,
                                      TransDate                  _date,
                                      TaxBase                    _amount,
                                      SalesPurchJournalLine   _salesPurchJournalLine)
    {
        TaxTable                taxTable;
        TaxValue                percent;
        TaxBase                 currencyAmount;
        VendTable               vendTable;
        LedgerJournalTrans      ledgerJournalTrans;
        PurchLine               purchLine;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        PurchReqLine            purchReqLine;

        TransTaxInformation     transTaxInformation;

        if (_salesPurchJournalLine.SourceTableId == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_salesPurchJournalLine.SourceRecId);
        }

        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformation(_salesPurchJournalLine.SourceTableId, _salesPurchJournalLine.SourceRecId);

        if (_taxCode)
        {
            taxTable  = TaxTable::find(_taxCode);

            if (taxTable.TaxCurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                 currencyAmount = CurrencyExchangeHelper::curAmount(currencyAmount,
                                                      taxTable.TaxCurrencyCode,
                                                      _date);
            }
            else
            {
                currencyAmount = _amount;
            }
            switch (taxTable.TaxBase)
            {
                case TaxBaseType::AmountByUnit :
                    if (taxTable.TaxType_IN == TaxType_IN::SalesTax)
                    {
                        percent = TaxData::findFormType_IN(_taxCode, transTaxInformation.SalesTaxFormTypes, _date, 0).TaxValue;
                    }
                    if (taxTable.TaxType_IN == TaxType_IN::VAT)
                    {
                        percent = TaxData::percent(_taxCode, _date, 0);
                    }

                    if (taxTable.TaxType_IN == TaxType_IN::ServiceTax)
                    {
                        percent = TaxData::percent(_taxCode, _date, 0);
                    }

                    if (taxTable.TaxType_IN == TaxType_IN::Excise)
                    {
                        if (_salesPurchJournalLine.SourceTableId == tableNum(LedgerJournalTrans))
                        {
                            select firstonly ledgerJournalTrans
                                where ledgerJournalTrans.RecId   == _salesPurchJournalLine.SourceRecId;

                            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                            {
                                vendTable = ledgerJournalTrans.findVendTable();
                            }
                            else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                            {
                                vendTable = ledgerJournalTrans.findVendForOffset();
                            }
                        }
                        else if (_salesPurchJournalLine.SourceTableId == tableNum(PurchLine))
                        {
                            select firstonly purchLine
                                where purchLine.RecId   == _salesPurchJournalLine.SourceRecId;

                            vendTable = purchLine.purchTable().vendTable_InvoiceAccount();
                        }
                        else if (_salesPurchJournalLine.SourceTableId == tableNum(PurchReqLine))
                        {
                            select firstonly purchReqLine
                                where purchReqLine.RecId   == _salesPurchJournalLine.SourceRecId;

                            changecompany(purchReqLine.buyingLegalEntity2DataArea())
                            {
                                vendTable = VendTable::find(purchReqLine.VendAccount);
                            }
                        }
                        else if (vendInvoiceInfoLine.RecId != 0)
                        {
                            vendTable = vendInvoiceInfoLine.vendInvoiceInfoTable().vendTable_InvoiceAccount();
                        }

                        if (vendTable && vendTable.isSSI())
                        {
                            percent = TaxData::findExciseType_IN(_taxCode, transTaxInformation.ExciseTariffCodes, _date, 0).ConcessionalValue_IN;
                        }
                        else
                        {
                            percent = TaxData::findExciseType_IN(_taxCode, transTaxInformation.ExciseTariffCodes, _date, 0).TaxValue;
                        }
                    }
                    if (taxTable.TaxType_IN == TaxType_IN::Customs)
                    {
                        percent = TaxData::getCustomsPercent_IN(_salesPurchJournalLine, _taxCode, _date, 0);
                    }
                    break;
                case TaxBaseType::PctPerNet :

                    if (taxTable.TaxType_IN == TaxType_IN::SalesTax)
                    {
                        percent = TaxData::findFormType_IN(_taxCode, transTaxInformation.SalesTaxFormTypes, _date, currencyAmount).TaxValue;
                    }
                    if (taxTable.TaxType_IN == TaxType_IN::VAT)
                    {
                        percent = TaxData::percent(_taxCode, _date, _amount);
                    }

                    if (taxTable.TaxType_IN == TaxType_IN::ServiceTax)
                    {
                        percent = TaxData::percent(_taxCode, _date, _amount);
                    }
                    if (taxTable.TaxType_IN == TaxType_IN::Excise)
                    {
                        if (_salesPurchJournalLine.SourceTableId == tableNum(ledgerJournalTrans))
                        {
                            select firstonly ledgerJournalTrans
                                where ledgerJournalTrans.RecId   == _salesPurchJournalLine.SourceRecId;

                            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                            {
                                vendTable = ledgerJournalTrans.findVendTable();
                            }
                            else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                            {
                                vendTable = ledgerJournalTrans.findVendForOffset();
                            }
                        }
                        else if (_salesPurchJournalLine.SourceTableId == tableNum(PurchLine))
                        {
                            select firstonly purchLine
                                where purchLine.RecId   == _salesPurchJournalLine.SourceRecId;

                            vendTable = purchLine.purchTable().vendTable_InvoiceAccount();
                        }
                        else if (_salesPurchJournalLine.SourceTableId == tableNum(PurchReqLine))
                        {
                            select firstonly purchReqLine
                                where purchReqLine.RecId  == _salesPurchJournalLine.SourceRecId;

                            changecompany(purchReqLine.buyingLegalEntity2DataArea())
                            {
                                vendTable = VendTable::find(purchReqLine.VendAccount);
                            }
                        }
                        else if (vendInvoiceInfoLine.RecId != 0)
                        {
                            vendTable = vendInvoiceInfoLine.vendInvoiceInfoTable().vendTable_InvoiceAccount();
                        }

                        if (vendTable && vendTable.isSSI())
                        {
                            percent = TaxData::findExciseType_IN(_taxCode, transTaxInformation.ExciseTariffCodes, _date, currencyAmount).ConcessionalValue_IN;
                        }
                        else
                        {
                            percent = TaxData::findExciseType_IN(_taxCode, transTaxInformation.ExciseTariffCodes, _date, currencyAmount).TaxValue;
                        }
                    }
                    if (taxTable.TaxType_IN == TaxType_IN::Customs)
                    {
                        percent = TaxData::getCustomsPercent_IN(_salesPurchJournalLine, _taxCode, _date, currencyAmount);
                    }
                    break;

                default:
                    break;
            }
        }

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailConnActionManagement::errorOnRename(this);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleDataSourceFields</Name>
				<Source><![CDATA[
    public void setVisibleDataSourceFields()
    {
        FormDataObject  formDataObject;
        ;

        if (FormDataUtil::isFormDataSource(this) &&
            TaxParameters::find().PurchTaxOnOperations)
        {
            formDataObject = FormDataUtil::getFormDataSource(this).object(fieldNum(TaxData, vatExemptPct));
            formDataObject.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TaxCache::clearScope(TaxCacheScope::TaxData);
        TaxCache::clearScope(TaxCacheScope::TaxDataExistCodeAndDate);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean     ret;
        TaxTable    taxTable;

        // <GIN>
        boolean taxParametersMarked = TaxParameters::checkTaxParameters_IN();
        // </GIN>

        ret = super(p1);
        if (ret)
        {
            switch (p1)
            {
                case (fieldNum(TaxData,vatExemptPct)) :
                    if (this.vatExemptPct > 100)
                    {
                        ret = checkFailed("@SYS28722");
                    }
                    break;

                // <GIN>
                case fieldNum(TaxData,ConcessionalValue_IN)     :
                    if (taxParametersMarked)
                    {
                        select firstonly taxTable
                            where taxTable.TaxCode == this.TaxCode;
                        if (this.ConcessionalValue_IN < 0 && !taxTable.NegativeTax)
                        {
                            ret = checkFailed("@GLS5275");
                        }
                    }
                    break;
                case (fieldNum(TaxData,PreferentialValue_IN))     :
                    if (taxParametersMarked)
                    {
                        select firstonly taxTable
                            where taxTable.TaxCode == this.TaxCode;
                        if (this.PreferentialValue_IN < 0 && !taxTable.NegativeTax)
                        {
                            ret = checkFailed("@SYS54423");
                        }
                    }
                    break;
                case fieldNum(TaxData, CustomsTariffCodeTable_IN):
                    if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs))
                    {
                        if (!this.CustomsTariffCodeTable_IN)
                        {
                            ret = checkFailed(strFmt("@SYS97692", CustomsTariffCodeTable_IN::find(this.CustomsTariffCodeTable_IN).TariffCode, fieldPName(CustomsTariffCodeTable_IN, TariffCode), tablePName(CustomsTariffCodeTable_IN)));
                        }
                    }
                    break;
                // </GIN>
                case (fieldNum(TaxData,TaxValue))     :
                    select firstonly NegativeTax from taxTable
                    where taxTable.TaxCode == this.TaxCode;

                    if (this.TaxValue < 0 && !taxTable.NegativeTax)
                    {
                        ret = checkFailed("@SYS54423");
                    }
                    break;
                // <GEERU>
                case (fieldNum(TaxData,CustomCalcQty_RU)):
                    if (this.CustomCalcQty_RU <= 0)
                    {
                        ret = checkFailed("@GLS115327");
                    }
                    break;

                case (fieldNum(TaxData,CustomRateAmount_RU)):
                    if (this.CustomRateAmount_RU < 0)
                    {
                        ret = checkFailed("@GLS115328");
                    }
                    break;

                // </GEERU>
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        // <GIN>
        TaxData         taxData;
        TaxTable        taxTable;
        TaxParameters   taxParameters = TaxParameters::find();
        // </GIN>

        ret = super();

        // <GIN>
        if (taxParameters.Excise_IN && ret && TaxTable::find(this.TaxCode).TaxType_IN == TaxType_IN::Excise)
        {
            select taxTable where taxTable.TaxCode == this.TaxCode;
                while select taxData where taxData.TaxCode    == this.TaxCode
                    {
                        if (taxData.ExciseTariffCodes_IN   == this.ExciseTariffCodes_IN
                            && taxTable.TaxCode    == this.TaxCode
                            && taxData.TaxFromDate == this.TaxFromDate
                            && taxData.TaxToDate   == this.TaxToDate
                            && taxData.TaxLimitMin == this.TaxLimitMin
                            && taxData.TaxLimitMax == this.TaxLimitMax
                            && taxData.RecId       != this.RecId)
                        {
                            if (taxData)
                            {
                                ret = checkFailed("@GLS5276");
                            }
                        }
                    }
        }

        if (taxParameters.Customs_IN && ret && TaxTable::find(this.TaxCode).TaxType_IN == TaxType_IN::Customs)
        {
            if (this.CustomsTariffCodeTable_IN == 0)
            {
                ret = checkFailed(strFmt("@SYS26332", "@GLS5186"));
            }
        }
        // </GIN>

        if (ret)
            ret = this.checkInterval();

        // <GEERU>
        ret = ret && this.checkCustomDuty_RU();
        // </GEERU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            select TaxSubstitution_BR
                from taxTable where taxTable.TaxCode == this.TaxCode;

            if (taxTable.TaxSubstitution_BR == TaxSubstitutionEnum_BR::SimplifiedEstimate && this.TaxValue == 0)
            {
                ret = checkFailed("@SYS4000402");
            }
        }
        // </GBR>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount2base_RU</Name>
				<Source><![CDATA[
    // get tax base amount and percent
    // by tax code and amount
    public static container amount2base_RU(TaxCode      _taxCode,
                                                  TransDate    _date,
                                                  TaxAmountCur _taxAmount,
                                                  boolean      _taxOnTax = true)
    {
        TaxTable    taxTable = TaxTable::find(_taxCode);
        TaxData     taxData;

        TaxBaseCur  base, tmpBase;
        TaxValue    percent;

        boolean     loop = true;
        TaxCode     taxOnTax = _taxOnTax ? taxTable.TaxOnTax : "";

        container   checkPattern = [ taxTable.TaxBase, taxOnTax ];
        ;
        taxData.selectLocked(false);

        switch (checkPattern)
        {
            case [ TaxBaseType::AmountByUnit, "" ] :
                percent = TaxData::find(_taxCode, _date, 0).TaxValue;
                if (percent)
                {
                    base    = _taxAmount * 100 / percent;
                }
                else
                {
                    throw error(strFmt("@SYS78463", "@GLS104909"));
                }
                break;
            case [ TaxBaseType::PctPerTax,    "" ] :
            case [ TaxBaseType::PctPerNet,    "" ] :
            case [ TaxBaseType::PctGrosOnNet, "" ] :
            case [ TaxBaseType::PctPerGross,  "" ] :
                select taxData
                    where  taxData.TaxCode          == _taxCode &&
                           taxData.TaxFromDate      <= _date    &&
                          (! taxData.TaxToDate      ||
                           taxData.TaxToDate        >= _date);
                while (taxData && loop)
                {
                    percent = taxData.TaxValue;
                    if (percent)
                    {
                        base    = _taxAmount * 100 / percent;
                    }
                    else
                    {
                        throw error(strFmt("@SYS78463", "@GLS104909"));
                    }

                    if ( taxData.TaxLimitMin    <= base &&
                        (! taxData.TaxLimitMax  ||
                         taxData.TaxLimitMax    >= base))
                    {
                        loop = false;
                    }
                    next taxData;
                }

                if (loop)
                {
                    throw error(strFmt(TaxData::txtNotExist(), _taxCode));
                }
                break;
            case [ TaxBaseType::PctPerGross, taxTable.TaxOnTax ] :
                select taxData
                    where  taxData.TaxCode          == taxTable.TaxOnTax &&
                           taxData.TaxFromDate      <= _date             &&
                          (! taxData.TaxFromDate    ||
                           taxData.TaxFromDate      >= _date);
                while (loop && taxData)
                {
                    tmpBase    = _taxAmount * 100 / (100 + taxData.TaxValue);
                    if (tmpBase >= taxData.TaxLimitMin &&
                        (! taxData.TaxLimitMax      ||
                         tmpBase <= taxData.TaxLimitMax))
                    {
                        loop = false;
                    }

                    next taxData;
                }

                if (loop)
                {
                    throw error(strFmt(TaxData::txtNotExist(), _taxCode));
                }

                [ base, percent ] = TaxData::amount2base_RU(_taxCode, _date, tmpBase, false);

                break;
        }

        return [ base, percent ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxCode _taxCode )
    {
        boolean ret = true;
        ;

        if (!TaxData::exist(_taxCode))
        {
            ret = checkFailed(strFmt(TaxData::txtNotExist(), _taxCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxCode _taxCode )
    {
        boolean found;
        ;
        if (_taxCode)
        found = (select firstonly RecId from taxData
                 where taxData.TaxCode == _taxCode).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAmountInterval</Name>
				<Source><![CDATA[
    static boolean existAmountInterval(TaxCode            _taxCode,
                                       TaxValidDate       _date,
                                       TaxBase            _taxLimit)

    {
        return TaxData::find(_taxCode, _date, _taxLimit).RecId   != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAmountOverlap</Name>
				<Source><![CDATA[
    static private boolean existAmountOverlap(TaxCode            _taxCode,
                                                     TaxValidDate       _fromDate,
                                                     TaxValidDate       _toDate,
                                                     TaxBase            _taxLimitMin,
                                                     TaxBase            _taxLimitMax,
                                                     RecId              _recId)
    {
        TaxData taxData;
        boolean ret = false;

        if (_taxCode)
        {
            while select TaxLimitMax, TaxLimitMin
                  from taxData
                  where taxData.TaxCode                 == _taxCode               &&
                        taxData.RecId                   != _recId                 &&
                        taxData.TaxFromDate             == _fromDate              &&
                        taxData.TaxToDate               == _toDate
            {
                if (! taxData.TaxLimitMax && ! _taxLimitMax)
                    ret = true;

                if (taxData.TaxLimitMin == _taxLimitMin &&
                    taxData.TaxLimitMax == _taxLimitMax)
                    ret = true;

                if (taxData.TaxLimitMin <= _taxLimitMin &&
                   (taxData.TaxLimitMax >  _taxLimitMin || ! taxData.TaxLimitMax))
                    ret = true;

                if (_taxLimitMax &&
                    taxData.TaxLimitMin <  _taxLimitMax &&
                   (taxData.TaxLimitMax >= _taxLimitMax || ! taxData.TaxLimitMax))
                    ret = true;

                if (taxData.TaxLimitMax &&
                    taxData.TaxLimitMin >= _taxLimitMin &&
                   (taxData.TaxLimitMax <= _taxLimitMax || ! _taxLimitMax))
                    ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAmountOverlap_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// To validate whether if there is amount ovelapped between given dates
    /// </summary>
    /// <param name="_formType">
    /// RecId of SalesTaxFormTypes_IN
    /// </param>
    /// <param name="_taxCode">
    /// Code that identifies tax
    /// </param>
    /// <param name="_fromDate">
    /// From date for the date range
    /// </param>
    /// <param name="_toDate">
    /// To date for the date range
    /// </param>
    /// <param name="_taxLimitMin">
    /// Lower limit for tax calculation
    /// </param>
    /// <param name="_taxLimitMax">
    /// Higher limit for tax calculation
    /// </param>
    /// <param name="_recId">
    /// RecId of TaxData table
    /// </param>
    /// <returns>
    /// False/True if the amount exists
    /// </returns>
    static private boolean existAmountOverlap_IN(SalesTaxFormTypesRecId_IN   _formType,
                                                        TaxCode                     _taxCode,
                                                        TaxValidDate                _fromDate,
                                                        TaxValidDate                _toDate,
                                                        TaxBase                     _taxLimitMin,
                                                        TaxBase                     _taxLimitMax,
                                                        RecId                       _recId)
    {
        TaxData taxData;
        boolean ret = false;

        if (_taxCode)
        {
            while select TaxLimitMax, TaxLimitMin
                  from taxData
                  where taxData.SalesTaxFormTypes_IN    == _formType &&
                        taxData.TaxCode                 == _taxCode  &&
                        taxData.RecId                   != _recId    &&
                        taxData.TaxFromDate             == _fromDate &&
                        taxData.TaxToDate               == _toDate
            {
                if (! taxData.TaxLimitMax && ! _taxLimitMax)
                {
                    ret = true;
                }

                if (taxData.TaxLimitMin == _taxLimitMin &&
                    taxData.TaxLimitMax == _taxLimitMax)
                {
                    ret = true;
                }

                if (taxData.TaxLimitMin <= _taxLimitMin &&
                    (taxData.TaxLimitMax >  _taxLimitMin || ! taxData.TaxLimitMax))
                {
                    ret = true;
                }

                if (_taxLimitMax &&
                    taxData.TaxLimitMin <  _taxLimitMax &&
                    (taxData.TaxLimitMax >= _taxLimitMax || ! taxData.TaxLimitMax))
                {
                    ret = true;
                }

                if (taxData.TaxLimitMax &&
                    taxData.TaxLimitMin >= _taxLimitMin &&
                    (taxData.TaxLimitMax <= _taxLimitMax || ! _taxLimitMax))
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCodeAndDate</Name>
				<Source><![CDATA[
    static boolean existCodeAndDate(
        TaxCode _taxCode,
        TaxValidDate _date)
    {
        if (_taxCode)
        {
            var key = [curExt(), _taxCode, _date];

            var cacheValue = TaxCache::getValue(TaxCacheScope::TaxDataExistCodeAndDate, key);
            if (cacheValue != conNull())
            {
                return conPeek(cacheValue, 1);
            }

            TaxData taxData;
            select firstonly RecId from taxData
                where taxData.TaxCode == _taxCode
                    && (taxData.TaxFromDate <= _date || !taxData.TaxFromDate)
                    && (taxData.TaxToDate >= _date || !taxData.TaxToDate);

            TaxCache::insertValue(TaxCacheScope::TaxDataExistCodeAndDate, key, [taxData.RecId != 0]);

            return taxData.RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustomsAmountOverlap_IN</Name>
				<Source><![CDATA[
    static private boolean existCustomsAmountOverlap_IN(TaxCode                  _taxCode,
                                                               RefRecId                 _tariffCode,
                                                               TaxValidDate             _fromDate,
                                                               TaxValidDate             _toDate,
                                                               TaxBase                  _taxLimitMin,
                                                               TaxBase                  _taxLimitMax,
                                                               RecId                    _recId)
    {
        TaxData taxData;
        boolean ret = false;

        if (_taxCode)
        {
            while select TaxLimitMax, TaxLimitMin
                  from taxData
                  where taxData.TaxCode                     == _taxCode               &&
                        taxData.CustomsTariffCodeTable_IN   == _tariffCode            &&
                        taxData.RecId                       != _recId                 &&
                        taxData.TaxFromDate                 == _fromDate              &&
                        taxData.TaxToDate                   == _toDate
            {
                if (! taxData.TaxLimitMax && ! _taxLimitMax)
                {
                    ret = true;
                }

                if (taxData.TaxLimitMin == _taxLimitMin &&
                    taxData.TaxLimitMax == _taxLimitMax)
                {
                    ret = true;
                }

                if (taxData.TaxLimitMin <= _taxLimitMin &&
                   (taxData.TaxLimitMax >  _taxLimitMin || ! taxData.TaxLimitMax))
                {
                    ret = true;
                }

                if (_taxLimitMax &&
                    taxData.TaxLimitMin <  _taxLimitMax &&
                   (taxData.TaxLimitMax >= _taxLimitMax || ! taxData.TaxLimitMax))
                {
                    ret = true;
                }

                if (taxData.TaxLimitMax &&
                    taxData.TaxLimitMin >= _taxLimitMin &&
                   (taxData.TaxLimitMax <= _taxLimitMax || ! _taxLimitMax))
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustomsPeriodOverlap_IN</Name>
				<Source><![CDATA[
    static private boolean existCustomsPeriodOverlap_IN(TaxCode          _taxCode,
                                                               RefRecId                _tariffCode,
                                                               TaxValidDate            _fromDate,
                                                               TaxValidDate            _toDate,
                                                               RecId                   _recId)
    {
        TaxData taxData;
        boolean ret = false;
        ;

        if (_taxCode)
        {
            while select TaxFromDate, TaxToDate
                  from taxData
                  where taxData.TaxCode                     == _taxCode    &&
                        taxData.CustomsTariffCodeTable_IN   == _tariffCode &&
                        taxData.RecId                       != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }
                if (_fromDate   >= taxData.TaxFromDate  &&
                    _fromDate   <= taxData.TaxToDate    ||
                    _toDate     >= taxData.TaxFromDate  &&
                    _toDate     <= taxData.TaxToDate)
                {
                    ret = true;
                }
                if (taxData.TaxFromDate >= _fromDate    &&
                    taxData.TaxFromDate <= _toDate      ||
                    taxData.TaxToDate   >= _fromDate    &&
                    taxData.TaxToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustomsSamePeriod_IN</Name>
				<Source><![CDATA[
    static private boolean existCustomsSamePeriod_IN(TaxCode                     _taxCode,
                                                            RefRecId                    _tariffCode,
                                                            TaxValidDate                _fromDate,
                                                            TaxValidDate                _toDate,
                                                            RecId                       _recId)
    {
        if (_taxCode)
        {
            return (select RecId from taxData
                    where taxData.TaxCode                   == _taxCode     &&
                          taxData.CustomsTariffCodeTable_IN == _tariffCode  &&
                          taxData.TaxFromDate               == _fromDate    &&
                          taxData.TaxToDate                 == _toDate      &&
                          taxData.RecId                     != _recId).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
    static private boolean existDataWithoutDate(TaxCode  _taxCode,
                                                       RecId    _recId)
    {
        if (_taxCode)
            return (select RecId from taxData
                    where taxData.TaxCode       == _taxCode      &&
                          taxData.RecId         != _recId       &&
                          ! taxData.TaxFromDate                  &&
                          ! taxData.TaxToDate).RecId != 0;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDateCustomsTariffCode_IN</Name>
				<Source><![CDATA[
    static private boolean existDataWithoutDateCustomsTariffCode_IN(RefRecId         _tariffcode,
                                                                           TaxCode          _taxCode,
                                                                           RecId            _recId)
    {
        if (_taxCode)
        {
            return (select RecId from taxData
                    where taxData.TaxCode                   == _taxCode     &&
                          taxdata.CustomsTariffCodeTable_IN    == _tariffcode  &&
                          taxData.RecId                     != _recId       &&
                          ! taxData.TaxFromDate                   &&
                          ! taxData.TaxToDate).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDateforFormType_IN</Name>
				<Source><![CDATA[
    static private boolean existDataWithoutDateforFormType_IN(
        SalesTaxFormTypesRecId_IN   _salesTaxformType,
        TaxCode                     _taxCode,
        RecId                       _recId)
    {
        if (_taxCode)
        {
            return (select RecId from taxData
                    where taxData.TaxCode               == _taxCode             &&
                          taxdata.SalesTaxFormTypes_IN  == _salesTaxformType    &&
                                  taxData.RecId         != _recId               &&
                          ! taxData.TaxFromDate                                 &&
                          ! taxData.TaxToDate).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDateforTariffCode_IN</Name>
				<Source><![CDATA[
    static private boolean existDataWithoutDateforTariffCode_IN(RefRecId    _tariffcode,
                                                                       TaxCode          _taxCode,
                                                                       RecId            _recId)
    {
        if (_taxCode)
        {
            return (select RecId from taxData
                    where taxData.TaxCode               == _taxCode     &&
                          taxdata.ExciseTariffCodes_IN  == _tariffcode  &&
                                  taxData.RecId         != _recId       &&
                          ! taxData.TaxFromDate                         &&
                          ! taxData.TaxToDate).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExciseAmountOverlap_IN</Name>
				<Source><![CDATA[
    static private boolean existExciseAmountOverlap_IN(RefRecId     _tariffCode,
                                                             TaxCode           _taxCode,
                                                             TaxValidDate      _fromDate,
                                                             TaxValidDate      _toDate,
                                                             TaxBase           _taxLimitMin,
                                                             TaxBase           _taxLimitMax,
                                                             RecId             _recId)
    {
        TaxData taxData;
        boolean ret = false;

        if (_taxCode)
        {
            while select TaxLimitMax, TaxLimitMin
                  from taxData
                  where taxData.TaxCode                 == _taxCode               &&
                        taxData.RecId                   != _recId                 &&
                        taxData.ExciseTariffCodes_IN    == _tariffCode            &&
                        taxData.TaxFromDate             == _fromDate              &&
                        taxData.TaxToDate               == _toDate
            {
                if (! taxData.TaxLimitMax && ! _taxLimitMax)
                {
                    ret = true;
                }
                if (taxData.TaxLimitMin == _taxLimitMin &&
                    taxData.TaxLimitMax == _taxLimitMax)
                {
                    ret = true;
                }
                if (taxData.TaxLimitMin <= _taxLimitMin &&
                   (taxData.TaxLimitMax >  _taxLimitMin || ! taxData.TaxLimitMax))
                {
                    ret = true;
                }
                if (_taxLimitMax &&
                    taxData.TaxLimitMin <  _taxLimitMax &&
                   (taxData.TaxLimitMax >= _taxLimitMax || ! taxData.TaxLimitMax))
                {
                    ret = true;
                }
                if (taxData.TaxLimitMax &&
                    taxData.TaxLimitMin >= _taxLimitMin &&
                   (taxData.TaxLimitMax <= _taxLimitMax || ! _taxLimitMax))
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExcisePeriodOverlap_IN</Name>
				<Source><![CDATA[
    static private boolean existExcisePeriodOverlap_IN(RefRecId     _tariffCode,
                                                              TaxCode           _taxCode,
                                                              TaxValidDate      _fromDate,
                                                              TaxValidDate      _toDate,
                                                              RecId             _recId)
    {
        TaxData taxData;
        boolean ret = false;
        ;
        if (_taxCode)
        {
            while select TaxFromDate, TaxToDate
                  from taxData
                  where taxData.TaxCode                 == _taxCode    &&
                        taxData.ExciseTariffCodes_IN    == _tariffCode &&
                        taxData.RecId                   != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }
                if (_fromDate   >= taxData.TaxFromDate  &&
                    _fromDate   <= taxData.TaxToDate    ||
                    _toDate     >= taxData.TaxFromDate  &&
                    _toDate     <= taxData.TaxToDate)
                {
                    ret = true;
                }
                if (taxData.TaxFromDate >= _fromDate    &&
                    taxData.TaxFromDate <= _toDate      ||
                    taxData.TaxToDate   >= _fromDate    &&
                    taxData.TaxToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExciseSamePeriod_IN</Name>
				<Source><![CDATA[
    static private boolean existExciseSamePeriod_IN(RefRecId          _tariffCode,
                                                           TaxCode           _taxCode,
                                                           TaxValidDate      _fromDate,
                                                           TaxValidDate      _toDate,
                                                           RecId             _recId)

    {
        if (_taxCode)
        {
            return (select RecId from taxData
                    where taxData.TaxCode               == _taxCode     &&
                          taxData.TaxFromDate           == _fromDate    &&
                          taxData.TaxToDate             == _toDate      &&
                          taxdata.ExciseTariffCodes_IN  == _tariffCode  &&
                          taxData.RecId                 != _recId).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap</Name>
				<Source><![CDATA[
    static private boolean existPeriodOverlap(TaxCode      _taxCode,
                                                     TaxValidDate _fromDate,
                                                     TaxValidDate _toDate,
                                                     RecId        _recId)
    {
        TaxData taxData;
        boolean ret = false;
        ;
        if (_taxCode)
        {
            while select TaxFromDate, TaxToDate
                  from taxData
                  where taxData.TaxCode          == _taxCode &&
                        taxData.RecId            != _recId
            {
                if (!_fromDate || !_toDate)
                    ret = true;
                if (_fromDate   >= taxData.TaxFromDate  &&
                    _fromDate   <= taxData.TaxToDate    ||
                    _toDate     >= taxData.TaxFromDate  &&
                    _toDate     <= taxData.TaxToDate)
                    ret = true;
                if (taxData.TaxFromDate >= _fromDate    &&
                    taxData.TaxFromDate <= _toDate      ||
                    taxData.TaxToDate   >= _fromDate    &&
                    taxData.TaxToDate   <= _toDate)
                    ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriodOverlap_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the existence of overlapping periods
    /// </summary>
    /// <param name="_formType">
    /// Sales tax form type
    /// </param>
    /// <param name="_taxCode">
    /// Code attached to the tax
    /// </param>
    /// <param name="_fromDate">
    /// From date
    /// </param>
    /// <param name="_toDate">
    /// To date
    /// </param>
    /// <param name="_recId">
    /// Record Id of TaxData record
    /// </param>
    /// <returns>
    /// True if the specified record exists; otherwise, false.
    /// </returns>
    static private boolean existPeriodOverlap_IN(SalesTaxFormTypesRecId_IN  _formType,
                                                        TaxCode                    _taxCode,
                                                        TaxValidDate               _fromDate,
                                                        TaxValidDate               _toDate,
                                                        RecId                      _recId)
    {
        TaxData taxData;
        boolean ret = false;

        if (_taxCode)
        {
            while select TaxFromDate, TaxToDate
                  from taxData
                  where taxData.SalesTaxFormTypes_IN == _formType  &&
                        taxData.TaxCode              == _taxCode   &&
                        taxData.RecId                != _recId
            {
                if (!_fromDate || !_toDate)
                {
                    ret = true;
                }

                if (_fromDate   >= taxData.TaxFromDate  &&
                    _fromDate   <= taxData.TaxToDate    ||
                    _toDate     >= taxData.TaxFromDate  &&
                    _toDate     <= taxData.TaxToDate)
                {
                    ret = true;
                }

                if (taxData.TaxFromDate >= _fromDate    &&
                    taxData.TaxFromDate <= _toDate      ||
                    taxData.TaxToDate   >= _fromDate    &&
                    taxData.TaxToDate   <= _toDate)
                {
                    ret = true;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSameCustomsTariffCode_IN</Name>
				<Source><![CDATA[
    static private boolean existSameCustomsTariffCode_IN(TaxCode                     _taxCode,
                                                                RefRecId                    _tariffCode)
    {
        if (_taxCode)
        {
            return (select RecId from taxData
                    where taxData.TaxCode              == _taxCode
                       && taxData.CustomsTariffCodeTable_IN == _tariffCode).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSamePeriod</Name>
				<Source><![CDATA[
    static private boolean existSamePeriod(TaxCode            _taxCode,
                                                  TaxValidDate       _fromDate,
                                                  TaxValidDate       _toDate,
                                                  RecId              _recId)
    {
        if (_taxCode)
            return (select RecId from taxData
                    where taxData.TaxCode           == _taxCode     &&
                          taxData.TaxFromDate       == _fromDate    &&
                          taxData.TaxToDate         == _toDate      &&
                          taxData.RecId             != _recId).RecId != 0;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxData find(TaxCode          _taxCode,
                               TransDate        _date,
                               TaxBase          _base ,
                               boolean          _forupdate        = false,
                               ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxData taxData;
        container           taxkey;
        container           cacheValue;
        int                 records;
        boolean             found;

        if (_taxCode)
        {
            if (_forupdate)
            {
                taxData.selectForUpdate(_forupdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    taxData.concurrencyModel(_concurrencyModel);
                }

                select firstonly taxData
                    where taxData.TaxCode     == _taxCode    &&
                       (! taxData.TaxFromDate                ||
                         (taxData.TaxFromDate <= _date       &&
                          taxData.TaxToDate   >= _date))     &&
                        ((taxData.TaxLimitMin <= abs(_base)  &&
                         (taxData.TaxLimitMax >= abs(_base)) ||
                         (taxData.TaxLimitMin <= abs(_base)  &&
                         !taxData.TaxLimitMax)));

                found = true;
            }
            else
            {
                taxkey = [curext(), _taxCode, _date];
                cacheValue = TaxCache::getValue(TaxCacheScope::TaxData, taxkey);
                if (cacheValue == conNull())
                {
                    while select taxData
                    where taxData.TaxCode     == _taxCode    &&
                        (!taxData.TaxFromDate                ||
                         (taxData.TaxFromDate <= _date       &&
                          taxData.TaxToDate   >= _date))
                    {
                            //Storing taxdata tablebuffer directly into SGOC since it is narrrow table and could aovid a data cache lookup
                            cacheValue += [taxData];
                    }
                    TaxCache::insertValue(TaxCacheScope::TaxData, taxkey, cachevalue);
                }
            }

            if (conLen(cacheValue))
            {
                for (records=1;records<=conLen(cacheValue);records++)
                {
                    taxData = conPeek(cacheValue, records);
                    if ((taxData.TaxLimitMin <= abs(_base)  && (taxData.TaxLimitMax >= abs(_base)) ||
                                 (taxData.TaxLimitMin <= abs(_base)  && !taxData.TaxLimitMax)))
                    {
                        found = true;
                        break;
                    }
                }
            }

            if (!found)
            {
                taxData.clear();
            }
        }

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAmtpercent_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// To validate the percentage/amount, when user creates multiple records with different form types
    /// </summary>
    /// <param name="_taxCode">
    /// Tax Code that identifies tax
    /// </param>
    /// <param name="_date">
    /// Transaction date
    /// </param>
    /// <param name="_base">
    /// Original amount that sales tax is calculated on
    /// </param>
    /// <returns>
    /// Amount percent per unit
    /// </returns>
    public static TaxValue  findAmtpercent_IN(TaxCode     _taxCode,
                                              TransDate   _date,
                                              TaxBase     _base)
    {
        TaxData         taxData;
        FormType_IN     formType = '';
        TaxValue        value;

        if (_taxCode)
        {
            while select TaxValue, SalesTaxFormTypes_IN from taxData
                where  taxData.TaxCode         == _taxCode      &&
                       (! taxData.TaxFromDate                   ||
                       (taxData.TaxFromDate    <= _date         &&
                       taxData.TaxToDate       >= _date))       &&
                       ((taxData.TaxLimitMin   <= abs(_base)    &&
                       (taxData.TaxLimitMax    >= abs(_base))   ||
                       (taxData.TaxLimitMin    <= abs(_base)    &&
                       !taxData.TaxLimitMax)))
            {
                value = taxData.TaxValue;

                if (formType && formType != SalesTaxFormTypes_IN::find(taxData.SalesTaxFormTypes_IN).FormType)
                {
                    value = 0;
                }

                formType = SalesTaxFormTypes_IN::find(taxData.SalesTaxFormTypes_IN).FormType;
            }
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConcessional_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds concessional value.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_base">
    /// The tax base.
    /// </param>
    /// <returns>
    /// The instance of the <c>ConcessionalValue_IN</c> class.
    /// </returns>
    public static ConcessionalValue_IN findConcessional_IN(
        TaxCode     _taxCode,
        TransDate   _date,
        TaxBase     _base)
    {
        TaxData                 taxData;
        RefRecId                tariffCode = 0;
        ConcessionalValue_IN    concessionalValue;
        ;

        if (_taxCode)
        {
            while select TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, ConcessionalValue_IN, ExciseTariffCodes_IN from taxData
                where taxData.TaxCode       == _taxCode       &&
                      (!taxData.TaxFromDate                   ||
                      (taxData.TaxFromDate  <= _date          &&
                      taxData.TaxToDate     >= _date))        &&
                      ((taxData.TaxLimitMin <= abs(_base)     &&
                      (taxData.TaxLimitMax  >= abs(_base))    ||
                      (taxData.TaxLimitMin  <= abs(_base)     &&
                      !taxData.TaxLimitMax)))
            {
                concessionalValue = taxData.ConcessionalValue_IN;
                if (tariffCode != 0                          &&
                   (tariffCode != taxData.ExciseTariffCodes_IN))
                {
                    concessionalValue = 0;
                    break;
                }
                 tariffCode = taxData.ExciseTariffCodes_IN;
            }
        }
        return concessionalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomsValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds customs value.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_base">
    /// The tax base.
    /// </param>
    /// <param name="_customsTariffCode">
    /// The customs tariff code.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxData</c> class.
    /// </returns>
    public static TaxData findCustomsValue_IN(
        TaxCode         _taxCode,
        TransDate       _date,
        TaxBase         _base,
        RefRecId        _customsTariffCode)
    {
        TaxData     taxData;
        ;
        if (_taxCode)
        {
            select taxData
                where   taxData.TaxCode                     == _taxCode             &&
                        taxData.CustomsTariffCodeTable_IN   == _customsTariffCode   &&
                        (!taxData.TaxFromDate                                       ||
                        (taxData.TaxFromDate                <= _date                &&
                        taxData.TaxToDate                   >= _date))              &&
                        ((taxData.TaxLimitMin               <= abs(_base)           &&
                        (taxData.TaxLimitMax                >= abs(_base))          ||
                        (taxData.TaxLimitMin                <= abs(_base)           &&
                        !taxData.TaxLimitMax)));
        }

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExcisePercent_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds excise percent.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_base">
    /// The tax base.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValue</c> class.
    /// </returns>
    public static TaxValue  findExcisePercent_IN(
        TaxCode     _taxCode,
        TransDate   _date,
        TaxBase     _base)
    {
        TaxData         taxData;
        RefRecId        exciseTariffCode = 0;
        TaxValue        value;
        ;

        if (_taxCode)
        {
            while select TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, TaxValue, ExciseTariffCodes_IN from taxData
                where taxData.TaxCode       == _taxCode     &&
                      (!taxData.TaxFromDate                 ||
                      (taxData.TaxFromDate  <= _date        &&
                      taxData.TaxToDate     >= _date))      &&
                      ((taxData.TaxLimitMin <= abs(_base)   &&
                      (taxData.TaxLimitMax  >= abs(_base))  ||
                      (taxData.TaxLimitMin  <= abs(_base)   &&
                      !taxData.TaxLimitMax)))
            {
                value = taxData.TaxValue;
                if (exciseTariffCode  != 0 &&
                    exciseTariffCode  != taxData.ExciseTariffCodes_IN)
                {
                    value = 0;
                }
                exciseTariffCode = taxData.ExciseTariffCodes_IN;
            }
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExciseType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds excise type.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_tariffCode">
    /// The tariff code.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_base">
    /// The tax base.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxData</c> class.
    /// </returns>
    public static TaxData findExciseType_IN(
        TaxCode     _taxCode,
        RefRecId    _tariffCode,
        TransDate   _date,
        TaxBase     _base)
    {
        TaxData     taxData;
        ;
        if (_taxCode)
        {
            select taxData
                index hint FormSortIdx
                where taxData.TaxCode           == _taxCode     &&
                      taxData.ExciseTariffCodes_IN == _tariffCode  &&
                      (!taxData.TaxFromDate                     ||
                      (taxData.TaxFromDate      <= _date        &&
                      taxData.TaxToDate         >= _date))      &&
                      ((taxData.TaxLimitMin     <= abs(_base)   &&
                      (taxData.TaxLimitMax      >= abs(_base))  ||
                      (taxData.TaxLimitMin      <= abs(_base)   &&
                      !taxData.TaxLimitMax)));
        }

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFormType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxData table for the specified sales tax form type.
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code attached to tax
    /// </param>
    /// <param name="_formType">
    /// Record id of SalesTaxFormTypes_IN which contains the required form type
    /// </param>
    /// <param name="_date">
    /// Transaction date.
    /// </param>
    /// <param name="_base">
    /// The base amount for the tax
    /// </param>
    /// <returns>
    /// A buffer containing TaxData table.
    /// </returns>
    public static TaxData findFormType_IN(TaxCode                    _taxCode,
                                          SalesTaxFormTypesRecId_IN  _formType,
                                          TransDate                  _date,
                                          TaxBase                    _base)
    {
        TaxData     taxData;

        if (_taxCode)
        {
            select taxData
                index hint FormSortIdx
                where taxData.TaxCode              == _taxCode     &&
                      taxData.SalesTaxFormTypes_IN == _formType    &&
                      (!taxData.TaxFromDate                       ||
                      (taxData.TaxFromDate         <= _date        &&
                      taxData.TaxToDate            >= _date))      &&
                      ((taxData.TaxLimitMin        <= abs(_base)   &&
                      (taxData.TaxLimitMax         >= abs(_base))  ||
                      (taxData.TaxLimitMin         <= abs(_base)   &&
                      !taxData.TaxLimitMax)));
        }

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMax</Name>
				<Source><![CDATA[
    static TaxData  findMax(TaxCode           _taxCode,
                            TransDate         _date,
                            TaxBase           _base)
    {
        TaxData     taxData;
        ;

        if (_taxCode)
            select taxData
                order by TaxLimitMin       desc
                where  taxData.TaxCode                  == _taxCode           &&
                     ((taxData.TaxFromDate              <= _date              &&
                       taxData.TaxToDate                >= _date)             ||
                       !taxData.TaxToDate)                                 &&
                     ((taxData.TaxLimitMin              <= abs(_base)     &&
                      (taxData.TaxLimitMax              >= abs(_base)))   ||
                      (taxData.TaxLimitMin              <= abs(_base) && !taxData.TaxLimitMax));

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMinNextInterval</Name>
				<Source><![CDATA[
    static TaxData findMinNextInterval(TaxCode   _taxCode,
                                       TransDate _date,
                                       TaxBase   _base)
    {
        TaxData     taxData;
        ;

        if (_taxCode)
        {
            select taxData
                order by TaxLimitMin
                where (taxData.TaxCode     == _taxCode)  &&
                    (((taxData.TaxFromDate <= _date)     &&
                      (taxData.TaxToDate   >= _date))    ||
                      !taxData.TaxToDate)                &&
                      (taxData.TaxLimitMin >= abs(_base));
        }
        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPercent_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxData</c> table.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code is used to find record.
    /// </param>
    /// <param name="_date">
    /// The transaction date is used to find record.
    /// </param>
    /// <param name="_base">
    /// The tax base is used to find record.
    /// </param>
    /// <returns>
    /// Returns true, if found record; otherwise, false.
    /// </returns>
    public static boolean findPercent_IN(
        TaxCode     _taxCode,
        TransDate   _date,
        TaxBase     _base)
    {
        TaxData         taxData,taxDataLoc;
        date            fromDateLoc,toDateLoc;
        boolean         ret;
        RefRecId   tariffcode;

        ;

        if (_taxCode)
        {
            while select TaxCode, TaxFromDate, TaxToDate, ExciseTariffCodes_IN from taxDataLoc
                where taxDataLoc.TaxCode == _taxCode
            {
                _taxCode    = taxDataLoc.TaxCode;
                fromDateLoc = taxDataLoc.TaxFromDate;
                toDateLoc   = taxDataLoc.TaxToDate;
                tariffcode  = taxDataLoc.ExciseTariffCodes_IN;

                while  select TaxFromDate, TaxToDate, ExciseTariffCodes_IN from taxData
                    index hint FormSortIdx
                    where  taxData.TaxCode  == _taxCode
                {
                    if (fromDateLoc             >= taxData.TaxFromDate  &&
                        fromDateLoc             <= taxData.TaxToDate    ||
                        toDateLoc               >= taxData.TaxFromDate  &&
                        toDateLoc               <= taxData.TaxToDate    &&
                        taxData.ExciseTariffCodes_IN   != tariffcode)
                    {
                        ret = true;
                    }

                    if (taxData.TaxFromDate     >= fromDateLoc    &&
                        taxData.TaxFromDate     <= toDateLoc      ||
                        taxData.TaxToDate       >= fromDateLoc    &&
                        taxData.TaxToDate       <= toDateLoc      &&
                        taxData.ExciseTariffCodes_IN   != tariffcode)
                    {
                        ret = true;
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPercentValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds percent value of tax data.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_base">
    /// The tax base.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValue</c> class.
    /// </returns>
    public static TaxValue findPercentValue_IN(TaxCode      _taxCode,
                                               TransDate    _date,
                                               TaxBase      _base)
    {
        TaxData                 taxData;
        RefRecId                tariffCode = 0;
        TaxValue                value;
        ;
        if (_taxCode)
        {
            while select TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, TaxValue, CustomsTariffCodeTable_IN from taxData
                where taxData.TaxCode           == _taxCode       &&
                      (!taxData.TaxFromDate                       ||
                      (taxData.TaxFromDate      <= _date          &&
                      taxData.TaxToDate         >= _date))        &&
                      ((taxData.TaxLimitMin     <= abs(_base)     &&
                      (taxData.TaxLimitMax      >= abs(_base))    ||
                      (taxData.TaxLimitMin      <= abs(_base)     &&
                      !taxData.TaxLimitMax)))
            {
                value = taxData.TaxValue;
                if (tariffCode != 0 &&
                   (tariffCode != taxData.CustomsTariffCodeTable_IN ||
                   (tariffCode == taxData.CustomsTariffCodeTable_IN)))
                {
                    value = 0;
                    break;
                }
                tariffCode = taxData.CustomsTariffCodeTable_IN;
            }
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPreferentialValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds preferential value of tax data.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_base">
    /// The tax base.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValue</c> class.
    /// </returns>
    public static TaxValue findPreferentialValue_IN(TaxCode       _taxCode,
                                                    TransDate     _date,
                                                    TaxBase       _base)
    {
        TaxData                 taxData;
        RefRecId    tariffCode = 0;
        TaxValue                preferentialValue;

        if (_taxCode)
        {
            while select TaxCode, TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax, PreferentialValue_IN, CustomsTariffCodeTable_IN from taxData
                where taxData.TaxCode       == _taxCode       &&
                      (!taxData.TaxFromDate                   ||
                      (taxData.TaxFromDate  <= _date          &&
                      taxData.TaxToDate     >= _date))        &&
                      ((taxData.TaxLimitMin <= abs(_base)     &&
                      (taxData.TaxLimitMax  >= abs(_base))    ||
                      (taxData.TaxLimitMin  <= abs(_base)     &&
                      !taxData.TaxLimitMax)))
            {
                preferentialValue = taxData.PreferentialValue_IN;
                if ( tariffCode != 0 &&
                    (tariffCode != taxData.CustomsTariffCodeTable_IN ||
                    (tariffCode == taxData.CustomsTariffCodeTable_IN)))
                {
                    preferentialValue = 0;
                    break;
                }

                tariffCode = taxData.CustomsTariffCodeTable_IN;
            }
        }

        return preferentialValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxData table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// Returns TaxData record buffer whose record id matches with the record id passed.
    /// </returns>
    public static TaxData findRecId_IN(RecId    _recId, boolean    _forUpdate = false )
    {
        TaxData taxData;

        taxData.selectForUpdate(_forUpdate);

        select firstonly taxData
            where taxData.RecId == _recId;

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsPercent_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customs percent value.
    /// </summary>
    /// <param name="_salesPurchJournalLine">
    /// The sales purch journal line.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <param name="_amount">
    /// The tax base amount.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValue</c> class.
    /// </returns>
    public static TaxValue getCustomsPercent_IN(
        SalesPurchJournalLine  _salesPurchJournalLine,
        TaxCode                   _taxCode,
        TransDate                 _date,
        TaxBase                   _amount)

    {
        AccountNum                          accountNum;
        RecId                               customsTariffCodeTable;
        TaxValue                            percent;
        LedgerJournalTrans                  ledgerJournalTrans;
        VendTrans                           vendTransLoc;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;

        TransTaxInformation                 transTaxInformation;

        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformation(_salesPurchJournalLine.SourceTableId, _salesPurchJournalLine.SourceRecId);

        customsTariffCodeTable = transTaxInformation.CustomsTariffCode;

        switch (_salesPurchJournalLine.SourceTableId)
        {
            case tableNum(PurchLine):
                if (VendTable::find(PurchTable::find(_salesPurchJournalLine.SourceId).OrderAccount).IsPreferential() == NoYes::Yes)
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).PreferentialValue_IN;
                }
                else
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                }
                break;

            case tablenum(PurchReqLine):
                percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                break;

            case tableNum(PurchRFQLine):
                if (VendTable::find(PurchRFQVendLink::find(PurchRFQCaseLine::findRecId(PurchRFQLine::find(_salesPurchJournalLine.SourceId).rfqCaseLineRefRecId).rfqCaseId).VendAccount).IsPreferential() == NoYes::Yes)
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).PreferentialValue_IN;
                }
                else
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                }
                break;

            case tableNum(SalesLine):
                if (CustTable::find(SalesLine::findRecId(_salesPurchJournalLine.SourceRecId).CustAccount).isPreferential() == NoYes::Yes)
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).PreferentialValue_IN;
                }
                else
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                }
                break;

            case tableNum(CustInvoiceLine):
                if (CustTable::find(CustInvoiceTable::findRecId(CustInvoiceLine::find(_salesPurchJournalLine.SourceRecId).ParentRecId).OrderAccount).isPreferential() == NoYes::Yes)
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).PreferentialValue_IN;
                }
                else
                {
                    percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                }
                break;

            case tablenum(SalesQuotationLine):
                percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                break;

            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = LedgerJournalTrans::findRecId(_salesPurchJournalLine.SourceRecId, false);
                if ((ledgerJournalTrans.AccountType == LedgerJournalACType::Vend || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend) &&
                   !(ledgerJournalTrans.AccountType == LedgerJournalACType::Vend && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend))
                {
                    accountNum = (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend) ? ledgerJournalTrans.parmAccount() : ledgerJournalTrans.parmOffsetAccount();
                    if (VendTable::find(accountNum).IsPreferential() == NoYes::Yes)
                    {
                        percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).PreferentialValue_IN;
                    }
                    else // If not Preferential
                    {
                        percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                    }
                }
                else if ((ledgerJournalTrans.AccountType == LedgerJournalACType::Cust || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust) &&
                        !(ledgerJournalTrans.AccountType == LedgerJournalACType::Cust && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust))
                {
                    accountNum = (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust) ? ledgerJournalTrans.parmAccount() : ledgerJournalTrans.parmOffsetAccount();
                    if (CustTable::find(accountNum).isPreferential() == NoYes::Yes)
                    {
                        percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).PreferentialValue_IN;
                    }
                    else
                    {
                        percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                    }
                }
                else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    select firstonly AccountNum from vendTransLoc
                        where vendTransLoc.RecId == ledgerJournalTrans.VendTransId;

                    accountNum = vendTransLoc.AccountNum;
                    if (accountNum)
                    {
                        if (VendTable::find(accountNum).IsPreferential() == NoYes::Yes)
                        {
                            percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).PreferentialValue_IN;
                        }
                        else // If not Preferential
                        {
                            percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                        }
                    }
                }
                else // for all other journal combinations
                {
                    percent = 0;
                }
                break;

            case tablenum(ProjItemTrans):
            case tablenum(ProjCostTrans):
            case tablenum(ProjOnAccTrans):
                percent = TaxData::findCustomsValue_IN(_taxCode, _date, _amount, customsTariffCodeTable).TaxValue;
                break;

            default:
                break;
        }
        return  percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGreaterThanTaxableLimit</Name>
				<Source><![CDATA[
    public static TaxData isGreaterThanTaxableLimit(TaxTable     _taxTable,
                                                    TransDate    _date,
                                                    TaxBase      _baseAmount)
    {
        TaxData     taxData;

        if (_taxTable.TaxBase == TaxBaseType::AmountByUnit)
        {
            taxData = TaxData::find(_taxTable.TaxCode,
                                    _date,
                                    0);
        }
        else
        {
            taxData = TaxData::find(_taxTable.TaxCode,
                                    _date,
                                    _baseAmount);
        }

        return taxData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntervalMissing</Name>
				<Source><![CDATA[
    public static boolean isIntervalMissing(TaxCode _taxCode)
    {
        TaxData      taxData;
        boolean      isMissing   = false;
        boolean      firstPeriod = true;
        real         taxLimitMax = 0;
        TaxValidDate taxFromDate;
        TaxValidDate taxToDate;
        ;
        if (_taxCode)
        {
            while select TaxFromDate, TaxToDate, TaxLimitMin, TaxLimitMax from taxData
                  index hint FormSortIdx
                  where (taxData.TaxCode == _taxCode)
            {
                if (firstPeriod                          ||
                    (taxFromDate != taxData.TaxFromDate) ||
                    (taxToDate   != taxData.TaxToDate))
                // New period - First interval
                {
                    taxFromDate = taxData.TaxFromDate;
                    taxToDate   = taxData.TaxToDate;
                    // Last interval of previous period should have Max = 0 (i.e. infinity)
                    // First interval of current period should have Min = 0
                    isMissing = isMissing || (taxLimitMax > 0) || (taxData.TaxLimitMin > 0);
                    firstPeriod = false;
                }
                else
                // Inner or last interval
                {
                    // Difference between current Min and previous Max should be smaller than 0.01
                    isMissing = isMissing || (taxData.TaxLimitMin - taxLimitMax) > 0.01;
                }
                taxLimitMax = taxData.TaxLimitMax;
            }
            // Last interval of last period should have Max = 0 (i.e. infinity)
            isMissing = isMissing || (taxLimitMax > 0);
        }
        return isMissing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitAmountMax</Name>
				<Source><![CDATA[
    static TaxBase      limitAmountMax(TaxCode          _taxCode,
                                       TransDate        _date,
                                       TaxBase          _amount,
                                       boolean          _rounding = true)
    {
        TaxTable taxTable;

        taxTable = TaxTable::find(_taxCode);

        return TaxData::limitAmountMaxWithTaxTable(taxTable, _date, _amount, _rounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitAmountMaxWithTaxTable</Name>
				<Source><![CDATA[
    static TaxBase      limitAmountMaxWithTaxTable(TaxTable         _taxTable,
                                                   TransDate        _date,
                                                   TaxBase          _amount,
                                                   boolean          _rounding = true)
    {
        TaxData         taxData;
        TaxBase         currencyAmount;
        CurrencyCode    standardCurrency;
        real            taxLimitMax;
        ;
        if (_taxTable.TaxCode)
        {
            standardCurrency = CompanyInfoHelper::standardCurrency();

            if (_taxTable.TaxCurrencyCode != standardCurrency &&
                _taxTable.TaxBase != TaxBaseType::AmountByUnit)
            {
                currencyAmount = CurrencyExchangeHelper::curAmount(_amount,
                                                     _taxTable.TaxCurrencyCode,
                                                     _date,
                                                     UnknownNoYes::Unknown,
                                                     0,
                                                     0,
                                                     _rounding);
            }
            else
            {
                currencyAmount = _amount;
            }

            // Determine upper limit of the interval
            taxData  = TaxData::findMax(_taxTable.TaxCode, _date, currencyAmount);
            if (taxData)
            {
                taxLimitMax = taxData.TaxLimitMax;
            }
            else
            {
                taxData = TaxData::findMinNextInterval(_taxTable.TaxCode, _date, currencyAmount);
                taxLimitMax = taxData.TaxLimitMin;
            }

            if ((taxLimitMax > 0) &&
                (_taxTable.TaxCurrencyCode != standardCurrency) &&
                (_taxTable.TaxBase != TaxBaseType::AmountByUnit))
            {
                currencyAmount = CurrencyExchangeHelper::mstAmount(taxLimitMax, _taxTable.TaxCurrencyCode, _date, UnknownNoYes::Unknown, 0, 0, _rounding);
            }
            else
            {
                currencyAmount = taxLimitMax;
            }
        }
        return currencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>limitAmountCurMaxWithTaxTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maxmim limit amount in tax currency for the specified amount.
    /// </summary>
    /// <param name = "_taxTable">The taxTable entry</param>
    /// <param name = "_date">Transaction Date</param>
    /// <param name = "_amount">Calculation base amount</param>
    /// <param name = "_rounding">If rounding needed</param>
    /// <returns>Returns the maxmim limit amount in tax currency for the specified amount.</returns>
    static TaxBase limitAmountCurMaxWithTaxTable(TaxLimitAmountTaxTableParameter _taxLimitAmountTaxTableParameter)
    {
        TaxData         taxData;
        TaxBase         currencyAmount;
        real            taxLimitMax;
        
        if (_taxLimitAmountTaxTableParameter.paramTaxTable().TaxCode)
        {
            currencyAmount = _taxLimitAmountTaxTableParameter.paramAmount();
            // Determine upper limit of the interval
            taxData  = TaxData::findMax(_taxLimitAmountTaxTableParameter.paramTaxTable().TaxCode, _taxLimitAmountTaxTableParameter.paramTransDate(), currencyAmount);
            if (taxData)
            {
                taxLimitMax = taxData.TaxLimitMax;
            }
            else
            {
                taxData = TaxData::findMinNextInterval(_taxLimitAmountTaxTableParameter.paramTaxTable().TaxCode, _taxLimitAmountTaxTableParameter.paramTransDate(), currencyAmount);
                taxLimitMax = taxData.TaxLimitMin;
            }
        }
        return taxLimitMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfIntervals</Name>
				<Source><![CDATA[
    static Counter numOfIntervals(TaxCode  _taxCode,
                                  TransDate _taxdate)
    {
        TaxData taxData;
        ;
        select count(RecId) from taxData
            where taxData.TaxCode == _taxCode
               && ((taxData.TaxFromDate <= _taxdate &&
                    taxData.TaxToDate   >= _taxdate) || !taxData.TaxFromDate);

        return any2int(taxData.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>percent</Name>
				<Source><![CDATA[
    static TaxValue  percent(TaxCode    _taxCode,
                             TransDate  _date,
                             TaxBase    _amount)

    {
        TaxTable        taxTable;
        TaxValue        percent;
        TaxValue        tmpPercent;
        TaxBase         currencyAmount;
        ;
        if (_taxCode)
        {
            taxTable  = TaxTable::find(_taxCode);

            if (taxTable.TaxCurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                 currencyAmount = CurrencyExchangeHelper::curAmount(currencyAmount,
                                                      taxTable.TaxCurrencyCode,
                                                      _date);
            }
            else
                currencyAmount = _amount;

            switch (taxTable.TaxBase)
            {
                case TaxBaseType::AmountByUnit :
                    percent = TaxData::find(_taxCode, _date, 0).TaxValue;
                    break;
                case TaxBaseType::PctPerTax   :
                    percent      = TaxData::find(_taxCode, _date, currencyAmount).TaxValue;
    //                tmpPercent      = TaxData::find(taxTable.taxOnTax, _date, currencyAmount).taxValue;
    //                percent         = tmpPercent * TaxData::find(_taxCode, _date, currencyAmount).taxValue/ 100;
                    break;
                case TaxBaseType::PctPerGross :
                    if (taxTable.TaxOnTax)
                    {
                        if (TaxData::isDualBaseTaxRate_BR(taxTable))
                        {
                            percent = TaxData::find(_taxCode, _date, currencyAmount).TaxValue - TaxData::find(taxTable.TaxOnTax, _date, currencyAmount).TaxValue;
                        }
                        else
                        {
                            tmpPercent     = TaxData::find(taxTable.TaxOnTax, _date, currencyAmount).TaxValue;
                            percent        = TaxData::find(_taxCode,          _date, currencyAmount).TaxValue +
                                             TaxData::find(_taxCode,          _date, currencyAmount).TaxValue * tmpPercent / 100;
                        }
                    }
                    else
                    {
                        percent = TaxData::find(_taxCode, _date, currencyAmount).TaxValue;
                    }
                    break;
                case TaxBaseType::PctPerNet,
                     TaxBaseType::PctGrosOnNet   :
                    percent = TaxData::find(_taxCode, _date, currencyAmount).TaxValue;
                    break;
            }
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentPerTax</Name>
				<Source><![CDATA[
    static TaxValue  percentPerTax(TaxCode          _taxCode,
                                   TransDate             _date,
                                   TaxBase          _amount)

    {
        TaxTable        taxTable;
        TaxValue        percent;
        TaxValue        tmpPercent;
        TaxBase         currencyAmount;
        ;
        if (_taxCode)
        {
            taxTable  = TaxTable::find(_taxCode);

            if (taxTable.TaxCurrencyCode != Ledger::accountingCurrency(CompanyInfo::current()))
            {
                 currencyAmount= CurrencyExchangeHelper::curAmount(currencyAmount,
                                                     taxTable.TaxCurrencyCode,
                                                     _date);
            }
            else
                currencyAmount= _amount;

            switch (taxTable.TaxBase)
            {
                case TaxBaseType::AmountByUnit :
                    percent = TaxData::find(_taxCode, _date, 0).TaxValue;
                    break;
                case TaxBaseType::PctPerTax   :
                    percent      = TaxData::find(_taxCode, _date, currencyAmount).TaxValue;
                    tmpPercent      = TaxData::find(taxTable.TaxOnTax, _date, currencyAmount).TaxValue;
                    percent         = tmpPercent * TaxData::find(_taxCode, _date, currencyAmount).TaxValue/ 100;
                    break;
                case TaxBaseType::PctPerGross :
                    if (taxTable.TaxOnTax)
                    {
                        tmpPercent     = TaxData::find(taxTable.TaxOnTax, _date, currencyAmount).TaxValue;
                        percent        = TaxData::find(_taxCode, _date, currencyAmount).TaxValue+
                                         TaxData::find(_taxCode, _date, currencyAmount).TaxValue* tmpPercent / 100  ;
                    }
                    else
                    {
                        percent = TaxData::find(_taxCode, _date, currencyAmount).TaxValue;
                    }
                    break;
                case TaxBaseType::PctPerNet,
                     TaxBaseType::PctGrosOnNet   :
                    percent = TaxData::find(_taxCode, _date, currencyAmount).TaxValue;
                    break;
            }
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentPreferentialValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the percent of preferential value.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValue</c> class.
    /// </returns>
    public static TaxValue  percentPreferentialValue_IN(TaxCode    _taxCode,
                                                        TransDate  _date,
                                                        TaxBase    _amount)

    {
        TaxTable        taxTable;
        TaxValue        percent;
        TaxBase         currencyAmount;
        ;

        if (_taxCode)
        {
            taxTable  = TaxTable::find(_taxCode);

            if (taxTable.TaxCurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                 currencyAmount = CurrencyExchangeHelper::curAmount(currencyAmount,
                                                      taxTable.TaxCurrencyCode,
                                                      _date);
            }
            else
            {
                currencyAmount = _amount;
            }

            switch (taxTable.TaxBase)
            {
                case TaxBaseType::AmountByUnit :
                    percent = TaxData::findPreferentialValue_IN(_taxCode, _date, 0);
                    break;
                case TaxBaseType::PctPerNet :
                    percent = TaxData::findPreferentialValue_IN(_taxCode, _date, currencyAmount);
                    break;
            }
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates amount percent value
    /// </summary>
    /// <param name="_taxCode">
    /// Tax code attached to tax
    /// </param>
    /// <param name="_date">
    /// Transaction date
    /// </param>
    /// <param name="_amount">
    /// The base amount on which tax has to be calculated.
    /// </param>
    /// <returns>
    /// Returns the amount percent
    /// </returns>
    public static TaxValue  percentValue_IN(TaxCode    _taxCode,
                                            TransDate  _date,
                                            TaxBase    _amount)
    {
        TaxTable        taxTable;
        TaxValue        percent;
        TaxBase         currencyAmount;

        if (_taxCode)
        {
            taxTable  = TaxTable::find(_taxCode);

            if (taxTable.TaxCurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                 currencyAmount = CurrencyExchangeHelper::curAmount(currencyAmount,
                                                      taxTable.TaxCurrencyCode,
                                                      _date);
            }
            else
            {
                currencyAmount = _amount;
            }

            switch (taxTable.TaxBase)
            {
                case TaxBaseType::AmountByUnit :
                    if (taxTable.TaxType_IN == TaxType_IN::Customs)
                    {
                        percent = TaxData::findPercentValue_IN(_taxCode, _date, 0);
                    }

                    if (taxTable.TaxType_IN == TaxType_IN::SalesTax)
                    {
                        percent = TaxData::findAmtpercent_IN(_taxCode, _date, 0);
                    }

                    if (taxTable.TaxType_IN == TaxType_IN::Excise)
                    {
                        percent = TaxData::findExcisePercent_IN(_taxCode, _date, 0);
                    }
                    break;
                case TaxBaseType::PctPerNet :
                    if (taxTable.TaxType_IN == TaxType_IN::Customs)
                    {
                        percent = TaxData::findPercentValue_IN(_taxCode, _date, currencyAmount);
                    }

                    if (taxTable.TaxType_IN == TaxType_IN::SalesTax)
                    {
                        percent = TaxData::findAmtpercent_IN(_taxCode, _date, currencyAmount);
                    }

                    if (taxTable.TaxType_IN == TaxType_IN::Excise)
                    {
                        percent = TaxData::findExcisePercent_IN(_taxCode, _date, currencyAmount);
                    }
                    break;
            }
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102244";
    }

]]></Source>
			</Method>
			<Method>
				<Name>value_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the concessional value.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <returns>
    /// The instance of the <c>ConcessionalValue_IN</c> class.
    /// </returns>
    public static ConcessionalValue_IN  value_IN(TaxCode    _taxCode,
                                                 TransDate  _date,
                                                 TaxBase    _amount)
    {
        TaxTable                    taxTable;
        ConcessionalValue_IN        percent;
        TaxBase                     currencyAmount;

        if (_taxCode)
        {
            taxTable  = TaxTable::find(_taxCode);

            if (taxTable.TaxCurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                 currencyAmount = CurrencyExchangeHelper::curAmount(currencyAmount,
                                                      taxTable.TaxCurrencyCode,
                                                      _date);
            }
            else
            {
                currencyAmount = _amount;
            }

            switch (taxTable.TaxBase)
            {
                case TaxBaseType::AmountByUnit :
                    percent = TaxData::findConcessional_IN(_taxCode, _date, 0);
                    break;
                case TaxBaseType::PctPerNet :
                    percent = TaxData::findConcessional_IN(_taxCode, _date, currencyAmount);
                    break;
            }
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATExemptPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets VATExemptPct by tax direction, tax code, transaction date, tax base amount.
    /// </summary>
    /// <param name = "_taxDirection">Tax direction.</param>
    /// <param name = "_taxCode">Tax code.</param>
    /// <param name = "_transDate">Transaction date.</param>
    /// <param name = "_taxBase">Tax base amount.</param>
    /// <returns>
    /// When tax direction is incoming tax or use tax, return the coresponding VAT exempt percent, otherwise, return 0.
    /// </returns>
    public static TaxValue getVATExemptPct(TaxDirection _taxDirection, TaxCode _taxCode, TransDate _transDate, TaxBase _taxBase)
    {
        TaxValue vatExemptPct;

        if ((_taxDirection == TaxDirection::IncomingTax || _taxDirection == TaxDirection::UseTax)
            && !TaxParameters::find().PurchTaxOnOperations)
        {
            vatExemptPct = TaxData::find(_taxCode, _transDate, _taxBase).VATExemptPct;
        }

        return vatExemptPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDualBaseTaxRate_BR</Name>
				<Source><![CDATA[
    private static boolean isDualBaseTaxRate_BR(TaxTable _taxTable)
    {
        boolean ret = false;

        if (BrazilParameters::isEnabled()
            && _taxTable.TaxType_BR == TaxType_BR::ICMSDiff)
        {
            TaxTable taxOnTax = TaxTable::find(_taxTable.TaxOnTax);
            ret = taxOnTax.TaxType_BR == TaxType_BR::ICMS;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126029</DeveloperDocumentation>
	<FormRef>TaxData</FormRef>
	<Label>@SYS27725</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxCode</TitleField1>
	<TitleField2>TaxValue</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>FormSortIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>FormSortIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RAssetTransportTaxData</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetTransportTaxData</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLimitMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLimitMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7523</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATExemptPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExciseDuty_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreferentialValue_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConcessionalValue_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSubstitutionMarkupValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomDuty_RU</Name>
			<Label>@GLS114971</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomRateAmount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomCurrencyCode_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomCalcQty_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dummy</Name>
			<Label>@SYS79159</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxReductionPct_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsTariffCodeTable_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayCustomsDirection_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxFormTypes_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Interval</Name>
			<Label>@SYS12899</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxLimitMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLimitMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConcessionalValue_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConcessionalValue_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustomCalcQty_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomCalcQty_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomCurrencyCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustomRateAmount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValueDuty_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsTariffCodeTable_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5186</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExciseDuty_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlExciseDuty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExciseTariffCodes_IN</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5186</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreferentialValue_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<Label>@GLS5187</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormTypes_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidDate</ExtendedDataType>
			<Label>@SYS5209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxLimitMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseMax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxLimitMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseMin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxReductionPct_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<Label>@GLS60</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxSubstitutionMarkupValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<Label>@GLS127</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValidDate</ExtendedDataType>
			<Label>@SYS14656</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VATExemptPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<Label>@Tax:NonDeductiblePct</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FormSortIdx</Name>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxFromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxToDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxLimitMin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExciseTariffCodes_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExciseTariffCodes_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomsTariffCodeTable_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsTariffCodeTable_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesTaxFormTypes_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesTaxFormTypes_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomCurrencyCode_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyCustom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomCurrencyCode_RU</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CustomCurrencyCode_RU</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsTariffCodeTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5516</EntityRelationshipRole>
			<RelatedTable>CustomsTariffCodeTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsTariffCodeTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsTariffCodeTable_IN_TaxData</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsTariffCodeTable_IN</Name>
					<Field>CustomsTariffCodeTable_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExciseTariffCodes_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS5344</EntityRelationshipRole>
			<RelatedTable>ExciseTariffCodes_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ExciseTariffCodes_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ExciseTariffCodes_IN_TaxData</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExciseTariffCodes_IN</Name>
					<Field>ExciseTariffCodes_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTaxFormTypes_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTaxFormTypes_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTaxFormTypes_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxData</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTaxFormTypes_IN</Name>
					<Field>SalesTaxFormTypes_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>