<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPeriods_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdPeriods_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks date interval for Withold tax periods.
    /// </summary>
    /// <returns>
    /// If  validation fails return false otherwise true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDateInterval()
    {
        if (this.FromDate > this.ToDate)
        {
            return checkFailed("@SYS6631");
        }

        if (this.dateIsInExistsPeriod())
        {
            return checkFailed("@SYS22089");
        }

        if (this.existOther())
        {
            return checkFailed("@SYS22089");
        }

        if (this.intervalIsInexistsPeriod())
        {
            return checkFailed("@SYS94867");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntervalInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks date interval for whether these ae in use or not.
    /// </summary>
    /// <returns>
    /// If these are in use return false otherwise true.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkIntervalInUse()
    {
        TaxWithholdPeriod_IN taxWithholdPeriod;
        TaxWithholdPeriod_IN taxWithholdOrigPeriod;

        taxWithholdPeriod     = TaxWithholdHead_IN::find(this.TaxWithholdSettlementPeriod).Period;
        taxWithholdOrigPeriod = TaxWithholdHead_IN::find(this.orig().TaxWithholdSettlementPeriod).Period;
        if (this.orig().RecId)
        {
            if (taxWithholdPeriod == taxWithholdOrigPeriod)
            {
                if (this.FromDate > this.orig().FromDate         &&
                    TaxTrans::existPeriod(this.orig().FromDate,
                                          this.FromDate,
                                          taxWithholdOrigPeriod))
                {
                    return checkFailed("@SYS21998");
                }

                if (this.ToDate <  this.orig().ToDate          &&
                    TaxTrans::existPeriod(this.ToDate,
                                          this.orig().ToDate,
                                          taxWithholdOrigPeriod))
                {
                    return checkFailed("@SYS21999");
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIsInExistsPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// checks given date exists in given period or not.
    /// </summary>
    /// <returns>
    /// if records exists then return true otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean dateIsInExistsPeriod()
    {
        if (this.TaxWithholdSettlementPeriod && this.FromDate && this.ToDate)
        {
            return (select firstonly RecId from taxWithholdPeriods_IN
                        where taxWithholdPeriods_IN.TaxWithholdSettlementPeriod == this.TaxWithholdSettlementPeriod
                           && taxWithholdPeriods_IN.RecId                       != this.recid
                           && taxWithholdPeriods_IN.TaxType                     == this.taxType
                           && taxWithholdPeriods_IN.FromDate                    <= this.FromDate
                           && taxWithholdPeriods_IN.ToDate                      >= this.ToDate).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOther</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks Withhold tax period exists for given date interval or not.
    /// </summary>
    /// <returns>
    ///  True if records exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existOther()
    {
        TaxWithholdPeriods_IN taxWithholdPeriodLocal;

        if (this.TaxWithholdSettlementPeriod && this.fromDate && this.toDate && this.recId)
        {
            select firstonly RecId from taxWithholdPeriodLocal
                index hint TaxPeriodIdx
                where taxWithholdPeriodLocal.TaxWithholdSettlementPeriod == this.TaxWithholdSettlementPeriod
                   && taxWithholdPeriodLocal.TaxType                     == this.taxType
                   && taxWithholdPeriodLocal.FromDate                    == this.fromDate
                   && taxWithholdPeriodLocal.ToDate                      == this.toDate
                   && taxWithholdPeriodLocal.RecId                       != this.recId;
            if (taxWithholdPeriodLocal)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void  insert()
    {
        boolean  ok;

        ok = this.checkDateInterval();

        if (ok)
        {
            super();
        }
        else
        {
            throw error("@SYS15885");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intervalIsInexistsPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks Withhold tax period exists for given date interval or not.
    /// </summary>
    /// <returns>
    /// True if records exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean intervalIsInexistsPeriod()
    {
        TaxWithholdPeriods_IN   taxWithholdPeriodLocal;

        if (this.TaxWithholdSettlementPeriod && this.FromDate && this.toDate)
        {
            select firstonly RecId from taxWithholdPeriodLocal
                index hint TaxPeriodIdx
                where taxWithholdPeriodLocal.TaxWithholdSettlementPeriod == this.TaxWithholdSettlementPeriod
                   && taxWithholdPeriodLocal.TaxType                     == this.TaxType
                   && taxWithholdPeriodLocal.FromDate                    >  this.FromDate
                   && taxWithholdPeriodLocal.ToDate                      <  this.ToDate;

            if (taxWithholdPeriodLocal.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                         ret;
        TaxWithholdSettledPeriods_IN    taxWithholdSettledPeriods;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(TaxWithholdPeriods_IN, FromDate):
                select firstonly VersionNum from taxWithholdSettledPeriods
                    where taxWithholdSettledPeriods.TaxType                     == this.TaxType
                       && taxWithholdSettledPeriods.TaxWithholdSettlementPeriod == this.TaxWithholdSettlementPeriod
                       && taxWithholdSettledPeriods.FromDate                    == this.orig().FromDate
                       && taxWithholdSettledPeriods.ToDate                      == this.orig().ToDate;
                if (taxWithholdSettledPeriods.VersionNum > 0)
                {
                    ret = ret && checkFailed("@GLS6134");
                }
            break;

            case fieldnum(TaxWithholdPeriods_IN, ToDate):
                select firstonly VersionNum from taxWithholdSettledPeriods
                    where taxWithholdSettledPeriods.TaxType                     == this.TaxType
                       && taxWithholdSettledPeriods.TaxWithholdSettlementPeriod == this.TaxWithholdSettlementPeriod
                       && taxWithholdSettledPeriods.FromDate                    == this.orig().FromDate
                       && taxWithholdSettledPeriods.ToDate                      == this.orig().ToDate;
                if (taxWithholdSettledPeriods.VersionNum > 0)
                {
                    ret = ret && checkFailed("@GLS6134");
                }

            break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field; optional.
    /// </param>
    /// <returns>
    /// Returns true if the field passes value validation; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
         boolean                         ret;
        TaxWithholdSettledPeriods_IN    taxWithholdSettledPeriods;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(TaxWithholdPeriods_IN, FromDate):
                select firstonly VersionNum from taxWithholdSettledPeriods
                    where taxWithholdSettledPeriods.TaxType                     == this.TaxType
                       && taxWithholdSettledPeriods.TaxWithholdSettlementPeriod == this.TaxWithholdSettlementPeriod
                       && taxWithholdSettledPeriods.FromDate                    == this.orig().FromDate
                       && taxWithholdSettledPeriods.ToDate                      == this.orig().ToDate;
                if (taxWithholdSettledPeriods.VersionNum > 0)
                {
                    ret = ret && checkFailed("@GLS6134");
                }
            break;

            case fieldstr(TaxWithholdPeriods_IN, ToDate):
                select firstonly VersionNum from taxWithholdSettledPeriods
                    where taxWithholdSettledPeriods.TaxType                     == this.TaxType
                       && taxWithholdSettledPeriods.TaxWithholdSettlementPeriod == this.TaxWithholdSettlementPeriod
                       && taxWithholdSettledPeriods.FromDate                    == this.orig().FromDate
                       && taxWithholdSettledPeriods.ToDate                      == this.orig().ToDate;
                if (taxWithholdSettledPeriods.VersionNum > 0)
                {
                    ret = ret && checkFailed("@GLS223917");
                }

            break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (!this.checkDateInterval())
            {
                ret = checkFailed("@SYS15885");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdPeriods_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_period">
    /// Tax withhold period.
    /// </param>
    /// <param name="_taxType">
    /// Withhold tax type
    /// </param>
    /// <param name="_fromDate">
    /// From date to select the record in this range.
    /// </param>
    /// <param name="_toDate">
    /// To date to select the record in this range.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(TaxWithholdPeriod_IN   _period,
                                TaxWithholdType_IN     _taxType,
                                TransDate              _fromDate,
                                TransDate              _toDate)
    {
        return (select firstonly RecId from taxWithholdPeriods_IN
                    index hint TaxPeriodIdx
                    where taxWithholdPeriods_IN.TaxWithholdSettlementPeriod == TaxWithholdHead_IN::findByTaxPeriodHead(_period, _taxType).RecId
                       && taxWithholdPeriods_IN.TaxType                     == _taxType
                       && taxWithholdPeriods_IN.FromDate                    == _fromDate
                       && taxWithholdPeriods_IN.ToDate                      == _toDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdPeriods_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdPeriods_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdPeriods_IN find(RefRecId            _recId,
                                             boolean             _forupdate        = false,
                                             ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdPeriods_IN taxWithholdPeriods;

        taxWithholdPeriods.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdPeriods.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdPeriods
            where taxWithholdPeriods.RecId == _recId;

        return taxWithholdPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdPeriods_IN</c> table for the specified parameters.
    /// </summary>
    /// <param name="_taxPeriod">
    /// Withhold tax period used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <param name="_date">
    /// Date used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.;Optional
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdPeriods_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TaxWithholdPeriods_IN findByTaxPeriod(TaxWithholdPeriodRecId_IN _taxPeriod,
                                                        TaxWithholdType_IN        _taxType,
                                                        TransDate                 _date,
                                                        boolean                   _forUpdate = false)

    {
        TaxWithholdPeriods_IN     taxWithholdPeriods;

        if (_taxPeriod && _date)
        {
            taxWithholdPeriods.selectForUpdate(_forUpdate);
            select firstonly taxWithholdPeriods
                where taxWithholdPeriods.TaxWithholdSettlementPeriod == _taxPeriod
                   && taxWithholdPeriods.TaxType                     == _taxType
                   && taxWithholdPeriods.FromDate                    <= _date
                   && taxWithholdPeriods.ToDate                      >= _date;
        }
        return taxWithholdPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdPeriods_IN</c> table for the specified parameters.
    /// </summary>
    /// <param name="_period">
    /// Tax withhold period for which this find operation will be performed.
    /// </param>
    /// <param name="_taxType">
    /// Tax type , to find the record for.
    /// </param>
    /// <param name="_date">
    /// Date , to find the record for.
    /// </param>
    /// <param name="_recId">
    /// Record Id ,to find the record for.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdPeriods_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdPeriods_IN findOther(TaxWithholdPeriod_IN _period,
                                                  TaxWithholdType_IN   _taxType,
                                                  TransDate            _date,
                                                  recId                _recId)
    {
        TaxWithholdPeriods_IN     taxWithholdPeriods;

        if (_period && _date && _recId)
        {
            select firstonly taxWithholdPeriods
                index hint TaxPeriodIdx
                where taxWithholdPeriods.TaxWithholdSettlementPeriod == TaxWithholdHead_IN::findByTaxPeriodHead(_period, _taxType).RecId
                   && taxWithholdPeriods.TaxType                     == _taxType
                   && taxWithholdPeriods.RecId                       != _recId
                   && taxWithholdPeriods.FromDate                    <= _date
                   && taxWithholdPeriods.ToDate                      >= _date;
        }
        return taxWithholdPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// To create  a new Withhold tax period.
    /// </summary>
    /// <param name="_taxWithholdPeriod">
    /// Create period for the specified withholding tax period.
    /// </param>
    /// <param name="_taxType">
    /// Create period for the specified tax type.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void  newPeriod(TaxWithholdPeriod_IN  _taxWithholdPeriod,
                                         TaxWithholdType_IN    _taxType)
    {
        TaxWithholdHead_IN         taxWithholdHead;
        TaxWithholdPeriods_IN      taxHoldPeriod;
        TaxWithholdPeriods_IN      taxLastPeriods;
        Futures                    futures;

        select PeriodUnit, QtyUnit from  taxWithholdHead
            where taxWithholdHead.Period   == _taxWithholdPeriod
               && taxWithholdHead.TaxType  == _taxType;

        if (taxWithholdHead.QtyUnit == 0)
        {
            throw error("@SYS56375");
        }

        select maxof(ToDate) from taxLastPeriods
            where taxLastPeriods.TaxWithholdSettlementPeriod == TaxWithholdHead_IN::findByTaxPeriodHead(_taxWithholdPeriod, _taxType).RecId
               && taxLastPeriods.TaxType                     == _taxType;

        if (taxLastPeriods.ToDate)
        {
            taxHoldPeriod.TaxWithholdSettlementPeriod = TaxWithholdHead_IN::findByTaxPeriodHead(_taxWithholdPeriod, _taxType).RecId;
            taxHoldPeriod.FromDate                    = taxLastPeriods.ToDate + 1;
            futures = Futures::construct(taxHoldPeriod.FromDate,
                                  taxWithholdHead.QtyUnit,
                                  taxWithholdHead.PeriodUnit);

            taxHoldPeriod.ToDate    = futures.next() - 1;
            taxHoldPeriod.TaxType   = _taxType;
            taxHoldPeriod.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63781</DeveloperDocumentation>
	<FormRef>TaxWithholdPeriods_IN</FormRef>
	<Label>@GLS5483</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>FromDate</TitleField1>
	<TitleField2>ToDate</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxPeriodIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdSettlementPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdSettlementPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:PeriodsINFromDateHelpText</HelpText>
			<Label>@SYS24050</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdSettlementPeriod</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdPeriodRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:PeriodsINToDateHelpText</HelpText>
			<Label>@SYS35904</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxPeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdSettlementPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdHeadIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdSettlementPeriod</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdHead_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdHead_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdHead_IN_TaxWithholdPeriods_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdSettlementPeriod</Name>
					<Field>TaxWithholdSettlementPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdSettleTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdSettleTrans_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdSettlementPeriod</Name>
					<Field>TaxWithholdSettlementPeriod</Field>
					<RelatedField>TaxWithholdSettlementPeriod</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxType</Name>
					<Field>TaxType</Field>
					<RelatedField>TaxType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>