<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResIntValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResIntValue extends EcoResValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares this record against the specified record value.
    /// </summary>
    /// <param name="_value">
    /// The value definition that contains the integer value to which to compare this record.
    /// </param>
    /// <returns>
    /// -1 if the integer value in this record is less than the value in the given record; 0 if the integer
    /// values are identical; 1 if the integer value in this record is greater than the value in the given
    /// record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// This record and the given record are not comparable as they are not of the same type.
    /// </exception>
    public int compareTo(EcoResValue _value)
    {
        int             ret;
        EcoResIntValue  argValue;

        //validates the type and throws an error if they are not the same
        super(_value);

        argValue = _value as EcoResIntValue;

        if (this.IntValue < argValue.IntValue)
        {
            ret = -1;
        }
        else if (this.IntValue > argValue.IntValue)
        {
            ret =  1;
        }
        else
        {
            ret = 0;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of this record that is compatible with the  Procurement Category  configuration.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    public str getStringValue()
    {
        return int2str(this.IntValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of this record.
    /// </summary>
    /// <returns>
    /// The integer representation of this record.
    /// </returns>
    public anytype getValue()
    {
        return this.IntValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <returns>
    /// A reference to the duplicated record.
    /// </returns>
    public RefRecId pcDuplicate()
    {
        EcoResIntValue duplicate;

        duplicate.data(this);
        duplicate.Origin = this.RecId;
        duplicate.insert();

        return duplicate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcGetStringValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <returns>
    /// The string representation of this record.
    /// </returns>
    public str pcGetStringValue()
    {
        super();
        return int2str(this.IntValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>EcoResIntValue</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResIntValue::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResIntValue</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResIntValue</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResIntValue find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResIntValue record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFromHashAndValue</Name>
				<Source><![CDATA[
    public EcoResValue readFromHashAndValue(boolean _forupdate = false)
    {
        EcoResIntValue ecoResIntValue;

        ecoResIntValue.selectForUpdate(_forupdate);
        select firstonly ecoResIntValue
            where ecoResIntValue.SHA1HashHex        == this.hashValue()
                && ecoResIntValue.IntUnitOfMeasure  == this.IntUnitOfMeasure
                && ecoResIntValue.IntValue          == this.IntValue;

        return ecoResIntValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    protected str hashKey()
    {
        return strFmt('%1~%2~', this.IntValue, this.IntUnitOfMeasure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueFieldId</Name>
				<Source><![CDATA[
    public FieldId valueFieldId()
    {
        return fieldNum(EcoResIntValue, IntValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS341224</DeveloperDocumentation>
	<Label>@SYS131190</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>IntValue</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResValue</Extends>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntUnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS96151</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeValueInt</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue_Int</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure_Int</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_1_EcoResIntValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntUnitOfMeasure</Name>
					<Field>IntUnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>