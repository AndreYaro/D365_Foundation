<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBatchProcessingTracking</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankBatchProcessingTracking extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a tracking record for the bank batch process, overwrites the record if exists.
    /// </summary>
    /// <param name = "_common">The source table.</param>
    /// <param name = "_batchHeaderId">The record id of batch header.</param>
    /// <param name = "_operationType">The operation type.</param>
    /// <param name = "_description">The description.</param>
    /// <returns>The tracking record.</returns>
    internal static BankBatchProcessingTracking addTracking(Common _common, RefRecId _batchHeaderId, BankReconciliationOperationType _operationType, Description _description = '')
    {
        BankBatchProcessingTracking tracking;

        if (_common && _batchHeaderId)
        {
            tracking = BankBatchProcessingTracking::findBySource(_common.TableId, _common.RecId, _operationType, true);

            ttsbegin;

            tracking.SourceTableId = _common.TableId;
            tracking.SourceRecId = _common.RecId;
            tracking.BatchJob = _batchHeaderId;
            tracking.BankReconciliationOperationType = _operationType;
            tracking.Description = _description;
            tracking.write();

            ttscommit;
        }

        return tracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrackingFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a tracking record of source for the bank batch process, overwrites the record if exists.
    /// </summary>
    /// <param name = "_sourceTableId">The source table id.</param>
    /// <param name = "_sourceRecId">The source recid.</param>
    /// <param name = "_batchHeaderId">The record id of batch header.</param>
    /// <param name = "_operationType">The operation type.</param>
    /// <param name = "_description">The description.</param>
    /// <returns>The tracking record.</returns>
    internal static BankBatchProcessingTracking addTrackingFromSource(TableId _sourceTableId, RecId _sourceRecId, RefRecId _batchHeaderId, BankReconciliationOperationType _operationType, Description _description = '')
    {
        BankBatchProcessingTracking tracking;

        if (_sourceTableId && _sourceRecId && _batchHeaderId)
        {
            tracking = BankBatchProcessingTracking::findBySource(_sourceTableId, _sourceRecId, _operationType, true);

            ttsbegin;

            tracking.SourceTableId = _sourceTableId;
            tracking.SourceRecId = _sourceRecId;
            tracking.BatchJob = _batchHeaderId;
            tracking.BankReconciliationOperationType = _operationType;
            tracking.Description = _description;
            tracking.write();

            ttscommit;
        }

        return tracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceLegacy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds tracking record by source record.
    /// </summary>
    /// <param name = "_sourceTableId">The table id of source table.</param>
    /// <param name = "_sourceRecId">The record id source table.</param>
    /// <param name = "_description">The description.</param>
    /// <param name = "_forUpdate">Whether selected for update.</param>
    /// <returns>The tracking record.</returns>
    [SysObsolete('Legacy method follows deprecation lifecycle to be compatible with legacy table records. New code is required to use findBySourceAndOperationType instead.', false, 28\03\2024)]
    internal static BankBatchProcessingTracking findBySourceLegacy(TableId _sourceTableId, RecId _sourceRecId, Description _description, boolean _forUpdate = false)
    {
        BankBatchProcessingTracking tracking;

        tracking.selectForUpdate(_forupdate);

        if (_sourceTableId && _sourceRecId)
        {
            select firstonly tracking
                where tracking.SourceTableId == _sourceTableId
                    && tracking.SourceRecId == _sourceRecId
                    && tracking.Description == _description;
        }

        return tracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds tracking record by source table id and source recid and operation type.
    /// </summary>
    /// <param name = "_sourceTableId">The table id of source table.</param>
    /// <param name = "_sourceRecId">The record id source table.</param>
    /// <param name = "_operationType">The operation type.</param>
    /// <param name = "_forUpdate">Whether selected for update.</param>
    /// <returns>The tracking record.</returns>
    internal static BankBatchProcessingTracking findBySource(TableId _sourceTableId, RecId _sourceRecId, BankReconciliationOperationType _operationType, boolean _forUpdate = false)
    {
        BankBatchProcessingTracking tracking;

        tracking.selectForUpdate(_forupdate);

        if (_sourceTableId && _sourceRecId)
        {
            select firstonly tracking
                where tracking.SourceTableId == _sourceTableId
                    && tracking.SourceRecId == _sourceRecId
                    && tracking.BankReconciliationOperationType == _operationType;
        }

        return tracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnyTypeFirstProcessingBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds first processing tracking record by source table id and source recid.
    /// </summary>
    /// <param name = "_tableId">The table id of source table.</param>
    /// <param name = "_recId">The record id source table.</param>
    /// <returns>The tracking record.</returns>
    internal static BankBatchProcessingTracking findAnyTypeFirstProcessingBySource(TableId _tableId, RecId _recId)
    {
        BankBatchProcessingTracking tracking;
        BatchJob batchJob;

        if (_tableId && _recId)
        {
            select firstonly tracking
                where tracking.SourceTableId == _tableId
                    && tracking.SourceRecId ==_recId
                exists join batchJob
                    where batchJob.RecId == tracking.BatchJob
                        && batchJob.Status != BatchStatus::Canceled
                        && batchJob.Status != BatchStatus::Error
                        && batchJob.Status != BatchStatus::Finished;
        }

        return tracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchJobProcessingLegacy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the batch is processing.
    /// </summary>
    /// <param name = "_common">The source table.</param>
    /// <param name = "_description">The description.</param>
    /// <returns>true if the batch is processing, else false.</returns>
    [SysObsolete('Legacy method follows deprecation lifecycle to be compatible with legacy table records. New code is required to use isBatchJobOfOperationTypeProcessing instead.', false, 28\03\2024)]
    internal static boolean isBatchJobProcessingLegacy(Common _common, Description _description)
    {
        boolean ret = false;
        BankBatchProcessingTracking tracking = BankBatchProcessingTracking::findBySourceLegacy(_common.TableId, _common.RecId, _description);

        if (tracking)
        {
            BatchJob batchJob;
            select firstonly RecId, Status from batchJob where batchJob.RecId == tracking.BatchJob;

            if (batchJob.RecId)
            {
                switch (batchJob.Status)
                {
                    case BatchStatus::Canceled:
                    case BatchStatus::Error:
                    case BatchStatus::Finished:
                        ret = false;
                        break;

                    default:
                        ret = true;
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchJobProcessing</Name>
				<Source><![CDATA[
    internal static boolean isBatchJobProcessing(Common _common, BankReconciliationOperationType _operationType)
    {
        boolean ret = false;
        BankBatchProcessingTracking tracking = BankBatchProcessingTracking::findBySource(_common.TableId, _common.RecId, _operationType);

        if (tracking)
        {
            BatchJob batchJob;
            select firstonly RecId, Status from batchJob where batchJob.RecId == tracking.BatchJob;

            if (batchJob.RecId)
            {
                switch (batchJob.Status)
                {
                    case BatchStatus::Canceled:
                    case BatchStatus::Error:
                    case BatchStatus::Finished:
                        ret = false;
                        break;

                    default:
                        ret = true;
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<Label>@Bank:BankBatchProcessingTrackingLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>BatchJob</TitleField1>
	<TitleField2>SourceTableId</TitleField2>
	<Visibility>Internal</Visibility>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Bank</Modules>
	<PrimaryIndex>SourceAndBatchJobIndex</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BatchJob</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankReconciliationOperationType</Name>
			<EnumType>BankReconciliationOperationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceAndBatchJobIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>BatchJob</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Description</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceOperationAndBatchJobIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BankReconciliationOperationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchJob</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BatchJob</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BatchJob</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BatchJobPerformanceTest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BatchJob</Name>
					<Field>BatchJob</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>