<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineCycleCount</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkLineCycleCount extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayAcceptReject</Name>
				<Source><![CDATA[
	/// <summary>
	/// Method to display image for accept/reject status of the line.
	/// </summary>
	/// <returns>
	/// The image for accept/reject status of the line.
	/// </returns>
    display ImageRes displayAcceptReject()
    {
        #ResAppl
        ImageRes    ret;

        switch (this.AcceptReject)
        {
            case WHSAcceptReject::Accept:
                ret = #ImageOverlayYes;
                break;

            case WHSAcceptReject::Reject:
                ret = #ImageOverlayNo;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInventJournalId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Method to display inventory journal id of the work associated with the cycle count line.
	/// </summary>
	/// <returns>
	/// The inventory journal id of the work.
	/// </returns>
    display InventJournalId displayInventJournalId()
    {
        return WHSWorkTable::find(this.AdjustmentWorkId).InventJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemValuation</Name>
				<Source><![CDATA[
	/// <summary>
	/// Method to display valuation of the item in the work line.
	/// </summary>
	/// <returns>
	/// The valuation of the item associated with work line.
	/// </returns>
    display WHSCycleCountValuation displayItemValuation()
    {
        return InventTable::find(this.ItemId).costPcsPrice(this.InventDimId) * (this.QtyCounted - this.QtyExpected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsWorkLineCycleCount</c> record exists.
	/// </summary>
	/// <param name="_whsWorkId">
	/// Work id of the record.
	/// </param>
	/// <param name="_lineNum">
	/// Line number of the record.
	/// </param>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
	/// <param name="_inventDimId">
	/// Dimension id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
        public static boolean exist(WHSWorkId   _whsWorkId,
                                LineNum     _lineNum,
                                ItemId      _itemId,
                                InventDimId _inventDimId)
    {
        return (_whsWorkId && _lineNum && _itemId && _inventDimId) &&
               (select firstonly whsWorkLineCycleCount
                where whsWorkLineCycleCount.WorkId      ==   _whsWorkId   &&
                      whsWorkLineCycleCount.LineNum     ==   _lineNum     &&
                      whsWorkLineCycleCount.ItemId      ==   _itemId      &&
                      whsWorkLineCycleCount.InventDimId ==   _inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSWorkLineCycleCount</c> record with given parameters.
	/// </summary>
	/// <param name="_whsWorkId">
	/// Work id of the record.
	/// </param>
	/// <param name="_lineNum">
	/// Line number of the record.
	/// </param>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
	/// <param name="_inventDimId">
	/// Dimension id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
        public static WHSWorkLineCycleCount find(WHSWorkId   _whsWorkId,
                                             LineNum     _lineNum,
                                             ItemId      _itemId,
                                             InventDimId _inventDimId,
                                             boolean     _forupdate = false)
    {
        WHSWorkLineCycleCount    whsWorkLineCycleCount;

        if (_whsWorkId   &&
            _lineNum     &&
            _itemId      &&
            _inventDimId)
        {
            whsWorkLineCycleCount.selectForUpdate(_forupdate);

            select firstonly whsWorkLineCycleCount
                where whsWorkLineCycleCount.WorkId      ==   _whsWorkId   &&
                      whsWorkLineCycleCount.LineNum     ==   _lineNum     &&
                      whsWorkLineCycleCount.ItemId      ==   _itemId      &&
                      whsWorkLineCycleCount.InventDimId ==   _inventDimId;
        }

        return whsWorkLineCycleCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAdjustmentWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSWorkLineCycleCount</c> table.
    /// </summary>
    /// <param name="_adjustmentWorkId">
    /// WorkId of the adjustment work header to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSWorkLineCycleCount</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSWorkLineCycleCount findByAdjustmentWorkId(WHSWorkId _adjustmentWorkId, boolean _forUpdate = false)
    {
        WHSWorkLineCycleCount   workLineCycleCount;

        workLineCycleCount.selectForUpdate(_forUpdate);

        if (_adjustmentWorkId)
        {
            select firstOnly workLineCycleCount
                where workLineCycleCount.AdjustmentWorkId == _adjustmentWorkId;
        }

        return workLineCycleCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSWorkTable</Name>
				<Source><![CDATA[
    public WHSWorkTable WHSWorkTable(WHSWorkTable _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('WHSWorkTable');
        }
        else
        {
            return this.setLink('WHSWorkTable', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field contents before writing to the database.
    /// </summary>
    /// <returns>true if the field contents are valid; otherwise, false.</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            ret = PdsCatchWeight::validateInventQty(this.ItemId, this.ExpectedWeight, this.QtyExpected, true);

            if (ret && this.QtyExpected != this.QtyCounted)
            {
                ret = PdsCatchWeight::validateInventQty(this.ItemId, this.CapturedWeight, this.QtyCounted, true);
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes additional logic when a field in this table has been modified.
    /// </summary>
    /// <param name = "_fieldId">The field id for the field modified.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(WHSWorkLineCycleCount, QtyCounted):
                if (this.QtyExpected == this.QtyCounted)
                {
                    this.CapturedWeight = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationLicensePlatePosition</Name>
				<Source><![CDATA[
    private void updateLocationLicensePlatePosition()
    {
        if (this.LocationLicensePlatePosition != 0)
        {
            InventDim inventDim = InventDim::find(this.InventDimId);

            WHSLocationLicensePlatePositioningSequencer::newFromLicensePlateAtLocation(inventDim.LicensePlateId, inventDim.wmsLocation())
                .putLicensePlateAtPosition(this.LocationLicensePlatePosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentlyBeingAccepted</Name>
				<Source><![CDATA[
    private boolean isCurrentlyBeingAccepted(WHSAcceptReject _origAcceptReject)
    {
        return _origAcceptReject != WHSAcceptReject::Accept
            && this.AcceptReject == WHSAcceptReject::Accept;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WHSAcceptReject origAcceptReject = this.orig().AcceptReject;

        super();

        if (this.isCurrentlyBeingAccepted(origAcceptReject))
        {
            this.updateLocationLicensePlatePosition();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        if (this.AcceptReject == WHSAcceptReject::Accept)
        {
            this.updateLocationLicensePlatePosition();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNewWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves all <c>WhsWorkLineCycleCount</c> records associated with a work line to a new work line.
    /// </summary>
    /// <param name="_origWorkId">
    ///    The Work ID the <c>WhsWorkLineCycleCount</c> records are currently associated with.
    /// </param>
    /// <param name="_origLineNum">
    ///    The line number the <c>WhsWorkLineCycleCount</c> records are currently associated with.
    /// </param>
    /// <param name="_newWorkId">
    ///    The Work ID the <c>WhsWorkLineCycleCount</c> records must be associated with.
    /// </param>
    /// <param name="_newLineNum">
    ///    The new line number the <c>WhsWorkLineCycleCount</c> records must be associated with.
    /// </param>
    internal static void moveToNewWorkLine(WHSWorkId  _origWorkId,
                                           LineNum    _origLineNum,
                                           WHSWorkId  _newWorkId,
                                           LineNum    _newLineNum)
    {
        if (!_origWorkId || !_newWorkId)
        {
            return;
        }

        WhsWorkLineCycleCount workLineCycleCount;

        ttsbegin;

        update_recordset workLineCycleCount
            setting WorkId  = _newWorkId,
                    LineNum = _newLineNum
            where workLineCycleCount.WorkId      == _origWorkId
                && workLineCycleCount.LineNum    == _origLineNum;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4507</DeveloperDocumentation>
	<Label>@WAX1573</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>WorkId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WorkIdLineNumItemIdInventDimIdIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkIdLineNumItemIdInventDimIdIdx</PrimaryIndex>
	<ReplacementKey>WorkIdLineNumItemIdInventDimIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyExpected</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCounted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountReconcile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountCounted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptReject</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyExpected</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCounted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountReconcile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountCounted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptReject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentWorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountingReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocationLicensePlatePosition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WeightCapture</Name>
			<Label>@WAX:WeightCaptureGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpectedWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapturedWeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AcceptReject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSAcceptReject</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdjustmentWorkId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAdjustmentWorkId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CycleCountCounted</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountCounted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CycleCountReconcile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountReconcile</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyCounted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQtyCounted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyExpected</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQtyExpected</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountingReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCountingReasonCodeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSExpectedWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LocationLicensePlatePosition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocationLicensePlatePosition</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkIdLineNumItemIdInventDimIdIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdjustmentWorkIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AdjustmentWorkId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AcceptRejectDimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AcceptReject</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineNum</Name>
					<SourceEDT>WHSLineNum</SourceEDT>
					<Field>LineNum</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTable</Name>
			<Cardinality>OneMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<SourceEDT>WHSWorkId</SourceEDT>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTableAdjust</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkTableAdjust</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Adjustment</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdjustmentWorkId</Name>
					<SourceEDT>WHSAdjustmentWorkId</SourceEDT>
					<Field>AdjustmentWorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventCountingReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventCountingReasonCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountingReasonCode</Name>
					<Field>CountingReasonCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>