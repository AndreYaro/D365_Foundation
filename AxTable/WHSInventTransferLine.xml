<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventTransferLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSInventTransferLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayQtyLeftToRelease</Name>
				<Source><![CDATA[
	/// <summary>
	/// Calculates and displays quantity left to release.
	/// </summary>
    display ProductQuantity displayQtyLeftToRelease()
    {
        Qty                 ret;
        InventQty           qtyReservedPhysical;
        InventQty           pdsCWQtyReservPhysical;

        InventTransferLine transferLine = InventTransferLine::findRecId(this.RecId);

        [qtyReservedPhysical, pdsCWQtyReservPhysical] = transferLine.qtyReservedPhysical();

        if (PdsGlobal::pdsIsCWItem(transferLine.ItemId))
        {
            ret = pdsCWQtyReservPhysical + transferLine.PdsCWQtyShipped + transferLine.pdsCWQtyShipPicked() - this.ReleasedQty;
        }
        else
        {
            // (Quantity Physically Reserved + Picked + Shipped) - release qty = qty left to release.
            ret = qtyReservedPhysical + transferLine.QtyShipped + transferLine.qtyShipPicked() - this.ReleasedQty;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>WHSInventTransferLine</c> record with an <c>InitTransferLine</c>
    /// record.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The <c>InventTransferLine</c> record.
    /// </param>
    /// <param name="_initializeQtys">
    /// The Boolean value that indicates whether to initialize quantities
    /// </param>
    public void initFromInventTransferLine(InventTransferLine _inventTransferLine, boolean _initializeQtys = true)
    {
        this.InventTransferLine = _inventTransferLine.RecId;

        if (_initializeQtys)
        {
            if (!PdsGlobal::pdsIsCWItem(_inventTransferLine.ItemId))
            {
                this.QtyLeftToLoad  = _inventTransferLine.QtyTransfer;
            }
            else
            {
                this.QtyLeftToLoad  = _inventTransferLine.PdsCWQtyTransfer;
            }

            this.PackingQty        = WHSInventTable::getDefaultPackingQty(_inventTransferLine.ItemId, _inventTransferLine.InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>WHSInventTransferLine</c> table exists.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The <c>InventTransferLine</c> table record Id.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(InventTransferLineRecId _inventTransferLine)
    {
        return _inventTransferLine &&
            (select firstonly RecId from whsInventTransferLine
                where whsInventTransferLine.InventTransferLine  == _inventTransferLine).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSInventTransferLine</c> table.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The <c>InventTransferLine</c> table record Id.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSInventTransferLine</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSInventTransferLine find(InventTransferLineRecId _inventTransferLine, boolean _forUpdate = false)
    {
        WHSInventTransferLine    inventTransferLine;

        if (_inventTransferLine)
        {
            inventTransferLine.selectForUpdate(_forUpdate);

            select firstonly inventTransferLine
                where inventTransferLine.InventTransferLine     == _inventTransferLine;
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSInventTransferLine</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    /// The unique record for InventTransId to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSInventTransferLine</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSInventTransferLine findByInventTransId(InventTransId _inventTransId, boolean _forUpdate = false)
    {
        WHSInventTransferLine   whsInventTransferLine;
        InventTransferLine      inventTransferLine;

        if (_inventTransId)
        {
            whsInventTransferLine.selectForUpdate(_forUpdate);

            select firstonly whsInventTransferLine
                exists join inventTransferLine
                    where inventTransferLine.InventTransId == _inventTransId
                       && inventTransferLine.RecId == whsInventTransferLine.InventTransferLine;
        }

        return whsInventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasShippedWithLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true or false based on whether the transfer order was shipped with a license plate
    /// </summary>
    /// <param name="_transferId">
    /// TransferId used to find the inventTransferLine
    /// </param>
    /// <param name="_lineNum">
    /// LineNum used to find the inventTransferLine
    /// </param>
    /// <returns>
    /// True when the transfer order was shipped with a license plate; otherwise, false.
    /// </returns>
    public static boolean wasShippedWithLP(InventTransferId _transferId, LineNum _lineNum)
    {
        InventTransferLine  inventTransferLine;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;

        select firstonly TransferId, LineNum, InventTransId from inventTransferLine
            where inventTransferLine.TransferId == _transferId &&
                  inventTransferLine.LineNum    == _lineNum
            join InventTransId, RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == inventTransferLine.InventTransId
            join InventTransOrigin, InventDimId, StatusIssue from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                      inventTrans.StatusIssue       == StatusIssue::Sold &&
                      inventTrans.StatusReceipt     == StatusReceipt::None
            join LicensePlateId from inventDim
                where inventDim.InventDimId == inventTrans.InventDimId  &&
                      inventDim.LicensePlateId != '';

        return inventDim.LicensePlateId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsReceiptTransWithSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a receipt transaction for the transfer order line with a serial ID specified.
    /// </summary>
    /// <param name="_transferLine">
    /// The current transfer order line.
    /// </param>
    /// <returns>
    /// True if a receipt transaction record with a serial ID exists; otherwise false.
    /// </returns>
    public static boolean existsReceiptTransWithSerial(InventTransferLine _transferLine)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;
        boolean             ret = false;

        if (InventTable::find(_transferLine.ItemId).isItemSerialNumberActivated())
        {
            select firstOnly RecId from inventDim
                where inventDim.inventSerialId
            join TableId from InventTrans
                where InventTrans.inventDimId == inventDim.inventDimId
            join TableId from inventTransOrigin
                where inventTransOrigin.RecId           == InventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId  == _transferLine.InventTransIdReceive;

            ret = inventDim.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveBatchAndHandlingQtyLeftToReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first batch which has still ordered handling quantity to be received and its total ordered handling quantity
    /// which has not been yet received on the current license plate.
    /// </summary>
    /// <param name="_transferLine">
    /// The current transfer order line.
    /// </param>
    /// <param name="_receiptId">
    /// The current receipt ID.
    /// </param>
    /// <param name="_licensePlateId">
    /// The current license plate ID.
    /// </param>
    /// <returns>
    /// The batch ID and its total ordered handling quantity which has not been received yet on this license plate.
    /// </returns>
    [Hookable(false)]
    public static container retrieveBatchAndHandlingQtyLeftToReceive(
        InventTransferLine      _transferLine,
        WHSReceiptId            _receiptId,
        WHSLicensePlateId       _licensePlateId)
    {
        return WHSInventTransferLine::retrieveBatchAndHandlingQuantitiesLeftToReceive(_transferLine, _receiptId, _licensePlateId, PdsGlobal::pdsIsCWItem(_transferLine.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveBatchAndHandlingQuantitiesLeftToReceive</Name>
				<Source><![CDATA[
    private static container retrieveBatchAndHandlingQuantitiesLeftToReceive(
        InventTransferLine      _transferLine,
        WHSReceiptId            _receiptId,
        WHSLicensePlateId       _licensePlateId,
        boolean                 _isCWItem)
    {
        WHSReceiptDetails            receiptDetails;
        InventTrans                  inventTrans;
        InventDim                    inventDim;
        InventTransOrigin            inventTransOrigin;
        InventHandlingQty            returnInventHandlingQty = 0;
        InventBatchId                returnBatchId;

        while select sum(Qty), sum(PdsCWQty) from inventTrans
            where inventTrans.ItemId         == _transferLine.ItemId
                && inventTrans.StatusReceipt == StatusReceipt::Ordered
                && inventTrans.StatusIssue   == StatusIssue::None
            join inventDim
                group by InventBatchId
                where inventDim.inventDimId == inventTrans.inventDimId
                    && inventDim.inventBatchId
            exists join inventTransOrigin
                where inventTransOrigin.RecId          == inventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId == _transferLine.InventTransIdReceive
        {
            /*
            The receiptdetails are tracking the quantity for all batches across items,
            so if we have same batch on two different lines we don't know if we have more quantity to receive but we will still return a batch if one was found
            */
            returnBatchId = inventDim.inventBatchId;

            select sum(InventQty) from receiptDetails
                where receiptDetails.ReceiptId == _receiptId
                exists join inventDim
                    where inventDim.inventDimId == receiptDetails.inventDimId
                        && inventDim.inventBatchId == returnBatchId
                        && inventDim.LicensePlateId == _licensePlateId;

            if (_isCWItem)
            {
                if (receiptDetails.InventQty < inventTrans.PdsCWQty)
                {
                    returnInventHandlingQty = inventTrans.PdsCWQty - receiptDetails.InventQty;
                    break;
                }
            }
            else
            {
                if (receiptDetails.InventQty < inventTrans.Qty)
                {
                    returnInventHandlingQty = inventTrans.Qty - receiptDetails.InventQty;
                    break;
                }
            }
        }
        
        return [returnBatchId, returnInventHandlingQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxTransferLineReleaseQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the maximum handling quantity that can be released for a transfer line, taking into account overdelivery.
    /// </summary>
    /// <param name = "_transferLine">Transfer order line to calculate the maximum handling quantity that can be released for.</param>
    /// <returns>The maximum handling quantity that can be released for the transfer order line.</returns>
    [Hookable(false)]
    internal static InventHandlingQty maxTransferLineReleaseQty(InventTransferLine _transferLine)
    {
        InventHandlingQty handlingQtyOrder;

        if (PdsGlobal::pdsIsCWItem(_transferLine.ItemId))
        {
            handlingQtyOrder = _transferLine.PdsCWQtyTransfer;
        }
        else
        {
            handlingQtyOrder = _transferLine.QtyTransfer;
        }

        return handlingQtyOrder + (handlingQtyOrder * (_transferLine.OverDeliveryPct/100));
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.ReleasedQty < 0)
        {
            InventTransferLine inventTransferLine = InventTransferLine::findRecId(this.InventTransferLine);
            throw error(strFmt("@WAX:ReleasedQtyCannotBeNegative", inventTransferLine.ItemId, inventTransferLine.InventTransId));
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4374</DeveloperDocumentation>
	<FormRef>InventTransferOrder</FormRef>
	<Label>@WAX1413</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InventTransferLine</TitleField1>
	<TitleField2>QtyLeftToLoad</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InventTransferLine</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventTransferLine</PrimaryIndex>
	<ReplacementKey>InventTransferLine</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransferLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyLeftToLoad</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWave</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWaveQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransferLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransferLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyLeftToLoad</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWave</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnWaveQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CrossDock</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CrossDock</Name>
			<Label>@SYS6437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CrossDock</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundShipmentPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CrossDock</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCrossDock</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransferLine</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferLineRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnWave</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOnWave</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OnWaveQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOnWaveQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PackingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPackingQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyLeftToLoad</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQtyLeftToLoad</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReleasedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReleasedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutboundShipmentPolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSOutboundShipmentPolicy</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransferLine</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransferLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransferLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTransferLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransferLine</Name>
					<Field>InventTransferLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>