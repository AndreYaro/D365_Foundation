<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgStampJournalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgStampJournalTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approves the registrations that are associated with the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// An attempt is made to approve registrations on a future profile date.
    /// </exception>
    [SysObsolete('Use method JmgStampJournalApprove::newFromJournalTable(JmgStampJournalTable).approve() instead', false, 31\03\2019)]
    public void approve()
    {
        JmgStampJournalApprove::newFromJournalTable(this).approve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels approval of registrations that are associated to the <c>JmgStampJournalTable</c> record.
    /// </summary>
    public void approveCancel()
    {
        if (this.Transferred)
        {
            JmgStampJournalTransfer::newFromJournalTable(this).cancel();
            this.reread();
        }

        ttsbegin;

        if (!this.Transferred)
        {
            this.Approved   = NoYes::No;
            this.ApprovedByWorker = 0;
            this.setError('');
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates registrations that are associated to the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="isSimulation">
    /// A Boolean value that specifies whether a simulated calculation must be performed.
    /// </param>
    /// <param name="simEndDate">
    /// The end date of a simulated calculation.
    /// </param>
    /// <param name="simEndTime">
    /// The end time of a simulated calculation.
    /// </param>
    /// <remarks>
    /// A simulated calculation performs a calculation as though the worker stopped working at the
    /// specified date and time.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// An attempt is made to calculate registrations on a future profile date.
    /// </exception>
    [SysObsolete('Use method JmgStampJournalCancel::newFromJournalTable(JmgStampJournalTable).run() instead', false, 31\03\2019)]
    public void calculate(boolean isSimulation    = false,
                   StartDate     simEndDate      = dateNull(),
                   JmgSeconds    simEndTime      = 0)
    {
        JmgStampJournalCalculate::newFromJournalTable(this).run(isSimulation, simEndDate, simEndTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a previous calculation of registrations that are associated to the
    /// <c>JmgStampJournalTable</c> record.
    /// </summary>
    public void calculateCancel()
    {
        if (this.Approved)
        {
            this.approveCancel();
            this.reread();
        }

        ttsbegin;

        if (!this.Approved)
        {
            this.Calculated         = NoYes::No;
            this.CalculatedByWorker = 0;
            this.WorkStart          = 0;
            this.WorkEnd            = 0;
            this.WorkSeconds        = 0;
            this.setError('');
            this.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the days total record can be submitted to workflow.
    /// </summary>
    /// <param name="_workflowType">
    /// The workflow type to use to submit a record to the workflow.
    /// </param>
    /// <returns>
    /// true if the days total record can be submitted to the workflow; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        super(_workflowType);
        return this.Calculated                                                  &&
               (this.WorkflowStatus == JmgDaysTotalWorkflowStatus::NotSubmitted ||
                this.WorkflowStatus == JmgDaysTotalWorkflowStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePayCountEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes pay events linked to count units, which is associated to the <c>JmgStampJournalTable</c> record.
    /// </summary>
    public void deletePayCountEvents()
    {
        JmgPayEvents                jmgPayEvents;
        JmgPayAgreementLine         jmgPayAgreementLine;
        JmgPayAgreementOverrideLine jmgPayAgreementOverrideLine;

        void deleteEvents(JmgPayCountId _jmgPayCountId)
        {
            ProjPeriodLine projPeriodLine = ProjPeriodLine::findFromPeriod(JmgPayCountTable::find(_jmgPayCountId).ProjPeriodId, this.ProfileDate);

            if (projPeriodLine)
            {
                delete_from jmgPayEvents
                    where jmgPayEvents.Worker       == this.Worker
                        && jmgPayEvents.ProfileDate >  this.ProfileDate
                        && jmgPayEvents.ProfileDate <= projPeriodLine.PeriodTo
                        && jmgPayEvents.PayCountId  == _jmgPayCountId;
            }
        }

        if (JmgPayAgreementOverride::find(this.Worker, this.ProfileDate))
        {
            while select PayCountId
                from  jmgPayAgreementOverrideLine
                where jmgPayAgreementOverrideLine.Worker        == this.Worker
                    && jmgPayAgreementOverrideLine.ProfileDate  == this.ProfileDate
                    && jmgPayAgreementOverrideLine.PayCountId
            {
                deleteEvents(jmgPayAgreementOverrideLine.PayCountId);
            }
        }
        else
        {
            while select PayCountId
                from  jmgPayAgreementLine
                where jmgPayAgreementLine.PayAgreement  == this.PayAgreement
                    && jmgPayAgreementLine.DayId        == JmgProfiles::date2DayId(this.ProfileDate)
                    && jmgPayAgreementLine.PayCountId
            {
                deleteEvents(jmgPayAgreementLine.PayCountId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>error</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>Log</c> field is set on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if the <c>Log</c> field is set; otherwise, the
    /// <c>NoYes::No</c> value.
    /// </returns>
    public display JmgLabelError error()
    {
        return this.Log != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsEventCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the worker has made a switch code registration at the profile date referred to by
    /// the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if the worker has made a switch code registration;
    /// otherwise, the <c>NoYes::No</c> value.
    /// </returns>
    public display JmgLabelEventCode existsEventCode()
    {
        return (((select firstonly RecId from jmgEventCtrl
                        where jmgEventCtrl.Worker               == this.Worker     &&
                              jmgEventCtrl.ProfileDate          == this.ProfileDate).RecId)
                ? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns related transactions lines.
    /// </summary>
    /// <returns>
    /// The <c>JmgStampJournalTrans</c> buffer.
    /// </returns>
    public JmgStampJournalTrans getTransLinesTmp()
    {
        JmgStampJournalTrans stampJournalTrans, stampJournalTransTmp;
        stampJournalTransTmp.setTmp();

        while select stampJournalTrans
            where stampJournalTransTmp.ProfileDate == this.ProfileDate
                && stampJournalTransTmp.Worker == this.Worker
        {
            stampJournalTransTmp.data(stampJournalTrans);
            stampJournalTransTmp.insert();
        }

        return stampJournalTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>ContainsError</c> field is set on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if the <c>ContainsError</c> field is set; otherwise, the
    /// <c>NoYes::No</c> value.
    /// </returns>
    public display JmgLabelImageError imageError()
    {
        return this.ContainsError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayCountEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts pay events that are linked to count units, which are associated to the
    /// <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// The number of inserted records.
    /// </returns>
    public int insertPayCountEvents()
    {
        JmgPayAgreementLine         jmgPayAgreementLine;
        JmgPayAgreementOverrideLine jmgPayAgreementOverrideLine;
        int                         insertedEvents = 0;

        int insertEvents(JmgPayCountId _jmgPayCountId)
        {
            ProjPeriodLine          projPeriodLine;
            JmgProfileDate          nextDate;
            JmgStampJournalTable    nextStampJournalTable;
            JmgTransferEvents       jmgTransferEvents;
            int                     eventCount = 0;

            projPeriodLine  = ProjPeriodLine::findFromPeriod(JmgPayCountTable::find(_jmgPayCountId).ProjPeriodId, this.ProfileDate);

            nextDate = this.ProfileDate + 1;
            while (nextDate <= projPeriodLine.PeriodTo)
            {
                nextStampJournalTable   = JmgStampJournalTable::find(this.Worker, nextDate);
                if (nextStampJournalTable.Transferred   == NoYes::Yes)
                {
                    jmgTransferEvents = new JmgTransferEvents();
                    jmgTransferEvents.createPayEventsArray(nextStampJournalTable);
                    jmgTransferEvents.insertEvents(_jmgPayCountId);
                    eventCount += jmgTransferEvents.getInsertedEventsCount();
                }
                nextDate++;
            }

            return eventCount;
        }

        if (JmgPayAgreementOverride::find(this.Worker, this.ProfileDate))
        {
            while select PayCountId
                from  jmgPayAgreementOverrideLine
                where jmgPayAgreementOverrideLine.Worker        == this.Worker      &&
                      jmgPayAgreementOverrideLine.ProfileDate   == this.ProfileDate &&
                      jmgPayAgreementOverrideLine.PayCountId
            {
                insertedEvents +=
                insertEvents(jmgPayAgreementOverrideLine.PayCountId);
            }
        }
        else
        {
            while select PayCountId
                from  jmgPayAgreementLine
                where jmgPayAgreementLine.PayAgreement          == this.PayAgreement                            &&
                      jmgPayAgreementLine.DayId                 == JmgProfiles::date2DayId(this.ProfileDate)    &&
                      jmgPayAgreementLine.PayCountId
            {
                insertedEvents +=
                insertEvents(jmgPayAgreementLine.PayCountId);
            }
        }

        return insertedEvents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>Approved</c> field on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    public void markApproved(JmgApproved value)
    {
        if (value)
        {
            JmgStampJournalApprove::newFromJournalTable(this).approve();
        }
        else
        {
            this.approveCancel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>Calculated</c> field on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    public void markCalculated(JmgCalculated value)
    {
        if (value)
        {
            JmgStampJournalCalculate::newFromJournalTable(this).run();
        }
        else
        {
            this.calculateCancel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>Transferred</c> field on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    public void markTransferred(JmgTransferred value)
    {
        if (value)
        {
            JmgStampJournalTransfer::newFromJournalTable(this).run();
        }
        else
        {
            JmgStampJournalTransfer::newFromJournalTable(this).cancel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set that to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonPaidBreakSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>NonPaidBreaksSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>NonPaidBreaksSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelNonPaidBreaks nonPaidBreakSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.NonPaidBreakSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normFlexTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the <c>NormFlexSec</c> field formatted as a string.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the <c>NormFlexSec</c> field must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>NormFlexSec</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelNormFlexTime normFlexTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.NormFlexSec = JmgProfileSeconds::unFormattedSeconds(value);
        }

        return JmgProfileSeconds::formattedSeconds(this.NormFlexSec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the <c>NormSec</c> field formatted as a string.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the <c>NormSec</c> field must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>NormSec</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelNormTime normTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.NormSec = JmgProfileSeconds::unFormattedSeconds(value);
        }

        return JmgProfileSeconds::formattedSeconds(this.NormSec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overridePay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the pay agreement that is associated with the <c>JmgStampJournalTable</c> record
    /// has been overridden.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if the pay agreement has been overridden; otherwise, the
    /// <c>NoYes::No</c> value.
    /// </returns>
    public display JmgLabelPayOverride overridePay()
    {
        return (((select firstonly RecId from jmgPayAgreementOverride
                        where jmgPayAgreementOverride.Worker      == this.Worker     &&
                              jmgPayAgreementOverride.ProfileDate == this.ProfileDate).RecId)
                ? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the profile that is associated with the <c>JmgStampJournalTable</c> record has
    /// been overridden.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if the profile has been overridden; otherwise, the
    /// <c>NoYes::No</c> value.
    /// </returns>
    public display JmgLabelProfileOverride overrideProfile()
    {
        return (((select firstonly RecId from jmgProfileOverride
                        where jmgProfileOverride.Worker      == this.Worker     &&
                              jmgProfileOverride.ProfileDate == this.ProfileDate).RecId)
                ? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paidBreakSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PaidBreakSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PaidBreakSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelPaidBreaks paidBreakSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PaidBreakSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payAbsenceSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayAbsenceSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayAbsenceSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayAbsence payAbsenceSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayAbsenceSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payFlexAddSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayFlexAddSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayFlexAddSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayFlexAdd payFlexAddSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayFlexAddSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payFlexBalanceSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayFlexBalanceSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayFlexBalanceSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayFlexBalance payFlexBalanceSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayFlexBalanceSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payFlexCorrectionSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayFlexCorrectionSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayFlexCorrectionSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayFlexCorrection payFlexCorrectionSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayFlexCorrectionSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payFlexSubSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayFlexSubSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayFlexSubSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayFlexSub payFlexSubSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayFlexSubSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payIllegalAbsenceSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayIllegalAbsenceSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayIllegalAbsenceSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayIllegalAbsence payIllegalAbsenceSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayIllegalAbsenceSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payLegalAbsenceSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayLegalAbsenceSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayLegalAbsenceSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayLegalAbsence payLegalAbsenceSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayLegalAbsenceSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payOvertimeSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayOverTimeSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayOverTimeSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPayOvertime payOvertimeSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayOverTimeSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PaySeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PaySeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsPay paySecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.PaySeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>profileDateDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns day of the week for the <c>ProfileDate</c> value.
    /// </summary>
    /// <returns>
    /// The day of the week for the <c>ProfileDate</c> value.
    /// </returns>
    public display WeekDays profileDateDay()
    {
        return dayOfWk(this.ProfileDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>profileday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the week day of the profile date on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// the week day of the profile date on the <c>JmgStampJournalTable</c> record.
    /// </returns>
    public display JmgDayIdEnum profileday()
    {
        return JmgProfiles::date2DayId(this.ProfileDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>profileSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>ProfileSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>ProfileSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSecondsProfile profileSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.ProfileSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets values to default values on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    public void resetValues()
    {
        JmgEmployee         jmgEmployee;
        JmgProfileDay       jmgProfileDay;
        JmgProfileOverride  jmgProfileOverride;

        select firstonly PayAgreement, FlexProfile from jmgEmployee
            where jmgEmployee.Worker == this.Worker;

        this.PayAgreement               = (select firstonly PayAgreement from jmgProfileTable
                                                where jmgProfileTable.Profile == this.Profile).PayAgreement;
        if (! this.PayAgreement)
        {
            this.PayAgreement           = jmgEmployee.PayAgreement;
        }

        this.FlexProfile                = jmgEmployee.FlexProfile;

        select firstonly jmgProfileOverride
            where jmgProfileOverride.Worker         == this.Worker &&
                  jmgProfileOverride.ProfileDate    == this.ProfileDate;
        if (jmgProfileOverride)
        {
            this.NormSec                = jmgProfileOverride.Normsec;
            this.NormFlexSec            = jmgProfileOverride.NormFlexSec;
        }
        else
        {
            select firstonly jmgProfileDay
                where jmgProfileDay.Profile         == this.Profile &&
                      jmgProfileDay.DayId           == JmgProfiles::date2DayId(this.ProfileDate);
            if (jmgProfileDay)
            {
                this.NormSec            = jmgProfileDay.NormSec;
                this.NormFlexSec        = jmgProfileDay.NormFlexSec;
            }
            else
            {
                this.NormSec            = 0;
                this.NormFlexSec        = 0;
            }
        }

        this.setError('');
        this.Calculated                 = false;
        this.Approved                   = false;
        this.Transferred                = false;
        this.ApprovedByWorker           = 0;
        this.CalculatedByWorker         = 0;
        this.TransferredByWorker        = 0;

        this.ProfileStart               = 0;
        this.ProfileStartDate           = dateNull();
        this.ProfileEnd                 = 0;
        this.ProfileEndDate             = dateNull();
        this.ProfileSeconds             = 0;

        this.WorkStart                  = 0;
        this.WorkStartDate              = dateNull();
        this.WorkEnd                    = 0;
        this.WorkEndDate                = dateNull();
        this.WorkSeconds                = 0;

        this.PayStart                   = 0;
        this.PayStartDate               = dateNull();
        this.PayEnd                     = 0;
        this.PayEndDate                 = dateNull();
        this.PaySeconds                 = 0;

        this.PayOverTimeSeconds         = 0;
        this.PayFlexAddSeconds          = 0;
        this.PayFlexSubSeconds          = 0;
        this.PayFlexCorrectionSeconds   = 0;
        this.PayAbsenceSeconds          = 0;
        this.PayFlexBalanceSeconds      = 0;

        this.DefaultDimension           = this.copyDimension(HcmWorker::find(this.Worker).getDefaultDimension(this.companyInfo().RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the error properties on the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_error">
    /// The error to log on the <c>JmgStampJournalTable</c> record.
    /// </param>
    void setError(Log _error)
    {
        if (_error)
        {
            this.Log = _error;
            this.ContainsError = NoYes::Yes;
        }
        else
        {
            this.Log = '';
            this.ContainsError = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalBreakSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount of time spent on breaks on the profile date that is associated with the
    /// <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// The amount of time that is spent on breaks.
    /// </returns>
    public display JmgLabelTotalBreaks totalBreakSeconds()
    {
        return JmgProfileSeconds::formattedSeconds(this.PaidBreakSeconds + this.NonPaidBreakSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the registrations that are associated with the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// An attempt is made to transfer registrations on a future profile date.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The project journals have not been correctly configured in Time and attendance parameters.
    /// </exception>
    [SysObsolete('Use method JmgStampJournalTransfer::newFromJournalTable(JmgStampJournalTable).run() instead', false, 31\03\2019)]
    public void transfer()
    {
        JmgStampJournalTransfer::newFromJournalTable(this).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a previous transfer of registrations that are associated with the
    /// <c>JmgStampJournalTable</c> record.
    /// </summary>
    [SysObsolete('Use method JmgStampJournalTransfer::newFromJournalTable(JmgStampJournalTable).cancel() instead', false, 31\03\2019)]
    public void transferCancel()
    {
        JmgStampJournalTransfer::newFromJournalTable(this).cancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCancelExecute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the cancel of transfer of registrations.
    /// </summary>
    [SysObsolete('Use method JmgStampJournalTransfer::newFromJournalTable(JmgStampJournalTable).cancelExecute() instead', false, 31\03\2019)]
    public void transferCancelExecute()
    {
        JmgStampJournalTransfer::newFromJournalTable(this).cancelExecute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>webPayStartTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayStart</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayStart</c> field formatted as a string.
    /// </returns>
    public display JmgLabelTimeFrom webPayStartTime()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayStart, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>webPayStopTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>PayEnd</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>PayEnd</c> field formatted as a string.
    /// </returns>
    public display JmgLabelTimeTo webPayStopTime()
    {
        return JmgProfileSeconds::formattedSeconds(this.PayEnd, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>webProfileStartTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>ProfileStart</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>ProfileStart</c> field formatted as a string.
    /// </returns>
    public display JmgLabelTimeFrom webProfileStartTime()
    {
        return JmgProfileSeconds::formattedSeconds(this.ProfileStart, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>webProfileStopTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>ProfileEnd</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>ProfileEnd</c> field formatted as a string.
    /// </returns>
    public display JmgLabelTimeTo webProfileStopTime()
    {
        return JmgProfileSeconds::formattedSeconds(this.ProfileEnd, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>webWorkStartTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>WorkStart</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>WorkStart</c> field formatted as a string.
    /// </returns>
    public display JmgLabelTimeFrom webWorkStartTime()
    {
        return JmgProfileSeconds::formattedSeconds(this.WorkStart, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>webWorkStopTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>WorkEnd</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>WorkEnd</c> field formatted as a string.
    /// </returns>
    public display JmgLabelTimeTo webWorkStopTime()
    {
        return JmgProfileSeconds::formattedSeconds(this.WorkEnd, JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the worker that is associated with the <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <returns>
    /// The name of the worker that is associated with the <c>JmgStampJournalTable</c> record.
    /// </returns>
    public display DirPartyName workerName()
    {
        return HcmWorker::worker2Name(this.Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workSecondsDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>WorkSeconds</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// the value of the <c>WorkSeconds</c> field formatted as a string.
    /// </returns>
    public display JmgLabelSeconds workSecondsDisplay()
    {
        return JmgProfileSeconds::formattedSeconds(this.WorkSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workStartDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>WorkStart</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// The value of the <c>WorkStart</c> field formatted as a string.
    /// </returns>
    public display str workStartDisplay()
    {
        if (this.WorkStart)
        {
            return time2str(this.WorkStart, TimeSeparator::Auto, TimeFormat::Auto);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>workEndDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <c>WorkEnd</c> field formatted as a string.
    /// </summary>
    /// <returns>
    /// The value of the <c>WorkEnd</c> field formatted as a string.
    /// </returns>
    public display str workEndDisplay()
    {
        if (this.WorkEnd)
        {
            return time2str(this.WorkEnd, TimeSeparator::Auto, TimeFormat::Auto);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgStampJournalTable</c> record that has the specified worker and profile date from
    /// the database.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the record to find.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the returned record must be selected for update.
    /// </param>
    /// <returns>
    /// A <c>JmgStampJournalTable</c> record that has the specified worker and profile date.
    /// </returns>
    public static JmgStampJournalTable find(JmgWorkerRecId _worker, JmgProfileDate _profileDate, boolean  _forUpdate = false)
    {
        JmgStampJournalTable jmgStampJournalTable;

        if (_worker && _profileDate)
        {
            jmgStampJournalTable.selectForUpdate(_forUpdate);

            select firstonly jmgStampJournalTable
                where jmgStampJournalTable.ProfileDate == _profileDate &&
                      jmgStampJournalTable.Worker      == _worker;
        }

        return jmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>JmgStampJournalTable</c> table by using a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency model setting to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>JmgStampJournalTable</c> table.
    /// </returns>
    public static JmgStampJournalTable findRecId(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        JmgStampJournalTable jmgStampJournalTable;

        jmgStampJournalTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            jmgStampJournalTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly jmgStampJournalTable
             where jmgStampJournalTable.RecId == _recId;

        return jmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a <c>JmgStampJournalTable</c> record that has the specified worker and profile date
    /// from the database.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the record to find.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the returned record must be selected for update.
    /// </param>
    /// <returns>
    /// A <c>JmgStampJournalTable</c> record that has the specified worker and profile date.
    /// </returns>
    [Hookable(false)]
    internal static JmgStampJournalTable findOrCreate(JmgWorkerRecId _worker, JmgProfileDate _profileDate, boolean  _forUpdate = false)
    {
        JmgStampJournalTable jmgStampJournalTable;

        if (_worker && _profileDate)
        {
            jmgStampJournalTable = JmgStampJournalTable::find(_worker, _profileDate, _forUpdate);

            if (!jmgStampJournalTable)
            {
                ttsbegin;
                jmgStampJournalTable = JmgStampJournalTable::makeLineEmployee(JmgEmployee::find(_worker), _profileDate);
                jmgStampJournalTable.insert();
                ttscommit;
            }
        }

        return jmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageListError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the specified window control with an image list to use to display the error image.
    /// </summary>
    /// <param name="formWindowControl">
    /// The <c>FormWindowControl</c> object to initialize.
    /// </param>
    public static void imageListError(FormWindowControl formWindowControl = null)
    {
        #JmgIcons

        Imagelist imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(#JMG_IMG_ERROR_NO));
        imagelist.add(new Image(#JMG_IMG_ERROR_YES));

        if (formWindowControl)
        {
            formWindowControl.imageList(imagelist);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeLineEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>JmgStampJournalTable</c> record based on the specified worker and profile date.
    /// </summary>
    /// <param name="jmgEmployee">
    /// The <c>JmgEmployee</c> record, which refers to the worker.
    /// </param>
    /// <param name="_date">
    /// The profile date to initialize the <c>JmgStampJournalTable</c> record with.
    /// </param>
    /// <returns>
    /// An initialized <c>JmgStampJournalTable</c> record.
    /// </returns>
    public static JmgStampJournalTable makeLineEmployee(JmgEmployee jmgEmployee, JmgDate _date)
    {
        JmgStampJournalTable jmgStampJournalTable;
       

        select forupdate jmgStampJournalTable
            where jmgStampJournalTable.Worker      == jmgEmployee.Worker &&
                  jmgStampJournalTable.ProfileDate == _date;

        jmgStampJournalTable = JmgStampJournalTable::initJmgStampJournalTable(jmgEmployee, _date, jmgStampJournalTable);

        return jmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJmgStampJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal registration header.
    /// </summary>
    /// <param name = "_jmgEmployee">The time registration worker.</param>
    /// <param name = "_date">The date for the header.</param>
    /// <param name = "_jmgStampJournalTable">The journal registration header to initializes.</param>
    /// <returns>A <c>JmgStampJournalTable</c> record. </returns>
    protected static JmgStampJournalTable initJmgStampJournalTable(JmgEmployee _jmgEmployee, JmgDate _date, jmgStampJournalTable _jmgStampJournalTable)
    {
        if (!_jmgStampJournalTable.ProfileManual && !_jmgStampJournalTable.Calculated)
        {
            JmgStampJournalTrans jmgStampJournalTrans;

            select firstonly jmgStampJournalTrans
            order by StartDate, StartTime
            where jmgStampJournalTrans.Worker      == _jmgEmployee.Worker &&
                  jmgStampJournalTrans.ProfileDate == _date               &&
                  jmgStampJournalTrans.JourRegType == JmgJourRegTypeEnum::SignIn;

            if (jmgStampJournalTrans)
            {
                _jmgStampJournalTable.Profile = _jmgEmployee.profileId(_date, jmgStampJournalTrans.StartTime);
            }
            else
            {
                _jmgStampJournalTable.Profile = _jmgEmployee.profileId(_date);
            }
        }

        if (!_jmgStampJournalTable)
        {
            _jmgStampJournalTable.ProfileDate      = _date;
            _jmgStampJournalTable.Worker           = _jmgEmployee.Worker;
            _jmgStampJournalTable.CalculateGroupId = _jmgEmployee.calcGroup(_date);
            _jmgStampJournalTable.ApproveGroupId   = _jmgEmployee.approveGroup(_date);
            _jmgStampJournalTable.FlexProfile      = _jmgEmployee.FlexProfile;
            _jmgStampJournalTable.PayAgreement     = _jmgEmployee.PayAgreement;
            _jmgStampJournalTable.DefaultDimension = _jmgEmployee.workerDimension(_date);
        }

        return _jmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeNonExistentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates nonexistent <c>JmgStampJournalTable</c> records based on the profile dates range and 
    ///     with existing worker transactions.
    /// </summary>
    /// <param name = "_profileFromDate"> 
    ///     The Profile from date for the search criteria. 
    /// </param>
    /// <param name = "_profileToDate"> 
    ///     The Profile to date for the search criteria. 
    /// </param>
    public static void makeNonExistentLines(JmgDate _profileFromDate, JmgDate _profileToDate)
    {
        JmgStampJournalTable jmgStampJournalTable;
        JmgStampJournalTrans jmgStampJournalTrans;
        JmgEmployee jmgEmployee;
        JmgStampJournalTable newJmgStampJournalTable;

        RecordInsertList JmgStampJournalTableList = new RecordInsertList(tableNum(JmgStampJournalTable));

        while select jmgStampJournalTrans
            index hint DayEmplIdx
            Group by Worker, ProfileDate
            where jmgStampJournalTrans.ProfileDate    >= _profileFromDate &&
                  jmgStampJournalTrans.ProfileDate    <= _profileToDate
            notexists join jmgStampJournalTable
            index hint EmplDayIdx
            Where jmgStampJournalTable.Worker      == jmgStampJournalTrans.Worker &&
                  jmgStampJournalTable.ProfileDate == jmgStampJournalTrans.ProfileDate
        {
            jmgEmployee = jmgEmployee::find(jmgStampJournalTrans.Worker);
            
            newJmgStampJournalTable = JmgStampJournalTable::initJmgStampJournalTable(jmgEmployee, jmgStampJournalTrans.ProfileDate, newJmgStampJournalTable);

            JmgStampJournalTableList.add(newJmgStampJournalTable);
        }

        JmgStampJournalTableList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateJmgStampJournalTableQueryForDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query object for <c>JmgStampJournalTable</c> delete.
    /// </summary>
    /// <param name="_parameters">
    /// The parameters for the search criteria.
    /// </param>
    /// <returns>
    /// The <c>SysDaQueryObject</c> class instance.
    /// </returns>
    protected static SysDaQueryObject instantiateJmgStampJournalTableQueryForDelete(JmgStampJournalQueryParameters _parameters)
    {
        JmgStampJournalTable jmgStampJournalTable;
        SysDaQueryObject queryObject = new SysDaQueryObject(jmgStampJournalTable);

        queryObject.whereClause(JmgStampJournalTable::instantiateJmgStampJournalTableQueryWhereClause(_parameters));
               
        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateJmgStampJournalTableQueryWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a query where clause for <c>JmgStampJournalTable</c> delete.
    /// </summary>
    /// <param name="_parameters">
    /// The parameters for the search criteria.
    /// </param>
    /// <returns>
    /// The <c>SysDaQueryExpression</c> class instance.
    /// </returns>
    protected static SysDaQueryExpression instantiateJmgStampJournalTableQueryWhereClause(JmgStampJournalQueryParameters _parameters)
    {
        JmgStampJournalTable jmgStampJournalTable;
        JmgGroupCalcId groupCalcId = _parameters.parmGroupCalcId();
        JmgGroupApproveId groupApproveId = _parameters.parmGroupApproveId();

        SysDaQueryExpression expression = new SysDaGreaterThanExpression(
            new SysDaFieldExpression(jmgStampJournalTable, fieldStr(jmgStampJournalTable, ProfileDate)),
            new SysDaValueExpression((DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + 1)));

       if (groupCalcId)
        {
            expression.and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(jmgStampJournalTable, fieldStr(jmgStampJournalTable, CalculateGroupId)), new SysDaValueExpression(groupCalcId)));
        }
        else if (groupApproveId)
        {
            expression.and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(jmgStampJournalTable, fieldStr(jmgStampJournalTable, ApproveGroupId)), new SysDaValueExpression(groupApproveId)));
        }
        expression.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(jmgStampJournalTable, fieldStr(JmgStampJournalTable, Calculated)), new SysDaValueExpression(NoYes::No)))
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(jmgStampJournalTable, fieldStr(JmgStampJournalTable, ProfileManual)), new SysDaValueExpression(NoYes::No)));

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildJmgEmployeeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query object for <c>JmgEmployee</c> select.
    /// </summary>
    /// <param name = "_date">
    /// The profile date to create <c>JmgStampJournalTable</c> records for.
    /// </param>
    /// <param name = "_joinScheduleLoad">
    /// A boolean value that indicates whether to join <c>JmgScheduledLoan</c> data source to the query; optional.
    /// </param>
    /// <returns>
    /// The query object.
    /// </returns>
    protected static Query buildJmgEmployeeQuery(JmgDate _date, boolean _joinScheduleLoad = false)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSourceJmgEmployee = query.addDataSource(tableNum(JmgEmployee));        
        queryBuildDataSourceJmgEmployee.addRange(fieldNum(JmgEmployee, ActiveFrom)).value(queryRange(null, _date, true));
        QueryBuildDataSource qbdsJmgStampJournalTrans = JmgEmployee::addQueryRangeForActiveOrTimeRegisteredEmployees(queryBuildDataSourceJmgEmployee);
        qbdsJmgStampJournalTrans.addRange(fieldNum(JmgStampJournalTrans, ProfileDate)).value(queryValue(_date));

        if (_joinScheduleLoad)
        {
            QueryBuildDataSource queryBuildDataSourceJmgScheduledLoan = queryBuildDataSourceJmgEmployee.addDataSource(tableNum(JmgScheduledLoan));
            queryBuildDataSourceJmgScheduledLoan.joinMode(JoinMode::OuterJoin);
            queryBuildDataSourceJmgScheduledLoan.addLink(fieldNum(JmgEmployee, Worker), fieldNum(JmgScheduledLoan, Worker));
            queryBuildDataSourceJmgScheduledLoan.addRange(fieldNum(JmgScheduledLoan, ProfileDate)).value(queryValue(_date));
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupFiltersToQuery</Name>
				<Source><![CDATA[
    private static Query addGroupFiltersToQuery(Query _query, JmgGroupCalcId _grpcalc = '',JmgGroupApproveId _grpappr = '')
    {
        if (!_grpcalc && !_grpappr)
        {
            return _query;
        }

        JmgScheduledLoan scheduledLoanTemp; 
        QueryBuildDataSource buildDataSourceLoan = _query.dataSourceTable(tableNum(JmgScheduledLoan));
        if (buildDataSourceLoan)
        {
            if (_grpcalc)
            {
                select firstonly RecId from scheduledLoanTemp where scheduledLoanTemp.GroupCalcId == _grpcalc;
                buildDataSourceLoan.addRange(fieldNum(JmgScheduledLoan, GroupCalcId)).value(queryValue(''));
            }
            else
            {
                select firstonly RecId from scheduledLoanTemp where scheduledLoanTemp.GroupApproveId == _grpappr;
                buildDataSourceLoan.addRange(fieldNum(JmgScheduledLoan, GroupApproveId)).value(queryValue(''));
            }
        }

        if (scheduledLoanTemp)
        {
            
            if (_grpcalc)
            {                
                buildDataSourceLoan.addRange(fieldNum(JmgScheduledLoan, GroupCalcId)).value(queryValue(_grpcalc));
            }
            else 
            {                
                buildDataSourceLoan.addRange(fieldNum(JmgScheduledLoan, GroupApproveId)).value(queryValue(_grpappr));
            }
        }
        else
        {
            QueryBuildDataSource buildDataSourceEmployee = _query.dataSourceTable(tableNum(JmgEmployee));
            if (_grpcalc)
            {
                
                buildDataSourceEmployee.addRange(fieldNum(JmgEmployee, CalculateGroupId)).value(queryValue(_grpcalc));
            }
            else 
            {
                buildDataSourceEmployee.addRange(fieldNum(JmgEmployee, ApproveGroupId)).value(queryValue(_grpappr));
            }
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>JmgStampJournalTable</c> records for workers in the specified calculation or approval group.
    /// </summary>
    /// <param name="_date">
    /// The profile date to create <c>JmgStampJournalTable</c> records for.
    /// </param>
    /// <param name="grpcalc">
    /// The calculation group to search for workers.
    /// </param>
    /// <param name="grpappr">
    /// The approval group to search for workers.
    /// </param>
    /// <remarks>
    /// If the calculation group is specified, then the calculation group is searched; otherwise the
    /// approval group is used.
    /// </remarks>
    public static void makeLines(JmgDate _date,JmgGroupCalcId grpcalc = '',JmgGroupApproveId grpappr = '')
    {
        boolean joinScheduleLoad = (grpcalc != '' || grpappr != '');
        JmgEmployee             jmgEmployee;
        JmgScheduledLoan        jmgScheduledLoan;

        ttsbegin;               

        JmgStampJournalQueryParameters parameters = JmgStampJournalQueryParameters::construct();
        parameters.parmGroupCalcId(grpcalc);
        parameters.parmGroupApproveId(grpappr);

        SysDaDeleteStatement deleteStatement = new SysDaDeleteStatement();
        deleteStatement.execute(new SysDaDeleteObject(JmgStampJournalTable::instantiateJmgStampJournalTableQueryForDelete(parameters)));

        Query employeeQuery = JmgStampJournalTable::buildJmgEmployeeQuery(_date, joinScheduleLoad);
        QueryRun queryRun = new QueryRun(JmgStampJournalTable::addGroupFiltersToQuery(employeeQuery, grpcalc, grpappr));
        if (grpcalc)
        {
            while (queryRun.next())
            {
                jmgEmployee = queryRun.get(tableNum(JmgEmployee));
                jmgScheduledLoan = queryRun.get(tableNum(JmgScheduledLoan));

                if ((jmgScheduledLoan   && jmgScheduledLoan.GroupCalcId == grpcalc)                                     ||
                    (jmgScheduledLoan   && !jmgScheduledLoan.GroupCalcId && jmgEmployee.CalculateGroupId == grpcalc)    ||
                    (!jmgScheduledLoan  && jmgEmployee.CalculateGroupId == grpcalc))
                {
                    JmgStampJournalTable jmgStampJournalTable = JmgStampJournalTable::makeLineEmployee(jmgEmployee,_date);
                    jmgStampJournalTable.write();
                }
            }
        }
        else if (grpappr)
        {
            while (queryRun.next())
            {
                jmgEmployee = queryRun.get(tableNum(JmgEmployee));
                jmgScheduledLoan = queryRun.get(tableNum(JmgScheduledLoan));

                if ((jmgScheduledLoan   && jmgScheduledLoan.GroupApproveId == grpappr)                                  ||
                    (jmgScheduledLoan   && !jmgScheduledLoan.GroupApproveId && jmgEmployee.ApproveGroupId == grpappr)   ||
                    (!jmgScheduledLoan  && jmgEmployee.ApproveGroupId == grpappr))
                {
                    JmgStampJournalTable jmgStampJournalTable = JmgStampJournalTable::makeLineEmployee(jmgEmployee,_date);
                    jmgStampJournalTable.write();
                }
            }
        }
        else
        {
            while (queryRun.next())
            {
                jmgEmployee = queryRun.get(tableNum(JmgEmployee));

                JmgStampJournalTable jmgStampJournalTable = JmgStampJournalTable::makeLineEmployee(jmgEmployee,_date);
                jmgStampJournalTable.write();
            }
        }
        ttscommit;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WorkflowStatus</c> field of the <c>JmgStampJournalTable</c> table by using the workflow
    /// events that have occurred.
    /// </summary>
    /// <param name="_jmgStampJournalTableRecId">
    /// The record ID of the record that is associated with the workflow.
    /// </param>
    /// <param name="_jmgDaysTotalWorkflowStatus">
    /// The workflow state to set.
    /// </param>
    /// <remarks>
    /// The method is called from the workflow event handler classes.
    /// </remarks>
    public static void setWorkflowStatus(
        RefRecId                    _jmgStampJournalTableRecId,
        JmgDaysTotalWorkflowStatus  _jmgDaysTotalWorkflowStatus)
    {
        JmgStampJournalTable    jmgStampJournalTable;

        ttsbegin;

        jmgStampJournalTable = JmgStampJournalTable::findRecId(_jmgStampJournalTableRecId, true);
        jmgStampJournalTable.WorkflowStatus = _jmgDaysTotalWorkflowStatus;
        jmgStampJournalTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransactionsGeneratedByCalculationAndBeforeLastCheckout</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Deletes all transactions generated by calculation and before last checkout.
    /// </summary>
    /// <remarks>
    /// The method expects current journal not to be calculated. Otherwise an exception is thrown.
    /// </remarks>
    public void deleteTransactionsGeneratedByCalculationAndBeforeLastCheckout()
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampJournalTrans    jmgStampJournalTransClockOut;

        ttsBegin;
        delete_from jmgStampJournalTrans
            where jmgStampJournalTrans.ProfileDate      == this.ProfileDate
                  && jmgStampJournalTrans.Worker        == this.Worker
                  && jmgStampJournalTrans.JourRegType   == JmgJourRegTypeEnum::Absence
                  && jmgStampJournalTrans.IsGeneratedByCalculation   == NoYes::Yes
            exists join jmgStampJournalTransClockOut
                where jmgStampJournalTransClockOut.ProfileDate      == this.ProfileDate
                      && jmgStampJournalTransClockOut.Worker        == this.Worker
                      && jmgStampJournalTransClockOut.JourRegType   == JmgJourRegTypeEnum::SignOut
                      && (jmgStampJournalTransClockOut.StartDate    >  jmgStampJournalTrans.StopDate
                          || (jmgStampJournalTransClockOut.StartDate       ==  jmgStampJournalTrans.StopDate
                              && jmgStampJournalTransClockOut.StartTime    >=  jmgStampJournalTrans.StopTime));

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransactionsGeneratedByCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Deletes all transactions generated by calculation.
    /// </summary>
    /// <remarks>
    /// The method expects current journal not to be calculated. Otherwise an exception is thrown.
    /// </remarks>
    public void deleteTransactionsGeneratedByCalculation()
    {
        JmgStampJournalTrans jmgStampJournalTrans;

        if (this.Calculated)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsBegin;

        delete_from jmgStampJournalTrans
            where jmgStampJournalTrans.ProfileDate                 == this.ProfileDate
                && jmgStampJournalTrans.Worker                     == this.Worker
                && jmgStampJournalTrans.IsGeneratedByCalculation   == NoYes::Yes;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgRegistrationEmployees</ConfigurationKey>
	<DeveloperDocumentation>@SYS317306</DeveloperDocumentation>
	<FormRef>JmgCalculate</FormRef>
	<Label>@SYS38393</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>ProfileDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>DateIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>EmplDayIdx</PrimaryIndex>
	<ReplacementKey>EmplDayIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgFlexCorrection</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgFlexCorrection</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgOvertimeSlize</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgOvertimeSlize</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgPayAddTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgPayAddTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgPayAgreementOverride</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgPayAgreementOverride</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JmgProfileOverride</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgProfileOverride</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Calculated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transferred</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaySeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayOverTimeSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayAbsenceSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayFlexSubSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayFlexAddSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayFlexCorrectionSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayFlexBalanceSeconds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BreakTime</Name>
			<Label>@SYS38554</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>paidBreakSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>nonPaidBreakSeconds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateGroup</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProfileStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Flex</Name>
			<Label>@SYS38467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayFlexAddSeconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayFlexSubSeconds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApproveGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculateGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FlexProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@SYS2515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payroll</Name>
			<Label>@SYS2694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayAgreement</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PayTime</Name>
			<Label>@SYS38529</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayEnd</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Processed</Name>
			<Label>@SYS17748</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Calculated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Approved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transferred</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculatedByWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovedByWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferredByWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Profile</Name>
			<Label>@SYS7607</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileSeconds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Locked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContainsError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileManual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Times</Name>
			<Label>@SYS22171</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkSeconds</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tolerances</Name>
			<Label>@SYS38620</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DropClockInCorrection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropClockOutCorrection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS313953</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>paySecondsDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>payOvertimeSecondsDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>payLegalAbsenceSecondsDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>payIllegalAbsenceSecondsDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>payFlexSubSecondsDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>payFlexAddSecondsDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>payAbsenceSecondsDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Approved</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS10158</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ApprovedByWorker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Label>@SYS3492</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApproveGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgGroupApproveId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Calculated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14213</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CalculatedByWorker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Label>@SYS38398</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalculateGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgGroupCalcId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContainsError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS8500</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DropClockInCorrection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS39378</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DropClockOutCorrection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS39380</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FlexProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS38505</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Locked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Locked</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>nonPaidBreakSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NormFlexSec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NormSec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>paidBreakSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayAbsenceSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS38531</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayAgreement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayAgreement</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>PayEnd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS51132</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PayEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Label>@SYS38612</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayFlexAddSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayFlexBalanceSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayFlexCorrectionSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayFlexSubSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayIllegalAbsenceSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS38624</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayLegalAbsenceSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS38623</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PayOverTimeSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS38530</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PaySeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS38529</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>PayStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS6040</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PayStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS38611</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Profile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ProfileEnd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS38395</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Label>@SYS38439</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfileManual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS38595</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ProfileSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS8827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ProfileStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS38394</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS38419</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Transferred</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS12615</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransferredByWorker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Label>@SYS23830</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>WorkEnd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS51132</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>WorkEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Label>@SYS38441</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgDaysTotalWorkflowStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkSeconds</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS11965</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkSecondsNotAllocated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Label>@SYS39382</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>WorkStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgTime</ExtendedDataType>
			<Label>@SYS6040</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>WorkStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@SYS38440</Label>
		</AxTableField>
        <AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysRowVersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SysRowVersionNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Null>Yes</Null>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplDayIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DayTotals</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgStampJournalTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerApprovedBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_2_JmgStampJournalTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApprovedByWorker</Name>
					<Field>ApprovedByWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerCalculatedBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_JmgStampJournalTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalculatedByWorker</Name>
					<Field>CalculatedByWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerTransferredBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_3_JmgStampJournalTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferredByWorker</Name>
					<Field>TransferredByWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgEmployee</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>JmgEmployee</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Worker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DaysTotal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgGroupApprove</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgGroupApprove</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApproveGroupId</Name>
					<Field>ApproveGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgGroupCalc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgGroupCalc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalculateGroupId</Name>
					<Field>CalculateGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayAgreementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayAgreementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayAgreement</Name>
					<Field>PayAgreement</Field>
					<RelatedField>PayAgreement</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AgreementIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgProfileTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgProfileTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Profile</Name>
					<Field>Profile</Field>
					<RelatedField>Profile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>