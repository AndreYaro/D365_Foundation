<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetRevision</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetRevision extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditAllocationButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the View Allocation button on the <c>ProjBudgetRevision</c> form is enabled.
    /// </summary>
    /// <returns>
    /// true if the current record is in committed state; otherwise, false.
    /// </returns>
    public  boolean allowEditAllocationButton()
    {
        ProjBudgetRevLineAllocation     projBudgetRevLineAllocation;
        ProjBudgetRevisionLine          projBudgetRevisionLine;
        boolean ret;

        if (this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Created || this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Rejected)
        {
            select firstonly RecId from projBudgetRevisionLine
            exists join projBudgetRevLineAllocation
            where projBudgetRevisionLine.RecId == projBudgetRevLineAllocation.ProjBudgetRevisionLine
            &&    projBudgetRevLineAllocation.RevisionAllocationAmount != 0
            &&    projBudgetRevisionLine.ProjBudgetRevision == this.RecId;

            if (projBudgetRevisionLine.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditRevisionLineGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the revision line grid on the <c>ProjBudgetRevision</c> form is enabled.
    /// </summary>
    /// <returns>
    /// true if the current record is in created or rejected state; otherwise, false.
    /// </returns>
    public boolean allowEditRevisionLineGrid()
    {
        return ((this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Created || this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Rejected) ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditUncommitedButton</Name>
				<Source><![CDATA[
    public boolean allowEditUncommitedButton()
    {
        return ((this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Created || this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Submitted ||
                this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Rejected) ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowViewAllocationButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the View Allocation button on the <c>ProjBudgetRevision</c> form is enabled.
    /// </summary>
    /// <returns>
    /// true if the current record is in committed state; otherwise, false.
    /// </returns>
    public boolean allowViewAllocationButton()
    {
        return (this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Approved ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        ProjBudgetRevisionLine projBudgetRevisionLine;
        boolean ret;

        if (this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Created)
        {
            select firstonly RecId from projBudgetRevisionLine
            where projBudgetRevisionLine.ProjBudgetRevision == this.RecId;

            ret = (projBudgetRevisionLine.RecId != 0);
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisionTotalsByLineType</Name>
				<Source><![CDATA[
    public container getRevisionTotalsByLineType(ProjBudgetLineType _lineType)
    {
        ProjBudgetRevision      budgetRevision;
        ProjBudgetLine          budgetLine;
        ProjBudget              projBudget;
        AmountCur               previousApproved;
        AmountCur               revisionAmount;
        AmountCur               newTotalBudget;
        AmountCur               revTotal;
        AmountCur               originalBudget;
        ProjId                  projId;
        TmpProjBudgetRevisionLine   tmpRevisionLine;

        select sum(OriginalBudget) from budgetLine
            where budgetLine.ProjBudget == this.ProjBudget
            && budgetLine.ProjBudgetLineType == _lineType;

        originalBudget = budgetLine.OriginalBudget;

        projId = this.rootProjId();

        while select RecId, RevisionId from budgetRevision
            join RecId from projBudget order by budgetRevision.RevisionId
                where projBudget.RecId == budgetRevision.ProjBudget
                   && projBudget.RootProjId == projId
                   && budgetRevision.RevisionId <= this.RevisionId
        {
            if (_lineType == ProjBudgetLineType::Cost)
            {
                tmpRevisionLine.setTmpData(ProjBudgetRevisionManager::getRevisionCostLines(ProjBudgetRevisionManagerActionType::ViewRevision,
                                            projBudget.RecId, budgetRevision.RecId));
            }
            else
            {
                tmpRevisionLine.setTmpData(ProjBudgetRevisionManager::getRevisionRevenueLines(ProjBudgetRevisionManagerActionType::ViewRevision,
                                            projBudget.RecId, budgetRevision.RecId));
            }

            select sum(IncrementalChange) from tmpRevisionLine;
            revisionAmount = tmpRevisionLine.IncrementalChange;

            previousApproved = originalBudget + revTotal;
            newTotalBudget = previousApproved + revisionAmount;
            revTotal += revisionAmount;
        }

        return [previousApproved, revisionAmount, newTotalBudget];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.RevisionId = ProjParameters::newProjRevisionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projBudgetId</Name>
				<Source><![CDATA[
    display ProjBudgetId projBudgetId()
    {
        return ProjBudget::find(this.ProjBudget).BudgetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revisionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the revision amount for the budget revenue.
    /// </summary>
    /// <returns>
    /// The revision amount for the budget revenue.
    /// </returns>
    display ProjBudgetRevisionTotal revisionAmount()
    {
        container revisionTotals = this.getRevisionTotalsByLineType(ProjBudgetLineType::Revenue);
        return conPeek(revisionTotals, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootProjId</Name>
				<Source><![CDATA[
    display ProjId rootProjId()
    {
        return ProjBudget::find(this.ProjBudget).RootProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    public void setWorkflowStatus(ProjBudgetRevisionWFStatus _revisionWFStatus)
    {
        if (ProjBudgetRevision::validateStatusChange(this.RevisionWorkflowStatus, _revisionWFStatus))
        {
            ttsbegin;
            this.RevisionWorkflowStatus = _revisionWFStatus;
            this.update();
            ttscommit;
        }
        else
        {
            throw error(strFmt("@SYS108515", this.RevisionWorkflowStatus, _revisionWFStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if ((this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Submitted
                        || this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Approved))
        {
            ret = checkFailed(strFmt("@Proj:RevisionCannotBeDeletedDueToWorkflowState", enum2str(this.RevisionWorkflowStatus)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>ProjBudgetRevision</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetRevision</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist( RecId _recId)
    {
        boolean ret = true;

        if (!ProjBudgetRevision::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBudgetRevision::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>ProjBudgetRevision</c> table.
    /// </summary>
    /// <param name="_projBudget">
    /// The project budget record ID for which to create a revision.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetRevision</c> table.
    /// </returns>
    public static ProjBudgetRevision createRevision(RecId _projBudget)
    {
        ProjBudgetRevision      projBudgetRevision;

        projBudgetRevision.initValue();
        projBudgetRevision.ProjBudget = _projBudget;
        projBudgetRevision.RevisionDate = DateTimeUtil::getSystemDateTime();
        projBudgetRevision.RequestedDate =  DateTimeUtil::getSystemDateTime();
        projBudgetRevision.insert();

        return projBudgetRevision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjBudgetRevision</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetRevision</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     projBudgetRevision
                 where
                     projBudgetRevision.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetRevision</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetRevision</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetRevision</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetRevision find(
        RecId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetRevision    projBudgetRevision;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetRevision.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            projBudgetRevision.selectForUpdate(_forUpdate);

            select firstonly projBudgetRevision
                where projBudgetRevision.RecId == _recId;
        }

        return projBudgetRevision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjBudgetRevisionStatus</Name>
				<Source><![CDATA[
    public static void updateProjBudgetRevisionStatus(RecId _recId, ProjBudgetRevisionWFStatus _budgetWFStatus)
    {
        ProjBudgetRevision projBudgetRevision = ProjBudgetRevision::find(_recId, true);

        if (projBudgetRevision.RecId && projBudgetRevision.RevisionWorkflowStatus != _budgetWFStatus)
        {
            projBudgetRevision.setWorkflowStatus(_budgetWFStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusChange</Name>
				<Source><![CDATA[
    public static boolean validateStatusChange(ProjBudgetRevisionWFStatus _current,
                                               ProjBudgetRevisionWFStatus _new)
    {
        boolean ret;

        if (_current == _new)
        {
            return true;
        }

        switch (_new)
        {
            case ProjBudgetRevisionWFStatus::Created:
                ret = _current == ProjBudgetRevisionWFStatus::Submitted || _current == ProjBudgetRevisionWFStatus::Rejected;
                break;

            case ProjBudgetRevisionWFStatus::Submitted:
                ret = _current == ProjBudgetRevisionWFStatus::Created || _current == ProjBudgetRevisionWFStatus::Rejected;
                break;

            case ProjBudgetRevisionWFStatus::Approved:
                ret = _current == ProjBudgetRevisionWFStatus::Submitted;
                break;

            case ProjBudgetRevisionWFStatus::Rejected:
                ret = _current == ProjBudgetRevisionWFStatus::Submitted;
                break;

            // Cancel workflow works for every status
            case ProjBudgetRevisionWFStatus::Cancelled:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Created || this.RevisionWorkflowStatus == ProjBudgetRevisionWFStatus::Cancelled)
        {
            ProjBudgetRevisionLine  revisionLine;

            delete_from revisionLine where
                revisionLine.ProjBudgetRevision == this.RecId;

            ProjBudgetRevisionManager::updateUncommitedRevisions(this.RecId);

            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS315508</DeveloperDocumentation>
	<Label>@SYS315536</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RevisionId</TitleField1>
	<TitleField2>RevisionWorkflowStatus</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RevisionIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>RevisionIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjBudgetSource</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjBudgetSource</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionWorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedByCust</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedByEmpl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedByVend</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionWorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RevisionIdentification</Name>
			<Label>@SYS315536</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RevisionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionWorkflowStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudget</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RevisionRequest</Name>
			<Label>@SYS316749</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedByCust</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedByEmpl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedByVend</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS103643</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>rootProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projBudgetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RevisionWorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowSummary</Name>
			<Label>@SYS319419</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>revisionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRevExtReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudget</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequestedByCust</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS315513</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RequestedByEmpl</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Label>@SYS315513</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequestedByVend</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@SYS315513</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RequestedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRequestedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RevisionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRevisionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RevisionId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjRevisionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RevisionWorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS315512</Label>
			<EnumType>ProjBudgetRevisionWFStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjBudgetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudget</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RevisionIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RevisionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Customers</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RequestingCustomer</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequestedByCust</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>RequestedByCust</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Employees</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RequestingEmployee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequestedByEmpl</Name>
					<Field>RequestedByEmpl</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudget</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudget</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetHeader</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RevisionHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudget</Name>
					<Field>ProjBudget</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Vendors</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RequestingVendor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequestedByVend</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>RequestedByVend</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>