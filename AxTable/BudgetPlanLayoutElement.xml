<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLayoutElement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanLayoutElement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanLayoutElement</c> table.
    /// </summary>
    /// <param name='_budgetPlanLayoutElementRecId'>
    /// The record ID of the <c>BudgetPlanLayoutElement</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanLayoutElement</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanLayoutElement find(
        BudgetPlanLayoutElementRecId    _budgetPlanLayoutElementRecId,
        boolean                         _forUpdate = false,
        ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;

        if (_budgetPlanLayoutElementRecId)
        {
            budgetPlanLayoutElement.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanLayoutElement.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanLayoutElement
                where budgetPlanLayoutElement.RecId == _budgetPlanLayoutElementRecId;
        }

        return budgetPlanLayoutElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // This reread is needed in the case that multiple Layout element deletions are called consecutively.
        // The ordinal update logic causes the remaining Layout element RecVersions to be updated and since
        // the super call validates the RecVersion of the table buffer with the database value before deleting,
        // any updated Layout elements being deleted after being updated need to have correct RecVersions.
        this.reread();

        BudgetPlanLayoutRecId layoutRecId = this.Layout;

        BudgetPlanLayoutDescriptionElement::deleteFieldByLayoutFieldName(this.Layout, BudgetPlanRow::find(this.ElementDefinition).FieldName);

        super();

        // Adjust the ordinal on the remaining elements
        BudgetPlanLayoutElement     remainingLayoutElementRecord;
        BudgetPlanElementOrdinal    ordinal = 1;

        // Negate the ordinals so that there is no conflict when the ordinals are updated to be in order again
        update_recordset remainingLayoutElementRecord
            setting Ordinal = (remainingLayoutElementRecord.Ordinal * BudgetPlanningConstants::negativeOne)
            where remainingLayoutElementRecord.Layout == layoutRecId;

        // Reorder the elements
        while select forupdate Ordinal from remainingLayoutElementRecord
            order by Ordinal desc
            where remainingLayoutElementRecord.Layout == layoutRecId
        {
            remainingLayoutElementRecord.Ordinal = ordinal;
            remainingLayoutElementRecord.doUpdate();

            ordinal++;
        }

        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByLayout,
            layoutRecId,
            BudgetPlanMappingRefreshType::RefreshByLayout,
            layoutRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean canDelete = super();

        if (canDelete
            && BudgetPlanningStageRule::findFirstByLayout(this.Layout) != null
            && this.layoutElementType() == BudgetPlanElementDefinitionType::Column)
        {
            BudgetPlanLayoutElement     layoutElement;
            BudgetPlanElementDefinition elementDefinition;
            TableId                     columnTableId = tableNum(BudgetPlanColumn);

            select count(RecId) from layoutElement
                where layoutElement.Layout == this.Layout
                exists join elementDefinition
                    where elementDefinition.InstanceRelationType == columnTableId
                        && elementDefinition.RecId               == layoutElement.ElementDefinition;

            if (layoutElement.RecId == 1)
            {
                canDelete = checkFailed("@Budget:CannotDeleteLastLayoutElement");
            }
        }

        return canDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>layoutElementType</Name>
				<Source><![CDATA[
    /// <summary>Determines the element type of the current <c>BudgetPlanLayoutElement</c>.</summary>
    /// <returns>The <c>BudgetPlanElementDefinitionType</c> of the <c>BudgetPlanLayoutElement</c>.</returns>
    public BudgetPlanElementDefinitionType layoutElementType()
    {
        BudgetPlanLayoutElement         layoutElement;
        BudgetPlanElementDefinition     elementDefinition;
        BudgetPlanElementDefinitionType elementType = BudgetPlanElementDefinitionType::Row;
        TableId                         columnTableId = tableNum(BudgetPlanColumn);

        select firstOnly RecId from layoutElement
            where layoutElement.RecId == this.RecId
            exists join elementDefinition
                where elementDefinition.InstanceRelationType == columnTableId
                    && elementDefinition.RecId               == layoutElement.ElementDefinition;

        if (layoutElement.RecId)
        {
            elementType = BudgetPlanElementDefinitionType::Column;
        }

        return elementType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLayoutElementDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanLayoutElement</c> table.
    /// </summary>
    /// <param name='_budgetPlanLayoutRecId'>
    /// The record ID of the <c>BudgetPlanLayout</c> record.
    /// </param>
    /// <param name='_budgetPlanElementDefinitionRecId'>
    /// The record ID of the <c>BudgetPlanElementDefinition</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanLayoutElement</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanLayoutElement findByLayoutElementDefinition(
        BudgetPlanLayoutRecId               _budgetPlanLayoutRecId,
        BudgetPlanElementDefinitionRecId    _budgetPlanElementDefinitionRecId,
        boolean                             _forUpdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;

        if (_budgetPlanLayoutRecId && _budgetPlanElementDefinitionRecId)
        {
            budgetPlanLayoutElement.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanLayoutElement.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanLayoutElement
                where budgetPlanLayoutElement.Layout == _budgetPlanLayoutRecId
                    && budgetPlanLayoutElement.ElementDefinition == _budgetPlanElementDefinitionRecId;
        }

        return budgetPlanLayoutElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByLayoutScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanLayoutElement</c> table.
    /// </summary>
    /// <param name='_budgetPlanLayoutRecId'>
    /// The record ID of the <c>BudgetPlanLayoutRecId</c> record.
    /// </param>
    /// <param name='_budgetPlanScenarioRecId'>
    /// The record ID of the <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanLayoutElement</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanLayoutElement findFirstByLayoutScenario(
        BudgetPlanLayoutRecId   _budgetPlanLayoutRecId,
        BudgetPlanScenarioRecId _budgetPlanScenarioRecId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanColumn        budgetPlanColumn;

        if (_budgetPlanLayoutRecId && _budgetPlanScenarioRecId)
        {
            budgetPlanLayoutElement.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanLayoutElement.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanLayoutElement
                where budgetPlanLayoutElement.Layout == _budgetPlanLayoutRecId
                exists join budgetPlanColumn
                    where budgetPlanColumn.Scenario == _budgetPlanScenarioRecId
                        && budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition;
        }

        return budgetPlanLayoutElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        if (isValid)
        {
            isValid = BudgetPlanLayoutHelper::canAddNewElementInLayout(this.Layout, this.ElementDefinition);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLayoutOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BudgetPlanLayoutElement</c> record given the associated <c>BudgetPlanLayout</c> record and <c>BudgetPlanElementOrdinal</c> value.
    /// </summary>
    /// <param name = "_budgetPlanLayout">
    /// The record ID of the <c>BudgetPlanLayout</c> record.
    /// </param>
    /// <param name = "_ordinal">
    /// The <c>BudgetPlanElementOrdinal</c> value.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanLayoutElement</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanLayoutElement findByLayoutOrdinal(
        BudgetPlanLayoutRecId       _budgetPlanLayout,
        BudgetPlanElementOrdinal    _ordinal,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;

        if (_budgetPlanLayout && _ordinal)
        {
            budgetPlanLayoutElement.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanLayoutElement.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanLayoutElement
                where budgetPlanLayoutElement.Layout == _budgetPlanLayout
                    && budgetPlanLayoutElement.Ordinal == _ordinal;
        }

        return budgetPlanLayoutElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstNonEditableLayoutElementByLayoutScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first non-editable <c>BudgetPlanLayoutElement</c> record that uses a given <c>BudgetPlanScenario</c> record.
    /// </summary>
    /// <param name = "_budgetPlanLayout">
    /// The <c>BudgetPlanLayout</c> record ID to search for layout elements.
    /// </param>
    /// <param name = "_budgetPlanScenario">
    /// The <c>BudgetPlanScenario</c> record ID to filter by.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanLayoutElement</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanLayoutElement findFirstNonEditableLayoutElementByLayoutScenario(BudgetPlanLayoutRecId _budgetPlanLayout, BudgetPlanScenarioRecId _budgetPlanScenario)
    {
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanColumn        budgetPlanColumn;

        select firstonly budgetPlanLayoutElement
            where budgetPlanLayoutElement.Layout == _budgetPlanLayout
                && budgetPlanLayoutElement.IsEditable == NoYes::No
                exists join budgetPlanColumn
                    where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
                        && budgetPlanColumn.Scenario == _budgetPlanScenario;

        return budgetPlanLayoutElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies fields based on the modified values of other fields.
    /// </summary>
    /// <param name = "_fieldId"> The field ID of the field that was modified. </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(BudgetPlanLayoutElement, ElementDefinition):
                // Assign an ordinal when an element is selected
                if (this.ElementDefinition && !this.Ordinal)
                {
                    this.Ordinal = this.getNextOrdinal();
                }

                BudgetPlanColumn budgetPlanColumn = BudgetPlanElementDefinition::find(this.ElementDefinition) as BudgetPlanColumn;
                if (budgetPlanColumn)
                {
                    this.InWorksheet = !BudgetPlanOverlappingColumnValidator::checkOverlapExistsWithinLayoutForColumn(
                                            BudgetPlanOverlappingValidatorRequest::construct()
                                                .setCurrentBudgetPlanColumn(budgetPlanColumn)
                                                .setBudgetPlanLayoutRecId(this.Layout)
                                                .setShowLayoutElementModificationWarning(true));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next available <c>BudgetPlanElementOrdinal</c> number to be assigned.
    /// </summary>
    /// <returns> The next <c>BudgetPlanElementOrdinal</c> to use. </returns>
    public BudgetPlanElementOrdinal getNextOrdinal()
    {
        return (select maxOf(Ordinal) from budgetPlanLayoutElement where budgetPlanLayoutElement.Layout == this.Layout).Ordinal + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByLayout,
            this.Layout,
            BudgetPlanMappingRefreshType::RefreshByLayout,
            this.Layout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByLayout,
            this.Layout,
            BudgetPlanMappingRefreshType::RefreshByLayout,
            this.Layout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(BudgetPlanLayoutElement, InWorksheet):
                if (this.InWorksheet == NoYes::Yes)
                {
                    BudgetPlanColumn budgetPlanColumn = BudgetPlanElementDefinition::find(this.ElementDefinition) as BudgetPlanColumn;
                    if (budgetPlanColumn)
                    {
                        isValid = !BudgetPlanOverlappingColumnValidator::checkOverlapExistsWithinLayoutForColumn(
                                            BudgetPlanOverlappingValidatorRequest::construct()
                                                .setCurrentBudgetPlanColumn(budgetPlanColumn)
                                                .setBudgetPlanLayoutRecId(this.Layout)
                                                .setShowLayoutElementModificationWarning(true));
                    }
                }
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.InWorksheet = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        this.Ordinal = this.Ordinal == 0 ? this.getNextOrdinal() : this.Ordinal;
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@Budget:LayoutElementTableDocumentation</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationLayout</FormRef>
	<Label>@Budget:LayoutElementDisplayName</Label>
	<SingularLabel>@Budget:LayoutElementDisplayNameSingular</SingularLabel>
	<TableGroup>Group</TableGroup>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Layout</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElementDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEditable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordinal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InWorksheet</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ElementDefinition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordinal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsEditable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InWorksheet</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Budget:Identification</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Layout</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElementDefinition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Layout</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BudgetPlanLayoutRecId</ExtendedDataType>
			<Label>@Budget:LayoutDisplayNameSingular</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ElementDefinition</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BudgetPlanElementDefinitionRecId</ExtendedDataType>
			<Label>@Budget:ElementDefinitionDisplayNameSingular</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsEditable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:ElementAccessStatus</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Ordinal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanLayoutElementOrdinal</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InWorksheet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:ElementAvailableInWorksheet</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LayoutElementIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Layout</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ElementDefinition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LayoutOrdinal</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Layout</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Ordinal</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Layout</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>BudgetPlanLayout</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutRecId</Name>
					<Field>Layout</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ElementDefinition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanElementDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ElementDefinitionRecId</Name>
					<Field>ElementDefinition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>