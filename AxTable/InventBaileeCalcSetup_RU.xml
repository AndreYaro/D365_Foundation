<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBaileeCalcSetup_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventBaileeCalcSetup_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInventTable</Name>
				<Source><![CDATA[
    public InventTable calcInventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.CalcItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement</Name>
				<Source><![CDATA[
    private boolean checkAgreement()
    {
        SalesAgreementHeader salesAgreementHeader;
        boolean ok = true;

        if (this.AgreementCode == TableGroupAll::Table)
        {
            salesAgreementHeader = SalesAgreementHeader::findAgreementId(this.AgreementRelation);

            if (!salesAgreementHeader.canReleaseAgreement())
            {
                ok = checkFailed("@SYS103075");
            }

            if (salesAgreementHeader.CustAccount != this.CustRelation)
            {
                ok = checkFailed(strFmt("@SYS112224",
                    this.AgreementRelation, "@SYS309959", tableId2pname(tableNum(SalesAgreementHeader))));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ItemCode           = TableGroupAll::All;
        this.InventLocationCode = TableGroupAll::All;
        this.CustCode           = TableGroupAll::All;
        this.AgreementCode      = TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        InventTable inventTable;
        if (this.ItemCode == TableGroupAll::Table)
        {
            inventTable = InventTable::find(this.ItemRelation, _forUpdate);
        }
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventBaileeCalcSetup_RU, ItemCode):
                switch (this.ItemCode)
                {
                    case TableGroupAll::Table:
                        if (this.ItemRelation && !InventTable::exist(this.ItemRelation))
                            this.ItemRelation = '';
                        break;
                    case TableGroupAll::GroupId:
                        if (this.ItemRelation && !InventItemGroup::exist(this.ItemRelation))
                            this.ItemRelation = '';
                        break;
                    case TableGroupAll::All:
                        if (this.ItemRelation)
                            this.ItemRelation = '';
                        break;
                }
                break;
            case fieldNum(InventBaileeCalcSetup_RU, InventLocationCode):
                switch (this.InventLocationCode)
                {
                    case TableGroupAll::Table:
                        if (this.InventLocationRelation && !InventLocation::exist(this.InventLocationRelation))
                            this.InventLocationRelation = '';
                        break;
                    case TableGroupAll::GroupId:
                        if (this.InventLocationRelation && !InventSite::exist(this.InventLocationRelation))
                            this.InventLocationRelation = '';
                        break;
                    case TableGroupAll::All:
                        if (this.InventLocationRelation)
                            this.InventLocationRelation = '';
                        break;
                }
                break;
            case fieldNum(InventBaileeCalcSetup_RU, CustCode):
                switch (this.CustCode)
                {
                    case TableGroupAll::Table:
                        if (this.CustRelation && !CustTable::exist(this.CustRelation))
                            this.CustRelation = '';
                        break;
                    case TableGroupAll::GroupId:
                        if (this.CustRelation && !CustGroup::exist(this.CustRelation))
                            this.CustRelation       = '';
                        break;
                    case TableGroupAll::All:
                        if (this.CustRelation)
                            this.CustRelation = '';
                        break;
                }

                this.AgreementCode = TableGroupAll::All;
                this.AgreementRelation = '';
                break;
            case fieldNum(InventBaileeCalcSetup_RU, CustRelation):
                this.AgreementRelation = '';
                break;
            case fieldNum(InventBaileeCalcSetup_RU, AgreementCode):
                this.AgreementRelation = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventBaileeCalcSetup_RU, AgreementCode):
                if (this.AgreementCode == TableGroupAll::Table &&
                    (this.CustCode != TableGroupAll::Table || ! this.CustRelation))
                {
                    ret = checkFailed("@SYS59637");
                }
                break;
            case fieldNum(InventBaileeCalcSetup_RU, AgreementRelation):
                ret = this.checkAgreement();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                             ok = super();
        InventBaileeCalcUnitOperation_RU    calcUnitOperation;
        InventTableModule                   inventTableModuleInvent;
        SalesAgreementHeader                salesAgreementHeader;
        if (! this.RecId)
        {
            select firstonly calcUnitOperation
            join TableId from inventTableModuleInvent
                where inventTableModuleInvent.UnitId        == calcUnitOperation.UnitId
                   && inventTableModuleInvent.ItemId        == this.CalcItemId
                   && inventTableModuleInvent.ModuleType    == ModuleInventPurchSales::Invent;
            if (! calcUnitOperation)
            {
                ok = checkFailed(strFmt("@GLS115667", this.CalcItemId));
            }
        }

        switch (this.ItemCode)
        {
            case TableGroupAll::Table:
                if (! this.ItemRelation)
                {
                    ok = checkFailed("@GLS115668");
                }
                break;
            case TableGroupAll::GroupId:
                if (! this.ItemRelation)
                {
                    ok = checkFailed("@GLS115669");
                }
                break;
        }

        switch (this.InventLocationCode)
        {
            case TableGroupAll::Table:
                if (! this.InventLocationRelation)
                {
                    ok = checkFailed("@GLS115646");
                }
                break;
            case TableGroupAll::GroupId:
                if (! this.InventLocationRelation)
                {
                    ok = checkFailed("@GLS115670");
                }
                break;
        }

        switch (this.CustCode)
        {
            case TableGroupAll::Table:
                if (! this.CustRelation)
                {
                    ok = checkFailed("@GLS115671");
                }
                break;
            case TableGroupAll::GroupId:
                if (! this.CustRelation)
                {
                    ok = checkFailed("@GLS115672");
                }
                break;
        }

        switch (this.AgreementCode)
        {
            case TableGroupAll::Table:
                if (! this.AgreementRelation)
                {
                    ok = checkFailed("@GLS115673");
                }

                if (ok)
                {
                    salesAgreementHeader = SalesAgreementHeader::findAgreementId(this.AgreementRelation);
                    if (salesAgreementHeader.CustAccount != this.CustRelation)
                    {
                        ok = checkFailed(strFmt("@GLS115674", this.AgreementRelation, this.CustRelation));
                    }
                }
                break;
            case TableGroupAll::GroupId:
                if (! this.AgreementRelation)
                {
                    ok = checkFailed("@GLS115675");
                }
                break;
        }

        if (! this.calcInventTable().BatchNumGroupId)
        {
            ok = checkFailed(strFmt("@GLS115676", this.CalcItemId));
        }

        if (this.FromDate && this.ToDate && this.ToDate < this.FromDate)
        {
            ok = checkFailed("@SYS113171");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines agreement code depending on matching priority of calculation item.
    /// </summary>
    /// <param name="_code1">
    ///     First key of four key combination (not used in this method).
    /// </param>
    /// <param name="_code2">
    ///     Second key of four key combination.
    /// </param>
    /// <param name="_code3">
    ///     Third key of four key combination.
    /// </param>
    /// <param name="_code4">
    ///     Fourth key of four key combination.
    /// </param>
    /// <returns>
    ///     Agreement code.
    /// </returns>
    static TableGroupAll agreementCode(
        TableGroupAll   _code1,
        TableGroupAll   _code2,
        TableGroupAll   _code3,
        TableGroupAll   _code4)
    {
        switch (SalesParameters::find().InventBaileeSearchPriority_RU)
        {
            case InventBaileeSearchPriority_RU::ItemInventLocationCustomer:
            case InventBaileeSearchPriority_RU::InventLocationItemCustomer:
                return _code4;
            case InventBaileeSearchPriority_RU::ItemCustomerInventLocation:
            case InventBaileeSearchPriority_RU::InventLocationCustomerItem:
                return _code3;
            case InventBaileeSearchPriority_RU::CustomerItemInventLocation:
            case InventBaileeSearchPriority_RU::CustomerInventLocationItem:
                return _code2;
        }

        return TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the agreement relation for a particular agreement relation code, agreement classification and agreement.
    /// </summary>
    /// <param name="_relationCode">
    ///    The agreement relation code.
    /// </param>
    /// <param name="_agreementClassificationId">
    ///    The agreement classification.
    /// </param>
    /// <param name="_agreementId">
    ///    The agreement.
    /// </param>
    /// <returns>
    ///    The agreement relation.
    /// </returns>
    static Name agreementRelation(
        TableGroupAll        _relationCode,
        Name                 _agreementClassificationId,
        SalesAgreementId     _agreementId)
    {
        return (_relationCode == TableGroupAll::Table
                ? _agreementId
                : _relationCode == TableGroupAll::GroupId
                    ? _agreementClassificationId
                    : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>custCode</Name>
				<Source><![CDATA[
    static TableGroupAll custCode(
        TableGroupAll   _code1,
        TableGroupAll   _code2,
        TableGroupAll   _code3,
        TableGroupAll   _code4)
    {
        switch (SalesParameters::find().InventBaileeSearchPriority_RU)
        {
            case InventBaileeSearchPriority_RU::ItemInventLocationCustomer:
            case InventBaileeSearchPriority_RU::InventLocationItemCustomer:
                return _code3;
            case InventBaileeSearchPriority_RU::InventLocationCustomerItem:
            case InventBaileeSearchPriority_RU::ItemCustomerInventLocation:
                return _code2;
            case InventBaileeSearchPriority_RU::CustomerInventLocationItem:
            case InventBaileeSearchPriority_RU::CustomerItemInventLocation:
                return _code1;
        }
        return TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custRelation</Name>
				<Source><![CDATA[
    static InventCustVendRel custRelation(
        TableGroupAll       _custCode,
        CustAccount         _custAccount)
    {
        return (_custCode == TableGroupAll::Table
                ? _custAccount
                : _custCode == TableGroupAll::GroupId
                    ? CustTable::find(_custAccount).CustGroup
                    : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCalcItemId</Name>
				<Source><![CDATA[
    static boolean existCalcItemId(ItemId _itemId)
    {
        return _itemId &&
               (select RecId from inventBaileeCalcSetup_RU
                    where inventBaileeCalcSetup_RU.CalcItemId == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventBaileeCalcSetup_RU find(
        TableGroupAll           _itemCode,
        InventItemRelation      _itemRelation,
        TableGroupAll           _inventLocationCode,
        InventLocationRelation  _inventLocationRelation,
        TableGroupAll           _custCode,
        InventCustVendRel       _custRelation,
        TableGroupAll           _agreementCode,
        Name                    _agreementRelation)
    {
        InventBaileeCalcSetup_RU    inventBaileeCalcSetup;
        // not firstonly
        select inventBaileeCalcSetup
            where inventBaileeCalcSetup.ItemCode                == _itemCode
               && inventBaileeCalcSetup.ItemRelation            == _itemRelation
               && inventBaileeCalcSetup.InventLocationCode      == _inventLocationCode
               && inventBaileeCalcSetup.InventLocationRelation  == _inventLocationRelation
               && inventBaileeCalcSetup.CustCode                == _custCode
               && inventBaileeCalcSetup.CustRelation            == _custRelation
               && inventBaileeCalcSetup.AgreementCode           == _agreementCode
               && inventBaileeCalcSetup.AgreementRelation       == _agreementRelation;

        return inventBaileeCalcSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCalcItem</Name>
				<Source><![CDATA[
    static ItemId findCalcItem(
        ItemId               _itemId,
        InventLocationId     _inventLocationId,
        CustAccount          _custAccount,
        Name                 _agreementClassificationId,
        SalesAgreementId     _agreementId,
        TransDate            _transDate)
    {
        TableGroupAll       code1;
        TableGroupAll       code2;
        TableGroupAll       code3;
        TableGroupAll       code4;

        TableGroupAll       itemCode;
        TableGroupAll       inventLocationCode;
        TableGroupAll       custCode;
        TableGroupAll       agreementCode;

        InventBaileeCalcSetup_RU    calcSetupSelect;
        InventBaileeCalcSetup_RU    calcSetup;
        for (code1 = TableGroupAll::Table; code1 <= TableGroupAll::All; code1++)
        {
            for (code2 = TableGroupAll::Table; code2 <= TableGroupAll::All; code2++)
            {
                for (code3 = TableGroupAll::Table; code3 <= TableGroupAll::All; code3++)
                {
                    for (code4 = TableGroupAll::Table; code4 <= TableGroupAll::All; code4++)
                    {
                        itemCode            = InventBaileeCalcSetup_RU::itemCode(code1, code2, code3, code4);
                        inventLocationCode  = InventBaileeCalcSetup_RU::inventLocationCode(code1, code2, code3, code4);
                        custCode            = InventBaileeCalcSetup_RU::custCode(code1, code2, code3, code4);
                        agreementCode       = InventBaileeCalcSetup_RU::agreementCode(code1, code2, code3, code4);
                        calcSetupSelect     = InventBaileeCalcSetup_RU::find(itemCode,
                                                                             InventBaileeCalcSetup_RU::itemRelation(itemCode, _itemId),
                                                                             inventLocationCode,
                                                                             InventBaileeCalcSetup_RU::inventLocationRelation(inventLocationCode, _inventLocationId),
                                                                             custCode,
                                                                             InventBaileeCalcSetup_RU::custRelation(custCode, _custAccount),
                                                                             agreementCode,
                                                                             InventBaileeCalcSetup_RU::agreementRelation(agreementCode, _agreementClassificationId, _agreementId));
                        while (calcSetupSelect)
                        {
                            if ((! calcSetupSelect.FromDate || _transDate >= calcSetupSelect.FromDate) &&
                                (! calcSetupSelect.ToDate || _transDate <= calcSetupSelect.ToDate))
                            {
                                if (! calcSetup ||
                                    calcSetup.FromDate < calcSetupSelect.FromDate ||
                                    (calcSetup.FromDate == calcSetupSelect.FromDate &&
                                     calcSetup.ToDate < calcSetupSelect.ToDate))
                                {
                                    calcSetup.data(calcSetupSelect);
                                }
                            }

                            next calcSetupSelect;
                        }

                        if (calcSetup)
                        {
                            return calcSetup.CalcItemId;
                        }
                    }
                }
            }
        }
        return calcSetup.CalcItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationCode</Name>
				<Source><![CDATA[
    static TableGroupAll inventLocationCode(
        TableGroupAll   _code1,
        TableGroupAll   _code2,
        TableGroupAll   _code3,
        TableGroupAll   _code4)
    {
        switch (SalesParameters::find().InventBaileeSearchPriority_RU)
        {
            case InventBaileeSearchPriority_RU::CustomerItemInventLocation:
            case InventBaileeSearchPriority_RU::ItemCustomerInventLocation:
                return _code4;
            case InventBaileeSearchPriority_RU::CustomerInventLocationItem:
                return _code3;
            case InventBaileeSearchPriority_RU::ItemInventLocationCustomer:
                return _code2;
            case InventBaileeSearchPriority_RU::InventLocationCustomerItem:
            case InventBaileeSearchPriority_RU::InventLocationItemCustomer:
                return _code1;
        }
        return TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationRelation</Name>
				<Source><![CDATA[
    static InventLocationRelation inventLocationRelation(
        TableGroupAll       _inventLocationCode,
        InventLocationId    _inventLocationId)
    {
        return (_inventLocationCode == TableGroupAll::Table
                ? _inventLocationId
                : _inventLocationCode == TableGroupAll::GroupId
                    ? InventLocation::find(_inventLocationId).InventSiteId
                    : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCode</Name>
				<Source><![CDATA[
    static TableGroupAll itemCode(
        TableGroupAll   _code1,
        TableGroupAll   _code2,
        TableGroupAll   _code3,
        TableGroupAll   _code4)
    {
        switch (SalesParameters::find().InventBaileeSearchPriority_RU)
        {
            case InventBaileeSearchPriority_RU::InventLocationCustomerItem:
            case InventBaileeSearchPriority_RU::CustomerInventLocationItem:
                return _code4;
            case InventBaileeSearchPriority_RU::CustomerItemInventLocation:
                return _code3;
            case InventBaileeSearchPriority_RU::InventLocationItemCustomer:
                return _code2;
            case InventBaileeSearchPriority_RU::ItemCustomerInventLocation:
            case InventBaileeSearchPriority_RU::ItemInventLocationCustomer:
                return _code1;
        }
        return TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemRelation</Name>
				<Source><![CDATA[
    static InventItemRelation itemRelation(
        TableGroupAll       _itemCode,
        ItemId              _itemId)
    {
        return (_itemCode == TableGroupAll::Table
                ? _itemId
                : _itemCode == TableGroupAll::GroupId
                    ? InventTable::find(_itemId).itemGroupId()
                    : '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS115541</DeveloperDocumentation>
	<Label>@GLS115541</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CalcItemId</TitleField1>
	<TitleField2>ItemRelation</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CalcSetupIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalcItem</Name>
			<Label>@GLS115486</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustAgreement</Name>
			<Label>@GLS115589</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventLocation</Name>
			<Label>@SYS6437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgreementCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115570</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS6908</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalcItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBaileeCalcItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115568</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCustVendRel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventLocationCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115566</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS58740</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemRelation</ExtendedDataType>
			<Label>@SYS6908</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CalcSetupIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AgreementClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementClassification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AgreementRelationType_Extern</Name>
					<RelatedField>AgreementRelationType</RelatedField>
					<Value>4903</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AgreementCode</Name>
					<Field>AgreementCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementRelation</Name>
					<Field>AgreementRelation</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CalcItemInventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CalcItemInventTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalcItemId</Name>
					<SourceEDT>InventBaileeCalcItemId</SourceEDT>
					<Field>CalcItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ItemType_Extern</Name>
					<SourceEDT>InventBaileeCalcItemId</SourceEDT>
					<RelatedField>ItemType</RelatedField>
					<ValueStr>ItemType::Item</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustCode</Name>
					<Field>CustCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustRelation</Name>
					<Field>CustRelation</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustCode</Name>
					<Field>CustCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustRelation</Name>
					<Field>CustRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBaileeCalcSetup_RU</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventLocationCode</Name>
					<Field>InventLocationCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationRelation</Name>
					<SourceEDT>InventLocationRelation</SourceEDT>
					<Field>InventLocationRelation</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventSite</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventLocationCode</Name>
					<Field>InventLocationCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationRelation</Name>
					<Field>InventLocationRelation</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ItemType_Extern</Name>
					<RelatedField>ItemType</RelatedField>
					<ValueStr>ItemType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTableCalcItem</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTableCalcItem</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalcItemId</Name>
					<SourceEDT>InventBaileeCalcItemId</SourceEDT>
					<Field>CalcItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ItemType_Extern</Name>
					<SourceEDT>InventBaileeCalcItemId</SourceEDT>
					<RelatedField>ItemType</RelatedField>
					<ValueStr>ItemType::Item</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>