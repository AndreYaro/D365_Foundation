<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAContractLineItems</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAContractLineItems extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRangeToCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds extended range to container and returns it.
    /// </summary>
    /// <param name = "_dataSourceName">
    /// Datasource name
    /// </param>
    /// <param name = "_fieldName">
    /// Field name
    /// </param>
    /// <param name = "_value">
    /// Range value
    /// </param>
    /// <param name = "_con">
    /// Container with ranges
    /// </param>
    /// <param name = "_pos">
    /// Position in container
    /// </param>
    /// <returns>
    /// Container with extended ranges.
    /// </returns>
    public static container addRangeToCon(
        str _dataSourceName,
        str _fieldName,
        str _value,
        container _con,
        int _pos)
    {
        return conPoke(
                _con,
                _pos,
                strFmt('(%1.%2 == %3)', _dataSourceName, _fieldName, _value));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calContractLineInvoiceAmounts</Name>
				<Source><![CDATA[
    public Amount calContractLineInvoiceAmounts()
    {
        Amount                  rInvoiceAmounts;

        switch (this.LineType)
        {
            case PSAContractLineType::LumpSum:
                rInvoiceAmounts = this.calLumpSumLineInvoiceAmounts();
                break;

            case PSAContractLineType::Progress:
                rInvoiceAmounts = this.calProgressLineInvoiceAmounts();
                break;

            case PSAContractLineType::TAndM:
                rInvoiceAmounts = this.calTAndMLineInvoiceAmounts();
                break;

            case PSAContractLineType::Fee:
                rInvoiceAmounts = this.calFeeLineInvoiceAmounts();
                break;

            case PSAContractLineType::UOD:
                rInvoiceAmounts = this.calUODLineInvoiceAmounts();
                break;
        }

        return rInvoiceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calFeeLineInvoiceAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcuate fee invoice amount
    /// </summary>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note amount should be included as the basis of fee.
    /// </param>
    /// <returns>
    /// Amount of Fee.
    /// </returns>
    public Amount calFeeLineInvoiceAmounts(boolean _isConsiderCredit = true)
    {
        Amount                              rInvoiceAmounts, rInvoiceAmountsTmp;

        PSAContractLineItemsSetup           tpsaContractLineItemsSetup;
        PSAContractLineNum                  spsaContractLineNumRef;
        PSAContractLineItems                tpsaContractLineItemsRef;

        while select ContractLineNumReferred from tpsaContractLineItemsSetup
            where tpsaContractLineItemsSetup.ContractLineNum == this.ContractLineNum
               && tpsaContractLineItemsSetup.ContractLineNumReferred != ''
        {
            spsaContractLineNumRef = tpsaContractLineItemsSetup.ContractLineNumReferred;
            tpsaContractLineItemsRef = PSAContractLineItems::find(spsaContractLineNumRef);

            switch (tpsaContractLineItemsRef.LineType)
            {
                case PSAContractLineType::LumpSum:
                    rInvoiceAmountsTmp = tpsaContractLineItemsRef.calLumpSumLineInvoiceAmounts();
                    break;

                case PSAContractLineType::Progress:
                    rInvoiceAmountsTmp = tpsaContractLineItemsRef.calProgressLineInvoiceAmounts();
                    break;

                case PSAContractLineType::TAndM:
                    rInvoiceAmountsTmp = tpsaContractLineItemsRef.calTAndMLineInvoiceAmounts(_isConsiderCredit);
                    break;

                case PSAContractLineType::Fee:
                    rInvoiceAmountsTmp = tpsaContractLineItemsRef.calFeeLineInvoiceAmounts();
                    break;

                case PSAContractLineType::UOD:
                    rInvoiceAmountsTmp = tpsaContractLineItemsRef.calUODLineInvoiceAmounts();
                    break;
            }

            rInvoiceAmounts += rInvoiceAmountsTmp * this.FeePercentage/100;
        }

        return rInvoiceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calLumpSumLineInvoiceAmounts</Name>
				<Source><![CDATA[
    public Amount calLumpSumLineInvoiceAmounts()
    {
        Amount                              rInvoiceAmounts;
        PSAContractLineItemsSetup           tpsaContractLineItemsSetup;
        ProjOnAccTransSale                  tProjOnAccTransSale;
        ProjOnAccTrans                      tProjOnAccTrans;

        while select ProjOnAccTransId from tpsaContractLineItemsSetup
            where tpsaContractLineItemsSetup.ContractLineNum == this.ContractLineNum
               && tpsaContractLineItemsSetup.ProjOnAccTransId != ''
        {
            while select tProjOnAccTransSale
                where tProjOnAccTransSale.TransId == tpsaContractLineItemsSetup.ProjOnAccTransId
                   && tProjOnAccTransSale.TransStatus == ProjTransStatus::Registered
            {
                if (tProjOnAccTransSale.canBeInvoiced())
                {
                    select firstonly tProjOnAccTrans
                        where tProjOnAccTrans.TransId == tProjOnAccTransSale.TransId;
                    rInvoiceAmounts += tProjOnAccTrans.transTurnover();
                }
            }
        }

        return rInvoiceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calProgressBudgetAmounts</Name>
				<Source><![CDATA[
    public Amount calProgressBudgetAmounts(TransDate _dEndDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Amount                              rBudgetAmounts;
        PSAContractLineItemsSetup           tpsaContractLineItemsSetupProj, tpsaContractLineItemsSetupCate;
        ProjId                              sProjId;
        ProjCategoryId                      sCategoryId;

        while select ProjId from tpsaContractLineItemsSetupProj
            where tpsaContractLineItemsSetupProj.ContractLineNum == this.ContractLineNum
               && tpsaContractLineItemsSetupProj.ProjId != ''
               && tpsaContractLineItemsSetupProj.CategoryId == ''
        {
            sProjId = tpsaContractLineItemsSetupProj.ProjId;
            if (sProjId)
            {
                while select CategoryId from tpsaContractLineItemsSetupCate
                    where tpsaContractLineItemsSetupCate.ContractLineNum == this.ContractLineNum
                       && tpsaContractLineItemsSetupCate.ProjId == sProjId
                       && tpsaContractLineItemsSetupCate.CategoryId != ''
                {
                    sCategoryId = tpsaContractLineItemsSetupCate.CategoryId;
                    if (sCategoryId)
                    {
                        rBudgetAmounts += PSAContractLineItemsServer::calProjCurrentBudgetEmplAmounts(sProjId, sCategoryId);
                        rBudgetAmounts += PSAContractLineItemsServer::calProjCurrentBudgetItemAmounts(sProjId, sCategoryId);
                    }
                }
            }
        }

        return rBudgetAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calProgressLineInvoiceAmounts</Name>
				<Source><![CDATA[
    public Amount calProgressLineInvoiceAmounts()
    {
        Amount                              rInvoiceAmounts;
        PSAContractLineItemsSetup           tpsaContractLineItemsSetupProj, tpsaContractLineItemsSetupCate;
        ProjEmplTrans                       tProjEmplTrans;
        ProjEmplTransCost                   tProjEmplTransCost;
        ProjItemTrans                       tProjItemTrans;
        ProjItemTransCost                   tProjItemTransCost;
        ProjId                              sProjId;
        ProjCategoryId                      sCategoryId;

        PSAPercentUpdateLog                 tpsaPercentUpdateLog;
        Amount                              rBudgetAmounts, rTransAmounts, rInvoicePercentage;

        tpsaPercentUpdateLog = PSAPercentUpdateLog::find(this.ContractLineNum);
        if (tpsaPercentUpdateLog.RecId)
        {
            return this.LineValue * tpsaPercentUpdateLog.getCurrentInvoicePercentage();
        }

        while select ProjId from tpsaContractLineItemsSetupProj
            where tpsaContractLineItemsSetupProj.ContractLineNum == this.ContractLineNum
               && tpsaContractLineItemsSetupProj.ProjId != ''
               && tpsaContractLineItemsSetupProj.CategoryId == ''
        {
            sProjId = tpsaContractLineItemsSetupProj.ProjId;
            if (sProjId)
            {
                while select CategoryId from tpsaContractLineItemsSetupCate
                    where tpsaContractLineItemsSetupCate.ContractLineNum == this.ContractLineNum
                       && tpsaContractLineItemsSetupCate.ProjId == sProjId
                       && tpsaContractLineItemsSetupCate.CategoryId != ''
                {
                    sCategoryId = tpsaContractLineItemsSetupCate.CategoryId;
                    if (sCategoryId)
                    {
                        if (this.ProgressBudgetMethod == PSAProjAmountVsUnit::Amount)
                        {
                            rBudgetAmounts += PSAContractLineItemsServer::calProjCurrentBudgetEmplAmounts(sProjId, sCategoryId);
                            rBudgetAmounts += PSAContractLineItemsServer::calProjCurrentBudgetItemAmounts(sProjId, sCategoryId);
                        }

                        while select tProjEmplTrans
                            where tProjEmplTrans.ProjId == sProjId
                               && tProjEmplTrans.CategoryId == sCategoryId
                        join TransId from tProjEmplTransCost
                            where tProjEmplTransCost.TransId == tProjEmplTrans.TransId
                               && tProjEmplTransCost.TransStatus == ProjTransStatus::Posted
                        {
                            if (ProjTrans::newProjEmplTrans(tProjEmplTrans).canBeInvoiced())
                            {
                                if (this.ProgressBudgetMethod == PSAProjAmountVsUnit::Amount)
                                {
                                    rTransAmounts += tProjEmplTrans.transTurnover();
                                }
                            }
                        }

                        while select tProjItemTrans
                            where tProjItemTrans.ProjId == sProjId
                               && tProjItemTrans.CategoryId == sCategoryId
                        join TransId from tProjEmplTransCost
                            where tProjEmplTransCost.TransId == tProjEmplTrans.TransId
                               && tProjItemTransCost.TransStatus == ProjTransStatus::Posted
                        {
                            if (ProjTrans::newProjItemTrans(tProjItemTrans).canBeInvoiced())
                            {
                                if (this.ProgressBudgetMethod == PSAProjAmountVsUnit::Amount)
                                {
                                    rTransAmounts += tProjItemTrans.transTurnover();
                                }
                            }
                        }
                    }
                }
            }
        }

        if (this.ProgressBudgetMethod == PSAProjAmountVsUnit::Amount)
        {
            if (rBudgetAmounts != 0)
            {
                rInvoicePercentage = rTransAmounts/rBudgetAmounts;
            }
        }

        rInvoiceAmounts = this.LineValue * rInvoicePercentage;
        return rInvoiceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calTAndMLineInvoiceAmounts</Name>
				<Source><![CDATA[
    public Amount calTAndMLineInvoiceAmounts(boolean _isConsiderCredit = true)
    {
        Amount                              rInvoiceAmounts;
        PSAContractLineItemsSetup           tpsaContractLineItemsSetupProj, tpsaContractLineItemsSetupCate;
        ProjCostTrans                       tProjCostTrans;
        ProjCostTransCost                   tProjCostTransCost;
        ProjEmplTrans                       tProjEmplTrans;
        ProjEmplTransCost                   tProjEmplTransCost;
        ProjItemTrans                       tProjItemTrans;
        ProjItemTransCost                   tProjItemTransCost;
        ProjRevenueTrans                    tProjRevenueTrans;
        ProjRevenueTransSale                tProjRevenueTransSale;
        ProjId                              sProjId;
        ProjCategoryId                      sCategoryId;

        while select ProjId from tpsaContractLineItemsSetupProj
            where tpsaContractLineItemsSetupProj.ContractLineNum == this.ContractLineNum
               && tpsaContractLineItemsSetupProj.ProjId != ''
        {
            sProjId = tpsaContractLineItemsSetupProj.ProjId;
            if (sProjId)
            {
                while select CategoryId from tpsaContractLineItemsSetupCate
                    where tpsaContractLineItemsSetupCate.ContractLineNum == this.ContractLineNum
                       && tpsaContractLineItemsSetupCate.ProjId == sProjId
                       && tpsaContractLineItemsSetupCate.CategoryId != ''
                {
                    sCategoryId = tpsaContractLineItemsSetupCate.CategoryId;
                    if (sCategoryId)
                    {
                        while select tProjCostTrans
                            where tProjCostTrans.ProjId == sProjId
                               && tProjCostTrans.CategoryId == sCategoryId
                        join TransId from tProjCostTransCost
                            where tProjCostTransCost.TransId == tProjCostTrans.TransId
                               && tProjCostTransCost.TransStatus == ProjTransStatus::Posted
                        {
                            if (ProjTrans::newProjCostTrans(tProjCostTrans).canBeInvoiced())
                            {
                                rInvoiceAmounts += tProjCostTrans.transTurnover(_isConsiderCredit);
                            }
                        }

                        while select tProjEmplTrans
                            where tProjEmplTrans.ProjId == sProjId
                               && tProjEmplTrans.CategoryId == sCategoryId
                        join TransId from tProjEmplTransCost
                            where tProjEmplTransCost.TransId == tProjEmplTrans.TransId
                               && tProjEmplTransCost.TransStatus == ProjTransStatus::Posted
                        {
                            if (ProjTrans::newProjEmplTrans(tProjEmplTrans).canBeInvoiced())
                            {
                                rInvoiceAmounts += tProjEmplTrans.transTurnover(_isConsiderCredit);
                            }
                        }

                        while select tProjItemTrans
                            where tProjItemTrans.ProjId == sProjId
                               && tProjItemTrans.CategoryId == sCategoryId
                        join InventTransId from tProjItemTransCost
                            where tProjItemTransCost.InventTransId == tProjItemTrans.InventTransId
                               && tProjItemTransCost.TransStatus == ProjTransStatus::Posted
                        {
                            if (ProjTrans::newProjItemTrans(tProjItemTrans).canBeInvoiced())
                            {
                                rInvoiceAmounts += tProjItemTrans.transTurnover(_isConsiderCredit);
                            }
                        }

                        while select tProjRevenueTrans
                            where tProjRevenueTrans.ProjId == sProjId
                               && tProjRevenueTrans.CategoryId == sCategoryId
                        join TransId from tProjRevenueTransSale
                            where tProjRevenueTransSale.TransId == tProjRevenueTrans.TransId
                               && tProjRevenueTransSale.TransStatus == ProjTransStatus::Posted
                        {
                            if (ProjTrans::newProjRevenueTrans(tProjRevenueTrans).canBeInvoiced())
                            {
                                rInvoiceAmounts += tProjRevenueTrans.transTurnover(_isConsiderCredit);
                            }
                        }
                    }
                }
            }
        }

        return rInvoiceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calUODLineInvoiceAmounts</Name>
				<Source><![CDATA[
    public Amount calUODLineInvoiceAmounts()
    {
        Amount                              rInvoiceAmounts;
        PSAUnitsUpdateLog                   tpsaUnitsUpdateLog;

        tpsaUnitsUpdateLog = PSAUnitsUpdateLog::find(this.ContractLineNum);
        if (tpsaUnitsUpdateLog.RecId && this.Units != 0)
        {
            rInvoiceAmounts = this.LineValue * tpsaUnitsUpdateLog.getCurrentInvoiceUnits() / this.Units;
        }
        else
        {
            rInvoiceAmounts = 0;
        }

        return rInvoiceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public str caption()
    {
        str ret;

        ret = super();
        ret= strFmt("@PSA10441", this.ContractLineNum, this.LineDesc, this.LineType);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        PSAProjFundingSourceRetain::deleterecords(this.ContractLineNum);

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }
        
        super();

        ProjContractBillingMethod fpBillingMethod = ProjContractBillingMethod::FixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any posted transaction exists for this contract line.
    /// </summary>
    /// <returns>true if posted transaction exists; otherwise false.</returns>
    public boolean hasPostedHistory()
    {
        boolean postedTransactionExists = this.hasPostedHourTrans() || this.hasPostedExpenseTrans() || this.hasPostedFeeTrans() || this.hasPostedItemTrans() || this.hasPostedOnAccTrans();

        return postedTransactionExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any posted on account transaction exists for this contract line.
    /// </summary>
    /// <returns>true if posted transaction exists; otherwise false.</returns>
    public boolean hasPostedOnAccTrans()
    {
        boolean postedTransactionExists = false;
        if (!postedTransactionExists)
        {
            ProjProposalOnAcc projProposalOnAcc;
            select firstonly RecId from projProposalOnAcc
                where projProposalOnAcc.psaContractLineNum == this.ContractLineNum;
            if (projProposalOnAcc.RecId)
            {
                postedTransactionExists = true;
            }
        }

        if (!postedTransactionExists)
        {
            ProjInvoiceOnAcc projInvoiceOnAcc;
            select firstonly RecId from projInvoiceOnAcc
                where projInvoiceOnAcc.psaContractLineNum == this.ContractLineNum;
            if (projInvoiceOnAcc.RecId)
            {
                postedTransactionExists = true;
            }
        }

        return postedTransactionExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedHourTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any posted hour transaction exists for this contract line.
    /// </summary>
    /// <returns>true if posted transaction exists; otherwise false.</returns>
    public boolean hasPostedHourTrans()
    {
        ProjEmplTrans projEmplTrans;
        select firstonly RecId from projEmplTrans
                where projEmplTrans.psaContractLineNum == this.ContractLineNum;
        
        return projEmplTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedExpenseTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any posted expense transaction exists for this contract line.
    /// </summary>
    /// <returns>true if posted transaction exists; otherwise false.</returns>
    public boolean hasPostedExpenseTrans()
    {
        ProjCostTrans projCostTrans;
        select firstonly RecId from projCostTrans
            where projCostTrans.psaContractLineNum == this.ContractLineNum;
        
        return projCostTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any posted item transaction exists for this contract line.
    /// </summary>
    /// <returns>true if posted transaction exists; otherwise false.</returns>
    public boolean hasPostedItemTrans()
    {
        ProjItemTrans projItemTrans;
        select firstonly RecId from projItemTrans
                where projItemTrans.psaContractLineNum == this.ContractLineNum;

        return projItemTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedFeeTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any posted fee transaction exists for this contract line.
    /// </summary>
    /// <returns>true if posted transaction exists; otherwise false.</returns>
    public boolean hasPostedFeeTrans()
    {
        ProjRevenueTrans projRevenueTrans;
        select firstonly RecId from projRevenueTrans
                        where projRevenueTrans.psaContractLineNum == this.ContractLineNum;

        return projRevenueTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPostedHistoryForProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any posted transactions for the given project
    /// </summary>
    /// <param name = "_projId">Project ID.</param>
    /// <returns>true if posted transactions exist; false otherwise.</returns>
    public boolean hasPostedHistoryForProject(ProjId _projId)
    {
        boolean postedTransactionExists = false;

        ProjEmplTrans projEmplTrans;
        select firstonly RecId from projEmplTrans
                where projEmplTrans.psaContractLineNum == this.ContractLineNum
                    && projEmplTrans.ProjId == _projId;
        if (projEmplTrans.RecId)
        {
            postedTransactionExists = true;
        }

        if (!postedTransactionExists)
        {
            ProjCostTrans projCostTrans;
            select firstonly RecId from projCostTrans
                where projCostTrans.psaContractLineNum == this.ContractLineNum
                    && projCostTrans.ProjId == _projId;
            if (projCostTrans.RecId)
            {
                postedTransactionExists = true;
            }
        }

        if (!postedTransactionExists)
        {
            ProjRevenueTrans projRevenueTrans;
            select firstonly RecId from projRevenueTrans
                        where projRevenueTrans.psaContractLineNum == this.ContractLineNum
                    && projRevenueTrans.ProjId == _projId;
            if (projRevenueTrans.RecId)
            {
                postedTransactionExists = true;
            }
        }

        if (!postedTransactionExists)
        {
            ProjItemTrans projItemTrans;
            select firstonly RecId from projItemTrans
                    where projItemTrans.psaContractLineNum == this.ContractLineNum
                    && projItemTrans.ProjId == _projId;
            if (projItemTrans.RecId)
            {
                postedTransactionExists = true;
            }
        }

        //
        // Not using ProjOnAccTrans alone as this table contains unposted transactions
        //
        if (!postedTransactionExists)
        {
            ProjProposalOnAcc projProposalOnAcc;
            ProjOnAccTrans projOnAccTrans;
            select firstonly RecId from projOnAccTrans
                exists join projProposalOnAcc
                    where projProposalOnAcc.psaContractLineNum == this.ContractLineNum
                        && projOnAccTrans.ProjId == _projId;
            if (projOnAccTrans.RecId)
            {
                postedTransactionExists = true;
            }
        }

        if (!postedTransactionExists)
        {
            ProjInvoiceOnAcc projInvoiceOnAcc;
            select firstonly RecId from projInvoiceOnAcc
                where projInvoiceOnAcc.psaContractLineNum == this.ContractLineNum
                    && projInvoiceOnAcc.ProjId == _projId;
            if (projInvoiceOnAcc.RecId)
            {
                postedTransactionExists = true;
            }
        }

        return postedTransactionExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any estimates present for the projects associated with this contract line.
    /// </summary>
    /// <returns>true if estimates were found; false otherwise.</returns>
    public boolean hasEstimates()
    {
        ProjControlPeriodTable estimate;
        ProjTable projTableLoc;

        select firstonly RecId from projTableLoc
            where projTableLoc.ProjInvoiceProjId == this.ProjInvoiceProjId
            exists join estimate where estimate.ProjId == projTableLoc.ProjId && estimate.PeriodStatus != ProjControlPeriodStatus::Reversal;

        return projTableLoc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransSelectedForCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a transaction is selected as credit note for this billing rule.
    /// </summary>
    /// <returns>
    /// true if a credit note transaction exists; false otherwise.
    /// </returns>
    public boolean hasTransSelectedForCreditNote()
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjOnAccTrans          onAccTrans;
        ProjOnAccTransSale      onAccTransSale;
        boolean                 ret = false;

        select firstonly RecId from projRevenueTrans
            where projRevenueTrans.psaContractLineNum == this.ContractLineNum
            join RecId from projRevenueTransSale
            where projRevenueTransSale.TransId       == projRevenueTrans.TransId
                &&  projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote;

        if (projRevenueTransSale)
        {
            ret = true;
        }
        else
        {
            select firstonly RecId from onAccTrans
                where onAccTrans.psaContractLineNum == this.ContractLineNum
                join RecId from onAccTransSale
                where onAccTransSale.TransId     == onAccTrans.TransId &&
                      onAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote;

            if (onAccTrans)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.SalesPurchJournalLine::initFromCompanyInformation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                if (ProjMultipleContractLinesForProjectFeatureHelper::existOverlappingContractLineAssociation(this.ContractLineNum, this.ProjInvoiceProjId, this.IncludeHourTrans, this.IncludeExpenseTrans, this.IncludeItemTrans, this.IncludeFeeTrans))
                {
                    throw error(strFmt("@Proj:OverlappingContractLineTransTypeCreateError", this.ContractLineNum, this.ProjInvoiceProjId));
                }
            }
        }

        ProjOnAccTrans      projOnAccTrans;
        ProjInvoiceTable    projInvoiceTable;

        ttsbegin;
        
        super();
        
        if (!this.scopeIdentifier())
        {
            // Not in the context of data entity so need to manually create integration key
            this.generateIntegrationKey();
        }

        ttscommit;

        if (this.isBillingRuleForFixedPriceProject())
        {
            projOnAccTrans.initFromBillingRule(this);
            ProjOnAccTrans::createOnAccTrans(projOnAccTrans, this.LineValue);
        }

        if (TaxIntegrationUtils::isTaxInformationEnabled()
                && (this.LineType == PSAContractLineType::Fee ||
                   this.LineType == PSAContractLineType::Progress ||
                   this.LineType == PSAContractLineType::UOD))
        {
            projInvoiceTable = ProjInvoiceTable::find(this.ProjInvoiceProjId);
            TransTaxInformationHelper::copyTransTaxInformation(projInvoiceTable, this);
            TransTaxInformationHelper transTaxInformationHelper = TransTaxInformationHelper::newHelper();
            transTaxInformationHelper.updateTransTaxInformationFromProjCategory(this, this.FeeCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateIntegrationKey</Name>
				<Source><![CDATA[
    private void generateIntegrationKey()
    {
        if (ProjectContractLineIntegration::existsForContractLine(this.ContractLineNum))
        {
            return; // record exists already
        }

        ProjectContractLineIntegration projectContractLineIntegration;
        projectContractLineIntegration.ProjectContractId = this.ProjInvoiceProjId;
        projectContractLineIntegration.ContractLineNum = this.ContractLineNum;
        projectContractLineIntegration.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBillingRuleForFixedPriceProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the billing rule applies to a fixed price project.
    /// </summary>
    /// <returns>
    /// true if it applies to a fixed price project; false otherwise.
    /// </returns>
    public boolean isBillingRuleForFixedPriceProject()
    {
        boolean ret;
        boolean enableMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        ret = false;

        if (this.FeeProjId != '' 
            && (ProjTable::find(this.FeeProjId).Type == ProjType::FixedPrice 
                || (enableMultipleContractLinesForProjectFeature && this.BillingMethod == ProjContractBillingMethod::FixedPrice)))
        {
            if (this.LineType == PSAContractLineType::Progress || this.LineType == PSAContractLineType::UOD)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        // <GIN>
        TransTaxInformation     transTaxInformation;
        TransTaxInformation     transTaxInformationProj;
        #IsoCountryRegionCodes
        // </GIN>

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PSAContractLineItems, LineType) :

                this.SalesTaxGroup = PSAContractLineItems::getDefaultSalesTaxGroup(this.LineType, this.ProjInvoiceProjId);

                if (this.LineType == PSAContractLineType::Fee
                    || this.LineType == PSAContractLineType::Progress
                    || this.LineType == PSAContractLineType::UOD)
                {
                    // <GIN>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                    {
                        transTaxInformation     = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(this, true);
                        if (transTaxInformation)
                        {
                            ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(this.ProjInvoiceProjId);
                            transTaxInformationProj = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(projInvoiceTable);

                            ttsbegin;
                            transTaxInformation.CompanyLocation         = transTaxInformationProj.CompanyLocation;
                            transTaxInformation.ExciseConsignment       = transTaxInformationProj.ExciseConsignment;
                            transTaxInformation.CustomsTariffCode       = transTaxInformationProj.CustomsTariffCode;
                            transTaxInformation.ExciseDirectSettlement  = transTaxInformationProj.ExciseDirectSettlement;
                            transTaxInformation.ExciseDSA               = transTaxInformationProj.ExciseDSA;
                            transTaxInformation.ExciseRecordType        = transTaxInformationProj.ExciseRecordType;
                            transTaxInformation.ExciseTariffCodes       = transTaxInformationProj.ExciseTariffCodes;
                            transTaxInformation.ExciseType              = transTaxInformationProj.ExciseType;
                            transTaxInformation.SalesTaxFormTypes       = transTaxInformationProj.SalesTaxFormTypes;
                            transTaxInformation.ServiceCode             = transTaxInformationProj.ServiceCode;
                            transTaxInformation.VATCommodityCode        = transTaxInformationProj.VATCommodityCode;
                            transTaxInformation.update();
                            ttscommit;
                        }
                    }
                    // </GIN>
                }
                else
                {
                    if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
                    {
                        this.SalesPurchJournalLine::initFromCompanyInformation();
                    }
                }

                if (this.isLineTypeNotUOD())
                {
                    this.UnitPrice = 0;
                    this.Units = 0;
                    this.uom = '';
                }

                if (this.LineType == PSAContractLineType::TAndM || this.LineType == PSAContractLineType::LumpSum)
                {
                    this.DefaultDimension = 0;
                    this.FeeCategoryId  = '';
                    this.FeeProjId      = '';
                    this.LineValue      = 0;
                }
                break;

            case fieldNum(PSAContractLineItems, FeeProjId) :
                if (this.LineType == PSAContractLineType::Fee
                    || this.LineType == PSAContractLineType::Progress
                    || this.LineType == PSAContractLineType::UOD)
                {
                    this.DefaultDimension = ProjTable::find(this.FeeProjId).DefaultDimension;
                }

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoice</Name>
				<Source><![CDATA[
    public ProjInvoiceTable projInvoice()
    {
        return ProjInvoiceTable::find(this.ProjInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                if (ProjMultipleContractLinesForProjectFeatureHelper::existOverlappingContractLineAssociation(this.ContractLineNum, this.ProjInvoiceProjId, this.IncludeHourTrans, this.IncludeExpenseTrans, this.IncludeItemTrans, this.IncludeFeeTrans))
                {
                    throw error(strFmt("@Proj:OverlappingContractLineTransTypeUpdateError", this.ContractLineNum, this.ProjInvoiceProjId));
                }
            }
        }

        super();

        // Used to recreate on account transaction when contract value is changed for a billing rule
        if (this.isBillingRuleForFixedPriceProject())
        {
            ProjOnAccTrans::deleteAndrecreateProjOnAccTrans(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PSAContractLineItems, RetainagePercentage):
                    if (this.RetainagePercentage != 0 
                        && (this.RetainagePercentage < 1 || this.RetainagePercentage > 100))
                    {
                        ret = checkFailed("@PSA2738");
                    }
                    break;

                case fieldNum(PSAContractLineItems, RetainageRule):
                    if (this.LineType == PSAContractLineType::TAndM && this.RetainageRule)
                    {
                        ret = checkFailed("@PSA3121");
                    }
                    break;

                case fieldNum(PSAContractLineItems, LineType):
                    if (this.LineType == PSAContractLineType::TAndM && this.RetainageRule)
                    {
                        ret = checkFailed("@PSA3121");
                    }
                    break;

                case fieldNum(PSAContractLineItems, FeeCategoryId):
                    if (this.FeeCategoryId)
                    {
                        ProjCategory projCategory;
                        projCategory = ProjCategory::find(this.FeeCategoryId);

                        if (projCategory.CategoryType != ProjCategoryType::Revenue)
                        {
                            ret = checkFailed(strFmt("@SYS54897",this.FeeCategoryId));
                        }

                        if (projCategory.SetupEstimate == NoYes::Yes
                            || projCategory.SetupSubscription == NoYes::Yes
                            || projCategory.PSACustPaymentRetention == NoYes::Yes)
                        {
                            ret = checkFailed("@SYS88806");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.LineType == PSAContractLineType::UOD
            && !this.uom)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldPName(PSAContractLineItems, uom)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PSAContractLineItems find(PSAContractLineNum _psaContractLineNum, boolean _bUpdate = false)
    {
        PSAContractLineItems            tpsaContractLineItems;

        tpsaContractLineItems.selectForUpdate(_bUpdate);

        if (_psaContractLineNum)
        {
            select firstonly tpsaContractLineItems
                where tpsaContractLineItems.ContractLineNum == _psaContractLineNum;
        }

        return tpsaContractLineItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetainageRule</Name>
				<Source><![CDATA[
    public static container getRetainageRule(PSAContractLineNum _psaContractLineNum)
    {
        PSAContractLineItems            tpsaContractLineItems;
        ProjInvoiceTable                tProjInvoiceTable;
        PSAProjRetainScheduleId         sScheduleId;
        Percent                         rRetainPercent;

        tpsaContractLineItems = PSAContractLineItems::find(_psaContractLineNum);

        if (tpsaContractLineItems.RetainagePercentage != 0 || tpsaContractLineItems.RetainageRule)
        {
            sScheduleId = tpsaContractLineItems.RetainageRule;
            rRetainPercent = tpsaContractLineItems.RetainagePercentage;
        }
        else
        {
            tProjInvoiceTable = ProjInvoiceTable::find(tpsaContractLineItems.ProjInvoiceProjId);
            sScheduleId = tProjInvoiceTable.psaRetainScheduleId;
            rRetainPercent = tProjInvoiceTable.psaRetainPercent;
        }

        return [sScheduleId, rRetainPercent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBillingRules</Name>
				<Source><![CDATA[
    public static boolean hasBillingRules(ProjInvoiceProjId _contractId)
    {
        boolean result = false;

        if (_contractId != '')
        {
            result = (select firstonly RecId from psaContractLineItems where psaContractLineItems.ProjInvoiceProjId == _contractId).RecId ? true : false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContractLine</Name>
				<Source><![CDATA[
    public static void updateContractLine(ProjInvoiceProjId _contractId)
    {
        ProjInvoiceTable    projInvoiceTable;
        NoYes               enableContractLines;

        if (_contractId != '')
        {
            projInvoiceTable = ProjInvoiceTable::find(_contractId, true);

            if (projInvoiceTable)
            {
                enableContractLines = PSAContractLineItems::hasBillingRules(_contractId) ? NoYes::Yes : NoYes::No;

                if (projInvoiceTable.psaContractLines != enableContractLines)
                {
                    ttsbegin;
                    projInvoiceTable.psaContractLines = enableContractLines;
                    projInvoiceTable.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next available number sequence value for <c>ContractLineNum</c>
    /// </summary>
    /// <returns>The next available <c>ContractLineNum</c> based upon its number sequence</returns>
    public static PSAContractLineNum getNewContractLineNum()
    {
        SysLastValue sysLastValue;
        PSAContractLineNum contractLineNum;

        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(PSAContractLineNum));
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceReference && numberSequenceTable)
        {
            if (!numberSequenceTable.Manual)
            {
                // generate ID if number sequence is not set to Manual
                NumberSeq numberSeq = NumberSeq::newGetNumFromId(numberSequenceTable.RecId,
                                                                   true,
                                                                   true,
                                                                   sysLastValue);

                if (numberSeq)
                {
                    contractLineNum = numberSeq.num();
                }
            }
        }

        return contractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSalesTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default <c>SalesTaxGroup</c>
    /// </summary>
    /// <param name = "_lineType">The <c>LineType</c> to use as a basis to determine the default <c>SalesTaxGroup</c></param>
    /// <param name = "_projInvoiceProjId">The <c>ProjInvoiceProjId</c> to use as a basis to determine the default <c>SalesTaxGroup</c></param>
    /// <returns>The default <c>SalesTaxGroup</c></returns>
    public static TaxGroup getDefaultSalesTaxGroup(PSAContractLineType _lineType, ProjInvoiceProjId _projInvoiceProjId)
    {
        TaxGroup salesTaxGroup = "";

        if (_lineType == PSAContractLineType::Fee
            || _lineType == PSAContractLineType::Progress
            || _lineType == PSAContractLineType::UOD)
        {
            ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(_projInvoiceProjId);
            salesTaxGroup = projInvoiceTable.TaxGroupId;
        }
        return salesTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineTypeNotUOD</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>PSAContractLineItems</c> record does not have a line type of UOD.
    /// </summary>
    /// <returns>
    ///     true if the line type is not UOD; otherwise, false.
    /// </returns>
    public boolean isLineTypeNotUOD()
    {
        return this.LineType != PSAContractLineType::UOD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineTypeNotLumpSumAndTM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>PSAContractLineItems</c> record does not have a line type of LumpSum and TAndM.
    /// </summary>
    /// <returns>
    ///     true if the line type is not TAndM and LumpSum; otherwise, false.
    /// </returns>
    public boolean isLineTypeNotLumpSumAndTM()
    {
        return this.isLineTypeNotLumpSum() && this.isLineTypeNotTAndM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineTypeNotTAndM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>PSAContractLineItems</c> record does not have a line type of TAndM.
    /// </summary>
    /// <returns>
    ///     true if the line type is not TAndM; otherwise, false.
    /// </returns>
    public boolean isLineTypeNotTAndM()
    {
        return this.LineType != PSAContractLineType::TAndM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineTypeNotLumpSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>PSAContractLineItems</c> record does not have a line type of LumpSum.
    /// </summary>
    /// <returns>
    ///     true if the line type is not LumpSum; otherwise, false.
    /// </returns>
    public boolean isLineTypeNotLumpSum()
    {
        return this.LineType != PSAContractLineType::LumpSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineTypeNotFee</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a <c>PSAContractLineItems</c> record does not have a line type of Fee.
    /// </summary>
    /// <returns>
    ///     true if the line type is not Fee; otherwise, false.
    /// </returns>
    public boolean isLineTypeNotFee()
    {
        return this.LineType != PSAContractLineType::Fee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();
    
        if (ret
            && ProjRevRecContractValidationFlight::instance().isEnabled()
            && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            PSAContractLineItemsSetup psaContractLineItemsSetup;

            select firstonly ProjId from psaContractLineItemsSetup
                where psaContractLineItemsSetup.ContractLineNum == this.ContractLineNum;

            // Prevent deleting contract line if there are estimates in an incorrect state
            if (!ProjRevRecHelper::allowRevRecProjectChange(psaContractLineItemsSetup.ProjId, psaContractLineItemsSetup.ProjId))
            {
                ret = checkFailed(strFmt("@Proj:ProjContractLineDeleteError", psaContractLineItemsSetup.ProjId));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@PSA10833</DeveloperDocumentation>
	<FormRef>psacontractlineitems</FormRef>
	<Label>@PSA2827</Label>
	<TitleField1>ContractLineNum</TitleField1>
	<TitleField2>LineDesc</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ContractLineNumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ContractLineNumIdx</PrimaryIndex>
	<ReplacementKey>ContractLineNumIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PSAContractLineItemsSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PSAContractLineItemsSetup</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36443</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Units</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCrossReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProgressBudgetMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeIndirectCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Paid</Name>
			<Label>@SYS59532</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaidAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FeeProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Retainage</Name>
			<Label>@PSA2704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetainageRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetainagePercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChangeOrderNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAChangeOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractLineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FeeCategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FeePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@PSA2829</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FeeProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Label>@PSA2845</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeIndirectCost</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PSA2976</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCrossReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PSAContractLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BillingMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Proj:ProjBillingMethod</Label>
			<EnumType>ProjContractBillingMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeHourTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS5269</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeExpenseTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4882014</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeFeeTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS9154</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeItemTrans</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14428</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideChargeableCategories</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@Proj:OverrideChargeableCategories</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Details</Name>
			<ExtendedDataType>ProjContractLineDetails</ExtendedDataType>
			<Label>@Proj:ProjContractLineDetails</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS40283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PaidAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS59532</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProgressBudgetMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PSA2492</Label>
			<EnumType>PSAProjAmountVsUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetainagePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@PSA2697</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetainageRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAProjRetainScheduleId</ExtendedDataType>
			<Label>@PSA2832</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesTaxGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInventVATCommodityCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxInventVATCommodityCodeId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS23884</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Units</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS7867</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValue_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSGroup_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSGroup_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>ProjStartDate</ExtendedDataType>
			<FeatureClass>ProjContractLineBasedRevRecToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>ProjEndDate</ExtendedDataType>
			<FeatureClass>ProjContractLineBasedRevRecToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ContractLineGroupRefRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceScheduleType</Name>
			<EnumType>InvoiceScheduleType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ContractLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SearchIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContractLineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContractIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BillingMethodLinetypeTransType</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BillingMethod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IncludeHourTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IncludeExpenseTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IncludeFeeTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IncludeItemTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContractLineNumTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjInvoiceProjIdLineTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_PSAContractLineItems</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FeeCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>FeeCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FeeProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>FeeProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSACustomerRetentionTermTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PSACustomerRetentionTermTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetainageRule</Name>
					<Field>RetainageRule</Field>
					<RelatedField>RetentionTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RetentionTermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>SalesTaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOM</Name>
					<Field>UOM</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContractLineGroupRefRec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjContractLineGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjContractLineGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjContractLineGroup</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContractLineGroupRefRecId</Name>
					<Field>ContractLineGroupRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>