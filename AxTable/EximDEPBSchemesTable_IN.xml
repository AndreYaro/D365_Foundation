<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximDEPBSchemesTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximDEPBSchemesTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();

        this.SchemeDateTime    = DateTimeUtil::getSystemDateTime();
        this.Transferable      = NoYes::No;
        this.Closed            = NoYes::No;
        this.AuthorizationType = EximAuthorizationType_IN::DEPB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximDEPBSchemesTable_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximDEPBSchemesTable_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDEPBSchemesTable_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximDEPBSchemesTable_IN    eximDEPBSchemesTable;

        eximDEPBSchemesTable.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximDEPBSchemesTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximDEPBSchemesTable
            where eximDEPBSchemesTable.RecId == _recId;

        return eximDEPBSchemesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAuthorizationTypeSchemeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds exim DEPB schemes table by authorization type scheme id.
    /// </summary>
    /// <param name="_depbId">
    /// The depb id.
    /// </param>
    /// <param name="_forUpdate">
    /// The forUpdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximDEPBSchemesTable_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDEPBSchemesTable_IN findByAuthorizationTypeSchemeId(
        EximDEPBId_IN _depbId,
        boolean       _forUpdate = false)
    {
        EximDEPBSchemesTable_IN eximDEPBSchemesTableLoc;

        if (_depbId)
        {
            if (_forUpdate)
            {
                eximDEPBSchemesTableLoc.selectForUpdate(_forUpdate);
            }

            select firstonly eximDEPBSchemesTableLoc
                where eximDEPBSchemesTableLoc.SchemeId          == _depbId
                   && eximDEPBSchemesTableLoc.AuthorizationType == EximAuthorizationType_IN::DEPB;
        }
        return eximDEPBSchemesTableLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds exim DEPB schemes table RecId.
    /// </summary>
    /// <param name="_schemeTableRecId">
    /// The scheme table RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// The forUpdate flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximDEPBSchemesTable_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDEPBSchemesTable_IN findRecId(
        RefRecId _schemeTableRecId,
        boolean  _forUpdate = false)
    {
        EximDEPBSchemesTable_IN eximDEPBSchemesTableLoc;

        if (_schemeTableRecId)
        {
            if (_forUpdate)
            {
                eximDEPBSchemesTableLoc.selectForUpdate(_forUpdate);
            }

            select firstonly eximDEPBSchemesTableLoc
                where eximDEPBSchemesTableLoc.RecId == _schemeTableRecId;
        }

        return eximDEPBSchemesTableLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAuthorizationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize authorization id.
    /// </summary>
    /// <param name="_eximAuthorizationSchemesTable">
    /// The exim authorization schemes table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void initAuthorizationId(FormRun _eximAuthorizationSchemesTable)
    {
        NumberSeqFormHandler numSeqFormHandlerAuthId;

        numSeqFormHandlerAuthId = NumberSeqFormHandler::newForm(EximParameters_IN::numRefDEPBId().NumberSequenceId,
                                                                _eximAuthorizationSchemesTable,
                                                                _eximAuthorizationSchemesTable.dataSource(),
                                                                fieldnum(EximAuthorizationSchemesTable_IN, AuthorizationId));
        numSeqFormHandlerAuthId.formMethodDataSourceCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidSchemeLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the scheme liense is valid.
    /// </summary>
    /// <param name="_licenseNumber">
    /// The license number.
    /// </param>
    /// <param name="_eximPortsTableRecId">
    /// The exim ports table RecId.
    /// </param>
    /// <returns>
    /// If 'True', the scheme license is valid.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isValidSchemeLicense(
        EximLicenseNum_IN _licenseNumber,
        RefRecId          _eximPortsTableRecId)
    {
        return _licenseNumber
            && _eximPortsTableRecId
            &&  (select firstonly RecId from eximDEPBSchemesTable_IN
                    where eximDEPBSchemesTable_IN.LicenseNum == _licenseNumber
                       && eximDEPBSchemesTable_IN.EximPorts  == _eximPortsTableRecId
                       && eximDEPBSchemesTable_IN.Status     == EximAuthorizationStatus_IN::Approved
                       && eximDEPBSchemesTable_IN.Closed     == NoYes::No).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBySchemeData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs form lookup according to the eximIncentiveSchemeData RecId
    /// </summary>
    /// <param name="_formControl">
    ///     The form control object.
    /// </param>
    /// <param name="_schemeDataRecId">
    ///     RecId of eximIncentiveSchemeData
    /// </param>
    /// <returns>
    ///     Instance of EximDEPBSchemesTable_IN
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximDEPBSchemesTable_IN lookupBySchemeData(
        FormControl _formControl,
        RecId       _schemeDataRecId)
    {
        EximDEPBSchemesTable_IN     selectedRecord;
        QueryBuildDataSource        qbds;
        SysReferenceTableLookup     sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(EximDEPBSchemesTable_IN), _formControl, true);
        Query                       lookupQuery;

        // Display the SchemeId and Basis fields in the lookup form.
        sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, SchemeId));
        sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, Status));

        // Create a custom Query that filters on EximDEPBSchemesTable_IN.
        lookupQuery = new Query();
        qbds = lookupQuery.addDataSource(tablenum(EximDEPBSchemesTable_IN));
        qbds.addRange(fieldnum(EximDEPBSchemesTable_IN, Status)).value(queryValue(EximAuthorizationStatus_IN::Approved));
        qbds.addRange(fieldnum(EximDEPBSchemesTable_IN, Closed)).value(queryValue(NoYes::No));

        qbds = qbds.addDataSource(tablenum(EximPorts_IN));
        qbds.relations(true);
        qbds = qbds.addDataSource(tablenum(EximIncentiveSchemeGroup_IN));
        qbds.relations(true);
        qbds = qbds.addDataSource(tablenum(EximIncentiveSchemeData_IN));
        qbds.relations(true);
        qbds.addRange(fieldnum(EximIncentiveSchemeData_IN, RecId)).value(queryValue(_schemeDataRecId));
        sysTableLookup.parmQuery(lookupQuery);

        // Return the record selected by the user.
        selectedRecord = sysTableLookup.performFormLookup();

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLicenseNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup license number.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_portId">
    /// The port id.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupLicenseNum(
        FormControl _formControl,
        RefRecId    _portId)
    {
        Query                   query          = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(EximDEPBSchemesTable_IN), _formControl);
        ;

        queryBuildDataSource = query.addDataSource(tablenum(EximDEPBSchemesTable_IN));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(EximDEPBSchemesTable_IN, Status));
        queryBuildRange.value(queryValue(EximAuthorizationStatus_IN::Approved));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(EximDEPBSchemesTable_IN, EximPorts));
        queryBuildRange.value(queryValue(_portId));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(EximDEPBSchemesTable_IN, Closed));
        queryBuildRange.value(queryValue(NoYes::No));
        sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, SchemeId));
        sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, LicenseNum),true);
        sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, IssueDateTime));
        sysTableLookup.addLookupfield(fieldnum(EximDEPBSchemesTable_IN, EximPorts));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62441</DeveloperDocumentation>
	<FormRef>EximDEPBSchemesTable_IN</FormRef>
	<Label>@GLS61828</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>SchemeId</TitleField1>
	<TitleField2>Basis</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AuthorizationTypeSchemeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EximDEPBSchemesLine_IN</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EximDEPBSchemesLine_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EximPorts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DEPBScheme</Name>
			<Label>@GLS61828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchemeDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EximPorts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transferable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExportDetails</Name>
			<Label>@GLS61867</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealizedInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Process</Name>
			<Label>@SYS122441</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@SYS81228</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AuthorizationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AuthorizationType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EximAuthorizationType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Basis</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximDEPBBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS18742</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EximPorts</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS61500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>FromDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>IssueDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@GLS62283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EximLicenseNum_IN</ExtendedDataType>
			<Label>@SYS114298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RealizedInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS61682</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>SchemeDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS81047</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SchemeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximDEPBId_IN</ExtendedDataType>
			<Label>@SYS112132</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximAuthorizationStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ToDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Transferable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS61647</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AuthorizationTypeSchemeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AuthorizationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SchemeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EximPortsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EximPorts</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>EximDEPBSchemesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximDEPBSchemesTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EximDEPBSchemesTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximDEPBSchemesTable_IN_EximDEPBSchemesTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AuthorizationType</Name>
					<Field>AuthorizationType</Field>
					<ValueStr>EximAuthorizationType_IN::DEPB</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SchemeId</Name>
					<Field>SchemeId</Field>
					<RelatedField>SchemeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximPorts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS61589</EntityRelationshipRole>
			<RelatedTable>EximPorts_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EximPorts_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximPorts_IN_EximDEPBSchemesTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximPorts</Name>
					<Field>EximPorts</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>