<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCROrderEventTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCROrderEventTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayReturnId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the return ID for the currently selected record.
    /// </summary>
    /// <returns>
    /// The return ID for the currently selected record.
    /// </returns>
    public display SalesIdBase displayReturnId()
    {
        if (this.MCROrderEventType == MCROrderEventType::ReturnCreated
            || this.MCROrderEventType == MCROrderEventType::ModifyReturnOrder)
        {
            // look at SalesTable instead of ReturnTable
            return SalesTable::findRecId(this.RefRecId, false).SalesId;
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user name based off of the user ID.
    /// </summary>
    /// <returns>
    /// The user name based off of the user ID.
    /// </returns>
    public display UserName displayUserName()
    {
        UserInfo userInfo;

        select firstonly Id, Name from userInfo
            where userInfo.Id == this.MCROverrideUser;

        return userInfo.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineItemID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item ID of the sales line so it can be displayed.
    /// </summary>
    /// <returns>
    /// The item ID of the sales line so it can be displayed.
    /// </returns>
    public display ItemId getSalesLineItemID()
    {
        ItemId lineItemID;

        lineItemID = SalesLine::findInventTransId(this.InventTransId).ItemId;

        if (lineItemID)
        {
            return lineItemID;
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLogEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the event can be logged.  
    /// </summary>
    /// <returns>true when the event can be logged; otherwise, false.</returns>
    protected boolean canLogEvent()
    {
        switch (this.MCROrderEventType)
        {
            //===========================================================
            // Hold code events
            //===========================================================
            case MCROrderEventType::AddSOOrderHold:
                return MCROrderEventSetup::find().AddSOOrderHold;
            case MCROrderEventType::ModifySOOrderHold:
                return MCROrderEventSetup::find().ModifySOOrderHold;
            case MCROrderEventType::RemoveSOOrderHold:
                return MCROrderEventSetup::find().RemoveSOOrderHold;
            case MCROrderEventType::AddSOFraudHold:
                return MCROrderEventSetup::find().AddSOFraudHold;
            case MCROrderEventType::RemoveSOFraudHold:
                return MCROrderEventSetup::find().RemoveSOFraudHold;

            // Write hold code event when order is onhold due to item cancellation.
            case MCROrderEventType::AddItemCancellationHold:
                return MCROrderEventSetup::find().AddSOOrderHold;

            //===========================================================
            // Drop shipment event
            //===========================================================
            case MCROrderEventType::CancelDropShipPO:
                return MCROrderEventSetup::find().CancelDropShipPO;
            case MCROrderEventType::CreateDropShipPO:
                return MCROrderEventSetup::find().CreateDropShipPO;
            case MCROrderEventType::DeliverDropShipPO:
                return MCROrderEventSetup::find().DeliverDropShipPO;
            case MCROrderEventType::ReleaseDropShipPO:
                return MCROrderEventSetup::find().ReleaseDropShipPO;

            //===========================================================
            // Sales order events
            //===========================================================
            case MCROrderEventType::CancelSalesOrder:
                return MCROrderEventSetup::find().CancelSalesOrder;
            case MCROrderEventType::DeleteSalesOrder:
                return MCROrderEventSetup::find().DeleteSalesOrder;
            case MCROrderEventType::CancelSalesOrderLine:
                return MCROrderEventSetup::find().CancelSalesOrderLine;
            case MCROrderEventType::CreateSalesOrder:
                return MCROrderEventSetup::find().CreateSalesOrder;
            case MCROrderEventType::ModifySLRequestedShipDate:
            case MCROrderEventType::ModifySLRequestedReceiptDate:
                return MCROrderEventSetup::find().ModifySLRequestedDates;
            case MCROrderEventType::ModifySLConfirmedShipDate:
            case MCROrderEventType::ModifySLConfirmedReceiptDate:
                return MCROrderEventSetup::find().ModifySLConfirmedDates;
            case MCROrderEventType::ModifySLDeliveryAddress:
                return MCROrderEventSetup::find().ModifySLDeliveryAddress;
            case MCROrderEventType::ModifySalesOrder:
                return MCROrderEventSetup::find().ModifySalesOrder;

            // Item Substitution
            case MCROrderEventType::AlternateItemUsed:
            case MCROrderEventType::AltItemUsedPicking:
            case MCROrderEventType::AltItemUsedWorkbench:
                return MCROrderEventSetup::find().AlternateItemUsed;

            //===========================================================
            // Price override events
            //===========================================================
            // Add continuity price override on and off events as well
            // These will work off of the setting for the sales line price
            // override turned on and off
            case MCROrderEventType::SalesLinePriceOverrideTurnedOn:
            case MCROrderEventType::SalesLinePriceOverrideTurnedOff:
            case MCROrderEventType::ContinuityCustLinePriceOverrideTurnedOn:
            case MCROrderEventType::ContinuityCustLinePriceOverrideTurnedOff:
                return MCROrderEventSetup::find().PriceOverride;

            // Sales order header price override (total discount %)
            case MCROrderEventType::SalesTablePriceOverrideTurnedOff:
            case MCROrderEventType::SalesTablePriceOverrideTurnedOn:
                return MCROrderEventSetup::find().SalesTablePriceOverride;

            //===========================================================
            // Gift certificate events
            //===========================================================
            case MCROrderEventType::VoidGiftCertificate:
            case MCROrderEventType::ReprintGiftCertificate:
                return true;

            //===========================================================
            // Misc Charge override events
            //===========================================================
            case MCROrderEventType::MiscChargeOverrideTurnedOn:
            case MCROrderEventType::MiscChargeOverrideTurnedOff:
            case MCROrderEventType::MiscChargeAdd:
                // if the flag to write line misc charge override is on and there is an invent
                // trans id assigned meaning it is being updated for a line.
                if (MCROrderEventSetup::find().LineMiscChargeOverride && this.InventTransId)
                {
                    return true;
                }
                
                // if the flag to write header misc charge override is on and there is not an invent
                // trans id assigned meaning it is being updated header.
                if (MCROrderEventSetup::find().HeaderMiscChargeOverride && !this.InventTransId)
                {
                    return true;
                }
                break;

            //===========================================================
            // FTC Processing
            //===========================================================
            case MCROrderEventType::FTCClockStarted:
            case MCROrderEventType::FTCClockStopped:
            case MCROrderEventType::FTCFirstNotification:
            case MCROrderEventType::FTCSecondNotification:
            case MCROrderEventType::FTCBackOrderCancellation:
                return MCROrderParameters::find().MCRftcProcessing;

            //===========================================================
            // FTC exempt enabled or disabled
            //===========================================================
            case MCROrderEventType::FTCExemptOn:
            case MCROrderEventType::FTCExemptOff:
                return MCROrderEventSetup::find().ftcExempt;

            //===========================================================
            // Expedite order/line events
            //===========================================================
            case MCROrderEventType::ExpediteOrderOff:
            case MCROrderEventType::ExpediteOrderOn:
                return MCROrderEventSetup::find().ExpediteOrder;
            case MCROrderEventType::ExpediteLineOff:
            case MCROrderEventType::ExpediteLineOn:
                return MCROrderEventSetup::find().ExpediteLine;

            //===========================================================
            // Return order events
            //===========================================================
            case MCROrderEventType::ModifyReturnOrder:
                return MCROrderEventSetup::find().ModifyReturnOrder;
            case MCROrderEventType::ReturnCreated:
                return MCROrderEventSetup::find().ReturnCreated;

            //===========================================================
            // payment events
            //===========================================================
            case MCROrderEventType::CheckHold:
            case MCROrderEventType::CheckHoldRelease:
                return MCROrderEventSetup::find().CheckHold;
            case MCROrderEventType::OverCreditLimit:
            case MCROrderEventType::OverCreditLimitRelease:
                return MCROrderEventSetup::find().OverCreditLimit;
            case MCROrderEventType::OverPayment:
            case MCROrderEventType::OverpaymentRelease:
            case MCROrderEventType::UnderPayment:
            case MCROrderEventType::UnderpaymentRelease:
                return MCROrderEventSetup::find().OverUnderpaid;

            //===========================================================
            // order credit events
            //===========================================================
            case MCROrderEventType::OrderCreditApplied:
            case MCROrderEventType::OrderCreditCreated:
                return MCROrderEventSetup::find().OrderCredits;
            case MCROrderEventType::PriceMatch:
                return MCROrderEventSetup::find().PriceMatch;

            //===========================================================
            // Sales quotation events
            //===========================================================
            case MCROrderEventType::SalesQuoteTablePriceOverrideTurnedOn:
            case MCROrderEventType::SalesQuoteTablePriceOverrideTurnedOff:
                return MCROrderEventSetup::find().SalesQuoteTablePriceOverride;
            case MCROrderEventType::SalesQuoteLinePriceOverrideTurnedOn:
            case MCROrderEventType::SalesQuoteLinePriceOverrideTurnedOff:
                return MCROrderEventSetup::find().SalesQuoteLinePriceOverride;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the user is set up to log this event.
    /// </summary>
    public void insert()
    {
        if (this.canLogEvent())
        {
            // Only find dimension if insertion will occur
            // Record the dimension for events related to sales/purch/quote orders/lines.
            if (this.SalesId)
            {
                SalesTable salesTable;
                SalesLine  salesLine;
                if (this.InventTransId)
                {
                    // Set dimension field to sales line's dimension field.
                    salesLine = SalesLine::findInventTransId(this.InventTransId);
                    salesTable = salesLine.salesTable();

                    this.DefaultDimension = salesLine.DefaultDimension;
                }
                else
                {
                    // Set dimension field to sales order's dimension field.
                    salesTable = SalesTable::find(this.SalesId);

                    this.DefaultDimension = salesTable.DefaultDimension;
                }
                super();
            }
            else if (this.PurchId)
            {
                if (this.InventTransId)
                {
                    // Set dimension field to purch line's dimension field.
                    this.DefaultDimension = PurchLine::findInventTransId(this.InventTransId).DefaultDimension;
                }
                else
                {
                    // Set dimension field to purch order's dimension field.
                    this.DefaultDimension = PurchTable::find(this.PurchId).DefaultDimension;
                }
                super();
            }
            else if (this.QuotationId)
            {
                if (this.InventTransId)
                {
                    // Set dimension field from quotation line
                    this.DefaultDimension = SalesQuotationLine::findInventTransId(this.InventTransId).DefaultDimension;
                }
                else
                {
                    // Set dimension field from quoatation table
                    this.DefaultDimension = SalesQuotationTable::find(this.QuotationId).DefaultDimension;
                }
                super();
            }
        }

        if (ASOHFeatureVisibilityManager::isEnabled())
        {
            if (ASOHInsertHoldCodeTransactionFlight::instance().isEnabled() && this.SalesId)
            {
                this.insertHoldCodeTransactions();
            }
            else
            {
                ASOHHoldEvent holdEvent = ASOHHoldEvent::firstHoldEventByEventType(this.MCROrderEventType);

                // If we find an event then insert a record for the table MCRHoldCodeTrans.
                if (holdEvent.RecId)
                {
                    MCRHoldCodeTrans holdTrans;

                    ttsbegin;
                    holdTrans.initValue();
                    holdTrans.MCRHoldCode = holdEvent.MCRHoldCode;
                    holdTrans.InventRefId = this.SalesId;
                    holdTrans.insert();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHoldCodeTransactions</Name>
				<Source><![CDATA[
    private void insertHoldCodeTransactions()
    {
        RecordInsertList recordList = new RecordInsertList(tableNum(MCRHoldCodeTrans));
        ASOHHoldEvent holdEvent;
        MCRHoldCodeTrans holdCodeTrans;
        while select MCRHoldCode from holdEvent
            where holdEvent.MCROrderEventType == this.MCROrderEventType
            notexists join holdCodeTrans
                where  holdCodeTrans.InventRefId == this.SalesId
                    && holdCodeTrans.MCRHoldCode == holdEvent.MCRHoldCode
                    && holdCodeTrans.MCRCleared  == NoYes::No
        {
            recordList = ASOHOrderManagement::initMCRHoldCodeTrans(recordList, holdEvent.MCRHoldCode, this.SalesId);

            if (this.MCROrderEventType == MCROrderEventType::CreateSalesOrder
                && !ASOHHoldRelatedDocument::firstDocByHoldCodeAndRelatedDoc(holdEvent.MCRHoldCode, ASOHRelatedDocuments::SalesOrderConfirmation).EnableDocument)
            {
                ASOHOrderManagement::SetStoppedFlag(this.SalesId, NoYes::No);
            }
        }
        
        recordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAlternateItemUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the alternate item used into the event table.
    /// </summary>
    /// <param name="_salesLine">
    /// The new sales line with the alternate item.
    /// </param>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_itemId">
    /// The itemId used on the sales line.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimensions used on the sales line.
    /// </param>
    /// <param name="_lineAmount">
    /// The line amount of the sales line.
    /// </param>
    public void insertAlternateItemUsed(SalesLine _salesLine,
            MCROrderEventType _mcrOrderEventType,
            ItemIdSmall _itemId,
            InventDimId _inventDimId,
            SalesLineAmount _lineAmount)
    {
        this.SalesId                    = _salesLine.SalesId;
        this.DeliveryDate               = _salesLine.deliveryDate();
        this.ReceiptDate                = _salesLine.receiptDate();
        this.InventTransId              = _salesLine.InventTransId;
        this.MCROrderEventType          = _mcrOrderEventType;
        this.ItemId                     = _itemId;
        this.ItemIdofAlternateItem      = _salesLine.ItemId;
        this.InventDimId                = _inventDimId;
        this.InventDimIdofAlternateItem = _salesLine.InventDimId;
        this.LineAmount                 = _lineAmount;
        this.LineAmountofAlternateItem  = _salesLine.LineAmount;
        this.setTableAndRecId(tableNum(SalesLine), _salesLine.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpediteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tracking fields for the expedite order event.
    /// </summary>
    /// <param name="_common">
    /// A record in the <c>SalesTable</c> or <c>SalesLine</c> table.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Erro if the method is called without a <c>SalesTable</c> or <c>SalesLine</c> record.
    /// </exception>
    public void insertExpediteEvent(Common _common)
    {
        SalesTable salesTable;
        SalesLine salesLine;

        switch (_common.TableId)
        {
            case tableNum(SalesTable):
                salesTable = _common;
                if (salesTable.mcrSalesTableShipping().Expedite)
                {
                    this.MCROrderEventType = MCROrderEventType::ExpediteOrderOn;
                }
                else
                {
                    this.MCROrderEventType = MCROrderEventType::ExpediteOrderOff;
                }
                this.SalesId = salesTable.SalesId;
                this.setTableAndRecId(tableNum(SalesTable), salesTable.RecId);

                break;

            case tableNum(SalesLine):
                salesLine = _common;
                if (salesLine.mcrSalesLine().Expedite)
                {
                    this.MCROrderEventType = MCROrderEventType::ExpediteLineOn;
                }
                else
                {
                    this.MCROrderEventType = MCROrderEventType::ExpediteLineOff;
                }
                this.SalesId = salesLine.SalesId;
                this.InventTransId = salesLine.InventTransId;
                this.setTableAndRecId(tableNum(SalesLine), salesLine.RecId);
                break;

            default:
                throw error(strFmt("@SYS19306", funcName()));
        }

        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromContinuityCustLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tracking fields for the continuity order event.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> related to this order event.
    /// </param>
    /// <param name="_orderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> related to this order event.
    /// </param>
    /// <param name="_originalValue">
    /// The original net amount value to be logged against this event.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code to be logged against this event.
    /// </param>
    /// <param name="_overrideValue">
    /// The new net amount value to be logged against this event.
    /// </param>
    /// <param name="_reasonCode">
    /// The override reason code value to be logged against this event.
    /// </param>
    /// <param name="_inventTransId">
    /// The transaction Id value to be logged against this event.
    /// </param>
    public void insertFromContinuityCustLine(SalesId _salesId,
                    MCROrderEventType _orderEventType,
                    UserId _userId,
                    real _originalValue,
                    CurrencyCode _currencyCode,
                    real _overrideValue,
                    RetailInformationSubcodeId _reasonCode = "",
                    InventTransId _inventTransId = "" )
    {
        this.SalesId                                = _salesId;
        this.MCROrderEventType                      = _orderEventType;
        this.MCRPriceMiscChargeOverrideReasonCode   = _reasonCode;
        this.PriceMiscChargeOverrideRetailInfocodeId = RetailMCRChannelTable::findForCurrentUser().MCRPriceOverrideRetailInfocodeId;
        this.MCROverrideUser                        = _userId;
        this.OverrideValue                          = _overrideValue;
        this.OriginalValue                          = _originalValue;
        this.OriginalValueCurrencyCode              = _currencyCode;
        this.InventTransId                          = _inventTransId;
        this.setTableAndRecId(tableNum(SalesTable), SalesTable::find(_salesId).RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tracking fields for the continuity order event.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> related to this order event.
    /// </param>
    /// <param name="_purchId">
    /// The <c>purchId</c> related to this order event.
    /// </param>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    public void insertFromDropShipment(SalesId _salesId,
                PurchId _purchId,
                MCROrderEventType _mcrOrderEventType )
    {
        this.MCROrderEventType  = _mcrOrderEventType;
        this.SalesId            = _salesId;
        this.PurchId            = _purchId;
        this.setTableAndRecId(tableNum(SalesTable), SalesTable::find(_salesId).RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromHoldCodeTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tracking fields for the hold code event.
    /// </summary>
    /// <param name="_mcrHoldCodeTrans">
    /// The hold code transaction record to be logged.
    /// </param>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    public void insertFromHoldCodeTrans(MCRHoldCodeTrans _mcrHoldCodeTrans,
                            MCROrderEventType _mcrOrderEventType)
    {
        SalesTable  salesTableRef;
        boolean     insert = true;

        this.MCROrderEventType  = _mcrOrderEventType;
        this.MCRHoldCode        = _mcrHoldCodeTrans.MCRHoldCode;
        this.MCRReasonCode      = _mcrHoldCodeTrans.MCRReasonCode;
        this.HoldClearDateTime  = _mcrHoldCodeTrans.MCRHoldClearDateTime;
        this.MCRComment         = _mcrHoldCodeTrans.MCRHoldCodeComment;
        this.MCROverrideUser    = _mcrHoldCodeTrans.MCRHoldUser;
        this.SalesId            = _mcrHoldCodeTrans.InventRefId;

        salesTableRef = SalesTable::find(_mcrHoldCodeTrans.InventRefId);

        this.DeliveryDate           = salesTableRef.DeliveryDate;
        this.ReceiptDate           = salesTableRef.receiptDate();
        this.MCRNewDeliveryAddress  = salesTableRef.deliveryAddressing();

        this.setTableAndRecId(tableNum(SalesTable), salesTableRef.RecId);

        if (insert)
        {
            if (this.validateWrite())
            {
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromQualityPackageCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from quality
    /// package check module.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> related to this order event.
    /// </param>
    /// <param name="_orderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_userId">
    /// The <c>userId</c> performing the action.
    /// </param>
    /// <param name="_reason">
    /// The reason why the action was taken.
    /// </param>
    public void insertFromQualityPackageCheck(SalesId _salesId,
                    MCROrderEventType _orderEventType,
                    UserId _userId,
                    MCRComment _reason = "")
    {
        SalesTable salesTableLocal;

        this.SalesId            = _salesId;
        this.MCROverrideUser    = _userId;
        this.MCROrderEventType  = _orderEventType;

        salesTableLocal = SalesTable::find(_salesId);

        this.DeliveryDate       = salesTableLocal.DeliveryDate;
        this.ReceiptDate        = salesTableLocal.receiptDate();
        this.MCRComment         = _reason;
        this.setTableAndRecId(tableNum(SalesTable), salesTableLocal.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> related to this order event.
    /// </param>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_salesLine_Orig">
    /// The original <c>SalesLine</c> record related to this order event.
    /// </param>
    public void insertFromSalesLine(SalesLine  _salesLine,
                    MCROrderEventType   _mcrOrderEventType,
                    SalesLine           _salesLine_Orig = _salesLine)
    {
        this.SalesId                        = _salesLine.SalesId;
        this.InventTransId                  = _salesLine.InventTransId;
        this.MCROrderEventType              = _mcrOrderEventType;
        this.DeliveryDate                   = _salesLine.deliveryDate();
        this.ReceiptDate                    = _salesLine.receiptDate();
        this.MCRNewDeliveryAddress          = _salesLine.deliveryAddress().address;
        this.MCROrigDeliveryAddress         = _salesLine_Orig.deliveryAddress().address;
        this.OriginalOrderCreator           = _salesLine.salesTable().CreatedBy;

        this.initBasedOnMCROrderEventType(_mcrOrderEventType, _salesLine, _salesLine_Orig);

        // No need to follow up on changes done by the same user.
        if (this.MCROverrideUser && this.MCROverrideUser == this.OriginalOrderCreator)
        {
            this.IsInvestigatedByUser = NoYes::Yes;
        }

        this.setTableAndRecId(tableNum(SalesLine), _salesLine.RecId);

        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBasedOnMCROrderEventType</Name>
				<Source><![CDATA[
    protected void initBasedOnMCROrderEventType(MCROrderEventType _mcrOrderEventType, SalesLine _salesLine, SalesLine _salesLine_Orig)
    {
        switch (_mcrOrderEventType)
        {
            case MCROrderEventType::ModifySLRequestedShipDate:
                this.OriginalDateValue = _salesLine_Orig.ShippingDateRequested;
                this.OverrideDateValue = _salesLine.ShippingDateRequested;
                this.MCROverrideUser = curUserId();
                break;

            case MCROrderEventType::ModifySLRequestedReceiptDate:
                this.OriginalDateValue = _salesLine_Orig.ReceiptDateRequested;
                this.OverrideDateValue = _salesLine.ReceiptDateRequested;
                this.MCROverrideUser = curUserId();
                break;

            case MCROrderEventType::ModifySLConfirmedShipDate:
                this.OriginalDateValue = _salesLine_Orig.ShippingDateConfirmed;
                this.OverrideDateValue = _salesLine.ShippingDateConfirmed;
                this.MCROverrideUser = curUserId();
                break;

            case MCROrderEventType::ModifySLConfirmedReceiptDate:
                this.OriginalDateValue = _salesLine_Orig.ReceiptDateConfirmed;
                this.OverrideDateValue = _salesLine.ReceiptDateConfirmed;
                this.MCROverrideUser = curUserId();
                break;

            case MCROrderEventType::SalesLinePriceOverrideTurnedOn:
                this.OriginalValue = _salesLine_Orig.SalesPrice;
                this.OverrideValue = _salesLine.SalesPrice;
                this.MCROverrideUser = curUserId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromSalesQuoteLinePriceOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales quotation line price override.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> related to this order event.
    /// </param>
    /// <param name="_eventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> related to this order event.
    /// </param>
    /// <param name="_originalValue">
    /// The original net amount value to be logged against this event.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code to be logged against this event.
    /// </param>
    /// <param name="_overrideValue">
    /// The new net amount value to be logged against this event.
    /// </param>
    /// <param name="_reasonCode">
    /// The override reason code value to be logged against this event.
    /// </param>
    /// <param name="_inventTransId">
    /// The transaction Id value to be logged against this event.
    /// </param>
    public void insertFromSalesQuoteLinePriceOverride(SalesQuotationLine          _salesQuotationLine,
                    MCROrderEventType            _eventType,
                    UserId                      _userId,
                    real                        _originalValue,
                    CurrencyCode                _currencyCode,
                    real                        _overrideValue,
                    RetailInformationSubcodeId  _reasonCode,
                    InventTransId               _inventTransId)
    {
        if (!(_eventType == MCROrderEventType::SalesQuoteLinePriceOverrideTurnedOn
            || _eventType == MCROrderEventType::SalesQuoteLinePriceOverrideTurnedOff))
        {
            error("@MCR11997");
            return;
        }
        this.QuotationId                = _salesQuotationLine.QuotationId;
        this.ItemId                     = _salesQuotationLine.ItemId;
        this.MCROrderEventType          = _eventType;
        this.MCRPriceOverrideReasonCode = _reasonCode;
        this.PriceOverrideRetailInfocodeId = RetailMCRChannelTable::findForCurrentUser().MCRPriceOverrideRetailInfocodeId;
        this.MCROverrideUser            = _userId;
        this.OverrideValue              = _overrideValue;
        this.OriginalValue              = _originalValue;
        this.OriginalValueCurrencyCode  = _currencyCode;
        this.InventTransId              = _inventTransId;
        this.setTableAndRecId(tableNum(SalesQuotationLine), _salesQuotationLine.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromSalesQuoteTablePriceOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales quotation table price override.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// The <c>SalesQuotationTable</c> related to this order event.
    /// </param>
    /// <param name="_eventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_reasonCode">
    /// The override reason code value to be logged against this event.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> related to this order event.
    /// </param>
    /// <param name="_oldDiscPct">
    /// The <c>SalesEndDiscPct</c> related to this order event.
    /// </param>
    public void insertFromSalesQuoteTablePriceOverride(SalesQuotationTable         _salesQuotationTable,
                        MCROrderEventType           _eventType,
                        RetailInformationSubcodeId  _reasonCode,
                        UserId                      _userId,
                        SalesEndDiscPct             _oldDiscPct)
    {
        if (!(_eventType == MCROrderEventType::SalesQuoteTablePriceOverrideTurnedOn
            || _eventType == MCROrderEventType::SalesQuoteTablePriceOverrideTurnedOff))
        {
            error("@MCR11997");
            return;
        }

        this.MCROrderEventType          = _eventType;
        this.QuotationId                = _salesQuotationTable.QuotationId;
        this.MCRPriceOverrideReasonCode = _reasonCode;
        this.PriceOverrideRetailInfocodeId = RetailMCRChannelTable::findForCurrentUser().MCRPriceOverrideRetailInfocodeId;
        this.MCROverrideUser            = _userId;
        this.OriginalValue              = _oldDiscPct;
        this.OverrideValue              = _salesQuotationTable.DiscPercent;
        this.OriginalValueCurrencyCode  = _salesQuotationTable.CurrencyCode;
        this.setTableAndRecId(tableNum(SalesQuotationTable), _salesQuotationTable.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales table.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> related to this order event.
    /// </param>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_salesTable_Orig">
    /// The original <c>SalesTable</c> record related to this order event.
    /// </param>
    public void insertFromSalesTable(   SalesTable          _salesTable,
                                        MCROrderEventType   _mcrOrderEventType,
                                        SalesTable          _salesTable_Orig = _salesTable)
    {
        this.MCROrderEventType              = _mcrOrderEventType;
        // set the Order Status
        this.SalesId                        = _salesTable.SalesId;
        this.DeliveryDate                   = _salesTable.DeliveryDate;
        this.ReceiptDate                    = _salesTable.receiptDate();
        this.MCRNewDeliveryAddress          = _salesTable.deliveryAddressing();
        this.MCROrigDeliveryAddress         = _salesTable_Orig.deliveryAddressing();
        this.setTableAndRecId(tableNum(SalesTable), _salesTable.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromSalesTablePriceOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales line price override.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> related to this order event.
    /// </param>
    /// <param name="_eventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_reasonCode">
    /// The override reason code value to be logged against this event.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> related to this order event.
    /// </param>
    /// <param name="_oldDiscPct">
    /// The <c>SalesEndDiscPct</c> related to this order event.
    /// </param>
    public void insertFromSalesTablePriceOverride(SalesTable                  _salesTable,
                        MCROrderEventType            _eventType,
                        RetailInformationSubcodeId   _reasonCode,
                        UserId                      _userId,
                        SalesEndDiscPct             _oldDiscPct)
    {
        if (!(_eventType == MCROrderEventType::SalesTablePriceOverrideTurnedOn
            || _eventType == MCROrderEventType::SalesTablePriceOverrideTurnedOff))
        {
            error("@MCR11997");
            return;
        }

        this.MCROrderEventType          = _eventType;
        this.SalesId                    = _salesTable.SalesId;
        this.MCRPriceOverrideReasonCode = _reasonCode;
        this.PriceOverrideRetailInfocodeId = RetailMCRChannelTable::findForCurrentUser().MCRPriceOverrideRetailInfocodeId;
        this.MCROverrideUser            = _userId;
        this.OriginalValue              = _oldDiscPct;
        this.OverrideValue              = _salesTable.DiscPercent;
        this.setTableAndRecId(tableNum(SalesTable), _salesTable.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromWarehouseBackorder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an order event during quality checking if an item
    /// was found to be on warehouse backorder.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line in use at the time.
    /// </param>
    /// <param name="_orderEventType">
    /// The type order event.
    /// </param>
    public void insertFromWarehouseBackorder(SalesLine _salesLine, MCROrderEventType _orderEventType)
    {
        this.SalesId            = _salesLine.SalesId;
        this.InventTransId      = _salesLine.InventTransId;
        this.MCROrderEventType  = _orderEventType;
        this.setTableAndRecId(tableNum(SalesLine), _salesLine.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFTCEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an order event of type FTC, and sets the <c>FTCActive</c> flag to Yes.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> of the salesLine being processed.
    /// </param>
    /// <param name="_eventType">
    /// The type of order event.
    /// </param>
    /// <param name="_daysFromStart">
    /// Indicated when the FTC event was run.
    /// </param>
    public void insertFTCEvent( SalesId             _salesId,
                                MCROrderEventType   _eventType,
                                MCRDaysFromStart    _daysFromStart = 0)
    {
        this.FTCActive = NoYes::Yes;
        switch (_eventType)
        {
            case MCROrderEventType::FTCBackOrderCancellation:
            case MCROrderEventType::FTCFirstNotification:
            case MCROrderEventType::FTCSecondNotification:
                this.ftcDaysFromStart = _daysFromStart;
                break;

            // 'Days from start' should always be 0 for any clock event.
            case MCROrderEventType::FTCClockStarted:
            case MCROrderEventType::FTCClockStopped:
                this.ftcDaysFromStart = 0;
                break;

            // Handle the FTC ecempt flag order event
            case MCROrderEventType::FTCExemptOn:
                break;

            case MCROrderEventType::FTCExemptOff:
                this.FTCActive = NoYes::No;
                break;

            default:
                throw error(strFmt("@MCR10769", funcName()));
        }

        this.SalesId            = _salesId;
        this.MCROrderEventType  = _eventType;
        this.setTableAndRecId(tableNum(SalesTable), SalesTable::find(_salesId).RecId);

        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOOBEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales line backorder.
    /// </summary>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> related to this order event.
    /// </param>
    /// <param name="_description">
    /// The description related to this order event.
    /// </param>
    public void insertOOBEvent( MCROrderEventType       _mcrOrderEventType,
                                SalesTable              _salesTable,
                                MCRString300            _description = "")
    {
        this.MCROrderEventType  = _mcrOrderEventType;
        this.SalesId            = _salesTable.SalesId;
        this.EventDescription   = _description;
        this.setTableAndRecId(_salesTable.TableId, _salesTable.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrderCreditEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales order credit.
    /// </summary>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> related to this order event.
    /// </param>
    /// <param name="_description">
    /// The description related to this order event.
    /// </param>
    /// <param name="_retailInformationSubcodeId">
    /// The <c>RetailInformationSubcodeId</c> related to this order event.
    /// </param>
    public void insertOrderCreditEvent( MCROrderEventType       _mcrOrderEventType,
                                        SalesTable              _salesTable,
                                        MCRString300            _description = "",
                                        RetailInformationSubcodeId _retailInformationSubcodeId = "")
    {
        this.MCROrderEventType  = _mcrOrderEventType;
        this.SalesId            = _salesTable.SalesId;
        this.EventDescription   = _description;
        this.MCROMCReasonCode   = _retailInformationSubcodeId;
        this.RetailInfocodeId   = RetailMCRChannelTable::findForCurrentUser().MCRPriceOverrideRetailInfocodeId;
        this.setTableAndRecId(tableNum(SalesTable), _salesTable.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPaymentEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales order payment.
    /// </summary>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_mcrPaymTable">
    /// The <c>MCRCustPaymTable</c> related to this order event.
    /// </param>
    /// <param name="_description">
    /// The description related to this order event.
    /// </param>
    public void insertPaymentEvent(MCROrderEventType    _mcrOrderEventType,
                    MCRCustPaymTable     _mcrPaymTable,
                    MCRString300         _description = "")
    {
        this.MCROrderEventType  = _mcrOrderEventType;
        this.SalesId            = _mcrPaymTable.displaySalesId();
        this.EventDescription   = _description;
        this.setTableAndRecId(tableNum(MCRCustPaymTable), _mcrPaymTable.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPriceChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the sales order price change.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> related to this order event.
    /// </param>
    /// <param name="_orderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_userId">
    /// The <c>UserId</c> related to this order event.
    /// </param>
    /// <param name="_originalValue">
    /// The original net amount value to be logged against this event.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code to be logged against this event.
    /// </param>
    /// <param name="_overrideValue">
    /// The new net amount value to be logged against this event.
    /// </param>
    /// <param name="_reasonCode">
    /// The override reason code value to be logged against this event.
    /// </param>
    /// <param name="_inventTransId">
    /// The transaction Id value to be logged against this event.
    /// </param>
    public void insertPriceChange(SalesId             _salesId,
                    MCROrderEventType           _orderEventType,
                    UserId                      _userId,
                    real                        _originalValue,
                    CurrencyCode                _currencyCode,
                    real                        _overrideValue,
                    RetailInformationSubcodeId  _reasonCode = "",
                    InventTransId               _inventTransId = "")
    {
        this.SalesId                                = _salesId;
        this.MCROrderEventType                      = _orderEventType;
        this.MCRPriceMiscChargeOverrideReasonCode   = _reasonCode;
        this.PriceOverrideRetailInfocodeId          = RetailMCRChannelTable::findForCurrentUser().MCRPriceOverrideRetailInfocodeId;
        this.MCROverrideUser                        = _userId;
        this.OverrideValue                          = _overrideValue;
        this.OriginalValue                          = _originalValue;
        this.OriginalValueCurrencyCode              = _currencyCode;
        this.InventTransId                          = _inventTransId;
        this.setTableAndRecId(tableNum(SalesTable), SalesTable::find(_salesId).RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReturnEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the order return.
    /// </summary>
    /// <param name="_mcrOrderEventType">
    /// The type of order event being created.
    /// </param>
    /// <param name="_salesTableReturn">
    /// The <c>SalesTable</c> related to this order event.
    /// </param>
    public void insertReturnEvent(MCROrderEventType _mcrOrderEventType, SalesTable _salesTableReturn)
    {
        this.SalesId            = _salesTableReturn.SalesId;
        this.MCROrderEventType  = _mcrOrderEventType;
        this.setTableAndRecId(tableNum(SalesTable), _salesTableReturn.RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesIdEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts order events that occur from the order return.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> related to this order event.
    /// </param>
    /// <param name="_eventType">
    /// The type of order event being created.
    /// </param>
    public void insertSalesIdEventType(SalesId _salesId, MCROrderEventType _eventType)
    {
        this.SalesId            = _salesId;
        this.MCROrderEventType  = _eventType;
        this.setTableAndRecId(tableNum(SalesTable), SalesTable::find(_salesId).RecId);
        if (this.validateWrite())
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayAlternateConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the configuration Id for the alternate item.
    /// </summary>
    /// <returns>
    /// Configuration Id for the alternate item.
    /// </returns>
    public display EcoResConfigurationName mcrDisplayAlternateConfigId()
    {
        return InventDim::find(this.InventDimIdofAlternateItem).ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayAlternateInventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the color Id for the alternate item.
    /// </summary>
    /// <returns>
    /// Color Id for the alternate item.
    /// </returns>
    public display EcoResItemColorName mcrDisplayAlternateInventColorId()
    {
        return InventDim::find(this.InventDimIdofAlternateItem).InventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayAlternateInventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the version Id for the alternate item.
    /// </summary>
    /// <returns>
    /// Version Id for the alternate item.
    /// </returns>
    public display EcoResItemVersionName mcrDisplayAlternateInventVersionId()
    {
        return InventDim::find(this.InventDimIdofAlternateItem).InventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayAlternateInventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the size Id for the alternate item.
    /// </summary>
    /// <returns>
    /// Size Id for the alternate item.
    /// </returns>
    public display EcoResItemSizeName mcrDisplayAlternateInventSizeId()
    {
        return InventDim::find(this.InventDimIdofAlternateItem).InventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the configuration Id for the main item.
    /// </summary>
    /// <returns>
    /// Configuration Id for the main item.
    /// </returns>
    public display EcoResConfigurationName mcrDisplayConfigId()
    {
        return InventDim::find(this.InventDimId).ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayHoldReasonCodeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the hold reason code description.
    /// </summary>
    /// <returns>
    /// Hold reason code description for a given inof code Id.
    /// </returns>
    public display Description mcrDisplayHoldReasonCodeDescription()
    {
        return (RetailInformationSubcodeTable::find(this.RetailInfocodeId,this.MCRReasonCode).displaySubcodeDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayInventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the color Id for the main item.
    /// </summary>
    /// <returns>
    /// Color Id for the main item.
    /// </returns>
    public display EcoResItemColorName mcrDisplayInventColorId()
    {
        return InventDim::find(this.InventDimId).InventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayInventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the version Id for the main item.
    /// </summary>
    /// <returns>
    /// Version Id for the main item.
    /// </returns>
    public display EcoResItemVersionName mcrDisplayInventVersionId()
    {
        return InventDim::find(this.InventDimId).InventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayInventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the size Id for the main item.
    /// </summary>
    /// <returns>
    /// Size Id for the main item.
    /// </returns>
    public display EcoResItemSizeName mcrDisplayInventSizeId()
    {
        return InventDim::find(this.InventDimId).InventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableAndRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the table reference and record reference Id.
    /// </summary>
    /// <param name="_refTableId">
    /// TableId to set.
    /// </param>
    /// <param name="_refRecId">
    /// RecId to set.
    /// </param>
    void setTableAndRecId(TableId _refTableId, RecId _refRecId)
    {
        this.RefTableId = _refTableId;
        this.RefRecId   = _refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && RetailInformationSubcodeTable::mcrValidate(this.RetailInfocodeId,this.MCRReasonCode);

        ret = ret && RetailInformationSubcodeTable::mcrValidate(this.PriceOverrideRetailInfocodeId,this.MCRPriceOverrideReasonCode);

        ret = ret && RetailInformationSubcodeTable::mcrValidate(this.PriceMiscChargeOverrideRetailInfocodeId,this.MCRPriceMiscChargeOverrideReasonCode);

        ret = ret && RetailInformationSubcodeTable::mcrValidate(this.OMCRetailInfocodeId,this.MCROMCReasonCode);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIdEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the order event of the passed in type and <c>salesId</c>.
    /// </summary>
    /// <param name="salesId">
    /// The <c>salesId</c> of the order type to find.
    /// </param>
    /// <param name="_orderEventType">
    /// The order event type of the event to find.
    /// </param>
    /// <returns>
    /// The order event record of the passed in type and <c>salesId</c>.
    /// </returns>
    public static MCROrderEventTable findIdEventType(SalesId   salesId,
                                        MCROrderEventType _orderEventType)
    {
        MCROrderEventTable  orderEventTable;

        if (salesId)
        {
            select firstonly orderEventTable
                where orderEventTable.SalesId == salesId
                    && orderEventTable.MCROrderEventType == _orderEventType;
        }

        return orderEventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentFTCClockStartEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the most recent 'FTC clock started' event for a given sales order
    /// according to the created date field.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> of the order event to find.
    /// </param>
    /// <param name="_forUpdate">
    /// Specifies whether to mark the found record for update.
    /// </param>
    /// <returns>
    /// The order event record with the most recent FTC clock started event.
    /// </returns>
    public static MCROrderEventTable findMostRecentFTCClockStartEvent(SalesId _salesId,
                                                                boolean _forUpdate = false)
    {
        MCROrderEventTable orderEventTable;
        if (_salesId)
        {
            orderEventTable.selectForUpdate(_forUpdate);
            select firstonly orderEventTable
                order by CreatedDateTime desc, RecId desc
                where orderEventTable.SalesId == _salesId
                    && orderEventTable.MCROrderEventType == MCROrderEventType::FTCClockStarted
                    && orderEventTable.FTCActive == NoYes::Yes;
        }
        return orderEventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentFTCEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the most recent FTC event according to the created date field tied to
    /// a sales order.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> of the order event to find.
    /// </param>
    /// <param name="_forUpdate">
    /// Specifies whether to mark the found record for update.
    /// </param>
    /// <returns>
    /// The order event record with the most recent FTC event tied to the specified sales ID.
    /// </returns>
    public static MCROrderEventTable findMostRecentFTCEvent(SalesId _salesId, boolean _forUpdate = false)
    {
        MCROrderEventTable orderEventTable;

        if (_salesId)
        {
            orderEventTable.selectForUpdate(_forUpdate);
            select firstonly orderEventTable
                order by CreatedDateTime desc, RecId desc, ftcDaysFromStart desc
                where orderEventTable.SalesId == _salesId
                    && (orderEventTable.MCROrderEventType == MCROrderEventType::FTCBackOrderCancellation
                    || orderEventTable.MCROrderEventType == MCROrderEventType::FTCClockStarted
                    || orderEventTable.MCROrderEventType == MCROrderEventType::FTCClockStopped
                    || orderEventTable.MCROrderEventType == MCROrderEventType::FTCFirstNotification
                    || orderEventTable.MCROrderEventType == MCROrderEventType::FTCSecondNotification)
                    && orderEventTable.FTCActive == NoYes::Yes;
        }
        return orderEventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTheMostRecentFTCClockEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the latest clock event for the given sales order.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> of the order event to find.
    /// </param>
    /// <param name="_forUpdate">
    /// Specifies whether to mark the found record for update.
    /// </param>
    /// <returns>
    /// The latest clock event - be it started or stopped for the given salesId.
    /// </returns>
    public static MCROrderEventTable findTheMostRecentFTCClockEvent(SalesId _salesId,
                                                        boolean _forUpdate = false)
    {
        MCROrderEventTable orderEventTable;
        if (_salesId)
        {
            orderEventTable.selectForUpdate(_forUpdate);
            select firstonly orderEventTable
                order by CreatedDateTime desc, RecId desc
                where orderEventTable.SalesId == _salesId
                    && (MCROrderEventType::FTCClockStarted
                    || MCROrderEventType::FTCClockStopped);
        }
        return orderEventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDaysSinceCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of days since the last
    /// event of the specified type was created.
    /// </summary>
    /// <param name="_refRecId">
    /// The referenced record ID on the order event to be found.
    /// </param>
    /// <param name="_eventType">
    /// The order event type to be found.
    /// </param>
    /// <returns>
    /// The number of days since the creation of the order event.  If events are not being tracked then 0 is returend.
    /// </returns>
    /// <remarks>
    /// Uses the orders event to determine how long
    /// it has been since the event was logged.
    /// </remarks>
    public static Integer getDaysSinceCreation(RecId _refRecId, MCROrderEventType _eventType)
    {
        Integer daysSince = 0;
        MCROrderEventTable mcrOrderEventTable;

        select firstonly RecId , CreatedDateTime from mcrOrderEventTable
            order by CreatedDateTime
            where mcrOrderEventTable.RefRecId == _refRecId
                && mcrOrderEventTable.MCROrderEventType == _eventType;

        if (mcrOrderEventTable)
        {
            daysSince = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - DateTimeUtil::date(mcrOrderEventTable.CreatedDateTime);
            return daysSince;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markFTCEventsAsInactive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deactivates the FTC order events.
    /// </summary>
    /// <param name="_tableGroupAll">
    /// TableGroupAll::All:       Inactivate all records. _salesId and _custAccount parameters are ignored.
    /// TableGroupAll::GroupId:  Inactivate all records related to the specified customer.
    /// TableGroupAll::Table: Inactivate all records related to the specified sales order.  _custAccount parameter is ignored.
    /// </param>
    /// <param name="_custAccount">
    /// When the _tableGroupAll parameter is TableGroupAll::GroupId, only events tied to sales orders with the specified _custAccount will be updated.
    /// </param>
    /// <param name="_salesId">
    /// When the _tableGroupAll parameter is TableGroupAll::GroupId or TableGroupAll::Table, order events with salesId equal to the parameter _salesId will be updated.
    /// </param>
    public static void markFTCEventsAsInactive(TableGroupAll _tableGroupAll,
                                CustAccount _custAccount = "",
                                SalesId _salesId = "")
    {
        MCROrderEventTable orderEventTable;
        SalesTable salesTable;

        if (_tableGroupAll == TableGroupAll::All)
        {
            update_recordset orderEventTable
                setting ftcActive = NoYes::No;
        }
        else if (_tableGroupAll == TableGroupAll::GroupId)
        {
            while select SalesId from salesTable
                    where salesTable.CustAccount == _custAccount
            {
                update_recordset orderEventTable
                    setting ftcActive = NoYes::No
                        where orderEventTable.SalesId == salesTable.SalesId;
            }
        }
        else if (_tableGroupAll == TableGroupAll::Table)
        {
            update_recordset orderEventTable
                setting ftcActive = NoYes::No
                    where orderEventTable.SalesId == _salesId;
        }
        else
        {
            throw error(strFmt("@MCR10769", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldClockStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the clock should start if the clock was never started or
    /// if it was started but the most recent event is stopped.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> of the sales order being evaluated.
    /// </param>
    /// <returns>
    /// true if the FTC clock should start; false otherwise.
    /// </returns>
    public static boolean shouldClockStart(SalesId _salesId)
    {
        MCROrderEventTable clockStarted;
        MCROrderEventTable recentClockEvent;

        clockStarted        = MCROrderEventTable::findIdEventType(_salesId, MCROrderEventType::FTCClockStarted);
        recentClockEvent    = MCROrderEventTable::findTheMostRecentFTCClockEvent(_salesId, false);

        if (clockStarted.MCROrderEventType != MCROrderEventType::FTCClockStarted
            || (clockStarted.MCROrderEventType == MCROrderEventType::FTCClockStarted
            && recentClockEvent.MCROrderEventType == MCROrderEventType::FTCClockStopped))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldClockStop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates that the clock should be stopped if the clock was never stopped
    /// if it was started but the most recent event is not stopped.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>salesId</c> of the sales order being evaluated.
    /// </param>
    /// <returns>
    /// true if the FTC clock should stop; otherwise false.
    /// </returns>
    public static boolean shouldClockStop(SalesId _salesId)
    {
        MCROrderEventTable clockStopped;
        MCROrderEventTable clockStarted;
        MCROrderEventTable recentClockEvent;

        clockStopped = MCROrderEventTable::findIdEventType(_salesId, MCROrderEventType::FTCClockStopped);
        clockStarted = MCROrderEventTable::findIdEventType(_salesId, MCROrderEventType::FTCClockStarted);
        recentClockEvent = MCROrderEventTable::findTheMostRecentFTCClockEvent(_salesId, false);

        if (clockStarted.MCROrderEventType == MCROrderEventType::FTCClockStarted
            && recentClockEvent.MCROrderEventType != MCROrderEventType::FTCClockStopped)
        {
            return true;
        }
     
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeToInvestigatedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Markes the specified order event table record as user investigated.
    /// </summary>
    /// <param name = "_orderEventTableRecId">A specified reference to the <c>MCROrderEventTable</c> table.</param>
    public static void changeToInvestigatedByUser(MCROrderEventTableRecId _orderEventTableRecId)
    {
        MCROrderEventTable orderEventTable;

        ttsbegin;

        update_recordset orderEventTable
        setting IsInvestigatedByUser = NoYes::Yes
        where orderEventTable.RecId == _orderEventTableRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventTypeNotificationDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives a user friendly notification event description based on the current event type.
    /// </summary>
    /// <returns>A user friendly notification event description based on the current event type.</returns>
    public display MCRComment eventTypeNotificationDescription()
    {
        str notificationLabel;

        switch (this.MCROrderEventType)
        {
            case MCROrderEventType::ModifySLRequestedReceiptDate:
                notificationLabel = "@SCM:NewRequestedReceiptDate";
                break;

            case MCROrderEventType::ModifySLRequestedShipDate:
                notificationLabel = "@SCM:NewRequestedShipDate";
                break;

            case MCROrderEventType::ModifySLConfirmedReceiptDate:
                notificationLabel = "@SCM:NewConfirmedReceiptDate";
                break;

            case MCROrderEventType::ModifySLConfirmedShipDate:
                notificationLabel = "@SCM:NewConfirmedShippingDate";
                break;
        }

        return notificationLabel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@MCR10274</DeveloperDocumentation>
	<FormRef>MCROrderEventTable</FormRef>
	<Label>@MCR10274</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SalesId</TitleField1>
	<TitleField2>MCRHoldCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROrderEventType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCodeUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROrigDeliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRNewDeliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROverrideUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPriceOverrideReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPriceMiscChargeOverrideReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalValueCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FTCDaysFromStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FTCActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdofAlternateItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdofAlternateItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmountofAlternateItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldClearDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROrderEventType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRHoldCodeUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROrigDeliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRNewDeliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROverrideUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPriceOverrideReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPriceMiscChargeOverrideReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalValueCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FTCDaysFromStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FTCActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemIdofAlternateItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdofAlternateItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmountofAlternateItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EventDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROMCReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HoldClearDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OMCRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceMiscChargeOverrideRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceOverrideRetailInfocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalDateValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideDateValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalOrderCreator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsInvestigatedByUser</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustomerIssues</Name>
			<Label>@MCR11029</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCROrderEventType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS81213</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EventDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRString300</ExtendedDataType>
			<Label>@MCR10340</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FTCActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRActive</ExtendedDataType>
			<Label>@MCR12706</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FTCDaysFromStart</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRDaysFromStart</ExtendedDataType>
			<Label>@MCR12444</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>HoldClearDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRHoldClearDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Label>@MCR22994</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdofAlternateItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@MCR22995</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemIdofAlternateItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<Label>@MCR22993</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmountofAlternateItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesLineAmount</ExtendedDataType>
			<Label>@MCR22996</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRHoldCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRHoldCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRHoldCodeUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRNewDeliveryAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<Label>@MCR10502</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCROMCReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInformationSubcodeId</ExtendedDataType>
			<Label>@SYS63086</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MCROrderEventType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>MCROrderEventType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCROrigDeliveryAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<Label>@MCR10508</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCROverrideUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SCM:ModifiedBy</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRPriceMiscChargeOverrideReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInformationSubcodeId</ExtendedDataType>
			<Label>@MCR10833</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRPriceOverrideReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInformationSubcodeId</ExtendedDataType>
			<Label>@MCR10833</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCRReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInformationSubcodeId</ExtendedDataType>
			<Label>@MCR10280</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OMCRetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
			<Label>@MCR10801</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalValueCurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverrideValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Label>@MCR10804</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceMiscChargeOverrideRetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceOverrideRetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQuotationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailInfocodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OriginalDateValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SCM:OrderEventOriginalDateValue</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OverrideDateValue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SCM:OrderEventOverrideDateValue</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalOrderCreator</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SCM:OrderEventOriginalOrderCreator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsInvestigatedByUser</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SCM:OrderEventIsInvesigatedByUser</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesReceiptDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QuotationIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecVersion</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCROrderEventTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MCROrderEventType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsInvestigatedByUser</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdofAlternateItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemIdofAlternateItem</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OriginalValueCurrencyCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OriginalValueCurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MCRHoldCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MCRHoldCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginalValueCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>OriginalValueCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustCreditReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInformationSubcodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustCreditReasonCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RetailInformationSubcodeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCROMCReasonCode</Name>
					<SourceEDT>RetailInformationSubcodeId</SourceEDT>
					<Field>MCROMCReasonCode</Field>
					<RelatedField>subcodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OMCRetailInfocodeId</Name>
					<SourceEDT>RetailInfocodeId</SourceEDT>
					<Field>OMCRetailInfocodeId</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimIdofAlternateItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDimIdofAlternateItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventDim</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdofAlternateItem</Name>
					<Field>InventDimIdofAlternateItem</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ItemdOfAlternateItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItemIDOfAlternateItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemIdofAlternateItem</Name>
					<SourceEDT>ItemIdSmall</SourceEDT>
					<Field>ItemIdofAlternateItem</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ItemId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItemId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemIdSmall</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MarkupTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRHoldCodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRHoldCodeTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRHoldCode</Name>
					<SourceEDT>MCRHoldCode</SourceEDT>
					<Field>MCRHoldCode</Field>
					<RelatedField>MCRHoldCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>MCRHoldCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceOverrideMiscChargeReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInformationSubcodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceOverrideMiscChargeReasonCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RetailInformationSubcodeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRPriceMiscChargeOverrideReasonCode</Name>
					<SourceEDT>RetailInformationSubcodeId</SourceEDT>
					<Field>MCRPriceMiscChargeOverrideReasonCode</Field>
					<RelatedField>subcodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceMiscChargeOverrideRetailInfocodeId</Name>
					<SourceEDT>RetailInfocodeId</SourceEDT>
					<Field>PriceMiscChargeOverrideRetailInfocodeId</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceOverrideReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInformationSubcodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceOverrideReasonCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RetailInformationSubcodeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceOverrideRetailInfocodeId</Name>
					<SourceEDT>RetailInfocodeId</SourceEDT>
					<Field>PriceOverrideRetailInfocodeId</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRPriceOverrideReasonCode</Name>
					<SourceEDT>RetailInformationSubcodeId</SourceEDT>
					<Field>MCRPriceOverrideReasonCode</Field>
					<RelatedField>subcodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>QuotationId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationId</Name>
					<Field>QuotationId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>QuotationType_Extern</Name>
					<RelatedField>QuotationType</RelatedField>
					<ValueStr>QuotationType::Sales</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailInformationSubcodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RetailInformationSubcodeTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MCRReasonCode</Name>
					<SourceEDT>RetailInformationSubcodeId</SourceEDT>
					<Field>MCRReasonCode</Field>
					<RelatedField>subcodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailInfocodeId</Name>
					<SourceEDT>RetailInfocodeId</SourceEDT>
					<Field>RetailInfocodeId</Field>
					<RelatedField>infocodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>