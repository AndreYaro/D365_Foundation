<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqItemTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqItemTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allCovDimSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all the coverage dimensions have been specified.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class to provide information about a dimension setup.
    /// </param>
    /// <returns>
    /// true if all coverage dimensions are specified; otherwise, false.
    /// </returns>
    public boolean allCovDimSpecified(InventDimGroupSetup _inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId))
    {
        InventDimParm       inventDimParm;

        inventDimParm.initCovPrDimension(_inventDimGroupSetup);

        return inventDimParm.isInventDimEqualInventDimParm(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCovInventDim</Name>
				<Source><![CDATA[
    public boolean checkCovInventDim(
        InventDim           _inventDim,
        boolean             _showError = true)
    {
        List                sortedCovDimFields;
        ListEnumerator      sortedCovDimFieldsEnumerator;
        Set                 covDimFields;
        int                 h;
        FieldId             dimField;

        boolean             ok                  = true;

        sortedCovDimFields  = InventDimMetaDataCache::dimCovDimEnabledFieldList();
        covDimFields        = InventDim::dimFieldList2Set(InventDimGroupSetup::newItemId(this.ItemId).activeCoveragePlanFields());

        // search each dimension in prioritized order
        sortedCovDimFieldsEnumerator = sortedCovDimFields.getEnumerator();
        h = 0;
        while (sortedCovDimFieldsEnumerator.moveNext())
        {
            dimField = sortedCovDimFieldsEnumerator.current();
            h++;

            if (covDimFields.in(dimField) && InventDim::isFieldIdItemCovDim(dimField)) // dimension is active and coverage by and allowed as item coverage dimension
            {
                if (! _inventDim.(dimField) && this.isSubsequentDimSpecified(sortedCovDimFields, h, covDimFields, _inventDim))
                {
                    ok = ok && (_showError ? checkFailed(strFmt("@SYS53724",fieldId2pname(_inventDim.TableId, dimField))) : false);
                }
                else if (_inventDim.(dimField))
                {
                    ok = ok && this.validateInventoryDimensionValue(dimField, _inventDim, _showError);
                }
            }
            else
            {
                if (_inventDim.(dimField))
                {
                    ok = ok && (_showError ? checkFailed(strFmt("@SYS110830",fieldId2pname(_inventDim.TableId, dimField))) : false);
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubsequentDimSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the next coverage inventory dimension from the input coverage dimension list is specified.
    /// </summary>
    /// <param name= "_sortedCovDimFields">The sorted list of dimensions fields enabled for item coverage.</param>
    /// <param name = "_startIndex">The index from which to check the inventory diensions.</param>
    /// <param name = "_covDimFields">The list of active coverage dimensions for the item.</param>
    /// <param name = "_inventDim">The inventory dimensions to check.</param>
    /// <returns>true if the inventory dimension is specified; otherwise, false.</returns>
    protected boolean isSubsequentDimSpecified(
        List        _sortedCovDimFields, 
        int         _startIndex,
        Set         _covDimFields,
        InventDim   _inventDim)
    {
        int             field;
        int             x;
        ListEnumerator  tmpEnumerator = _sortedCovDimFields.getEnumerator();

        for (x = 1; x <= _startIndex; x++)
        {
            // move past the first _startIndex fields
            if (!tmpEnumerator.moveNext())
            {
                // should never happen.
                return false;
            }
        }

        while (tmpEnumerator.moveNext())
        {
            field = tmpEnumerator.current();

            if (    _inventDim.(field)
                     && _covDimFields.in(field)
                     && InventDim::isFieldIdItemCovDim(field)) // dimension is active and coverage by and allowed as item coverage dimension
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the inventory dimension value.
    /// </summary>
    /// <param name = "_dimField">The field ID of the inventory dimension to check.</param>
    /// <param name = "_inventDim">The inventory dimensions record.</param>
    /// <param name = "_showError">True if an error should be shown; otherwise, false.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    protected boolean validateInventoryDimensionValue(
        FieldId     _dimField,
        InventDim   _inventDim,
        boolean     _showError)
    {
        InventLocation  inventLocation;
        RefRecId        product =   InventTable::itemProduct(this.ItemId);
        boolean         ok = true;

        //check inventSiteId
        if (_dimField == fieldNum(InventDim,InventSiteId))
        {
            if (! InventSite::find(_inventDim.InventSiteId))
            {
                ok = ok && (_showError ? checkFailed(strFmt("@SYS104861",_inventDim.InventLocationId,_inventDim.InventSiteId)) : false);
            }
        }

        //check inventLocationId
        if (_dimField == fieldNum(InventDim,InventLocationId))
        {
            inventLocation = _inventDim.inventLocation();
            if (! inventLocation.RecId)
            {
                ok = ok && (_showError ? checkFailed(strFmt("@SYS5001",_inventDim.InventLocationId)) : false);
            }
            if (_inventDim.InventSiteId && inventLocation.InventSiteId != _inventDim.InventSiteId)
            {
                ok = ok && (_showError ? checkFailed(strFmt("@SYS104861",_inventDim.InventLocationId,_inventDim.InventSiteId)) : false);
            }
        }

        //check configId
        if (_dimField == fieldNum(InventDim,ConfigId))
        {
            if (! EcoResProductVariantDimValue::newProductVariantDim_ConfigId().exist(product, _inventDim.ConfigId))
            {
                ok = ok && (_showError ? checkFailed(EcoResProductMasterConfiguration::txtNotExist(_inventDim.ConfigId, this.ItemId)) : false);
            }
        }

        //check size
        if (_dimField == fieldNum(InventDim,InventSizeId))
        {
            if (! EcoResProductVariantDimValue::newProductVariantDim_InventSizeId().exist(product, _inventDim.InventSizeId))
            {
                ok = ok && (_showError ? checkFailed(EcoResProductMasterSize::txtNotExist(_inventDim.InventSizeId, this.ItemId)) : false);
            }
        }

        //check color
        if (_dimField == fieldNum(InventDim,InventColorId))
        {
            if (! EcoResProductVariantDimValue::newProductVariantDim_InventColorId().exist(product, _inventDim.InventColorId))
            {
                ok = ok && (_showError ? checkFailed(EcoResProductMasterColor::txtNotExist(_inventDim.InventColorId, this.ItemId)) : false);
            }
        }

        //check style
        if (_dimField == fieldNum(InventDim,InventStyleId))
        {
            if (! EcoResProductVariantDimValue::newProductVariantDim_InventStyleId().exist(product, _inventDim.InventStyleId))
            {
                ok = ok && (_showError ? checkFailed(EcoResProductMasterStyle::txtNotExist(_inventDim.InventStyleId, this.ItemId)) : false);
            }
        }

        // Check version
        if (_dimField == fieldNum(InventDim, InventVersionId))
        {
            if (!EcoResProductVariantDimValue::newProductVariantDim_InventVersionId().exist(product, _inventDim.InventVersionId))
            {
                ok = ok && (_showError ? checkFailed(EcoResProductMasterVersion::txtNotExist(_inventDim.InventVersionId, this.ItemId)) : false);
            }
        }

        //check wmsLocation
        if (_dimField == fieldNum(InventDim,wmsLocationId))
        {
            if (! WMSLocation::find(_inventDim.wmsLocationId,_inventDim.InventLocationId))
            {
                ok = ok && (_showError ? checkFailed(strFmt("@SYS53781",_inventDim.wmsLocationId,_inventDim.InventLocationId)) : false);
            }
        }

        //check status
        if (_dimField == fieldNum(InventDim,InventStatusId))
        {
            if (!WHSInventStatus::find(_inventDim.InventStatusId))
            {
                ok = ok && (_showError ? checkFailed(WHSInventStatus::txtNotExist(_inventDim.InventStatusId)) : false);
            }
            else
            {
                ok = ok && (WHSInventStatus::allowCreatePlannedOrder(_inventDim.InventStatusId,_showError));
            }
        }

        // <GEERU>
        //check inventory profile
        if (_dimField == fieldNum(InventDim, InventProfileId_RU))
        {
            if (! InventProfile_RU::find(_inventDim.InventProfileId_RU))
            {
                ok = ok && (_showError ? checkFailed(strFmt(InventProfile_RU::txtNotExist(), _inventDim.InventProfileId_RU)) : false);
            }
        }

        //check inventory owner
        if (_dimField == fieldNum(InventDim, InventOwnerId_RU))
        {
            if (! InventOwner_RU::find(_inventDim.InventOwnerId_RU))
            {
                ok = ok && (_showError ? checkFailed(strFmt(InventOwner_RU::txtNotExist(), _inventDim.InventOwnerId_RU)) : false);
            }
        }

        //check GTD
        if (_dimField == fieldNum(InventDim, InventGtdId_RU))
        {
            if (! InventGTD_RU::find(_inventDim.InventGtdId_RU, this.ItemId))
            {
                ok = ok && (_showError ? checkFailed(strFmt(InventGTD_RU::txtNotExist(), _inventDim.InventGtdId_RU)) : false);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>covRule</Name>
				<Source><![CDATA[
    ReqCovRule covRule()
    {
        if (this.CovFieldsActive)
        {
            return this.CovRule;
        }

        return this.reqGroup().CovRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        super();

        if (this.mustCheckForCircularityOnDelete())
        {
            // check for circularity after deletion of record
            if (!ReqItemTable::checkCircularity(this.ItemId, this.CovInventDimId))
            {
                throw error("@SYS19437");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckForCircularityOnDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a circularity check must be performed after the record has been deleted. 
    /// </summary>
    /// <returns>true if a circularity check must be performed; otherwise, false.</returns>
    public boolean mustCheckForCircularityOnDelete()
    {
        return this.ReqPOTypeActive == true 
            && InventTable::exist(this.ItemId); //do not check circularity if this is a record deleted from a cascade action on InventTable        
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReqPOType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ReqPOType</c> enumeration value of the current item.
    /// </summary>
    /// <returns>
    /// The <c>ReqPOType</c> enumeration value of the current item.
    /// </returns>
    public display ReqPOType displayReqPOType()
    {
        return ReqPO::reqRefType2ReqPoType(ReqSetupDim::newCovInventDimId(ReqSetup::newItemId(this.ItemId),this.CovInventDimId).plannedOrderTypeReq());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void initFromInventTable(InventTable _inventTable)
    {
        this.ReqGroupId     = _inventTable.ReqGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record in the <c>ReqItemTable</c> table from another record in the
    /// <c>ReqItemTable</c> table.
    /// </summary>
    /// <param name="_reqItemTable">
    /// A record from the <c>ReqItemTable</c> table.
    /// </param>
    public void initFromReqItemTable(ReqItemTable        _reqItemTable)
    {
        if (! this.ReqPOTypeActive && _reqItemTable.ReqPOTypeActive)
        {
            this.ReqPOType = _reqItemTable.ReqPOType;
            if (this.ReqPOType == ReqPOType::Transfer)
            {
                this.InventLocationIdReqMain = _reqItemTable.InventLocationIdReqMain;
            }
            this.ReqPOTypeActive = NoYes::Yes;
        }

        if (! this.CovFieldsActive && _reqItemTable.CovFieldsActive)
        {
            this.CovRule         = _reqItemTable.CovRule;
            this.CovPeriod       = _reqItemTable.CovPeriod;
            this.CovTimeFence    = _reqItemTable.CovTimeFence;
            this.MaxNegativeDays = _reqItemTable.MaxNegativeDays;
            this.MaxPositiveDays = _reqItemTable.MaxPositiveDays;

            this.CovFieldsActive = NoYes::Yes;
        }

        if (! this.ItemCovFieldsActive && _reqItemTable.ItemCovFieldsActive)
        {
            this.ReqGroupId = _reqItemTable.ReqGroupId;
            this.VendId     = _reqItemTable.VendId;

            this.ItemCovFieldsActive = NoYes::Yes;
        }

        if (   ! this.TimeFenceFieldsActive
            && _reqItemTable.TimeFenceFieldsActive)
        {
            this.AuthorizationTimeFence     = _reqItemTable.AuthorizationTimeFence;
            this.LockingTimeFence           = _reqItemTable.LockingTimeFence;
            this.ExplosionTimeFence         = _reqItemTable.ExplosionTimeFence;
            this.CapacityTimeFence          = _reqItemTable.CapacityTimeFence;

            this.TimeFenceFieldsActive = NoYes::Yes;
        }

        if (! this.LeadTimePurchaseActive && _reqItemTable.LeadTimePurchaseActive)
        {
            this.LeadTimePurchase       = _reqItemTable.LeadTimePurchase;
            this.CalendarDaysPurchase   = _reqItemTable.CalendarDaysPurchase;

            this.LeadTimePurchaseActive = NoYes::Yes;
        }

        if (! this.LeadTimeProductionActive && _reqItemTable.LeadTimeProductionActive)
        {
            this.LeadTimeProduction       = _reqItemTable.LeadTimeProduction;
            this.CalendarDaysProduction   = _reqItemTable.CalendarDaysProduction;

            this.LeadTimeProductionActive = NoYes::Yes;
        }

        if (! this.LeadTimeTransferActive && _reqItemTable.LeadTimeTransferActive)
        {
            this.LeadTimeTransfer       = _reqItemTable.LeadTimeTransfer;
            this.CalendarDaysTransfer   = _reqItemTable.CalendarDaysTransfer;

            this.LeadTimeTransferActive = NoYes::Yes;
        }

        if (! this.OnHandActive && _reqItemTable.OnHandActive)
        {
            this.OnHandConsumptionStrategy = _reqItemTable.OnHandConsumptionStrategy;
            this.OnHandActive = NoYes::Yes;
            this.MustUseLatestPossibleSupplyFirst = _reqItemTable.MustUseLatestPossibleSupplyFirst;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqSetupDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>ReqItemTable</c> record from a <c>ReqSetupDim</c> object.
    /// </summary>
    /// <param name="_reqSetupDim">
    /// A <c>ReqSetupDim</c> object that holds coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    public void initFromReqSetupDim(ReqSetupDim    _reqSetupDim)
    {
        if (! this.ReqPOTypeActive)
        {
            this.ReqPOType = ReqPO::reqRefType2ReqPoType(_reqSetupDim.plannedOrderTypeReq());
            if (this.ReqPOType == ReqPOType::Transfer)
            {
                this.InventLocationIdReqMain = _reqSetupDim.mainInventLocationId();
            }
            else
            {
                this.InventLocationIdReqMain = '';
            }
        }

        if (! this.CovFieldsActive)
        {
            this.CovRule         = _reqSetupDim.covRule();
            this.CovPeriod       = _reqSetupDim.covPeriod();
            this.CovTimeFence    = _reqSetupDim.timeFenceCov();
            this.MaxNegativeDays = _reqSetupDim.maxNegativeDays();
            this.MaxPositiveDays = _reqSetupDim.maxPositiveDays();
        }

        if (! this.ItemCovFieldsActive)
        {
            this.ReqGroupId = _reqSetupDim.reqGroupId();
            this.VendId     = _reqSetupDim.primaryVendId();
        }

        if (! this.TimeFenceFieldsActive)
        {
            this.AuthorizationTimeFence = _reqSetupDim.timeFenceAuthorization();
            this.LockingTimeFence       = _reqSetupDim.timeFenceLocking();
            this.ExplosionTimeFence     = _reqSetupDim.timeFenceExplosion();
            this.CapacityTimeFence      = _reqSetupDim.timeFenceCapacity();
        }

        if (! this.LeadTimePurchaseActive)
        {
            this.LeadTimePurchase       = _reqSetupDim.leadTime(ReqRefType::ItemPlannedOrder);
            this.CalendarDaysPurchase   = _reqSetupDim.leadTimeCalendarDays(ReqRefType::ItemPlannedOrder);
        }

        if (! this.LeadTimeProductionActive)
        {
            if (InventTable::find(this.ItemId).isFormulaAllowed())
            {
                this.LeadTimeProduction       = _reqSetupDim.leadTime(ReqRefType::PmfPlannedProdBatch);
                this.CalendarDaysProduction   = _reqSetupDim.leadTimeCalendarDays(ReqRefType::PmfPlannedProdBatch);
            }
            else
            {
                this.LeadTimeProduction       = _reqSetupDim.leadTime(ReqRefType::BOMPlannedOrder);
                this.CalendarDaysProduction   = _reqSetupDim.leadTimeCalendarDays(ReqRefType::BOMPlannedOrder);
            }
        }

        if (! this.LeadTimeTransferActive)
        {
            this.LeadTimeTransfer       = _reqSetupDim.leadTime(ReqRefType::TransferPlannedOrder);
            this.CalendarDaysTransfer   = _reqSetupDim.leadTimeCalendarDays(ReqRefType::TransferPlannedOrder);
        }

        if (!this.OnHandActive)
        {
            this.OnHandConsumptionStrategy = _reqSetupDim.onHandConsumption();
            this.MustUseLatestPossibleSupplyFirst = _reqSetupDim.mustUseLatestPossibleSupplyFirst();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        #PmfProcessMFG

        super();

        if (#PmfEnabled)
        {
            this.PmfPlanPriorityDefault = #PMF_Plan99;
            this.PmfPlanPriorityCurrent = #PMF_Plan99;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        super();

        if (this.ReqPOType == ReqPOType::Transfer)
        {
            if (! ReqItemTable::checkCircularity(this.ItemId, this.CovInventDimId))
            {
                throw error("@SYS23020");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <see cref="T:InventDim" /> record related to the current item coverage record.
    /// </summary>
    /// <returns>
    /// An <see cref="T:InventDim" /> record.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(this.CovInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        ReqGroup        reqGroup;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ReqItemTable, ReqPOType):
                if (this.ReqPOType != ReqPOType::Transfer)
                {
                    this.InventLocationIdReqMain = '';
                }
                break;

            case fieldStr(ReqItemTable, CovRule):
                reqGroup = this.reqGroup();
                if ((this.CovFieldsActive && this.CovRule == ReqCovType::MinMax) && reqGroup.CovRule != ReqCovType::MinMax)
                {
                    this.MaxPositiveDays = ReqGroup::defaultPositiveDays(ReqCovType::MinMax);
                    this.MaxNegativeDays = ReqGroup::defaultNegativeDays(ReqCovType::MinMax);
                }
                else
                {
                    this.MaxPositiveDays = reqGroup.MaxPositiveDays;
                    this.MaxNegativeDays = reqGroup.MaxNegativeDays;
                }
                break;

            case fieldStr(ReqItemTable, LeadTimeTransferActive):
                if (! this.LeadTimeTransferActive)
                {
                    this.LeadTimeTransfer       = 0;
                    this.CalendarDaysTransfer   = NoYes::No;
                }
                break;

            case fieldStr(ReqItemTable, LeadTimeProductionActive):
                if (! this.LeadTimeProductionActive)
                {
                    this.LeadTimeProduction     = 0;
                    this.CalendarDaysProduction = NoYes::No;
                }
                break;

            case fieldStr(ReqItemTable, LeadTimePurchaseActive):
                if (! this.LeadTimePurchaseActive)
                {
                    this.LeadTimePurchase       = 0;
                    this.CalendarDaysPurchase   = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsToCheckCircularity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the pending update operation is requiring a circularity check.
    /// </summary>
    /// <returns>
    ///     true if a circularity check is required; otherwise, false.
    /// </returns>
    public boolean needsToCheckCircularity()
    {
        ReqItemTable        reqItemTableOrig;
        boolean             needsToCheckCircularity = this.ReqPOType == ReqPOType::Transfer;

        if (needsToCheckCircularity)
        {
            reqItemTableOrig = this.orig();

            //need to check circularity if the record if the order type changed
            needsToCheckCircularity = this.ReqPOType != reqItemTableOrig.ReqPOType;

            //need to check circularity if the record if the coverage dimension changed
            needsToCheckCircularity = needsToCheckCircularity
                || (this.CovInventDimId != reqItemTableOrig.CovInventDimId);

            //need to check circularity if the record if the main warehouse changed
            needsToCheckCircularity = needsToCheckCircularity
                || (this.InventLocationIdReqMain != reqItemTableOrig.InventLocationIdReqMain);
        }

        return needsToCheckCircularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the item has a valid approved vendor list entry when it is controlled by AVL
    /// functionality.
    /// </summary>
    /// <returns>
    /// true if the item has a valid approved vendor list; otherwise, false.
    /// </returns>
    private boolean pdsCheckApprovedVendorList()
    {
        PdsApprovedVendorListCheck  avlCheck;
        boolean ret = true;

        avlCheck = PdsApprovedVendorListCheck::newFromTable(this);
        ret = avlCheck.validateCheck();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the maximum coverage quantity based on the specified catch-weight quantity.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set the quantity.
    /// </param>
    /// <param name="_cwQty">
    /// The catch-weight quantity to set.
    /// </param>
    /// <returns>
    /// The maximum catch-weight coverage quantity.
    /// </returns>
    public edit PdsCWQtyMax pdsCWQtyMax(boolean _set, PdsCWInventQty _cwQty)
    {
        if (_set)
        {
            this.MaxInventOnhand = PdsCatchWeight::inventQty(this.ItemId, _cwQty);
            return _cwQty;
        }
        else
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.MaxInventOnhand);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the minimum coverage quantity based on the specified catch-weight quantity.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set the specified quantity.
    /// </param>
    /// <param name="_cwQty">
    /// The catch-weight quantity to set.
    /// </param>
    /// <returns>
    /// The minimum catch-weight coverage quantity.
    /// </returns>
    public edit PdsCWQtyMin pdsCWQtyMin(boolean _set, PdsCWInventQty _cwQty)
    {
        if (_set)
        {
            this.MinInventOnhand = PdsCatchWeight::inventQty(this.ItemId, _cwQty);
            return _cwQty;
        }
        else
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.MinInventOnhand);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqGroup</Name>
				<Source><![CDATA[
    ReqGroup reqGroup()
    {
        return ReqGroup::find(this.reqGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqGroupId</Name>
				<Source><![CDATA[
    ReqGroupId reqGroupId()
    {
        return ReqGroup::defaultTable(InventTable::find(this.ItemId).ReqGroupId,this.ReqGroupId).ReqGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean needsCicularityCheck = this.needsToCheckCircularity();

        ttsbegin;

        super();

        if (needsCicularityCheck)
        {
            // check for circularity when changes are written to DB as records depends on each other.
            if (! ReqItemTable::checkCircularity(this.ItemId, this.CovInventDimId))
            {
                throw error("@SYS25904");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _id)
    {
        boolean ret;

        ret = super(_id);

        switch (fieldExt2Id(_id))
        {
            case fieldNum(ReqItemTable, PmfPlanPriorityDefault):
                if (#PmfEnabled
                    && InventTable::find(this.ItemId).PmfProductType == PmfProductType::Formula
                    && this.PmfPlanPriorityDefault <= 0)
                {
                    ret = checkFailed("@PRO1076");
                }
                break;

            case fieldNum(ReqItemTable,VendId):
                if (ret && #PdsApprovedVendorListEnabled)
                {
                    ret = this.pdsCheckApprovedVendorList();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean         ret;
        ReqSetup        reqSetup;
        ReqSetupDim     reqSetupDim;

        PmfFormulaCoBy  pmfFormulaCoBy;
        BOMVersion      bomVersion;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ReqItemTable, ReqPOType):
                reqSetup = ReqSetup::newItemId(this.ItemId);
                reqSetupDim = ReqSetupDim::newCovInventDimId(reqSetup,this.CovInventDimId);
                if (! reqSetupDim.checkPlannedOrderType(this.ReqPOType,true))
                    return false;
                break;

            case fieldStr(ReqItemTable, MaxNegativeDays):
                if (this.MaxNegativeDays < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldStr(ReqItemTable, MaxPositiveDays):
                if (this.MaxPositiveDays < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldStr(ReqItemTable, CovTimeFence):
                if (this.CovTimeFence < 0)
                {
                    return checkFailed("@SYS53966");
                }

                if (ReqCheckFieldsTimeFenceLimitFlight::instance().isEnabled())
                {
                    ret = ret && ReqPlanSched::checkTimeFenceLimit(this.(fieldName2Id(this.TableId, _fieldName)));
                }

                break;

            case fieldStr(ReqItemTable, AuthorizationTimeFence),
                 fieldStr(ReqItemTable, LockingTimeFence),
                 fieldStr(ReqItemTable, ExplosionTimeFence),
                 fieldStr(ReqItemTable, CapacityTimeFence),
                 fieldStr(ReqItemTable, TimeFenceBackRequisition):
                
                if (ReqCheckFieldsTimeFenceLimitFlight::instance().isEnabled())
                {
                    ret = ret && ReqPlanSched::checkTimeFenceLimit(this.(fieldName2Id(this.TableId, _fieldName)));
                }

                break;
            case fieldStr(ReqItemTable, CovPeriod):
                if (this.CovPeriod < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldStr(ReqItemTable, LeadTimePurchase):
                if (this.LeadTimePurchase < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldStr(ReqItemTable, LeadTimeProduction):
                if (this.LeadTimeProduction < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldStr(ReqItemTable, LeadTimeTransfer):
                if (this.LeadTimeTransfer < 0)
                    return checkFailed("@SYS53966");

                break;
            case fieldStr(ReqItemTable, MinInventOnhand):
                if (this.MinInventOnhand < 0)
                    return checkFailed(strFmt("@SYS69681",fieldPName(ReqItemTable,MinInventOnhand)));

                break;
            case fieldStr(ReqItemTable, MaxInventOnhand):
                if (this.MaxInventOnhand < 0)
                    return checkFailed(strFmt("@SYS69681",fieldPName(ReqItemTable,MaxInventOnhand)));

                break;

            case fieldStr(ReqItemTable, PmfPlanningItemId) :
                if (this.PmfPlanningItemId != "")
                {
                    if (ret && !InventTable::find(this.PmfPlanningItemId).isFormulaAllowed())
                    {
                        ret = checkFailed(strFmt("@PRO154", this.PmfPlanningItemId));
                    }

                    if (ret && InventTable::find(this.ItemId).PmfProductType == PmfProductType::Co_Product)
                    {
                        select firstonly RecId from pmfFormulaCoBy where
                            pmfFormulaCoBy.ItemId == this.ItemId
                            join RecId from bomVersion where
                                bomVersion.RecId == pmfFormulaCoBy.bomVersionRefRecId
                                && bomVersion.ItemId == this.PmfPlanningItemId;

                        if (pmfFormulaCoBy.RecId == 0)
                        {
                            ret = checkFailed(strFmt("@PRO2636", this.ItemId, this.PmfPlanningItemId));
                        }
                    }
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                         ret = super();
        InventDim                       inventDim;

        inventDim = InventDim::find(this.CovInventDimId);

        if (this.MaxInventOnhand < this.MinInventOnhand && this.isMaxInventOnhandEditable())
        {
            ret = checkFailed(strFmt("@SYS69680",fieldPName(ReqItemTable,MaxInventOnhand),fieldPName(ReqItemTable,MinInventOnhand)));
        }

        if (this.MinInventOnhand < 0)
        {
            ret = checkFailed(strFmt("@SYS69681",fieldPName(ReqItemTable,MinInventOnhand)));
        }

        if (this.MaxInventOnhand < 0)
        {
            ret = checkFailed(strFmt("@SYS69681",fieldPName(ReqItemTable,MaxInventOnhand)));
        }

        if (this.ReqPOTypeActive && this.ReqPOType == ReqPOType::Transfer && ! this.InventLocationIdReqMain)
        {
            ret = checkFailed("@SYS58141");
        }

        if ((this.CovRule == ReqCovType::MinMax) && (this.MaxPositiveDays < this.CovTimeFence) && FormDataUtil::isFormDataSource(this))
        {
            warning("@SYS83611", SysHelpPath::applField(tableStr(ReqGroup), fieldId2name(tableNum(ReqGroup), fieldNum(ReqGroup, MaxPositiveDays))));
        }

        if (! this.checkCovInventDim(inventDim))
        {
            ret = false;
        }

        if ((this.MinInventOnhand || this.MaxInventOnhand) && ! this.allCovDimSpecified())
        {
            ret = checkFailed("@SYS121641");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCircularity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether circular refill rules exist.
    /// </summary>
    /// <param name="_itemId">
    /// A string that holds the item ID.
    /// </param>
    /// <returns>
    /// true if no circular refill rules exists; otherwise, false.
    /// </returns>
    public static boolean checkCircularity(ItemId _itemId, InventDimId _covInventDimId = '')
    {
        InventDim                       inventDim;

        ReqDependencyAnalyzer           reqLevelAnalyzer;

        ReqItemTable                    reqItemTable;
        InventLocation                  inventLocation;
        InventDimParm                   inventDimParmProduct;
        InventDim                       inventDimProduct;
        InventDimGroupSetup             inventDimGroupSetup = InventDimGroupSetup::newItemId(_itemId);
        ReqPlanData                     reqPlanData = ReqPlanData::newReqPlanId(ReqPlanSched::defaultDynamicId());

        reqLevelAnalyzer  = ReqDependencyAnalyzer::construct(Types::String);

        try
        {
            if (_covInventDimId && InventTable::find(_itemId).hasProductDimensions())
            {
                inventDimGroupSetup.inventDimParmActiveProductDimension(inventDimParmProduct);
                inventDimProduct = InventDim::find(_covInventDimId);
                inventDimProduct.clearNotProductDim(inventDimGroupSetup);
                while select ItemId, CovInventDimId from reqItemTable
                    where reqItemTable.ItemId == _itemId
                    #inventDimExistsJoin(reqItemTable.CovInventDimId, inventDim, inventDimProduct, inventDimParmProduct)

                {
                    ReqCalc::addCovDimIdAsTask(reqLevelAnalyzer,reqItemTable.ItemId, reqItemTable.CovInventDimId, reqPlanData);
                }
            }
            else
            {
                // item coverage rules
                while select ItemId, CovInventDimId from reqItemTable where reqItemTable.ItemId == _itemId
                {
                    ReqCalc::addCovDimIdAsTask(reqLevelAnalyzer,reqItemTable.ItemId, reqItemTable.CovInventDimId, reqPlanData);
                }
            }
            // add general rules from warehouses
            while select InventSiteId, InventLocationId from inventLocation
                where ! inventLocation.Manual
                    &&  inventLocation.InventLocationType != InventLocationType::Transit
            {
                inventDim.clear();
                inventDim.InventSiteId     = inventLocation.InventSiteId;
                inventDim.InventLocationId = inventLocation.InventLocationId;
                ReqCalc::addCovDimIdAsTask(reqLevelAnalyzer,_itemId, inventDim.reqCovDimId(inventDimGroupSetup), reqPlanData);
            }

            reqLevelAnalyzer.getSchedule();
        }
        catch (Exception::Error)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies the coverage settings from the specified source item to the target items.
    /// </summary>
    /// <param name="_sourceItemId">
    ///     The ID of the item providing the coverage settings.
    /// </param>
    /// <param name="_targetItemId">
    ///     The IDs of the items receiving the coverage settings.
    /// </param>
    static void copyFromItemId(ItemId _sourceItemId, container _targetItemId)
    {
        ReqItemTable   reqItemTable;
        Set            setTargetItemId, setInvalidDimId;
        SetEnumerator  setEnumeratorTargetItemId,setEnumeratorInvalidDimId;
        int            notcreated;
        container      invalidReqItemTable;

        if (!_targetItemId)
        {
            return;
        }

        setTargetItemId   = Set::create(_targetItemId);
        setEnumeratorTargetItemId = setTargetItemId.getEnumerator();

        setInvalidDimId   = new Set(Types::Enum);

        setPrefix("@SYS12898");

        ttsbegin;

        while (setEnumeratorTargetItemId.moveNext())
        {
            while select forupdate reqItemTable
               where reqItemTable.ItemId == _sourceItemId
            {
                reqItemTable.ItemId = setEnumeratorTargetItemId.current();
                reqItemTable.insert();
            }

            // Check all CovDimId is valid for target item.
            invalidReqItemTable = ReqItemTableWizard::findInvalidReqItemTable(setEnumeratorTargetItemId.current());
            if (invalidReqItemTable)
            {
                setInvalidDimId = Set::create(invalidReqItemTable);
                if (setInvalidDimId.elements())
                {
                    setEnumeratorInvalidDimId = setInvalidDimId.getEnumerator();
                    while (setEnumeratorInvalidDimId.moveNext())
                    {
                        reqItemTable = ReqItemTable::find(setEnumeratorTargetItemId.current(),setEnumeratorInvalidDimId.current(),true);
                        reqItemTable.delete();
                        notCreated +=1;
                    }
                }
            }

            if (notcreated)
            {
                setPrefix(strFmt("@SYS14077",setEnumeratorTargetItemId.current()));
                error(strFmt("@SYS70375",notCreated));
            }
            notCreated = 0;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForItemId</Name>
				<Source><![CDATA[
    static void deleteForItemId(container _conItemId)
    {
        ReqItemTable   reqItemTable;
        Set            setItemId2Delete;
        SetIterator    itSetItemId2Delete;

        if (_conItemId)
        {
            setItemId2Delete = Set::create(_conItemId);
            itSetItemId2Delete = new SetIterator(setItemId2Delete);

            ttsbegin;
            while (itSetItemId2Delete.more())
            {
                delete_from reqItemTable where reqItemTable.ItemId == itSetItemId2Delete.value();
                itSetItemId2Delete.next();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(
        ItemId               _itemId,
        ReqCovInventDimId    _covInventDimId)
    {
        return _itemId && (select firstonly RecId from reqItemTable
                    index hint ItemIdx
                    where reqItemTable.ItemId              == _itemId    &&
                          reqItemTable.CovInventDimId      == _covInventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ReqItemTable find(
        ItemId               _itemId,
        ReqCovInventDimId    _covInventDimId,
        boolean              _forUpdate = false)

    {
        ReqItemTable reqItemTable;

        if (_itemId && _covInventDimId)
        {
            if (_forUpdate)
            {
                reqItemTable.selectForUpdate(_forUpdate);
            }

            select firstonly reqItemTable
                index hint ItemIdx
                where reqItemTable.ItemId         == _itemId    &&
                      reqItemTable.CovInventDimId == _covInventDimId;
        }

        return reqItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventLocationIdReqMain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for the <c>InventLocationIdReqMain</c> field.
    /// </summary>
    /// <param name="_ctrl">
    /// A <c>FormStringControl</c> object.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that holds the coverage dimensions.
    /// </param>
    static void lookupInventLocationIdReqMain(
        FormStringControl   _ctrl,
        InventDim           _inventDim)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation),_ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventLocation));

        sysTableLookup.addLookupfield(fieldNum(InventLocation,InventLocationId));
        sysTableLookup.addLookupfield(fieldNum(InventLocation,Name));
        sysTableLookup.addLookupfield(fieldNum(InventLocation,InventSiteId));

        SysQuery::findOrCreateRange(queryBuildDataSource,fieldNum(InventLocation,InventLocationType)).value(queryValue(InventLocationType::Standard));

        if (!   _inventDim.InventLocationId
            &&  _inventDim.InventSiteId)
        {
            SysQuery::findOrCreateRange(queryBuildDataSource,fieldNum(InventLocation,InventSiteId)).value(SysQuery::valueNot(_inventDim.InventSiteId));
        }

        if (_inventDim.InventLocationId)
        {
            SysQuery::findOrCreateRange(queryBuildDataSource,fieldNum(InventLocation,InventLocationId)).value(SysQuery::valueNot(_inventDim.InventLocationId));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfExistItemCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a <c>ReqItemTable</c> record exists based on the specified search criteria.
    /// </summary>
    /// <param name="_itemId">
    /// An Item ID.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether a <c>ReqItemTable</c> record exists.
    /// </returns>
    public static boolean pmfExistItemCoverage(
        ItemId               _itemId)
    {
        return _itemId && (select firstonly RecId from reqItemTable
                    where reqItemTable.ItemId              == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _id)
    {
        super(_id);

        switch (fieldExt2Id(_id))
        {
            case fieldNum(ReqItemTable,MinSafetyKeyId):
                this.MinSafetyKeyId = this.isMinSafetyKeyIdEditable() ? this.MinSafetyKeyId : null;
                break;

            case fieldNum(ReqItemTable,MaxSafetyKeyId):
                this.MaxSafetyKeyId = this.isMaxSafetyKeyIdEditable() ? this.MaxSafetyKeyId : null;
                break;

            case fieldNum(ReqItemTable,MinSafetyPeriod):
                this.MinSafetyPeriod = this.isMinSafetyPeriodEditable() ? this.MinSafetyPeriod : NoYes::No;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        container ret = [
            [fieldNum(ReqItemTable, MinSafetyKeyId), [fieldNum(ReqItemTable, MinInventOnhand), fieldNum(ReqItemTable, CovRule)]],
            [fieldNum(ReqItemTable, MaxSafetyKeyId), [fieldNum(ReqItemTable, CovRule), fieldNum(ReqItemTable, MaxInventOnhand)]],
            [fieldNum(ReqItemTable, MinSafetyPeriod), [fieldNum(ReqItemTable, MinSafetyKeyId)]]
        ];
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMinSafetyKeyIdEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the MinSafetyKeyId field is editable.
    /// </summary>
    /// <returns>
    /// true if the MinSafetyKeyId field is editable; otherwise, false.
    /// </returns>
    public boolean isMinSafetyKeyIdEditable()
    {
        return this.MinInventOnhand > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMaxSafetyKeyIdEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the MaxSafetyKeyId field is editable.
    /// </summary>
    /// <returns>
    /// true if the MaxSafetyKeyId field is editable; otherwise, false.
    /// </returns>
    public boolean isMaxSafetyKeyIdEditable()
    {
        boolean ret;

        ret = this.CovRule() == ReqCovType::MinMax && this.MaxInventOnhand;
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMinSafetyPeriodEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the MinSafetyPeriod field is editable.
    /// </summary>
    /// <returns>
    /// true if the MinSafetyPeriod field is editable; otherwise, false.
    /// </returns>
    public boolean isMinSafetyPeriodEditable()
    {
        return this.MinSafetyKeyId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMaxInventOnhandEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the MaxInventOnhand field is editable.
    /// </summary>
    /// <returns>
    /// true if the MaxInventOnhand field is editable; otherwise, false.
    /// </returns>
    public boolean isMaxInventOnhandEditable()
    {
        boolean ret;

        ret = this.CovRule() == ReqCovType::MinMax;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldFromSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the field value should be taken from the req setup.
    /// </summary>
    /// <param name = "_id">The field id.</param>
    /// <returns>True if the field is taken from the req setup; otherwise, false.</returns>
    protected boolean isFieldFromSetup(FieldId _id)
    {
        switch (fieldExt2Id(_id))
        {
            case fieldNum(ReqItemTable, ReqPOType):
            case fieldNum(ReqItemTable, InventLocationIdReqMain):
                return !this.ReqPOTypeActive;
                break;

            case fieldNum(ReqItemTable, CovRule):
            case fieldNum(ReqItemTable, CovPeriod):
            case fieldNum(ReqItemTable, CovTimeFence):
            case fieldNum(ReqItemTable, MaxNegativeDays):
            case fieldNum(ReqItemTable, MaxPositiveDays):
                return !this.CovFieldsActive;
                break;

            case fieldNum(ReqItemTable, ReqGroupId):
            case fieldNum(ReqItemTable, VendId):
                return !this.ItemCovFieldsActive;
                break;

            case fieldNum(ReqItemTable, AuthorizationTimeFence):
            case fieldNum(ReqItemTable, LockingTimeFence):
            case fieldNum(ReqItemTable, ExplosionTimeFence):
            case fieldNum(ReqItemTable, CapacityTimeFence):
                return !this.TimeFenceFieldsActive;
                break;

            case fieldNum(ReqItemTable, LeadTimePurchase):
            case fieldNum(ReqItemTable, CalendarDaysPurchase):
                return !this.LeadTimePurchaseActive;
                break;

            case fieldNum(ReqItemTable, LeadTimeProduction):
            case fieldNum(ReqItemTable, CalendarDaysProduction):
                return !this.LeadTimeProductionActive;
                break;

            case fieldNum(ReqItemTable, LeadTimeTransfer):
            case fieldNum(ReqItemTable, CalendarDaysTransfer):
                return !this.LeadTimeTransferActive;
                break;

            case fieldNum(ReqItemTable, OnHandConsumptionStrategy):
                return !this.OnHandActive;
                break;
            case fieldNum(ReqItemTable, MustUseLatestPossibleSupplyFirst):
                return !this.OnHandActive;
                break;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyNonInheritedFieldValuesChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is needed to save the record changes.
    /// </summary>
    /// <returns>true if write is required; otherwise, false.</returns>
    internal boolean anyNonInheritedFieldValuesChanged()
    {
        ReqItemTable reqItemTableOrig = this.orig();

        /// The fields with properties Visible = No or Allow Edit = No are skipped,
        /// such fields should be checked separately
        boolean writeNeeded = this.CovInventDimId != reqItemTableOrig.CovInventDimId || this.OnHandActive != reqItemTableOrig.OnHandActive;
        
        if (!writeNeeded)
        {
            VersioningCompareRecordVersions comparer = VersioningCompareRecordVersions::newTableId(tableNum(ReqItemTable));
            container changes = comparer.packChangedFields(VersioningChangeType::Updated, reqItemTableOrig, this);

            for (int i = 1; i <= conLen(changes); i++)
            {
                container changedField = conpeek(changes, i);
                FieldId fieldId = conpeek(changedField, VersioningCompareRecordVersions::posRelatedFieldId());

                if (!this.isFieldFromSetup(fieldId))
                {
                    writeNeeded = true;
                    break;
                }
            }
        }

        return writeNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124239</DeveloperDocumentation>
	<Label>@SYS21672</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>CovInventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>ItemIdx</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinInventOnhand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxInventOnhand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeadTimePurchase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeadTimeProduction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CovGroupCoverage</Name>
			<Label>@SYS110270</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CovFieldsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxNegativeDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxPositiveDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FormulaPriority</Name>
			<Label>@PRO1454</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfPlanningItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPlanPriorityDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPlanPriorityCurrent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfPlanPriorityDateChanged</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovInventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemCoverage</Name>
			<Label>@SYS110271</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCovFieldsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeadTimeProd</Name>
			<Label>@SYS4398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeadTimeProductionActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeadTimeProduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarDaysProduction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeadTimePurch</Name>
			<Label>@SYS9283</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeadTimePurchaseActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeadTimePurchase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarDaysPurchase</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeadTimeTransfer</Name>
			<Label>@SYS8801</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeadTimeTransferActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeadTimeTransfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarDaysTransfer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MinMax</Name>
			<Label>@SYS5144</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MinInventOnhand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxInventOnhand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinSafetyKeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxSafetyKeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinSatisfy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinSafetyPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCatchWeight</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MinInventOnhand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxInventOnhand</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedOrderType</Name>
			<Label>@SYS17749</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOTypeActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdReqMain</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeFences</Name>
			<Label>@SYS152681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimeFenceFieldsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AuthorizationTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LockingTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExplosionTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CapacityTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimeFenceBackRequisition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OnHand</Name>
			<Label>@SCM:ReqOnHandOverrideLabel</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OnHandActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnHandConsumptionStrategy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MustUseLatestPossibleSupplyFirst</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MinSafetyKeyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSafetyKeyId</ExtendedDataType>
			<Label>@SYS58028</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AuthorizationTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceAuthorization</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalendarDaysProduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalendarDaysPurchase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalendarDaysTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>InventTransferOrders</ConfigurationKey>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CapacityTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceCapacity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CovFieldsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS71906</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CovInventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCovInventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCovPeriod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CovRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCovRule</ExtendedDataType>
			<EnumType>ReqCovType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceCoverage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ExplosionTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceExplosion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdReqMain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdReqMain</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCovFieldsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS110618</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeadTimeProduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeadTime</ExtendedDataType>
			<Label>@SYS70640</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LeadTimeProductionActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS70643</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeadTimePurchase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeadTime</ExtendedDataType>
			<Label>@SYS12200</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LeadTimePurchaseActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS70641</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeadTimeTransfer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeadTimeTransfer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LeadTimeTransferActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>InventTransferOrders</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS70645</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LockingTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceLocking</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxInventOnhand</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyMaxOnhand</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxNegativeDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqMaxNegativeDays</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxPositiveDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqMaxPositiveDays</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MaxSafetyKeyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqSafetyKeyId</ExtendedDataType>
			<Label>@SYS69674</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinInventOnhand</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQtyMinOnhand</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MinSafetyPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqMinSafetyPeriod</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MinSatisfy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqMinSatisfy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfPlanningItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPlanningItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PmfPlanPriorityCurrent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPlanPriorityCurrent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PmfPlanPriorityDateChanged</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPlanPriorityDateChanged</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PmfPlanPriorityDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPlanPriorityDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqPOType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOTypeActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS110619</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TimeFenceBackRequisition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeFenceBackRequisition</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TimeFenceFieldsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Req</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS152681</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnHandActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS71906</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnHandConsumptionStrategy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqOnHandConsumptionStrategy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MustUseLatestPossibleSupplyFirst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqMustUseLatestPossibleSupplyFirst</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CovInventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CovInventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CovInventDimId</Name>
					<Field>CovInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124240</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ItemCoverage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MainInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReqItemTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdReqMain</Name>
					<Field>InventLocationIdReqMain</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MaximumReqSafetyKey</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReqSafetyKey</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MaximumReqSafetyKey</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReqItemTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MaxSafetyKeyId</Name>
					<SourceEDT>ReqSafetyKeyId</SourceEDT>
					<Field>MaxSafetyKeyId</Field>
					<RelatedField>SafetyKeyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>KeyIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MinimumReqSafetyKey</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReqSafetyKey</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MinimumReqSafetyKey</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReqItemTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MinSafetyKeyId</Name>
					<SourceEDT>ReqSafetyKeyId</SourceEDT>
					<Field>MinSafetyKeyId</Field>
					<RelatedField>SafetyKeyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>KeyIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfPlanningItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PmfPlanningItem</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ReqItemTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfPlanningItemId</Name>
					<SourceEDT>PmfPlanningItemId</SourceEDT>
					<Field>PmfPlanningItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqGroupId</Name>
					<Field>ReqGroupId</Field>
					<RelatedField>ReqGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqItemTable</Name>
			<EntityRelationshipRole>@SYS124241</EntityRelationshipRole>
			<RelatedTable>ReqItemTable</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CovInventDimId</Name>
					<Field>CovInventDimId</Field>
					<RelatedField>CovInventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>