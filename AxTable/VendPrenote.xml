<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPrenote</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendPrenote extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current pre-note status based on comparison of the pre-note approval date with todays
    /// date.
    /// </summary>
    /// <returns>
    /// A <c>PrenoteStatus::NA</c> enumeration value if not set or a <c>PrenoteStatus::Pending</c>
    /// enumeration value if not approved; otherwise, a <c>PrenoteStatus::Approved</c> enumeration value.
    /// </returns>
    public display PrenoteStatus status()
    {
        if (this.PrenoteApprovedDate == DateTimeUtil::minValue())
        {
            return PrenoteStatus::NA;
        }
        else if (this.PrenoteApprovedDate > DateTimeUtil::utcNow())
        {
            return PrenoteStatus::Pending;
        }
        else
        {
            return PrenoteStatus::Approved;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specific record is located in the <c>VendPrenote</c> table; if not,an error
    /// message is displayed.
    /// </summary>
    /// <param name="_bankAccountId">
    /// The bank account ID of the <c>VendPrenote</c> table record to check for existence.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account of the <c>VendPrenote</c> table record to check for existence.
    /// </param>
    /// <param name="_vendBankAccountId">
    /// The vendor account ID of the <c>VendPrenote</c> table record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(
        CompanyBankAccount _bankAccountId,
        VendAccount _vendAccount,
        VendBankAccountId _vendBankAccountId)
    {
        boolean ret = true;

        if (!VendPrenote::exist(_bankAccountId, _vendAccount, _vendBankAccountId))
        {
            ret = checkFailed(VendPrenote::txtNotExist());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBankPrenotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all vendor pre-notes of a particular company bank.
    /// </summary>
    /// <param name="_accountId">
    /// The company bank account ID for which the vendor pre-notes are to be deleted.
    /// </param>

    public static void deleteBankPrenotes(CompanyBankAccount _accountId)
    {
        VendPrenote vendPrenote;

        delete_from vendPrenote
            where vendPrenote.BankAccountId == _accountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePrenotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all customer pre-notes of a particular company bank.
    /// </summary>
    /// <param name="_accountId">
    /// The company bank account ID for which the vendor pre-notes are to be deleted.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account ID to which the vendor bank account belongs.
    /// </param>
    public static void deletePrenotes(BankAccountID _accountId, VendAccount _vendAccount)
    {
        VendPrenote vendPrenote;

        delete_from vendPrenote
            where vendPrenote.VendAccountId == _accountId
                && vendPrenote.VendAccount == _vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines whether the specified record in the <c>VendPrenote</c> table exists.
    /// </summary>
    /// <param name="_bankAccountId">
    /// The bank account ID of the bank to check for existence.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account of the vendor to check for existence.
    /// </param>
    /// <param name="_vendBankAccountId">
    /// The vendor account ID of the vendor to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        CompanyBankAccount _bankAccountId,
        VendAccount _vendAccount,
        VendBankAccountId _vendBankAccountId)
    {
        boolean found;

        found = (select firstonly RecId from vendPrenote
                    where vendPrenote.BankAccountId == _bankAccountId
                        && vendPrenote.VendAccount == _vendAccount
                        && vendPrenote.VendAccountId == _vendBankAccountId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBankPrenotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines whether the specified record in the <c>VendPrenote</c> table exists.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account of the vendor to check for existence.
    /// </param>
    /// <param name="_vendBankAccountId">
    /// The vendor account ID of the vendor to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existBankPrenotes(VendAccount _vendAccount, VendBankAccountId _vendBankAccountId)
    {
        boolean found;

        found = (select firstonly RecId from vendPrenote
                    where vendPrenote.VendAccount == _vendAccount
                        && vendPrenote.VendAccountId == _vendBankAccountId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCompanyBankPrenotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines whether the specified record in the <c>VendPrenote</c> table exists.
    /// </summary>
    /// <param name="_bankAccountId">
    /// The bank account ID of the bank to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existCompanyBankPrenotes(CompanyBankAccount _bankAccountId)
    {
        boolean found;

        found = (select firstonly RecId from vendPrenote
                    where vendPrenote.BankAccountId == _bankAccountId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendPrenote</c> table.
    /// </summary>
    /// <param name="_bankAccountId">
    /// The bank account number of the vendor record.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account of the vendor record.
    /// </param>
    /// <param name="_vendBankAccountId">
    /// The vendor bank aacount number of the vendor record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The concurrency model option to use when it reads the record;optional.
    /// </returns>
    public static VendPrenote find(
        CompanyBankAccount _bankAccountId,
        VendAccount _vendAccount,
        VendBankAccountId _vendBankAccountId,
        boolean _forupdate = false )
    {
        VendPrenote vendPrenote;

        if (_vendAccount)
        {
            if (_forupdate)
            {
                vendPrenote.selectForUpdate(_forupdate);
            }

            select firstonly vendPrenote
                index hint PrenoteIdx
                where vendPrenote.BankAccountId == _bankAccountId
                    && vendPrenote.VendAccount == _vendAccount
                    && vendPrenote.VendAccountId == _vendBankAccountId;
        }
        return vendPrenote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendPrenote</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value of the customer record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The concurrency model option to use when it reads the record;optional.
    /// </returns>
    public static VendPrenote findByRecId(RecId _recId, boolean _forupdate = false)
    {
        VendPrenote vendPrenote;

        if (_forupdate)
        {
            vendPrenote.selectForUpdate(_forupdate);
        }

        select firstonly vendPrenote
            index hint RecIdx
            where vendPrenote.RecId == _recId;

        return vendPrenote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS128502";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prenotes</ConfigurationKey>
	<DeveloperDocumentation>@SYS128604</DeveloperDocumentation>
	<Label>@SYS128529</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>VendAccount</TitleField1>
	<TitleField2>BankAccountId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrenoteApprovedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Prenotes</Name>
			<Label>@SYS128504</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PrenoteApprovedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UTCTimestamp</ExtendedDataType>
			<Label>@SYS129003</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
			<Label>@SYS88299</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrenoteIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankAccountId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccountId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccount</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendPrenote</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankAccountId</Name>
					<SourceEDT>CompanyBankAccount</SourceEDT>
					<Field>BankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Vend</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Vend</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendPrenote</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccountId</Name>
					<Field>VendAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>