<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentSalesTaxForm_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Transit docuemnt sales tax form table.
/// </summary>
public class TransitDocumentSalesTaxForm_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromTmpSalesTaxForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form based on a temp table buffer.
    /// </summary>
    /// <param name="_tmpForm">
    /// The temp table buffer.
    /// </param>
    public void initFromTmpSalesTaxForm(TmpTransitDocumentSalesTaxForm_IN _tmpForm)
    {
        this.Direction    = _tmpForm.Direction;
        this.FormType     = _tmpForm.SalesTaxFormTypes;
        this.SeriesNumber = _tmpForm.SeriesNumber;
        this.FormNumber   = _tmpForm.FormNumber;
        this.FormDate     = _tmpForm.FormDate;
        this.FormValue    = _tmpForm.FormValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check temp talbe record exists.
    /// </summary>
    /// <param name = "_recId">Recid of table.</param>
    /// <returns>True if given transit docuemnt sales tax form exist, otherwise check failed.</returns>
    public static boolean checkExist(RecId _recId)
    {
        if (!TransitDocumentSalesTaxForm_IN::exist(_recId))
        {
            return checkFailed(strFmt(TransitDocumentSalesTaxForm_IN::txtNotExist(), _recId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check temp talbe record exists.
    /// </summary>
    /// <param name = "_recId">Recid of temp talbe.</param>
    /// <returns>True if exist, otherwise false.</returns>
    public static boolean exist(RecId _recId)
    {
        TransitDocumentSalesTaxForm_IN  taxForm;

        select firstOnly RecId from taxForm
            where taxForm.RecId == _recId;

        return taxForm.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the form record with the given RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the form.
    /// </param>
    /// <param name="_forUpdate">
    /// Whether the retrieved form record is for updating purpose, false by default.
    /// </param>
    /// <returns>
    /// The form record.
    /// </returns>
    public static TransitDocumentSalesTaxForm_IN find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        TransitDocumentSalesTaxForm_IN  salesTaxForm;

        if (_recId)
        {
            salesTaxForm.selectForUpdate(_forUpdate);

            select firstOnly salesTaxForm
                where salesTaxForm.RecId == _recId;
        }

        return salesTaxForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTmpSalesTaxForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the form by a temp table buffer.
    /// </summary>
    /// <param name="_tmpForm">
    /// The temp table buffer for the form.
    /// </param>
    /// <returns>
    /// The form record.
    /// </returns>
    public static TransitDocumentSalesTaxForm_IN findByTmpSalesTaxForm(
        TmpTransitDocumentSalesTaxForm_IN _tmpForm)
    {
        TransitDocumentSalesTaxForm_IN  form;

        select firstOnly form
            where form.Direction    == _tmpForm.Direction
               && form.FormType     == _tmpForm.SalesTaxFormTypes
               && form.SeriesNumber == _tmpForm.SeriesNumber
               && form.FormNumber   == _tmpForm.FormNumber
               && form.FormDate     == _tmpForm.FormDate
               && form.FormValue    == _tmpForm.FormValue;

        return form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReverseForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the reverse form of the original form, or create a new one if not
    /// found. Compared to the original form, the reverse form has the reversed
    /// direction and remains the same values in all other columns.
    /// </summary>
    /// <param name="_originalForm">
    /// The original form.
    /// </param>
    /// <returns>
    /// The <c>TransitDocumentSalesTaxForm_IN</c> record for the reverse form.
    /// </returns>
    public static TransitDocumentSalesTaxForm_IN findOrCreateReverseForm(
        TransitDocumentSalesTaxForm_IN  _originalForm)
    {
        FormTrackingBasis_IN            reverseDirection;
        TransitDocumentSalesTaxForm_IN  reverseForm;

        reverseDirection = TransitDocumentSalesTaxForm_IN::reverseDirection(_originalForm.Direction);

        ttsBegin;

        select firstOnly reverseForm
            where reverseForm.Direction    == reverseDirection
               && reverseForm.FormType     == _originalForm.FormType
               && reverseForm.SeriesNumber == _originalForm.SeriesNumber
               && reverseForm.FormNumber   == _originalForm.FormNumber
               && reverseForm.FormDate     == _originalForm.FormDate
               && reverseForm.FormValue    == _originalForm.FormValue;

        if (!reverseForm.RecId)
        {
            // If not found, create a new one
            reverseForm.Direction    = reverseDirection;
            reverseForm.FormType     = _originalForm.FormType;
            reverseForm.SeriesNumber = _originalForm.SeriesNumber;
            reverseForm.FormNumber   = _originalForm.FormNumber;
            reverseForm.FormDate     = _originalForm.FormDate;
            reverseForm.FormValue    = _originalForm.FormValue;

            reverseForm.insert();
        }

        ttsCommit;

        return reverseForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reverse direction.
    /// </summary>
    /// <param name="_direction">
    /// The form direction to be reversed.
    /// </param>
    /// <returns>
    /// The reverse direction.
    /// </returns>
    public static FormTrackingBasis_IN reverseDirection(FormTrackingBasis_IN _direction)
    {
        if (_direction == FormTrackingBasis_IN::FormIssuable)
        {
            // To issue -> To receive
            return FormTrackingBasis_IN::FormReceivable;
        }

        // To receive -> To issue
        return FormTrackingBasis_IN::FormIssuable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return strFmt("@SYS102169");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4880652</DeveloperDocumentation>
	<Label>@SYS72439</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>FormType</TitleField1>
	<TitleField2>Direction</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SeriesNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FormTracking</Name>
			<Label>@SYS72439</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SeriesNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FormValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Direction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FormTrackingBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FormDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTaxFormDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesTaxFormNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FormType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SeriesNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesTaxFormSeries_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormValue</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransitDocumentFormValue_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FormIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Direction</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SeriesNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FormNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FormDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FormType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FormValue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTaxFormTypes_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTaxFormTypes_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FormType</Name>
					<Field>FormType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>