<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAActivitySetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAActivitySetup extends common
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssignedActivityResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the activity resource names of the assigned activity.
    /// </summary>
    /// <param name="set">
    /// Whether to set the resource names.
    /// </param>
    /// <param name="resourceNames">
    /// resource names.
    /// </param>
    /// <returns>
    /// The worker names.
    /// </returns>
    public edit String255 getAssignedActivityResources(boolean set = false, Name resourceNames="")
    {
        ResAssignment            assignment;
        PSAProjSchedRole         psaProjSchedRole;
        smmActivities            smmActivities;
        str                      Name;
        str                      separator;

        while select RecId, Name from psaProjSchedRole
            exists join ActivityResource from assignment
                where assignment.ActivityResource == psaProjSchedRole.RecId
                    exists join ActivityNumber from smmActivities
                        where smmActivities.RecId == assignment.Activity
                            && smmActivities.ActivityNumber == this.ActivityNumber
        {
            Name += separator + psaProjSchedRole.Name;
            separator = ", ";
        }

        return Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the list of assigned activity resoruces for this activity.
    /// </summary>
    /// <param name = "_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <param name="_includeGenericResource">
    /// Include generic resource booking hours if true.
    /// </param>
    /// <returns></returns>
    public List getAssignedActivityResource(ResCommitType _commitType = ResCommitType::HardBook, boolean _includeGenericResource = true)
    {
        ResAssignment       assignment;
        PSAProjSchedRole    psaProjSchedRole;
        smmActivities       smmActivities;
        List                assignedActivityResourceList = new List(Types::Int64);

        if (_includeGenericResource)
        {
            while select RecId from psaProjSchedRole
                exists join ActivityResource, CommitType from assignment
                    where (_commitType  == ResCommitType::AnyType || assignment.CommitType == _commitType)
                        && assignment.ActivityResource == psaProjSchedRole.RecId
                        exists join ActivityNumber from smmActivities
                            where smmActivities.RecId == assignment.Activity
                                && smmActivities.ActivityNumber == this.ActivityNumber
            {
                assignedActivityResourceList.addEnd(psaProjSchedRole.RecId);
            }
        }
        else
        {
            while select RecId from psaProjSchedRole
                where psaProjSchedRole.Resource
                exists join ActivityResource, CommitType from assignment
                    where (_commitType  == ResCommitType::AnyType || assignment.CommitType == _commitType)
                        && assignment.ActivityResource == psaProjSchedRole.RecId
                        exists join ActivityNumber from smmActivities
                            where smmActivities.RecId == assignment.Activity
                                && smmActivities.ActivityNumber == this.ActivityNumber
            {
                assignedActivityResourceList.addEnd(psaProjSchedRole.RecId);
            }
        }
        return assignedActivityResourceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDate</Name>
				<Source><![CDATA[
    public void initDate(HierarchyTreeTable _hierarchyTreeTable, Common _common)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        PSAActivitySetup    psaActivitySetup;
        smmActivities       smmActivities;
        ProjTable           projTable;
        SalesQuotationTable salesQuotationTable;

        switch (_common.TableId)
        {
            case tableNum(ProjTable):
                projTable       = _common;
                this.CalendarId = projTable.psaSchedCalendarId;
                break;

            case tableNum(SalesQuotationTable):
                salesQuotationTable = _common;
                this.CalendarId     = salesQuotationTable.psaSchedCalendarId;
                break;
        }

        if (_hierarchyTreeTable)
        {
            hierarchyTreeTable = HierarchyTreeTable::findParentElement(_hierarchyTreeTable);
            if (hierarchyTreeTable.ParentElementNumber == '')
            {
                if (projTable)
                {
                    this.psaSchedStart      = projTable.psaSchedStartDate;
                    this.psaSchedEnd        = projTable.psaSchedEndDate;
                    this.ActivityDuration   = projTable.psaSchedDuration;
                }
                else
                {
                    this.psaSchedStart      = salesQuotationTable.psaEstProjStartDate;
                    this.psaSchedEnd        = salesQuotationTable.psaEstProjEndDate;
                    this.ActivityDuration   = salesQuotationTable.psaEstdProjDuration;
                }
            }
            else
            {
                select psaActivitySetup
                    join ActivityNumber, RecId from smmActivities
                        where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
                            && smmActivities.RecId == hierarchyTreeTable.RefRecId;

                if (psaActivitySetup)
                {
                    this.psaSchedStart    = psaActivitySetup.psaSchedStart;
                    this.psaSchedEnd      = psaActivitySetup.psaSchedEnd;
                    this.ActivityDuration = psaActivitySetup.ActivityDuration;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes PSAActivitySetup and writes to database
    /// </summary>
    public void initValue()
    {
        this.NumberOfResources = 1;

        super();

        this.ElementNodeType = ElementNodeType::Activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsLeafNode</Name>
				<Source><![CDATA[
    private boolean IsLeafNode()
    {
        boolean isLeaf = true;
        HierarchyTreeTable currTreeTable;
        HierarchyTreeTable childTreeTable;
        smmActivities smmCurrActivities;

        select firstonly RecId, ElementNumber from currTreeTable
            exists join RecId from smmCurrActivities
            where currTreeTable.HierarchyId == this.HierarchyId
                && smmCurrActivities.RecId == currTreeTable.RefRecId
                && smmCurrActivities.ActivityNumber == this.ActivityNumber;

        if (currTreeTable)
        {
            select firstOnly RecId from childTreeTable
                where childTreeTable.ParentElementNumber == currTreeTable.ElementNumber;
            if (childTreeTable)
            {
                isLeaf = false;
            }
        }
        return isLeaf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>localDateFmt</Name>
				<Source><![CDATA[
    private str localDateFmt(date _date)
    {
        return date2str(_date, -1, -1, -1, -1, -1, -1, DateFlags::FormatAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the remaining hours for current activity.
    /// </summary>
    /// <param name="_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <param name="_includeGenericResource">
    /// Include generic resource booking hours if true.
    /// </param>
    /// <returns>
    /// The remaining hours of current activity.
    /// </returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    display Hours remainingHours(ResCommitType _commitType = ResCommitType::HardBook, boolean _includeGenericResource = true)
    {
        return (this.Effort - this.sumHours(_commitType, _includeGenericResource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the remaining seconds for current activity.
    /// </summary>
    /// <param name="_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <param name="_includeGenericResource">
    /// Include generic resource booking hours if true.
    /// </param>
    /// <returns>
    /// The remaining seconds of current activity.
    /// </returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    public real remainingSeconds(ResCommitType _commitType = ResCommitType::HardBook, boolean _includeGenericResource = true)
    {
        return ((this.Effort * #SecondsPerHour) - this.sumSeconds(_commitType, _includeGenericResource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dispaly the total assigned hours for current activity.
    /// </summary>
    /// <param name="_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <param name="_includeGenericResource">
    /// Include generic resource booking hours if true.
    /// </param>
    /// <returns>
    /// Sum of total assigned hours for current activity.
    /// </returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    display Hours sumHours(ResCommitType _commitType = ResCommitType::HardBook, boolean _includeGenericResource = true)
    {
        real assignedSeconds;

        #TimeConstants

        assignedSeconds = this.sumSeconds(_commitType, _includeGenericResource);

        return assignedSeconds / #SecondsPerHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the total assigned seconds for current activity.
    /// </summary>
    /// <param name = "_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <param name = "_includeGenericResource">
    /// Include generic resource booking hours if true.
    ///</param>
    /// <returns>
    /// Sum of total assigned seconds for current activity.
    ///</returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    public real sumSeconds(ResCommitType _commitType = ResCommitType::HardBook, boolean _includeGenericResource = true)
    {
        ResAssignmentView   resAssignmentView;
        smmActivities       smmActivities;
        PSAProjSchedRole    psaProjSchedRole;

        if (_includeGenericResource)
        {
            select sum(Capacity) from resAssignmentView
                where resAssignmentView.CommitType == _commitType
                    exists join smmActivities
                        where smmActivities.ActivityNumber == this.ActivityNumber
                            && resAssignmentView.Activity == smmActivities.RecId;
        }
        else
        {
            select sum(Capacity) from resAssignmentView
                where resAssignmentView.CommitType == _commitType
                    exists join smmActivities
                        where smmActivities.ActivityNumber == this.ActivityNumber
                            && resAssignmentView.Activity == smmActivities.RecId
                            exists join psaProjSchedRole
                                where psaProjSchedRole.RecId == resAssignmentView.ActivityResource
                                    && psaProjSchedRole.Resource;
        }

        return resAssignmentView.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumHoursForActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total assigned hours for current activity for the specified activity resoruce.
    /// </summary>
    /// <param name = "_activityResource">
    /// User specified activity resource which assigns to the activity.
    /// </param>
    /// <param name="_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <returns>
    /// Sum of total assigned hours for current activity for the specified activity resource.
    /// </returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    public Hours sumHoursForActivityResource(activityresourcerecid _activityResource, ResCommitType _commitType = ResCommitType::HardBook)
    {
        real assignedSeconds;

        #TimeConstants

        assignedSeconds = this.sumSecondsForActivityResource(_activityResource, _commitType);

        return assignedSeconds / #SecondsPerHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumSecondsForActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total assigned seconds for current activity for the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">
    /// User specified activity resource which assigns to the activity.
    /// </param>
    /// <param name = "_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <returns>
    /// Sum of total assigned seconds for current activity for the specified activity resource.
    ///</returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    public real sumSecondsForActivityResource(activityresourcerecid _activityResource, ResCommitType _commitType = ResCommitType::HardBook)
    {
        ResAssignmentView       resAssignmentView;
        smmActivities           smmActivities;
        PSAProjSchedRole        psaProjSchedRole;

        select sum(Capacity) from resAssignmentView
            where (_commitType  == ResCommitType::AnyType || resAssignmentView.CommitType == _commitType)
                exists join smmActivities
                    where smmActivities.ActivityNumber == this.ActivityNumber
                        && resAssignmentView.Activity == smmActivities.RecId
                        exists join psaProjSchedRole
                            where psaProjSchedRole.RecId == resAssignmentView.ActivityResource
                                && psaProjSchedRole.RecId == _activityResource;

        return resAssignmentView.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignmentStartDateForActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the specified activity resoruce assigment start date.
    /// </summary>
    /// <param name = "_activityResource">
    /// User specified activity resource which assigns to the activity.
    /// </param>
    /// <param name = "_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <returns>
    /// The specified activity resource assigned start date.
    ///</returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    public TransDate getAssignmentStartDateForActivityResource(activityresourcerecid _activityResource, ResCommitType _commitType = ResCommitType::HardBook)
    {
        ResAssignmentView       resAssignmentView;
        smmActivities           smmActivities;
        PSAProjSchedRole        psaProjSchedRole;

        select firstonly Day from resAssignmentView
            order by Day
            where (_commitType  == ResCommitType::AnyType || resAssignmentView.CommitType == _commitType)
                exists join smmActivities
                    where smmActivities.ActivityNumber == this.ActivityNumber
                        && resAssignmentView.Activity == smmActivities.RecId
                        exists join psaProjSchedRole
                            where psaProjSchedRole.RecId == resAssignmentView.ActivityResource
                                && psaProjSchedRole.RecId == _activityResource;

        if (!resAssignmentView)
        {
            throw error(strFmt("@Res:ActivityResourceIsNotAssignedToTask", _activityResource, this.ActivityNumber));
        }

        return DateTimeUtil::date(resAssignmentView.Day);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignmentEndDateForActivityResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the specified activity resoruce assigment end date.
    /// </summary>
    /// <param name = "_activityResource">
    /// User specified activity resource which assigns to the activity.
    /// </param>
    /// <param name = "_commitType">
    /// CommitType by default is hard, but for quotation should be soft bookings.
    /// </param>
    /// <returns>
    /// The specified activity resource assigned end date.
    ///</returns>
    [
        SysClientCacheDataMethodAttribute(true)
    ]
    public TransDate getAssignmentEndDateForActivityResource(activityresourcerecid _activityResource, ResCommitType _commitType = ResCommitType::HardBook)
    {
        ResAssignmentView       resAssignmentView;
        smmActivities           smmActivities;
        PSAProjSchedRole        psaProjSchedRole;

        select firstonly Day from resAssignmentView
            order by Day desc
            where (_commitType  == ResCommitType::AnyType || resAssignmentView.CommitType == _commitType)
                exists join smmActivities
                    where smmActivities.ActivityNumber == this.ActivityNumber
                        && resAssignmentView.Activity == smmActivities.RecId
                        exists join psaProjSchedRole
                            where psaProjSchedRole.RecId == resAssignmentView.ActivityResource
                                && psaProjSchedRole.RecId == _activityResource;

        if (!resAssignmentView)
        {
            throw error(strFmt("@Res:ActivityResourceIsNotAssignedToTask", _activityResource, this.ActivityNumber));
        }

        return DateTimeUtil::date(resAssignmentView.Day);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update extended attributes of the Activity record that is associated to a Project or Quotation
    /// </summary>
    /// <param name="_skipReservationUpdate">
    /// Determines whether related Reservation records will be updated along with the Task update
    /// </param>
    /// <param name="_commitType">
    /// Commit type like hard or soft booking type which will be used for scheduling status update.
    /// </param>
    /// <remarks>
    /// Passing TRUE in the argument may cause the Reservation data to be misaligned with the Task data
    /// because reactive update of Reservation data will be skipped.
    /// </remarks>
    public void update(boolean _skipReservationUpdate = false, ResCommitType _commitType = ResCommitType::HardBook)
    {
        ResAssignmentView   assignmentView;
        smmActivities       smmActivities;
        Num                 activityRefTypeId;
        boolean             hasStartDateChanged, isProject, effortShrink, durationShrink;
        SchedFromDate       origStartDate;
        SchedToDate         origEndDate;
        Hours               origEfforts, origDuration;
        Days                origActivityDuration, newActivityDuration;
        CalendarId          engagementCalendarId;
        boolean             submittedResourceWorkflow;

        if (!_skipReservationUpdate)
        {
            select firstonly Activity from assignmentView
            exists join smmActivities
                where smmActivities.ActivityNumber == this.ActivityNumber
                    && assignmentView.Activity == smmActivities.RecId;

            if (assignmentView && this.IsLeafNode())
            {
                origStartDate = this.orig().psaSchedStart;
                origEndDate = this.orig().psaSchedEnd;
                origEfforts = this.orig().Effort;
                origDuration = this.orig().ActivityDuration;

                if ((this.psaSchedStart     != origStartDate)
                    || (this.psaSchedEnd    != origEndDate)
                    || (this.Effort         != origEfforts))
                {
                    PSARSEntityType resEntityType = ActivityFacade::getActivityType(assignmentView.Activity);
                    isProject = (resEntityType == PSARSEntityType::Project);

                    // Move assignment only needs to carry out for the following conditions.
                    if ((this.PSASchedStart     != origStartDate)
                        || (this.Effort         <  origEfforts)
                        || (this.PSASchedEnd < origEndDate))
                    {
                        boolean isResourceWorkflowEnabled = ResRequestHelper::isWorkflowEnabled();
                        if (isResourceWorkflowEnabled)
                        {
                            ResRequestHelper::validateWorkflowConfiguration();
                        }

                        activityRefTypeId = ActivityFacade::getId(assignmentView.Activity);

                        hasStartDateChanged = ((this.psaSchedStart == origStartDate) ? false : true);
                        effortShrink = this.Effort < origEfforts ? true : false;

                        if (isProject)
                        {
                            engagementCalendarId = ProjTable::find(activityRefTypeId).PSASchedCalendarId;
                        }
                        else
                        {
                            engagementCalendarId = SalesQuotationTable::find(activityRefTypeId).PSASchedCalendarId;
                        }

                        if (!engagementCalendarId)
                        {
                            origActivityDuration = origEndDate - origStartDate + 1;
                            newActivityDuration = this.psaSchedEnd - this.psaSchedStart + 1;
                        }
                        else
                        {
                            origActivityDuration = real2int(roundUp(origDuration, 1));
                            newActivityDuration = real2int(roundUp(this.ActivityDuration, 1));
                        }
                        durationShrink = newActivityDuration < origActivityDuration ? true : false;

                        // Get the assigned resources to this task.
                        List assignedActivityResourceIdList = new List(Types::String);
                        this.getAssignedActivityResourceIdList(assignedActivityResourceIdList,
                            assignmentView.Activity);

                        ProjResourceMoveTasksAssignment projResourceMoveTasksAssignment = new ProjResourceMoveTasksAssignment(
                            activityRefTypeId, isProject, assignmentView.Activity,
                            this.Effort, this.PSASchedStart, this.PSASchedEnd,
                            engagementCalendarId, newActivityDuration, !hasStartDateChanged,
                            effortShrink, durationShrink);

                        projResourceMoveTasksAssignment.moveAllTasksAssign();

                        if (isResourceWorkflowEnabled)
                        {
                            // Validate and submit resource request for assignment records which are not backed up booking records
                            submittedResourceWorkflow = this.validateAndSubmitResourceRequest(assignedActivityResourceIdList,
                                origStartDate, origEndDate, assignmentView.Activity);
                        }
                        else
                        {
                            // Add matching hard booking records if missing.
                            this.addBookingHoursFromAssignmentHours(assignedActivityResourceIdList,
                                origStartDate, origEndDate, assignmentView.Activity);
                        }

                        if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
                        {
                            // Update ResRollup cache table for the change.
                            this.updateResRollupRecords(assignedActivityResourceIdList,
                                origStartDate, origEndDate, assignmentView.Activity);
                        }
                    }
                }
            }
        }
        super();

        // Update this activity scheduling status if resource request is submitted to workflow.
        if (submittedResourceWorkflow)
        {
            ProjActivityCapacity::updateScheduleStatusByActivity(assignmentView.Activity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedActivityResourceIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get assigned activity resource ID list which assigned to the specified activity.
    /// </summary>
    /// <param name = "_assignedActivityResourceIdList">Assigned activity resoruce ID list.</param>
    /// <param name = "_activity">The specified WBS task activity record Id.</param>
    protected void getAssignedActivityResourceIdList(List _assignedActivityResourceIdList, ActivityRecId _activity)
    {
        if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            ActivityRecId rootActivityRecId = ActivityFacade::getRootActivity(_activity);

            PSAProjSchedRole teamTable;

            while select RecId, Resource from teamTable
                where teamTable.RootActivity == rootActivityRecId
            {
                _assignedActivityResourceIdList.addEnd(
                    strFmt(ResUtil::activityResourceIdStrFormat, int642Str(_activity), int642Str(teamTable.Resource), int642Str(teamTable.RecId)));
            }
        }
        else
        {
            ResAssignment                   resAssignment;
            ResActivityResourceDetailView   resourceDetilView;

            while select ActivityResource from resAssignment
            group by resAssignment.ActivityResource, resourceDetilView.ActivityResourceId
                where resAssignment.Activity == _activity
            join ActivityResourceId from resourceDetilView
                where resourceDetilView.ActivityResource == resAssignment.ActivityResource
            {
                _assignedActivityResourceIdList.addEnd(resourceDetilView.ActivityResourceId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndSubmitResourceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate and submit resource request for staffed resource if workflow is turned on.
    /// </summary>
    /// <param name = "_assignedActivityResourceIdList">Assigned activity resoruce ID list.</param>
    /// <param name = "_originalStart">Original task start date.</param>
    /// <param name = "_originalEnd">Original task end date.</param>
    /// <param name = "_activity">Activity record ID.</param>
    /// <returns>true if any resource request has been submitted; otherwise false.</returns>
    private boolean validateAndSubmitResourceRequest(List _assignedActivityResourceIdList,
        SchedFromDate _originalStart, SchedToDate _originalEnd, ActivityRecId _activity)
    {
        boolean submittedResourceWorkflow;

        SchedFromDate earliestDate = _originalStart <= this.PSASchedStart ? _originalStart : this.PSASchedStart;
        SchedToDate latestDate = _originalEnd >= this.PSASchedEnd ? _originalEnd : this.PSASchedEnd;

        ListEnumerator assignedActivityResourceIdListEnum = _assignedActivityResourceIdList.getEnumerator();

        while (assignedActivityResourceIdListEnum.moveNext())
        {
            smmActivities activity = smmActivities::find(this.ActivityNumber);
            ActivityRecId activityRecId = activity.RecId;
            activityresourcerecid activityResource = ResUtil::getActivityResourceRecId(assignedActivityResourceIdListEnum.current());

            // Resource Request will only be submitted for staffed resource.
            if (ResUtil::getResourceRecId(assignedActivityResourceIdListEnum.current()) != 0)
            {
                utcdatetime validateFromDateTime = DateTimeUtil::newDateTime(earliestDate, 0);
                utcdatetime validateToDateTime = DateTimeUtil::newDateTime(latestDate, #LastSecondOfTheDay);

                if (this.hasHardAssignmentWithNoHardBookingRecords(activityResource, activityRecId, validateFromDateTime,
                        validateToDateTime))
                {
                    ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(tableStr(PSAActivitySetup));
                    using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
                        .activityContext(ProjOpsFinancialsInstrumentationActivites::ResRequestWorkflowSubmitForAssignment))
                    {
                        submittedResourceWorkflow = true;

                        // Add resource request.
                        ResRequest request = ResRequestHelper::addResourceRequest();

                        // Add resource request lines.
                        ResRequestHelper::addResourceRequestLineForAssignment(request, activityResource, activityRecId,
                            validateFromDateTime, validateToDateTime, ResCommitType::HardBook);

                        // Submit workflow.
                        WorkflowComment workflowComment = strFmt('@Res:MoveTaskEnteredRequest',
                            date2StrUsr(_originalStart, DateFlags::FormatAll),
                            date2StrUsr(this.PSASchedStart, DateFlags::FormatAll),
                            Activity.Purpose,
                            this.ActivityNumber,
                            enum2Str(ActivityFacade::getActivityType(activityRecId)),
                            ActivityFacade::getId(ActivityRecId));

                        boolean workflowIsSubmitted = ResRequestHelper::submitWorkflow(request.RecId, workflowtypestr(ResRequest), true, workflowComment);

                        // Remove hard booked assignment which are added to resource request.
                        this.removeHardAssignmentWithNoHardBookingRecords(activityResource, activityRecId, validateFromDateTime,
                            validateToDateTime);
                    }
                }
            }
            else
            {
                // Add matching hard booking records if it's not exists.
                ResUtil::addBookingHoursFromAssignmentHours(activityRecId, activityResource,
                    DateTimeUtil::newDateTime(this.PSASchedStart, 0), DateTimeUtil::newDateTime(this.PSASchedEnd, #LastSecondOfTheDay));
            }
        }

        return submittedResourceWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBookingHoursFromAssignmentHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add matching hard booking records if it's not exists.
    /// </summary>
    /// <param name = "_assignedActivityResourceIdList">Assigned activity resoruce ID list.</param>
    /// <param name = "_originalStart">Original task start date.</param>
    /// <param name = "_originalEnd">Original task end date.</param>
    /// <param name = "_activity">Activity record ID.</param>
    private void addBookingHoursFromAssignmentHours(List _assignedActivityResourceIdList,
        SchedFromDate _originalStart, SchedToDate _originalEnd, ActivityRecId _activity)
    {
        ListEnumerator assignedActivityResourceIdListEnum = _assignedActivityResourceIdList.getEnumerator();

        while (assignedActivityResourceIdListEnum.moveNext())
        {
            ActivityRecId activity = smmActivities::find(this.ActivityNumber).RecId;
            activityresourcerecid activityResource = ResUtil::getActivityResourceRecId(assignedActivityResourceIdListEnum.current());

            // Add matching hard booking records if missing.
            ResUtil::addBookingHoursFromAssignmentHours(activity, activityResource,
                DateTimeUtil::newDateTime(this.PSASchedStart, 0), DateTimeUtil::newDateTime(this.PSASchedEnd, #LastSecondOfTheDay));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasHardAssignmentWithNoHardBookingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if the specified activity resoruce has any hard assignment records with no backup hard booking record.
    /// </summary>
    /// <param name = "_activityResource"><c>PSAProjSchedRole</c> record ID.</param>
    /// <param name = "_activity"><c>smmActivities</c> record ID for the WBS task.</param>
    /// <param name = "_commitTypeToConvert">Target assingment commit type to be converted.</param>
    /// <param name = "_start">Assignment start date time.</param>
    /// <param name = "_end">Assignment end date time.</param>
    /// <returns>true if it finds hard assignment records with no backup hard booking record; otherwise false.</returns>
    private boolean hasHardAssignmentWithNoHardBookingRecords(activityresourcerecid _activityResource, ActivityRecId _activity,
        utcdatetime _startTime, utcdatetime _endTime)
    {
        ResAssignment   resAssignment;
        ResBooking      resbooking;

        ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

        select firstonly RecId from resAssignment
            where resAssignment.ActivityResource == _activityResource
                && resAssignment.Activity == _activity
                && resAssignment.commitType ==  ResCommitType::HardBook
                && resAssignment.Hour >= _startTime
                && resAssignment.Hour <= _endTime
        notexists join resBooking
            where resBooking.Activity == rootActivity
                && resBooking.ActivityResource == _activityResource
                && resBooking.CommitType == ResCommitType::HardBook
                && resBooking.Hour == resAssignment.Hour;

        return resAssignment ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeHardAssignmentWithNoHardBookingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the sepcify activity resource hard assignment records which has no backup hard booking record.
    /// </summary>
    /// <param name = "_activityResource"><c>PSAProjSchedRole</c> record ID.</param>
    /// <param name = "_activity"><c>smmActivities</c> record ID for the WBS task.</param>
    /// <param name = "_commitTypeToConvert">Target assingment commit type to be converted.</param>
    /// <param name = "_start">Assignment start date time.</param>
    /// <param name = "_end">Assignment end date time.</param>
    private void removeHardAssignmentWithNoHardBookingRecords(activityresourcerecid _activityResource, ActivityRecId _activity,
        utcdatetime _startTime, utcdatetime _endTime)
    {
        ResAssignment   resAssignment;
        ResBooking      resbooking;
        ResUtil::skipDatabaseLogAndEvent(resAssignment);

        ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);

        delete_from resAssignment
            where resAssignment.Activity == _activity
                && resAssignment.ActivityResource == _activityResource
                && resAssignment.commitType ==  ResCommitType::HardBook
                && resAssignment.Hour >= _startTime
                && resAssignment.Hour <= _endTime
        notexists join resBooking
            where resBooking.Activity == rootActivity
                && resBooking.ActivityResource == _activityResource
                && resBooking.CommitType == ResCommitType::HardBook
                && resBooking.Hour == resAssignment.Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResRollupRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>ResRollup</c> table records due to task date time change.
    /// </summary>
    /// <param name = "_assignedActivityResourceIdList">Assigned activity resoruce ID list.</param>
    /// <param name = "_originalStart">Original task start date.</param>
    /// <param name = "_originalEnd">Original task end date.</param>
    /// <param name = "_activity">Activity record ID.</param>
    private void updateResRollupRecords(List _assignedActivityResourceIdList,
        SchedFromDate _originalStart, SchedToDate _originalEnd, ActivityRecId _activity)
    {
        SchedFromDate   earliestDate;
        SchedToDate     latestDate;

        earliestDate = _originalStart <= this.PSASchedStart ? _originalStart : this.PSASchedStart;
        latestDate = _originalEnd >= this.PSASchedEnd ? _originalEnd : this.PSASchedEnd;

        ListEnumerator assignedActivityResourceIdListEnum = _assignedActivityResourceIdList.getEnumerator();

        while (assignedActivityResourceIdListEnum.moveNext())
        {
            utcdatetime start = AVTimeframe::getTimeframe(
                DateTimeUtil::newDateTime(earliestDate, 0), AVTimeframeType::Month).start();
            utcdatetime end = AVTimeframe::getTimeframe(
                DateTimeUtil::newDateTime(latestDate, #LastSecondOfTheDay), AVTimeframeType::Month).end();

            container arguments = [assignedActivityResourceIdListEnum.current(), start, end];

            Global::runAsync(classNum(ResRollUpWriter),
                staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), arguments);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates field values.
    /// </summary>
    /// <param name = "_fieldIdToCheck">The Id of the field that gets validated.</param>
    /// <returns>True if the specified field pass the validation; otherwise false.</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean        ret;

        ret = super(_fieldIdToCheck);
        switch (_fieldIdToCheck)
        {
            case (fieldNum(PSAActivitySetup, psaSchedEnd)):
                if (this.psaSchedEnd && this.psaSchedStart && this.psaSchedEnd < this.psaSchedStart)
                {
                    ret = checkFailed(strFmt("@SYS4006330",
                                             this.localDateFmt(this.psaSchedEnd),
                                             this.localDateFmt(this.psaSchedStart)));
                }
                if (!WorkCalendarDate::isDateOpen(this.CalendarId, this.psaSchedEnd))
                {
                    ret = checkFailed(strFmt("@SYS4008605",
                                             this.localDateFmt(this.psaSchedEnd),
                                             this.CalendarId));
                }
                break;
            case (fieldNum(PSAActivitySetup, psaSchedStart)):
                if (this.psaSchedStart && this.psaSchedEnd && this.psaSchedStart > this.psaSchedEnd)
                {
                    ret = checkFailed(strFmt("@SYS4006331",
                                             this.localDateFmt(this.psaSchedStart),
                                             this.localDateFmt(this.psaSchedEnd)));
                }
                if (!WorkCalendarDate::isDateOpen(this.CalendarId, this.psaSchedStart))
                {
                    ret = checkFailed(strFmt("@SYS4008616",
                                             this.localDateFmt(this.psaSchedStart),
                                             this.CalendarId));
                }
                break;
            case (fieldNum(PSAActivitySetup, CategoryDefault)):
                if (ret)
                {
                    ret = ProjActivity::validateCategoryDefaultField(this.CategoryDefault);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the PSAActivitySetup record.
    /// </summary>
    /// <param name="_smmActivityNumber">
    /// Activity number.
    /// </param>
    /// <param name="_forupdate">
    /// Whether to update the record.
    /// </param>
    /// <returns>
    /// The PSAActivitySetup record.
    /// </returns>
    public static PSAActivitySetup findActivityNumber(
        smmActivityNumber   _smmActivityNumber,
        boolean             _forupdate = false)
    {
        PSAActivitySetup       psaActivitySetup = null;

        if (_smmActivityNumber)
        {
            psaActivitySetup.selectForUpdate(_forupdate);

            select firstonly psaActivitySetup
                where psaActivitySetup.ActivityNumber == _smmActivityNumber;
        }

        return psaActivitySetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>PSAActivitySetup</c> record by rec Id.
    /// </summary>
    /// <param name = "_recId">
    /// The rec Id of <c>PSAActivitySetup</c> table.
    /// </param>
    /// <param name = "_update">
    /// Wheter the return table table buffer can be updated.
    /// </param>
    /// <returns>
    /// The specific <c>PSAActivitySetup</c> table buffer.
    /// </returns>
    static PSAActivitySetup findRecId(  RefRecId    _recId,
                                        boolean     _update = false)
    {
        PSAActivitySetup  psaActivitySetup;

        psaActivitySetup.selectForUpdate(_update);

        if (_recId)
        {
            select firstonly psaActivitySetup
                where psaActivitySetup.RecId == _recId;
        }

        return psaActivitySetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjPlanVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields for the current activity setup record with values from the specified project WBS task version record.
    /// </summary>
    /// <param name="_projPlanVersion">
    /// The project WBS task version record.
    /// </param>
    public void initFromProjPlanVersion(ProjPlanVersion _task)
    {
        this.Effort = _task.TaskEffort;
        this.EffortAtComplete = _task.TaskEffortAtComplete;
        this.CostAtComplete = _task.TaskCostAtComplete;
        this.PSASchedStart = _task.TaskStartDate;
        this.PSASchedEnd = _task.TaskFinishDate;
        this.ActivityDuration = _task.TaskDuration;
        this.NumberOfResources = _task.NumberOfResources;
        this.CategoryDefault = _task.TaskCategory;
        this.ResourceCategory = _task.ResourceCategory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@PSA10745</DeveloperDocumentation>
	<Label>@PSA2635</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ActivityGroup</TitleField1>
	<TitleField2>ActivityNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Project</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Activity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MileStone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityDuration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Category</Name>
			<Label>@SYS69410</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mandatory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Activity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MileStone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Activity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MileStone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityDuration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElementNodeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SiblingNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EffortAtComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAtComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAHierarchyLevelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSANameLink</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSALevelDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSALevelName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSASubproject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Effort</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceElementNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentElementNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElementNodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ElementNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HierarchyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSASchedStart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSASchedEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTemplate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSASchedFromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSASchedToTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfResources</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>REF</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Schedule</Name>
			<Label>@SYS6793</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityDuration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DurationToEnd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreCalendar</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Activity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAActivityId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ActivityDuration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Hours</ExtendedDataType>
			<Label>@SYS52550</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAActivityGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConstraintType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>PSAConstraintType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAtComplete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalCostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DurationToEnd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSADurationToEnd</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Effort</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Hours</ExtendedDataType>
			<Label>@PSA3078</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EffortAtComplete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Hours</ExtendedDataType>
			<Label>@PSA3078</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ElementNodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ElementNodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ElementNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ElementNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HierarchyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HierarchyIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreCalendar</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAIgnoreCalendar</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityIsTemplate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Mandatory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22073</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MileStone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS26744</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NumberOfResources</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberOfResources</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentElementNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ElementNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSAConstraintDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAConstraintDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAConstraintType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>PSAConstraintType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAHierarchyLevelType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PSAHierarchyLevelType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSALevelDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSALevelName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSANameLink</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@PSA3326</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSASchedEnd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>PSASchedFromTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedFromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PSASchedStart</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>PSASchedToTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedToTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAScheduled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSASchedule</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>PSAScheduled</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSASubproject</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PSA3325</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceElementNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ElementNumber</ExtendedDataType>
			<Label>@PSA3376</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SiblingNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ActiivityIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryDefault</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryDefault</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>smmActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalendarId</Name>
					<SourceEDT>CalendarId</SourceEDT>
					<Field>CalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PSASchedRole</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PSASchedRole</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>