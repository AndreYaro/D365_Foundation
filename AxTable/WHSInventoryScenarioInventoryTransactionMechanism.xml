<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryScenarioInventoryTransactionMechanism</Name>
	<SourceCode>
		<Declaration><![CDATA[
using IFeature = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation.IFeature;

[SysObsolete('As of version 10.0.41, inventory transactions are deprecated for tracking on-hand inventory for internal warehouse operations. Existing customers will be able to continue using inventory transactions after that version, but new features and bug fixes for this scenario will only be implemented for warehouse inventory transactions. Approximately one year after the release of version 10.0.41, support for inventory transactions will be removed, and all customers will be required to move to warehouse inventory transactions for tracking on-hand inventory for internal warehouse operations', false, 19\6\2024)]
public class WHSInventoryScenarioInventoryTransactionMechanism extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        if (this.isFirstWarehouseSpecificTransactionScenarioActivationCrossCompany())
        {
            this.onFirstWarehouseSpecificTransactionScenarioActivation();
        }

        // Features not supporting inventory transactions may override the default.
        this.WarehouseTransactionEnabledByDefault = (this.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction);

        super();

        ttscommit;

        WHSInventoryTransactionConfigurationProvider::resetIsWarehouseInventoryTransactionStackEnabledCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        if (this.isFirstWarehouseSpecificTransactionScenarioActivationCrossCompany())
        {
            this.onFirstWarehouseSpecificTransactionScenarioActivation();
        }

        super();

        ttscommit;

        WHSInventoryTransactionConfigurationProvider::resetIsWarehouseInventoryTransactionStackEnabledCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        WHSInventoryTransactionConfigurationProvider::resetIsWarehouseInventoryTransactionStackEnabledCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSInventoryScenarioInventoryTransactionMechanism find(WHSInventoryTransactionScenario _scenario, boolean _forupdate = false)
    {
        WHSInventoryScenarioInventoryTransactionMechanism scenarioTransactionMechanism;

        scenarioTransactionMechanism.selectForUpdate(_forupdate);

        select firstonly scenarioTransactionMechanism
            where scenarioTransactionMechanism.InventoryScenario == _scenario;

        return scenarioTransactionMechanism;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdate</Name>
				<Source><![CDATA[
    internal static WHSInventoryScenarioInventoryTransactionMechanism createOrUpdate(WHSInventoryTransactionScenario _scenario, WHSInventoryTransactionMechanism _transactionMechanism)
    {
        ttsbegin;

        WHSInventoryScenarioInventoryTransactionMechanism scenarioTransactionMechanism = WHSInventoryScenarioInventoryTransactionMechanism::find(_scenario, true);

        if (!scenarioTransactionMechanism)
        {
            scenarioTransactionMechanism.InventoryScenario = _scenario;
        }

        scenarioTransactionMechanism.InventoryTransactionMechanism = _transactionMechanism;
        scenarioTransactionMechanism.write();

        ttscommit;

        return scenarioTransactionMechanism;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionScenarios</Name>
				<Source><![CDATA[
    internal static void initTransactionScenarios()
    {
        DictEnum allScenariosDictEnum = new DictEnum(enumNum(WHSInventoryTransactionScenario));

        ttsbegin;

        WHSInventoryScenarioInventoryTransactionMechanism::deleteScenariosWithDisabledFeatures(allScenariosDictEnum);
        WHSInventoryScenarioInventoryTransactionMechanism::initByScenarioEnumValues(allScenariosDictEnum);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryTransactionMechanismToAllScenarios</Name>
				<Source><![CDATA[
    internal static void setInventoryTransactionMechanismToAllScenarios(WHSInventoryTransactionMechanismEnum _mechanism)
    {
        WHSInventoryScenarioInventoryTransactionMechanism scenarioMechanism;

        update_recordset scenarioMechanism
            setting InventoryTransactionMechanism = _mechanism;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWarehouseTransactionEnabledByDefault</Name>
				<Source><![CDATA[
    internal static void setWarehouseTransactionEnabledByDefault()
    {
        WHSInventoryScenarioInventoryTransactionMechanism scenarioMechanism;

        update_recordset scenarioMechanism
            setting WarehouseTransactionEnabledByDefault = NoYes::Yes
            where scenarioMechanism.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyScenarioUsesWarehouseSpecificInventoryTransactionsCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Any scenario uses warehouse-specific inventory transactions across all companies.
    /// </summary>
    /// <returns>
    /// true if any scenario uses warehouse-specific inventory transactions across all companies; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean anyScenarioUsesWarehouseSpecificInventoryTransactionsCrossCompany()
    {
        WHSInventoryScenarioInventoryTransactionMechanism scenarioTransactionMechanism;

        select firstonly crosscompany RecId from scenarioTransactionMechanism
            where scenarioTransactionMechanism.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction;

        return scenarioTransactionMechanism.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyScenarioUsesWarehouseSpecificInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Any scenario uses warehouse-specific inventory transactions in the current company.
    /// </summary>
    /// <returns>
    /// true if any scenario uses warehouse-specific inventory transactions in the current company; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean anyScenarioUsesWarehouseSpecificInventoryTransactions()
    {
        WHSInventoryScenarioInventoryTransactionMechanism scenarioTransactionMechanism;

        select firstonly RecId from scenarioTransactionMechanism
            where scenarioTransactionMechanism.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction;

        return scenarioTransactionMechanism.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyScenarioUsesInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Any scenario uses inventory transactions in the current company.
    /// </summary>
    /// <returns>
    /// true if any scenario uses inventory transactions in the current company; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean anyScenarioUsesInventoryTransactions()
    {
        WHSInventoryScenarioInventoryTransactionMechanism scenarioTransactionMechanism;

        select firstonly RecId from scenarioTransactionMechanism
            where scenarioTransactionMechanism.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::InventTrans;

        return scenarioTransactionMechanism.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteScenariosWithDisabledFeatures</Name>
				<Source><![CDATA[
    private static void deleteScenariosWithDisabledFeatures(DictEnum _allScenariosDictEnum)
    {
        WHSInventoryScenarioInventoryTransactionMechanism existingScenarioTransactionMechanism;
        while select forupdate existingScenarioTransactionMechanism
        {
            str featureClassName = _allScenariosDictEnum.value2FeatureClassName(existingScenarioTransactionMechanism.InventoryScenario);
            if (WHSInventoryScenarioInventoryTransactionMechanism::isFeatureEnabled(featureClassName))
            {
                continue;
            }

            existingScenarioTransactionMechanism.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initByScenarioEnumValues</Name>
				<Source><![CDATA[
    private static void initByScenarioEnumValues(DictEnum _allScenariosDictEnum)
    {
        WHSInventoryTransactionMechanism defaultTransactionMechanism = WHSInventoryTransactionMechanismEnum::InventTrans;

        for (int enumValueIndex = 0; enumValueIndex < _allScenariosDictEnum.values(); enumValueIndex++)
        {
            str featureClassName = _allScenariosDictEnum.index2FeatureClassName(enumValueIndex);
            if (!WHSInventoryScenarioInventoryTransactionMechanism::isFeatureEnabled(featureClassName))
            {
                continue;
            }

            WHSInventoryTransactionScenario scenario = _allScenariosDictEnum.index2Value(enumValueIndex);
            if (WHSInventoryScenarioInventoryTransactionMechanism::find(scenario))
            {
                continue;
            }

            WHSInventoryScenarioInventoryTransactionMechanism scenarioTransactionMechanism;
            scenarioTransactionMechanism.InventoryScenario = scenario;
            scenarioTransactionMechanism.InventoryTransactionMechanism = defaultTransactionMechanism;
            
            scenarioTransactionMechanism.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    private static boolean isFeatureEnabled(str _featureClassName)
    {
        boolean isFeatureEnabled = true; // no feature equals to feature being enabled

        if (_featureClassName != '')
        {
            IFeature featureInstance = DictClass::createObject(_featureClassName) as IFeature;
            if (featureInstance != null)
            {
                isFeatureEnabled = FeatureStateProvider::isFeatureEnabled(featureInstance);
            }
        }

        return isFeatureEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstWarehouseSpecificTransactionScenarioActivationCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the this is an attempt to use the warehouse-specific inventory transactions in the very first scenario across all companies.
    /// </summary>
    /// <returns>
    /// true if the current activation of the warehouse-specific inventory transactions is the very first one across all companies; otherwise, false.
    /// </returns>
    private boolean isFirstWarehouseSpecificTransactionScenarioActivationCrossCompany()
    {
        return this.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction
            && !WHSInventoryScenarioInventoryTransactionMechanism::anyScenarioUsesWarehouseSpecificInventoryTransactionsCrossCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFirstWarehouseSpecificTransactionScenarioActivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is executed when the very first scenario is attempted to use the warehouse-specific inventory transactions _across all companies_.
    /// </summary>
    /// <remarks>
    /// Method throws an exception if umitigated extension is found.
    /// </remarks>
    private void onFirstWarehouseSpecificTransactionScenarioActivation()
    {
        this.checkExtensionsAreCompatibleWithWarehouseSpecificInventoryTransactions();
        this.registerRequiredProcessAutomationJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExtensionsAreCompatibleWithWarehouseSpecificInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that customizations are compatible with the "Warehouse-specific inventory transactions" feature.
    /// </summary>
    /// <remarks>
    /// Method throws an exception if umitigated extension is found.
    /// </remarks>
    private void checkExtensionsAreCompatibleWithWarehouseSpecificInventoryTransactions()
    {
        boolean areExtensionsCompatible = WHSWarehouseInventoryTransactionFeatureExtensionValidator::checkExtensionsAreCompatible(true, false);

        if (!areExtensionsCompatible)
        {
            throw error("@WHSInventory:WHSWarehouseInventoryTransactionScenarioActivation_ExtensionValidationError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerRequiredProcessAutomationJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers (activates) the required process automation jobs.
    /// </summary>
    /// <remarks>
    /// Registration of the process automation job is a cross-company action. I.e. registrations happens once for all companies, not for each one individually.
    /// The method is idempotent.
    /// </remarks>
    private void registerRequiredProcessAutomationJobs()
    {
        // register transaction archival job.
        ProcessScheduleTypeRegistration::enableOrDisableType(WHSInventoryTransactionArchiverAutomationTypeRegistration::RegisteredTypeName, NoYes::Yes);

        // register archived reservations cleanup job.
        ProcessScheduleTypeRegistration::enableOrDisableType(WHSInventoryTransactionArchivedCleanupAutomationTypeRegistration::RegisteredTypeName, NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WHSInventory:WHSInventoryScenarioInventoryTransactionMechanism_DevDoc</DeveloperDocumentation>
	<Label>@WHSInventory:WHSInventoryScenarioInventoryTransactionMechanism_Label</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>InventoryScenario</TitleField1>
	<TitleField2>InventoryTransactionMechanism</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>InventoryScenarioIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<PrimaryIndex>InventoryScenarioIdx</PrimaryIndex>
	<ReplacementKey>InventoryScenarioIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventoryScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryScenario</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventoryTransactionScenario</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSInventoryTransactionScenarioEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventoryTransactionMechanism</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSInventoryTransactionMechanism</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSInventoryTransactionMechanismEnum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarehouseTransactionEnabledByDefault</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventoryScenarioIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventoryScenario</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventoryTransactionMechanismIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventoryTransactionMechanism</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>