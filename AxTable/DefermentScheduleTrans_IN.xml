<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DefermentScheduleTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DefermentScheduleTrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateInstallment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates installment amount based on the record buffer of  <c>DefermentScheduleTrans_IN</c> table.
    /// </summary>
    /// <param name="_dueDate">
    /// The transaction date.
    /// </param>
    /// <param name="_deferment">
    /// Record of <c>DefermentScheduleTrans_IN</c> table.
    /// </param>
    public void calculateInstallment(
        TransDate                   _dueDate,
        DefermentScheduleTrans_IN   _deferment = this)
    {
        Futures_IN                          future;
        TransDate                           dueDate;
        Amount                              installmentAmount;
        Amount                              remainAmount;
        Amount                              tmpAmount;
        Amount                              roundingAmount;
        DefermentScheduleTransLines_IN      defermentScheduleTransLine;
        PeriodUnit                          periodUnit;
        int                                 number;
        defermentScheduleTrans_IN           deferment;

        deferment       = _deferment;
        dueDate         = _dueDate;
        remainAmount    = deferment.vatdefermentAmount;

        delete_from defermentScheduleTransLine
            where defermentScheduleTransLine.TaxInformation == deferment.TaxInformation
               && defermentScheduleTransLine.FatherRecId    == deferment.RecId;

        if (deferment.InstallmentAmountInTotal != deferment.vatdefermentAmount)
        {
            ttsbegin;
            deferment.InstallmentAmountInTotal = deferment.vatdefermentAmount;
            deferment.update();
            ttscommit;
        }

        periodUnit   = deferment.getPeriodUnit(deferment.PaymentPer);
        future       = Futures_IN::construct(_dueDate,deferment.Change,periodUnit);

        if (deferment.TaxInformation)
        {
            switch (deferment.Allocation)
            {
                case Allocation_IN::FixedQuantity:
                    installmentAmount   = deferment.vatdefermentAmount / deferment.NumberOfdeferment;
                    roundingAmount      = deferment.Minimum;
                    if (deferment.Minimum > installmentAmount)
                    {
                        installmentAmount = deferment.Minimum;
                    }
                    break;

                case Allocation_IN::FixedAmount:
                    roundingAmount      = deferment.Minimum;
                    if (deferment.Minimum > deferment.AmountCurrency)
                    {
                        installmentAmount = deferment.Minimum;
                    }
                    else
                    {
                        installmentAmount = deferment.AmountCurrency;
                    }
                    break;

                case Allocation_IN::Total:
                    defermentScheduleTransLine.Debit                      = deferment.vatdefermentAmount;
                    defermentScheduleTransLine.Period                     = dueDate;
                    defermentScheduleTransLine.TaxInformation             = deferment.TaxInformation;
                    defermentScheduleTransLine.FatherRecId                = deferment.RecId;
                    defermentScheduleTransLine.insert();
                    break;

                default:
                    break;
            }
            if (deferment.Allocation == Allocation_IN::FixedQuantity || deferment.Allocation == Allocation_IN::FixedAmount)
            {
                installmentAmount = CurrencyExchangeHelper::amount(installmentAmount);
                while (remainAmount)
                {
                    number = number + 1;
                    if (number          == deferment.NumberOfdeferment       &&
                       (deferment.Minimum    == 0                            ||
                        deferment.Minimum    <= installmentAmount)           &&
                        deferment.Allocation == Allocation_IN::FixedQuantity)
                    {
                        installmentAmount = remainAmount;
                        tmpAmount = 0;
                    }
                    else if (remainAmount >= installmentAmount)
                    {
                        tmpAmount = remainAmount - installmentAmount;

                        if (abs(tmpAmount) < abs(roundingAmount))
                        {
                            installmentAmount = remainAmount;
                            tmpAmount = 0;
                        }
                    }
                    else
                    {
                        installmentAmount = remainAmount;
                        tmpAmount = 0;
                    }
                    defermentScheduleTransLine.Debit                      = installmentAmount;
                    defermentScheduleTransLine.Period                     = dueDate;
                    defermentScheduleTransLine.TaxInformation             = deferment.TaxInformation;
                    defermentScheduleTransLine.FatherRecId                = deferment.RecId;
                    defermentScheduleTransLine.insert();

                    remainAmount = tmpAmount;
                    dueDate      = future.next();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets period unit.
    /// </summary>
    /// <param name="_payment">
    /// The payment.
    /// </param>
    /// <returns>
    /// The instance of the <c>PeriodUnit</c> class.
    /// </returns>
    public PeriodUnit getPeriodUnit(PaymentPer_IN    _payment)
    {
        PeriodUnit periodUnit;

        if (_payment == PaymentPer_IN::Days)
        {
            periodUnit = PeriodUnit::Day;
        }
        else if (_payment == PaymentPer_IN::Months)
        {
            periodUnit = PeriodUnit::Month;
        }
        else
        {
            periodUnit = PeriodUnit::Year;
        }

        return periodUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction date.
    /// </summary>
    /// <param name="_tableId">
    /// The table id.
    /// </param>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <returns>
    /// The instance of the <c>TransDate</c> class.
    /// </returns>
    public TransDate getTransDate(RefTableId    _tableId,
                                  RefRecId      _recId)
    {
        TransDate transDate;

        switch (_tableId)
        {
            case tablenum(VendInvoiceTrans)   :
                transDate =  VendInvoiceTrans::findRecId(_recId).InvoiceDate;
                break;
            case tablenum(LedgerJournalTrans) :
                transDate =  LedgerJournalTrans::findRecId(_recId,false).TransDate;
                break;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated <c>Posted</c> field of the <c>DefermentScheduleTrans_IN</c> table.
    /// </summary>
    /// <param name="_defermentSchedule">
    /// The record of the <c>DefermentScheduleTrans_IN</c> table.
    /// </param>
    public void posted(DefermentScheduleTrans_IN   _defermentSchedule)
    {
        DefermentScheduleTrans_IN defermentSchedule;

        ttsbegin;
        defermentSchedule = DefermentScheduleTrans_IN::find(_defermentSchedule.RecId,true);
        defermentSchedule.Posted = NoYes::Yes;
        defermentSchedule.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates transaction.
    /// </summary>
    /// <param name="_defermentSchedule">
    /// The deferment schedule.
    /// </param>
    public void updateTrans(Array _defermentSchedule)
    {
        DefermentScheduleTrans_IN   deferment,
                                    defermentSchedule;
        container                   schedule;

        schedule  = _defermentSchedule.pack();
        deferment = conpeek(schedule,5);
        ttsbegin;

        defermentSchedule = DefermentScheduleTrans_IN::find(deferment.RecId,true);
        defermentSchedule.Allocation                = deferment.Allocation;
        defermentSchedule.PaymentPer                = deferment.PaymentPer;
        defermentSchedule.Change                    = deferment.Change;
        defermentSchedule.NumberOfDeferment         = deferment.NumberOfDeferment;
        defermentSchedule.AmountCurrency            = deferment.AmountCurrency;
        defermentSchedule.Minimum                   = deferment.Minimum;
        defermentSchedule.vatDefermentAmount        = deferment.vatDefermentAmount;
        defermentSchedule.InstallmentAmountInTotal  = deferment.InstallmentAmountInTotal;
        defermentSchedule.update();

        this.calculateInstallment(this.getTransDate(defermentSchedule.ExtTableId,defermentSchedule.ExtRecId),defermentSchedule);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefermentScheduleTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates deferment schedule transaction.
    /// </summary>
    /// <param name="_record">
    /// The record.
    /// </param>
    /// <param name="_vatDeferredAmount">
    /// The vat deferred amount.
    /// </param>
    public static void createDefermentScheduleTrans(
        Common          _record,
        TaxAmountCur    _vatDeferredAmount = 0)
    {
        DefermentSchedule_IN            defermentSchedule;
        DefermentScheduleTrans_IN       defermentScheduleTrans;
        VendInvoiceTrans                vendInvoiceTrans;
        LedgerJournalTrans              ledgerJournalTrans;
        TaxRegistrationNumbers_IN       taxRegistrationNumberTable;
        TaxInformation_IN               taxInformation;

        switch (_record.TableId)
        {
            case tablenum(VendInvoiceTrans):

                vendInvoiceTrans = _record;

                if (VendInvoiceTrans.VATDeferred_IN != 0)
                {
                    taxRegistrationNumberTable  =   TaxRegistrationNumbers_IN::find(TaxInformation_IN::find(vendInvoiceTransTaxExtensionIN::findByVendInvoiceTrans(vendInvoiceTrans.RecId).TaxInformation_IN).tin);
                    defermentSchedule           =  DefermentSchedule_IN::findByTaxRegistrationNumberTable(taxRegistrationNumberTable.RecId);
                    if (defermentSchedule)
                    {
                        defermentScheduleTrans.Allocation                 = defermentSchedule.Allocation;
                        defermentScheduleTrans.PaymentPer                 = defermentSchedule.PaymentPer;
                        defermentScheduleTrans.Change                     = defermentSchedule.Change;
                        defermentScheduleTrans.NumberOfDeferment          = defermentSchedule.NumberOfDeferment;
                        defermentScheduleTrans.AmountCurrency             = defermentSchedule.AmountCurrency;
                        defermentScheduleTrans.Minimum                    = defermentSchedule.Minimum;
                        defermentScheduleTrans.TaxInformation             = vendInvoiceTransTaxExtensionIN::findByVendInvoiceTrans(vendInvoiceTrans.RecId).TaxInformation_IN;
                        defermentScheduleTrans.ExtRecId                   = vendInvoiceTrans.RecId;
                        defermentScheduleTrans.ExtTableId                 = vendInvoiceTrans.TableId;
                        defermentScheduleTrans.vatDefermentAmount         = vendInvoiceTrans.vatDeferred_IN;
                        defermentScheduleTrans.InstallmentAmountInTotal   = vendInvoiceTrans.vatDeferred_IN;
                        defermentScheduleTrans.insert();
                        defermentScheduleTrans.calculateInstallment(vendInvoiceTrans.InvoiceDate);
                    }
                }
                break;

            case tablenum(LedgerJournalTrans):

                if (_vatDeferredAmount != 0)
                {
                    ledgerJournalTrans = _record;
                    taxInformation     = TaxInformation_IN::find(TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans).TaxInformation);
                    taxRegistrationNumberTable  =  taxInformation.getTaxRegistrationNumbersTable(TaxType_IN::VAT);
                    defermentSchedule           =  DefermentSchedule_IN::findByTaxRegistrationNumberTable(taxRegistrationNumberTable.RecId);
                    if (defermentSchedule)
                    {
                        defermentScheduleTrans.Allocation                 = defermentSchedule.Allocation;
                        defermentScheduleTrans.PaymentPer                 = defermentSchedule.PaymentPer;
                        defermentScheduleTrans.Change                     = defermentSchedule.Change;
                        defermentScheduleTrans.NumberOfDeferment          = defermentSchedule.NumberOfDeferment;
                        defermentScheduleTrans.AmountCurrency             = defermentSchedule.AmountCurrency;
                        defermentScheduleTrans.Minimum                    = defermentSchedule.Minimum;
                        defermentScheduleTrans.TaxInformation             = taxInformation.RecId;
                        defermentScheduleTrans.ExtRecId                   = ledgerJournalTrans.RecId;
                        defermentScheduleTrans.ExtTableId                 = ledgerJournalTrans.TableId;
                        defermentScheduleTrans.vatDefermentAmount         = _vatDeferredAmount;
                        defermentScheduleTrans.InstallmentAmountInTotal   = _vatDeferredAmount;
                        defermentScheduleTrans.insert();
                        defermentScheduleTrans.calculateInstallment(ledgerJournalTrans.TransDate);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>DefermentScheduleTrans_IN</c> table record.
    /// </param>
    /// <returns>
    /// true if the rule exits; otherwise, false.
    /// </returns>
    public static boolean exist(recId  _recId)
    {
        return _recId &&
                (select firstonly ExtRecId from defermentScheduleTrans_IN
                    where defermentScheduleTrans_IN.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExtRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks exist of the Ext RecId.
    /// </summary>
    /// <param name="_recId">
    /// The recId.
    /// </param>
    /// <returns>
    /// If 'True', the Ext RecId is exist.
    /// </returns>
    public static boolean existExtRecId(recId  _recId)
    {
        return _recId &&
                (select firstonly ExtRecId from defermentScheduleTrans_IN
                    index hint ExtTableRecIdx
                    where defermentScheduleTrans_IN.ExtRecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the DefermentScheduleTrans_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing DefermentScheduleTrans_IN table.
    /// </returns>
    public static DefermentScheduleTrans_IN find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        DefermentScheduleTrans_IN  defermentScheduleTrans;

        defermentScheduleTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            defermentScheduleTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly defermentScheduleTrans
            where defermentScheduleTrans.RecId == _recId;

        return defermentScheduleTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExtRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds Ext RecId.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <param name="_forUpdate">
    /// The for update flag.
    /// </param>
    /// <returns>
    /// The instance of the <c>DefermentScheduleTrans_IN</c> class.
    /// </returns>
    public static DefermentScheduleTrans_IN findExtRecId(recId         _recId,
                                                         boolean       _forUpdate = false)
    {
        DefermentScheduleTrans_IN defermentSchedule;

        if (_recId)
        {
            defermentSchedule.selectForUpdate(_forUpdate);

            select firstonly defermentSchedule
                index hint ExtTableRecIdx
                where defermentSchedule.ExtRecId    == _recId;
        }
        return defermentSchedule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64181</DeveloperDocumentation>
	<Label>@GLS5596</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ExtRecId</TitleField1>
	<TitleField2>TaxInformation</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ExtTableRecIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DefermentScheduleTransLines_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DefermentScheduleTransLines_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInformation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Allocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentPer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Change</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfDeferment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Minimum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalReference</Name>
			<Label>@SYS21697</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExtTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExtRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInformation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Schedule</Name>
			<Label>@SYS6793</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Allocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentPer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Change</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfDeferment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Minimum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@SYS28668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATDefermentAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstallmentAmountInTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Allocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>Allocation_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS860</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Change</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS54158</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExtRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ExtTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InstallmentAmountInTotal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS5591</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Minimum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS5330</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfDeferment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@GLS5223</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentPer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymentPer_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22361</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInformation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationNumberRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VATDefermentAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS5589</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExtTableRecIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ExtRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtRecId</Name>
					<Field>ExtRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtTableId</Name>
					<Field>ExtTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxInformation_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxInformation_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxInformation</Name>
					<Field>TaxInformation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpIndirectTaxInquiryTable_IN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TmpIndirectTaxInquiryTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtRecId</Name>
					<Field>ExtRecId</Field>
					<RelatedField>VATDefermentExtRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtTableId</Name>
					<Field>ExtTableId</Field>
					<RelatedField>VATDefermentExtTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TmpVATInquiryTable_IN</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TmpVATInquiryTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtTableId</Name>
					<Field>ExtTableId</Field>
					<RelatedField>VATDefermentExtTableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtRecId</Name>
					<Field>ExtRecId</Field>
					<RelatedField>VATDefermentExtRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtRecId</Name>
					<Field>ExtRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExtTableId</Name>
					<Field>ExtTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>