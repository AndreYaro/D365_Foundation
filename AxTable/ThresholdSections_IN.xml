<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ThresholdSections_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ThresholdSections_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOverlapBetweenChildandParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether there is overlap between sub section and parent section.
    /// </summary>
    /// <returns>
    ///     Returns true if sub section and parent section have no overlap; otherwise, false.
    /// </returns>
    public boolean checkOverlapBetweenChildandParent()
    {
        boolean ret = true;
        ThresholdSections_IN thresholdSectionParent;
        ThresholdSections_IN thresholdSectionChild;

        //Check date overlap with parent
        if (this.ParentRecId != 0)
        {
            thresholdSectionParent = ThresholdSections_IN::findByRecId(this.ParentRecId);
            if ((this.ValidFrom < thresholdSectionParent.ValidFrom)
                || (this.ValidTo > thresholdSectionParent.ValidTo && thresholdSectionParent.ValidTo)
                || (!this.ValidTo && thresholdSectionParent.ValidTo))
            {
                //The date range for threshold subsection cannot exceed that of the parent threshold section.
                ret = checkFailed("@SYS4003301");
            }
        }

        //Check date overlap with chind
        //if add section, this.recid == 0
        if (this.RecId != 0)
        {
            select firstOnly RecId,ValidFrom,ValidTo,ParentRecId from thresholdSectionChild
                where thresholdSectionChild.ParentRecId == this.RecId
                    && ((thresholdSectionChild.ValidFrom < this.ValidFrom)
                        || (thresholdSectionChild.ValidTo > this.ValidTo && this.ValidTo)
                        || (!thresholdSectionChild.ValidTo && this.ValidTo));
            if (thresholdSectionChild.RecId)
            {
                //The date range for threshold subsection cannot exceed that of the parent threshold section.
                ret = checkFailed("@SYS4003301");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverlapThresholdSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether therer is overlap between threshold sections in the same level.
    /// </summary>
    /// <returns>
    ///     Returns true if overlap exists; otherwise, false;
    /// </returns>
    public boolean checkOverlapThresholdSection()
    {
        boolean ret = true;
        ThresholdSections_IN thresholdSectionSibling;

        select firstOnly thresholdSectionSibling
            where (!((thresholdSectionSibling.ValidTo               < this.ValidFrom && thresholdSectionSibling.ValidTo)
                    || (thresholdSectionSibling.ValidFrom           > this.ValidTo && this.ValidTo)))
                && thresholdSectionSibling.ThresholdCalculationType != this.ThresholdCalculationType
                && thresholdSectionSibling.RecId                    != this.RecId
                && thresholdSectionSibling.ParentRecId              == this.ParentRecId
                && thresholdSectionSibling.Threshold                == this.Threshold;

        if (thresholdSectionSibling)
        {
            //Multiple threshold sections at the same hierarchy level can't have different calculation methods for overlapping date ranges.
            // Select the same calculation method or change the date range.
            ret = checkFailed("@SYS4003302");
        }

        if (ret)
        {
            select firstOnly ValidTo,ValidFrom,UpLimit,LowLimit,RecId,ThresholdCalculationType,ParentRecId,Threshold from thresholdSectionSibling
                        // period overlap
                where (!((thresholdSectionSibling.ValidTo               < this.ValidFrom && thresholdSectionSibling.ValidTo)
                        || (thresholdSectionSibling.ValidFrom           > this.ValidTo && this.ValidTo)))
                        // Amount overlap
                    && (!((thresholdSectionSibling.UpLimit              <= this.LowLimit && thresholdSectionSibling.UpLimit)
                            || (thresholdSectionSibling.LowLimit        >= this.UpLimit && this.UpLimit)))
                    && thresholdSectionSibling.RecId != this.RecId
                    && thresholdSectionSibling.ThresholdCalculationType == this.ThresholdCalculationType
                    && thresholdSectionSibling.ParentRecId              == this.ParentRecId
                    && thresholdSectionSibling.Threshold                == this.Threshold;
            if (thresholdSectionSibling.RecId)
            {
                // Multiple threshold sections at the same hierarchy level can't have same calculation methods for overlapping date ranges and limit ranges.
                // Select a different date range or limit range.
                ret = checkFailed("@SYS4003304");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChildren</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether there is any sub-section associated to the current section.
    /// </summary>
    /// <returns>
    ///    Returns true if there there is any sub-section associated to the current section; otherwise, false.
    /// </returns>
    public boolean hasChildren()
    {
        ThresholdSections_IN    thresholdSections;

        if (!this.RecId)
        {
            return false;
        }

        select firstonly RecId from thresholdSections
            where thresholdSections.ParentRecId == this.RecId;

        return thresholdSections ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromThresholdSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes current section from a <c>ThresholdSections_IN</c> instance.
    /// </summary>
    /// <param name="_fromThresholdSection">
    ///     From which the <c>ThresholdSections_IN</c> will be initialized.
    /// </param>
    public void initFromThresholdSection(ThresholdSections_IN _fromThresholdSection)
    {
        this.IsLeaf                     = _fromThresholdSection.IsLeaf;
        this.LowLimit                   = _fromThresholdSection.LowLimit;
        this.UpLimit                    = _fromThresholdSection.UpLimit;
        this.ThresholdCalculationBase   = _fromThresholdSection.ThresholdCalculationBase;
        this.ThresholdCalculationType   = _fromThresholdSection.ThresholdCalculationType;
        this.ValidFrom                  = _fromThresholdSection.ValidFrom;
        this.ValidTo                    = _fromThresholdSection.ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdSectionType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>ThresholdSectionType_IN</c> instance for current threshold section.
    /// </summary>
    /// <returns>
    ///     Returns a <c>ThresholdSectionType_IN</c> instance.
    /// </returns>
    public ThresholdSectionType_IN thresholdSectionType()
    {
        ThresholdSectionType_IN thresholdSectionType;
        ThresholdType_IN        thresholdType;

        thresholdType           = ThresholdType_IN::construct(Threshold_IN::findByRecId(this.Threshold));
        thresholdSectionType = ThresholdSectionType_IN::construct(thresholdType, this);

        return thresholdSectionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates method for fields of <c>ThresholdSections_IN</c>.
    /// </summary>
    /// <param name="_fieldName">
    ///     Indicates field name.
    /// </param>
    /// <param name="_arrayIndex">
    ///     Array index.
    /// </param>
    /// <returns>
    ///     Returns true if there is no conflict between fields; otherwise, false;
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr (ThresholdSections_IN, LowLimit):
                    if ((this.UpLimit) && this.UpLimit <= this.LowLimit)
                    {
                        // The lower limit must be less than or equal to the upper limit.
                        ret = checkFailed("@SYS4003328");
                    }
                    break;
                case fieldStr (ThresholdSections_IN, UpLimit):
                    if ((this.UpLimit) && this.UpLimit <= this.LowLimit)
                    {
                        // The upper limit must be greater than or equal to the lower limit.
                        ret = checkFailed("@SYS4003329");
                    }
                    break;

                case fieldStr (ThresholdSections_IN, ValidFrom):
                    if (this.ValidTo && (this.ValidTo < this.ValidFrom))
                    {
                        //The effective starting date must be earlier than or equal to the effective ending date. Specify another starting date.
                        ret = checkFailed("@SYS4003305");
                    }
                    break;
                case fieldStr (ThresholdSections_IN, ValidTo):
                    if (this.ValidTo && (this.ValidTo < this.ValidFrom))
                    {
                        //The effective ending date must be later than or equal to the effective starting date. Specify another ending date.
                        ret = checkFailed("@SYS4003306");
                    }
                    break;
                default:
                    break;
            }
        }

        if (ret && this.RecId)
        {
            ret = this.checkOverlapBetweenChildandParent() && this.checkOverlapThresholdSection();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates method for write threshold sections.
    /// </summary>
    /// <returns>
    ///     Returns true if can write threshold sections; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            ret = this.checkOverlapThresholdSection() && this.checkOverlapBetweenChildandParent();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds threshold section by recid.
    /// </summary>
    /// <param name="_thresholdSectionsRecId">
    ///     The recId of threshold section.
    /// </param>
    /// <param name="_forupdate">
    ///     Indicates whether select for update.
    /// </param>
    /// <returns>
    ///     Returns ThresholdSections found by recid.
    /// </returns>
    static public ThresholdSections_IN findByRecId(ThresholdSectionsRecId_IN _thresholdSectionsRecId, boolean _forupdate = false)
    {
        ThresholdSections_IN thresholdSection;

        if (_thresholdSectionsRecId)
        {
            if (_forupdate)
            {
                thresholdSection.selectForUpdate(_forupdate);
            }

            select firstOnly thresholdSection
                where thresholdSection.RecId == _thresholdSectionsRecId;
        }

        return thresholdSection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4003308</DeveloperDocumentation>
	<Label>@SYS4003307</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ValidFrom</TitleField1>
	<TitleField2>ValidTo</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsLeaf</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowLimit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Threshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdCalculationBase</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7523</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ThresholdCalculationBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThresholdCalculationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsLeaf</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ThresholdSectionsINFinalLevelHelpText</HelpText>
			<Label>@SYS4003280</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LowLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ThresholdLowLimit_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ThresholdSectionsINLowerLimitHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ThresholdSectionsRecId_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Threshold</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ThresholdRecId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ThresholdCalculationBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>ThresholdCalculationBase_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ThresholdCalculationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxWithholdParameters:ThresholdSectionsINCalculationTypeHelpText</HelpText>
			<EnumType>ThresholdCalculationType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UpLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ThresholdUpLimit_IN</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ThresholdSectionsINUpperLimitHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ThresholdSectionsINEffectiveFromHelpText</HelpText>
			<Label>@SYS4003283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<ConfigurationKey>LedgerBasic</ConfigurationKey>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<HelpText>@TaxWithholdParameters:ThresholdSectionsINEffectiveToHelpText</HelpText>
			<Label>@SYS4003284</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SectionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Threshold</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LowLimit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UpLimit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Threshold</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>Threshold_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Threshold</Name>
					<Field>Threshold</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ThresholdSections</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ThresholdSections_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentRecId</Name>
					<Field>ParentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>