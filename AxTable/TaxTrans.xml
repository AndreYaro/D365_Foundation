<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountName</Name>
				<Source><![CDATA[
    display MainAccountNum accountName(TaxTransRelationshipType _taxTransRelationshipType = TaxTransRelationshipType::Tax)
    {
        LedgerDimensionAccount ledgerDimension;

        if (_taxTransRelationshipType == TaxTransRelationshipType::Tax)
        {
            ledgerDimension = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(this.RecId);
        }
        else
        {
            ledgerDimension = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(this.RecId, _taxTransRelationshipType);
        }

        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNameOperational</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays operational main account.
    /// </summary>
    /// <returns>Operational main account.</returns>
    public display MainAccountNum accountNameOperational()
    {
        //Avoiding limitalion of GER. GER does not accept methods with parameters.
        return this.accountName(TaxTransRelationshipType::TransactionLineAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount that includes the tax value for the current record in the <c>TaxTrans</c> table.
    /// </summary>
    /// <returns>
    /// The amount that includes the tax value of the current record.
    /// </returns>

    display AmountMST amountInclTax()
    {
        TaxBase   taxBase;
        ;
        //The non - deductable Vat Amount must be taken into account
        if (TaxGroupData::find(this.TaxGroup, this.TaxCode).UseTax)
        {
            taxBase = this.TaxBaseAmount;
        }
        else
        {
            taxBase = this.TaxBaseAmount + this.TaxInCostPriceMST + this.netTaxAmountMST();
        }
        return taxBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatedTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated tax value for the current record in the <c>TaxTrans</c> table.
    /// </summary>
    /// <returns>
    /// The calculated tax value of the current record.
    /// </returns>

    display TaxValue calculatedTaxValue()
    {
        if (this.TaxBaseAmount)
        {
            return this.TaxAmount / this.TaxBaseAmount * 100;
        }
        else
        {
            return this.taxValueFromTaxCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxTrans</Name>
				<Source><![CDATA[
    public void copyTaxTrans(TaxTrans _taxTrans, Integer _sign = 1)
    {
        TaxTransInitializer taxTransInitializer = new TaxTransInitializer();
        taxTransInitializer.copyTaxTrans(_taxTrans, this, _sign);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHungaryDeferredTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the two additional transactions needed for Hungarian Deferred tax.
    /// The transaction already existing:
    /// 1) Insertion into Hungarian Tax Account on the TransDate
    /// The two transactions needed:
    /// 1) Reversal from the Hungarian Tax Account on VAT due date
    /// 2) Insertion into Sales Tax Account on VAT due date
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    /// The LedgerVoucherObject to which the two transactions should be added
    /// </param>
    /// <param name="_ledgerAccount">
    /// The default sales tax account
    /// </param>
    /// <param name="_offsetAccount">
    /// The Hungarian Deferred tax account
    /// </param>
    void createHungaryDeferredTransactions(LedgerVoucherObject _ledgerVoucherObject, LedgerDimensionAccount _ledgerAccount, LedgerDimensionAccount _offsetAccount)
    {
        TaxTransCustomization_W::createHungaryDeferredTransactions_HU(this, _ledgerVoucherObject, _ledgerAccount, _offsetAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustomsAssessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the customs assessable value.
    /// </summary>
    /// <returns>
    /// The customs assessable amount.
    /// </returns>
    display CustomsAmount_IN displayCustomsAssessableValue_IN()
    {
        return TaxTransCustomization_W::displayCustomsAssessableValue_IN(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax amount to be reversed for specified payment journal.
    /// </summary>
    /// <param name="_vendSettlement">
    /// Given vendor settlement.
    /// </param>
    /// <returns>
    /// The tax amount to be reversed.
    /// </returns>
    public TaxAmountCur getAmountToReverse(VendSettlement _vendSettlement)
    {
        return CurrencyExchangeHelper::amount(
            this.getTaxReverseFactor(_vendSettlement) * this.totalTaxAmountCur());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountOriginToReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin amount to be reversed for specified payment journal.
    /// </summary>
    /// <param name="_vendSettlement">
    /// Given vendor settlement.
    /// </param>
    /// <returns>
    /// The origin amount to be reversed.
    /// </returns>
    public TaxAmountCur getAmountOriginToReverse(VendSettlement _vendSettlement)
    {
        return CurrencyExchangeHelper::amount(
            this.getTaxReverseFactor(_vendSettlement) * this.SourceBaseAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsExchRate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customs exchange rate.
    /// </summary>
    /// <returns>
    /// The instance of the <c>ExchRate</c> class.
    /// </returns>
    public ExchRate getCustomsExchRate_IN()
    {
        return this.TaxMap::getCustomsExchRate_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEximIncentiveSchemeTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exim incentive scheme tax information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    public TaxAmountCur getEximIncentiveSchemeTax_IN()
    {
        return this.TaxMap::getEximIncentiveSchemeTax_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectTaxAmountExcludedforWHT_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total Indirect taxes which are marked on withholding tax group.
    /// </summary>
    /// <param name="_custVendTransVoucher">
    /// The voucher no. of the corresponding transaction.
    /// </param>
    /// <param name="_taxItemGroup">
    /// The TaxItemGroup attached for the transaction.
    /// </param>
    /// <param name="_taxWithholdGroup">
    /// The TaxWithholdGroup attached for the transaction.
    /// </param>
    /// <returns>
    /// Returns total Indirect taxes which are marked on withholding tax group.
    /// </returns>
    public static server TaxAmountCur getIndirectTaxAmountExcludedforWHT_IN(
        Voucher          _custVendTransVoucher,
        TaxItemGroup     _taxItemGroup,
        TaxWithholdGroup _taxWithholdGroup)
    {
        TaxTrans                            taxTrans;
        TaxTable                            taxTableLoc;
        AmountCur                           taxWithholdBaseFromIndirectTaxAmountCur;
        FormulaDesigner_IN                  formularDesign;
        Percent                             reverseChargePercent;
        TaxWithholdExcludeIndirectTax_IN    taxWithholdExcludeIndirectTaxIN;
        TaxWithholdGroupHeading             taxWithholdGroupHeading;

        taxWithholdGroupHeading = TaxWithholdGroupHeading::find(_taxWithholdGroup);
        select firstOnly RecId from taxWithholdExcludeIndirectTaxIN
            where taxWithholdExcludeIndirectTaxIN.TaxWithholdGroupHeading == taxWithholdGroupHeading.RecId;

        if (_taxItemGroup && taxWithholdExcludeIndirectTaxIN.RecId != 0)
        {
            // For reverse charge mechanism, need to deduct the part service provider paid
            reverseChargePercent = TaxItemGroupHeading::find(_taxItemGroup).ReverseChargePercentage_IN;

            while select sum(SourceRegulateAmountCur) from taxTrans
                where taxTrans.Voucher == _custVendTransVoucher
                join RecId from taxTableLoc
                    where taxTableLoc.TaxCode    == taxTrans.TaxCode
                        && taxTableLoc.TaxType_IN == taxWithholdExcludeIndirectTaxIN.TaxType
                join RecId from formularDesign
                    where formularDesign.TaxItemGroup == _taxItemGroup
                        && formularDesign.TaxCode == taxTrans.TaxCode
                        && formularDesign.PriceInclTax == NoYes::No
            {
                taxWithholdBaseFromIndirectTaxAmountCur += abs(CurrencyExchangeHelper::amount(taxTrans.SourceRegulateAmountCur * (100 - reverseChargePercent) / 100));
            }
        }

        return taxWithholdBaseFromIndirectTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountBeforeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax amount before deducting the tax in cost price.
    /// </summary>
    /// <returns>
    /// The tax amount.
    /// </returns>
    public TaxAmountCur getTaxAmountBeforeCost()
    {
        return this.TaxMap::getTaxAmountBeforeCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseAmountRegulatedMST_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the regulated tax base amount converted to the company s currency code
    /// </summary>
    /// <returns>
    /// If the tax trans currency code is the same of the company s currency code, then, the raw value of SourceBaseAmountCurRegulated will be returned.
    /// Otherwise, the SourceBaseAmountCurRegulated converted value will be returned.
    /// </returns>
    public TaxAmountCur getTaxBaseAmountRegulatedMST_BR()
    {
        return TaxTransCustomization_W::getTaxBaseAmountRegulatedMST_BR(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the tax in cost price amount of the tax source document line.
    /// </summary>
    /// <returns>
    /// A tax in cost price amount.
    /// </returns>
    public TaxAmountCur getTaxInCostPrice()
    {
        return this.TaxMap::getTaxInCostPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForTaxExchangeRateDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the fields for tax exchange difference amount record.
    /// </summary>
    /// <param name="_originalTaxTrans">
    /// The original <c>TaxTrans</c> record.
    /// </param>
    public void initForTaxExchangeRateDifference(TaxTrans _originalTaxTrans)
    {
        TaxTransInitExtensions_W::initFromTaxTransForTaxExchangeRateDifference(_originalTaxTrans, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>TaxTrans</c> record using the <c>TaxUncommitted</c> record passed in.
    /// </summary>
    /// <param name="_taxUncommitted">
    /// The <c>TaxUncommitted</c> record to initialize from.
    /// </param>
    /// <param name="_taxOrigin">
    /// The <c>TaxOrigin</c> to use during initialization.
    /// </param>
    public void initFromTaxUncommitted(TaxUncommitted _taxUncommitted, TaxOrigin _taxOrigin)
    {
        TaxTransInitializer taxTransInitializer = new TaxTransInitializer();
        taxTransInitializer.initFromTaxUncommitted(this, _taxUncommitted, _taxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>TaxTrans</c> record using the <c>TmpTaxWorkTrans</c> record passed in.
    /// </summary>
    /// <param name = "_tmpTaxWorkTrans">The <c>TmpTaxWorkTrans</c> record to initialize from.</param>
    /// <param name = "_taxOrigin">The <c>TaxOrigin</c> to use during initialization.</param>
    public void initFromTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans, TaxOrigin _taxOrigin)
    {
        TaxTransInitializer taxTransInitializer = new TaxTransInitializer();
        taxTransInitializer.initFromTaxWorkTrans(this, _tmpTaxWorkTrans, _taxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCheckAccountingDistributionNeeded</Name>
				<Source><![CDATA[
    // <summary>
    /// Verify if this taxTrans meet requirement from user.
    /// </summary>
    /// <param name = "_taxTrans">The <c>TaxTrans</c> need to verify</param>
    /// <returns>Returns if checking accounting distribution is needed.</returns>
    public static boolean isCheckAccountingDistributionNeeded(TaxTrans _taxTrans)
    {
        return _taxTrans.SourceDocumentLine != 0 && _taxTrans.SourceRegulateAmountCur != 0 && (_taxTrans.Source == TaxModuleType::FreeTxtInvoice || _taxTrans.Source == TaxModuleType::Purch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void  insert()
    {
        #ISOCountryRegionCodes
        TaxTransCustomization_W::setExciseAmount_PL(this);
        TaxTransReportPeriod taxTransReportPeriod = TaxTransReportPeriod::construct();
        taxTransReportPeriod.setTaxPeriodFromTaxCode(this);
        taxTransReportPeriod.setTaxRepVersion(this);

        boolean isReverseTaxTrans;

        if (TaxIntegrationUtils::isMultipleTaxIdEnabled() && !this.TaxID)
        {
            if (this.mayExistReversedTaxTrans())
            {
                isReverseTaxTrans = TaxTrans::initTaxIdFromReversedTaxTrans(this);
            }
            if (!isReverseTaxTrans)
            {
                this.TaxID = TaxPeriodHead::find(this.TaxPeriod).TaxID;

                if (!this.TaxID)
                {
                    throw Error(strFmt('@Tax_SettlementForTaxId:InsertTaxTransValidationErrorMessage', this.TaxPeriod));
                }
            }
        }

        TaxTransCustomization_W::setAndValidateFields_TH(this);

        ttsbegin;
        super();

        // <GEEU>
        this.SysExtensionSerializerMap::postInsert();
        // </GEEU>

        TaxTransCustomization_W::insertTaxServiceTariffForNewParent_PL(this);

        TaxTransCustomization_W::createRefundableVATFromTaxTrans_HU(this);

        // <GEEHU><GEELT>
        TaxTransCustomization_W::createTaxTransExcludeFromInvoiceFromTaxTrans(this);
        // </GEELT></GEEHU>

        TaxGSTTaxInformation_MY::validateTaxGSTTaxInformation(this);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPostCheckAccountingDistributionExistsIsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax post check accounting distribution exists is enabled.
    /// </summary>
    /// <returns>True if tax post check accounting distribution exists is enabled; otherwise, false.</returns>
    public static boolean taxPostCheckAccountingDistributionExistsIsEnabled()
    {
        return TaxPostCheckAccountingDistributionExistsToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPostCheckAccountingDistributionAmountsIsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax post check accounting distribution amounts is enabled.
    /// </summary>
    /// <returns>True if tax post check accounting distribution amounts is enabled; otherwise, false.</returns>
    public static boolean taxPostCheckAccountingDistributionAmountsIsEnabled()
    {
        return TaxPostCheckAccountingDistributionAmountsToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReporting</Name>
				<Source><![CDATA[
    void insertTaxReporting(TransDate _periodStartDate)
    {
        this.TaxRepCounter = TaxReportPeriod::version(this.TaxPeriod,
                                                      _periodStartDate);

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReporting_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to insert info into the <c>TaxReportPeriod_IN</c> table from given parameters.
    /// </summary>
    /// <param name="_periodStartDate">
    /// The period start date is used to find record.
    /// </param>
    /// <param name="_taxRegistrationNumberTableRecId">
    /// The record id of tax registration number is used to find record.
    /// </param>
    void insertTaxReporting_IN(TransDate    _periodStartDate,
                               RefRecId     _taxRegistrationNumberTableRecId)
    {
        TaxTransCustomization_W::insertTaxReporting_IN(this, _periodStartDate, _taxRegistrationNumberTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeApplicable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if reverse charge is applicable.
    /// </summary>
    /// <returns>
    /// Returns true if reverse charge is applicable.
    /// </returns>
    public boolean isReverseChargeApplicable_IN()
    {
        return TaxTransCustomization_W::isReverseChargeApplicable_IN(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>netSourceTaxAmountCur</Name>
				<Source><![CDATA[
    TaxAmountCur netSourceTaxAmountCur()
    {
        if (!this.TaxAutogenerated)
            return this.SourceRegulateAmountCur -  this.TaxInCostPriceRegulated;
        else
            return this.SourceTaxAmountCur - this.TaxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netTaxAmountMST</Name>
				<Source><![CDATA[
    AmountMST netTaxAmountMST()
    {
        return this.TaxAmount - this.TaxInCostPriceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netTaxAmountRep</Name>
				<Source><![CDATA[
    public TaxAmountCur netTaxAmountRep()
    {
        return this.TaxAmountRep - this.TaxInCostPriceRep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTaxTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the <paramref name="_taxTrans_BR"/> to <c>TaxTable</c> PackedExtensions container field.
    /// </summary>
    /// <param name="_taxTrans_BR">
    /// A <c>TaxTrans_BR</c> to increment.
    /// </param>
    public void packTaxTrans_BR(TaxTrans_BR _taxTrans_BR)
    {
        _taxTrans_BR.TaxTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_taxTrans_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTaxTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs extension table <c>TaxTrans_RU</c> to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_taxTrans_RU">
    /// Buffer which represents <c>TaxTrans_RU</c> record.
    /// </param>
    public void packTaxTrans_RU(TaxTrans_RU _taxTrans_RU)
    {
        _taxTrans_RU.TaxTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_taxTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTaxTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the <paramref name="_taxTrans_W"/> to <c>TaxTable</c> PackedExtensions container field.
    /// </summary>
    /// <param name="_taxTrans_W">
    /// A <c>TaxTrans_BR</c> to increment.
    /// </param>
    public void packTaxTrans_W(TaxTrans_W _taxTrans_W)
    {
        _taxTrans_W.TaxTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_taxTrans_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTaxTrans_Reporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the <paramref name="_taxTrans_Reporting"/> to <c>TaxTable</c> PackedExtensions container field.
    /// </summary>
    /// <param name="_taxTrans_Reporting">
    /// A <c>TaxTrans_Reporting</c> to increment.
    /// </param>
    public void packTaxTrans_Reporting(TaxTrans_Reporting _taxTrans_Reporting)
    {
        _taxTrans_Reporting.TaxTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_taxTrans_Reporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return this.TaxMap::parmExchangeRateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the tax trans record is not included in the invoice.
    /// </summary>
    /// <returns>
    /// true if the tax trans record is not included in the invoice; otherwise, false.
    /// </returns>
    public display boolean parmExcludeFromInvoice()
    {
        return TaxTransCustomization_W::parmExcludeFromInvoice(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return this.TaxMap::parmParentSourceDocumentLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return this.TaxMap::parmSourceDocLineTypeEnumName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        if (!this.SourceTableId && !this.tableAccessRight())
        {
            throw error(strFmt(
                "@TaxIntegrationException:MessageNoPrivilege",
                "@TaxIntegration:TaxSalesTaxMaintain",
                "@TaxIntegration:TaxSalesTaxMaintain"));
        }
        return this.TaxMap::parmSourceDocLineTypeEnumValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return this.TaxMap::parmSourceDocumentHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postponeLedgerTrans_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the appropriate variables and calls the method to create the two additional transactions
    /// for HungarianDeferredTax
    /// Information on the two transactions is provided in the comments for createAddTrans
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    /// The LedgerVoucherObject to which the two transactions should be added
    /// </param>
    /// <param name="_ledgerDimension">
    /// The ledgerDimension stored on the initial transaction as entered by the user
    /// </param>
    public void postponeLedgerTrans_HU(LedgerVoucherObject _ledgerVoucherObject, DimensionDefault _ledgerDimension)
    {
        TaxTransCustomization_W::postponeLedgerTrans_HU(this, _ledgerVoucherObject, _ledgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the <c>ReportingDate</c> from the <c>TaxTransRefundableVAT</c> table.
    /// </summary>
    /// <returns>
    /// Returns the <c>ReportingDate</c> from the <c>TaxTransRefundableVAT</c> table.
    /// </returns>
    display ReportingDate reportingDate()
    {
        return TaxTransRefundableVAT::findByTaxTrans(this.RecId).ReportingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversed</Name>
				<Source><![CDATA[
    display boolean reversed()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(TaxTrans), this.RecId).Reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxAmounts_RU</Name>
				<Source><![CDATA[
    public void reverseTaxAmounts_RU()
    {
        TaxTransCustomization_W::reverseTaxAmounts_RU(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the <c>SettleDate</c> from the <c>TaxTransRefundableVAT</c> table.
    /// </summary>
    /// <returns>
    /// Returns the <c>SettleDate</c> from the <c>TaxTransRefundableVAT</c> table.
    /// </returns>
    display SettleDate settleDate()
    {
        return TaxTransRefundableVAT::findByTaxTrans(this.RecId).SettleDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceInvoiceNo</Name>
				<Source><![CDATA[
    display InvoiceId sourceInvoiceNo()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        InvoiceId           invoiceId;
        ProjInvoiceJour     projInvoiceJour;

        InvoiceId custTransInvoiceId()
        {
            return (select firstonly Invoice from custTrans index VoucherDateIdx
                        where custTrans.Voucher    == this.Voucher &&
                              custTrans.TransDate  == this.TransDate).Invoice;
        }

        InvoiceId vendTransInvoiceId()
        {
            return (select firstonly Invoice from vendTrans index VoucherDateIdx
                        where vendTrans.Voucher     == this.Voucher &&
                              vendTrans.TransDate   == this.TransDate).Invoice;
        }

        switch (this.Source)
        {
            case TaxModuleType::Project :
                select firstonly ProjInvoiceId from projInvoiceJour
                    where projInvoiceJour.LedgerVoucher == this.Voucher &&
                          projInvoiceJour.InvoiceDate == this.TransDate;

                invoiceId = projInvoiceJour.ProjInvoiceId;

                break;
            case TaxModuleType::SalesInvoice,
                 TaxModuleType::FreeTxtInvoice,
                 TaxModuleType::Sales,
                 TaxModuleType::CustCollectionLetter :
                invoiceId = custTransInvoiceId();
                break;

            case TaxModuleType::PurchInvoice,
                 TaxModuleType::Purch :
                invoiceId = vendTransInvoiceid();
                break;

            case TaxModuleType::Retail :
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    invoiceId = this.InvoiceId;
                }
                break;

            case TaxModuleType::Voucher :
                invoiceId = vendTransInvoiceId();

                if (!invoiceId)
                {
                    invoiceId = custTransInvoiceId();
                    if (!invoiceId)
                    {
                        select firstonly Invoice from ledgerJournalTrans index NumVoucherIdx
                            where ledgerJournalTrans.Voucher    == this.Voucher &&
                                  ledgerJournalTrans.TransDate  == this.TransDate;

                        invoiceId = ledgerJournalTrans.Invoice;
                    }
                }
                break;

            default :
                invoiceId = '';
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceName</Name>
				<Source><![CDATA[
    display Name sourceName()
    {
        CustAccount         custAccount;
        VendAccount         vendAccount;
        BankAccountTrans    bankAccountTrans;
        ProjTransPosting    projTransPosting;
        Name                name;

        LedgerDimensionAccount transactionLineLedgerDimension;

        CustAccount custTransAccountNum()
        {
            return (select firstonly AccountNum from custTrans index VoucherDateIdx
                        where custTrans.Voucher    == this.Voucher &&
                              custTrans.TransDate  == this.TransDate).AccountNum;
        }

        VendAccount vendTransAccountNum()
        {
            return (select firstonly AccountNum from vendTrans index VoucherDateIdx
                        where vendTrans.Voucher     == this.Voucher &&
                              vendTrans.TransDate   == this.TransDate).AccountNum;
        }

        Name custTableName(CustAccount  _custAccount)
        {
            return DirPartyTable::findRec(CustTable::find(_custAccount).Party).Name;
        }

        Name vendTableName(VendAccount  _vendAccount)
        {
            return DirPartyTable::findRec(VendTable::find(_vendAccount).Party).Name;
        }

        switch (this.Source)
        {
            case TaxModuleType::Project :
                select firstonly ProjId from projTransPosting index VoucherDateIdx
                    where projTransPosting.Voucher          == this.Voucher &&
                          projTransPosting.ProjTransDate    == this.TransDate;

                if (projTransPosting.ProjId)
                {
                    name = custTableName((select firstonly Name from projTable index ProjectIdx where projTable.ProjId == projTransPosting.ProjId).CustAccount);
                }
                break;
            case TaxModuleType::SalesInvoice,
                 TaxModuleType::FreeTxtInvoice,
                 TaxModuleType::Sales,
                 TaxModuleType::CustCollectionLetter :

                name = custTableName(custTransAccountNum());
                break;

            case TaxModuleType::PurchInvoice,
                 TaxModuleType::Purch :

                name = vendTableName(vendTransAccountNum());
                break;

            case TaxModuleType::Voucher :
                vendAccount = vendTransAccountNum();

                if (vendAccount)
                {
                    name = vendTableName(vendAccount);
                }
                else
                {
                    custAccount = custTransAccountNum();
                    if (custAccount)
                    {
                        name = custTableName(custAccount);
                    }
                    else
                    {
                        select firstonly ProjId from projTransPosting index VoucherDateIdx
                                where projTransPosting.Voucher          == this.Voucher &&
                                      projTransPosting.ProjTransDate    == this.TransDate;

                        if (projTransPosting.ProjId)
                        {
                            name = (select firstonly Name from projTable index ProjectIdx where projTable.ProjId == projTransPosting.ProjId).Name;
                        }
                        else
                        {
                            select firstonly AccountId from bankAccountTrans index VoucherDateIdx
                                    where bankAccountTrans.Voucher      == this.Voucher &&
                                          bankAccountTrans.TransDate    == this.TransDate;

                            if (bankAccountTrans.AccountId)
                            {
                                name = (select firstonly Name from bankAccountTable index AccountIdx where bankAccountTable.AccountID == bankAccountTrans.AccountId).Name;
                            }
                            else
                            {
                                transactionLineLedgerDimension = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(this.RecId, TaxTransRelationshipType::TransactionLineAccount);
                                name = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(transactionLineLedgerDimension);
                            }
                        }
                    }
                }
                break;

            default :
                name = '';
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByTaxDirectionAndReportId</Name>
				<Source><![CDATA[
    /*This method will return a table of the type TmpTaxReportById containing records with reportIDs and amounts
    for a given taxTransaction.*/
    TmpTaxReportById taxAmountByTaxDirectionAndReportId(TmpTaxReportById    _tmpTaxReportById,               //Contains the table where the amounts and reportIds should be placed.
                                                        boolean             _isCredit            = NoYes::No,//Is the transaction only caused by creditNotes ?
                                                        TaxReportCollection _taxReportCollection = null,     //If the parameter is given, then will the method only return the amount for the given reportId.
                                                        TaxReportLayout     _taxReportLayout     = TaxReportLayout::Default
                                                        , boolean           _isDebit             = NoYes::No
                                                        )
    {
        return TaxTransReportById::taxAmountByTaxDirectionAndReportId(this,
                                                                    _tmpTaxReportById,
                                                                    _isCredit,
                                                                    _taxReportCollection,
                                                                    _taxReportLayout,
                                                                    _isDebit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur_W</Name>
				<Source><![CDATA[
    display TaxAmountCur taxAmountCur_W()
    {
        return this.TaxAutogenerated ? this.SourceTaxAmountCur :
                                       this.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountHasBeenAdjusted_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the tax base amount has been adjusted.
    /// </summary>
    /// <returns>
    /// Returns true if the tax base amount has been adjusted.
    /// </returns>
    public boolean taxBaseAmountHasBeenAdjusted_BR()
    {
        return this.SourceBaseAmountCurRegulated != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeCurrencyChargeAmount</Name>
				<Source><![CDATA[
    public display TaxAmountCur taxCodeCurrencyChargeAmount()
    {
        if (!this.CurrencyCode || this.CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))
        {
            return this.TaxInCostPriceMST;
        }
        else
        {
            return this.TaxInCostPriceCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeCurrencyOriginAmount</Name>
				<Source><![CDATA[
    display TaxBaseCur taxCodeCurrencyOriginAmount()
    {
        if (this.TaxDirection == TaxDirection::UseTax &&
            !(this.Source == TaxModuleType::Voucher &&
            this.TaxOrigin == TaxOrigin::Transfer) &&
            TaxParameters::find().PurchTaxOnOperations)
        {
            this.TaxBaseAmountCur = this.TaxBaseAmountCur * -1;
            this.TaxBaseAmount    = this.TaxBaseAmount    * -1;
        }

        if (!this.CurrencyCode || this.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            return this.TaxBaseAmount;
        }
        else
        {
            return this.TaxBaseAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodeCurrencyTaxAmount</Name>
				<Source><![CDATA[
    display TaxAmountCur taxCodeCurrencyTaxAmount()
    {
        int sign = (TaxParameters::find().PurchTaxOnOperations && this.TaxDirection == TaxDirection::UseTax) ? -1 : 1;

        if (!this.CurrencyCode || this.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            return sign * this.TaxAmount - this.TaxInCostPriceMST;
        }

        return sign * this.TaxAmountCur - this.TaxInCostPriceCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxName</Name>
				<Source><![CDATA[
    display TaxName  taxName()
    {
        return TaxTable::find(this.TaxCode).TaxName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxOnlyBaseAmountCur</Name>
				<Source><![CDATA[
    display TaxBaseCur taxOnlyBaseAmountCur()
    {
        int sign = 1;

        if ( TaxParameters::find().PurchTaxOnOperations && this.TaxDirection == TaxDirection::UseTax)
            sign = -1;

        if (!this.CurrencyCode || this.CurrencyCode == CompanyInfoHelper::standardCurrency())
            return sign * this.TaxBaseAmount;

        return sign * this.TaxBaseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the specified record in the <c>TaxTrans_BR</c> table.
    /// </summary>
    /// <returns>
    ///  A record in the <c>TaxTrans_BR</c> table; otherwise, an empty record.
    /// </returns>
    public TaxTrans_BR taxTrans_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(TaxTrans_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the specified record in the <c>TaxTrans_RU</c> table.
    /// </summary>
    /// <returns>
    ///  A record in the <c>TaxTrans_RU</c> table; otherwise, an empty record.
    /// </returns>
    public TaxTrans_RU taxTrans_RU()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(TaxTrans_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the specified record in the <c>TaxTrans_W</c> table.
    /// </summary>
    /// <returns>
    ///  A record in the <c>TaxTrans_W</c> table; otherwise, an empty record.
    /// </returns>
    public TaxTrans_W taxTrans_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(TaxTrans_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTrans_Reporting</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the specified record in the <c>TaxTrans_Reporting</c> table.
    /// </summary>
    /// <returns>
    ///  A record in the <c>TaxTrans_Reporting</c> table; otherwise, an empty record.
    /// </returns>
    public TaxTrans_Reporting taxTrans_Reporting()
    {
        TaxTrans_Reporting ret;
        ret = this.SysExtensionSerializerMap::getExtensionTable(tableNum(TaxTrans_Reporting));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTransExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the TH extension table.
    /// </summary>
    /// <returns>
    /// The instance of the extension table.
    /// </returns>
    public TaxTransExtensionTH taxTransExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(TaxTransExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxValueFromTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax value from the <c>TaxCode</c> type for the current record in the <c>TaxTrans</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TaxValueFromTaxCode</c> value of the current record.
    /// </returns>

    display TaxValue taxValueFromTaxCode()
    {
        return TaxData::percent(this.TaxCode, this.TransDate, this.TaxBaseAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountCur</Name>
				<Source><![CDATA[
    display TaxAmountCur totalTaxAmountCur()
    {
        if (this.TaxDirection == TaxDirection::UseTax &&
            !(this.Source == TaxModuleType::Voucher &&
            this.TaxOrigin == TaxOrigin::Transfer) &&
            TaxParameters::find().PurchTaxOnOperations)
        {
            this.TaxAmountCur       = this.TaxAmountCur * -1;
            this.TaxAmount          = this.TaxAmount * -1;
            this.TaxInCostPriceCur  = 0;
            this.TaxInCostPriceMST  = 0;
            this.TaxInCostPriceRep  = 0;
        }
        if (!this.CurrencyCode || this.CurrencyCode == CompanyInfoHelper::standardCurrency())
            return this.TaxAmount - this.TaxInCostPriceMST ;
        else
            return this.TaxAmountCur - this.TaxInCostPriceCur ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceNum</Name>
				<Source><![CDATA[
    display TraceNum traceNum()
    {
        return TransactionReversalTrans::findTransactionReversalTrans(tableNum(TaxTrans), this.RecId).TraceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // <GEEU>
        this.SysExtensionSerializerMap::postUpdate();
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransByForInterim_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds populates the TaxTrans with the offset entries, to be generated during service tax reverse charge posting.
    /// </summary>
    /// <param name="_taxTrans">
    /// Tax trans buffer passed.
    /// </param>
    /// <param name="_isLOIAllowed">
    /// Flag to check if load on inventory is allowed or not.
    /// </param>
    /// <param name="_sign">
    /// The sign of the Tax entry
    /// </param>
    /// <remarks>
    /// // Values are found by subtracting split entry from total tax, to avoid rounding isuue.
    /// </remarks>
    public void updateTaxTransByForInterim_IN(
        TaxTrans _taxTrans,
        boolean  _isLOIAllowed,
        Sign     _sign = 1)
    {
        TaxTransCustomization_W::updateTaxTransByForInterim_IN(this, _taxTrans, _isLOIAllowed, _sign);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransByReverseChargePercent_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds populates the TaxTrans with the offset entries, to be generated during service tax reverse charge feature.
    /// </summary>
    /// <param name="_reverseChargePercentage">
    /// The reverse charge percentage flowing from ItemSalestaxGroup.
    /// </param>
    /// <param name="_sign">
    /// The sign of the Tax entry
    /// </param>
    /// <remarks>
    /// Method exclusively for service tax reverse charge feature.
    /// </remarks>
    public void updateTaxTransByReverseChargePercent_IN(
        Percent _reverseChargePercentage,
        Sign _sign = 1)
    {
        TaxTransCustomization_W::updateTaxTransByReverseChargePercent_IN(this, _reverseChargePercentage, _sign);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a data source for the <c>TaxTrans_W</c> table.
    /// </summary>
    /// <param name="_parentDataSource">
    /// The data source for the <c>TaxTrans</c> table.
    /// </param>
    /// <param name="_tableId">
    /// The child table identifier.
    /// </param>
    /// <param name="_joinMode">
    /// The join mode for the new data source; optional.
    /// </param>
    /// <returns>
    /// The data source added for the <c>TaxTrans_W</c> table.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The parent data source is null or is not for the <c>TaxTrans</c>
    /// table.
    /// </exception>
    public static QueryBuildDataSource addDataSource(QueryBuildDataSource _parentDataSource, TableId _tableId, JoinMode _joinMode = JoinMode::InnerJoin)
    {
        return TaxTransCustomization_W::addDataSource(_parentDataSource, _tableId, _joinMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(Voucher voucher, TransDate transDate, InventTransId inventTransId )
    {
        boolean ret = true;

        if (!TaxTrans::exist(voucher, transDate, inventTransId))
        {
            ret = checkFailed(strFmt(TaxTrans::txtNotExist(), voucher, date2StrUsr(transDate, DateFlags::FormatAll), inventTransId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eximTaxAmounts_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the EXIM tax amounts for given parameter.
    /// </summary>
    /// <param name="_query">
    /// A buffer of query.
    /// </param>
    /// <param name="_changeDisplaySign">
    /// This param is used to check whether change dispaly sign; optional.
    /// </param>
    /// <returns>
    /// Returns a container with the expected EXIM tax amounts.
    /// </returns>
    public static container eximTaxAmounts_IN(
        Query   _query,
        boolean _changeDisplaySign = false)
    {
        return TaxTransCustomization_W::eximTaxAmounts_IN(_query, _changeDisplaySign);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(Voucher voucher, TransDate transDate, InventTransId inventTransId )
    {
        boolean found;

        found = (select firstonly
                    RecId
                from
                    taxTrans
                where
                    taxTrans.Voucher == voucher &&
                    taxTrans.TransDate == transDate &&
                    taxTrans.InventTransId == inventTransId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBySourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>TaxTrans</c> record exists for the specified source document.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The source document ID for a transaction.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existBySourceDocumentHeader(RefRecId _sourceDocumentHeaderId)
    {
        TaxTrans            taxTrans;
        SourceDocumentLine  sourceDocumentLine;

        select firstonly RecId from taxTrans
            exists join sourceDocumentLine
            where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine &&
                sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderId &&
                sourceDocumentLine.SourceRelationType == tableNum(TaxTrans);

        return taxTrans != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPeriod</Name>
				<Source><![CDATA[
    static boolean existPeriod(TransDate       _fromDate,
                               TransDate       _toDate,
                               TaxPeriod       _taxPeriod)
    {
        // <GEEU>
        #EECountryRegionCodes
        TaxTrans_W taxTrans_W;
        // </GEEU>

        // <GEEU>
        TaxTrans taxTrans;

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled() && TaxParameters::reportUseVatDueDate_W())
        {
            select firstonly RecId from taxTrans
                where taxTrans.TaxPeriod     == _taxPeriod &&
                      // <GEECZ>
            ! taxTrans.PostponeVAT
                      // </GEECZ>
            join RecId, TaxTrans from taxTrans_W
                    where taxTrans_W.TaxTrans == taxTrans.RecId
                        && taxTrans_W.VatDueDate_W  >= _fromDate
                        && taxTrans_W.VatDueDate_W  <= _toDate;
        }
        else
        {
            select firstonly RecId from taxTrans
                where taxTrans.TaxPeriod == _taxPeriod &&
                      taxTrans.TransDate >= _fromDate  &&
                      taxTrans.TransDate <= _toDate;
        }

        return (taxTrans.RecId != 0);
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByDirectionVoucherAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if a <c>TaxTrans</c> record exists for tax direction, voucher, and date.
    /// </summary>
    /// <param name="_taxDirection">
    ///   The tax direction.
    /// </param>
    /// <param name="_voucher">
    ///   The voucher.
    /// </param>
    /// <param name="_transDate">
    ///   The date.
    /// </param>
    /// <returns>
    ///   true if the record exists; otherwise, false.
    /// </returns>
    public static boolean existsByDirectionVoucherAndDate(TaxDirection _taxDirection, Voucher _voucher, TransDate _transDate)
    {
        boolean found;
        TaxTrans taxTrans;

        found = (select firstonly
                    RecId
                from
                    taxTrans
                where
                    taxTrans.Voucher == _voucher &&
                    taxTrans.TransDate == _transDate &&
                    taxTrans.TaxDirection == _taxDirection).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxTrans find(
        Voucher voucher,
        TransDate transDate ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxTrans taxTrans;

        taxTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                taxTrans
            where
                taxTrans.Voucher == voucher &&
                taxTrans.TransDate == transDate;

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static TaxTrans findByRecId(RefRecId _refRecId, boolean _forupdate = false)
    {
        TaxTrans taxTrans;

        if (_refRecId)
        {
            taxTrans.selectForUpdate(_forupdate);

            select firstonly taxTrans
                where taxTrans.RecId == _refRecId;
        }

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGeneralJournalAccountEntry_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_generalJournalAccountEntryRecId">
    /// The record ID of a <c>GeneralJournalAccountEntry</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A <c>TaxTrans</c> record.
    /// </returns>
    public static TaxTrans findByGeneralJournalAccountEntry_IN(
        GeneralJournalAccountEntryRecId     _generalJournalAccountEntryRecId,
        boolean                             _forupdate = false)
    {
        return TaxTransCustomization_W::findByGeneralJournalAccountEntry_IN(_generalJournalAccountEntryRecId, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The record ID of a <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// A <c>TaxTrans</c> record.
    /// </returns>
    static public TaxTrans findBySourceDocumentLine(RefRecId _sourceDocumentLine)
    {
        TaxTrans taxTrans;

        select firstonly taxTrans
            where taxTrans.SourceDocumentLine == _sourceDocumentLine;

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUnrealizedRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record according to unrealized reference recId.
    /// </summary>
    /// <param name="_refRecId">
    /// The reference recId used to find the specifed record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record.
    /// </param>
    /// <returns>
    /// The record of the table <c>TaxTrans</c>
    /// </returns>
    public static TaxTrans findByUnrealizedRefRecId(
        TaxUnrealizedRefRecId       _refRecId,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxTrans taxTrans;

        taxTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxTrans
            where taxTrans.RecId == _refRecId;

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the rec id of the tax transaction.
    /// </summary>
    /// <param name="_recId">
    /// The rec id.
    /// </param>
    /// <param name="_forupdate">
    /// True if the record will be update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model.
    /// </param>
    /// <returns>
    /// The finding results of the tax transaction.
    /// </returns>
    public static TaxTrans findRecId_IN(
        RefRecId                _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        return TaxTransCustomization_W::findRecId_IN(_recId, _forupdate, _concurrencyModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxExchangeRateDifferenceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record id.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction
    /// </param>
    /// <returns>
    /// A <c>TaxTrans</c> record.
    /// </returns>
    static public TaxTrans findTaxExchangeRateDifferenceLine(
        RefTableId      _sourceTableId,
        RefRecId        _sourceRecId,
        TaxCode         _taxCode,
        TaxDirection    _taxDirection)
    {
        TaxTrans taxTrans;

        select firstonly taxTrans
            where taxTrans.SourceTableId    == _sourceTableId &&
                taxTrans.SourceRecId        == _sourceRecId &&
                taxTrans.TaxCode            == _taxCode &&
                taxTrans.TaxDirection       == _taxDirection;

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransRecId</Name>
				<Source><![CDATA[
    // TaxTransRecId is refered as TaxTransRefRecId used for the partial payment calculation of Unrealized VAT.
    // This has been used to identify the spliting and the source of partial invoice for any future development.
    static TaxTrans findTaxTransRecId ( RefRecId       _recId,
                                        boolean     _forUpdate = false)
    {
        TaxTrans taxTrans;

        if (_recId)
        {
            taxTrans.selectForUpdate(_forUpdate);

            select firstonly taxTrans
                where taxTrans.TaxTransRefRecId == _recId;
        }
        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatedTaxAmountForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the total calculated tax amount excluding tax adjustments for the given voucher.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher to retrieve.
    /// </param>
    /// <param name="_date">
    /// The date of the voucher.
    /// </param>
    /// <returns>
    /// The calculated tax amount for the given voucher excluding any tax adjustments.
    /// </returns>
    static TaxAmountCur getCalculatedTaxAmountForVoucher(Voucher    _voucher,
                                                         TransDate  _date)
    {
        TaxTrans     taxTrans;

        select
            sum(SourceTaxAmountCur)
        from taxTrans
        where taxTrans.Voucher          == _voucher  &&
              taxTrans.TransDate        == _date     &&
              taxTrans.TaxOrigin        != TaxOrigin::TaxReversed &&
              taxTrans.TaxOrigin        != TaxOrigin::Transfer;

        return taxTrans.SourceTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginForSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines the origin for the transaction line.
    /// </summary>
    /// <param name="_sourceTableId">
    ///    Table ID of the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    ///    Record ID of the transaction line.
    /// </param>
    /// <param name="_useDisplaySign">
    ///    true if the tax amount should have the proper sign for displaying on the user interface; otherwise, false.
    /// </param>
    /// <returns>
    ///    The tax origin for the transaction line if an origin could be determined; otherwise 0.
    /// </returns>
    public static TaxBase getOriginForSourceLine(RefTableId _sourceTableId, RefRecId _sourceRecId, boolean _useDisplaySign = false)
    {
        TaxTable    taxTable;
        TaxTrans    taxTrans;
        // <GEECZ>
        TaxBaseCur  sourceBaseAmount;
        #ISOCountryRegionCodes
        // </GEECZ>

        select firstonly SourceBaseAmountCur, TaxDirection
                        // <GEECZ>
        , IntracomVAT
                        // </GEECZ>
        from taxTrans
        where taxTrans.SourceRecId == _sourceRecId &&
              taxTrans.SourceTableId == _sourceTableId &&
              taxTrans.TaxDirection != TaxDirection::UseTax
        join RecId from taxTable
        where taxTable.TaxBase != TaxBaseType::PctPerGross &&
              taxTable.TaxBase != TaxBaseType::AmountByUnit &&
              taxTable.TaxOnTax == '';

        if (!taxTrans.RecId)
        {
            select firstonly SourceBaseAmountCur, TaxDirection
                            // <GEECZ>
            ,IntracomVAT
                            // </GEECZ>
            from taxTrans
            where taxTrans.SourceRecId == _sourceRecId &&
                  taxTrans.SourceTableId == _sourceTableId
            join RecId from taxTable
            where taxTable.TaxBase != TaxBaseType::AmountByUnit &&
                  taxTable.TaxOnTax == '';

            if (!taxTrans.RecId)
            {
                return 0;
            }
        }
        // <GEECZ>
        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]) && taxTrans.IntracomVAT )
            || !_useDisplaySign)
        {
            sourceBaseAmount = taxTrans.SourceBaseAmountCur;
        }
        else
        {
            sourceBaseAmount = Tax::changeDisplaySign(taxTrans.TaxDirection) * taxTrans.SourceBaseAmountCur;
        }
        return sourceBaseAmount;
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxSign_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets service tax sign.
    /// </summary>
    /// <param name="_isServiceTax">
    /// Indicates if is service tax.
    /// </param>
    /// <param name="_taxTrans">
    /// The tax trans
    /// </param>
    /// <param name="_checkGTAVendor">
    /// Indicates if check GTA vendor or not.
    /// </param>
    /// <param name="_isGTAVendor">
    /// Indicates if is GTA vendor or not.
    /// </param>
    /// <param name="_sign">
    /// The sign
    /// </param>
    /// <returns>
    /// Returns the service tax info in a containers.
    /// </returns>
    static container getServiceTaxSign_IN(boolean _isServiceTax, TaxTrans _taxTrans, boolean _checkGTAVendor, boolean _isGTAVendor, int _sign)
    {
        return TaxTransCustomization_W::getServiceTaxSign_IN(_isServiceTax, _taxTrans, _checkGTAVendor, _isGTAVendor, _sign);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountIncludedInInvoice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extracts and returns the tax amount included in the invoice amount for India.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The sourceTable id
    /// </param>
    /// <param name="_sourceRecId">
    /// Source RecId
    /// </param>
    /// <returns>
    /// The cumulative tax amount (considers adjustment also) against which the payment can be made.
    /// That means (ServiceTax + VAT + Excise + SalesTax). Does not consider Standard Tax, Customs.
    /// WHT does not come here.
    /// </returns>
    public static TaxAmountCur getTaxAmountIncludedInInvoice_IN(
        RefTableId _sourceTableId,
        RefRecId   _sourceRecId)
    {
        return TaxTransCustomization_W::getTaxAmountIncludedInInvoice_IN(_sourceTableId, _sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdjustmentInTmpTaxReportById</Name>
				<Source><![CDATA[
    static void insertAdjustmentInTmpTaxReportById(TmpTaxReportById _tmpTaxReportById,
                                                          TmpTaxReportById _adjustments)
    {
        TaxTransReportById::insertAdjustmentInTmpTaxReportById(_tmpTaxReportById, _adjustments);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partialUnrealisedTaxSettled</Name>
				<Source><![CDATA[
    //Partial invoice amount calculation for the Unrealized VAt
    public static AmountCur partialUnrealisedTaxSettled (InventTransId   _inventTransId,
                                                         AmountCur      _paymentAmount,
                                                         boolean        _isCustomer,
                                                         boolean        _finalPayment,
                                                         boolean        _inclTax,
                                                         Voucher        _voucher,
                                                         RefRecId       _sourceDocumentLineRecId = 0,
                                                         RefRecId       _invoiceLineRecId = 0,
                                                         boolean        _isTaxWithholdUK = false)
    {
        TaxTransPartialUnrealizedTaxSettledCalculator calculator = TaxTransPartialUnrealizedTaxSettledCalculator::construct(_isTaxWithholdUK);

        return calculator.getPartialUnrealisedTaxSettled(_inventTransId,
                                                         _paymentAmount,
                                                         _isCustomer,
                                                         _finalPayment,
                                                         _inclTax,
                                                         _voucher,
                                                         _sourceDocumentLineRecId,
                                                         _invoiceLineRecId,
                                                         _isTaxWithholdUK);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the parent of the <c>TaxTrans</c> records.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the transaction line.
    /// </param>
    /// <param name="_newSourceRecId">
    /// The record ID of the new transaction line.
    /// </param>
    /// <param name="_oldSourceRecId">
    /// The record ID of the old transaction line.
    /// </param>
    static void resetSourceRecId(RefTableId _sourceTableId, RefRecId _newSourceRecId, RefRecId _oldSourceRecId)
    {
        TaxTrans taxTrans;

        update_recordset taxTrans
        setting
            SourceRecId = _newSourceRecId
        where
            taxTrans.SourceTableId == _sourceTableId &&
            taxTrans.SourceRecId   == _oldSourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_Amount</Name>
				<Source><![CDATA[
    /*This method will return one amount for a specific reportID.
    The reportId is given in a record to the method as an parameter.*/
    static AmountMST taxAmountByReportId_Amount(TaxReportCollection _taxReportCollection, //Specific ReportId
                                                       TaxReportPeriod     _taxReportPeriod,     //Period
                                                       TaxReportLayout     _taxReportLayout = TaxReportLayout::Default)

    {
        TaxTransReportByIdTransactionQuery transactionQueryProcess = TaxTransReportByIdTransactionQueryFactory::newTransactionQueryProcess();
        TaxTransReportByIdTableBuilder tableBuilderProcess = TaxTransReportByIdTableBuilderFactory::newTableBuilderProcess(_taxReportLayout);

        return TaxTransReportById::getTaxAmountByReportId_Amount(transactionQueryProcess,
                                                                tableBuilderProcess,
                                                                _taxReportCollection,
                                                                _taxReportPeriod,
                                                                _taxReportLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_Table</Name>
				<Source><![CDATA[
    /*This method will return a table containing records with all reportIds and Amounts for a given period.*/
    static TmpTaxReportById taxAmountByReportId_Table(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        TaxRepVersion       _taxRepVersion,
        TaxVersion          _taxRepCounter  = 0,
        NoYes               _reported       = NoYes::No,
        DebCredProposal     _debitCredit    = DebCredProposal::None,
        container           _propertiesBagPacked  = conNull()
        )
    {
        return TaxTransReportById::taxAmountByReportId_Table(_fromDate,
                                                            _toDate,
                                                            _taxPeriod,
                                                            _taxRepVersion,
                                                            _taxRepCounter,
                                                            _reported,
                                                            _debitCredit,
                                                            _propertiesBagPacked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCustoms_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax amount for given parameter.
    /// </summary>
    /// <param name="_query">
    /// A buffer of query.
    /// </param>
    /// <param name="_changeDisplaySign">
    /// This param is used to check whether change dispaly sign; optional.
    /// </param>
    /// <param name="_generalJournalEntryId">
    /// The record id of general journal entry is used to add range; optional.
    /// </param>
    /// <returns>
    /// The tax amount.
    /// </returns>
    public static TaxAmount taxAmountCustoms_IN(
        Query    _query,
        boolean  _changeDisplaySign = false,
        RefRecId _generalJournalEntryId = 0)
    {
        return TaxTransCustomization_W::taxAmountCustoms_IN(_query, _changeDisplaySign, _generalJournalEntryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalActualTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The actual total tax amount in the transaction currency.
    /// </summary>
    /// <param name="_query">
    ///  A query that indicates the range restrictions.
    /// </param>
    /// <param name="_changeDisplaySign">
    ///  A Boolean value that indicates if the sign should be determined based on the tax code tax direction.
    /// </param>
    /// <param name="_generalJournalEntryId">
    ///  A RefRecId value that indicates an additional range restriction.
    /// </param>
    /// <returns>
    ///  The total tax amount in the transaction currency.
    /// </returns>
    static TaxAmountCur totalActualTaxAmount(Query    _query,
                                       boolean  _changeDisplaySign = false,
                                       RefRecId _generalJournalEntryId = 0)
    {
        TaxTransTotalTaxAmountFetcher taxTransTotalTaxAmountFetcher = TaxTransTotalTaxAmountFetcher::construct();
        return taxTransTotalTaxAmountFetcher.getTotalActualTaxAmount(_query, _changeDisplaySign, _generalJournalEntryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxByDirectionVoucherAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the total tax amount for the tax direction, voucher, and date.
    /// </summary>
    /// <param name="_taxDirection">
    ///   The tax direction.
    /// </param>
    /// <param name="_voucher">
    ///   The voucher.
    /// </param>
    /// <param name="_transDate">
    ///   The date.
    /// </param>
    /// <returns>
    ///   Actual tax amount in transactional currency.
    /// </returns>
    public static TaxAmountCur totalTaxByDirectionVoucherAndDate(TaxDirection _taxDirection, Voucher _voucher, TransDate _transDate)
    {
        TaxTrans taxTrans;

        select sum(SourceRegulateAmountCur)
        from taxTrans
        where (taxTrans.Voucher == _voucher &&
              taxTrans.TransDate == _transDate &&
              taxTrans.TaxDirection  == _taxDirection &&
              taxTrans.TaxOrigin     != TaxOrigin::TaxReversed);

        return taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVATLineAmountPaid</Name>
				<Source><![CDATA[
    public static AmountCur totalVATLineAmountPaid(InventTransId _inventTransId)
    {
        TaxTrans    taxTrans;

        if ( _inventTransId)
        {
            select  sum(SourceTaxAmountCur)
                    from taxTrans
                    where   taxTrans.InventTransId == _inventTransId &&
                            taxTrans.UnrealizedTax == NoYes::No;

            return taxTrans.SourceTaxAmountCur;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102254";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRepCounter_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax trans rep counter.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    public static void updateRepCounter_IN(RecId _recId)
    {
        TaxTrans    taxTransCopy;

        ttsbegin;
        select firstonly forupdate taxTransCopy
            where taxTransCopy.RecId   ==  _recId;

        taxTransCopy.TaxRepCounter = -1;
        taxTransCopy.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxInvoiceDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates tax invoice details.
    /// </summary>
    /// <param name="_origTaxInvoiceId">
    ///     Original tax invoice id.
    /// </param>
    /// <param name="_newTaxInvoiceId">
    ///     New tax invoice id.
    /// </param>
    /// <param name="_newTaxInvoiceDate">
    ///     New tax invoice date.
    /// </param>
    /// <param name="_newTaxInvoiceReceiptDate">
    ///     New tax invoice receipt date.
    /// </param>
    /// <param name="_newRealVendName">
    ///     New real vendor name.
    /// </param>
    public static void updateTaxInvoiceDetails(
        TaxUnrealizedPurchTaxInvoiceId       _origTaxInvoiceId,
        TaxUnrealizedPurchTaxInvoiceId       _newTaxInvoiceId,
        TaxUnrealizedPurchTaxInvoiceDate     _newTaxInvoiceDate,
        TaxUnrealizedPurchTaxInvoiceRcptDate _newTaxInvoiceReceiptDate,
        TaxUnrealizedPurchRealVendName       _newRealVendName)
    {      
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoTH, GlobalizationConstants::FeatureReferenceTH00002] ],
            funcName()
        );

        TaxTransExtensionTH             taxTransExtensionTH;
        VendInvoiceInfoTable            vendInvoiceInfoTable;
        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH;
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
        VendUnrealizedRev               vendUnrealizedRev;

        ttsbegin;
        update_recordset taxTransExtensionTH
            setting TaxInvoiceId        = _newTaxInvoiceId,
                TaxInvoiceDate          = _newTaxInvoiceDate,
                TaxInvoiceReceiptDate   = _newTaxInvoiceReceiptDate,
                RealVendName            = _newRealVendName
            where taxTransExtensionTH.TaxInvoiceId == _origTaxInvoiceId;

        update_recordset vendInvoiceInfoTableExtensionTH
            setting TaxInvoiceReceiptDate   = _newTaxInvoiceReceiptDate,
                RealVendName                = _newRealVendName
            exists join vendInvoiceInfoTable
            where vendInvoiceInfoTable.RecId        == vendInvoiceInfoTableExtensionTH.VendInvoiceInfoTable
                && vendInvoiceInfoTable.DocumentNum == _origTaxInvoiceId;

        update_recordset vendInvoiceInfoTable
            setting DocumentNum         = _newTaxInvoiceId,
                DocumentDate            = _newTaxInvoiceDate
            where vendInvoiceInfoTable.DocumentNum == _origTaxInvoiceId;

        update_recordset ledgerJournalTransExtensionTH
            setting TaxInvoiceReceiptDate   = _newTaxInvoiceReceiptDate,
                RealVendName                = _newRealVendName
            exists join ledgerJournalTrans
            where ledgerJournalTrans.RecId          == ledgerJournalTransExtensionTH.LedgerJournalTrans
                && ledgerJournalTrans.DocumentNum   == _origTaxInvoiceId;

        update_recordset ledgerJournalTrans
            setting DocumentNum         = _newTaxInvoiceId,
                DocumentDate            = _newTaxInvoiceDate
            where ledgerJournalTrans.DocumentNum == _origTaxInvoiceId;

        update_recordset vendUnrealizedRev
            setting TaxInvoiceId        = _newTaxInvoiceId,
                TaxInvoiceDate          = _newTaxInvoiceDate,
                TaxInvoiceReceiptDate   = _newTaxInvoiceReceiptDate,
                RealVendName            = _newRealVendName
            where vendUnrealizedRev.TaxInvoiceId == _origTaxInvoiceId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTaxTrans_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the <paramref name="_taxTrans_IT"/> to <c>TaxTable</c> PackedExtensions container field.
    /// </summary>
    /// <param name="_taxTrans_IT">
    /// A <c>TaxTrans_IT</c> to increment.
    /// </param>
    public void packTaxTrans_IT(TaxTrans_IT _taxTrans_IT)
    {
        _taxTrans_IT.TaxTrans = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_taxTrans_IT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTrans_IT</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the specified record in the <c>TaxTrans_IT</c> table.
    /// </summary>
    /// <returns>
    ///  A record in the <c>TaxTrans_IT</c> table; otherwise, an empty record.
    /// </returns>
    public TaxTrans_IT taxTrans_IT()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(TaxTrans_IT));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVATLineAmountPaidBySourceDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount cur paid for a specific tax transaction
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line reference for this tax transaction
    /// </param>
    /// <returns>
    /// The amount currency of the unrealized tax paid
    /// </returns>
    public static AmountCur totalVATLineAmountPaidBySourceDocLine(RefRecId _sourceDocumentLine)
    {
        TaxTrans    taxTrans;

        if (_sourceDocumentLine)
        {
            select  sum(SourceTaxAmountCur)
                    from taxTrans
                    where   taxTrans.SourceDocumentLine == _sourceDocumentLine &&
                            taxTrans.UnrealizedTax == NoYes::No;

            return taxTrans.SourceTaxAmountCur;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJour_EE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original invoice joural.
    /// </summary>
    /// <returns>The original invoice journal.</returns>
    // Used in GER configuration.
    public CustVendInvoiceJour getInvoiceJour_EE()
    {
        CustVendInvoiceJour invoiceJour = new SysDictTable(tableNum(CustInvoiceJour)).makeRecord();

        RefTableId sourceTableId = this.SourceTableId;

        if (this.TaxOrigin == TaxOrigin::TaxReversed)
        {
            sourceTableId = TaxTrans::find(this.Voucher, this.TransDate).SourceTableId;
        }

        switch (sourceTableId)
        {
            case tableNum(LedgerJournalTrans):
                boolean findInvoiceJour = false;
                LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(this.SourceRecId, false);
                if (ledgerJournalTrans.Invoice && ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                {
                    invoiceJour = CustInvoiceJour::findFromTaxTrans(this.Voucher, this.TransDate);
                }
                else if (ledgerJournalTrans.Invoice && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    findInvoiceJour = true;
                }
                else
                {
                    LedgerJournalTrans ledgerJournalTransVend;
                    select firstonly RecId from ledgerJournalTransVend
                        where ledgerJournalTransVend.JournalNum == ledgerJournalTrans.JournalNum
                            && ledgerJournalTransVend.Voucher == ledgerJournalTrans.Voucher
                            && ledgerJournalTransVend.TransDate == ledgerJournalTrans.TransDate
                            && ledgerJournalTransVend.Invoice
                            && ledgerJournalTransVend.AccountType == LedgerJournalACType::Vend;

                    findInvoiceJour = ledgerJournalTransVend.RecId;
                }

                if (!findInvoiceJour && 
                    ledgerJournalTrans.Invoice && 
                    ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger &&
                    ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Approval)
                {
                    findInvoiceJour = true;
                }

                if (findInvoiceJour)
                {
                    invoiceJour = VendInvoiceJour::findFromTaxTrans(this.Voucher, this.TransDate);
                }
                break;

            case tableNum(CustInvoiceTrans):
                invoiceJour = CustInvoiceTrans::findRecId(this.SourceRecId).custInvoiceJour();
                break;

            case tableNum(CustInvoiceLine):
                invoiceJour = CustInvoiceTrans::findBySourceDocumentLine(CustInvoiceLine::find(this.SourceRecId).SourceDocumentLine).custInvoiceJour();
                break;

            case tableNum(VendInvoiceTrans):
                invoiceJour = VendInvoiceTrans::findRecId(this.SourceRecId).vendInvoiceJour();
                break;

            case tableNum(VendTrans):
                VendTrans vendTrans = VendTrans::find(VendTrans::find(this.SourceRecId).OffsetRecid);
                invoiceJour = vendTrans.vendInvoiceJour();
                if (!invoiceJour)
                {
                    invoiceJour = ProjInvoiceJour::find(vendTrans.Invoice, vendTrans.TransDate);
                }
                break;

            case tableNum(CustTrans):
                CustTrans custTrans = CustTrans::find(CustTrans::find(this.SourceRecId).OffsetRecid);
                invoiceJour = custTrans.custInvoiceJour_RU();
                if (!invoiceJour)
                {
                    invoiceJour = ProjInvoiceJour::find(custTrans.Invoice, custTrans.TransDate);
                }
                break;

            case tableNum(ProjInvoiceCost):
                invoiceJour = ProjInvoiceCost::findRecId(this.SourceRecId).projInvoiceJour();
                break;

            case tableNum(ProjInvoiceEmpl):
                invoiceJour = ProjInvoiceEmpl::findRecId(this.SourceRecId).projInvoiceJour();
                break;

            case tableNum(ProjInvoiceItem):
                invoiceJour = ProjInvoiceItem::findRecId(this.SourceRecId).projInvoiceJour();
                break;

            case tableNum(ProjInvoiceOnAcc):
                invoiceJour = ProjInvoiceOnAcc::findRecId(this.SourceRecId).projInvoiceJour();
                break;

            case tableNum(ProjInvoiceRevenue):
                invoiceJour = ProjInvoiceRevenue::findRecId(this.SourceRecId).projInvoiceJour();
                break;

            case tableNum(MarkupTrans):
                MarkupTrans markupTrans = MarkupTrans::findRecId(this.SourceRecId);
                switch (markupTrans.TransTableId)
                {
                    case tableNum(CustInvoiceJour):
                        invoiceJour = CustInvoiceJour::findRecId(markupTrans.TransRecId);
                        break;

                    case tableNum(CustInvoiceTrans):
                        invoiceJour = CustInvoiceTrans::findRecId(markupTrans.TransRecId).custInvoiceJour();
                        break;

                    case tableNum(VendInvoiceJour):
                        invoiceJour = VendInvoiceJour::findRecId(markupTrans.TransRecId);
                        break;

                    case tableNum(VendInvoiceTrans):
                        invoiceJour = VendInvoiceTrans::findRecId(markupTrans.TransRecId).vendInvoiceJour();
                        break;

                    case tableNum(ProjInvoiceJour):
                        invoiceJour = ProjInvoiceJour::findRecId(markupTrans.TransRecId);
                        break;

                    case tableNum(ProjInvoiceItem):
                        invoiceJour = ProjInvoiceItem::findRecId(markupTrans.TransRecId).projInvoiceJour();
                        break;

                    default:
                        break;
                }
                break;

            default :
                break;
        }

        return invoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account of the Taxable transaction line.
    /// </summary>
    /// <returns>
    /// MainaccountNum of the taxable transaction line.
    /// </returns>
    public display MainAccountNum costAccountNum()
    {
        LedgerDimensionAccount ledgerDimension = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(this.RecId, TaxTransRelationshipType::TransactionLineAccount);

        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deTaxRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the recid of the <c>TaxTransGeneralJournalAccountEntry</c> record.
    /// </summary>
    /// <returns>
    /// Recid of the <c>TaxTransGeneralJournalAccountEntry</c> record related to the <c>GeneralJournalAccountEntry</c> record.
    /// </returns>
    public display RefRecId deTaxRefId()
    {
        RefRecId result = 0;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;

        select firstOnly taxTransGeneralJournalAccountEntry
            where taxTransGeneralJournalAccountEntry.TaxTrans == this.RecId;

        if (taxTransGeneralJournalAccountEntry)
        {
            result = taxTransGeneralJournalAccountEntry.getTaxRefId_DE();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method find the Record of TaxTrans by ledgerJournalTrans.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c>
    /// </param>
    /// <returns>
    /// Return the <c>taxTrans</c> select by Ledger.
    /// </returns>
    public static TaxTrans findByLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxTrans taxTrans;

        select firstOnly taxTrans
            where taxTrans.Voucher                == _ledgerJournalTrans.Voucher
                &&  taxTrans.TransDate            == _ledgerJournalTrans.TransDate
                &&  ((taxTrans.SourceRecId     == _ledgerJournalTrans.RecId
                     && taxTrans.SourceTableId == _ledgerJournalTrans.TableId)
                    || taxTrans.SourceRecId == 0)
                &&  taxTrans.TaxOrigin            != TaxOrigin::TaxReversed
                &&  taxTrans.TaxOrigin            != TaxOrigin::Transfer;

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxSettledForTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax is settled for transaction.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record id.
    /// </param>
    /// <returns>
    /// If 'True', the tax is settled for transaction.
    /// </returns>
    public static boolean isTaxSettledForTransaction(TableId _sourceTableId, RecId _sourceRecId)
    {
        TaxTrans taxTrans;
        TaxReportPeriod taxReportPeriod;

        if (!_sourceTableId || !_sourceRecId)
        {
            return false;
        }
        else
        {
            select firstonly RecId from taxTrans
            exists join taxReportPeriod
                where taxReportPeriod.TaxPeriod == taxTrans.TaxPeriod
                    && taxReportPeriod.FromDate <= taxTrans.TransDate
                    && taxReportPeriod.ToDate >= taxTrans.TransDate
                    && taxReportPeriod.VersionNum > taxTrans.TaxRepCounter
                    && taxTrans.SourceTableId == _sourceTableId
                    && taxTrans.SourceRecId == _sourceRecId;

            return taxTrans.RecId != 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxIdFromReversedTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init tax id from reversed tax tarns.
    /// </summary>
    /// <param name = "_taxTrans">The <c>taxTrans</c> record.</param>
    /// <returns>If true, it's reverse tax trans.</returns>
    public static boolean initTaxIdFromReversedTaxTrans(TaxTrans _taxTrans)
    {
        boolean isReverseTaxTrans;
        TaxTrans taxTransOrigin;

        // reverse tax
        if (_taxTrans.TaxOrigin == TaxOrigin::TaxReversed || _taxTrans.TaxOrigin == TaxOrigin::CashDisc)
        {
            isReverseTaxTrans = true;
        }
          
        // Free text invoice correction.        
        if (_taxTrans.Source == TaxModuleType::FreeTxtInvoice)
        {
            taxTransOrigin = _taxTrans.getOriginTaxTransFromFTICorrection();
        }

        // Sales order return order
        else if (_taxTrans.Source == TaxModuleType::SalesInvoice)
        {
            taxTransOrigin = _taxTrans.getOriginTaxTransFromSOReturnOrder();
        }

        // Purchase order credit note
        else if (_taxTrans.Source == TaxModuleType::PurchInvoice)
        {
            taxTransOrigin = _taxTrans.getOriginTaxTransFromPOCreditNote();
        }

        // AP invoice approval
        else if (_taxTrans.Source == TaxModuleType::Voucher)
        {
            isReverseTaxTrans = _taxTrans.initTaxIdForAPApprovalInvoice() || isReverseTaxTrans;
        }

        if (taxTransOrigin)
        {
            isReverseTaxTrans = true;
            _taxTrans.TaxID = taxTransOrigin.TaxID;
            if (!_taxTrans.PartyTaxId)
            {
                _taxTrans.PartyTaxId = taxTransOrigin.PartyTaxId;
            }
        }

        return isReverseTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxIdForAPApprovalInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init tax id for AP approval invoice.
    /// </summary>
    /// <returns>If ture, it's AP approval invoice.</returns>
    private boolean initTaxIdForAPApprovalInvoice()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTable      ledgerJournalTable;
        TaxRegistrationRecId    taxId;
        TaxTrans                taxTransOrigin;
        container               taxTransCacheKey;
        boolean                 isAPApprovalInvoice;
        container               cacheValue;

        select firstonly JournalType, RecId from ledgerJournalTable
            where ledgerJournalTable.JournalType == LedgerJournalType::Approval
            join Voucher, JournalNum from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    && ledgerJournalTrans.RecId == this.SourceRecId;

        if (ledgerJournalTable.RecId)
        {
            isAPApprovalInvoice = true;

            taxTransCacheKey = [tableNum(LedgerJournalTable), ledgerJournalTable.RecId, this.TaxCode];
            cacheValue = TaxTransCache::getValue(TaxCacheScope::IntersectionData, taxTransCacheKey);

            if (cacheValue == conNull())
            {
                LedgerJournalTrans ledgerJournalTransOrigin;
                     
                select firstonly TaxID from taxTransOrigin
                    where taxTransOrigin.SourceTableId == tableNum(LedgerJournalTrans)
                        && taxTransOrigin.TaxCode == this.TaxCode
                    join RecId from ledgerJournalTransOrigin
                        where ledgerJournalTransOrigin.RecId == taxTransOrigin.SourceRecId
                            && ledgerJournalTransOrigin.JournalNum != ledgerJournalTrans.JournalNum
                            && ledgerJournalTransOrigin.Voucher == ledgerJournalTrans.Voucher;
                if (taxTransOrigin)
                {
                    TaxTransCache::insertValue(TaxCacheScope::IntersectionData, taxTransCacheKey, [taxTransOrigin.TaxID]);
                    this.TaxID = taxTransOrigin.TaxID;
                }
            }
            else
            {
                [taxId] = cacheValue;
                this.TaxID = taxId;
            }
        }

        return isAPApprovalInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginTaxTransFromFTICorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets origin tax trans from free text invoice correction.
    /// </summary>
    /// <returns>The record of <c>TaxTrans</c>.</returns>
    private TaxTrans getOriginTaxTransFromFTICorrection()
    {
        CustInvoiceTrans    custInvoiceTrans;
        CustInvoiceJour     custInvoiceJour;
        CustInvoiceTable    custInvoiceTable ;
        CustInvoiceLine     custInvoiceLine;
        CustInvoiceLine     custInvoiceLineOrigin;
        CustInvoiceTable    custInvoiceTableOrigin;
        CustInvoiceJour     custInvoiceJourOrigin ;
        CustInvoiceTrans    custInvoiceTransOrigin;
        TaxTrans            taxTransOrigin;

        switch (this.SourceTableId)
        {
            case tableNum(CustInvoiceTrans):
                select firstonly CorrectedCustInvoiceLine from custInvoiceLine
                    where custInvoiceLine.CorrectedCustInvoiceLine != 0
                    join RecId from custInvoiceTable
                        where custInvoiceTable.RecId == custInvoiceLine.ParentRecId
                        join RecId from custInvoiceJour
                            where custInvoiceJour.InvoiceId == custInvoiceTable.InvoiceId
                                && custInvoiceJour.InvoiceDate == custInvoiceTable.InvoiceDate
                                && custInvoiceJour.numberSequenceGroup == custInvoiceTable.numberSequenceGroup
                            join RecId from custInvoiceTrans
                                where custInvoiceTrans.SalesId == custInvoiceJour.SalesId
                                    && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
                                    && custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
                                    && custInvoiceTrans.LineNum == custInvoiceLine.LineNum
                                    && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
                                    && custInvoiceTrans.RecId == this.SourceRecId;
                break;

            case tableNum(CustInvoiceLine):
                select firstonly CorrectedCustInvoiceLine from custInvoiceLine
                    where custInvoiceLine.RecId == this.SourceRecId
                        && custInvoiceLine.CorrectedCustInvoiceLine != 0;
                break;
        }

        if (custInvoiceLine)
        {
            select firstonly TaxID, PartyTaxID from taxTransOrigin
                where taxTransOrigin.SourceTableId == tableNum(CustInvoiceTrans)
                    && taxTransOrigin.TaxCode == this.TaxCode
                join RecId from custInvoiceTransOrigin
                    where custInvoiceTransOrigin.RecId == taxTransOrigin.SourceRecId
                    join RecId from custInvoiceJourOrigin
                        where custInvoiceJourOrigin.RecId == custInvoiceTransOrigin.ParentRecId
                        join RecId from custInvoiceTableOrigin
                            where custInvoiceTableOrigin.InvoiceId == custInvoiceJourOrigin.InvoiceId
                                && custInvoiceTableOrigin.InvoiceDate == custInvoiceJourOrigin.InvoiceDate
                                && custInvoiceTableOrigin.numberSequenceGroup == custInvoiceJourOrigin.numberSequenceGroup
                            join RecId from custInvoiceLineOrigin
                                where custInvoiceLineOrigin.ParentRecId == custInvoiceTableOrigin.RecId
                                    && custInvoiceLineOrigin.LineNum == custInvoiceTransOrigin.LineNum
                                    && custInvoiceLineOrigin.RecId == custInvoiceLine.CorrectedCustInvoiceLine;
        }

        return taxTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginTaxTransFromSOReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets origin tax trans form SO return order.
    /// </summary>
    /// <returns>The record of <c>TaxTrans</c>.</returns>
    private TaxTrans getOriginTaxTransFromSOReturnOrder()
    {
        SalesLine salesLine;
        CustInvoiceTrans custInvoiceTrans;
        TaxTrans taxTransOrigin;

        select firstonly RefReturnInvoiceTrans_W from salesLine
            where salesLine.RefReturnInvoiceTrans_W != 0
            join RecId from custInvoiceTrans
                where custInvoiceTrans.SalesId == salesLine.SalesId
                    && custInvoiceTrans.LineNum == salesLine.LineNum
                    && custInvoiceTrans.RecId == this.SourceRecId;

        if (salesLine.RefReturnInvoiceTrans_W)
        {
            select firstonly TaxID, PartyTaxID from taxTransOrigin
                where taxTransOrigin.SourceTableId == tableNum(CustInvoiceTrans)
                    && taxTransOrigin.SourceRecId == salesLine.RefReturnInvoiceTrans_W
                    && taxTransOrigin.TaxCode == this.TaxCode;
        }

        return taxTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginTaxTransFromPOCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets origin tax trans from PO credit note.
    /// </summary>
    /// <returns>The record of <c>TaxTrans</c>.</returns>
    private TaxTrans getOriginTaxTransFromPOCreditNote()
    {
        VendInvoiceTrans vendInvoiceTrans;
        PurchLine purchLine;
        TaxTrans taxTransOrigin;

        select firstonly CreditedVendInvoiceTrans from purchLine
            where purchLine.CreditedVendInvoiceTrans != 0
            join RecId from vendInvoiceTrans
                where vendInvoiceTrans.RecId == this.SourceRecId
                    && vendInvoiceTrans.PurchID == purchLine.PurchId
                    && vendInvoiceTrans.LineNum == purchLine.LineNumber;

        if (purchLine.CreditedVendInvoiceTrans)
        {
            select firstonly TaxID, PartyTaxID from  taxTransOrigin
                    where taxTransOrigin.SourceTableId == tableNum(VendInvoiceTrans)
                        && taxTransOrigin.SourceRecId == purchLine.CreditedVendInvoiceTrans
                        && taxTransOrigin.TaxCode == this.TaxCode;
        }

        return taxTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayExistReversedTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the reversed tax trans may exists.
    /// </summary>
    /// <param name="_taxTrans">
    /// The record for <c>TaxTrans</c>.
    /// </param>
    /// <returns>
    /// true if the reversed tax trans may exists; otherwise, false.
    /// </returns>
    private boolean mayExistReversedTaxTrans()
    {
        boolean mayExistReversedTaxTrans;
        mayExistReversedTaxTrans = this.Source == TaxModuleType::PurchInvoice
            || this.Source == TaxModuleType::SalesInvoice 
            || this.Source == TaxModuleType::FreeTxtInvoice 
            || this.Source == TaxModuleType::Voucher
            || this.TaxOrigin == TaxOrigin::TaxReversed 
            || this.TaxOrigin == TaxOrigin::CashDisc;

        return mayExistReversedTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTaxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display tax registration number.
    /// </summary>
    /// <param name = "_taxTrans">Instance of <c>TaxTrans</c></param>
    /// <returns>Tax id.</returns>
    display TaxRegistrationNumber displayTaxId(TaxTrans _taxTrans)
    {
        TaxRegistration taxRegistration = TaxRegistration::find(_taxTrans.TaxID);
        return TaxRegistration.RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginForSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the origin for the transaction line.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the source document line.
    /// </param>
    /// <param name="_useDisplaySign">
    /// A Boolean value that indicates whether the tax amount will have the correct sign for displaying on
    /// the user interface.
    /// </param>
    /// <param name="_lineAmount">
    /// Line amount including tax.
    /// </param>
    /// <returns>
    /// The tax origin for the transaction line if an origin could be determined; otherwise 0.
    /// </returns>
    public static TaxBase getOriginForSourceDocumentLine(
        RefTableId _sourceTableId,
        RefRecId _sourceDocumentLineRecId,
        boolean _useDisplaySign = false,
        AmountCur _lineAmount = 0)
    {
        TaxTable                taxTable;
        Taxtrans                taxTrans;
        CustVendInvoiceTrans    custVendInvoiceTrans;
        VendInvoiceTrans        vendInvoiceTrans;
        CustInvoiceTrans        custInvoiceTrans;
        // <GEECZ>
        TaxBaseCur              sourceBaseAmount;
        #ISOCountryRegionCodes
        // </GEECZ>

        if (!TaxTrans::canGetOriginForSourceDocumentLine(_sourceTableId, _sourceDocumentLineRecId))
        {
            return 0;
        }

        if (_sourceTableId == tableNum(VendInvoiceTrans))
        {
            custVendInvoiceTrans = vendInvoiceTrans;
        }
        else if (_sourceTableId == tableNum(CustInvoiceTrans))
        {
            custVendInvoiceTrans = custInvoiceTrans;
        }

        // fix tax per unit and gross amount combination, tax inclusive, tax rate is positive, base amount is incorrect for PO and pending vendor invoice issue
        if (_sourceTableId == tableNum(VendInvoiceTrans))
        {
            select firstonly RecId from taxTrans
                join RecId from custVendInvoiceTrans
                    where taxTrans.SourceTableId == _sourceTableId
                        && taxTrans.SourceRecId == custVendInvoiceTrans.RecId
                        && custVendInvoiceTrans.SourceDocumentLine == _sourceDocumentLineRecId
                        && taxTrans.TaxDirection != TaxDirection::UseTax
                    join RecId from taxTable
                        where taxTable.TaxBase == TaxBaseType::AmountByUnit
                            && taxTable.TaxCode == taxTrans.TaxCode
                            && taxTable.TaxType_IN == TaxType_IN::None
                            && taxTable.TaxOnTax == '';

            if (taxTrans.RecId)
            {
                // With TaxCalcTaxBaseAmountByUnitFlight enabled, the following two cases are handled.
                // 1. AmountByUnit only
                // 2. AmountByUnit and others (including AmountByUnit and PctPerGross combination which is already supported)
                if (!TaxCalcTaxBaseAmountByUnitFlight::instance().isEnabled())
                {
                    select firstonly RecId from taxTrans
                        join RecId from custVendInvoiceTrans
                            where taxTrans.SourceTableId == _sourceTableId
                                && taxTrans.SourceRecId == custVendInvoiceTrans.RecId
                                && custVendInvoiceTrans.SourceDocumentLine == _sourceDocumentLineRecId
                                && taxTrans.TaxDirection != TaxDirection::UseTax
                            join RecId from taxTable
                                where taxTable.TaxBase == TaxBaseType::PctPerGross
                                    && taxTable.TaxCode == taxTrans.TaxCode
                                    && taxTable.TaxType_IN == TaxType_IN::None
                                    && taxTable.TaxOnTax == '';
                }

                if (taxTrans.RecId)
                {
                    TaxAmountCur taxAmountCur = TaxTrans::totalRegulatedTaxAmountSingleLine(_sourceTableId, custVendInvoiceTrans.RecId);

                    if (taxAmountCur && !prmisDefault(_lineAmount))
                    {
                        sourceBaseAmount = abs(_lineAmount) - abs(taxAmountCur);
                        sourceBaseAmount = (_lineAmount > 0 ? 1: -1) * sourceBaseAmount;
                        return sourceBaseAmount;
                    }
                }
            }
        }

        select firstonly SourceBaseAmountCur, TaxDirection, SourceTaxAmountCur
            //<GEEES>
            ,IntracomVAT
            //</GEEES>
            from taxTrans
            join RecId from custVendInvoiceTrans
            where taxTrans.SourceTableId == _sourceTableId
                && taxTrans.SourceRecId == custVendInvoiceTrans.RecId
                && custVendInvoiceTrans.SourceDocumentLine == _sourceDocumentLineRecId
                && taxTrans.TaxDirection != TaxDirection::UseTax
                && (taxTrans.Source != TaxModuleType::Purch 
                    || (taxTrans.Source == TaxModuleType::Purch && taxTrans.ReverseCharge_W == NoYes::No))
            join RecId from taxTable
                where taxTable.TaxBase != TaxBaseType::PctPerGross
                    //<GEEU>
                    && taxTable.TaxCode == TaxTrans.TaxCode
                    //</GEEU>
                    // <GIN>
                    && taxTable.TaxType_IN == TaxType_IN::None
                    // </GIN>
                    && taxTable.TaxBase != TaxBaseType::AmountByUnit
                    && taxTable.TaxOnTax == '';

        if (!taxTrans.RecId)
        {
            select firstonly SourceBaseAmountCur, TaxDirection, SourceTaxAmountCur
                //<GEEES>
                ,IntracomVAT
                //</GEEES>
                from taxTrans
                where taxTrans.Source != TaxModuleType::Purch
                    || (taxTrans.Source == TaxModuleType::Purch && taxTrans.ReverseCharge_W == NoYes::No)
                join RecId from custVendInvoiceTrans
                    where taxTrans.SourceTableId == _sourceTableId
                        && taxTrans.SourceRecId == custVendInvoiceTrans.RecId
                        && custVendInvoiceTrans.SourceDocumentLine == _sourceDocumentLineRecId
                    join RecId from taxTable
                        where taxTable.TaxBase != TaxBaseType::AmountByUnit
                            //<GEEU>
                            && taxTable.TaxCode == TaxTrans.TaxCode
                            //</GEEU>
                            // <GIN>
                            && taxTable.TaxType_IN == TaxType_IN::None
                            // </GIN>
                            && taxTable.TaxOnTax == '';
        }

        if (taxTrans.SourceBaseAmountCur)
        {
            sourceBaseAmount = taxTrans.SourceBaseAmountCur;
        }
        else if (taxTrans.SourceTaxAmountCur && !prmisDefault(_lineAmount))
        {
            sourceBaseAmount = _lineAmount - taxTrans.SourceTaxAmountCur;
        }

        // <GEECZ>
        if (!(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoES]) && taxTrans.IntracomVAT)
        // </GEECZ>
        && _useDisplaySign && !TaxDirection::OutgoingTax)
        {
            sourceBaseAmount = Tax::changeDisplaySign(taxTrans.TaxDirection) * sourceBaseAmount;
        }

        return sourceBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRegulatedTaxAmountSingleLine</Name>
				<Source><![CDATA[
    private static TaxAmountCur totalRegulatedTaxAmountSingleLine(TableId _tableId, RecId _recId)
    {
        TaxTable taxTable;
        TaxTrans taxTrans;

        select sum(SourceRegulateAmountCur) from taxTrans
            where taxTrans.SourceTableId == _tableId
                && taxTrans.SourceRecId == _recId
                && taxTrans.TaxDirection != TaxDirection::UseTax
                && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
            join RecId from taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                    && taxTable.TaxType_IN == TaxType_IN::None;

        return taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGetOriginForSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether can get the origin for the transaction line from TaxTrans.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the source document line.
    /// </param>
    /// <returns>
    /// Returns true if can get tax origin for the transaction from Taxtrans; otherwise, returns false.
    /// </returns>
    private static boolean canGetOriginForSourceDocumentLine(
        RefTableId _sourceTableId,
        RefRecId _sourceDocumentLineRecId)
    {
        return _sourceTableId 
            && _sourceDocumentLineRecId
            && (_sourceTableId == tableNum(CustInvoiceTrans) 
                || _sourceTableId == tableNum(VendInvoiceTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether can find the tax trans by voucher.
    /// </summary>
    /// <param name = "_lastVoucher">The vouhcer.</param>
    /// <returns>
    /// true if find the tax trans by voucher; otherwise, false.
    /// </returns>
    public static boolean existForVoucher(Voucher _voucher)
    {
        TaxTrans taxTransLoc;
        boolean ret = false;

        select firstonly RecId from taxTransLoc
            where taxTransLoc.Voucher == _voucher;

        if (taxTransLoc)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxForTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total sales tax amount from <c>TaxTrans</c>.
    /// </summary>
    /// <param name = "_headingTableSourceDocumentRecId">The <c>RecId</c> of the <c>SourceDocumentHeader</c>.</param>
    /// <returns>Total tax amount.</returns>
    [Hookable(false)]
    public static AmountCur useTaxForTaxTrans(RecId _headingTableSourceDocumentRecId)
    {
        TaxTrans taxTrans;
        sourceDocumentLine sourceDocumentLine;
        select sum(SourceRegulateAmountCur) from taxTrans
            where (taxTrans.TaxDirection == TaxDirection::UseTax &&
                 taxTrans.TaxOrigin    != TaxOrigin::TaxReversed)
            join RecId from sourceDocumentLine
                where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine
                    && sourceDocumentLine.SourceDocumentHeader == _headingTableSourceDocumentRecId;

        return taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the actual tax amount from <c>TaxTrans</c>.
    /// </summary>
    /// <param name = "_sourceDocumentHeaderRecId">
    ///    The recid of the <c>SourceDocumentHeader</c>.
    /// </param>
    /// <param name="_includeUseTax">
    ///    A flag that indicates whether use tax should be included in the tax total.
    /// </param>
    /// <returns>
    ///   The actual tax amount in transactional currency.
    /// </returns>
    [Hookable(false)]
    public static TaxAmountCur totalTaxAmountFromTaxTrans(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId, boolean _includeUseTax = false)
    {
        SourceDocumentLine sourceDocumentLine;
        TaxTrans taxTrans;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }
         
        select sum(SourceRegulateAmountCur) from taxTrans
            where (_includeUseTax || taxTrans.TaxDirection  != TaxDirection::UseTax)
                && taxTrans.TaxOrigin     != TaxOrigin::TaxReversed
            join RecId from sourceDocumentLine
                where sourceDocumentLine.RecId == taxTrans.SourceDocumentLine
                    && sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderRecId;
        
        TaxAmountCur totalTaxAmountFromTaxTrans = taxTrans.SourceRegulateAmountCur;

        return totalTaxAmountFromTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumOfTaxInCostPriceRegulatedForSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the actual tax amount in cost price for the transaction line.
    /// </summary>
    /// <param name="_sourceTableId">
    ///    The transaction line table ID.
    /// </param>
    /// <param name="_sourceRecId">
    ///    The transaction line record ID.
    /// </param>
    /// <returns>
    ///    The tax amount in cost price in transactional currency.
    /// </returns>
    public static TaxAmountCur getSumOfTaxInCostPriceRegulatedForSourceLine(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxTrans taxTrans;

        select sum(TaxInCostPriceRegulated) from taxTrans
            where taxTrans.SourceRecId == _sourceRecId 
                && taxTrans.SourceTableId == _sourceTableId;

        return taxTrans.TaxInCostPriceRegulated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxInCostPriceRegulatedSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the tax in cost price has non-recoverable tax amounts.
    /// </summary>
    /// <param name="_sourceTableId">
    ///    The transaction line table ID.
    /// </param>
    /// <param name="_sourceRecId">
    ///    The transaction line record ID.
    /// </param>
    /// <returns>
    /// true if the document has non-recoverable tax amount; otherwise, false.
    /// </returns>
    public static boolean existsTaxInCostPriceRegulatedSourceLine(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxTrans taxTrans;

        select firstonly RecId from taxTrans
            where taxTrans.SourceTableId == _sourceTableId
                && taxTrans.SourceRecId == _sourceRecId
                && taxTrans.TaxInCostPriceRegulated != 0;

        return taxTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReverseFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proportion factor for the tax amount should be reversed.
    /// </summary>
    /// <param name = "_vendSettlement">The <c>VendSettlement</c> record.</param>
    /// <returns>The proportion factor of the part of tax amount which should be reversed.</returns>
    private RealBase getTaxReverseFactor(VendSettlement _vendSettlement)
    {
        RealBase factor;
        TaxWithholdTrans taxWithholdTrans;
        VendTrans vendTransInvoice, vendTransPayment;

        vendTransInvoice = VendTrans::find(_vendSettlement.OffsetRecid);
        vendTransPayment = VendTrans::find(_vendSettlement.TransRecId);

        select sum(PaymTaxWithholdAmount) from taxWithholdTrans
            where taxWithholdTrans.VendTransInvoiceId == vendTransInvoice.RecId
                && taxWithholdTrans.VoucherInvoice == vendTransInvoice.Voucher
                && taxWithholdTrans.Voucher == vendTransPayment.Voucher
                && taxWithholdTrans.TransDate == vendTransPayment.TransDate;

        if (vendTransInvoice.AmountCur)
        {
            // (SettleAmount - cashDiscount + WithholdTaxAmount) / VendInvoiceAmount
            factor = abs((_vendSettlement.SettleAmountCur - vendTransInvoice.displayDiscountUsed() + taxWithholdTrans.PaymTaxWithholdAmount) /
                CurrencyExchangeHelper::curAmount2CurAmount(
                    vendTransInvoice.AmountCur,
                    vendTransInvoice.CurrencyCode,
                    vendTransPayment.CurrencyCode,
                    _vendSettlement.TransDate,
                    true));
        }

        return factor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126038</DeveloperDocumentation>
	<FormRef>TaxTrans</FormRef>
	<Label>@SYS23189</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceBaseAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTaxAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>statementId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBaseQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInCostPriceMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7523</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAutogenerated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExemptTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntracomVAT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrentCurrency</Name>
			<Label>@SYS17756</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceCurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceBaseAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTaxAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInCostPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRegulateAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInCostPriceRegulated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceBaseAmountCurRegulated</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs_IN</Name>
			<Label>@GLS5007</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GoodsInRoute_RU</Name>
			<Label>@GLS114756</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GSTHSTTaxType_CA</Name>
			<Label>@SYS313827</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GSTHSTTaxType_CA</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>settleDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoicing</Name>
			<Label>@SYS5779</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExemptCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPrintDetail</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBook</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBookSection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reporting_W</Name>
			<Label>@SYS81753</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostponeVAT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReverseCharge_UK</Name>
			<Label>@SYS118818</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmptyTaxBaseForOutgoingTax_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxCurrency</Name>
			<Label>@SYS22974</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBaseAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInCostPriceCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxGroups</Name>
			<Label>@SYS22352</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxJurisdiction</Name>
			<Label>@SYS91173</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxJurisdictionCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceTax_IN</Name>
			<Label>@GLS5006</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Source</Name>
			<Label>@SYS11258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialReport</Name>
			<Label>@SYS10223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRepCounter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>reportingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxTransRefRecId</Name>
			<Label>@SYS86231</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnrealizedTaxExt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxTransRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxType_MX</Name>
			<Label>@SYS33553</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxUnrealized</Name>
			<Label>@SYS115509</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnrealizedTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RealizedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATOperationCode_RU</Name>
			<Label>@GLS112871</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VatRegisterData_PL</Name>
			<Label>@GLS105955</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReverseCharge</Name>
			<Label>@SYS118818</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReverseCharge_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmptyTaxBaseForOutgoingTax_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<HelpText>@TaxTrans:CurrencyCodeHelpText</HelpText>
			<Label>@SYS22974</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EUROTriangulation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<HelpText>@TaxTrans:EUROTriangulationHelpText</HelpText>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExemptCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxExemptCode</ExtendedDataType>
			<HelpText>@TaxTrans:ExemptCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExemptTax</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxExemptTax</ExtendedDataType>
			<HelpText>@TaxTrans:ExemptTaxHelpText</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GSTHSTTaxType_CA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:GSTHSTTaxType_CAHelpText</HelpText>
			<EnumType>GSTHSTTaxType_CA</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>HeadingTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<HelpText>@TaxTrans:HeadingTableIdHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntracomVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntracomVAT</ExtendedDataType>
			<HelpText>@TaxTrans:IntracomVATHelpText</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<HelpText>@TaxTrans:InventTransIdHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<HelpText>@TaxTrans:InvoiceIdHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOverUnderPayment</Name>
			<HelpText>@TaxTrans:IsOverUnderPaymentHelpText</HelpText>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
			<HelpText>@TaxTrans:JournalNumHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR,RU,PL,IN,CZ,HU,LT,LV,EE</CountryRegionCodes>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<HelpText>@TaxTrans:PackedExtensionsHelpText</HelpText>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostponeVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicVatDueDate_W</ConfigurationKey>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>CzPostponeVAT</ExtendedDataType>
			<HelpText>@TaxTrans:PostponeVATHelpText</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
			<HelpText>@TaxTrans:PrintCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RealizedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@TaxTrans:RealizedDateHelpText</HelpText>
			<Label>@SYS14004</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EmptyTaxBaseForOutgoingTax_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>DK,DE,NL,GB,FR,IE,IS</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxTrans:EmptyTaxBaseForOutgoingTax_WHelpText</HelpText>
			<Label>@Tax:EmptyTaxBaseOutTax</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxModuleTypeId</ExtendedDataType>
			<HelpText>@TaxTrans:SourceHelpText</HelpText>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<HelpText>@TaxTrans:SourceBaseAmountCurHelpText</HelpText>
			<Label>@TaxTrans:SourceBaseAmountCurLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceBaseAmountCurRegulated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<HelpText>@TaxTrans:SourceBaseAmountCurRegulatedHelpText</HelpText>
			<Label>@SYS67702</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceCurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<HelpText>@TaxTrans:SourceCurrencyCodeHelpText</HelpText>
			<Label>@SYS62053</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxTrans:SourceDocumentLineHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxTrans:SourceRecIdHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceRegulateAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:SourceRegulateAmountCurHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<HelpText>@TaxTrans:SourceTableIdHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SourceTaxAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:SourceTaxAmountCurHelpText</HelpText>
			<Label>@TaxTrans:SourceTaxAmountCurLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>statementId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStatementId</ExtendedDataType>
			<HelpText>@TaxTrans:statementIdHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<HelpText>@TaxTrans:TaxAmountHelpText</HelpText>
			<Label>@TaxTrans:TaxAmountLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxAmountCurHelpText</HelpText>
			<Label>@TaxTrans:TaxAmountCurLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountRep</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxAmountRepHelpText</HelpText>
			<Label>@TaxTrans:TaxAmountRepLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAutogenerated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAutoGenerated</ExtendedDataType>
			<HelpText>@TaxTrans:TaxAutogeneratedHelpText</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<HelpText>@TaxTrans:TaxBaseAmountHelpText</HelpText>
			<Label>@TaxTrans:TaxBaseAmountLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxBaseAmountCurHelpText</HelpText>
			<Label>@TaxTrans:TaxBaseAmountCurLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmountRep</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxBaseAmountRepHelpText</HelpText>
			<Label>@TaxTrans:TaxBaseAmountRepLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxQty</ExtendedDataType>
			<HelpText>@TaxTrans:TaxBaseQtyHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBook</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxBookRecId</ExtendedDataType>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<HelpText>@TaxTrans:TaxBookHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBookSection</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxBookSectionRecId</ExtendedDataType>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<HelpText>@TaxTrans:TaxBookSectionHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
			<HelpText>@TaxTrans:TaxCodeHelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxDirection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:TaxDirectionHelpText</HelpText>
			<EnumType>TaxDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<HelpText>@TaxTrans:TaxGroupHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxInCostPriceHelpText</HelpText>
			<Label>@TaxTrans:TaxInCostPriceLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPriceCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxInCostPriceCurHelpText</HelpText>
			<Label>@TaxTrans:TaxInCostPriceCurLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPriceRep</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxInCostPriceRepHelpText</HelpText>
			<Label>@TaxTrans:TaxInCostPriceRepLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPriceMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<HelpText>@TaxTrans:TaxInCostPriceMSTHelpText</HelpText>
			<Label>@TaxTrans:TaxInCostPriceMSTLabelText</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPriceRegulated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxRegulationAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxInCostPriceRegulatedHelpText</HelpText>
			<Label>@SYS53190</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<HelpText>@TaxTrans:TaxItemGroupHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxJurisdictionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxJurisdictionCode</ExtendedDataType>
			<HelpText>@TaxTrans:TaxJurisdictionCodeHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxObligationCompany</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:TaxObligationCompanyHelpText</HelpText>
			<Visible>No</Visible>
			<EnumType>TaxObligationCompany</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:TaxOriginHelpText</HelpText>
			<EnumType>TaxOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriod</ExtendedDataType>
			<HelpText>@TaxTrans:TaxPeriodHelpText</HelpText>
			<Label>@SYS40</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxPrintDetail</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:TaxPrintDetailHelpText</HelpText>
			<EnumType>TaxPrintDetail</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TaxRepCounter</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxVersion</ExtendedDataType>
			<HelpText>@TaxTrans:TaxRepCounterHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxTransRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxTrans:TaxTransRefRecIdHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:TaxType_MXHelpText</HelpText>
			<EnumType>TaxType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<HelpText>@TaxTrans:TaxValueHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@TaxTrans:TransDateHelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnrealizedTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxTrans:UnrealizedTaxHelpText</HelpText>
			<Label>@SYS115509</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnrealizedTaxExt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxTrans:UnrealizedTaxExtHelpText</HelpText>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<HelpText>@TaxTrans:VoucherHelpText</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReverseCharge_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReverseCharge</ExtendedDataType>
			<HelpText>@TaxTrans:ReverseCharge_WHelpText</HelpText>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReverseChargeApplies_UK</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>GB</CountryRegionCodes>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxTrans:TaxAccountTypeHelpText</HelpText>
			<EnumType>TaxAccountingPostingAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<HelpText>@TaxTrans:TaxIDHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VATExemptPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxValue</ExtendedDataType>
			<HelpText>@TaxTrans:VATExemptPctOnTaxTransDescription</HelpText>
			<Label>@Tax:NonDeductiblePct</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PartyTaxId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxTrans:PartyTaxIdHelpText</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginTaxTransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxTrans:OriginTaxTransRecIdHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExchRateDiffOrigRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@TaxTrans:ExchRateDiffOrigRecIdHelpText</HelpText>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>ISVFeatureSetupGuid</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
			<FeatureClass>TaxIntegrationISVTaxPostToggle</FeatureClass>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ISVFeatureSetupName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationFeatureSetupName</ExtendedDataType>
			<FeatureClass>TaxIntegrationISVTaxPostToggle</FeatureClass>
			<Label>@TaxIntegration:FeatureSetupName</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxDirection</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxPeriodIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxRepCounter</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTaxAmountCur</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxBookSectionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBookSection</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxBookIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBook</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntracomVAT</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReverseCharge_W</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxDirection</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HeadingTableId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceTableIdSourceRecIdVoucherIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceRecIdSourceTableIdDataAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxOrignTaxCodeTransDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntracomVAT</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxBaseAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxDirection</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxInCostPriceMST</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxSourceRecIdTableIdPartitionDataAreaIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SourceTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OriginTaxTransRecId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OriginTaxTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EUROTriangulation</MapField>
					<MapFieldTo>EUROTriangulation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchangeRate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchangeRateSecond</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchangeRateSourceRegulateAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchangeRateTaxAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FiscalValue_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Reason</MapField>
					<MapFieldTo>Reason</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReasonComment</MapField>
					<MapFieldTo>ReasonComment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceCurrencyCode</MapField>
					<MapFieldTo>SourceCurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceOtherBaseTaxAmount_BR</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>SourceRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRegulateAmountCur</MapField>
					<MapFieldTo>SourceRegulateAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>SourceTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTaxAmountCur</MapField>
					<MapFieldTo>SourceTaxAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAutoGenerated</MapField>
					<MapFieldTo>TaxAutogenerated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxCode</MapField>
					<MapFieldTo>TaxCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxDirection</MapField>
					<MapFieldTo>TaxDirection</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInCostPrice</MapField>
					<MapFieldTo>TaxInCostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInCostPriceRegulated</MapField>
					<MapFieldTo>TaxInCostPriceRegulated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATDueDate_W</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WithoutTaxTrans_RU</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxModelTaxTransaction_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CalculationDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Company</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExemptTax</MapField>
					<MapFieldTo>ExemptTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximAuthorizationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximBalanceTaxAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximBalanceTaxAmountCur</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximBalanceTaxCorrectedAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximBalanceTaxCorrectedAmountCur</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximDEPBAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximDEPBAmountCur</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximIncentiveScheme</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximTaxAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximTaxAmountCur</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximTaxCorrectedAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EximTaxCorrectedAmountCur</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FormulaID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeadingRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeadingTableId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerDimension_IN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LoadOnInventoryTax</MapField>
					<MapFieldTo>TaxInCostPriceMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OperationLedgerDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OperationPostingType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Source</MapField>
					<MapFieldTo>Source</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceBaseAmountCur</MapField>
					<MapFieldTo>SourceBaseAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceBaseAmountCurCalculated</MapField>
					<MapFieldTo>SourceBaseAmountCurRegulated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceBaseAmountCurRaw</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceBaseAmountCurRegulated</MapField>
					<MapFieldTo>TaxInCostPriceRegulated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceCurrencyCode</MapField>
					<MapFieldTo>SourceCurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>SourceRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRegulateAmountCur</MapField>
					<MapFieldTo>SourceRegulateAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRegulateAmountCustoms</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>SourceTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTaxAmountCur</MapField>
					<MapFieldTo>SourceTaxAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTaxAmountCurReal</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAccountType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmount</MapField>
					<MapFieldTo>TaxAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAmountCur</MapField>
					<MapFieldTo>TaxAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAutogenerated</MapField>
					<MapFieldTo>TaxAutogenerated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxBaseAmount</MapField>
					<MapFieldTo>TaxBaseAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxBaseAmountCur</MapField>
					<MapFieldTo>TaxBaseAmountCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxBaseAmountRaw</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxBaseQty</MapField>
					<MapFieldTo>TaxBaseQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxCode</MapField>
					<MapFieldTo>TaxCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxDirection</MapField>
					<MapFieldTo>TaxDirection</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInCostPrice</MapField>
					<MapFieldTo>TaxInCostPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInCostPriceCur</MapField>
					<MapFieldTo>TaxInCostPriceCur</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInCostPriceMST</MapField>
					<MapFieldTo>TaxInCostPriceMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInCostPriceRegulated</MapField>
					<MapFieldTo>TaxInCostPriceRegulated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxOffsetUseTaxLedgerDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxOrigin</MapField>
					<MapFieldTo>TaxOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>VATRegData_W</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PostponeVAT</MapField>
					<MapFieldTo>PostponeVAT</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxCode</MapField>
					<MapFieldTo>TaxCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency_SourceCurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_SourceCurrencyCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>SourceCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustAdvanceInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CzCustAdvanceInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustOverdueVATJournalTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustOverdueVATJournalTable_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<EntityRelationshipRole>@SYS126039</EntityRelationshipRole>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableRole>CustTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FiscalDocument_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocument_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>AccountingDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>GeneralJournalEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>GeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>GeneralJournalEntry</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>AccountingDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQualityOrderTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@GLS60820</EntityRelationshipRole>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferJour_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>VoucherId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalNum</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JournalNum</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126040</EntityRelationshipRole>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjInvoiceJour</Name>
			<EntityRelationshipRole>@SYS126041</EntityRelationshipRole>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<RelatedTableRole>ProjInvoiceJour</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchComplInvoice_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchComplementaryInvoiceHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126042</EntityRelationshipRole>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailStatementTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStatementTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>statementId</Name>
					<SourceEDT>RetailStatementId</SourceEDT>
					<Field>statementId</Field>
					<RelatedField>statementId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesComplInvoice_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesComplementaryInvoiceHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>DocumentDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126043</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SalesLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecId</Name>
					<Field>SourceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceTableId</Name>
					<Field>SourceTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SubledgerVoucherGeneralJournalEntry</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SubledgerVoucherGeneralJournalEntry</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SubledgerVoucherGeneralJournalEntry</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>dataAreaId</Name>
					<Field>dataAreaId</Field>
					<RelatedField>VoucherDataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxBook</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBook</Name>
					<Field>TaxBook</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBookSection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxBookSection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxBookSection</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBookSection</Name>
					<Field>TaxBookSection</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxExemptCodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxExemptCodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExemptCode</Name>
					<SourceEDT>TaxExemptCode</SourceEDT>
					<Field>ExemptCode</Field>
					<RelatedField>ExemptCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ExemptCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxJurisdiction</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxJurisdiction</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxJurisdictionCode</Name>
					<SourceEDT>TaxJurisdictionCode</SourceEDT>
					<Field>TaxJurisdictionCode</Field>
					<RelatedField>TaxJurisdictionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxJurisdictionCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPeriodHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxPeriodHead</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<SourceEDT>TaxPeriod</SourceEDT>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportAdjustmentTrans</Name>
			<RelatedTable>TaxReportAdjustmentTrans</RelatedTable>
			<RelatedTableRole>TaxReportAdjustmentTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRepCounter</Name>
					<Field>TaxRepCounter</Field>
					<RelatedField>TaxVersion</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportPeriod</Name>
			<RelatedTable>TaxReportPeriod</RelatedTable>
			<RelatedTableRole>TaxReportPeriod</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportVoucher</Name>
			<RelatedTable>TaxReportVoucher</RelatedTable>
			<RelatedTableRole>TaxReportVoucher</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxRepCounter</Name>
					<Field>TaxRepCounter</Field>
					<RelatedField>TaxRepCounter</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxTransRefRecId</Name>
					<Field>TaxTransRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<EntityRelationshipRole>@SYS126044</EntityRelationshipRole>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendOverdueVATJournalTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendOverdueVATJournalTable_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>LedgerVoucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTrans</Name>
			<EntityRelationshipRole>@SYS126044</EntityRelationshipRole>
			<RelatedTable>VendTrans</RelatedTable>
			<RelatedTableRole>VendTrans</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_TaxTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PartyTaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartyTaxId</Name>
					<Field>PartyTaxId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>