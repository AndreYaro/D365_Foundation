<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcCategoryModifier</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProcCategoryModifier extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;
            VendProcurementCategoryStatus::breakInheritanceAtCategory(EcoResCategory::find(this.Category));
            super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        EcoResCategory      ecoResCategory = EcoResCategory::find(this.Category);
        recId               categoryId     = ecoResCategory.RecId;

        ttsbegin;
            super();

            if (this.IsCriterionGroupInherited && ecoResCategory.ParentCategory)
            {
                VendReviewCategoryCriterionLookup::cloneOriginationCategoryCriterionGroup(ecoResCategory.ParentCategory, this.Category);
            }

            if (this.IsVendorsInherited)
            {
                VendProcurementCategoryStatus::addInheritanceAtCategory(EcoResCategory::find(this.Category));
            }
            else
            {
                VendProcurementCategoryStatus::breakInheritanceAtCategory(EcoResCategory::find(this.Category));
            }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProcCategoryModifier thisOriginal   = this.orig();
        EcoResCategory       ecoResCategory = EcoResCategory::find(this.Category);

        ttsbegin;

            if (thisOriginal.IsVendorsInherited && !this.IsVendorsInherited)
            {
                VendProcurementCategoryStatus::breakInheritanceAtCategory(EcoResCategory::find(this.Category));
            }

            if (thisOriginal.IsCriterionGroupInherited && !this.IsCriterionGroupInherited)
            {
                VendReviewCategoryCriterionLookup::breakInheritanceAtCategory(EcoResCategory::find(this.Category));
            }

            super();

            if (!thisOriginal.IsCriterionGroupInherited && this.IsCriterionGroupInherited)
            {
                VendReviewCategoryCriterionLookup::addInheritanceAtCategory(EcoResCategory::find(this.Category));
            }

            if (!thisOriginal.IsVendorsInherited && this.IsVendorsInherited)
            {
                VendProcurementCategoryStatus::addInheritanceAtCategory(EcoResCategory::find(this.Category));
            }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified category exists in the <c>EcoResCategory</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryId">
    /// The Category ID (recId) in the <c>ProcCategory</c> table to check for existance.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, it displays an error message and returns false.
    /// </returns>
    public static boolean checkExist(EcoResCategoryId _ecoResCategoryId)
    {
        if (_ecoResCategoryId)
        {
            return ProcCategoryModifier::exist(_ecoResCategoryId);
        }

        return checkFailed(strfmt(ProcCategoryModifier::txtNotExist(), tablepname(ProcCategoryModifier), _ecoResCategoryId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified category exists in the <c>EcoResCategory</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryId">
    /// The category ID, which is the record ID, in the <c>ProcCategory</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(EcoResCategoryId _ecoResCategoryId)
    {
        ProcCategoryModifier procCategoryModifier;

        return _ecoResCategoryId &&
            (select RecId from procCategoryModifier
                where procCategoryModifier.Category == _ecoResCategoryId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified category in the <c>ProcCategory</c> table.
    /// </summary>
    /// <param name="_ecoResCategoryId">
    /// The category ID, which is the record ID, in the <c>ProcCategory</c> table to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProcCategory</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProcCategoryModifier find(EcoResCategoryId _ecoResCategoryId, boolean _forUpdate = false)
    {
        ProcCategoryModifier    procCategory = null;

        if (_ecoResCategoryId)
        {
            procCategory.selectForUpdate(_forUpdate);
            select * from procCategory where procCategory.Category == _ecoResCategoryId;
        }

        return procCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNearestAncestorWithInheritUnchecked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the database to find the nearest, by tree level, ancestor which does not inherit a flag set.
    /// </summary>
    /// <param name="_category">
    /// An existing <c>EcoResCategory</c> record for which to find the nearest stop-inheritance ancestor.
    /// </param>
    /// <param name="_inheritanceFieldId">
    /// The field ID on which inheritance is checked.
    /// </param>
    /// <returns>
    /// A record of the <c>EcoResCategory</c> table.
    /// </returns>
    /// <remarks>
    /// The given <paramref name="_category" /> parameter must already exist in the database, cannot be the
    /// root node, and must have <c>InheritAttributes</c> value set to the <c>No</c> value. The query uses
    /// the nested set values and tree level information to find the nearest stop-inheritance ancestor. A
    /// record is guaranteed to be found.
    /// </remarks>
    public static EcoResCategory getNearestAncestorWithInheritUnchecked(EcoResCategory _category, fieldId _inheritanceFieldId)
    {
        EcoResCategory          ecoResCategoryAncestors;
        ProcCategoryModifier    procCategory;
        EcoResCategory          ecoResCategoryNearestAncestor;

        select maxof(Level) from ecoResCategoryAncestors
                where ecoResCategoryAncestors.CategoryHierarchy == _category.CategoryHierarchy
                    && ecoResCategoryAncestors.NestedSetLeft  < _category.NestedSetLeft
                    && ecoResCategoryAncestors.NestedSetRight > _category.NestedSetRight
            notexists join procCategory
                where ecoResCategoryAncestors.RecId == procCategory.Category
                    && procCategory.(_inheritanceFieldId)  == NoYes::Yes;

        // If we didn't find one, then it's because the root node does not have IsInherited==Yes, a violation of our assumption.
        // this check is OK since EcoResCategory root has Level=1
        if ( ! ecoResCategoryAncestors.Level)
        {
            throw warning(strfmt("@SYS135669", fieldid2name(tablenum(ProcCategoryModifier), _inheritanceFieldId) ));
        }
        else
        {
            // find the ancestor at the specific Level we found:
            select * from ecoResCategoryNearestAncestor
                    where ecoResCategoryNearestAncestor.CategoryHierarchy == _category.CategoryHierarchy
                        && ecoResCategoryNearestAncestor.NestedSetLeft  < _category.NestedSetLeft
                        && ecoResCategoryNearestAncestor.NestedSetRight > _category.NestedSetRight
                        && ecoResCategoryNearestAncestor.Level == ecoResCategoryAncestors.Level;
        }

        return ecoResCategoryNearestAncestor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryRangeBasedOnInheritance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges dynamically to the find complete inheritance for the specified category.
    /// </summary>
    /// <param name="_formDataSource">
    /// The form data source that will have the <c>EcoResCategory</c> table as the table.
    /// </param>
    /// <param name="_category">
    /// The category of which to find the inheritance.
    /// </param>
    /// <param name="_inheritanceFieldId">
    /// The field column that tells the column for which to find the inheritance.
    /// </param>
    public static void setCategoryRangeBasedOnInheritance(FormDataSource _formDataSource,
                                                          EcoResCategory _category,
                                                          fieldId        _inheritanceFieldId)
    {
        EcoResCategory          tmpNearestStopInheritAncestor;
        ProcCategoryModifier    procCategory        = ProcCategoryModifier::find(_category.RecId);
        QueryBuildDataSource    qbds                = _formDataSource.query().dataSourceTable(tablenum(EcoResCategory));

        if (qbds)
        {
            if (NoYes::No == procCategory.(_inheritanceFieldId))
            {
                qbds.addRange(fieldnum(EcoResCategory,RecId)).value(queryValue(_category.RecId));
            }
            else
            {
                tmpNearestStopInheritAncestor = ProcCategoryModifier::getNearestAncestorWithInheritUnchecked(_category, _inheritanceFieldId);
                qbds.addRange(fieldnum(EcoResCategory,CategoryHierarchy)).value(queryValue(_category.CategoryHierarchy));
                qbds.addRange(fieldnum(EcoResCategory,NestedSetLeft)).value(queryRange(tmpNearestStopInheritAncestor.NestedSetLeft, _category.NestedSetLeft));
                qbds.addRange(fieldnum(EcoResCategory,NestedSetRight)).value(queryRange(_category.NestedSetRight, tmpNearestStopInheritAncestor.NestedSetRight));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the X table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exist.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS327065";
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize return locations for current and child categories when IsReturnPolicyInherited field is modified.
    /// </summary>
    /// <param name = "_fieldId"> FieldId of the field modified.</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (fieldNum(ProcCategoryModifier, IsReturnPolicyInherited) == _fieldId && this.IsReturnPolicyInherited)
        {
            this.write();
            RetailAttributesLegalEntityLookup::synchronizeReturnPolicies(EcoResCategory::find(this.Category));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCategory</ConfigurationKey>
	<DeveloperDocumentation>@SYS321172</DeveloperDocumentation>
	<Label>@SYS321171</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>IsVendorsInherited</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>EcoResCategoryIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>EcoResCategoryIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsQuestionnairiesInherited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsVendorsInherited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCriterionGroupInherited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductAttributesInherited</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS303404</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsQuestionnairiesInherited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsVendorsInherited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCriterionGroupInherited</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsProductAttributesInherited</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCriterionGroupInherited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS312091</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProductAttributesInherited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS300986</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsQuestionnairiesInherited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS302887</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsVendorsInherited</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS304119</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReturnPolicyInherited</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Retail:InheritReturnPolicy</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResCategoryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>EcoResCategory_ProcCategory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>