<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDistinctProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDistinctProduct extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productDimensionFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id for a product dimension.
    /// </summary>
    /// <param name = "_inventProductDimension">A product dimension field.</param>
    /// <returns>Field Id on <c>InventDistinctProduct</c> table.</returns>
    public static FieldId productDimensionFieldId(InventProductDimension _inventProductDimension)
    {
        return _inventProductDimension.fieldIdInTable(tableStr(InventDistinctProduct));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddProductDimRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges for product dimensions to a query.
    /// </summary>
    /// <param name = "_qbds">The InventDistinctProduct datasource.</param>
    /// <param name = "_inventDim">The dimension values to use as range.</param>
    /// <param name = "_filterOnEmptyValues">Include empty dimension values in the filtering.</param>
    public static void queryAddProductDimRanges(QueryBuildDataSource _qbds, InventDim _inventDim, boolean _filterOnEmptyValues = true)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId inventDimFieldId = productDim.parmInventDimFieldId();

            if (_filterOnEmptyValues || _inventDim.(inventDimFieldId))
            {
                FieldId localFieldId = InventDistinctProduct::productDimensionFieldId(productDim);
                if (localFieldId)
                {
                    _qbds.addRange(localFieldId).value(queryValue(_inventDim.(inventDimFieldId)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensionFieldIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Set containing the fieldIds of the product dimension fields in this table.
    /// </summary>
    /// <returns>A Set of product dimension fieldIds.</returns>
    public static Set productDimensionFieldIds()
    {
        Set fieldIds = new Set(Types::Integer);
  
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId inventDimFieldId = productDim.parmInventDimFieldId();
            FieldId localFieldId = InventDistinctProduct::productDimensionFieldId(productDim);
            if (localFieldId)
            {
                fieldIds.add(localFieldId);
            }
        }
        return fieldIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddProductDimLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds links for product dimensions to a query.
    /// </summary>
    /// <param name = "_qbds">The InventDistinctProduct datasource.</param>
    /// <param name = "_inventDim">The InventDim datasource.</param>
    /// <param name = "_matchOnEmpty">Additionally match empty InventDim values.</param>
    /// <remarks>
    /// The links are added to the InventDim datasource, which has to be a child of the InventDistinctProduct datasource.
    /// </remarks>
    public static void queryAddProductDimLinks(QueryBuildDataSource _inventDistinctProduct, QueryBuildDataSource _inventDim, boolean _matchOnEmpty = false)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId inventDimFieldId = productDim.parmInventDimFieldId();
            FieldId localFieldId = InventDistinctProduct::productDimensionFieldId(productDim);
   
            if (localFieldId)
            {
                if (!_matchOnEmpty)
                {
                    _inventDim.addLink(localFieldId, inventDimFieldId);
                }
                else
                {
                    _inventDim.addRange(inventDimFieldId).value(
                         strFmt('((%1 == %2) || (%1 == %3.%4))',
                         fieldId2Name(tableNum(InventDim), inventDimFieldId),
                         queryValue(InventDim::emptyDimField(inventDimFieldId)),
                         _inventDistinctProduct.name(),
                         fieldId2Name(tableNum(InventDistinctProduct), localFieldId)
                    ));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReleasedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from the table.
    /// </summary>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimensions to identify the entry with.
    /// </param>
    /// <remarks>
    /// Should be called upon deletion of any item for distinct items from <c>InventTable</c> and for variants from <c>InventDimCombination</c>
    /// </remarks>
    public static void deleteReleasedItem(ItemId _itemId, InventDimId _inventDimId)
    {
        Query query = new Query();
       
        QueryBuildDataSource qbds = query.addDataSource(tableNum(InventDistinctProduct));
        qbds.update(true);
        qbds.addRange(fieldNum(InventDistinctProduct, itemId)).value(queryValue(_itemId));
        InventDistinctProduct::queryAddProductDimRanges(qbds, InventDim::find(_inventDimId));
        
        ttsBegin;

        QueryRun queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            InventDistinctProduct inventDistinctProduct = queryRun.get(tableNum(InventDistinctProduct));
            inventDistinctProduct.delete();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the record in the table.
    /// </summary>
    /// <param name="_itemId">
    /// The item id to use.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension to use.
    /// </param>
    /// <param name="_forUpdate">
    /// Indicates whether the record should be selected for update or not.
    /// </param>
    /// <returns>
    /// The record found.
    /// </returns>
    public static InventDistinctProduct find(ItemId _itemId, InventDimId _inventDimId, boolean _forUpdate = false)
    {
        InventDim inventDim = InventDim::find(_inventDimId);

        if (!inventDim.onlyProductDimensionSpecified())
        {
            inventDim.clearNotSelectedDim(InventDimParm::allProductDim());
            inventDim = InventDim::findDim(inventDim);
        }

        InventDistinctProduct inventDistinctProduct;
        inventDistinctProduct.selectForUpdate(_forUpdate);

        select firstonly inventDistinctProduct
            where inventDistinctProduct.ItemId == _itemId
            && inventDistinctProduct.InventDimId == InventDim.inventDimId;

        return inventDistinctProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns a record in the table based on product id.
    /// </summary>
    /// <param name = "_productId">Product identifier</param>
    /// <param name = "_forUpdate">Optional. Indicates whether the record should be selected for update or not. false by default.</param>
    /// <returns>The <c>InventDistinctProduct</c> record</returns>
    public static InventDistinctProduct findByProduct(EcoResProductRecId _productId, boolean _forUpdate = false)
    {
        InventDistinctProduct inventDistinctProduct;

        inventDistinctProduct.selectForUpdate(_forUpdate);

        select firstonly inventDistinctProduct
            where inventDistinctProduct.Product == _productId;

        return inventDistinctProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensions</Name>
				<Source><![CDATA[
    private void initProductDimensions(InventDim _inventDim)
    {
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId productFieldId = InventDistinctProduct::productDimensionFieldId(productDim);

            if (productFieldId)
            {
                FieldId inventDimFieldId = productDim.parmInventDimFieldId();
                this.(productFieldId) = _inventDim.(inventDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReleasedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record to take pmf fields from.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimensions to take product dimensions from.
    /// </param>
    /// <remarks>
    /// Should be called upon creation of any item for distinct items/services from <c>InventTable</c> and for variants from <c>InventDimCombination</c>
    /// </remarks>
    public static void insertReleasedItem(InventTable _inventTable, InventDimId _inventDimId)
    {
        // Checks whether the item variants table has been populated before actually inserting the item
        if (!InventDistinctProduct::isTablePopulated())
        {
            InventDistinctProduct::populateTable();
            return; // the record that needs to be inserted should already be present in the table now
        }

        InventDistinctProduct inventDistinctProduct;
        InventDim originalInventDim = InventDim::find(_inventDimId).data();

        if (!originalInventDim.onlyProductDimensionSpecified())
        {
            originalInventDim.clearNotSelectedDim(InventDimParm::allProductDim());
            originalInventDim = InventDim::findDim(originalInventDim);
        }

        ttsBegin;

        inventDistinctProduct.ItemId = _inventTable.itemId;
        inventDistinctProduct.Level = 0;
        inventDistinctProduct.InventDimId = originalInventDim.inventDimId;
        inventDistinctProduct.initProductDimensions(originalInventDim);
        inventDistinctProduct.PmfPlanningItemId = _inventTable.PmfPlanningItemId;
        inventDistinctProduct.PmfProductType = _inventTable.PmfProductType;

        InventDimCombination inventDimCombination = InventDimCombination::find(_inventTable.itemId, originalInventDim.inventDimId);
        if (inventDimCombination)
        {
            inventDistinctProduct.Product = inventDimCombination.DistinctProductVariant;
            inventDistinctProduct.ProductLifecycleStateId = inventDimCombination.ProductLifecycleStateId;
        }
        else
        {
            inventDistinctProduct.Product = _inventTable.Product;
            inventDistinctProduct.ProductLifecycleStateId = _inventTable.ProductLifecycleStateId;
        }
        
        inventDistinctProduct.insert();

        InventDistinctProductDefaultSalesSetup::insertProduct(inventDistinctProduct);
        ttsCommit;


        // Populate the product search table
        MCRFullTextSearch::insert(inventDistinctProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTablePopulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the table for the current company to be empty or not.
    /// </summary>
    /// <returns>
    /// A <c>Boolean</c> indicating the table status. <c>true</c> if empty, and <c>false</c> otherwise.
    /// </returns>
    public static boolean isTablePopulated()
    {
        InventDistinctProduct inventDistinctProduct;

        select firstonly RecId from inventDistinctproduct;
        return inventDistinctProduct.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePMFFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the PMF fields on the level table with the changes on the originating item.
    /// </summary>
    /// <param name="_inventTable">
    /// <c>InventTable</c> record to be used for update.
    /// </param>
    public static void updatePMFFields(InventTable _inventTable)
    {
        InventDistinctProduct inventDistinctProduct;

        ttsBegin;
        update_recordSet inventDistinctProduct
            setting PMFProductType = _inventTable.PmfProductType,
                    PMFPlanningItemId = _inventTable.PmfPlanningItemId
            where inventDistinctProduct.ItemId == _inventTable.itemId;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductLifecycleStateFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ProductLifecycleStateId field for a released product.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record to be used for update.
    /// </param>
    public static void updateProductLifecycleStateFromInventTable(InventTable _inventTable)
    {
        InventDistinctProduct inventDistinctProduct;

        ttsBegin;
        update_recordSet inventDistinctProduct
            setting ProductLifecycleStateId = _inventTable.ProductLifecycleStateId
            where inventDistinctProduct.ItemId == _inventTable.itemId;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductLifecycleStateFromInventDimCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ProductLifecycleStateId field for a released product variant.
    /// </summary>
    /// <param name="_inventDimCombination">
    /// The <c>InventDimCombination</c> record to be used for update.
    /// </param>
    public static void updateProductLifecycleStateFromInventDimCombination(InventDimCombination _inventDimCombination)
    {
        InventDistinctProduct inventDistinctProduct;

        ttsBegin;
        update_recordSet inventDistinctProduct
            setting ProductLifecycleStateId = _inventDimCombination.ProductLifecycleStateId
            where inventDistinctProduct.ItemId == _inventDimCombination.itemId
               && inventDistinctProduct.InventDimId == _inventDimCombination.InventDimId;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the table using <c>InventDistinctProductPopulator</c> class.
    /// </summary>
    public static void populateTable()
    {
        InventDistinctProductPopulator::construct().runoperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveForPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the distinct product is active for planning.
    /// </summary>
    /// <returns>Yes if the distinct product is active for planning; otherwise, No.</returns>
    /// <remarks>This method is invoked at every insert of inventory transactions, so it is vital that this remains performant.</remarks>
    public EcoResProductLifecycleStateIsActiveForPlanning isActiveForPlanning()
    {
        if (this.ProductLifecycleStateId != '')
        {
            return EcoResProductLifecycleState::find(this.ProductLifecycleStateId).IsActiveForPlanning;
        }
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productCreatedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the creation date/time of the associated released product or released product variant.
    /// </summary>
    /// <returns></returns>
    public display CreatedDateTime productCreatedDateTime()
    {
        InventTable inventTable = InventTable::findByProduct(this.Product);
        if (inventTable)
        {
            return inventTable.CreatedDateTime;
        }
        else
        {
            return InventDimCombination::findByDistinctProductVariant(this.Product).CreatedDateTime;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DistinctProductsDevDoc</DeveloperDocumentation>
	<Label>@SCM:DistinctProducts</Label>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ItemIdx</ClusteredIndex>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ProductIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>configId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemConfigurationName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventColorId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSizeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventStyleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventVersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResVersionName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBOMLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfPlanningItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPlanningItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfProductType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProductLifecycleStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductLifecycleStateId</ExtendedDataType>
			<Label>@SCM:EcoResProductLifecycleState</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventStyleId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSizeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventColorId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>configId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventVersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PmfPlanningTypePlanningItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PmfPlanningItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PmfProductType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductLifecycleStateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductLifecycleStateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123828</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResDistinctProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResDistinctProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductLifecycleState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResProductLifecycleState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductLifecycleStateId</Name>
					<Field>ProductLifecycleStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>