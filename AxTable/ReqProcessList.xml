<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqProcessList</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqProcessList extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Begins the scheduling process by inserting a new record into the <c>ReqProcessList</c> table.
    /// </summary>
    /// <param name="_processId">
    /// ID of the scheduling process.
    /// </param>
    /// <param name="_parameters">
    /// A container holding the packed parameters that the user selected for the scheduling process.
    /// </param>
    /// <param name="_maxChildThreads">
    /// Maximum number of threads that can be used.
    /// </param>
    /// <param name="_classId">
    /// ID of the calling class.
    /// </param>
    /// <param name="_reqPlanId">
    /// The plan number.
    /// </param>
    /// <param name="_todaysDate">
    /// Date that the scheduling process useas insted of the <c>today</c> method.
    /// </param>
    /// <param name="_reqCalcUpdate">
    /// The scheduling method.
    /// </param>
    static void beginProcess(ReqProcessId           _processId,
                                    ParametersX            _parameters,
                                    ReqProcessNumThreads   _maxChildThreads,
                                    classId                _classId,
                                    ReqPlanId              _reqPlanId,
                                    TodaysDate             _todaysDate,
                                    ReqCalcUpdate          _reqCalcUpdate)
    {
        ReqProcessList reqProcessList;

        ttsbegin;

        reqProcessList.ProcessId        = _processId;
        reqProcessList.Status           = ReqProcessStatus::Initialising;
        reqProcessList.Parameters       = _parameters;
        reqProcessList.MaxChildThreads  = _maxChildThreads;
        reqProcessList.ClassId          = _classId;
        reqProcessList.ReqPlanId        = _reqPlanId;
        reqProcessList.UsedTodaysDate   = _todaysDate;
        reqProcessList.ReqCalcUpdate    = _reqCalcUpdate;
        reqProcessList.PmfRerunFromLevel = -1;

        if (ReqCalcRestartResumeNativeToggle::isEnabled() && BatchHeader::isExecutingInBatch())
        {
            reqProcessList.MainThreadBatchTaskRecId = BatchHeader::getCurrentBatchTask().RecId;
        }

        reqProcessList.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ReqProcessList</c> record.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// A <c>ReqProcessList</c> record.
    /// </returns>
    static ReqProcessList find(ReqProcessId _processId, boolean _forUpdate)
    {
        return ReqProcessList::findReqProcess(_processId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithoutParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ReqProcessList</c> record, skipping the Parameters field.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// A <c>ReqProcessList</c> record.
    /// </returns>
    internal static ReqProcessList findWithoutParameters(ReqProcessId _processId, boolean _forUpdate)
    {
        return ReqProcessList::findReqProcess(_processId, _forUpdate, false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithCacheDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ReqProcessList</c> record, skipping the cache.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// A <c>ReqProcessList</c> record.
    /// </returns>
    static ReqProcessList findWithCacheDisabled(ReqProcessId _processId, boolean _forUpdate)
    {
        return ReqProcessList::findReqProcess(_processId, _forUpdate, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithCacheDisabledWithoutParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ReqProcessList</c> record, skipping the cache, skipping the Parameters field.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// A <c>ReqProcessList</c> record.
    /// </returns>
    internal static ReqProcessList findWithCacheDisabledWithoutParameters(ReqProcessId _processId, boolean _forUpdate)
    {
        return ReqProcessList::findReqProcess(_processId, _forUpdate, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReqProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>ReqProcessList</c> record.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record should be selected for update.
    /// </param>
    /// <param name="_withoutCache">
    /// A Boolean value that determines whether the cache should be skipped.
    /// </param>
    /// <param name="_withoutParametersField">
    /// A Boolean value that determines whether the Parameters field should be skipped.
    /// </param>
    /// <returns>
    /// A <c>ReqProcessList</c> record.
    /// </returns>
    private static ReqProcessList findReqProcess(ReqProcessId _processId, boolean _forUpdate, boolean _withoutCache = false, boolean _withoutParametersField = false)
    {
        ReqProcessList reqProcessList;

        QueryRun queryRun;
        QueryBuildDataSource qbdsReqProcessList;
        SysGlobalObjectCache sysGlobalObjectCache = classfactory.globalObjectCache();
        
        container queryCon = sysGlobalObjectCache.find(tableStr(ReqProcessList), [tableStaticMethodStr(ReqProcessList, findReqProcess)]);
        
        if (queryCon)
        {
            queryRun = new QueryRun(queryCon);
        }
        else
        {
            Query query = ReqProcessList::assembleReqProcessListQuery();

            queryRun = new QueryRun(query);

            sysGlobalObjectCache.insert(tableStr(ReqProcessList), [tableStaticMethodStr(ReqProcessList, findReqProcess)], queryRun.pack());
        }

        qbdsReqProcessList = queryRun.query().dataSourceTable(tableNum(ReqProcessList));

        SysQuery::findOrCreateRange(qbdsReqProcessList, fieldNum(ReqProcessList, ProcessId)).value(queryValue(_processId));
        
        if (!_withoutParametersField)
        {
            qbdsReqProcessList.addSelectionField(fieldNum(ReqProcessList, Parameters));
        }

        if (_forUpdate)
        {
            qbdsReqProcessList.concurrencyModel(ConcurrencyModel::Pessimistic);
        }

        if (_withoutCache)
        {
            reqProcessList.disableCache(_withoutCache);
            queryRun.setCursor(reqProcessList);
        }

        queryRun.next();
        reqProcessList = queryRun.get(tableNum(reqProcessList));

        return reqProcessList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assembleReqProcessListQuery</Name>
				<Source><![CDATA[
    private static Query assembleReqProcessListQuery()
    {
        SysDictTable sysDictTable = new SysDictTable(tableNum(ReqProcessList));
        Set fieldsSet = sysDictTable.fields();
        SetEnumerator fieldSetEnumerator = fieldsSet.getEnumerator();
        SysDictField field;

        Query query = new Query();
        QueryBuildDataSource qbdsReqProcessList = query.addDataSource(tableNum(reqProcessList));
        qbdsReqProcessList.firstOnly(true);
            
        while (fieldSetEnumerator.moveNext())
        {
            field = fieldSetEnumerator.current();

            if (field.name() != fieldStr(ReqProcessList, Parameters))
            {
                qbdsReqProcessList.addSelectionField(fieldName2Id(field.tableid(), field.name()), SelectionField::Database, field.arrayIndex());
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStatusIncreased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the <c>ReqProcessList</c> table status with the <c>ReqProcessStatus</c> value passed in as
    /// a parameter.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_status">
    /// The status with which to compare the <c>ReqProcessList</c> table status.
    /// </param>
    /// <returns>
    /// true if the status found in the <c>ReqProcessList</c> table is bigger than the one specified in the
    /// <paramref name="_status" /> parameter; otherwise, false.
    /// </returns>
    static boolean hasStatusIncreased(ReqProcessId      _processId,
                                             ReqProcessStatus  _status)
    {
        ReqProcessList reqProcessList = ReqProcessList::find(_processId, false);

        if (reqProcessList.Status > _status)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the level of the specified scheduling process.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_level">
    /// The level to change to.
    /// </param>
    /// <remarks>
    /// Uses a separate user connection to perform the update in so the changes can be propagated to all
    /// threads immediately.
    /// </remarks>
    static void setLevel(ReqProcessId       _processId,
                                BOMLevel           _level)

    {
        ReqProcessList reqProcessList;
        Connection     connection = new UserConnection();

        try
        {
            reqProcessList.setConnection(connection);

            connection.ttsbegin();

            select firstonly pessimisticlock reqProcessList where
            reqProcessList.ProcessId == _processId;

            reqProcessList.Level            = real2int(abs(_level));
            reqProcessList.update();

            connection.ttscommit();
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReRunFromLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks data as being changed during the scheduling process.
    /// </summary>
    /// <param name="_processId">
    /// The ID of a scheduling process.
    /// </param>
    /// <param name="_fromLevel">
    /// A level from which coverage should be rerun.
    /// </param>
    static void setReRunFromLevel(ReqProcessId  _processId,
                                         BOMLevel      _fromLevel)
    {
        ReqProcessList reqProcessList;
        Connection     connection              = new UserConnection();

        try
        {
            reqProcessList.setConnection(connection);
            reqProcessList.selectForUpdate(true);

            connection.ttsbegin();

            select firstonly pessimisticlock reqProcessList
            where reqProcessList.ProcessId == _processId
               && (reqProcessList.PmfRerunFromLevel > _fromLevel
                  || reqProcessList.PmfRerunFromLevel == -1);

            if (reqProcessList)
            {
                reqProcessList.PmfRerunFromLevel = _fromLevel;
                reqProcessList.update();
            }

            connection.ttscommit();
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the status of the specified scheduling process.
    /// </summary>
    /// <param name="_processId">
    /// The ID of the scheduling process.
    /// </param>
    /// <param name="_status">
    /// The status to change to.
    /// </param>
    /// <remarks>
    /// This method uses a separate user connection to perform the update in so that the changes can be
    /// propagated to all threads immediately.
    /// </remarks>
    static void setStatus(ReqProcessId _processId, ReqProcessStatus _status)
    {
        Connection connection;

        try
        {
            connection = new UserConnection();

            ReqProcessList reqProcessList;
            reqProcessList.setConnection(connection);
            reqProcessList.selectForUpdate(true);

            connection.ttsbegin();

            select firstonly pessimisticlock reqProcessList 
                where reqProcessList.ProcessId == _processId;

            if (reqProcessList)
            {
                reqProcessList.Status = _status;
                reqProcessList.Level = -1;

                reqProcessList.update();
            }

            connection.ttscommit();
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                try
                {
                    if (connection)
                    {
                        connection.finalize();
                    }
                }
                catch
                {
                    // nothing to do
                }

                retry;
            }
            else
            {
                throw;
            }
        }
        finally
        {
            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up all records related to a single master planning run.
    /// </summary>
    /// <param name = "_processId">The Process ID of the master planning run.</param>
    internal static void cleanUpProcess(ReqProcessId _processId)
    {
        ReqProcessList processList;

        delete_from processList
            where processList.ProcessId == _processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124251</DeveloperDocumentation>
	<Label>@SCMPlanning:UnfinishedPlanningProcesses</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<TitleField1>ReqPlanId</TitleField1>
	<TitleField2>ProcessId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProcessIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>MasterPlanning</Modules>
	<OccEnabled>No</OccEnabled>
	<PrimaryIndex>ProcessIdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxChildThreads</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqCalcUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Errors</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcessId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Errors</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsedChildThreads</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsedTodaysDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfDataChangedDuringProcessing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Parameters</Name>
			<Label>@SYS107488</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Parameters</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxChildThreads</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClassId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqCalcUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProcessState</Name>
			<Label>@SYS301197</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Level</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cancelled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ClassId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClassId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Errors</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Level</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxChildThreads</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqProcessNumThreadsRequested</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Parameters</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParametersX</ExtendedDataType>
			<Label>@SYS107488</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfDataChangedDuringProcessing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfDataChangedDuringProcessing</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PmfRerunFromLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PMF</ConfigurationKey>
			<ExtendedDataType>BOMLevel</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProcessId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqProcessId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqCalcUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqCalcUpdate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqProcessStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>UsedChildThreads</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqProcessNumThreadsUsed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>UsedTodaysDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TodaysDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InfrastructureFailure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainThreadBatchTaskRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ResumedChildThreadsCount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReqRetryCount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProcessIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Level</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlan</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanId</Name>
					<Field>ReqPlanId</Field>
					<RelatedField>ReqPlanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>