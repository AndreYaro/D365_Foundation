<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventBatchJournal extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.JournalId)
        {
            this.JournalId = NumberSeq::newGetNum(InventParameters::numRefInventJournalId(), false).num();
        }

        super();

        this.journalController().onInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the related record from the <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The related record in the <c>InventDim</c> table.
    /// </returns>
    // Note that using the navigation property method sometimes retrieves the related buffer if this
    // record is associated with a form data source that is related to a form data source for the
    // InventDim table.
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the inventory unit ID for display purposes.
    /// </summary>
    /// <returns>
    ///    The inventory unit ID.
    /// </returns>
    public display UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalController</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an appropriate instance of the <c>InventBatchJournalController</c> class based on
    ///    the type of this batch journal.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventBatchJournalController</c> class based on the type of this journal.
    /// </returns>
    public InventBatchJournalController journalController()
    {
        return InventBatchJournalController::newBatchJournal(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the catch weight unit ID for display purposes.
    /// </summary>
    /// <returns>
    ///    The catch weight unit ID.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return PdsCatchWeight::cwUnitId(this.ItemId);
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>productType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the production product type for display purposes.
    /// </summary>
    /// <returns>
    ///    The production product type.
    /// </returns>
    public display PmfProductType productType()
    {
        return this.inventTable().PmfProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventBatchJournal inventBatchJournal_orig = this.orig();

        super();

        this.journalController().onUpdate(inventBatchJournal_orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = true;

        if (this.Posted)
        {
            ret = checkFailed(strFmt("@SYS4002006", this.JournalId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventBatchJournal, ItemId):
                    if (!this.inventTable().isItemBatchActivated())
                    {
                        ret = checkFailed(strFmt("@SYS4001873", this.ItemId));
                    }

                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        Set             allowEmptyDim = new Set(Types::Integer);
        ListEnumerator  dimEnumerator;
        InventDim       inventDim;

        boolean         ret;

        ret = super();

        if (ret)
        {
            inventDim = this.inventDim();

            ret = inventDim.validateWriteProductDimensions(this.ItemId);

            if (ret)
            {
                allowEmptyDim = InventDim::dimFieldList2Set(InventDim::dimStorageDimFieldList());
                allowEmptyDim.remove(fieldNum(InventDim, InventSiteId));
                allowEmptyDim.remove(fieldNum(InventDim, InventLocationId));
                dimEnumerator = InventDim::dimTrackingDimFieldList().getEnumerator();
                while (dimEnumerator.moveNext())
                {
                    allowEmptyDim.add(dimEnumerator.current());
                }

                ret = inventDim.checkDimFieldsValid(this.ItemId, null, true, allowEmptyDim);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a matching record for the <c>InventBatchJournal</c> table exists.
    /// </summary>
    /// <param name="_journalRecId">
    ///    The inventory batch journal record ID to search for.
    /// </param>
    /// <returns>
    ///    true if a record for the <c>InventBatchJournal</c> table exists for the given journal record ID; otherwise, false.
    /// </returns>
    public static boolean exist(InventBatchJournalRecId _journalRecId)
    {
        return _journalRecId
            && (select inventBatchJournal
                where inventBatchJournal.RecId == _journalRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForBOMJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a record for the <c>InventBatchJournal</c> table exists with a matching inventory BOM journal ID.
    /// </summary>
    /// <param name="_bomJournalId">
    ///    The inventory BOM journal ID to search for.
    /// </param>
    /// <returns>
    ///    true if a matching record for the <c>InventBatchJournal</c> table exists; otherwise, false.
    /// </returns>
    public static boolean existForBOMJournalId(InventJournalId _bomJournalId)
    {
        return _bomJournalId
            && (select inventBatchJournal
                where inventBatchJournal.bomJournalId == _bomJournalId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the matching record for the <c>InventBatchJournal</c> table.
    /// </summary>
    /// <param name="_journalRecId">
    ///    The inventory batch journal record ID to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>InventBatchJournal</c> table or an empty buffer if no such
    ///    record is found.
    /// </returns>
    public static InventBatchJournal find(InventBatchJournalRecId _journalRecId, boolean _forUpdate = false)
    {
        InventBatchJournal inventBatchJournal;

        if (_journalRecId)
        {
            inventBatchJournal.selectForUpdate(_forUpdate);

            select firstonly inventBatchJournal
                where inventBatchJournal.RecId == _journalRecId;
        }

        return inventBatchJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBOMJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the matching record for the <c>InventBatchJournal</c> table using the BOM journal ID.
    /// </summary>
    /// <param name="_bomJournalId">
    ///    The BOM journal ID to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>InventBatchJournal</c> table or an empty buffer if no such
    ///    record is found.
    /// </returns>
    public static InventBatchJournal findByBOMJournalId(InventJournalId _bomJournalId, boolean _forUpdate = false)
    {
        InventBatchJournal inventBatchJournal;

        if (_bomJournalId)
        {
            inventBatchJournal.selectForUpdate(_forUpdate);

            select firstonly inventBatchJournal
                where inventBatchJournal.bomJournalId == _bomJournalId;
        }

        return inventBatchJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the matching record for the <c>InventBatchJournal</c> table using the journal ID.
    /// </summary>
    /// <param name="_journalId">
    ///    The inventory batch journal ID to search for.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    ///    The matching record in the <c>InventBatchJournal</c> table or an empty buffer if no such
    ///    record is found.
    /// </returns>
    public static InventBatchJournal findByJournalId(InventBatchJournalId _journalId, boolean _forUpdate = false)
    {
        InventBatchJournal inventBatchJournal;

        if (_journalId)
        {
            inventBatchJournal.selectForUpdate(_forUpdate);

            select firstonly inventBatchJournal
                where inventBatchJournal.JournalId == _journalId;
        }

        return inventBatchJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onJournalDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic for an inventory batch journal when a record from the <c>InventJournalTable</c> table has been deleted.
    /// </summary>
    /// <param name="_inventJournalTable">
    ///    The record of the <c>InventJournalTable</c> that has been deleted.
    /// </param>
    public static void onJournalDelete(InventJournalTable _inventJournalTable)
    {
        InventBatchJournal inventBatchJournal;

        if (_inventJournalTable.JournalType != InventJournalType::BOM)
        {
            return;
        }

        inventBatchJournal = InventBatchJournal::findByBOMJournalId(_inventJournalTable.JournalId, true);

        if (inventBatchJournal.RecId)
        {
            // The journal had been posted before it was deleted so we should delete the related inventory batch journal
            if (_inventJournalTable.Posted)
            {
                inventBatchJournal.delete();
            }
            // The inventory batch journal may now be edited
            else
            {
                inventBatchJournal.Posted       = NoYes::No;
                inventBatchJournal.bomJournalId = "";
                inventBatchJournal.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTable</Name>
				<Source><![CDATA[
    public InventTable InventTable(InventTable _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('InventTable');
            }
            else
            {
                return this.setLink('InventTable', _relatedTable);
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS4001872</DeveloperDocumentation>
	<FormRef>InventBatchJournalMerge</FormRef>
	<Label>@SYS4001871</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>JournalId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>JournalIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Criteria</Name>
			<Label>@SYS1046</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>History</Name>
			<Label>@SYS10575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMJournalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventJournalId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventBatchJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BOMJournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMJournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>JournalType_Extern</Name>
					<RelatedField>JournalType</RelatedField>
					<ValueStr>InventJournalType::BOM</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMJournalId</Name>
					<Field>BOMJournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>