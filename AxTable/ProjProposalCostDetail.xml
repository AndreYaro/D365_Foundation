<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProposalCostDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProposalCostDetail extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total line amount in the Invoice Proposal currency.
    /// </summary>
    /// <param name="_projProposalCost">
    /// The <c>ProjProposalCost</c> instance for the line.
    /// </param>
    /// <param name="_projProposalJour">
    /// ProjProposalJour instance for the invoice proposal
    /// </param>
    /// <param name="_lineAmount">
    /// The new line amount.
    /// </param>
    /// <returns>
    /// The new line amount if Brazilian parameters are enabled; otherwise, <c>_lineAmount</c>.
    /// </returns>
    /// <remarks>
    /// Calculates total line amount in Invoice Proposal currency
    /// </remarks>
    public AmountCur calculateAmountCur(ProjProposalCost _projProposalCost,
                                        ProjProposalJour _projProposalJour,
                                        AmountCur        _lineAmount)
    {
            AmountCur totalAmount;

            if (BrazilParameters::isEnabled() && _projProposalCost.IncludedTaxPercent_BR)
            {
                totalAmount      = CurrencyExchangeHelper::amount(_projProposalCost.qty() * this.salesPriceInclTax_BR(_projProposalCost.IncludedTaxPercent_BR), _projProposalJour.CurrencyId);
                return   totalAmount;
            }

            return _lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    display AmountCur lineAmount()
    {
        return ProjTrans::newProjProposalCostSale(this.projProposalCost(), this, this.projCostTransSale()).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls methods appropriate to modified fields.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field that is modified.
    /// </param>
    /// <remarks>
    ///    This method executes when any field in the table is modified.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldnum(ProjProposalCostDetail, SalesPrice):
				ProjProposalCost projProposalCost			   = this.projProposalCost();
				ProjProposalJour projProposalJour			   = projProposalCost.projProposalJour(); 
				ProjFundingSourceRefId projFundingSourceRefId  = ProjProposalJour.FundingSource;
				ProjProposalId projProposalId				   = ProjProposalJour.ProposalId;
				TransactionID transId						   = projProposalCost.TransId;
				AmountCur newAmount							   = CurrencyExchangeHelper::amount(projProposalCost.qty() * this.SalesPrice, projProposalJour.CurrencyId);
				AmountCur originalAmount					   = CurrencyExchangeHelper::amount(projProposalCost.qty() * this.orig().SalesPrice, projProposalJour.CurrencyId);
                ProjCostTrans projCostTrans = ProjCostTrans::find(transId);

                this.AmountCur          = this.calculateAmountCur(projProposalCost,projProposalJour, newAmount);

                ProjInvoiceProposalTransUpdate::updateProposalSummaryWithCategory(projProposalId, newAmount,
                                                            originalAmount, projCostTrans.ProjId, projCostTrans.CategoryId);

                this.update();

                break;

            default:
            super(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostTransSale</Name>
				<Source><![CDATA[
    public ProjCostTransSale projCostTransSale()
    {
        return ProjCostTransSale::find(this.SaleRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalCost</Name>
				<Source><![CDATA[
    public ProjProposalCost projProposalCost(boolean _forUpdate = false)
    {
        return (ProjProposalCost::findRecId(this.ProposalRefRecId, _forUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPriceInclTax_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price including included taxes for this transaction.
    /// </summary>
    /// <param name="_includedTaxPercent_BR">
    /// Tax percentage to include in the price
    /// </param>
    /// <returns>
    /// The sales price including included taxes for this transaction.
    /// </returns>
    public display SalesPriceInclTax_BR salesPriceInclTax_BR(TaxValue _includedTaxPercent_BR = this.projProposalCost().IncludedTaxPercent_BR)
    {
        return this.salesPrice / (1 -  _includedTaxPercent_BR / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
            boolean                 ret;
            ProjCostTrans           projCostTrans;
            ProjProposalCost        projProposalCost;
            ProjProposalJour        projProposalJour;
            AmountCur               finalLineAmount;
            AmountCur               updatedLineAmount;
            AmountCur               originalAmount;
            ProjTrans               projTrans;
            ProjFundingSourceRefId  fundingSource;

            ret = super(_fieldIdToCheck);

            if (ret)
            {
                switch (_fieldIdToCheck)
                {
                    case fieldnum(ProjProposalRevenueDetail, SalesPrice):
                    projProposalCost  = this.projProposalCost();
                    projProposalJour  = projProposalCost.projProposalJour();
                    projCostTrans     = projProposalCost.projCostTrans();
                    projTrans         = ProjTrans::construct(projCostTrans);
                    updatedLineAmount = CurrencyExchangeHelper::amount(projProposalCost.qty() * this.SalesPrice, projProposalJour.CurrencyId);
                    originalAmount    = CurrencyExchangeHelper::amount(projProposalCost.qty() * this.orig().SalesPrice, projProposalJour.CurrencyId);
                    finalLineAmount   = this.calculateAmountCur(projProposalCost, projProposalJour, updatedLineAmount)  - originalAmount;
                    fundingSource     = projProposalJour.FundingSource;

                    if (!this.verifyAndUpdateFundingLimit(projTrans, finalLineAmount, fundingSource))
                    {
                        ret = false;
                    }
                }
            }

            return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAndUpdateFundingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies and updates funding limit if the new line amount is within the funding limit.
    /// </summary>
    /// <param name="_projTrans">
    /// The <c>ProjTrans</c> record to verify and update.
    /// </param>
    /// <param name="_lineAmount">
    /// The line amount to check.
    /// </param>
    /// <param name="_fundingsource">
    /// The <c>RefId</c> value of the funding source.
    /// </param>
    /// <returns>
    /// True if the line amount is within the funding limits; otherwise, false.
    /// </returns>
    public boolean verifyAndUpdateFundingLimit(ProjTrans _projTrans, AmountCur _lineAmount, ProjFundingSourceRefId _fundingsource)
    {
        if (this.SalesPrice >= 0)
            {
                if (!ProjInvoiceProposalTransUpdate::validateFundingLimit(_lineAmount,
                                                        _projTrans,
                                                        _fundingsource))
                {
                    return  checkFailed("@SYS136009");
                }

                return true;
            }

        return checkFailed("@SYS118311");
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjProposalCostDetail find(RefRecId _saleRefRecId, ProjProposalId _proposalId = '', boolean _forUpdate = false)
    {
        ProjProposalId          proposalId = _proposalId;
        ProjProposalCost        projProposalCost = null;
        ProjProposalCostDetail  projProposalCostDetail = null;

        if (! proposalId)
        {
            proposalId  = ProjProposalCostDetail::findActiveProposalId(_saleRefRecId);
        }

        projProposalCostDetail.selectForUpdate(_forUpdate);

        if (_saleRefRecId && proposalId)
        {
            select projProposalCostDetail
                where projProposalCostDetail.SaleRefRecId == _saleRefRecId
                    join ProposalId, RecId from projProposalCost
                        where projProposalCost.RecId == projProposalCostDetail.ProposalRefRecId &&
                            projProposalCost.ProposalId == proposalId;
        }

        return projProposalCostDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveProposalId</Name>
				<Source><![CDATA[
    public static ProjProposalId findActiveProposalId(RefRecId _saleRefRecId)
    {
        RefRecId                saleRefRecId = _saleRefRecId;

        ProjProposalId          proposalId;

        ProjCostTransSale       projCostTransSale = ProjCostTransSale::find(_saleRefRecId);
        ProjProposalCost        projProposalCost;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjProposalJour        projProposalJour;
        ProjInvoiceCost         projInvoiceCost;
        ProjInvoiceCostDetail   projInvoiceCostDetail;

        if (projCostTransSale.TransStatus   == ProjTransStatus::Posted      ||
            projCostTransSale.TransStatus   == ProjTransStatus::Adjusted    ||
            projCostTransSale.TransStatus   == ProjTransStatus::Estimated   ||
            projCostTransSale.TransStatus   == ProjTransStatus::Eliminated)
        {
            return '';
        }

    //  test if only one proposal return this
        select count(RecId) from projProposalCostDetail
            where projProposalCostDetail.SaleRefRecId  == saleRefRecId;

        if (projProposalCostDetail.RecId <= 1)
        {
            select firstonly RecId from projProposalCostDetail
                where projProposalCostDetail.SaleRefRecId == saleRefRecId
                    join ProposalId from projProposalCost
                        where projProposalCost.RecId == projProposalCostDetail.ProposalRefRecId;

            proposalId = projProposalCost.ProposalId;
        }
        else
        {
    //  test if no invoice exists for proposal - return this
            select RecId from projProposalCostDetail
                where projProposalCostDetail.SaleRefRecId == _saleRefRecId
                    join ProposalId from projProposalCost
                        where projProposalCost.RecId == projProposalCostDetail.ProposalRefRecId
                        exists join projProposalJour
                            where projProposalJour.ProposalId == projProposalCost.ProposalId
                            notexists join projInvoiceCost
                                where projInvoiceCost.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                join projInvoiceCostDetail
                                    where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                                       && projInvoiceCostDetail.SaleRefRecId == projProposalCostDetail.SaleRefRecId;

            if (projProposalCost)
            {
                proposalId = projProposalCost.ProposalId;
            }
            else
            {
    //  test if invoice with no-ref exists for proposal - return this
                select RecId from projProposalCostDetail
                    where projProposalCostDetail.SaleRefRecId == _saleRefRecId
                        join ProposalId from projProposalCost
                            where projProposalCost.RecId == projProposalCostDetail.ProposalRefRecId
                            exists join projProposalJour
                                where projProposalJour.ProposalId == projProposalCost.ProposalId
                                join RecId from projInvoiceCost
                                    where projInvoiceCost.ProjInvoiceId == projProposalJour.ProjInvoiceId
                                    join RecId from projInvoiceCostDetail
                                    where  projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                                       &&  projInvoiceCostDetail.SaleRefRecId == _saleRefRecId
                                       && !projInvoiceCostDetail.RefRecId;

                if (projProposalCost)
                {
                    proposalId  = projProposalCost.ProposalId;
                }
            }
        }

        return proposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProposaleFromTrans</Name>
				<Source><![CDATA[
    public static ProjProposalCostDetail initProposaleFromTrans(ProjCostTransSale _projCostTransSale)
    {
        ProjProposalCostDetail    projProposalCostDetail;

        projProposalCostDetail.SaleRefRecId   = _projCostTransSale.RecId;
        projProposalCostDetail.SalesPrice     = _projCostTransSale.SalesPrice;
        projProposalCostDetail.AmountCur      = _projCostTransSale.LineAmount;

        return projProposalCostDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // <GTE>
        ProjProposalCostDetail orig = this.orig();
        // </GTE>

        super();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && this.SalesPrice != orig.SalesPrice)
        {
            this.projProposalCost().markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS320563</DeveloperDocumentation>
	<Label>@SYS55260</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SaleRefRecId</TitleField1>
	<TitleField2>SalesPrice</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Proposal</Name>
			<Label>@SYS26457</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SaleRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProposalRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SaleRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProposalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProposalRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SaleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SaleRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ProjCostTransSale</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCostTransSale</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SaleRefRecId</Name>
					<Field>SaleRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjProposalCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjProposalCost</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalRefRecId</Name>
					<Field>ProposalRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>