<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransportationDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TransportationDocument extends common
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>carrierAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the carrier address.
    /// </summary>
    /// <param name="_invoiceAccountDirPartyRecId">
    ///     The <c>DirPartyRecId</c> value which is used when the
    ///     carrier type is <c>InvoiceAccount</c>; optional.
    /// </param>
    /// <returns>
    ///    The carrier address.
    /// </returns>
    public LogisticsAddressing carrierAddress(DirPartyRecId _invoiceAccountDirPartyRecId = 0)
    {
        return DirParty::getAddress(this.carrierParty(_invoiceAccountDirPartyRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the carrier name.
    /// </summary>
    /// <param name="_invoiceAccountDirPartyRecId">
    ///     The <c>DirPartyRecId</c> value which is used when the
    ///     carrier type is <c>InvoiceAccount</c>; optional.
    /// </param>
    /// <returns>
    ///    The carrier name.
    /// </returns>
    public Name carrierName(DirPartyRecId _invoiceAccountDirPartyRecId = 0)
    {
        return DirPartyTable::findRec(this.carrierParty(_invoiceAccountDirPartyRecId)).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierParty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the carrier party.
    /// </summary>
    /// <param name="_invoiceAccountDirPartyRecId">
    ///     The <c>DirPartyRecId</c> value which is used when the
    ///     carrier type is <c>InvoiceAccount</c>; optional.
    /// </param>
    /// <returns>
    ///    The carrier party.
    /// </returns>
    public DirPartyRecId carrierParty(DirPartyRecId _invoiceAccountDirPartyRecId = 0)
    {
        DirPartyRecId dirPartyRecId;

        switch (this.CarrierType)
        {
            case CarrierType_W::Customer:
                dirPartyRecId = CustTable::find(this.CarrierCode).Party;
                break;

            case CarrierType_W::Vendor:
                dirPartyRecId = VendTable::find(this.CarrierCode).Party;
                break;

            case CarrierType_W::InvoiceAccount:

                if (_invoiceAccountDirPartyRecId)
                {
                    dirPartyRecId = _invoiceAccountDirPartyRecId;
                }
                else
                {
                    dirPartyRecId = CompanyInfo::current();
                }
        }

        return dirPartyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonFieldId</Name>
				<Source><![CDATA[
    private FieldId contactPersonFieldId(Common _common)
    {
        return fieldName2id(_common.TableId, identifierStr(ContactPersonId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the contact person name.
    /// </summary>
    /// <param name="_common">
    ///    The record from which to get the contact person name; optional.
    /// </param>
    /// <returns>
    ///    The contact person name.
    /// </returns>
    public DirPartyName contactPersonName(Common _common = null)
    {
        DirPartyName    name;
        FieldId         contactPersonFieldId;

        if (_common)
        {
            contactPersonFieldId = this.contactPersonFieldId(_common);

            if (contactPersonFieldId)
            {
                name = ContactPerson::name(_common.(contactPersonFieldId));
            }
        }

        if (!contactPersonFieldId)
        {
            name = this.workerName(HcmWorker::userId2Worker(this.createdBy));
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the contact person title.
    /// </summary>
    /// <param name="_common">
    ///    The record from which to get the contact person title; optional.
    /// </param>
    /// <returns>
    ///    The contact person title.
    /// </returns>
    public PersonTitle contactPersonTitle(Common _common = null)
    {
        PersonTitle     title;
        FieldId         contactPersonFieldId;

        if (_common)
        {
            contactPersonFieldId = this.contactPersonFieldId(_common);

            if (contactPersonFieldId)
            {
                title = ContactPerson::find(_common.(contactPersonFieldId)).Title;
            }
        }

        if (!contactPersonFieldId)
        {
            title = this.workerTitle(HcmWorker::userId2Worker(this.createdBy));
        }

        return title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLoadedPostalAddressing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the formatted loaded postal address.
    /// </summary>
    /// <returns>
    ///    The formatted loaded postal address.
    /// </returns>
    public display LoadedPostalAddressing displayLoadedPostalAddressing()
    {
        LoadedPostalAddressing loadedPostalAddressing;

        if (this.LoadedPostalAddress)
        {
            loadedPostalAddressing = LogisticsPostalAddress::addressFromRecId(this.LoadedPostalAddress);
        }

        return loadedPostalAddressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnloadedPostalAddressing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the formatted unloaded postal address.
    /// </summary>
    /// <returns>
    ///    The formatted unloaded postal address.
    /// </returns>
    public display UnloadedPostalAddressing displayUnloadedPostalAddressing()
    {
        UnloadedPostalAddressing unloadedPostalAddressing;

        if (this.UnloadedPostalAddress)
        {
            unloadedPostalAddressing = LogisticsPostalAddress::addressFromRecId(this.UnloadedPostalAddress);
        }

        return unloadedPostalAddressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadedPostalAddressLookupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the loaded postal address lookup record.
    /// </summary>
    /// <returns>
    ///    The loaded postal address lookup record.
    /// </returns>
    public Common getLoadedPostalAddressLookupRecord()
    {
        Common                  sourceRecord;
        SalesTable              salesTable;
        PurchTable              purchTable;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        SalesParmTable          salesParmTable;
        Common                  lookupRecord;

        sourceRecord = this.getSourceRecordFromDataSource();

        switch (sourceRecord.TableId)
        {
            case tableNum(SalesTable):
                salesTable = sourceRecord;
                lookupRecord = salesTable.custTable_CustAccount();
                break;

            case tableNum(PurchTable):
                purchTable = sourceRecord;
                lookupRecord = purchTable.vendTable_OrderAccount();
                break;

            case tableNum(VendInvoiceInfoTable):
                vendInvoiceInfoTable = sourceRecord;
                lookupRecord = vendInvoiceInfoTable.vendTable_OrderAccount();
                break;

            case tableNum(SalesParmTable):
                salesParmTable = sourceRecord;
                lookupRecord = salesParmTable.salesTable().custTable_CustAccount();
                break;

            default:
                lookupRecord = CompanyInfo::find();
                break;
        }

        return lookupRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadedPostalAddressNewMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the menu item name that is used to create loaded postal addresses.
    /// </summary>
    /// <returns>
    ///    The menu item name that is used to create loaded postal addresses.
    /// </returns>
    public MenuItemNameDisplay getLoadedPostalAddressNewMenuItemName()
    {
        MenuItemNameDisplay menuItemName;

        switch (this.getLoadedPostalAddressLookupRecord().TableId)
        {
            case tableNum(CustTable):
                menuItemName = menuitemDisplayStr(CustDirPartyPostalAddressNew);
                break;

            case tableNum(VendTable):
                menuItemName = menuitemDisplayStr(VendDirPartyPostalAddressNew);
                break;

            default:
                menuItemName = menuitemDisplayStr(CompanyDirPartyPostalAddressNew);
                break;
        }

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadedPostalAddressSourceTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>LogisticsLocationSelectSourceType</c> values.
    /// </summary>
    /// <returns>
    ///    A <c>List</c> containing the <c>LogisticsLocationSelectSourceType</c> values.
    /// </returns>
    /// <remarks>
    ///    The first <c>LogisticsLocationSelectSourceType</c> value in the <c>List</c> is the default value.
    /// </remarks>
    public List getLoadedPostalAddressSourceTypes()
    {
        Common  sourceRecord;
        List    loadedPostalAddressSourceTypes;

        sourceRecord = this.getSourceRecordFromDataSource();

        loadedPostalAddressSourceTypes = new List(typeName2Type(enumStr(LogisticsLocationSelectSourceType)));

        switch (sourceRecord.TableId)
        {
            case tableNum(CustInvoiceTable), tableNum(SalesTable), tableNum(SalesParmTable):
                loadedPostalAddressSourceTypes.addStart(LogisticsLocationSelectSourceType::Customer);
                loadedPostalAddressSourceTypes.addEnd(LogisticsLocationSelectSourceType::Company);
                break;

            case tableNum(PurchTable), tableNum(VendInvoiceInfoTable):
                loadedPostalAddressSourceTypes.addStart(LogisticsLocationSelectSourceType::Vendor);
                loadedPostalAddressSourceTypes.addEnd(LogisticsLocationSelectSourceType::Company);
                break;

            default:
                loadedPostalAddressSourceTypes.addStart(LogisticsLocationSelectSourceType::Company);
                break;
        }

        return loadedPostalAddressSourceTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRecordFromDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the transportation document source record from the form data source.
    /// </summary>
    /// <returns>
    ///    The transportation document source record.
    /// </returns>
    /// <remarks>
    ///    The current transportation document record is returned as its own source record when no form data source is detected.
    /// </remarks>
    private Common getSourceRecordFromDataSource()
    {
        Object formDataSource;
        Common sourceRecord;

        if (FormDataUtil::isFormDataSource(this))
        {
            formDataSource = FormDataUtil::getFormDataSource(this);

            if (formDataSourceHasMethod(formDataSource, identifierStr(getSourceRecord)))
            {
                sourceRecord = formDataSource.getSourceRecord();
            }
        }

        if (!sourceRecord)
        {
            // The source record could not be determined.
            sourceRecord = this;
        }

        return sourceRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>TransportationDocument</c> record.
    /// </summary>
    /// <param name="_common">
    ///    A record that is used to initialize the <c>TransportationDocument</c> record.
    /// </param>
    public void initFromCommon(Common _common)
    {
        // By default, set the danger degree to 'Not dangerous'.
        this.PackageDangerDegree = "@GLS112571";

        switch (_common.TableId)
        {
            case tableNum(CustInvoiceTable), tableNum(SalesTable), tableNum(SalesParmTable):
                this.DoPrintTransportationDocument = CustParameters::find().DoPrintTransportationDocument;

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    SalesTable salesTable = _common as SalesTable;

                    if (salesTable)
                    {
                        this.initializetravelTimeAndDistance_MX(EInvoiceSpotIdTable_MX::findByWarehouse(salesTable.InventLocationId).SpotId,
                            EInvoiceSpotIdTable_MX::findByCustAccount(salesTable.CustAccount).Spotid);
                    }
                }

                break;

            case tableNum(ProjProposalJour):
                this.DoPrintTransportationDocument = ProjParameters::find().DoPrintTransportationDocument;
                break;

            case tableNum(PurchTable), tableNum(VendInvoiceInfoTable):
                this.DoPrintTransportationDocument = VendParameters::find().DoPrintTransportationDocument;
                break;

            // <GEELT>
            case tableNum(InventTransferTable):
                this.DocumentDateTime = _common.(fieldNum(InventTransferTable, CreatedDateTime));
                this.DoPrintTransportationDocument = InventParameters::find().DoPrintTransportationDocument;
                this.CarrierType = CarrierType_W::Customer;

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    InventTransferTable inventTransTable = _common as InventTransferTable;

                    if (inventTransTable)
                    {
                        this.initializetravelTimeAndDistance_MX(EInvoiceSpotIdTable_MX::findByWarehouse(inventTransTable.InventLocationIdFrom).SpotId,
                            EInvoiceSpotIdTable_MX::findByWarehouse(inventTransTable.InventLocationIdTo).SpotId);
                    }
                }

                break;
            // </GEELT>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializetravelTimeAndDistance_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes transportation-related parameters.
    /// </summary>
    /// <param name = "_pickUpSpot">Pick up spot.</param>
    /// <param name = "_dropOffSpot">Drop off spot.</param>
    protected void initializetravelTimeAndDistance_MX(EInvoiceSiteID_MX _pickUpSpot, EInvoiceSiteID_MX _dropOffSpot)
    {
        this.PickUpSpot_MX = _pickUpSpot;
        this.DropOffSpot_MX = _dropOffSpot;

        EInvoiceTransTimeEngine_MX transTimeEngine = EInvoiceTransTimeEngine_MX::findBySpotPair(_pickUpSpot, _dropOffSpot);

        this.TravelTime_MX = transTimeEngine.Hours;
        this.TravelDistance_MX = transTimeEngine.Distance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuedByName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the issued by name.
    /// </summary>
    /// <returns>
    ///    The issued by name.
    /// </returns>
    public DirPartyName issuedByName()
    {
        return this.workerName(this.IssuedBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuedByTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the issued by title.
    /// </summary>
    /// <returns>
    ///    The issued by title.
    /// </returns>
    public HcmTitleId issuedByTitle()
    {
        return this.workerTitle(this.IssuedBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the event that is caused when a field is modified for a <c>TransportationDocument</c> record.
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID of the field on the <c>TransportationDocument</c> table that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TransportationDocument, CarrierType):
                this.CarrierCode = '';
                break;
            case fieldNum(TransportationDocument, LoadedPostalAddress):
                this.LoadedAddressName = LogisticsPostalAddress::locationNameFromRecId(this.LoadedPostalAddress);
                break;
            case fieldNum(TransportationDocument, UnloadedPostalAddress):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    this.UnloadedAddressName = LogisticsPostalAddress::locationNameFromRecId(this.UnloadedPostalAddress);
                }
                break;
            case fieldNum(TransportationDocument, PickUpSpot_MX), fieldNum(TransportationDocument, DropOffSpot_MX):
                if (this.DropOffSpot_MX)
                {
                    EInvoiceTransTimeEngine_MX transTimeEngine = EInvoiceTransTimeEngine_MX::findBySpotPair(this.PickUpSpot_MX, this.DropOffSpot_MX);

                    this.PickUpMode_MX = EInvoiceSpotIdTable_MX::findBySpotId(this.PickUpSpot_MX).SpotMode;
                    this.DropOffMode_MX = EInvoiceSpotIdTable_MX::findBySpotId(this.DropOffSpot_MX).SpotMode;
                    this.TravelDistance_MX = transTimeEngine.Distance;
                    this.TravelTime_MX = transTimeEngine.Hours;
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerName</Name>
				<Source><![CDATA[
    private DirPartyName workerName(HcmWorkerRecId _hcmWorkerRecId)
    {
        return HcmWorker::worker2Name(_hcmWorkerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerTitle</Name>
				<Source><![CDATA[
    private HcmTitleId workerTitle(HcmWorkerRecId _hcmWorkerRecId)
    {
        return HcmWorker::find(_hcmWorkerRecId).title();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>TransportationDocument</c> table; if not,
    ///    an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>TransportationDocument</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!TransportationDocument::exist(_recId))
        {
            ret = checkFailed(strfmt(TransportationDocument::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies transportation data information from one record to another.
    /// </summary>
    /// <param name="_sourceTransportationDataRef">
    ///    A record that may contain a reference to a <c>TransportationDocument</c> record to copy.
    /// </param>
    /// <param name="_destinationTransportationDataRef">
    ///    A record that will be modified to reference a copy of the source record's transporation data.
    /// </param>
    /// <remarks>
    ///    The destination record may be modified but will not be written.
    ///    The destination transportation document will be updated instead of created if the reference is already set on the destination record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///    Either the source or destination record does not contain a field for the <c>TransportationDocument</c> record reference.
    /// </exception>
    public static void copy(Common _sourceTransportationDataRef, Common _destinationTransportationDataRef)
    {
        FieldId                     sourceTransportationDocumentFieldId;
        FieldId                     destinationTransportationDocumentFieldId;
        TransportationDocumentRecId sourceTransportationDocumentRecId;
        TransportationDocumentRecId destinationTransportationDocumentRecId;

        // Find the field named 'TransportationDocument' on the source and destination records.
        sourceTransportationDocumentFieldId = fieldName2id(_sourceTransportationDataRef.TableId, identifierStr(TransportationDocument));
        destinationTransportationDocumentFieldId = fieldName2id(_destinationTransportationDataRef.TableId, identifierStr(TransportationDocument));

        if (!sourceTransportationDocumentFieldId || !destinationTransportationDocumentFieldId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Find the TransportationDocument RecId that is on the source record.
        sourceTransportationDocumentRecId = _sourceTransportationDataRef.(sourceTransportationDocumentFieldId);

        if (sourceTransportationDocumentRecId)
        {
            // Find the TransportationDocument RecId that is on the destination record.
            destinationTransportationDocumentRecId = _destinationTransportationDataRef.(destinationTransportationDocumentFieldId);

            destinationTransportationDocumentRecId = TransportationDocument::copyServer(sourceTransportationDocumentRecId, destinationTransportationDocumentRecId);

            if (destinationTransportationDocumentRecId)
            {
                _destinationTransportationDataRef.(destinationTransportationDocumentFieldId) = destinationTransportationDocumentRecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes a copy of the transportation data records.
    /// </summary>
    /// <param name="_sourceTransportationDocumentRecId">
    ///    The record identifier of the source <c>TransportationDocument</c> record.
    /// </param>
    /// <param name="_destinationTransportationDocumentRecId">
    ///    The record identifier of the destination <c>TransportationDocument</c> record.
    /// </param>
    /// <returns>
    ///    A record identifier of type <c>TransportationDocumentRecId</c> that is the
    ///    identifier of the new <c>TransportationDocument</c> record.
    /// </returns>
    private static TransportationDocumentRecId copyServer(
        TransportationDocumentRecId _sourceTransportationDocumentRecId,
        TransportationDocumentRecId _destinationTransportationDocumentRecId)
    {
        TransportationDocument  sourceTransportationDocument;
        TransportationDocument  destinationTransportationDocument;
        TransportationVehicle   sourceTransportationVehicle;
        TransportationVehicle   destinationTransportationVehicle;

        sourceTransportationDocument = TransportationDocument::find(_sourceTransportationDocumentRecId);

        if (sourceTransportationDocument)
        {
            ttsBegin;

            if (_destinationTransportationDocumentRecId)
            {
                // Find the existing destination records before copying the data from the source records.
                destinationTransportationDocument = TransportationDocument::find(_destinationTransportationDocumentRecId, true);
                destinationTransportationVehicle = TransportationVehicle::findByTransportationDocument(destinationTransportationDocument.RecId, true);
            }

            // Copy the source TransportationDocument record details to the destination TransportationDocument record.
            buf2buf(sourceTransportationDocument, destinationTransportationDocument);
            // <GEELT>
            destinationTransportationDocument.DocumentDateTime = DateTimeUtil::getSystemDateTime();
            // </GEELT>
            destinationTransportationDocument.write();

            // Find the TransportationVehicle record that references the original TransportationDocument record.
            sourceTransportationVehicle = TransportationVehicle::findByTransportationDocument(sourceTransportationDocument.RecId);

            if (sourceTransportationVehicle)
            {
                // Make a copy of the TransportationVehicle record.
                buf2buf(sourceTransportationVehicle, destinationTransportationVehicle);
                destinationTransportationVehicle.TransportationDocument = destinationTransportationDocument.RecId;
                destinationTransportationVehicle.write();
            }

            ttsCommit;
        }

        return destinationTransportationDocument.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>TransportationDocument</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>TransportationDocument</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId from transportationDocument
                     where transportationDocument.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TransportationDocument</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>TransportationDocument</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TransportationDocument</c> table; otherwise, an empty record.
    /// </returns>
    public static TransportationDocument find(
        RecId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        TransportationDocument transportationDocument;

        transportationDocument.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            transportationDocument.concurrencyModel(_concurrencyModel);
        }

        if (_recId != 0)
        {
            select firstonly transportationDocument
                where transportationDocument.RecId == _recId;
        }

        return transportationDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLoadedPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a lookup for the <c>LogisticsPostalAddress</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    ///    The form reference group control object on which to perform the lookup.
    /// </param>
    /// <param name="_transportationDocument">
    ///    The <c>TransportationDocument</c> record on which to perform the lookup.
    /// </param>
    /// <returns>
    ///    The <c>LogisticsPostalAddress</c> record that was selected by the lookup.
    /// </returns>
    public static Common lookupLoadedPostalAddress(
        FormReferenceControl    _formReferenceControl,
        TransportationDocument  _transportationDocument)
    {
        return LogisticsLocationSelectionLookup::lookupAddressForm(
            _formReferenceControl,
            _transportationDocument.getLoadedPostalAddressLookupRecord(),
            [LogisticsLocationRoleType::Lading_W],
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LineId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>AT,BE,BG,CY,CZ,DE,DK,EE,GR,ES,FI,FR,GB,HR,HU,IE,IT,LT,LU,LV,MT,NL,PL,PT,RO,SE,SI,SK</CountryRegionCodes>
	<DeveloperDocumentation>@GLS220064</DeveloperDocumentation>
	<FormRef>TransportationDocument</FormRef>
	<Label>@GLS220266</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>DoPrintTransportationDocument</TitleField1>
	<TitleField2>IssuedBy</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CarrierType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoPrintTransportationDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageDangerDegree</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadedAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadedPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EconomicActivityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Carrier</Name>
			<Label>@GLS107363</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CarrierType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentDateTime</Name>
			<Label>@GLS222657</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EconomicActivity</Name>
			<Label>@GLS112555</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EconomicActivityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LoadedAddress</Name>
			<Label>@GlobalAddressBook:LoadingAddress</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadedAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadedPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayLoadedPostalAddressing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LoadedProperties</Name>
			<Label>@Proj:LoadingProperties</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportationProperties</Name>
			<Label>@GLS107387</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DoPrintTransportationDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackageDangerDegree</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnloadedAddress</Name>
			<Label>@GLS107377</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnloadedAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnloadedPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUnloadedPostalAddressing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnloadedProperties</Name>
			<Label>@GLS113465</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnloadedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transportation_MX</Name>
			<Label>@MexicoCFDI:TransTimeAndDistance</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PickUpSpot_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropOffSpot_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TravelDistance_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TravelTime_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickUpMode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropOffMode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WeightUnit_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransPermissions_MX</Name>
			<Label>@SYS121154</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SATPermissionType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SATPermissionID_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EnvironmentalDamageInsurance_MX</Name>
			<Label>@MexicoCFDI:EnvironmentalDamageInsurance</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EnvironmentalDamageInsuranceVendor_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnvironmentalDamageInsurancePolicyNum_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CarrierCode_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CarrierType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CarrierType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DocumentDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDateTime_LT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DoPrintTransportationDocument</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationDocumentPrint</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EconomicActivityType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EconomicActivityType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IssuedBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationIssuedBy</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadedAddressName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LoadedAddressName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LoadedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LoadedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadedPostalAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LoadedPostalAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageDangerDegree</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationPackageDangerDegree</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackageDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationPackage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnloadedAddressName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnloadedAddressName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>UnloadedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnloadedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnloadedPostalAddress</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnloadedPostalAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPermissionType_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>EInvoiceExtCodeId_MX</ExtendedDataType>
			<Label>@MexicoCFDI:AutotransportationPermissionType</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SATPermissionID_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>TransPermissionID_MX</ExtendedDataType>
			<Label>@MexicoCFDI:TransPermissionID</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TravelTime_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>WHSActualTime</ExtendedDataType>
			<Label>@WAX:CrossDockUnitHours</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TravelDistance_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>WHSDistance</ExtendedDataType>
			<HelpText>@GLS114953</HelpText>
			<Label>@GLS114952</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PickUpSpot_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>EInvoiceSiteID_MX</ExtendedDataType>
			<Label>@SYS300994</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DropOffSpot_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>EInvoiceSiteID_MX</ExtendedDataType>
			<Label>@WAX1416</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PickUpMode_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>EInvoiceExtCodeId_MX</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DropOffMode_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>EInvoiceExtCodeId_MX</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WeightUnit_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>EInvoiceExtCodeId_MX</ExtendedDataType>
			<HelpText>@MexicoCFDI:WeightUnitCode_description</HelpText>
			<Label>@MexicoCFDI:WeightUnitCode</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnvironmentalDamageInsuranceVendor_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnvironmentalDamageInsurancePolicyNum_MX</Name>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>AssetInsurancePolicyNum</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LoadedPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadedPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnloadedPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>UnloadedPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CarrierCodeCust</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType</Name>
					<Field>CarrierType</Field>
					<ValueStr>CarrierType_W::Customer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<Field>CarrierCode</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CarrierCodeVend</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType</Name>
					<Field>CarrierType</Field>
					<ValueStr>CarrierType_W::Vendor</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<Field>CarrierCode</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IssuedBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssuedBy</Name>
					<Field>IssuedBy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LoadedPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LoadedPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadedPostalAddress</Name>
					<Field>LoadedPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnloadedPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnloadedPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnloadedPostalAddress</Name>
					<Field>UnloadedPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPermissionType_MX</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPermissionType_MX</Name>
					<Field>SATPermissionType_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<ValueStr>EInvoiceExtCodeType_MX::PermissionType</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATPermissionID_MX</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransPermission_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPermissionType_MX</Name>
					<Field>SATPermissionType_MX</Field>
					<RelatedField>PermissionType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SATPermissionID_MX</Name>
					<Field>SATPermissionID_MX</Field>
					<RelatedField>PermissionID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PickUpSpot_MX</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EInvoiceSpotIdTable_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PickUpSpot_MX</Name>
					<Field>PickUpSpot_MX</Field>
					<RelatedField>SpotId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DropOffSpot_MX</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EInvoiceSpotIdTable_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DropOffSpot_MX</Name>
					<Field>DropOffSpot_MX</Field>
					<RelatedField>SpotId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SATWeightUnit_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EInvoiceExtCodeTable_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WeightUnit_MX</Name>
					<Field>WeightUnit_MX</Field>
					<RelatedField>CodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CodeType</Name>
					<RelatedField>CodeType</RelatedField>
					<ValueStr>EInvoiceExtCodeType_MX::WeightUnit</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>