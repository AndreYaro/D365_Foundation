<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatProcurementCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatProcurementCache extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        // show the message until user explicitly checks DoNotShow
        this.AskBeforeLaunchingExternalCatalogSite = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLogonUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CatProcurementCache</c> record for the current user.
    /// </summary>
    /// <param  name='_forUpdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatProcurementCache</c> data type.
    /// </returns>
    public static CatProcurementCache findByLogonUserId(boolean _forUpdate = false)
    {
        CatProcurementCache tblProcurementCache;
        tblProcurementCache.selectForUpdate(_forUpdate);
        select firstonly * from tblProcurementCache where tblProcurementCache.LogonUserId == curuserid();
        return tblProcurementCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CatProcurementCache</c> record for the current user.
    /// </summary>
    /// <returns>
    ///    A record in the <c>CatProcurementCache</c> table.
    /// </returns>
    public static CatProcurementCache getCache()
    {
        CatProcurementCache tblProcurementCache = CatProcurementCache::findByLogonUserId();
        return tblProcurementCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultRequisitionerData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default employer and department data for the specified user in the given data area.
    /// </summary>
    /// <param name="_userId">
    /// The user for which to get the default data.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area in which to get the default data.
    /// </param>
    /// <returns>
    /// A container of requester, employer, department data.
    /// </returns>
    private static container getDefaultRequisitionerData(
        userId     _userId     = curuserid(),
        dataAreaId _dataAreaId = curExt()
    )
    {
        container errorCode_worker_reds = CatProcurementCache::getRequisitionerEmployerDepartments(false, _userId);
        CatProcurementErrorCode errorCode;
        recId     workerRecId;
        container reds;
        container currentRED, defaultRED, reMatchingRED, rMatchingRED;
        // r=Requisitioner
        // e=Employer
        // d=Department (ie, OperatingUnit)
        recId     r,e,d;
        int       i;
        DirPartyName   rName, dName;
        dataAreaId     eDataArea;

        [errorCode, workerRecId, reds] = errorCode_worker_reds;

        // find the first whose r+e both match;
        // if not found,
        //   find the first whose r matches;
        //   if not found,
        //     return nothing (otherwise could be a security breach)
        for (i = 1; i<=conLen(reds); i++)
        {
            currentRED = conPeek(reds, i);
            [r,e,d,rName,eDataArea,dName] = currentRED;
            if (workerRecId == r)
            {
                if (_dataAreaId == eDataArea)
                {
                    reMatchingRED = currentRED;
                    break;
                }
                else
                {
                    rMatchingRED = currentRED;
                }
            }
        }

        defaultRED = (reMatchingRED ?
            reMatchingRED :
            (rMatchingRED ? rMatchingRED : defaultRED)
        );
        return defaultRED;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLandingDisplayCategoryForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the EP landing display category for the given user in the given data area.
    /// </summary>
    /// <param name="_userId">
    /// The user for which to get the default data.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area in which to get the default data.
    /// </param>
    /// <returns>
    /// The record-ID of the EP landing display category of the catalog in which the given user can shop.
    /// </returns>
    public static RecId getLandingDisplayCategoryForUser(
        userId     _userId     = curuserid(),
        dataAreaId _dataAreaId = curExt()
    )
    {
        #CatConstants

        container   landingPageData = CatProcurementCache::getLandingPageDataForUser(_userId, _dataAreaId);
        RecId       displayCategoryRecId;
        if (landingPageData)
        {
            displayCategoryRecId = conPeek(landingPageData, #LandingPageData_DisplayCategoryRecId);
        }
        return displayCategoryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLandingPageData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the root display category node for the catalog for the given data, then return its record ID and template page name.
    /// </summary>
    /// <param  name='_requisitionerRecId'>
    /// The requisitioner record ID.
    /// </param>
    /// <param  name='_employerRecId'>
    /// The employer record ID.
    /// </param>
    /// <param  name='_departmentRecId'>
    /// The department record ID.
    /// </param>
    /// <returns>
    /// A container of size 3:
    ///   #1 is error code, #2 is display category record ID, #3 is name of web menu url.
    /// </returns>
    /// <remarks>
    /// _catalogRecId2Preview will be used if and only if
    /// -- it is not 0,
    /// -- a catalog with matching RecId is found
    /// -- the current user is the owner of the catalog
    /// Otherwise, _requisitionerRecId, _employerRecId, and _departmentRecId data will be used to find the right catalog.
    /// </remarks>
    public static container getLandingPageData(RecId _requisitionerRecId, RecId _employerRecId, RecId _departmentRecId)
    {
        CatProcurementErrorCode errorCode = CatProcurementErrorCode::NoError;
        CatProcureCatalogTable          catalog;
        CatDisplayCategoryTable         displayCategory;
        CatProcurementCache             cache;
        boolean                         previewCatalog;
        int64                           long0 = 0;

        DirPersonUser   dirPersonUser;
        DirPartyTable   p;
        RefRecID        resultCatalogRecId;

        // preview takes precedence
        // make sure the preview catalog exists and current user is its owner
        resultCatalogRecId = 0;

        cache = CatProcurementCache::getCache();
        previewCatalog = (cache.RecId && cache.PreviewCatalogRecId);
        if (previewCatalog)
        {
            // for preview, we don't care whether or not the catalog is Active, Published, and effective
            select firstonly RecId, Owner from catalog
                where catalog.RecId == cache.PreviewCatalogRecId
                // ensure curuserid is catalog Owner
                join RecId from p
                    where p.RecId == catalog.Owner
                join RecId from dirPersonUser
                    where dirPersonUser.PersonParty == p.RecId
                        && dirPersonUser.User == curuserid()
                join * from displayCategory // getWebMenuItemUrlName() call requires other fields on this table
                    where displayCategory.Catalog == catalog.RecId
                        && displayCategory.ParentCategory == 0 // root node only
            ;
            if (catalog.RecId)
            {
                resultCatalogRecId = catalog.RecId;
            }
            else
            {
                previewCatalog = false;
            }
        }

        // if not in preview mode, or preview conditions not met, default back to given user context
        if (!resultCatalogRecId)
        {
            resultCatalogRecId = CatCatalogPolicyRule::findCatalogByPolicy(_employerRecId, _departmentRecId);
        }

        if (!resultCatalogRecId)
        {
            errorCode = CatProcurementErrorCode::CatalogPolicyError;
        }
        else
        {
            select firstonly * from displayCategory // getWebMenuItemUrlName() call requires other fields on this table
                    where displayCategory.Catalog == resultCatalogRecId
                        && displayCategory.ParentCategory == 0  // root node only
                        && displayCategory.IsHidden == NoYes::No// non-hidden nodes only
            ;

            if ( ! previewCatalog)
            {
                if (!displayCategory)
                {
                    errorCode = CatProcurementErrorCode::RootCategoryError;
                }
                else
                {
                    // make sure the catalog is
                    // - published
                    // - effective
                    select firstonly RecId from catalog
                        where catalog.RecId == resultCatalogRecId
                            && catalog.PublishingStatus == ProcureCatalogPublishingStatus::Active
                    ;
                    if ( ! catalog.RecId)
                    {
                        errorCode = CatProcurementErrorCode::CatalogStatusError;
                        // reset so "return ..." statement below gets null value
                        displayCategory.clear();
                    }
                }
            }
        }

        return (displayCategory ?
            [errorCode, displayCategory.RecId, displayCategory.getWebMenuItemUrlName()] :
            [errorCode, long0, '']
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLandingPageDataForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the EP landing page data for the given user in the given data area.
    /// </summary>
    /// <param name="_userId">
    /// The user for which to retrieve the default data.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area in which to get the default data.
    /// </param>
    /// <returns>
    /// A container that contains the EP landing page data of the catalog in which the given user can shop.
    /// </returns>
    /// <remarks>
    /// The returned container contains the error code, the display category record ID, and the name of the
    /// Web menu URL.
    /// </remarks>
    private static container getLandingPageDataForUser(
        userId     _userId     = curuserid(),
        dataAreaId _dataAreaId = curExt()
    )
    {
        #CatConstants

        // r=Requisitioner
        // e=Employer
        // d=Department (ie, OperatingUnit)
        container   defaultRED = CatProcurementCache::getDefaultRequisitionerData(_userId, _dataAreaId);
        container   landingPageData;

        if (defaultRED)
        {
            landingPageData = CatProcurementCache::getLandingPageData(
                conPeek(defaultRED, #RequisitionerEmployerDepartmentData_RequisitionerRecId),
                conPeek(defaultRED, #RequisitionerEmployerDepartmentData_EmployerRecId),
                conPeek(defaultRED, #RequisitionerEmployerDepartmentData_DepartmentRecId)
            );
        }
        return landingPageData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getREDsForPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all possible combinations of requisitioner, employer, department for catalog preview purpose.
    /// </summary>
    /// <param  name='_userId'>
    /// The user Id, whose corresponding originator to get requisitioner data for.
    /// </param>
    /// <returns>
    /// An instance of the <c>Container</c> data type.
    /// </returns>
    /// <remarks>
    ///   The return value explained:
    ///     The first  element is the <c>CatProcurementErrorCode</c> indicating
    ///       what error has caused the resulting data to be not as expected.
    ///     The second element is the <c>HcmWorker</c> record-ID for the given user.
    ///     The third  element is also a container:
    ///       element 1 is the requisitioner's <c>HcmWorker</c> record-ID,
    ///       element 2 is the requisitioner's <c>CompanyInfo</c> (employer) record-ID,
    ///       element 3 is the requisitioner's <c>OMOperatingUnit</c> (department) record-ID,
    ///       element 4 is the requisitioner's <c>DirPerson</c> (person) name,
    ///       element 5 is the requisitioner's <c>CompanyInfo</c> (employer) dataarea,
    ///       element 6 is the requisitioner's <c>OMOperatingUnit</c> (department) name.
    ///   Note: the return value has the first element so that caller (EP code) can get all needed data in one trip to server.
    /// </remarks>
    public static container getREDsForPreview(userId _userId = curuserid())
    {
        // RED:
        // r=Requisitioner
        // e=Employer
        // d=Department (ie, OperatingUnit)
        HcmWorkerRecId  workerRecId = HcmWorker::userId2Worker(_userId);
        HcmWorker       oWorker = HcmWorker::find(workerRecId);
        DirPerson       oPerson = DirPerson::find(oWorker.Person);
        CompanyInfo     leCompanyInfo;
        OMOperatingUnit ouOMOperatingUnit;
        CatProcurementErrorCode errorCode = CatProcurementErrorCode::NoError;

        container reds;

        if (oWorker.RecId)
        {
            // for Preview, we want to allow Previewing in any LE to see what Products etc. show up.
            // OU only plays a role in finding the right policy - but preview doesn't involve policy.
            // Hence we don't multiply by the OU dimension which could make the LE/OU dropdown list
            // extremely long and un-responsive.
            // Instead we use 0/null OU.
            while select RecId, DataArea from leCompanyInfo
            {
                reds = conins(reds, (1+conlen(reds)), [oWorker.RecId, leCompanyInfo.RecId, ouOMOperatingUnit.RecId, oPerson.Name, leCompanyInfo.DataArea, ouOMOperatingUnit.Name]);
            }
        }
        else
        {
            errorCode = CatProcurementErrorCode::OriginatorWorkerError;
        }

        return [errorCode, workerRecId, reds];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionerEmployerDepartments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all requisitioners data the originator corresponding to the given user Id can shop on behalf of.
    /// method to set cache!
    /// </summary>
    /// <param  name='_checkCacheForPreview'>
    /// Indicates if existing cache should be checked to see if the user is previewing a catalog.
    /// </param>
    /// <param  name='_userId'>
    /// The user Id, whose corresponding originator to get requisitioner data for.
    /// </param>
    /// <returns>
    ///   An instance of the <c>container</c> data type.
    /// </returns>
    /// <remarks>
    ///   The return value explained:
    ///     The first  element is the <c>CatProcurementErrorCode</c> indicating
    ///       what error has caused the resulting data to be not as expected.
    ///     The second element is the <c>HcmWorker</c> record-ID for the given user.
    ///     The third  element is also a container:
    ///       element 1 is the requisitioner's <c>HcmWorker</c> record-ID,
    ///       element 2 is the requisitioner's <c>CompanyInfo</c> (employer) record-ID,
    ///       element 3 is the requisitioner's <c>OMOperatingUnit</c> (department) record-ID,
    ///       element 4 is the requisitioner's <c>DirPerson</c> (person) name,
    ///       element 5 is the requisitioner's <c>CompanyInfo</c> (employer) dataarea,
    ///       element 6 is the requisitioner's <c>OMOperatingUnit</c> (department) name.
    ///   Note: the return value has the first element so that caller (EP code) can get all needed data in one trip to server.
    /// </remarks>
    public static container getRequisitionerEmployerDepartments(boolean _checkCacheForPreview, userId _userId = curuserid())
    {
        /// NOTE: this method must not use CatProcurementCache data since caller would use data returned by this
        /// method to set cache!
        CatProcurementErrorCode errorCode = CatProcurementErrorCode::NoError;
        // o for Originator
        RecId                   oWorkerRecId;
        HcmWorker               oWorker;
        DirPerson               xPerson;
        HcmEmployment           xEmployment;

        HcmWorker       rWorker;
        DirPerson       rPerson;
        CompanyInfo     leCompanyInfo;
        DirPartyTable   ouParty;
        OMOperatingUnit operatingUnit;
        CatProcurementCache     cache;

        container authorization;
        container reds;
        container leContainer;
        container ouContainer;
        // RED:
        // r=Requisitioner
        // e=Employer
        // d=Department (ie, OperatingUnit)
        RecId   rRecId;
        RecId   eRecId;
        RecId   dRecId;
        RecId   defaultOuRecId;
        int     i, jlE, koU;

        // sets xPerson.RecId and xEmployment.RecId for given worker
        void getPersonEmployementForWorker(HcmWorker _iWorker)
        {
            select firstOnly RecId from xPerson
                where xPerson.RecId == _iWorker.Person
                // don't use HcmWorker.workerStatus() - it doesn't care about EmploymentType
                outer join RecId from xEmployment
                    where xEmployment.Worker == _iWorker.RecId;
        }

        // if check, and cache exists, and PreviewCatalog exists, then call the API for Preview mode instead:
        if (_checkCacheForPreview)
        {
            cache = CatProcurementCache::getCache();
            if (cache.RecId && cache.PreviewCatalogRecId)
            {
                return CatProcurementCache::getREDsForPreview(_userId);
            }
        }

        oWorkerRecId = HcmWorker::userId2Worker(_userId);
        oWorker      = HcmWorker::find(oWorkerRecId);
        if (!oWorker)
        {
            errorCode = CatProcurementErrorCode::OriginatorWorkerError;
        }
        else
        {
            getPersonEmployementForWorker(oWorker);
            if (!xPerson)
            {
                errorCode = CatProcurementErrorCode::OriginatorPersonError;
            }
            else if (!xEmployment)
            {
                errorCode = CatProcurementErrorCode::OriginatorEmploymentStatusError;
            }
            else
            {
                /// PurchReqAuthorizationOrigination::getPurchReqAuthorizationOrigination returns
                /// container of containers which contains Requistioner, Le, Ou, defaulting
                /// eg, [
                ///         [Req1, [LE1,LE2],   [OU1,OU2], OU1],
                ///         [Req2, [LE2],       [OU2,OU3], OU2],
                ///         [<Requisitioner>,   <R-LEs>,    <R-OUs>,    <R-default-OU>]
                ///     ]
                authorization = PurchReqAuthorizationOrigination::getPurchReqAuthorizationOrigination(_userId);
                for (i=1; i<=conlen(authorization); i++)
                {
                    [rRecId, leContainer, ouContainer, defaultOuRecId] = conpeek(authorization, i);
                    rWorker = HcmWorker::find(rRecId);
                    getPersonEmployementForWorker(rWorker);
                    // must skip the Requisitioner's that's not Person or is not active Employee
                    if (xPerson && xEmployment)
                    {
                        rPerson = DirPerson::find(rWorker.Person);
                        for (jlE=1; jlE<=conlen(leContainer); jlE++)
                        {
                            eRecId = conpeek(leContainer, jlE);
                            leCompanyInfo = CompanyInfo::find(false, eRecId, false);
                            // the worker has no OU? that's OK for Procurement.
                            if (conlen(ouContainer) <= 0)
                            {
                                dRecId = 0;
                                reds = conins(reds, (1+conlen(reds)), [rRecId, eRecId, dRecId, rPerson.Name, leCompanyInfo.DataArea, '']);
                            }
                            else
                            {
                                for (koU=1; koU<=conlen(ouContainer); koU++)
                                {
                                    dRecId = conpeek(ouContainer, koU);
                                    ouParty = DirPartyTable::findRec(dRecId);
                                    operatingUnit = ouParty as OMOperatingUnit;
                                    reds = conins(reds, (1+conlen(reds)), [rRecId, eRecId, dRecId, rPerson.Name, leCompanyInfo.DataArea, operatingUnit.Name]);
                                }
                            }
                        }
                    }
                }
            }
        }

        return [errorCode, oWorkerRecId, reds];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CatProcurementCache</c> record for the current user if it does not yet exist.
    /// Sets its data with given information.
    /// </summary>
    /// <param  name='_requisitionerRecId'>
    /// The requisitioner record ID.
    /// </param>
    /// <param  name='_employerRecId'>
    /// The employer record ID.
    /// </param>
    /// <param  name='_departmentRecId'>
    /// The department record ID.
    /// </param>
    /// <param  name='_previewCatalogRecId'>
    /// The catalog record ID to preview.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatProcurementCache</c> data type.
    /// </returns>
    public static CatProcurementCache setCache(
            RecId   _requisitionerRecId,
            RecId   _employerRecId,
            RecId   _departmentRecId,
            RecId   _previewCatalogRecId = 0
        )
    {
        RecId               orgIdArray[2];
        PurchReqControlRule purchReqControlRule;
        CatProcurementCache procurementCache = CatProcurementCache::findByLogonUserId(true);
        HcmWorker           rHcmWorker       = HcmWorker::find(_requisitionerRecId);
        CompanyInfo         employer         = CompanyInfo::findRecId(_employerRecId);
        OMOperatingUnit     department       = OMOperatingUnit::find(_departmentRecId, OMOperatingUnitType::OMDepartment);

        if ( ! (_requisitionerRecId && _employerRecId && rHcmWorker && employer))
        {
            throw error(strFmt("@SYS329441", _requisitionerRecId, _employerRecId, rHcmWorker.RecId, employer.RecId));
        }

        //Call procurement policies to get the data for restriction of max and min qty
        orgIdArray[1] = employer.RecId;
        orgIdArray[2] = _departmentRecId;
        purchReqControlRule = PurchReqControlRule::findPurchReqControlRuleParameters(orgIdArray);

        ttsbegin;
            if (!procurementCache.RecId)
            {
                procurementCache.LogonUserId = curuserid();
            }

            procurementCache.RequisitionerRecId  = _requisitionerRecId;
            procurementCache.RequisitionerName   = rHcmWorker.name();
            procurementCache.EmployerRecId       = _employerRecId;
            procurementCache.EmployerDataAreaId  = employer.DataArea;
            procurementCache.DepartmentRecId     = _departmentRecId;
            procurementCache.DepartmentName      = department.Name;
            procurementCache.PreviewCatalogRecId = _previewCatalogRecId;
            if (purchReqControlRule)
            {
                procurementCache.IgnoreMaximumOrderQuantitySetup  = !purchReqControlRule.IsFixedMaximumOrderQuantity;
                procurementCache.IgnoreMinimumOrderQuantitySetup  = !purchReqControlRule.IsFixedMinimumOrderQuantity;
                procurementCache.IgnoreMultipleOrderQuantitySetup = !purchReqControlRule.IsFixedMultipleOrderQuantity;
            }
            else
            {
                procurementCache.IgnoreMaximumOrderQuantitySetup  = false;
                procurementCache.IgnoreMinimumOrderQuantitySetup  = false;
                procurementCache.IgnoreMultipleOrderQuantitySetup = false;
            }

            if (!procurementCache.RecId)
            {
                procurementCache.initValue();
                procurementCache.insert();
            }
            else
            {
                procurementCache.update();
            }
        ttscommit;

        return procurementCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAskBeforeLaunchingSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current users <c>AskBeforeLaunchingExternalCatalogSite</c> value to a <c>NoYes::No</c>
    /// enumeration value.
    /// </summary>
    public static void updateAskBeforeLaunchingSite()
    {
        CatProcurementCache catProcurementCache;

        ttsBegin;
        catProcurementCache = CatProcurementCache::findByLogonUserId(true);
        if (catProcurementCache)
        {
            catProcurementCache.AskBeforeLaunchingExternalCatalogSite = NoYes::No;
            catProcurementCache.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the existing <c>CatProcurementCache</c> record for the current user.
    /// Sets only data for which information is given.
    /// </summary>
    /// <param  name='_requisitionerRecId'>
    /// The requisitioner record ID.
    /// </param>
    /// <param  name='_employerRecId'>
    /// The employer record ID.
    /// </param>
    /// <param  name='_departmentRecId'>
    /// The department record ID.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatProcurementCache</c> data type.
    /// </returns>
    public static CatProcurementCache updateCache(
            RecId   _requisitionerRecId,
            RecId   _employerRecId,
            RecId   _departmentRecId
        )
    {
        return CatProcurementCache::setCache(
                    _requisitionerRecId,
                    _employerRecId,
                    _departmentRecId,
                    CatProcurementCache::findByLogonUserId().PreviewCatalogRecId
                );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS322971</DeveloperDocumentation>
	<Label>@SYS190956</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LogonUserId</TitleField1>
	<TitleField2>RequisitionerName</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>LogonUserIdIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogonUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionerRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmployerRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmployerDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepartmentRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepartmentName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviewCatalogRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreMultipleOrderQuantitySetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreMinimumOrderQuantitySetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreMaximumOrderQuantitySetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AskBeforeLaunchingExternalCatalogSite</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogonUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionerRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitionerName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmployerRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmployerDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepartmentRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepartmentName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviewCatalogRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreMultipleOrderQuantitySetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreMinimumOrderQuantitySetup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IgnoreMaximumOrderQuantitySetup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogonUserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AskBeforeLaunchingExternalCatalogSite</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS330490</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepartmentName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DepartmentRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmployerDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EmployerRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreMaximumOrderQuantitySetup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreMinimumOrderQuantitySetup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IgnoreMultipleOrderQuantitySetup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LogonUserId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PreviewCatalogRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequisitionerName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RequisitionerRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LogonUserIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LogonUserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatProcureCatalogTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>CatProcureCatalogTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CatProcureCatalogTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CatProcureCatalogTable_CatProcurementCache</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PreviewCatalogRecId</Name>
					<Field>PreviewCatalogRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_CatProcurementCache</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmployerRecId</Name>
					<Field>EmployerRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CatProcurementCache</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmployerDataAreaId</Name>
					<SourceEDT>DataAreaId</SourceEDT>
					<Field>EmployerDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_CatProcurementCache</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequisitionerRecId</Name>
					<Field>RequisitionerRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OMOperatingUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OMOperatingUnit_CatProcurementCache</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepartmentRecId</Name>
					<Field>DepartmentRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserInfo</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UserInfo</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatProcurementCache</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogonUserId</Name>
					<SourceEDT>UserId</SourceEDT>
					<Field>LogonUserId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>