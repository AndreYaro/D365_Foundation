<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateAgreementLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMVendRebateAgreementLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAmountBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>TAMVendRebateAgreementLine</c> table amount break fields are valid based on the range and
    /// the <c>TAMVendRebateAgreement</c> table minimum amount field.
    /// </summary>
    /// <returns>
    /// true if the amount break fields are valid; otherwise, false.
    /// </returns>
    public boolean checkAmountBreaks()
    {
        TAMVendRebateAgreement  tamVendRebateAgreemen;
        boolean ok = true;

        tamVendRebateAgreemen = this.tamVendRebateAgreement();

        if (this.FromValue < tamVendRebateAgreemen.RebateMinAmt)
        {
            ok = checkFailed("@MCR40109");
        }

        if (ok && this.ToValue && this.FromValue >= this.ToValue)
        {
            ok = checkFailed("@SYS134949");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>TAMVendRebateAgreementLine</c> table quantity fields are valid based on the range and
    /// the <c>TAMVendRebateAgreement</c> table minimum quantity field.
    /// </summary>
    /// <returns>
    /// true if the quantity fields are valid; otherwise, false.
    /// </returns>
    public boolean checkQuantities()
    {
        TAMVendRebateAgreement  tamVendRebateAgreement;
        FromQty                 fromQty;
        boolean                 ok = true;

        tamVendRebateAgreement = this.tamVendRebateAgreement();

        if (this.RebateUnit != tamVendRebateAgreement.RebateUnit)
        {
            EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(tamVendRebateAgreement.ItemRebateRelation,
																																	  this.InventDimId,
																																	  this.RebateUnit,
																																	  tamVendRebateAgreement.RebateUnit,
																																	  NoYes::Yes);
            if (ecoResProductUnitConverter.canValueBeConverted())
            {
                fromQty = ecoResProductUnitConverter.convertValue(this.FromValue);

                if (fromQty < tamVendRebateAgreement.RebateMinQty)
                {
                    ok = checkFailed("@PDS1404");
                }
            }
            else
            {
                ok = checkFailed(strFmt("@PDS1609",this.RebateUnit, this.tamVendRebateAgreement().RebateUnit));
            }
        }

        else
        {
            if (this.FromValue < tamVendRebateAgreement.RebateMinQty)
            {
                ok = checkFailed("@PDS1404");
            }
        }

        if (ok && this.ToValue && this.FromValue >= this.ToValue)
        {
            ok = checkFailed("@SYS134949");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateAmtRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate amount is valid for the agreement line based on the defined amount breaks.
    /// </summary>
    /// <param name="_rebateAmt">
    /// The amount on the purchase order line for which the rebate should be calculated.
    /// </param>
    /// <param name="_maxRebateLineBreak">
    /// A boolean value that defines whether to check the rebate requirements for the maximum rebate or not.
    /// </param>
    /// <returns>
    /// true if the rebate amount is valid for the agreement line; otherwise, false.
    /// </returns>
    public boolean checkRebateAmtRequirements(AmountCur     _rebateAmt,
                                              boolean       _maxRebateLineBreak = false)
    {
        real rebateAmt = abs(_rebateAmt);
        boolean ret;

        if (this.FromValue          <= rebateAmt
            && (this.toValue()      >  rebateAmt
            || (_maxRebateLineBreak
                && this.toValue()   == rebateAmt)))
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateQtyRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Rebate unit and purchase unit can be converted.
    /// </summary>
    /// <param name="_rebateQty">
    /// The quantity on which the rebate will be calculated.
    /// </param>
    /// <param name="_purchUnit">
    /// The purchase unit on the purchase order line.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> on the transaction.
    /// </param>
    /// <param name="_maxRebateLineBreak">
    /// A boolean value that defines whether to check the rebate requirements for the maximum rebate or not.
    /// </param>
    /// <returns>
    /// true if purchase unit and rebate unit can be converted; otherwise, false.
    /// </returns>
    [SysObsolete('This method is deprecated, use checkRebateQuantityRequirements instead', false, 31\03\2019)]
    public boolean checkRebateQtyRequirements(PurchQty  _rebateQty,
                                            PurchUnit   _purchUnit,
                                            ItemId      _itemId = '',
                                            boolean     _maxRebateLineBreak = false)
    {
        if (EcoResProduct::find(InventTable::find(_itemId).Product).isProductMasterWithProductVariantConversionEnabled())
        {
            throw error("@SCM:DeprecatedMethodErrorForVariantConversions");
        }

        RebateQuantityRequirementContract contract = RebateQuantityRequirementContract::constructWithVariables(_rebateQty,
                                                                                                               _purchUnit,
                                                                                                               _itemId,
                                                                                                               '',
                                                                                                               _maxRebateLineBreak);
        
        return this.checkRebateQuantityRequirements(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateQuantityRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate unit and purchase unit can be converted.
    /// </summary>
    /// <param name="_contract">
    /// Class that contains rebate quantity requirement parameters
    /// </param>
    /// <returns>
    /// true if purchase unit and rebate unit can be converted; otherwise, false.
    /// </returns>
    public boolean checkRebateQuantityRequirements(RebateQuantityRequirementContract _contract)
    {
        real    rebateQty = abs(_contract.rebateQty);
        boolean ret       = true;

        if (rebateQty)
        {
            rebateQty = this.convertQtyToUnit(rebateQty, _contract.unit, _contract.itemId, _contract.inventDimId);

            if (!rebateQty)
            {
                ret = false;
            }
        }

        if (ret
        && (this.FromValue      >  rebateQty)
          || this.toValue()     <  rebateQty
          || (!_contract.maxRebateLineBreak
            && this.toValue()   == rebateQty))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>TAMVendRebateAgreementLine</c> table unit field is valid based on other
    /// related records and on the <c>TAMVendRebateAgreement</c> table rebate unit conversion field.
    /// </summary>
    /// <returns>
    /// true if the rebate unit field is valid; otherwise, false.
    /// </returns>
    public boolean checkRebateUnit()
    {
        TAMVendRebateAgreementLine  line;
        boolean                     ok = true;

        if (this.tamVendRebateAgreement().RebateUOMOption == TAMRebateUOMOption::Convert)
        {
            select firstonly RebateAgreementRefRecId, RebateUnit, RecId
                from line
                where line.RebateAgreementRefRecId  == this.RebateAgreementRefRecId
                    && line.RebateUnit              != this.RebateUnit
                    && line.RecId                   != this.RecId;

            if (line.RecId)
            {
                ok = checkFailed(strFmt("@PDS1923", line.RebateUnit));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedRebateTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate agreement is assigned to any transaction and invalidates the rebate agreement.
    /// </summary>
    public void checkRelatedRebateTransExist()
    {
        TAMVendRebateAgreement agreement = this.tamVendRebateAgreement();

        if (agreement.checkRelatedRebateTransExist())
        {
            throw error("@PDS1407");
        }
        if (agreement.Validated)
        {
            agreement.selectForUpdate(true);
            agreement.invalidateRebateAgreement(true);
            info("@PDS1408");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RefRecId                rebateAgreementRecId = this.RebateAgreementRefRecId;
        TAMVendRebateAgreement  rebateAgreement;

        ttsbegin;

        super();

        rebateAgreement = TAMVendRebateAgreement::find(rebateAgreementRecId, true);
        // the following already calls update()
        if (rebateAgreement.Validated)
        {
            rebateAgreement.invalidateRebateAgreement(true);
            info("@PDS2014");
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBreakType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the line break type that has been selected for the vendor rebate agreement.
    /// </summary>
    /// <returns>
    /// The line break type that has been selected for the vendor rebate agreement.
    /// </returns>
    public display TAMRebateBreakType displayBreakType()
    {
        if (this.tamVendRebateAgreement().RebateLineBreakType == TAMRebateLineBreakType::Amount)
        {
            return "@SYS62867";
        }
        else
        {
            return "@SYS102891";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTAMVendRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current agreement line record from an <c>TAMVendRebateAgreement</c> table record.
    /// </summary>
    /// <param name="_tamVendRebateAgreement">
    /// The <c>TAMVendRebateAgreement</c> table record.
    /// </param>
    public void initFromTAMVendRebateAgreement(TAMVendRebateAgreement _tamVendRebateAgreement)
    {
        this.RebateAgreementRefRecId  = _tamVendRebateAgreement.RecId;
        this.Currency                 = _tamVendRebateAgreement.RebateCurrency;
        this.RebateUnit               = _tamVendRebateAgreement.RebateUnit;

        if (_tamVendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity)
        {
            this.RebateAmtType            = TAMRebateAmtType::AmountPerUnit;
        }
        else
        {
            this.RebateAmtType            = TAMRebateAmtType::Percentage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the InventDimId fields and inserts into the <c>TAMVendRebateAgreementLine</c> table.
    /// </summary>
    public void insert()
    {
        this.checkRelatedRebateTransExist();

        if (!this.InventdimId)
        {
            this.InventdimId    = InventDim::inventDimIdBlank();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>InventDim</c> record to current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> record.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventdimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Rebate agreement validation.
    /// </summary>
    /// <returns>
    /// true if the rebate agreement is validated, otherwise false.
    /// </returns>
    public display TAMRebateValidated isValidated()
    {
        return this.tamVendRebateAgreement().isValidated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValueOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is a value overlap in the agreement line grouping.
    /// </summary>
    /// <param name="_tamVendRebateAgreementLine">
    /// The <c>TAMVendRebateAgreementLine</c> record to compare against this rebate agreement line.
    /// </param>
    /// <returns>
    /// true if there is value overlap; otherwise, false.
    /// </returns>
    public boolean isValueOverlap(TAMVendRebateAgreementLine _tamVendRebateAgreementLine)
    {
        return (this.FromValue < _tamVendRebateAgreementLine.toValue() && this.toValue() > _tamVendRebateAgreementLine.FromValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tamVendRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>TAMVendRebateAgreement</c> record to current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The related <c>TAMVendRebateAgreement</c> record.
    /// </returns>
    public TAMVendRebateAgreement tamVendRebateAgreement(boolean _forUpdate = false)
    {
        return TAMVendRebateAgreement::find(this.RebateAgreementRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate to value.
    /// </summary>
    /// <returns>
    /// The maximum real value for the negative rebate To values.
    /// </returns>
    public TAMToValue toValue()
    {
        if (this.ToValue == 0)
        {
            return realMax();
        }
        else
        {
            return this.ToValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TAMVendRebateAgreementLine</c> record.
    /// </summary>
    public void update()
    {
        ttsbegin;
        
        this.checkRelatedRebateTransExist();
        
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>TAMVendRebateAgreementLine</c> record.
    /// </summary>
    /// <param name="_fieldNameToCheck">
    /// The field name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldNameToCheck, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldNameToCheck, _arrayIndex);

        switch (_fieldNameToCheck)
        {
            case fieldStr(TAMVendRebateAgreementLine, FromValue):
                if (this.FromValue < 0)
                {
                    ret = checkFailed("@SYS134947");
                }
                break;

            case fieldStr(TAMVendRebateAgreementLine, ToValue):
                if (this.ToValue < 0)
                {
                    ret = checkFailed("@SYS134947");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>TAMVendRebateAgreementLine</c> record can be written.
    /// </summary>
    /// <returns>
    /// Returns true if the record can be written; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        TAMVendRebateAgreement  tamVendRebateAgreement;
        boolean                 ret;

        tamVendRebateAgreement = TAMVendRebateAgreement::find(this.RebateAgreementRefRecId);

        if (!this.LineNum)
        {
            this.LineNum = TAMVendRebateAgreementLine::lastLineNum(this.RebateAgreementRefRecId) + 1.0;
        }

        ret = super();

        if (ret
            && this.RebateAmtType == TAMRebateAmtType::Percentage
            && (this.RebateValue < 0 || this.RebateValue > 100))
        {
            ret = checkFailed("@PRO1313");
        }

        if (tamVendRebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity)
        {
            ret = this.checkQuantities() && ret;
        }
        else
        {
            ret = this.checkAmountBreaks() && ret;
        }

        ret = this.checkRebateUnit() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns a record in the <c>TAMVendRebateAgreementLine</c> table by using a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID value of the record to find.
    /// </param>
    /// <param name="_update">
    /// A <c>Boolean</c> value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The record in the <c>TAMVendRebateAgreementLine</c> table with the specified <c>RecId</c>.
    /// </returns>
    public static TAMVendRebateAgreementLine find(RecId     _recId,
                                                boolean     _update = false)
    {
        TAMVendRebateAgreementLine tamVendRebateAgreementLine;

        if (_update)
        {
            tamVendRebateAgreementLine.selectForUpdate(_update);
        }

        select firstonly tamVendRebateAgreementLine
            where tamVendRebateAgreementLine.RecId == _recId;

        return tamVendRebateAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the highest line number that exist for the rebate agreement lines.
    /// </summary>
    /// <param name="_tamVendRebateAgreementRefRecId">
    /// The <c>RecId</c> of the rebate agreement for which highest line number is finding.
    /// </param>
    /// <returns>
    /// Returns the highest line number for the rebate agreement.
    /// </returns>
    public static LineNum lastLineNum(TAMVendRebateAgreementRefRecId _tamVendRebateAgreementRefRecId)
    {
        if (_tamVendRebateAgreementRefRecId != 0)
        {
            return (select maxof(LineNum) from tamVendRebateAgreementLine
                    where tamVendRebateAgreementLine.RebateAgreementRefRecId == _tamVendRebateAgreementRefRecId).LineNum;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRebateAgreementLineMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the rebate agreement line for creating a rebate based on sales invoice record.
    /// </summary>
    /// <param name="_rebateAgreement">
    /// A <c>TAMVendRebateAgreement</c> record.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// A <c>VendInvoicetrans</c> record.
    /// </param>
    /// <param name="_purchUnit">
    /// The purchase unit.
    /// </param>
    /// <param name="_currency">
    /// The currency.
    /// </param>
    /// <returns>
    /// The <c>TAMVendRebateAgreementLine</c> record to create a rebate for.
    /// </returns>
    static protected TAMVendRebateAgreementLine findRebateAgreementLineMax(        
        TAMVendRebateAgreement      _rebateAgreement,
        VendInvoiceTrans            _vendInvoiceTrans,
        PurchUnit                   _purchUnit,
        CurrencyCode                _currency)
    {
        InventDim                   inventDim;
        InventDim                   purchInventDim = _vendInvoiceTrans.inventDim();
        TAMVendRebateItem           tamVendRebateItem;
        TAMVendRebateAgreementLine  tamVendRebateAgreementLine;

        switch (_rebateAgreement.ItemRebateCode)
        {
            case TAMVendRebateItemCode::Selection:
                if (_rebateAgreement.RebateUOMOption == TAMRebateUOMOption::ExactMatch)
                {
                    select firstonly tamVendRebateAgreementLine order by FromValue desc
                    where tamVendRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                        && _rebateAgreement.RebateUnit                        == _purchUnit
                        && _rebateAgreement.RebateCurrency                    == _currency
                    join InventDimID from tamVendRebateItem
                        where tamVendRebateItem.VendRebateAgreementRefRecId == tamVendRebateAgreementLine.RebateAgreementRefRecId
                        && tamVendRebateItem.ItemID == _vendInvoiceTrans.ItemId
                    #TAMRebateInventDimExistsJoin(tamVendRebateItem.InventDimId, inventDim, purchInventDim);
                }
                else
                {
                    select firstonly tamVendRebateAgreementLine order by FromValue desc
                    where tamVendRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                        && _rebateAgreement.RebateCurrency                    == _currency
                    join InventDimID from tamVendRebateItem
                        where tamVendRebateItem.VendRebateAgreementRefRecId == tamVendRebateAgreementLine.RebateAgreementRefRecId
                        && tamVendRebateItem.ItemID == _vendInvoiceTrans.ItemId
                    #TAMRebateInventDimExistsJoin(tamVendRebateItem.InventDimId, inventDim, purchInventDim);
                }
                break;

            case TAMVendRebateItemCode::All:
            case TAMVendRebateItemCode::GroupId:
            case TAMVendRebateItemCode::Table:
                if (_rebateAgreement.RebateUOMOption == TAMRebateUOMOption::ExactMatch)
                {
                    select firstonly tamVendRebateAgreementLine order by FromValue desc
                        where tamVendRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                            && _rebateAgreement.RebateUnit                        == _purchUnit
                            && _rebateAgreement.RebateCurrency                    == _currency
                        #TAMRebateInventDimExistsJoin(_rebateAgreement.InventDimId, inventDim, purchInventDim);
                }
                else
                {
                    select firstonly tamVendRebateAgreementLine order by FromValue desc
                        where tamVendRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                            && _rebateAgreement.RebateCurrency                    == _currency
                        #TAMRebateInventDimExistsJoin(_rebateAgreement.InventDimId, inventDim, purchInventDim);
                }
        }

        return tamVendRebateAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRebateAgreementLineMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the rebate agreement line that has the maximum rebate line break to be is used
    /// for creating a rebate based on sales invoice record.
    /// </summary>
    /// <param name="_rebateAgreement">
    /// A <c>TAMVendRebateAgreement</c> record.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// A <c>VendInvoicetrans</c> record.
    /// </param>
    /// <param name="_rebateQty">
    /// The Rebate quantity.
    /// </param>
    /// <param name="_purchUnit">
    /// The purchase unit.
    /// </param>
    /// <param name="_currency">
    /// The currency.
    /// </param>
    /// <param name="_rebateAmt">
    /// The Rebate amount.
    /// </param>
    /// <returns>
    /// The <c>TAMVendRebateAgreementLine</c> record to create a rebate for.
    /// </returns>
    public static TAMVendRebateAgreementLine selectRebateAgreementLineMax(
        TAMVendRebateAgreement      _rebateAgreement,
        VendInvoiceTrans            _vendInvoiceTrans,
        PurchQty                    _rebateQty,
        PurchUnit                   _purchUnit,
        CurrencyCode                _currency,
        AmountCur                   _rebateAmt)
    {
        TAMVendRebateAgreementLine  tamVendRebateAgreementLine = TAMVendRebateAgreementLine::findRebateAgreementLineMax(_rebateAgreement, _vendInvoiceTrans, _purchUnit, _currency);
        
        if (tamVendRebateAgreementLine
        && ((_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity && tamVendRebateAgreementLine.toValue() <= abs(_rebateQty))
         || (_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount   && tamVendRebateAgreementLine.toValue() <= abs(_rebateAmt))))
        {
            return tamVendRebateAgreementLine;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQtyToUnit</Name>
				<Source><![CDATA[
    private real convertQtyToUnit(
        PurchQty    _rebateQty,
        PurchUnit   _purchUnit,
        ItemId      _itemId      = '',
        InventDimId _inventDimId = '')
    {
        UnitOfMeasureFromRecId unitOfMeasureFromRecId;
        UnitOfMeasureToRecId   unitOfMeasureToRecId;

        PurchQty               rebateQty = _rebateQty;
        boolean                ret = true;

        if (_purchUnit != this.RebateUnit)
        {
            EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId,
																																	  _inventDimId,
																																	  _purchUnit,
																																	  this.RebateUnit,
																																	  NoYes::Yes);
            if (!ecoResProductUnitConverter.canValueBeConverted())
            {
                rebateQty = 0;
            }
            else
            {
                rebateQty = ecoResProductUnitConverter.convertValue(_rebateQty);
            }
        }

        return rebateQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRebateAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Rebate agreement line that is used for creating a rebate based on purchase invoice record.
    /// </summary>
    /// <param name="_rebateAgreement">
    /// A <c>TAMVendRebateAgreement</c> record.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// A <c>VendInvoiceTrans</c> record.
    /// </param>
    /// <param name="_rebateQty">
    /// The Rebate quantity.
    /// </param>
    /// <param name="_rebateAmt">
    /// The Rebate amount.
    /// </param>
    /// <returns>
    /// The <c>tamVendRebateAgreementLine</c> record to create a rebate for.
    /// </returns>
    public static TAMVendRebateAgreementLine findRebateAgreementLine(
        TAMVendRebateAgreement      _rebateAgreement,
        VendInvoiceTrans            _vendInvoiceTrans,
        PurchQty                    _rebateQty,     // In the UOM of the Agreement, so no need to convert
        AmountCur                   _rebateAmt = 0  // In Currency of the Agreement, so no need to convert
    )
    {
        TAMVendRebateAgreementLine  tamVendRebateAgreementLine;
        Qty                         rebateQty = abs(_rebateQty);
        AmountCur                   rebateAmt = abs(_rebateAmt);

        if ((_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount) ||
            (_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity && rebateQty))
        {
            switch (_rebateAgreement.ItemRebateCode)
            {
                case TAMVendRebateItemCode::Selection:
                    InventDim purchInventDim = _vendInvoiceTrans.inventDim();
                    InventDim inventDim;
                    TAMVendRebateItem tamVendRebateItem;

                    // Account for the custom item code and ensure that we check the item list.
                    select firstonly tamVendRebateAgreementLine order by RebateValue desc
                        where tamVendRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                            && ((_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity
                                && tamVendRebateAgreementLine.FromValue           <= rebateQty
                                && (tamVendRebateAgreementLine.ToValue            >  rebateQty
                                || !tamVendRebateAgreementLine.ToValue))
                            || (_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount
                                && tamVendRebateAgreementLine.FromValue        <= rebateAmt
                                && (tamVendRebateAgreementLine.ToValue         >  rebateAmt
                                || !tamVendRebateAgreementLine.ToValue)))
                        join InventDimID from tamVendRebateItem
                            where tamVendRebateItem.VendRebateAgreementRefRecId == tamVendRebateAgreementLine.RebateAgreementRefRecId
                            && tamVendRebateItem.ItemID == _vendInvoiceTrans.ItemId
                        #TAMRebateInventDimExistsJoin(tamVendRebateItem.InventDimId, inventDim, purchInventDim);
                    break;

                case TAMVendRebateItemCode::All:
                case TAMVendRebateItemCode::GroupId:
                case TAMVendRebateItemCode::Table:
                    select firstonly tamVendRebateAgreementLine order by RebateValue desc
                        where tamVendRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                            && ((_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Quantity
                                && tamVendRebateAgreementLine.FromValue           <= rebateQty
                                && (tamVendRebateAgreementLine.ToValue            >  rebateQty
                                || !tamVendRebateAgreementLine.ToValue))
                            || (_rebateAgreement.RebateLineBreakType == TAMRebateLineBreakType::Amount
                                && tamVendRebateAgreementLine.FromValue        <= rebateAmt
                                && (tamVendRebateAgreementLine.ToValue         >  rebateAmt
                                || !tamVendRebateAgreementLine.ToValue)));
                    break;
            }
            return tamVendRebateAgreementLine;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic based on the changed field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field being changed.
    /// </param>
    /// <param name="_arrayIndex">
    /// A integer denoting the index of the passed array.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMVendorRebate</ConfigurationKey>
	<DeveloperDocumentation>@MCR40074</DeveloperDocumentation>
	<FormRef>TAMVendRebateAgreements</FormRef>
	<Label>@PDS1422</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RebateAgreementRefRecId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateAgreementRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@PDS1400</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAmtType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Breaks</Name>
			<Label>@MCR40136</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@PDS1402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventdimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@PDS1401</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@PDS1403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FromValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMFromValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventdimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RebateAgreementRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TAMVendRebateAgreementRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateAmtType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMRebateAmtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ToValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMToValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TAMVendRebateAgreementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RebateAgreementRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnitOfMeasureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RebateUnit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventdimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventdimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RebateUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateUnit</Name>
					<Field>RebateUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMVendRebateAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TAMVendRebateAgreement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateAgreementRefRecId</Name>
					<Field>RebateAgreementRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>