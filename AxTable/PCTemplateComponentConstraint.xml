<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTemplateComponentConstraint</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCTemplateComponentConstraint extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <param name="_duplicatedTemplateComponent">
    /// A reference to a duplicated template component.
    /// </param>
    public void duplicate(RefRecId _duplicatedTemplateComponent)
    {
        PCTemplateComponentConstraint   duplicate;

        duplicate.data(this);

        duplicate.TemplateComponent = _duplicatedTemplateComponent;

        duplicate.ConditionExpressionConstraint = PCExpressionConstraint::find(this.ConditionExpressionConstraint).duplicate().RecId;

        duplicate.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the expression constraint that is associated with the current template component.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether the expression constraint should be set.
    /// </param>
    /// <param name="_constraint">
    ///    The current expression constraint that is to be associated with this template component; optional.
    /// </param>
    /// <returns>
    ///    The expression constraint that is associated with the current template component.
    /// </returns>
    /// <remarks>
    ///    This edit method is used in the <c>PCProductConfigurationModelDetails</c> form.
    /// </remarks>
    public edit PCConstraintExpression getSetConstraint(boolean _set, PCConstraintExpression _constraint)
    {
        PCExpressionConstraint expression = PCExpressionConstraint::find(this.ConditionExpressionConstraint);

        if (!expression)
        {
            ttsbegin;
            expression.insert();
            ttscommit;
            this.ConditionExpressionConstraint = expression.RecId;
        }

        if (_set)
        {
            ttsbegin;
            expression = PCExpressionConstraint::find(this.ConditionExpressionConstraint, true);
            expression.Expression = _constraint;
            expression.update();
            ttscommit;
        }

        return expression.Expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The XML writer to use to store the XML representation of this record.
    /// </param>
    public void toXML(PCXmlWriter _xmlWriter)
    {
        #PC
        PCExpressionConstraint constraint = PCExpressionConstraint::find(this.ConditionExpressionConstraint);

        if (constraint.Expression)
        {
            _xmlWriter.writeStartElement(#conditionElement);
            _xmlWriter.writeAttributeString(#constraintIdAttribute, int642str(this.ConditionExpressionConstraint));
            constraint.toXML(_xmlWriter);
            _xmlWriter.writeEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCTemplateComponentConstraint</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCTemplateComponentConstraint::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTemplateComponentConstraint</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTemplateComponentConstraint</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTemplateComponentConstraint find(RefRecId _recId, boolean _forupdate = false)
    {
        PCTemplateComponentConstraint record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTemplateComponent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTemplateComponentConstraint</c> table.
    /// </summary>
    /// <param name="_templateComponent">
    ///    The record ID of the record of the related template component.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTemplateComponentConstraint</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTemplateComponentConstraint findByTemplateComponent(RefRecId _templateComponent, boolean _forupdate = false)
    {
        PCTemplateComponentConstraint record;

        if (!_templateComponent)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.TemplateComponent == _templateComponent;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153098</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153097</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ConditionExpressionConstraint</TitleField1>
	<TitleField2>TemplateComponent</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>TemplateComponentIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCExpressionConstraint</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCExpressionConstraint</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConditionExpressionConstraint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConditionExpressionConstraint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TemplateComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ConditionExpressionConstraint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS40733</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TemplateComponent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS153088</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExpressionConstraintIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConditionExpressionConstraint</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TemplateComponentIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TemplateComponent</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ConditionExpressionConstraint</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCExpressionConstraint</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Condition</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LineTemplate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConditionExpressionConstraint</Name>
					<Field>ConditionExpressionConstraint</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TemplateComponent</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCTemplateComponent</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LineTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Condition</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TemplateComponent</Name>
					<Field>TemplateComponent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>