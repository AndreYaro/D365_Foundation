<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TotalFields_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TotalFields_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertTotalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c> TotalFields_IN </c> table.
    /// </summary>
    /// <param name="_directTaxInquiry">
    /// Boolean value, if true it is  for direct tax otherwise indirect.
    /// </param>
    /// <param name="_taxType">
    /// Tax type is used to find the record.
    /// </param>
    public void insertTotalFields(
        boolean     _directTaxInquiry = false,
        Taxes_IN    _taxType          = Taxes_IN::None)
    {
        container       fieldNames;
        int             counter=1;
        TotalFields_IN  totalFields;
        #TaxWithhold_IN

        if (_directTaxInquiry)
        {
            fieldNames = conIns(fieldNames, 1, fieldPName(TaxWithholdTrans_IN, AmountOriginMST));
            fieldNames = conIns(fieldNames, 2, fieldPName(TaxWithholdTrans_IN, TaxWithholdBaseAmountCur));
            fieldNames = conIns(fieldNames, 3, fieldPName(TaxWithholdTrans_IN, TaxWithholdAmountCur));
            fieldNames = conIns(fieldNames, 4, fieldPName(TaxWithholdTrans_IN, AdjustedBaseAmount));
            fieldNames = conIns(fieldNames, 5, fieldPName(TaxWithholdTrans_IN, AdjustedTaxWithholdAmount));
        }
        else
        {
            switch (_taxType)
            {
                case Taxes_IN::SalesTax :
                    fieldNames = conIns(fieldNames, 1, fieldPName(TaxTrans_IN, AbatementAmount));
                    fieldNames = conIns(fieldNames, 2, fieldPName(TaxTrans_IN, SourceBaseAmountCur));
                    fieldNames = conIns(fieldNames, 3, fieldPName(TaxTrans_IN, SourceBaseAmountCurRegulated));
                    fieldNames = conIns(fieldNames, 4, fieldPName(TaxTrans_IN, SourceRegulateAmountCur));
                    fieldNames = conIns(fieldNames, 5, fieldPName(TaxTrans_IN, InvoiceAmount));
                    fieldNames = conIns(fieldNames, 6, fieldPName(TaxTrans_IN, LoadOnInventoryAmount));
                    fieldNames = conIns(fieldNames, 7, fieldPName(TaxTrans_IN, MiscChargeAmount));
                    fieldNames = conIns(fieldNames, 8, fieldPName(TaxTrans_IN, SourceTaxAmountCur));
                    fieldNames = conIns(fieldNames, 9, fieldPName(TaxTrans_IN, TransactionAmount));
                    break;
                case Taxes_IN::VAT :
                    fieldNames = conIns(fieldNames, 1, fieldPName(TaxTrans_IN, AbatementAmount));
                    fieldNames = conIns(fieldNames, 2, fieldPName(TaxTrans_IN, SourceBaseAmountCurRegulated));
                    fieldNames = conIns(fieldNames, 3, fieldPName(TaxTrans_IN, SourceBaseAmountCur));
                    fieldNames = conIns(fieldNames, 4, fieldPName(TaxTrans_IN, SourceRegulateAmountCur));
                    fieldNames = conIns(fieldNames, 5, fieldPName(TaxTrans_IN, NonRecoverableAmt));
                    fieldNames = conIns(fieldNames, 7, fieldPName(TaxTrans_IN, RetentionAmount));
                    fieldNames = conIns(fieldNames, 8, fieldPName(TaxTrans_IN, SourceTaxAmountCur));
                    fieldNames = conIns(fieldNames, 9, fieldPName(TaxTrans_IN, LoadOnInventoryAmount));
                    fieldNames = conIns(fieldNames, 10, fieldPName(TaxTrans_IN, InvoiceAmount));
                    fieldNames = conIns(fieldNames, 11, fieldPName(TaxTrans_IN, MiscChargeAmount));
                    fieldNames = conIns(fieldNames, 12, fieldPName(TaxTrans_IN, TransactionAmount));
                    break;
                case Taxes_IN::Customs :
                    fieldNames = conIns(fieldNames, 1, fieldPName(TaxTrans_IN, AbatementAmount));
                    fieldNames = conIns(fieldNames, 2, fieldPName(TaxTrans_IN, AssessableValue));
                    fieldNames = conIns(fieldNames, 3, fieldPName(TaxTrans_IN, CustomsCIFAmount));
                    fieldNames = conIns(fieldNames, 4, fieldPName(TaxTrans_IN, SourceRegulateAmountCur));
                    fieldNames = conIns(fieldNames, 5, fieldPName(TaxTrans_IN, CustomsTaxRegulationAmountCur));
                    fieldNames = conIns(fieldNames, 6, fieldPName(TaxTrans_IN, CustomsFOBAmount));
                    fieldNames = conIns(fieldNames, 7, fieldPName(TaxTrans_IN, InvoiceAmount));
                    fieldNames = conIns(fieldNames, 8, fieldPName(TaxTrans_IN, LoadOnInventoryAmount));
                    fieldNames = conIns(fieldNames, 9, fieldPName(TaxTrans_IN, MiscChargeAmount));
                    fieldNames = conIns(fieldNames, 10, fieldPName(TaxTrans_IN, SourceTaxAmountCur));
                    fieldNames = conIns(fieldNames, 11, fieldPName(TaxTrans_IN, TransactionAmount));
                    fieldNames = conIns(fieldNames, 12, fieldPName(TaxTrans_IN, SourceBaseAmountCur));
                    fieldNames = conIns(fieldNames, 13, fieldPName(TaxTrans_IN, SourceBaseAmountCurRegulated));
                    break;
                case Taxes_IN::ExciseInquiry :
                    fieldNames = conIns(fieldNames, 1, fieldPName(TaxTrans_IN, AbatementAmount));
                    fieldNames = conIns(fieldNames, 2, fieldPName(TaxTrans_IN, AssessableValue));
                    fieldNames = conIns(fieldNames, 3, fieldPName(TaxTrans_IN, SourceBaseAmountCurRegulated));
                    fieldNames = conIns(fieldNames, 4, fieldPName(TaxTrans_IN, InvoiceAmount));
                    fieldNames = conIns(fieldNames, 5, fieldPName(TaxTrans_IN, LoadOnInventoryAmount));
                    fieldNames = conIns(fieldNames, 6, fieldPName(TaxTrans_IN, MiscChargeAmount));
                    fieldNames = conIns(fieldNames, 7, fieldPName(TaxTrans_IN, SourceTaxAmountCur));
                    fieldNames = conIns(fieldNames, 8, fieldPName(TaxTrans_IN, TransactionAmount));
                    fieldNames = conIns(fieldNames, 9, fieldPName(TaxTrans_IN, SourceBaseAmountCur));
                    fieldNames = conIns(fieldNames, 10, fieldPName(TaxTrans_IN,SourceRegulateAmountCur));
                    break;
                case Taxes_IN::ServiceTax :
                    fieldNames = conIns(fieldNames, 1, fieldPName(TaxTrans_IN, AbatementAmount));
                    fieldNames = conIns(fieldNames, 2, fieldPName(TaxTrans_IN, SourceBaseAmountCur));
                    fieldNames = conIns(fieldNames, 3, fieldPName(TaxTrans_IN, SourceBaseAmountCurRegulated));
                    fieldNames = conIns(fieldNames, 4, fieldPName(TaxTrans_IN, SourceRegulateAmountCur));
                    fieldNames = conIns(fieldNames, 5, fieldPName(TaxTrans_IN, InvoiceAmount));
                    fieldNames = conIns(fieldNames, 6, fieldPName(TaxTrans_IN, LoadOnInventoryAmount));
                    fieldNames = conIns(fieldNames, 7, fieldPName(TaxTrans_IN, MiscChargeAmount));
                    fieldNames = conIns(fieldNames, 8, fieldPName(TaxTrans_IN, SourceTaxAmountCur));
                    fieldNames = conIns(fieldNames, 9, fieldPName(TaxTrans_IN, TransactionAmount));
                    break;
                default :
                    fieldNames = conIns(fieldNames, 1, fieldPName(TaxTrans_IN, AbatementAmount));
                    fieldNames = conIns(fieldNames, 2, fieldPName(TaxTrans_IN, SourceBaseAmountCurRegulated));
                    fieldNames = conIns(fieldNames, 3, fieldPName(TaxTrans_IN, AssessableValue));
                    fieldNames = conIns(fieldNames, 4, fieldPName(TaxTrans_IN, CustomsCIFAmount));
                    fieldNames = conIns(fieldNames, 5, fieldPName(TaxTrans_IN, SourceRegulateAmountCur));
                    fieldNames = conIns(fieldNames, 6, fieldPName(TaxTrans_IN, CustomsFOBAmount));
                    fieldNames = conIns(fieldNames, 7, fieldPName(TaxTrans_IN, InvoiceAmount));
                    fieldNames = conIns(fieldNames, 8, fieldPName(TaxTrans_IN, CustomsLandingChargesAmount));
                    fieldNames = conIns(fieldNames, 9, fieldPName(TaxTrans_IN, LoadOnInventoryAmount));
                    fieldNames = conIns(fieldNames, 10, fieldPName(TaxTrans_IN, NonRecoverableAmt));
                    fieldNames = conIns(fieldNames, 12, fieldPName(TaxTrans_IN, MiscChargeAmount));
                    fieldNames = conIns(fieldNames, 13, fieldPName(TaxTrans_IN, RetentionAmount));
                    fieldNames = conIns(fieldNames, 14, fieldPName(TaxTrans_IN, SourceTaxAmountCur));
                    fieldNames = conIns(fieldNames, 15, fieldPName(TaxTrans_IN, TransactionAmount));
                    break;
            }
        }

        delete_from totalFields
            where totalFields.TaxType == _taxType;
        while (counter <= conLen(fieldNames))
        {
            ttsbegin;
            this.FieldDescription   = conPeek(fieldNames, counter);
            this.TaxType            = _taxType;
            this.insert();
            ttscommit;
            counter++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TotalFields_IN </c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id is used to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c> TotalFields_IN </c> table.
    /// </returns>
    public static TotalFields_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TotalFields_IN totalFields;

        totalFields.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            totalFields.concurrencyModel(_concurrencyModel);
        }

        select firstonly totalFields
            where totalFields.RecId == _recId;

        return totalFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// To find the total field name.
    /// </summary>
    /// <param name="_fieldName">
    /// Field name is used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Withholding tax is used to find the record.
    /// </param>
    /// <param name="_update">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// Returns <c>TotalFields_IN</c> table buffer.
    /// </returns>
    static TotalFields_IN findByFieldName(
        Description  _fieldName,
        Taxes_IN     _taxType,
        boolean      _update = false)
    {
        TotalFields_IN  totalFields;

        totalFields.selectForUpdate(_update);

        select firstonly totalFields
            where totalFields.FieldDescription == _fieldName &&
                  totalFields.TaxType          == _taxType;

        return totalFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form.
    /// </summary>
    /// <param name="_formControl">
    /// Handler of form control.
    /// </param>
    /// <param name="_formListControl">
    /// Handler of form list control.
    /// </param>
    /// <param name="_taxes">
    /// Withholding tax to filter the record based on tax type.
    /// </param>
    public static void lookupFieldName(
        FormControl          _formControl,
        FormListControl      _formListControl,
        Taxes_IN             _taxes)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(TotalFields_IN), _formControl, false);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Counter                 i=1;
        Counter                 j=1;
        container               fieldNames;
        FormListControl         formListControl;
        Counter                 idx;
        FieldId                 fieldIdOrig;

        formListControl = _formListControl;
        idx = formListControl.getNextItem(FormListNext::All);
        while (i <= formListControl.getCount())
        {
            fieldIdOrig = fieldName2id(tableNum(TaxTrans_IN), formListControl.getItem(idx).data());
            fieldNames += fieldId2pname(tableNum(TaxTrans_IN), fieldIdOrig);
            idx = formListControl.getNextItem(FormListNext::All, idx);
            i++;
        }
        queryBuildDataSource    = query.addDataSource(tableNum(TotalFields_IN));
        while (j<=conLen(fieldNames))
        {
            queryBuildRange         = queryBuildDataSource.addRange(fieldNum(TotalFields_IN, FieldDescription));
            queryBuildRange.value(queryValue(conPeek(fieldNames, j)));
            queryBuildRange         = queryBuildDataSource.addRange(fieldNum(TotalFields_IN, TaxType));

            switch (_taxes)
            {
                case Taxes_IN::ServiceTax       :
                    queryBuildRange.value(enum2str(Taxes_IN::ServiceTax));
                    break;
                case Taxes_IN::Customs          :
                    queryBuildRange.value(enum2str(Taxes_IN::Customs));
                    break;
                case Taxes_IN::SalesTax         :
                    queryBuildRange.value(enum2str(Taxes_IN::SalesTax));
                    break;
                case Taxes_IN::ExciseInquiry    :
                    queryBuildRange.value(enum2str(Taxes_IN::ExciseInquiry));
                    break;
                case Taxes_IN::VAT              :
                    queryBuildRange.value(enum2str(Taxes_IN::VAT));
                    break;
                default                         :
                    break;
            }
            j++;
        }
        sysTableLookup.addLookupfield(fieldNum(TotalFields_IN, FieldDescription), true);
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63807</DeveloperDocumentation>
	<Label>@SYS58659</Label>
	<TitleField1>FieldDescription</TitleField1>
	<TitleField2>TaxType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldDescription</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<EnumType>Taxes_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>