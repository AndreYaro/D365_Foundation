<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancesSettle</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjAdvancesSettle extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjAdvancesSettle find(RefRecId _transRecId, boolean _forUpdate = false)
    {
        ProjAdvancesSettle projAdvancesSettle;

        projAdvancesSettle.selectForUpdate(_forUpdate);

        if (_transRecId)
        {
            select firstonly projAdvancesSettle
                where projAdvancesSettle.TransRecId == _transRecId;
        }

        return projAdvancesSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToSettle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the record which has been created to settle the parent transaction of the provided on account transaction
    /// </summary>
    /// <param name = "_onAccTrans">The child on account transaction which is the child of a transaction to settle</param>
    /// <param name = "_forUpdate">Select the record for update</param>
    /// <returns>The found record</returns>
    public static ProjAdvancesSettle findToSettle(RefRecId _onAccTrans, boolean _forUpdate = false)
    {
        ProjAdvancesSettle projAdvancesSettle;
        ProjOnAccTrans parentTrans;
        ProjOnAccTrans currentTrans;

        if (!_onAccTrans)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        projAdvancesSettle.selectForUpdate(_forUpdate);

        select firstonly projAdvancesSettle
            exists join currentTrans
                where currentTrans.RecId == _onAccTrans
            exists join parentTrans
                where parentTrans.RecId == currentTrans.PSARefRecId
            && projAdvancesSettle.TransRecId == parentTrans.RecId;

        return projAdvancesSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a settlement record for the provided on-account transaction
    /// </summary>
    /// <param name = "_onAccTrans">The on-account transaction to settle as an advance invoice</param>
    /// <returns>The created record</returns>
    public static ProjAdvancesSettle createForOnAccTrans(RefRecId _onAccTrans)
    {
        ProjAdvancesSettle projAdvancesSettle;
        if (ProjAdvancesSettle::find(_onAccTrans))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        projAdvancesSettle.TransRecId = _onAccTrans;
        projAdvancesSettle.insert();

        return projAdvancesSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkWithProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the proj advances settle record for the given transaction by linking it to the ProjInvoiceJour
    /// </summary>
    /// <param name = "_onAccTrans">The on-account trasaction record being linked</param>
    /// <param name = "_projInvoiceJour">The invoice journal the settlement record is being linked to</param>
    public static void linkWithProjInvoiceJour(RefRecId _onAccTrans, RefRecId _projInvoiceJour)
    {
        if (!_onAccTrans)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ProjAdvancesSettle toSettle;

        update_recordset toSettle
                setting ProjInvoiceJour = _projInvoiceJour
                where toSettle.TransRecId == _onAccTrans
                    && !toSettle.ProjInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the total invoice amount associated with the provided transaction
    /// </summary>
    /// <param name = "_onAccTrans">The RecId of the on-account transaction</param>
    /// <returns>The total amount</returns>
    public static Amount getInvoiceAmount(RefRecId _onAccTrans)
    {
        Amount amount = 0;
        if (!_onAccTrans)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ProjInvoiceOnAcc invoiceOnAcc;
        ProjOnAccTrans onAccTrans;
        TaxTrans taxTrans;

        while select SourceBaseAmountCur, SourceTaxAmountCur from taxTrans
                where taxTrans.SourceTableId == tableNum(ProjInvoiceOnAcc)
                exists join invoiceOnAcc
                    where invoiceOnAcc.RecId == taxTrans.SourceRecId
                exists join onAccTrans
                    where onAccTrans.RecId == _onAccTrans
                        && invoiceOnAcc.TransId == onAccTrans.TransId
        {
            amount += (abs(taxTrans.SourceBaseAmountCur) + abs(taxTrans.SourceTaxAmountCur));
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountByVoucherAndData</Name>
				<Source><![CDATA[
    internal static Amount getInvoiceAmountByVoucherAndData(RefRecId _onAccTrans, Voucher _voucher, TransDate _transDate)
    {
        Amount amount = 0;

        ProjInvoiceOnAcc projInvoiceOnAcc;
        ProjOnAccTrans projOnAccTrans;
        TaxTrans taxTrans;

        // Only collect taxes if they belong to settled advances
        while select SourceBaseAmountCur, SourceTaxAmountCur from taxTrans
                where taxTrans.Voucher == _voucher
                    && taxTrans.TransDate == _transDate
                exists join projInvoiceOnAcc
                    where projInvoiceOnAcc.TableId == taxTrans.SourceTableId
                        && projInvoiceOnAcc.RecId == taxTrans.SourceRecId
                exists join projOnAccTrans
                    where projOnAccTrans.RecId == _onAccTrans
                        && projOnAccTrans.TransId == projInvoiceOnAcc.TransId
        {
            amount += (abs(taxTrans.SourceBaseAmountCur) + abs(taxTrans.SourceTaxAmountCur));
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAgainstProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settle the associated ProjOnAccTrans if a record exists that needs to be settled
    /// </summary>
    /// <param name = "_onAccTrans">The on-account transaction record being settled</param>
    /// <param name = "_projInvoiceJour">The project invoice journal being settled</param>
    /// <param name = "_vatDueDate_W">The due date to settle with, defaults to invoice ID if null</param>
    /// <returns>The settled invoice</returns>
    public static ProjAdvanceInvoiceSettlement_W settleAgainstProjInvoiceJour(
        RefRecId _onAccTrans,
        RefRecId _projInvoiceJour,
        VatDueDate_W _vatDueDate_W = dateNull())
    {
        ProjAdvanceInvoiceSettlement_W advanceInvoiceSettlement;
        ProjInvoiceJour projInvoiceJour;
        ttsbegin;

        if (!_onAccTrans || !_projInvoiceJour)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ProjAdvancesSettle toSettle = ProjAdvancesSettle::findToSettle(_onAccTrans, true);

        select RecId, InvoiceDate, InvoiceAmount from projInvoiceJour
                where projInvoiceJour.RecId == _projInvoiceJour;

        if (toSettle && projInvoiceJour)
        {
            advanceInvoiceSettlement.AdvanceInvoiceRecId = toSettle.TransRecId;
            advanceInvoiceSettlement.InvoiceJourRecId    = projInvoiceJour.RecId;
            advanceInvoiceSettlement.PaymentAmount       = ProjAdvancesSettle::getInvoiceAmount(toSettle.TransRecId);
            advanceInvoiceSettlement.insert();

            toSettle.ProjAdvanceInvoiceSettlement_W = advanceInvoiceSettlement.RecId;
            toSettle.SettlementProjInvoiceJour      = projInvoiceJour.RecId;
            toSettle.VatDueDate_W                   = _vatDueDate_W ? _vatDueDate_W : projInvoiceJour.InvoiceDate;
            toSettle.update();
        }

        ttscommit;

        return advanceInvoiceSettlement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@ApplicationSuite_Localization:ProjAdvancesSettleTable</DeveloperDocumentation>
	<Label>@ApplicationSuite_Localization:ProjAdvancesSettle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjInvoiceJour</TitleField1>
	<TitleField2>TransRecId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Project</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceJour</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjAdvanceInvoiceSettlement_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettlementProjInvoiceJour</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VatDueDate_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjInvoiceJour</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@ApplicationSuite_Localization:ProjInvoiceJourHelp</HelpText>
			<Label>@SYS10619</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransRecId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@ApplicationSuite_Localization:TransRecIdHelp</HelpText>
			<Label>@SYS7659</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjAdvanceInvoiceSettlement_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@ApplicationSuite_Localization:ProjAdvanceInvoiceSettlementHelp</HelpText>
			<Label>@GLS108354</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SettlementProjInvoiceJour</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@ApplicationSuite_Localization:SettlementProjInvoiceJourHelp</HelpText>
			<Label>@ApplicationSuite_Localization:SettlementProjInvoiceJour</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VatDueDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>VatDueDate_W</ExtendedDataType>
			<HelpText>@ApplicationSuite_Localization:VATDueDateAdvanceInvoiceHelp</HelpText>
			<Label>@SYS14021</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransRecIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjAdvInvSettlementIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjAdvanceInvoiceSettlement_W</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SettlementProjInvoiceJour</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceJour</Name>
			<RelatedTable>ProjInvoiceJour</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>ProjInvoiceJour</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SettlementProjInvoiceJour</Name>
					<Field>SettlementProjInvoiceJour</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjOnAccTrans</Name>
			<RelatedTable>ProjOnAccTrans</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransRecId</Name>
					<Field>TransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjAdvanceInvoiceSettlement_W</Name>
			<RelatedTable>ProjAdvanceInvoiceSettlement_W</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjAdvanceInvoiceSettlement_W</Name>
					<Field>ProjAdvanceInvoiceSettlement_W</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>