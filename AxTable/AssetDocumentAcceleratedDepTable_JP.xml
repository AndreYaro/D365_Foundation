<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentAcceleratedDepTable_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDocumentAcceleratedDepTable_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acceleratedDepGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset accelerated depreciation type
    /// </summary>
    /// <returns>
    /// Group Id <c>AssetAcceleratedDepGroupId_JP</c>
    /// </returns>
    public AssetAcceleratedDepGroupId_JP acceleratedDepGroup()
    {
        AssetAcceleratedDepGroupId_JP groupId;

        groupId = AssetAcceleratedDepGroup_JP::find(this.AssetAcceleratedDepGroup_JP).GroupId;

        return groupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        AssetDocumentTable_JP   docTable;

        ttsBegin;

        super();

        delete_from docTable where docTable.RecId == this.AssetDocumentTable_JP;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        AssetDocumentTable_JP   docTable;

        ttsBegin;

        docTable.MainType   = AssetDocumentMainType_JP::AssetAcceleratedDepreciation;
        docTable.Type       = AssetDocumentType_JP::AssetAcceleratedDepreciation;
        docTable.DocumentId = this.DocumentId;
        docTable.insert();

        this.AssetDocumentTable_JP = docTable.RecId;

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        AssetDocumentAcceleratedDepTable_JP docAccDepTable;
        boolean                             ret;

        ret = super();

        if (ret && this.validTo < this.ValidFrom)
        {
            ret = checkFailed("@SYP4880095");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDocumentAcceleratedDepTable_JP</c> table.
    /// </summary>
    /// <param name="_accDepGroup">
    /// The <c>AssetAcceleratedDepGroup_JP</c> recid.
    /// </param>
    /// <param name="_transDate">
    /// The date for which the <C>AssetDocumentAcceleratedDepTable_JP</C> is effective
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentAcceleratedDepTable_JP</c> table record.
    /// </returns>
    public static AssetDocumentAcceleratedDepTable_JP find(
        RefRecId                    _accDepGroup,
        AssetTransDate              _transDate,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDocumentAcceleratedDepTable_JP   docAccDepTable;

        if (_accDepGroup && _transDate)
        {
            docAccDepTable.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                docAccDepTable.concurrencyModel(_concurrencyModel);
            }

            select firstonly docAccDepTable
                where docAccDepTable.AssetAcceleratedDepGroup_JP == _accDepGroup
                    && docAccDepTable.ValidFrom <= _transDate
                    && docAccDepTable.ValidTo >= _transDate;
        }
        return docAccDepTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetDocumentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetDocumentAcceleratedDepTable_JP</c> table.
    /// </summary>
    /// <param name="_assetDocumentTableRecId">
    /// The <c>AssetDocumentTable_JP</c> recid.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentAcceleratedDepTable_JP</c> table record.
    /// </returns>
    public static AssetDocumentAcceleratedDepTable_JP findByAssetDocumentTable(
        RefRecId                    _assetDocumentTableRecId,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDocumentAcceleratedDepTable_JP   docAccDepTable;

        if (_assetDocumentTableRecId)
        {
            docAccDepTable.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                docAccDepTable.concurrencyModel(_concurrencyModel);
            }

            select firstonly docAccDepTable
                where docAccDepTable.AssetDocumentTable_JP == _assetDocumentTableRecId;
        }
        return docAccDepTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        AssetAcceleratedDepGroup_JP assetAcceleratedDepGroup;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(AssetDocumentAcceleratedDepTable_JP, AssetAcceleratedDepGroup_JP):
                this.initValueForAcceleratedDepGroup();
                break;

            case fieldStr(AssetDocumentAcceleratedDepTable_JP, ValidTo):
                this.ReportPrintDate = this.ValidTo;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        AssetParameters assetParameters = AssetParameters::find();
        AssetAcceleratedDepGroup_JP acceleratedDepGroup;

        super();

        this.CalculationMethod = assetParameters.AcceleratedDepCalcMethod_JP;
        this.RateFactor = assetParameters.AcceleratedDepRateFactor_JP;
        this.RateThreshold = assetParameters.AcceleratedDepRateThreshold_JP;
        this.initValueForAcceleratedDepGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetDocumentAcceleratedDepGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Look up <c>AssetAcceleratedDepGroup_JP</c> based on asset book type
    /// </summary>
    /// <param name="_formReferenceControl">
    /// FormReferenceControl to do look up.
    /// <returns>
    /// The <c>AssetAcceleratedDepGroup_JP</c> table record.
    /// </returns>
    public static AssetAcceleratedDepGroup_JP lookupAssetDocumentAcceleratedDepGroup(
        FormReferenceControl    _formReferenceControl)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(AssetAcceleratedDepGroup_JP), _formReferenceControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSourceDocument;

        queryBuildDataSourceDocument = query.addDataSource(tablenum(AssetAcceleratedDepGroup_JP));
        sysTableLookup.addLookupfield(fieldNum(AssetAcceleratedDepGroup_JP, GroupId));
        sysTableLookup.addLookupfield(fieldNum(AssetAcceleratedDepGroup_JP, Description));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueForAcceleratedDepGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initial value for <c>AssetAcceleratedDepGroup_JP</c>
    /// </summary>
    public void initValueForAcceleratedDepGroup()
    {
        AssetAcceleratedDepGroup_JP acceleratedDepGroup;
        AssetDocumentAcceleratedDepTable_JP accDepDocTable;
        int monthsOfLastDoc;

        if (this.AssetAcceleratedDepGroup_JP)
        {
            select firstonly AverageHours, AssetLocation, OperationDaysPerYear from acceleratedDepGroup
                where acceleratedDepGroup.RecId == this.AssetAcceleratedDepGroup_JP;

            this.AverageHours           = acceleratedDepGroup.AverageHours;
            this.AssetLocation          = acceleratedDepGroup.AssetLocation;
            this.OperationDaysPerYear   = acceleratedDepGroup.OperationDaysPerYear;
            accDepDocTable              = AssetAcceleratedDepGroup_JP::getLatestAccDepDocument(this.AssetAcceleratedDepGroup_JP);
            if (accDepDocTable)
            {
                this.ValidFrom              = accDepDocTable.ValidTo + 1;
                monthsOfLastDoc             = AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(accDepDocTable.ValidFrom, accDepDocTable.ValidTo);
                this.validTo                = endMth(dateMthFwd(this.validFrom, monthsOfLastDoc));
                this.ReportPrintDate        = this.ValidTo;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOveruseRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate overuse rate for accelerated depreciation document
    /// </summary>
    public void calcOveruseRate()
    {
        const str FeatureReference = 'JP-00024';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        AssetDocumentAcceleratedDepEntry_JP accDepDocEntry;
        #AssetDepCalculation_JP

        select sum(TotalOveruseHours) from accDepDocEntry
                where accDepDocEntry.AssetDocumentAcceleratedDepTable_JP == this.RecId;

        ttsbegin;

        this.TotalOveruseHours = accDepDocEntry.TotalOveruseHours;
        this.AverageOveruseHours = this.averageOveruseHours();
        this.OveruseRate = roundUp(this.AverageOveruseHours * this.RateFactor, #AcceleratedDepRatePrecision);
        this.selectForUpdate(true);
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageOveruseHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate average overuse hours
    /// </summary>
    /// <returns>
    /// Returns average overuse hours
    /// </returns>
    public AssetAcceleratedDepOveruseHoursPerDay_JP averageOveruseHours()
    {
        AssetAcceleratedDepOveruseHoursPerDay_JP actualOveruseHours;

        switch (this.CalculationMethod)
        {
            case AssetAcceleratedDepCalcMethod_JP::FirstCalculationMethod:
                actualOveruseHours = this.averageOverUseHoursForFirstMethod();
                break;
            case AssetAcceleratedDepCalcMethod_JP::SecondCalculationMethod:
                actualOveruseHours = this.averageOveruseHoursForSecondMethod();
                break;
        }

        return actualOveruseHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageOverUseHoursForFirstMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate average overuse hours for first calculation method
    /// </summary>
    /// <returns>
    /// Returns average overuse hours for first calculation method
    /// </returns>
    public AssetAcceleratedDepOveruseHoursPerDay_JP averageOverUseHoursForFirstMethod()
    {
        #AssetDepCalculation_JP
        real                                        ret;
        AssetDocumentAcceleratedDepEntry_JP         docAccDepEntry;
        AssetDocumentEntry_JP                       docEntry;
        AssetAcceleratedDepOveruseHoursPerDay_JP    averageOveruseHours;
        AssetAcquisitionPrice                       totalAcquistionPrice;
        AssetBook                                   assetBook;

        while select TotalOveruseHours from docAccDepEntry
                    where docAccDepEntry.AssetDocumentAcceleratedDepTable_JP == this.RecId
                    join RecId from docEntry
                        where docEntry.RecId == docAccDepEntry.AssetDocumentEntry_JP
                    join AcquisitionPrice from assetBook
                        where assetBook.AssetId == docEntry.AssetId
                        && assetBook.BookId == docEntry.BookId
        {
            totalAcquistionPrice += assetBook.AcquisitionPrice;
            averageOveruseHours  += docAccDepEntry.TotalOveruseHours * assetBook.AcquisitionPrice;
        }

        if (totalAcquistionPrice && this.OperationDaysPerYear )
        {
            averageOveruseHours = averageOveruseHours / (totalAcquistionPrice * this.OperationDaysPerYear);
        }
        else
        {
            averageOveruseHours = 0;
        }

        ret = roundDown(averageOveruseHours, #AverageOverUseHoursPrecision);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageOveruseHoursForSecondMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate average overuse hours for second calculation method
    /// </summary>
    /// <returns>
    /// Returns average overuse hours for second calculation method
    /// </returns>
    public AssetAcceleratedDepOveruseHoursPerDay_JP averageOveruseHoursForSecondMethod()
    {
        #AssetDepCalculation_JP

        real                                    ret;
        AssetDocumentAcceleratedDepEntry_JP     docAccDepEntry;

        select avg(TotalOveruseHours) from docAccDepEntry
            where docAccDepEntry.AssetDocumentAcceleratedDepTable_JP == this.RecId;

        if (this.OperationDaysPerYear)
        {
            ret = docAccDepEntry.TotalOveruseHours/this.OperationDaysPerYear;
        }
        else
        {
            ret = 0;
        }

        ret = roundDown(ret, #AverageOverUseHoursPrecision);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAssetBookByQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add asset book to <C>AssetDocumentAcceleratedDepTable_JP</C> by query
    /// </summary>
    /// <param name="_query">
    /// Query to find asset book
    /// </param>
    public void addAssetBookByQuery(Query _query)
    {
        QueryRun                            queryRun;
        TableId                             assetDepBookMapTableId;
        AssetDepBookMap_JP                  assetDepBookMap;
        AssetDocumentEntry_JP               assetDocumentEntry;
        AssetDocumentAcceleratedDepEntry_JP assetDocumentAcceleratedDepEntry;
        QueryBuildDataSource                accDepGroupQBDS;
        QueryBuildRange                     accDepGroupQueryRange;
        JoinMode                            origJoinMode;
        boolean                             queryChanged;
        boolean                             warningForAccProfileNeeded;
        boolean                             warningForOverlapNeeded;

        if (!_query)
        {
            return;
        }

        ttsbegin;

        accDepGroupQBDS = _query.dataSourceTable(tableNum(AssetAcceleratedDepGroup_JP));
        if (accDepGroupQBDS)
        {
            accDepGroupQueryRange = accDepGroupQBDS.rangeField(fieldNum(AssetAcceleratedDepGroup_JP, GroupId));
            if (!accDepGroupQueryRange.value())
            {
                origJoinMode = accDepGroupQBDS.joinMode();
                accDepGroupQBDS.joinMode(JoinMode::OuterJoin);
                queryChanged = true;
            }
        }

        queryRun = new QueryRun(_query);
        while (queryRun.next())
        {
            assetDepBookMapTableId = tableNum(AssetBook);

            if (queryRun.changed(assetDepBookMapTableId))
            {
                assetDepBookMap = queryRun.get(assetDepBookMapTableId);
                if (!this.validateForAcceleratedProfile(assetDepBookMap.AssetId, assetDepBookMap.AssetBookId))
                {
                    warningForAccProfileNeeded = true;
                }
                else if (!this.validateForOverlap(assetDepBookMap.AssetId, assetDepBookMap.AssetBookId))
                {
                    warningForOverlapNeeded = true;
                }
                else
                {
                    assetDocumentEntry.AssetId = assetDepBookMap.AssetId;
                    assetDocumentEntry.BookId = assetDepBookMap.AssetBookId;
                    assetDocumentEntry.AssetDocumentTable_JP = this.AssetDocumentTable_JP;
                    assetDocumentEntry.insert();

                    assetDocumentAcceleratedDepEntry.AssetDocumentEntry_JP = assetDocumentEntry.RecId;
                    assetDocumentAcceleratedDepEntry.AssetDocumentAcceleratedDepTable_JP = this.RecId;
                    assetDocumentAcceleratedDepEntry.initValue();
                    assetDocumentAcceleratedDepEntry.insert();
                }
            }
        }

        if (warningForAccProfileNeeded)
        {
            info("@FixedAssetsIncentiveDepreciation:AcceleratedDepRequireProfileGeneral");
        }
        if (warningForOverlapNeeded)
        {
            info("@FixedAssetsIncentiveDepreciation:AcceleratedDepOverlapGeneral");
        }

        if (queryChanged)
        {
            accDepGroupQBDS.joinMode(origJoinMode);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the asset book can be added to the specific AssetDocumentAcceleratedDepTable_JP
    /// </summary>
    /// <param name="_assetId">
    /// Asset id
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <param name="_showWarning">
    /// Flag to show warning message.
    /// </param>
    public boolean validateForAssetBook(
        AssetId _assetId,
        AssetBookId _bookId,
        boolean _showWarning = false)
    {
        boolean ret = true;

        ret = this.validateForAcceleratedProfile(_assetId, _bookId, _showWarning);

        if (ret)
        {
            ret = this.validateForOverlap(_assetId, _bookId, _showWarning);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForAcceleratedProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the asset book has accelerated depreciaion profile
    /// </summary>
    /// <param name="_assetId">
    /// Asset id
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <param name="_showWarning">
    /// Flag to show warning message.
    /// </param>
    public boolean validateForAcceleratedProfile(
        AssetId _assetId,
        AssetBookId _bookId,
        boolean _showWarning = false)
    {
        boolean             ret = true;
        AssetDepBookMap_JP  assetDepBookMap;

        // An accelerated depreciation profile is required for the fixed asset to be added to the accelerated depreciation document
        assetDepBookMap = AssetDepBookMap_JP::findByAssetIdBookId(_assetId, _bookId);
        if (!assetDepBookMap.AssetDepBookMap_JP::acceleratedDepreciationProfile())
        {
            if (_showWarning)
            {
                ret = checkFailed("@FixedAssetsIncentiveDepreciation:AcceleratedDepRequireProfile");
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the asset book will overlap periods across documents
    /// </summary>
    /// <param name="_assetId">
    /// Asset id
    /// </param>
    /// <param name="_bookId">
    /// Asset book id.
    /// </param>
    /// <param name="_showWarning">
    /// Flag to show warning message.
    /// </param>
    public boolean validateForOverlap(
        AssetId _assetId,
        AssetBookId _bookId,
        boolean _showWarning = false)
    {
        boolean ret = true;
        AssetDocumentAcceleratedDepTable_JP acceleratedDepDocTable;
        AssetDocumentAcceleratedDepEntry_JP acceleratedDepDocEntry;
        AssetDocumentEntry_JP               assetDocumentEntry;
        AssetDocumentTable_JP               assetDocumentTable;

        // validate a particular fixed asset book in a particular period of time, can belong to only 1 open accelerated depreciation document (and many posted documents).
        select firstonly RecId from acceleratedDepDocEntry
            exists join assetDocumentEntry
                where assetDocumentEntry.RecId == acceleratedDepDocEntry.AssetDocumentEntry_JP
                    && assetDocumentEntry.AssetId == _assetId
                    && assetDocumentEntry.BookId == _bookId
            exists join acceleratedDepDocTable
                where acceleratedDepDocTable.RecId == acceleratedDepDocEntry.AssetDocumentAcceleratedDepTable_JP
                    && (acceleratedDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Open
                        || acceleratedDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::Confirmed
                        || acceleratedDepDocTable.Status == AssetAcceleratedDepDocumentStatus_JP::PartiallyPosted)
                    && (!(acceleratedDepDocTable.ValidTo < this.ValidFrom
                        || acceleratedDepDocTable.ValidFrom > this.ValidTo));

        if (acceleratedDepDocEntry.RecId)
        {
            if (_showWarning)
            {
                ret = checkFailed("@FixedAssetsIncentiveDepreciation:AcceleratedDepOverlap");
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveProdHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve prodcution hours for all fixed assets under current accelerated document table
    /// </summary>
    public void retrieveProdHours()
    {
        AssetDocumentAcceleratedDepEntry_JP accDepDocEntryLocal;
        AssetAcceleratedDepResource_JP      accDepResource;

        ttsbegin;

        while select forupdate accDepDocEntryLocal
            where accDepDocEntryLocal.AssetDocumentAcceleratedDepTable_JP == this.RecId
        {
            accDepResource= AssetAcceleratedDepResource_JP::construct(accDepDocEntryLocal.RecId);
            accDepResource.updateWorkingHoursFromResource();
            accDepDocEntryLocal.updateHours(this.AverageHours);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4880089</DeveloperDocumentation>
	<FormRef>AssetAcceleratedDepDocument_JP</FormRef>
	<Label>@SYP4880093</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>DocumentId</TitleField1>
	<TitleField2>ValidFrom</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>DocumentIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetAcceleratedDepGroup_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetDocumentTable_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperationDaysPerYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentOperationsTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetAcceleratedDepGroup_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperationDaysPerYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportPrintDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeclarationDetails</Name>
			<Label>@FixedAssetsIncentiveDepreciation:AcceleratedDepDeclarationDetail</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalRepresentativeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalRepresentativeAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferenceDocument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountantName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkingHourSummary</Name>
			<Label>@FixedAssetsIncentiveDepreciation:AcceleratedDepWorkingHourSummary</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TotalOveruseHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageOveruseHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OveruseRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetAcceleratedDepGroup_JP</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetDocumentTable_JP</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetAcceleratedDepDocumentId_JP</ExtendedDataType>
			<Label>@SYP4880097</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>OperationDaysPerYear</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetAcceleratedOperationDaysPerYear_JP</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<Label>@SYS5209</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<Label>@SYS14656</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS7576</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetAcceleratedDepDocumentStatus_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalculationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetAcceleratedDepCalcMethod_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AverageHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAcceleratedDepAverageHoursPerDay_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetLocation</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalOveruseHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAcceleratedDepOveruseHoursPerDay_JP</ExtendedDataType>
			<Label>@FixedAssetsIncentiveDepreciation:AcceleratedDepTotalOveruseHours</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AverageOveruseHours</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetAcceleratedDepOveruseHoursPerDay_JP</ExtendedDataType>
			<Label>@FixedAssetsIncentiveDepreciation:SYP4880047</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RateFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetAcceleratedDepRateFactor_JP</ExtendedDataType>
			<Label>@SYP4880049</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OveruseRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetDepreciationRate_JP</ExtendedDataType>
			<Label>@FixedAssetsIncentiveDepreciation:AcceleratedDepOveruseRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReportPrintDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@FixedAssetsIncentiveDepreciation:SYP4880024</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalRepresentativeName</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AssetLegalRepresentative_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonComment</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ReasonComment</ExtendedDataType>
			<Label>@FixedAssetsIncentiveDepreciation:SYP4880018</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountantName</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@GLS60086</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalRepresentativeAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Addressing</ExtendedDataType>
			<Label>@FixedAssetsIncentiveDepreciation:SYP4880011</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceDocument</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@FixedAssetsIncentiveDepreciation:SYP4880015</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RateThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Asset</ConfigurationKey>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>AssetAcceleratedDepRateThreshold_JP</ExtendedDataType>
			<Label>@SYP4880052</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CurrentOperationsTax</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CurrentOperationsTax</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DocumentIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetAcceleratedDepGroup_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetAcceleratedDepGroup_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetAcceleratedDepGroup_JP</Name>
					<Field>AssetAcceleratedDepGroup_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDocumentTable_JP</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>AssetDocumentTable_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetDocumentTable_JP</Name>
					<Field>AssetDocumentTable_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AssetDocumentAcceleratedDepTable_JP</Name>
			<RelatedTable>AssetDocumentAcceleratedDepTable_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocumentId</Name>
					<Field>DocumentId</Field>
					<RelatedField>DocumentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>