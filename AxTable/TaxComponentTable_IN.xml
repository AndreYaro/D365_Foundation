<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxComponentTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxComponentTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        TaxSetOffRule_IN taxSetOff;

        super();

        ttsbegin;
        while select forupdate taxSetOff
            where taxSetOff.TaxComponentTableSetOff == this.RecId
        {
            taxSetOff.delete();
            TaxSetOffRule_IN::updateColumn(taxSetOff.TaxComponentTable, taxSetOff.Column);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean  ret;
        TaxTable taxTable;

        ret = super();

        if (ret)
        {
            select firstonly taxTable
                where taxTable.TaxType_IN       == this.TaxType
                   && taxTable.TaxComponentTable_IN  == this.RecId;

            if (taxTable)
            {
                ret = checkFailed(strfmt("@GLS5088", this.Component));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = TaxParameters::checkParameter_IN(this.TaxType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        CustomsComponentTaxCodes_IN customsComponentTaxCodes;

        ttsbegin;
        if (this.orig().ApplyExcise != this.ApplyExcise && !this.ApplyExcise)
        {
            delete_from customsComponentTaxCodes
                where customsComponentTaxCodes.TaxComponentTable == this.RecId;
        }
        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxComponentTable_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type is used to find record.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component is used to find record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    public static boolean exist(TaxType_IN         _taxType,
                                TaxComponent_IN    _taxComponent)
    {
        return _taxComponent
            && (select firstonly RecId from taxComponentTable_IN
                    where taxComponentTable_IN.TaxType   == _taxType
                       && taxComponentTable_IN.Component == _taxComponent).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TaxComponentTable_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing TaxComponentTable_IN table.
    /// </returns>
    public static TaxComponentTable_IN find(
        RefRecId            _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxComponentTable_IN taxComponentTable;

        taxComponentTable.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxComponentTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxComponentTable
            where taxComponentTable.RecId == _recId;

        return taxComponentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>TaxComponentTable_IN</c> table specified by a tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type of the <c>TaxComponentTable_IN</c> record to find.
    /// </param>
    /// <param name="_taxComponent">
    /// The tax component of the <c>TaxComponentTable_IN</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>TaxComponentTable_IN</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxComponentTable_IN findByTaxType(
        TaxType_IN      _taxType,
        TaxComponent_IN _taxComponent,
        boolean         _forUpdate = false)
    {
        TaxComponentTable_IN taxComponentTable;

        if (_taxComponent)
        {
            taxComponentTable.selectForUpdate(_forUpdate);

            select firstonly taxComponentTable
                where taxComponentTable.TaxType     == _taxType
                   && taxComponentTable.Component   == _taxComponent;
        }

        return taxComponentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxComponentTable_IN</c> table.
    /// </summary>
    /// <param name="_taxComponent">
    /// The tax component is used to find record.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxComponentTable_IN</c> table.
    /// </returns>
    public static TaxComponentTable_IN findTaxComponent(TaxComponent_IN _taxComponent)
    {
        TaxComponentTable_IN taxComponentTable;

        if (_taxComponent)
        {
            select firstonly taxComponentTable
                where taxComponentTable.Component   == _taxComponent;
        }

        return taxComponentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplyExciseMarked_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if for the given taxCode, ApplyExcise is marked
    /// </summary>
    /// <param name="_taxCode">
    /// Contains TaxCode or not,if ApplyExcise is marked
    /// </param>
    /// <returns>
    /// Returns if for the given taxCode, ApplyExcise is marked
    /// </returns>
    /// <remarks>
    /// Returns if for the given taxCode, ApplyExcise is marked
    /// </remarks>

    public static boolean isApplyExciseMarked_IN(TaxCode _taxCode)
    {
        TaxTable             taxTableLoc;
        TaxComponentTable_IN taxComponentTableLoc;

        select firstOnly RecId from taxTableLoc
           where taxTableLoc.TaxCode == _taxCode
              join RecId from taxComponentTableLoc
                 where taxComponentTableLoc.RecId       == taxTableLoc.TaxComponentTable_IN
                    && taxComponentTableLoc.ApplyExcise == NoYes::Yes;

        return taxComponentTableLoc.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the component.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// A instance of <c>FormControl</c>
    /// </param>
    /// <param name="_taxType">
    /// The tax type is used to add rang in query.
    /// </param>
    /// <returns>
    /// The component infomation.
    /// </returns>
    public static Common lookupComponent(
        FormControl _formReferenceControl,
        TaxType_IN  _taxType)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxComponentTable_IN), _formReferenceControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(TaxComponentTable_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxComponentTable_IN, TaxType));
        queryBuildRange.value(queryValue(_taxType));

        sysTableLookup.addLookupfield(fieldnum(TaxComponentTable_IN, Component));
        sysTableLookup.addLookupfield(fieldnum(TaxComponentTable_IN, Name));
        sysTableLookup.parmQuery(query);

        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupComponentReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the component reference of the tax.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control.
    /// </param>
    /// <param name="_taxAccountSetupTableRecId">
    /// The tax account setup table rec id.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The component reference of the tax.
    /// </returns>
    public static Common lookupComponentReference(
        FormReferenceControl _formReferenceControl,
        RefRecId             _taxAccountSetupTableRecId,
        TaxType_IN           _taxType)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(TaxComponentTable_IN), _formReferenceControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    queryBuildDSTaxLedgerAccounts;
        QueryBuildDataSource    queryBuildDSTaxLedgerAccountSetup;
        QueryBuildRange         queryBuildRange;
        Common                  ret;

        queryBuildDataSource    = query.addDataSource(tablenum(TaxComponentTable_IN));
        queryBuildRange         = queryBuildDataSource.addRange(fieldnum(TaxComponentTable_IN, TaxType));
        queryBuildRange.value(queryValue(_taxType));

        queryBuildDSTaxLedgerAccounts = queryBuildDataSource.addDataSource(tablenum(TaxLedgerAccounts_IN));
        queryBuildDSTaxLedgerAccounts.addLink(fieldnum(TaxComponentTable_IN, RecId), fieldnum(TaxLedgerAccounts_IN, TaxComponentTable));
        queryBuildDSTaxLedgerAccounts.joinMode(JoinMode::ExistsJoin);

        queryBuildDSTaxLedgerAccountSetup = queryBuildDSTaxLedgerAccounts.addDataSource(tablenum(TaxLedgerAccountSetup_IN));
        queryBuildDSTaxLedgerAccountSetup.addLink(fieldnum(TaxLedgerAccounts_IN, TaxLedgerAccountSetup), fieldnum(TaxLedgerAccountSetup_IN, RecId));
        queryBuildDSTaxLedgerAccountSetup.addRange(fieldnum(TaxLedgerAccountSetup_IN, RecId)).value(queryValue(_taxAccountSetupTableRecId));
        queryBuildDSTaxLedgerAccountSetup.joinMode(JoinMode::ExistsJoin);

        sysTableLookup.addLookupfield(fieldnum(TaxComponentTable_IN, Component));
        sysTableLookup.addLookupfield(fieldnum(TaxComponentTable_IN, Name));
        sysTableLookup.parmQuery(query);
        ret = sysTableLookup.performFormLookup();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxtype2TaxtypeComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax type component by tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxTypeComponent_IN</c> class.
    /// </returns>
    public static TaxTypeComponent_IN taxtype2TaxtypeComponent(TaxType_IN _taxType)
    {
        TaxTypeComponent_IN taxTypeComponent;

        switch (_taxType)
        {
            case TaxType_IN::VAT:
                taxTypeComponent = TaxTypeComponent_IN::VAT;
                break;

            case TaxType_IN::SalesTax:
                taxTypeComponent = TaxTypeComponent_IN::SalesTax;
                break;

            case TaxType_IN::ServiceTax:
                taxTypeComponent = TaxTypeComponent_IN::ServiceTax;
                break;

            case TaxType_IN::Excise:
                taxTypeComponent = TaxTypeComponent_IN::Excise;
                break;

            case TaxType_IN::Customs:
                taxTypeComponent = TaxTypeComponent_IN::Customs;
                break;

            default:
                break;
        }

        return taxTypeComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTypeComponent2TaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax type by tax type component.
    /// </summary>
    /// <param name="_taxTypeComponent">
    /// The tax type component.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxType_IN</c> class.
    /// </returns>
    public static TaxType_IN taxTypeComponent2TaxType(TaxTypeComponent_IN _taxTypeComponent)
    {
        TaxType_IN taxType;

        switch (_taxTypeComponent)
        {
            case TaxTypeComponent_IN::VAT:
                taxType = TaxType_IN::VAT;
                break;

            case TaxTypeComponent_IN::SalesTax:
                taxType = TaxType_IN::SalesTax;
                break;

            case TaxTypeComponent_IN::ServiceTax:
                taxType = TaxType_IN::ServiceTax;
                break;

            case TaxTypeComponent_IN::Excise:
                taxType = TaxType_IN::Excise;
                break;

            case TaxTypeComponent_IN::Customs:
                taxType = TaxType_IN::Customs;
                break;

            case TaxTypeComponent_IN::GST:
                taxType = TaxType_IN::GST;
                break;

            default:
                break;
        }

        return taxType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63747</DeveloperDocumentation>
	<FormRef>taxcomponentTable_IN</FormRef>
	<Label>@GLS5087</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Component</TitleField1>
	<TitleField2>TaxType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ComponentTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ApplyExcise</Name>
			<Label>@GLS5195</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApplyExcise</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Component</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyExcise</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS5195</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Component</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxComponent_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxType_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ComponentTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Component</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>