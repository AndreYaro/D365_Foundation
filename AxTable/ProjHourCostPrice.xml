<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHourCostPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjHourCostPrice extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        #ProjPrice

        super();

        SysTransactionScopeCache::clear(tableStr(ProjHourCostPrice));
        ProjHourCostPrice::clearPriceCache(#ProjHourDateCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a buffer is inserted as a new record.
    /// This is overriden to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void insert()
    {
        #ProjPrice

		// Compute the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjHourCostPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();

        SysTransactionScopeCache::clear(tableStr(ProjHourCostPrice));
        ProjHourCostPrice::clearPriceCache(#ProjHourDateCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a buffer is updated in a transaction.
    /// This is override to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void update()
    {
        #ProjPrice

		// Update the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjHourCostPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();

        SysTransactionScopeCache::clear(tableStr(ProjHourCostPrice));
        ProjHourCostPrice::clearPriceCache(#ProjHourDateCostPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);

        switch (p1)
        {
            case(fieldNum(ProjHourCostPrice, CategoryId)):
                if (this.CategoryId)
                {
                    if (ProjCategory::find(this.CategoryId).CategoryType != ProjCategoryType::Hour)
                    {
                        return checkFailed(strFmt("@SYS56468",ProjTransType::Hour));
                    }
                }

            case(fieldNum(ProjHourCostPrice, Resource)):
                ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
                break;

            case(fieldNum(ProjHourCostPrice, PSAProjInvoiceProjId)):
                if (this.PSAProjInvoiceProjId)
                {
                    ret = ret && ProjInvoiceTable::validateContractAgainstCustomer(this.PSAProjInvoiceProjId, this.PSACustAccount);
                }
                break;

            case(fieldNum(ProjHourCostPrice, ProjId)):
                if (this.ProjId)
                {
                    ret = ret && ProjTable::validateProjectAgainstContractOrCustomer(this.PSAProjInvoiceProjId, this.PSACustAccount, this.ProjId);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPriceCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all the values stored for a given owner.
    /// </summary>
    /// <param name="_owner">
    ///    A string that represents the owner.
    /// </param>
    public static void clearPriceCache(str _owner)
    {
        SysGlobalCache  cache   = classfactory.globalCache();

        if (_owner)
        {
            cache.clear(_owner);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFind</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> parameter class instance based off the signature of <c>ProjHourCostPrice::find</c>.
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResourceRecId</c>).</param>
    /// <param name = "_categoryId">Category ID to search with (<c>parmProjCategoryId</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_spsaCustAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <param name = "_spsaPriceGroupId">Price group ID to search with (<c>parmProjPriceGroupId</c>).</param>
    /// <param name = "_resourceCategory">Resource category ID to search with (<c>parmResourceCategoryRecId</c>).</param>
    /// <returns>A <c>ProjPriceParameters</c> instance for use with <c>ProjHourCostPrice::findByPriceParameters</c>.</returns>
	public static ProjPriceParameters constructPriceParametersForFind(
        ProjId					_projId,
        ResourceRecId			_resource,
        ProjCategoryId			_categoryId,
        TransDate				_transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CustAccount				_spsaCustAccount = "",
        ProjInvoiceProjId		_spsaProjInvoiceProjId = "",
        ProjPriceGroupID		_spsaPriceGroupId = "",
        ResourceCategoryRecId	_resourceCategory = 0)
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryId);
        priceParams.parmTransDate(_transDate);
        priceParams.parmCustAccount(_spsaCustAccount);
        priceParams.parmProjInvoiceProjId(_spsaProjInvoiceProjId);
        priceParams.parmProjPriceGroupID(_spsaPriceGroupId);
        priceParams.parmResourceCategoryRecId(_resourceCategory);

        return priceParams;

    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a project hour cost price record.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>ProjPriceParameters</c> containing the search criteria.</param>
    /// <param name = "_forUpdate">Whether to select the record for update.</param>
    /// <returns>A <c>ProjHourCostPrice</c> record.</returns>
    [Replaceable]
    public static ProjHourCostPrice findByPriceParameters(ProjPriceParameters _parameters, boolean _forUpdate = false)
    {
        boolean useResourceRate = ResourceFacade::useResourceRate(_parameters.parmResourceRecId());

        ProjHourCostPrice projHourCostPrice = null;
        projHourCostPrice.selectForUpdate(_forUpdate);

        select firstonly reverse projHourCostPrice
        order by TransDate
        where projHourCostPrice.ProjId == _parameters.parmProjId() &&
              projHourCostPrice.Resource == _parameters.parmResourceRecId() &&
              projHourCostPrice.CategoryId == _parameters.parmProjCategoryId() &&
              // Customer, InvoiceProjId and Workcenter added
        projHourCostPrice.psaCustAccount == _parameters.parmCustAccount() &&
              projHourCostPrice.psaProjInvoiceProjId == _parameters.parmProjInvoiceProjId() &&
              projHourCostPrice.psaPriceGroupId == _parameters.parmProjPriceGroupID() &&
              projHourCostPrice.IsResourceRate == useResourceRate &&
              projHourCostPrice.TransDate <= _parameters.parmTransDate() &&
              projHourCostPrice.ResourceCategory == _parameters.parmResourceCategoryRecId();

        return projHourCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find a project hour cost price record.
    /// </summary>
    /// <param name = "_projId">Project ID to search with.</param>
    /// <param name = "_resource">Resource record ID to search with.</param>
    /// <param name = "_categoryId">Category ID to search with.</param>
    /// <param name = "_transDate">Transaction date to search with.</param>
    /// <param name = "_spsaCustAccount">Customer account to search with.</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with.</param>
    /// <param name = "_spsaPriceGroupId">Price group ID to search with.</param>
    /// <param name = "_resourceCategory">Resource category to search with.</param>
    /// <param name = "_forUpdate">Whether to select the record for update.</param>
    /// <returns>A <c>ProjHourCostPrice</c> record.</returns>
    [SysObsolete("This method has been made obsolete, please use ProjHourCostPrice::findByPriceParameters instead for extensibility.", false, 02\08\2018)]
    public static ProjHourCostPrice find(
		ProjId					_projId,
        ResourceRecId			_resource,
        ProjCategoryId			_categoryId,
        TransDate				_transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CustAccount				_spsaCustAccount = "",
        ProjInvoiceProjId		_spsaProjInvoiceProjId = "",
        ProjPriceGroupID		_spsaPriceGroupId = "",
        ResourceCategoryRecId	_resourceCategory = 0,
        boolean					_forUpdate = false)
    {
        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFind(
			_projId,
			_resource,
			_categoryId,
			_transDate,
			_spsaCustAccount,
			_spsaProjInvoiceProjId,
			_spsaPriceGroupId,
            _resourceCategory);
        return ProjHourCostPrice::findByPriceParameters(priceParams, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFindCostPrice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> parameter class instance based off the signature of <c>ProjHourCostPrice::findCostPrice</c>.
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResourceRecId</c>).</param>
    /// <param name = "_categoryID">Category ID to search with (<c>parmProjCategoryId</c>).</param>
    /// <param name = "_linePropertyId">Line property ID to search with (<c>parmProjLinePropertyId</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_projInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <param name = "_custAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <param name = "_priceGroupId">Price Group ID to search with (<c>parmProjPriceGroupId</c>).</param>
    /// <param name = "_resourceCategory">Resource category to search with (<c>parmResourceCategoryRecId</c>).</param>
    /// <returns>A <c>ProjPriceParameters</c> instance for use with <c>ProjHourCostPrice::findCostPriceByPriceParameters</c>.</returns>
	public static ProjPriceParameters constructPriceParametersForFindCostPrice(
		ProjId                  _projId,
        ResourceRecId           _resource,
        ProjCategoryId          _categoryID,
        ProjLinePropertyId      _linePropertyId,
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjInvoiceProjId       _projInvoiceProjId = '',
        CustAccount             _custAccount = '',
        PriceGroupId            _priceGroupId = '',
        ResourceCategoryRecId   _resourceCategory = 0)
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryId);
        priceParams.parmProjLinePropertyId(_linePropertyId);
        priceParams.parmTransDate(_transDate);
        priceParams.parmProjInvoiceProjId(_projInvoiceProjId);
        priceparams.parmCustAccount(_custAccount);
        priceParams.parmProjPriceGroupid(_priceGroupId);
        priceParams.parmResourceCategoryRecId(_resourceCategory);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPriceByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find project hour cost prices.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>ProjPriceParameters</c> containing the search criteria.</param>
    /// <param name = "_areDateValuesVariedFrequently">Whether to use the <c>SysGlobalCache</c>.</param>
    /// <returns>The cost price.</returns>
    [Replaceable]
    public static CostPrice findCostPriceByPriceParameters(ProjPriceParameters _parameters, boolean _areDateValuesVariedFrequently = false)
    {
        ProjHourCostPrice   projHourCostPrice;
        Price               projCostPrice;
        str                 cacheKey;
        str                 cacheDateKey;
        Map                 costPriceMap;
        CostPrice           costPrice;
        SysGlobalCache      cache   = classfactory.globalCache();
        MapEnumerator       mapEnumerator;
        ProjTransDate       transDate, costDate;
        boolean             cacheFound;
        ResourceCategoryRecId resourceCategory = _parameters.parmResourceCategoryRecId();

        const str ProjHourDateCostPrice = 'ProjHourCostPrice.getCostPrice';

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(tableStr(ProjHourCostPrice));
        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(tableStaticMethodStr(ProjHourCostPrice, findCostPriceByPriceParameters)))
        {
            activityContext.addCustomProperty('_areDateValuesVariedFrequently', any2Str(_areDateValuesVariedFrequently));

            if (!resourceCategory && _parameters.parmResourceRecId())
            {
                resourceCategory = ResourceFacade::getResourceCategory(_parameters.parmResourceRecId(), _parameters.parmTransDate());
            }

            if (_areDateValuesVariedFrequently)
            {
                cacheDateKey = strFmt("%1-%2-%3-%4-%5",
                _parameters.parmProjId(),
                _parameters.parmResourceRecId(),
                _parameters.parmProjCategoryId(),
                _parameters.parmProjLinePropertyId(),
                resourceCategory);

                if (cache.isSet(ProjHourDateCostPrice, cacheDateKey))
                {
                    costPriceMap = cache.get(ProjHourDateCostPrice, cacheDateKey);
                    if (costPriceMap.elements())
                    {
                        mapEnumerator = costPriceMap.getEnumerator();
                        while (mapEnumerator.moveNext())
                        {
                            transDate = mapEnumerator.currentKey();
                            [costDate,costPrice] = mapEnumerator.currentValue();
                            if (transDate && costDate && costPrice)
                            {
                                if (costDate <= _parameters.parmTransDate() && _parameters.parmTransDate() <= transDate)
                                {
                                    cacheFound = true;
                                    activityContext.addCustomProperty('cacheFound', any2Str(cacheFound));
                                    return costPrice;
                                }
                            }
                        }
                    }
                }
            }

            cacheKey = strFmt("%1-%2-%3-%4-%5-%6-%7-%8-%9",
            _parameters.parmProjId(),
            _parameters.parmResourceRecId(),
            _parameters.parmProjCategoryId(),
            _parameters.parmProjLinePropertyId(),
            _parameters.parmTransDate(),
            _parameters.parmProjInvoiceProjId(),
            _parameters.parmCustAccount(),
            _parameters.parmProjPriceGroupID(),
            resourceCategory);

            if (SysTransactionScopeCache::get(tableStr(ProjHourCostPrice), cacheKey))
            {
                activityContext.addCustomProperty('cacheFound', any2Str(true));
                return SysTransactionScopeCache::get(tableStr(ProjHourCostPrice), cacheKey);
            }

            activityContext.addCustomProperty('cacheFound', any2Str(false));

            ProjHourCostPriceLookup hourCostPriceLookup = ProjHourCostPriceLookup::construct(_parameters);
            projHourCostPrice = hourCostPriceLookup.getProjHourCostPrice();
        
            if (_parameters.parmProjLinePropertyId())
            {
                projCostPrice = CurrencyExchangeHelper::price(projHourCostPrice.CostPrice * (1 + ProjLineProperty::find(_parameters.parmProjLinePropertyId()).CostMarkup / 100));
            }
            else
            {
                projCostPrice = CurrencyExchangeHelper::price(projHourCostPrice.CostPrice);
            }

            SysTransactionScopeCache::set(tableStr(ProjHourCostPrice),cacheKey,projCostPrice);

            if (_areDateValuesVariedFrequently)
            {
                cacheDateKey = strFmt("%1-%2-%3-%4-%5",
                _parameters.parmProjId(),
                _parameters.parmResourceRecId(),
                _parameters.parmProjCategoryId(),
                _parameters.parmProjLinePropertyId(),
                resourceCategory);

                if (cache.isSet(ProjHourDateCostPrice, cacheDateKey))
                {
                    costPriceMap = cache.get(ProjHourDateCostPrice, cacheDateKey);
                }
                else if (!costPriceMap)
                {
                    costPriceMap = new Map(Types::Date, Types::Container);
                }

                costPriceMap.insert(_parameters.parmTransDate(), [projHourCostPrice.TransDate, projCostPrice]);
                cache.set(ProjHourDateCostPrice, cacheDateKey, costPriceMap);
            }

        }

        return projCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPrice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find project hour cost prices based on the given search criteria.
    /// </summary>
    /// <param name = "_projId">Project ID to search with.</param>
    /// <param name = "_resource">Resource record ID to search with.</param>
    /// <param name = "_categoryID">Project category to search with.</param>
    /// <param name = "_linePropertyId">Line property ID to search with.</param>
    /// <param name = "_transDate">Transaction date to search with.</param>
    /// <param name = "_projInvoiceProjId">Project invoice ID to search with.</param>
    /// <param name = "_custAccount">Customer account to search with.</param>
    /// <param name = "_areDateValuesVariedFrequently">Whether to use the <c>SysGlobalCache</c>.</param>
    /// <param name = "_priceGroupId">Price group ID to search with.</param>
    /// <param name = "_resourceCategory">Resource category to search with.</param>
    /// <returns>The cost price.</returns>
	[SysObsolete("This method has been made obsolete, please use ProjHourCostPrice::findCostPriceByPriceParameters instead for extensibility.", false, 30\06\2018)]
    public static CostPrice findCostPrice(
        ProjId                  _projId,
        ResourceRecId           _resource,
        ProjCategoryId          _categoryID,
        ProjLinePropertyId      _linePropertyId,
        TransDate               _transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjInvoiceProjId       _projInvoiceProjId = '',
        CustAccount             _custAccount = '',
        boolean                 _areDateValuesVariedFrequently = false,
        PriceGroupId            _priceGroupId = '',
        ResourceCategoryRecId   _resourceCategory = 0)
    {
        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
			_projId,
			_resource,
			_categoryID,
			_linePropertyId,
			_transDate,
			_projInvoiceProjId,
			_custAccount,
			_priceGroupId,
            _resourceCategory);
        return ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, _areDateValuesVariedFrequently);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostPriceForSyncResource</Name>
				<Source><![CDATA[
    public static ProjHourCostPrice findCostPriceForSyncResource(ResourceRecId _resource)
    {
        // The sync service only fetch the cost price whose category and project are empty but resource not empty
        ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFind('', _resource, '');
        ProjHourCostPrice projHourCostPrice = ProjHourCostPrice::findByPriceParameters(priceParams);

        return projHourCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjCostPriceByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find project hour cost prices.
    /// </summary>
    /// <param name = "_parameters">An instance of ProjPriceParameters containing the search criteria.</param>
    /// <returns>The cost price.</returns>
    public static CostPrice findProjCostPriceByPriceParameters(ProjPriceParameters _parameters)
    {
        ProjHourCostPrice projHourCostPrice = ProjHourCostPrice::findProjCostPrice(
            _parameters.parmProjId(),
            _parameters.parmResourceRecId(),
            _parameters.parmProjCategoryId(),
            _parameters.parmTransDate(),
            _parameters.parmProjInvoiceProjId(),
            _parameters.parmCustAccount(),
            _parameters.parmResourceCategoryRecId()
        );
        return projHourCostPrice.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjCostPrice</Name>
				<Source><![CDATA[
    public static ProjHourCostPrice findProjCostPrice(
        ProjId                 _projId,
        ResourceRecId          _resource,
        ProjCategoryId         _categoryID,
        TransDate              _transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjInvoiceProjId      _projInvoiceProjId = '',
        CustAccount            _custAccount = '',
        ResourceCategoryRecId  _resourceCategory = 0)
    {
        ProjHourCostPrice       projHourCostPrice;
        ResourceCategoryRecId   resourceCategory = _resourceCategory;

        if (!resourceCategory && _resource)
        {
            resourceCategory = ResourceFacade::getResourceCategory(_resource, _transDate);
        }

        projHourCostPrice= ProjHourCostPrice::psAfindProjCostPrice(_projId,_resource,_categoryID,_transDate,_projInvoiceProjId,_custAccount, '', resourceCategory);

        return projHourCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findResourceRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the <c>ProjHourCostPrice</c> table buffer for the resource with use resoruce rate enabled.
    /// </summary>
    /// <param name="_resource">
    /// Resource record identifier.
    /// </param>
    /// <param name="_transDate">
    /// Start date of the period.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the return table buffer should be allowed for updated; otherwise false.
    /// </param>
    /// <returns>
    /// The <c>ProjHourCostPrice</c> table buffer for the resource with use resoruce rate enabled.
    /// </returns>
    static ProjHourCostPrice findResourceRate(
        ResourceRecId _resource,
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean _forUpdate = false)
    {
        ProjHourCostPrice projHourCostPrice;
        
        if (_resource && ResourceFacade::useResourceRate(_resource))
        {
            ProjPriceParameters priceParameters = ProjPriceParameters::construct();
            priceParameters.parmTransDate(_transDate);
            priceParameters.parmResourceRecId(_resource);
        
            ProjHourCostPriceUseResourceRateLookup hourCostPriceELRLookup = ProjHourCostPriceUseResourceRateLookup::construct(priceParameters);
            projHourCostPrice = hourCostPriceELRLookup.getProjHourCostPrice();

            projHourCostPrice.selectForUpdate(_forUpdate);
        }

        return projHourCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAfindProjCostPrice</Name>
				<Source><![CDATA[
    static ProjHourCostPrice psAfindProjCostPrice(ProjId              _projId,
                                                         ResourceRecId          _resource,
                                                         ProjCategoryId         _categoryID,
                                                         TransDate              _transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                         ProjInvoiceProjId      _projInvoiceProjId='',
                                                         CustAccount            _custAccount='',
                                                         ProjPriceGroupID       _priceGroupId='',
                                                         ResourceCategoryRecId  _resourceCategory = 0
                                                        )
    {
        ProjPriceParameters priceParameters = ProjPriceParameters::construct();
        priceParameters.parmTransDate(_transDate);
        priceParameters.parmProjId(_projId);
        priceParameters.parmProjInvoiceProjId(_projInvoiceProjId);
        priceParameters.parmCustAccount(_custAccount);
        priceParameters.parmResourceRecId(_resource);
        priceParameters.parmResourceCategoryRecId(_resourceCategory);
        priceParameters.parmProjCategoryId(_categoryID);
        priceParameters.parmProjPriceGroupID(_priceGroupId);

        ProjHourCostPriceLookup hourCostPriceLookup = ProjHourCostPriceLookup::construct(priceParameters);
        return hourCostPriceLookup.getProjHourCostPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFields</Name>
				<Source><![CDATA[
	/// <summary>
    /// Enumerates extension fields of this table, by registering them with the '_hashCalculator' object.
	/// This is the the intended CoC extension point for table extensions to register fields included in the hash.
    /// </summary>
	public static void getExtensionFields(ProjExtensionHashCalculator _hashCalculator)
    {
		// ex: _hashCalculator.addExtensionField(fieldNum(ProjHourCostPrice, MyCustomField), defaultFieldValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124892</DeveloperDocumentation>
	<FormRef>projcostPriceHour</FormRef>
	<Label>@SYS75857</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Resource</TitleField1>
	<TitleField2>ProjId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProjEmplCatDateIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSACustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAPriceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ELR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsResourceRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ELR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS338926</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsResourceRate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS338926</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSACustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAPriceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS50168</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtensionHash</Name>
			<ExtendedDataType>ProjExtensionHash</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjEmplCatDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResourceCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSACustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAPriceGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ELR</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsResourceRate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtensionHash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSACustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>PSACustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjHourCostPrice</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAPriceGroupId</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<Field>PSAPriceGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjHourCostPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>PSAProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjHourCostPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>