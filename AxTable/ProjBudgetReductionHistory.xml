<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetReductionHistory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetReductionHistory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!ProjBudgetReductionHistory::exist(_recId))
        {
            ret = checkFailed(strFmt(ProjBudgetReductionHistory::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>ProjBudgetReductionHistory</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly RecId from projBudgetReductionHistory where projBudgetReductionHistory.RecId == _recId).RecId != 0;
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProjTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>ProjBudgetReductionHistory</c> table exists.
    /// </summary>
    /// <param name="transId">
    ///    The transaction ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existProjTransId(ProjTransIdBase transId)
    {
        ProjBudgetReductionHistory  projBudgetReductionHistory;

        return transId && (select firstonly projBudgetReductionHistory where projBudgetReductionHistory.ProjTransId   == transId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetReductionHistory</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjBudgetReductionHistory</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjBudgetReductionHistory find(
        recId               _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetReductionHistory projBudgetReductionHistory;

        projBudgetReductionHistory.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetReductionHistory.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            projBudgetReductionHistory
            where
                projBudgetReductionHistory.RecId == _recId;

        return projBudgetReductionHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProjTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetReductionHistory</c> table.
    /// </summary>
    /// <param name="_transId">
    /// The transaction ID of the record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetReductionHistory</c> table if it is found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetReductionHistory findByProjTransId(ProjTransIdBase _transId, boolean _forUpdate = false)
    {
        ProjBudgetReductionHistory      projBudgetReductionHistory;

        projBudgetReductionHistory.selectForUpdate(_forUpdate);

        select firstonly projBudgetReductionHistory
            where projBudgetReductionHistory.ProjTransId == _transId;

        return  projBudgetReductionHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetReductionHistory</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    /// The source document line ID of the <c>ProjBudgetReductionHistory</c> table to find.
    /// </param>
    /// <param name="_projId">
    /// The project ID of the <c>ProjBudgetReductionHistory</c> table to find.
    /// </param>
    /// <param name="_projCategoryId">
    /// The category ID of the <c>ProjBudgetReductionHistory</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetReductionHistory</c> table if it is found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetReductionHistory findBySourceDocumentLineDetails(recId _sourceDocumentLineId, ProjId _projId, ProjCategoryId _projCategoryId, boolean _forUpdate = false)
    {
        ProjBudgetReductionHistory      projBudgetReductionHistory;
        CostControlTransCommittedCost   costControlTransCommittedCost;

        projBudgetReductionHistory.selectForUpdate(_forUpdate);

        select firstonly projBudgetReductionHistory
            exists join costControlTransCommittedCost
                where costControlTransCommittedCost.ProjTransId == projBudgetReductionHistory.ProjTransId &&
                            costControlTransCommittedCost.SourceDocumentLine == _sourceDocumentLineId &&
                                costControlTransCommittedCost.ProjId == _projId &&
                                        costControlTransCommittedCost.CategoryId == _projCategoryId;

        return  projBudgetReductionHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForecastByProjAndCatId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified forecast table.
    /// </summary>
    /// <param name="_projId">
    /// The project ID.
    /// </param>
    /// <param name="_categoryId">
    /// The category ID.
    /// </param>
    /// <param name="_activityNumber">
    /// A <c>activityNumber</c> specifying the activity.
    /// </param>
    /// <returns>
    /// The forecast table.
    /// </returns>
    public static Common findForecastByProjAndCatId(ProjId _projId, CategoryId _categoryId, ProjActivityNumber _activityNumber)
    {
        ProjBudget                  projBudget;
        ProjBudgetLine              projBudgetLine;
        ProjForecastEmpl            projForecastEmpl;
        ProjForecastCost            projForecastCost;
        ProjForecastRevenue         projForecastRevenue;
        ForecastSales               forecastSales;
        Common                      projForecastTable;

        if (_activityNumber)
        {
            select RecId, RemainingBudgetForecastModel from projBudget
            join RecId, ProjBudget, ProjId, CategoryId, ActivityNumber, ProjTransType from  projBudgetLine
                where   projBudgetLine.ProjBudget == projBudget.RecId &&
                        projBudgetLine.ProjId == _projId &&
                        projBudgetLine.CategoryId == _categoryId &&
                        projBudgetLine.ActivityNumber == _activityNumber;
        }

    // If a budget line doesn't exist that matches the project, category and activity number combination
    // then search for a budget line that matches only the project, category and empty activity number combination.

        if (!projBudgetLine.RecId)
        {
            select RecId, RemainingBudgetForecastModel from projBudget
            join RecId, ProjBudget, ProjId, CategoryId, ActivityNumber, ProjTransType from  projBudgetLine
                where   projBudgetLine.ProjBudget == projBudget.RecId &&
                        projBudgetLine.ProjId == _projId &&
                        projBudgetLine.CategoryId == _categoryId &&
                        projBudgetLine.ActivityNumber == '';
        }

        switch (projBudgetLine.ProjTransType)
        {
            case ProjTransType::Hour :
                select projForecastEmpl
                where projForecastEmpl.ModelId == projBudget.RemainingBudgetForecastModel
                   && projForecastEmpl.ProjId == projBudgetLine.ProjId
                   && projForecastEmpl.CategoryId == projBudgetLine.CategoryId
                   && projForecastEmpl.ActivityNumber == projBudgetLine.ActivityNumber;
                if (projForecastEmpl)
                {
                    projForecastTable = projForecastEmpl;
                }
            break;

            case ProjTransType::Cost :
                select projForecastCost
                where projForecastCost.ModelId == projBudget.RemainingBudgetForecastModel
                   && projForecastCost.ProjId == projBudgetLine.ProjId
                   && projForecastCost.CategoryId == projBudgetLine.CategoryId
                   && projForecastCost.ActivityNumber == projBudgetLine.ActivityNumber;
                if (projForecastCost)
                {
                    projForecastTable = projForecastCost;
                }
            break;

            case ProjTransType::Item :
                select forecastSales
                where forecastSales.ModelId == projBudget.RemainingBudgetForecastModel
                   && forecastSales.ProjId == projBudgetLine.ProjId
                   && forecastSales.ProjCategoryId == projBudgetLine.CategoryId
                   && forecastSales.ActivityNumber == projBudgetLine.ActivityNumber;
                if (forecastSales)
                {
                    projForecastTable = forecastSales;
                }
            break;

            case ProjTransType::Revenue :
                select projForecastRevenue
                where projForecastRevenue.ModelId == projBudget.RemainingBudgetForecastModel
                   && projForecastRevenue.ProjId == projBudgetLine.ProjId
                   && projForecastRevenue.CategoryId == projBudgetLine.CategoryId;
                if (projForecastRevenue)
                {
                    projForecastTable = projForecastRevenue;
                }
            break;

            default :
                projForecastTable = null;
        }

        return projForecastTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForecastTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified forecast table.
    /// </summary>
    /// <param name="_projBudgetAllocationLineRecId">
    /// The record ID of the <c>ProjBudgetAllocationLine</c> table.
    /// </param>
    /// <returns>
    /// The forecast table.
    /// </returns>
    public static Common findForecastTable(RefRecId _projBudgetAllocationLineRecId)
    {
        ProjBudget                  projBudget;
        ProjBudgetLine              projBudgetLine;
        ProjBudgetAllocationLine    projBudgetAllocationLine;
        ProjForecastEmpl            projForecastEmpl;
        ProjForecastCost            projForecastCost;
        ProjForecastRevenue         projForecastRevenue;
        ForecastSales               forecastSales;
        Common                      projForecastTable;

        select RecId, ProjBudgetLine from projBudgetAllocationLine
            where projBudgetAllocationLine.RecId == _projBudgetAllocationLineRecId
        join RecId, ProjBudget, CategoryId, ProjTransType, ActivityNumber, ProjId from projBudgetLine
            where projBudgetLine.RecId == projBudgetAllocationLine.ProjBudgetLine
        join RecId, RemainingBudgetForecastModel from projBudget
            where projBudget.RecId == projBudgetLine.ProjBudget;

        switch (projBudgetLine.ProjTransType)
        {
            case ProjTransType::Hour :
                select projForecastEmpl
                where projForecastEmpl.ModelId == projBudget.RemainingBudgetForecastModel
                   && projForecastEmpl.ProjId == projBudgetLine.ProjId
                   && projForecastEmpl.CategoryId == projBudgetLine.CategoryId
                   && projForecastEmpl.ActivityNumber == projBudgetLine.ActivityNumber;
                if (projForecastEmpl)
                {
                    projForecastTable = projForecastEmpl;
                }
            break;

            case ProjTransType::Cost :
                select projForecastCost
                where projForecastCost.ModelId == projBudget.RemainingBudgetForecastModel
                   && projForecastCost.ProjId == projBudgetLine.ProjId
                   && projForecastCost.CategoryId == projBudgetLine.CategoryId
                   && projForecastCost.ActivityNumber == projBudgetLine.ActivityNumber;
                if (projForecastCost)
                {
                    projForecastTable = projForecastCost;
                }
            break;

            case ProjTransType::Item :
                select forecastSales
                where forecastSales.ModelId == projBudget.RemainingBudgetForecastModel
                   && forecastSales.ProjId == projBudgetLine.ProjId
                   && forecastSales.ProjCategoryId == projBudgetLine.CategoryId
                   && forecastSales.ActivityNumber == projBudgetLine.ActivityNumber;
                if (forecastSales)
                {
                    projForecastTable = forecastSales;
                }
            break;

            case ProjTransType::Revenue :
                select projForecastRevenue
                where projForecastRevenue.ModelId == projBudget.RemainingBudgetForecastModel
                   && projForecastRevenue.ProjId == projBudgetLine.ProjId
                   && projForecastRevenue.CategoryId == projBudgetLine.CategoryId;
                if (projForecastRevenue)
                {
                    projForecastTable = projForecastRevenue;
                }
            break;

            default :
                projForecastTable = null;
        }

        return projForecastTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS320308</DeveloperDocumentation>
	<Label>@SYS300164</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjTransId</TitleField1>
	<TitleField2>ProjTransType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>TransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Label>@SYS80378</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjIdOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountReduced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmountReduced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetAllocationLineIdCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjBudgetAllocationLineIdSales</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjIdOrig</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountReduced</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesAmountReduced</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmountReduced</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetAllocationLineIdCost</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS300165</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjBudgetAllocationLineIdSales</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS300166</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjIdOrig</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesAmountReduced</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAmount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjBudgetAllocationLineCostIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetAllocationLineIdCost</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjBudgetAllocationLineSalesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjBudgetAllocationLineIdSales</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetAllocationLineCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetAllocationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjBudgetAllocationLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBudgetAllocationLine_ProjBudgetReductionHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetAllocationLineIdCost</Name>
					<Field>ProjBudgetAllocationLineIdCost</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjBudgetAllocationLineSales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjBudgetAllocationLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjBudgetAllocationLine_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBudgetAllocationLine_1_ProjBudgetReductionHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjBudgetAllocationLineIdSales</Name>
					<Field>ProjBudgetAllocationLineIdSales</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjBudgetReductionHistory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjIdOrig</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjIdOrig</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>