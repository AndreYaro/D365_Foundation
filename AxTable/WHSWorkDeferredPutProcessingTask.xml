<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredPutProcessingTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkDeferredPutProcessingTask extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the deferred put processing task can be cancelled.
    /// </summary>
    /// <returns>True if record can be cancelled; Otherwise, false.</returns>
    public boolean canCancel()
    {
        return this.checkStatusAllowCancellation(false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanCancelWithWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the deferred put processing task can be cancelled.
    /// </summary>
    /// <returns>True if record can be cancelled; Otherwise false is returned and a warning is issued to the infolog.</returns>
    [Hookable(false)]
    internal boolean checkCanCancelWithWarning()
    {
        return this.checkStatusAllowCancellation(false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the deferred put processing task. The deferred put processing task will be deleted together with the corresponding batch.
    /// The work will be unblocked, allowing the user to resume the work on the mobile app.
    /// </summary>
    public void cancel()
    {
        ttsbegin;

        if (this.checkStatusAllowCancellation(true, false))
        {
            this.Status = WHSWorkDeferredOperationStatus::Canceled;

            this.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret)
        {
            ret = this.checkStatusAllowDeletion(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        this.checkStatusAllowDeletion(true);
        
        this.deleteWorkDeferredPutProcessingTaskBatch();

        super();

        WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(this.WorkId).tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::DeferredPutOperation);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorkDeferredPutProcessingTaskBatch</Name>
				<Source><![CDATA[
    private void deleteWorkDeferredPutProcessingTaskBatch()
    {
        WHSWorkDeferredPutProcessingTaskBatch workDeferredPutProcessingTaskBatch;

        delete_from workDeferredPutProcessingTaskBatch
            where workDeferredPutProcessingTaskBatch.WorkId == this.WorkId
                && workDeferredPutProcessingTaskBatch.WorkLineNumber == this.WorkLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusAllowDeletion</Name>
				<Source><![CDATA[
    private boolean checkStatusAllowDeletion(boolean _throwError)
    {
        if (!this.statusAllowDeletion())
        {
            str errorTxt = strFmt("@WAX:WHSWorkDeferredPutProcessingTask_StatusDoesNotAllowDeletionError", this.WorkId, this.Status);

            if (_throwError)
            {
                throw error(errorTxt);
            }
            
            return checkFailed(errorTxt);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusAllowsProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the status allows processing of the task.
    /// </summary>
    /// <param name = "_infoOnFailure">A boolean determining if failure should be issued to the info log.</param>
    /// <returns>true if the status allows processing; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean checkStatusAllowsProcessing(boolean _infoOnFailure)
    {
        switch (this.Status)
        {
            case WHSWorkDeferredOperationStatus::Failed:  // Fallthrough;
            case WHSWorkDeferredOperationStatus::Awaiting: return true;

            case WHSWorkDeferredOperationStatus::Started:
                if (_infoOnFailure)
                {
                    throw error(strFmt("@WAX:WHSWorkDeferredPutProcessingTaskStatusDoesNotAllowProcessingFailure", this.WorkId, this.WorkLineNumber, this.Status));
                }
                return false;
            case WHSWorkDeferredOperationStatus::Completed: // Fallthrough
            case WHSWorkDeferredOperationStatus::Canceled:
                if (_infoOnFailure)
                {
                    warning(strFmt("@WAX:WHSWorkDeferredPutProcessingTaskStatusDoesNotAllowProcessingFailure", this.WorkId, this.WorkLineNumber, this.Status));
                }
                return false;
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowDeletion</Name>
				<Source><![CDATA[
    private boolean statusAllowDeletion()
    {
        switch (this.Status)
        {
            case WHSWorkDeferredOperationStatus::Canceled:
            case WHSWorkDeferredOperationStatus::Completed:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusAllowCancellation</Name>
				<Source><![CDATA[
    private boolean checkStatusAllowCancellation(boolean _throwError, boolean _useWarning)
    {
        if (!this.statusAllowCancellation())
        {
            if (_throwError)
            {
                throw error(strFmt("@WAX:WHSWorkDeferredPutProcessingTask_StatusDoesNotAllowCancellationError", this.WorkId, this.Status));
            }
            else if (_useWarning)
            {
                warning(strFmt("@WAX:WHSWorkDeferredPutProcessingTask_StatusDoesNotAllowCancellationError", this.WorkId, this.Status));
            }
            
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowCancellation</Name>
				<Source><![CDATA[
    private boolean statusAllowCancellation()
    {
        return this.Status == WHSWorkDeferredOperationStatus::Failed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal WHSWorkDeferredPutProcessingTask find(
        WHSWorkId                   _workId,
        LineNum                     _workLineNumber,
        boolean                     _forUpdate = false,
        boolean                     _withPessimisticLock = false)
    {
        WHSWorkDeferredPutProcessingTask  workDeferredPutProcessingTask;

        workDeferredPutProcessingTask.selectForUpdate(_forUpdate);

        if (_workId && _workLineNumber)
        {
            if (_withPessimisticLock)
            {
                select firstonly pessimisticlock workDeferredPutProcessingTask
                    where workDeferredPutProcessingTask.WorkId == _workId
                        && workDeferredPutProcessingTask.WorkLineNumber == _workLineNumber;
            }
            else
            {
                select firstonly workDeferredPutProcessingTask
                    where workDeferredPutProcessingTask.WorkId == _workId
                        && workDeferredPutProcessingTask.WorkLineNumber == _workLineNumber;
            }
        }

        return workDeferredPutProcessingTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal WHSWorkDeferredPutProcessingTask findByRecId(
        RefRecId                    _recId,
        boolean                     _forUpdate = false,
        boolean                     _withPessimisticLock = false)
    {
        WHSWorkDeferredPutProcessingTask  workDeferredPutProcessingTask;

        workDeferredPutProcessingTask.selectForUpdate(_forUpdate);

        if (_recId)
        {
            if (_withPessimisticLock)
            {
                select firstonly pessimisticlock workDeferredPutProcessingTask
                    where workDeferredPutProcessingTask.RecId == _recId;
            }
            else
            {
                select firstonly workDeferredPutProcessingTask
                    where workDeferredPutProcessingTask.RecId == _recId;
            }
        }

        return workDeferredPutProcessingTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatusAndSetRelatedTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the status and related time fields and updates the record if the status is changed.
    /// </summary>
    /// <param name = "_newStatus">The new status.</param>
    [Hookable(false)]
    internal void changeStatusAndSetRelatedTime(WHSWorkDeferredOperationStatus _newStatus)
    {
        if (this.Status != _newStatus)
        {
            this.Status = _newStatus;
        
            switch (this.Status)
            {
                case WHSWorkDeferredOperationStatus::Started:  this.setStartDateTime();
                    break;

                case WHSWorkDeferredOperationStatus::Completed:  this.setCompletionDateTime();
                    break;

            }

            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromPutOperationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkDeferredPutProcessingTask createFromPutOperationParameters(WHSWorkPutOperationParameters _parameters)
    {
        WHSWorkDeferredPutProcessingTask workDeferredPutProcessingTask;
        ttsbegin;

        workDeferredPutProcessingTask.initFromPutOperationParameters(_parameters);
        workDeferredPutProcessingTask.insert();
   
        ttscommit;
   
        return workDeferredPutProcessingTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPutOperationParameters</Name>
				<Source><![CDATA[
    private void initFromPutOperationParameters(WHSWorkPutOperationParameters _parameters)
    {
        this.initValue();
        this.WorkId = _parameters.parmWorkId();
        this.WorkLineNumber = _parameters.parmLineNum();
        this.WorkLineRecVersion = WHSWorkLine::find(this.WorkId, this.WorkLineNumber).RecVersion;
        this.WorkInventLocationId = WHSWorkTable::find(_parameters.parmWorkId()).InventLocationId;
        this.PutWMSLocationId  = _parameters.parmPutWMSlocationId();
        this.SourceLicensePlateId  = _parameters.parmSourceLicensePlateId();
        this.TargetLicensePlateId = _parameters.parmTargetLicensePlateId();
        this.HandleByLicensePlate = _parameters.parmHandleByLP();
        this.WorkUserId = _parameters.parmUserId();
        this.WorkPutFlow = _parameters.parmWorkPutFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartDateTime</Name>
				<Source><![CDATA[
    private void setStartDateTime()
    {
        this.StartDateTime = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompletionDateTime</Name>
				<Source><![CDATA[
    private void setCompletionDateTime()
    {
        this.CompletionDateTime = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchHistoryExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any records batch history records exist for the processing task.
    /// </summary>
    /// <returns>true if a record exists; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean batchHistoryExists()
    {
        return (this.lastCreatedBatchHistory().RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastCreatedBatchHistory</Name>
				<Source><![CDATA[
    private BatchHistory lastCreatedBatchHistory()
    {
        BatchHistory batchHistory;
        if (this.WorkId && this.WorkLineNumber)
        {
            WHSWorkDeferredPutProcessingTaskBatch   workDeferredPutProcessingTaskBatch;
        
            select firstOnly batchHistory
                order by CreatedDateTime desc
             exists join workDeferredPutProcessingTaskBatch
                where workDeferredPutProcessingTaskBatch.WorkId == this.WorkId
                    && workDeferredPutProcessingTaskBatch.WorkLineNumber == this.WorkLineNumber
                    && workDeferredPutProcessingTaskBatch.Batch == batchHistory.BatchId;
        }
        
        return batchHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any records batch job records exist for the processing task.
    /// </summary>
    /// <returns>true if a record exists; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean batchExists()
    {
        
        return (this.lastBatch().RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastBatch</Name>
				<Source><![CDATA[
    private Batch lastBatch()
    {
        Batch batch;
        if (this.WorkId && this.WorkLineNumber)
        {
            WHSWorkDeferredPutProcessingTaskBatch  workDeferredPutProcessingTaskBatch;
            select firstonly batch
                order by CreatedDateTime desc
            exists join workDeferredPutProcessingTaskBatch
                where workDeferredPutProcessingTaskBatch.WorkId == this.WorkId
                    && workDeferredPutProcessingTaskBatch.WorkLineNumber == this.WorkLineNumber
                    && workDeferredPutProcessingTaskBatch.Batch == batch.RecId;
        }
        
        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobStatusText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string that describes the status of the related batch job or history.
    /// </summary>
    /// <returns>A string that describes the status of the related batch job or history.</returns>
    [SysClientCacheDataMethodAttribute(true), Hookable(false)]
    internal display WHSBatchJobStatusText batchJobStatusText()
    {
        var batchHistory = this.lastCreatedBatchHistory();

        //The most likely is that the batch history exists
        if (batchHistory.RecId)
        {
            return enum2Str(batchHistory.Status);
        }

        var batch = this.lastBatch();

        if (batch.RecId)
        {
            return enum2Str(batch.Status);
        }

        return "@WAX:WHSBatchJobStatusText_NoBatchJobText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSAndTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSWorkDeferredPutProcessingTaskDevDocumentation</DeveloperDocumentation>
	<FormRef>WHSWorkDeferredPutProcessingTask</FormRef>
	<Label>@WAX:WHSWorkDeferredPutProcessingTaskTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>WorkId</TitleField1>
	<TitleField2>WorkUserId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkIdWorkLineNumberIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkIdWorkLineNumberIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkLineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkInventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PutWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkPutFlow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceLicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TargetLicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HandleByLicensePlate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompletionDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PutWMSLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WorkLineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkPutFlow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSWorkPutFlow</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceLicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TargetLicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSTargetLicensePlateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HandleByLicensePlate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSAndTMS</ConfigurationKey>
			<ExtendedDataType>WHSHandleByLP</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkInventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSWorkDeferredOperationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>WHSWorkDeferredProcessingTaskStartDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>CompletionDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>WHSWorkDeferredProcessingTaskCompletionDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkLineRecVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>RecVersion</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkIdWorkLineNumberIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WorkLineNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WorkTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WHSUser</Name>
					<Field>WorkUserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TargetLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TargetLicensePlateId</Name>
					<Field>TargetLicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceLicensePlateId</Name>
					<Field>SourceLicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PutWorkLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkId</Name>
					<Field>WorkId</Field>
					<RelatedField>WorkId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkLineNumber</Name>
					<Field>WorkLineNumber</Field>
					<RelatedField>LineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkInventLocationId</Name>
					<Field>WorkInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PutLocation</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkInventLocationId</Name>
					<Field>WorkInventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PutWMSLocationId</Name>
					<Field>PutWMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>