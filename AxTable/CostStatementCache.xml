<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostStatementCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostStatementCache extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cost statement caches.
    /// </summary>
    /// <param name = "_contextId">
    /// The context ID for the cached data.
    /// </param>
    public static void updateCache(SysDataCacheContextId _contextId)
    {
        CostStatementCacheTrackDeltaUpdate      current, previous;
        CostStatementCacheTransDateView         costStatementCacheTransDateView;
        CostObjectStatementCache                costObjectStatementCache;
        CostStatementCache                      costStatementCache;
        CostStatementView                       costStatementView;

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(tableStr(CostStatementCache));

        StartDate startDate = LedgerFiscalCalendar::findFirstOpenStartDateInAnyYear(CompanyInfoHelper::fiscalCalendarRecId(), dateNull());

        using (var updateCacheActivityContext = instrumentationLogger.statementCacheActivities().updateCache(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - startDate, _contextId))
        {
            CostStatementViewBuilder::main(null);

            ttsbegin;
            CostStatementCacheOpenPeriod costStatementCacheOpenPeriod = CostStatementCacheOpenPeriod::find(true);

            select firstonly previous;

            int64 previousUpdateNumber = previous.UpdateNumber;
            int64 currentUpdateNumber = previousUpdateNumber + 1;

            var stopWatch = new System.Diagnostics.Stopwatch();
            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = instrumentationLogger.properties();

            stopWatch.Restart();

            // Outer join to previous update is slower than insert/update because the optimizer does the outer join on each row and not on the
            // aggregate level.
            insert_recordset current
                (SysDataCacheContextId, UpdateNumber, Transdate, TransactionCount)
            select _contextId, currentUpdateNumber, TransDate, count(RecId)
            from costStatementCacheTransDateView
            group by TransDate
            where costStatementCacheTransDateView.TransDate >= costStatementCacheOpenPeriod.StartDate;

            update_recordset current
                setting PreviousTransactionCount = previous.TransactionCount
                join previous
                where current.UpdateNumber == currentUpdateNumber
                    && previous.UpdateNumber == previousUpdateNumber
                    && previous.TransDate == current.TransDate;
            
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.DeleteOpenPeriod, stopWatch.ElapsedMilliseconds));

            if (previousUpdateNumber)
            {
                CostStatementCacheTrackDeltaUpdate      deltaUpDate;

                delete_from deltaUpDate
                where deltaUpDate.UpdateNumber == previousUpdateNumber;

                select minof(TransDate)
                from deltaUpDate
                where deltaUpDate.UpdateNumber == currentUpdateNumber
                   && deltaUpDate.TransactionCount != deltaUpDate.PreviousTransactionCount;

                if (deltaUpDate.TransDate)
                {
                    // Delete one statement type at a time to hit the clustered index.
                    var dictEnum = new SysDictEnum(enumNum(CostStatementType));
                    CostStatementType costStatementType = dictEnum.firstValue();
                    do
                    {
                        stopWatch.Restart();

                        delete_from costObjectStatementCache
                        where costObjectStatementCache.StatementType == costStatementType
                           && costObjectStatementCache.TransDate >= deltaUpDate.TransDate // Help optimizer to seek on TransDate
                        exists join current
                        where current.TransDate == costObjectStatementCache.TransDate
                           && current.UpdateNumber == currentUpdateNumber
                           && current.TransactionCount != current.PreviousTransactionCount;

                        instrumentationPropertyCollection.add(loggerProperties.addCostStatementTypeDuration(loggerProperties.DeleteObjectStatementCache, costStatementType, stopWatch.ElapsedMilliseconds));

                        costStatementType = dictEnum.nextValue(costStatementType);
                    }
                    while (costStatementType != dictEnum.firstValue());

                    stopWatch.Restart();

                    insert_recordset costObjectStatementCache
                        (SysDataCacheContextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3,
                            ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId, Qty, Amount)
                    // Use of forceliterals avoid reusing existing query plan where the optimizer doesn't chose to seek on transdate in scenario where customer adjusts starting inventory after several months use of the system.
                    select forceliterals _contextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3,
                                            ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId, sum(Qty), sum(Amount)
                    from costStatementView
                    group by StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3,
                                ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId
                    where costStatementView.TransDate >= deltaUpDate.TransDate // Help optimizer to seek on TransDate
                    exists join current
                    where current.TransDate == costStatementView.TransDate
                        && current.UpdateNumber == currentUpdateNumber
                        && current.TransactionCount != current.PreviousTransactionCount;

                    instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.InsertCostObjectStatementCache, stopWatch.ElapsedMilliseconds));

                    // Aggregate and insert one statement type at a time to hit the clustered index.
                    costStatementType = dictEnum.firstValue();
                    do
                    {
                        stopWatch.Restart();

                        delete_from costStatementCache
                        where costStatementCache.StatementType == costStatementType
                           && costStatementCache.TransDate >= deltaUpDate.TransDate // Help optimizer to seek on TransDate
                        exists join current
                        where current.TransDate == costStatementCache.TransDate
                           && current.UpdateNumber == currentUpdateNumber
                           && current.TransactionCount != current.PreviousTransactionCount;

                        insert_recordset costStatementCache
                            (SysDataCacheContextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, Qty, Amount)
                        select _contextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, sum(Qty), sum(Amount)
                        from costObjectStatementCache
                        group by StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3
                        where costObjectStatementCache.StatementType == costStatementType
                           && costObjectStatementCache.TransDate >= deltaUpDate.TransDate // Help optimizer to seek on TransDate
                        exists join current
                        where current.TransDate == costObjectStatementCache.TransDate
                           && current.UpdateNumber == currentUpdateNumber
                           && current.TransactionCount != current.PreviousTransactionCount;

                        instrumentationPropertyCollection.add(loggerProperties.addCostStatementTypeDuration(loggerProperties.RebuildCostStatementCache, costStatementType, stopWatch.ElapsedMilliseconds));

                        costStatementType = dictEnum.nextValue(costStatementType);
                    }
                    while (costStatementType != dictEnum.firstValue());

                    CostStatementCache::cacheUpdatedAfter(deltaUpDate.TransDate);
                }
            }
            else
            {
                stopWatch.Restart();
                    
                delete_from costObjectStatementCache;

                insert_recordset costObjectStatementCache
                    (SysDataCacheContextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId, Qty, Amount)
                select _contextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId, sum(Qty), sum(Amount)
                from costStatementView
                group by StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId
                where costStatementView.TransDate > dateNull();

                instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.RebuildCostObjectStatementCache, stopWatch.ElapsedMilliseconds));

                stopWatch.Restart();

                delete_from costStatementCache;

                insert_recordset costStatementCache
                    (SysDataCacheContextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, Qty, Amount)
                select _contextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, sum(Qty), sum(Amount)
                from costObjectStatementCache
                group by StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3;

                instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.RebuildCostStatementCache, stopWatch.ElapsedMilliseconds));

                TransDate dateOfFirstCacheEntry = CostObjectStatementCache::getDateOfFirstCacheEntry(CostStatementType::Inventory);

                CostStatementCache::cacheUpdatedAfter(dateOfFirstCacheEntry);
            }

            if (costStatementCacheOpenPeriod.StartDate != startDate)
            {
                costStatementCacheOpenPeriod.StartDate = startDate;
                costStatementCacheOpenPeriod.update();
            }
            ttscommit;

            instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheUpdatedAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event to notify consumers that the cache entries has been updated after a given date.
    /// </summary>
    /// <param name = "_transDate">
    /// The first date where the cache entries was updated.
    /// </param>
    static delegate void cacheUpdatedAfter(TransDate _transDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBeginnigBalancesOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates beginning balances on the specified date.
    /// </summary>
    /// <param name = "_beginningDate">
    /// The date to create the beginning balances.
    /// </param>
    /// <param name = "_contextId">
    /// The context used for logging instrumentation.
    /// </param>
    /// <remarks>
    /// Entries before the specified date are deleted.
    /// </remarks>
    static private void createBeginnigBalancesOnDate(TransDate _beginningDate, int64 _contextId)
    {
        CostStatementCache              costStatementCache, insertCostStatementCache;
        CostObjectStatementCache        costObjectStatementCache, insertCostObjectStatementCache;

        const CostStatementLineCategoryLevel1 beginningStatementLineCategoryLevel1 = CostStatementLineCategoryLevel1::BeginningBalance;
        const CostStatementLineCategoryLevel2 beginningStatementLineCategoryLevel2 = CostStatementLineCategoryLevel2::None;
        const CostStatementLineCategoryLevel3 beginningStatementLineCategoryLevel3 = CostStatementLineCategoryLevel3::None;

        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(tableStr(CostStatementCache));

        using (var updateCacheActivityContext = instrumentationLogger.statementCacheActivities().createBeginningBalancesOnDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - _beginningDate, _contextId))
        {
            var stopWatch = new System.Diagnostics.Stopwatch();
            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = instrumentationLogger.properties();

            // Create beginning balances for one statement type at a time to hit the clustered index.
            SysDictEnum dictEnum = new SysDictEnum(enumNum(CostStatementType));
            CostStatementType costStatementType = dictEnum.firstValue();
            do
            {
                ttsbegin;

                stopWatch.Restart();

                insert_recordset insertCostObjectStatementCache
                    (SysDataCacheContextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId, Qty, Amount)
                    select pessimisticLock SysDataCacheContextId, StatementType, _beginningDate, beginningStatementLineCategoryLevel1, beginningStatementLineCategoryLevel2, beginningStatementLineCategoryLevel3, ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId, sum(Qty), sum(Amount)
                    from costObjectStatementCache
                    group by SysDataCacheContextId, StatementType, ResourceType, ResourceId, ResourceGroupId, ConfigId, ColorId, SizeId, StyleId, SiteId
                    where costObjectStatementCache.StatementType == costStatementType
                       && costObjectStatementCache.TransDate < _beginningDate;

                delete_from costObjectStatementCache
                    where costObjectStatementCache.StatementType == costStatementType
                       && ((costObjectStatementCache.TransDate < _beginningDate) ||
                           (costObjectStatementCache.TransDate == _beginningDate && costObjectStatementCache.Amount == 0.0 && costObjectStatementCache.Qty == 0.0));

                instrumentationPropertyCollection.add(loggerProperties.addCostStatementTypeDuration(loggerProperties.RebuildCostObjectStatementCache, costStatementType, stopWatch.ElapsedMilliseconds));

                stopWatch.Restart();

                insert_recordset insertCostStatementCache
                    (SysDataCacheContextId, StatementType, TransDate, StatementLineCategoryLevel1, StatementLineCategoryLevel2, StatementLineCategoryLevel3, Qty, Amount)
                    select pessimisticLock SysDataCacheContextId, StatementType, _beginningDate, beginningStatementLineCategoryLevel1, beginningStatementLineCategoryLevel2, beginningStatementLineCategoryLevel3, sum(Qty), sum(Amount)
                    from costStatementCache
                    group by SysDataCacheContextId, StatementType
                    where costStatementCache.StatementType == costStatementType
                       && costStatementCache.TransDate < _beginningDate;

                delete_from costStatementCache
                    where costStatementCache.StatementType == costStatementType
                       && ((costStatementCache.TransDate < _beginningDate) ||
                           (costStatementCache.TransDate == _beginningDate && costStatementCache.Amount == 0.0 && costStatementCache.Qty == 0.0));

                instrumentationPropertyCollection.add(loggerProperties.addCostStatementTypeDuration(loggerProperties.RebuildCostStatementCache, costStatementType, stopWatch.ElapsedMilliseconds));

                ttscommit;

                costStatementType = dictEnum.nextValue(costStatementType);
            }
            while (costStatementType != dictEnum.firstValue());

            instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainBeginningBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains the beginning balances in the cache.
    /// </summary>
    /// <remarks>
    /// Beginning balances are created if there is data in the cache before period specified in parameters and all prior financial periods are closed.
    /// </remarks>
    public static void maintainBeginningBalances()
    {
        CostObjectStatementCache        costObjectStatementCache;

        select firstonly TransDate
            from costObjectStatementCache
            order by TransDate
            where costObjectStatementCache.StatementType == CostStatementType::Inventory;

        TransDate beginningDate = costObjectStatementCache.TransDate;
        CostParameters costParameters = CostParameters::find();
        const int Months = 12;

        if (dateMthFwd(beginningDate, enum2int(costParameters.StatementCacheAggregationAfter) * Months) < DateTimeUtil::getSystemDate(DateTimeUtil::getCompanyTimeZone()))
        {
            LedgerRecId ledgerRecId = Ledger::current();
            RecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

            FiscalCalendarPeriod        fiscalCalendarPeriod;
            LedgerFiscalCalendarPeriod  ledgerFiscalCalendarPeriod;
            do
            {
                fiscalCalendarPeriod = FiscalCalendarPeriod::findPeriodByCalendarDate(fiscalCalendarRecId, beginningDate);
                ledgerFiscalCalendarPeriod = LedgerFiscalCalendar::findLedgerPeriod(fiscalCalendarPeriod.recId, ledgerRecId);

                if (ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Closed)
                {
                    beginningDate = fiscalCalendarPeriod.EndDate + 1;
                    costStatementCache::createBeginnigBalancesOnDate(beginningDate, fiscalCalendarPeriod.RecId);
                }
            }
            while (ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Closed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cache.
    /// </summary>
    public static void clearCache()
    {
        CostStatementCacheOpenPeriod            costStatementCacheOpenPeriod;
        CostStatementCacheTrackDeltaUpdate      costStatementCacheTrackDeltaUpdate;
        CostObjectStatementCache                costObjectStatementCache;
        CostStatementCache                      costStatementCache;
        CostManagementInstrumentationLogger     instrumentationLogger = CostManagementInstrumentationLogger::createLogger(tableStr(CostStatementCache));

        using (var clearCacheActivityContext = instrumentationLogger.statementCacheActivities().clearCache())
        {
            Set instrumentationPropertyCollection = new Set(Types::Class);
            var stopWatch = new System.Diagnostics.Stopwatch();
            var loggerProperties = instrumentationLogger.properties();

            ttsbegin;

            stopWatch.Restart();
            
            delete_from costStatementCacheOpenPeriod;

            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.DeleteOpenPeriod, stopWatch.ElapsedMilliseconds));

            stopWatch.Restart();

            delete_from costStatementCacheTrackDeltaUpdate;

            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.DeleteTrackDeltaUpdate, stopWatch.ElapsedMilliseconds));

            stopWatch.Restart();
            
            delete_from costObjectStatementCache;
            
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.DeleteObjectStatementCache, stopWatch.ElapsedMilliseconds));

            stopWatch.Restart();
                
            delete_from costStatementCache;
            
            instrumentationPropertyCollection.add(loggerProperties.addSubDuration(loggerProperties.DeleteStatementCache, stopWatch.ElapsedMilliseconds));
            ttscommit;

            instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@CostManagement:DeveloperDocCostStatementCache</DeveloperDocumentation>
	<Label>@CostManagement:CostStatementCache_TableName</Label>
	<ClusteredIndex>PrimaryKeyIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>PrimaryKeyIdx</PrimaryIndex>
	<StorageMode>InMemory</StorageMode>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatementType</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>CostStatementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatementLineCategoryLevel1</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>CostStatementLineCategoryLevel1</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatementLineCategoryLevel2</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>CostStatementLineCategoryLevel2</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatementLineCategoryLevel3</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>CostStatementLineCategoryLevel3</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysDataCacheContextId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysDataCacheContextId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrimaryKeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StatementType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatementLineCategoryLevel1</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatementLineCategoryLevel2</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatementLineCategoryLevel3</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysDataSetCacheTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysDataCacheContextId</MapField>
					<MapFieldTo>SysDataCacheContextId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CostWIPStatementMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
					<MapFieldTo>Amount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatementLineCategoryLevel2</MapField>
					<MapFieldTo>StatementLineCategoryLevel2</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CostInventoryStatementMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
					<MapFieldTo>Amount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatementLineCategoryLevel1</MapField>
					<MapFieldTo>StatementLineCategoryLevel1</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatementLineCategoryLevel2</MapField>
					<MapFieldTo>StatementLineCategoryLevel2</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatementLineCategoryLevel3</MapField>
					<MapFieldTo>StatementLineCategoryLevel3</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatementType</MapField>
					<MapFieldTo>StatementType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>