<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTrans_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxTrans_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.TaxTrans != 0)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.TaxTrans != 0)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!TaxTrans_IT::exist(_recId))
        {
            isExisting = checkFailed(strFmt(TaxTrans_IT::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// A value that indicates whether the specified record in the <c>TaxTrans_IT</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxTrans_IT</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        TaxTrans_IT taxTrans_IT;

        select firstonly RecId from taxTrans_IT
            where taxTrans_IT.RecId == _recId;

        return taxTrans_IT != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxTrans_IT</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TaxTrans_IT</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxTrans_IT</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxTrans_IT find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxTrans_IT taxTrans_IT;

        taxTrans_IT.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxTrans_IT.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxTrans_IT
            where taxTrans_IT.RecId == _recId;

        return taxTrans_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified <c>TaxTrans_IT</c> record.
    /// </summary>
    /// <param name="_taxTransRecId">
    /// The record ID of a <c>TaxTrans</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, select the table for update
    /// </param>
    /// <returns>
    /// A <c>TaxTrans_IT</c> record; otherwise, an empty record.
    /// </returns>
    public static TaxTrans_IT findByTaxTrans(RecId _taxTransRecId, boolean _forUpdate = false)
    {
        TaxTrans_IT taxTrans_IT;

        taxTrans_IT.selectForUpdate(_forUpdate);

        if (_taxTransRecId != 0)
        {
            select firstonly taxTrans_IT
                where taxTrans_IT.TaxTrans == _taxTransRecId;
        }

        return taxTrans_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the current transaction is a split payment transaction (direct or reverse).
    /// </summary>
    /// <returns>
    /// true, if the current transaction is a split payment transaction (direct or reverse); otherwise false.
    /// </returns>
    public boolean isSplitPayment()
    {
        return this.SplitPaymDirect || this.SplitPaymReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsReversedTaxTransWithSameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the reversed tax transaction with the same voucher exists.
    /// </summary>
    /// <param name = "_taxTrans">The <c>TaxTrans</c> record.</param>
    /// <returns>true if reversed tax transaction with the same voucher exists, otherwise false.</returns>
    public static boolean existsReversedTaxTransWithSameVoucher(TaxTrans _taxTrans)
    {
        TaxTrans revTaxTrans;

        select firstOnly RecId from revTaxTrans
            where revTaxTrans.Voucher == _taxTrans.Voucher
                && revTaxTrans.TaxOrigin == TaxOrigin::TaxReversed;

        return revTaxTrans.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>IT</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4881167</DeveloperDocumentation>
	<Label>@SYS23189</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxTrans</TitleField1>
	<TitleField2>dataAreaId</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TaxTransIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitPaymReverse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitPaymDirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceApproval</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SplitPayment</Name>
			<Label>@AccountsReceivable:SplitPayment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SplitPaymDirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitPaymReverse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Plafond</Name>
			<Label>@ExtendedItallianLocalization:Plafond</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntentLetterOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntentLetterId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InvoiceRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxTransRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SplitPaymDirect</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SplitPaymDirect_IT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SplitPaymReverse</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SplitPaymReverse_IT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntentLetterId</Name>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>IntentLetterInternalId_IT</ExtendedDataType>
			<FeatureClass>IntentLettersFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IntentLetterOrigin</Name>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<FeatureClass>IntentLettersFeature</FeatureClass>
			<EnumType>IntentLetterOrigin_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PlafondDate</Name>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>PlafondDate_IT</ExtendedDataType>
			<FeatureClass>IntentLettersFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlafondId</Name>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>PlafondId_IT</ExtendedDataType>
			<FeatureClass>IntentLettersFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceApproval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IntentLetterIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IntentLetterId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IntentLetterOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlafondIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlafondId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>TaxTrans</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TaxTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTrans</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>TaxTrans_IT</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxTrans</Name>
					<Field>TaxTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>IntentLetter</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>IntentLetter_IT</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>IntentLetterOrigin</Name>
					<Field>IntentLetterOrigin</Field>
					<ValueStr>IntentLetterOrigin_IT::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntentLetterId</Name>
					<Field>IntentLetterId</Field>
					<RelatedField>IntentLetterId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustIntentLetter</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustIntentLetter_IT</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>IntentLetterOrigin</Name>
					<Field>IntentLetterOrigin</Field>
					<ValueStr>IntentLetterOrigin_IT::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntentLetterId</Name>
					<Field>IntentLetterId</Field>
					<RelatedField>InternalLetterId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Plafond_IT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Plafond_IT</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlafondId</Name>
					<SourceEDT>PlafondId</SourceEDT>
					<Field>PlafondId</Field>
					<RelatedField>PlafondId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlafondIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>