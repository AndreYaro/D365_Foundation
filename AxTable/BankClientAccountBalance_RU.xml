<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankClientAccountBalance_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankClientAccountBalance_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>make</Name>
				<Source><![CDATA[
    void make()
    {
        BankClientAccountBalance_RU balance;

        balance = BankClientAccountBalance_RU::find(this.BalanceType, this.FromDate, this.ToDate, this.AccountID, true);
        if (balance)
        {
            balance.AmountCur = this.AmountCur;
            balance.update();
        }
        else
        {
            this.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBalance</Name>
				<Source><![CDATA[
    public static container calcBalance(CompanyBankAccountId _accountId, FromDate _fromDate, ToDate _toDate)
    {
        BankClientAccountBalance_RU  bankClientAccountBalance;
        AmountCur   oBalance, cBalance, iTurnover, oTurnover;
        BankClientPayment_RU         bankClientPayment;

        select firstonly bankClientAccountBalance
            where bankClientAccountBalance.AccountID    == _accountId                               &&
                  bankClientAccountBalance.BalanceType  == BankClientBalanceType_RU::OpeningBalance &&
                  bankClientAccountBalance.FromDate     == _fromDate;

        oBalance = bankClientAccountBalance.AmountCur;

        select sum (AmountCur) from bankClientPayment
                where bankClientPayment.AccountID    == _accountId                                        &&
                      bankClientPayment.PaymentDirection  == BankClientPaymentDirection_RU::Incoming      &&
                    (! _fromDate || (bankClientPayment.DocumentDate >= _fromDate))                        &&
                    (! _toDate   || (bankClientPayment.DocumentDate <= _toDate));

        iTurnover = bankClientPayment.AmountCur;

        select sum (AmountCur) from bankClientPayment
                where bankClientPayment.AccountID    == _accountId                                        &&
                      bankClientPayment.PaymentDirection  == BankClientPaymentDirection_RU::Outgoing      &&
                    (! _fromDate || (bankClientPayment.DocumentDate >= _fromDate))                        &&
                    (! _toDate   || (bankClientPayment.DocumentDate <= _toDate));

        oTurnover = bankClientPayment.AmountCur;

        select firstonly AmountCur from bankClientAccountBalance
            order by ToDate desc
            where bankClientAccountBalance.AccountID            == _accountId                               &&
                  bankClientAccountBalance.BalanceType          == BankClientBalanceType_RU::ClosingBalance &&
                 (!_toDate || bankClientAccountBalance.ToDate   == _toDate);

        cBalance = bankClientAccountBalance.AmountCur;

        return [oBalance, iTurnover, oTurnover, cBalance];
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(BankClientBalanceType_RU _balanceType,
                                FromDate                 _fromDate,
                                ToDate                   _toDate,
                                CompanyBankAccountId     _accountId)
    {
        return _balanceType &&
               _fromDate    &&
               _toDate      &&
               _accountId   &&
               (select firstonly RecId from bankClientAccountBalance_RU
                    where bankClientAccountBalance_RU.BalanceType == _balanceType &&
                          bankClientAccountBalance_RU.FromDate    == _fromDate    &&
                          bankClientAccountBalance_RU.ToDate      == _toDate      &&
                          bankClientAccountBalance_RU.AccountID   == _accountId   ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static BankClientAccountBalance_RU find(BankClientBalanceType_RU _balanceType,
                                                   FromDate                 _fromDate,
                                                   ToDate                   _toDate,
                                                   CompanyBankAccountId     _accountId,
                                                   boolean                  _forupdate = false)
    {
        BankClientAccountBalance_RU accountBalance;

        accountBalance.selectForUpdate(_forupdate);

        select firstonly accountBalance
            where accountBalance.BalanceType == _balanceType &&
                  accountBalance.FromDate    == _fromDate    &&
                  accountBalance.ToDate      == _toDate      &&
                  accountBalance.AccountID   == _accountId;

        return accountBalance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS115263</DeveloperDocumentation>
	<FormRef>bankclientimportedStatement_RU</FormRef>
	<Label>@GLS115263</Label>
	<TitleField1>AccountID</TitleField1>
	<TitleField2>BalanceType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>BalanceIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>BalanceIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BalanceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BalanceType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankClientBalanceType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BalanceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BalanceType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountID</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>AccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>