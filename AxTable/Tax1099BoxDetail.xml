<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099BoxDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Tax1099BoxDetail extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the non-system fields from this buffer to the deistination buffer.
    /// </summary>
    /// <param name="_destination">
    /// The buffer to copy the non-system fields to.
    /// </param>
    /// <remarks>
    /// <c>Common.data</c> forces the sytem fields to be copied across. Some scenarios, like in-memory roll-backs of
    /// buffers, should not have those fields copied across.
    /// </remarks>
    public void copyTo(Tax1099BoxDetail _destination)
    {
        SysDictField field;
        FieldId fieldId;
        SysDictTable sysDictTable = new SysDictTable(tableNum(Tax1099BoxDetail));
        Set fieldsSet;
        Set systemFieldIds = new Set(Types::Integer);
        SetEnumerator fieldSetEnumerator;

        // Generate the list of system fields contained by this table.
        systemFieldIds.add(fieldNum(Tax1099BoxDetail, RecId));
        systemFieldIds.add(fieldNum(Tax1099BoxDetail, RecVersion));
        systemFieldIds.add(fieldNum(Tax1099BoxDetail, DataAreaId));

        // Copy the non-system fields from this buffer to the destination buffer.
        fieldsSet = sysDictTable.fields();
        fieldSetEnumerator = fieldsSet.getEnumerator();
        while (fieldSetEnumerator.moveNext())
        {
            field = fieldSetEnumerator.current();
            fieldId = field.id();
            if (!systemFieldIds.in(fieldId))
            {
                // This is not a system field, so copy the value across.
                _destination.(fieldId) = this.(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTax1099BoxDetailHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the history record based on a <c>Tax1099BoxDetailHistory</c> record.
    /// </summary>
    /// <param name="_tax1099BoxDetailHistory">
    /// A <c>Tax1099BoxDetailHistory</c> record to initialize based on.
    /// </param>
    public void initFromTax1099BoxDetailHistory(Tax1099BoxDetailHistory _tax1099BoxDetailHistory)
    {
        Tax1099BoxDetailMap tax1099BoxDetailMap;

        tax1099BoxDetailMap.data(_tax1099BoxDetailHistory.data());
        this.data(tax1099BoxDetailMap.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values of a new record.
    /// </summary>
    /// <remarks>
    /// Sets the Tax1099GTaxYear to the current year.
    /// </remarks>
    public void initValue()
    {
        #isoCountryRegionCodes

        super();
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        {
            this.Tax1099TaxYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTax1099Fields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all <c>PurchLine</c> records and related <c>Tax1099BoxDetail</c> records for the selected PurchId.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> field value of <c>PurchTable</c> table.
    /// </param>
    /// <returns>
    /// true if the <c>Tax1099BoxDetail</c> record is valid; otherwise, false.
    /// </returns>
    public static boolean checkTax1099Fields(PurchId _purchId)
    {
        PurchLine           purchLine;
        Tax1099Fields       tax1099Fields;
        Tax1099BoxDetail    tax1099BoxDetail;
        boolean             tax1099SFieldsOK = true;

        select firstOnly RecId from tax1099BoxDetail
            where tax1099BoxDetail.Tax1099DateOfClosing == dateNull()
                || tax1099BoxDetail.Tax1099AddressorLegalDesc == ''
            exists join purchLine
                where purchLine.PurchId == _purchId
                   && purchLine.Tax1099RecId == tax1099BoxDetail.RecId
            exists join Tax1099Box from tax1099Fields
                where tax1099Fields.RecId == purchLine.Tax1099Fields
                   && tax1099Fields.Tax1099Box == Tax1099S::grossProceeds().tax1099Box;

        tax1099SFieldsOK = tax1099BoxDetail.RecId ? checkFailed("@SPS3") : tax1099SFieldsOK;

        select firstOnly RecId from tax1099BoxDetail
            where tax1099BoxDetail.Tax1099BuyersTax == 0.0
            exists join purchLine
                where purchLine.PurchId == _purchId
                   && purchLine.Tax1099RecId == tax1099BoxDetail.RecId
            exists join Tax1099Box from tax1099Fields
                where tax1099Fields.RecId == purchLine.Tax1099Fields
                   && tax1099Fields.Tax1099Box == Tax1099S::grossProceeds().tax1099Box;

        tax1099SFieldsOK = tax1099BoxDetail.RecId ? checkFailed(strFmt("@SPS14", "@PublicSector:Tax1099S6BuyersPart")) : tax1099SFieldsOK;

        select firstOnly RecId from tax1099BoxDetail
            where tax1099BoxDetail.Tax1099PropertyOrServices == NoYes::Yes
            exists join purchLine
                where purchLine.PurchId == _purchId
                   && purchLine.Tax1099Amount == 0.0
                   && purchLine.Tax1099RecId == tax1099BoxDetail.RecId
            exists join Tax1099Box from tax1099Fields
                where tax1099Fields.RecId == purchLine.Tax1099Fields
                   && tax1099Fields.Tax1099Box == Tax1099S::grossProceeds().tax1099Box;

        tax1099SFieldsOK = tax1099BoxDetail.RecId ? checkFailed(strFmt("@SPS18", "@SYS23907", "@SPS1066")) : tax1099SFieldsOK;

        return tax1099SFieldsOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099G</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Tax1099BoxDetail</c> table fields related with tax 1099G.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> field value of <c>Tax1099BoxDetail</c> table to update.
    /// </param>
    public static void clear1099G(RecId _recId)
    {
        Tax1099BoxDetail tax1099Detail = Tax1099BoxDetail::findRecId(_recId, true);

        if (tax1099Detail)
        {
            Tax1099BoxDetail::clear1099G2FieldValues(tax1099Detail);

            ttsbegin;            
            tax1099Detail.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099G1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Tax1099BoxDetail</c> table fields related with tax 1099G1.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> field value of <c>Tax1099BoxDetail</c> table to update.
    /// </param>
    public static void clear1099G1(RecId _recId)
    {
        Tax1099BoxDetail tax1099Detail = Tax1099BoxDetail::findRecId(_recId, true);

        if (tax1099Detail)
        {
            Tax1099BoxDetail::clear1099G1FieldValues(tax1099Detail);

            ttsbegin;
            tax1099Detail.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099S</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Tax1099BoxDetail</c> table fields related with tax 1099S.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> field value of <c>Tax1099BoxDetail</c> table to update.
    /// </param>
    public static void clear1099S(RecId _recId)
    {
        Tax1099BoxDetail tax1099Detail = Tax1099BoxDetail::findRecId(_recId, true);

        if (tax1099Detail)
        {
            Tax1099BoxDetail::clear1099SFieldValues(tax1099Detail);

            ttsbegin;
            tax1099Detail.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099SAndG2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Tax1099BoxDetail</c> table fields related with tax 1099S and 1099G-2.
    /// </summary>
    /// <param name="_tax1099BoxDetailRecId">
    /// The <c>RecId</c> field value of <c>Tax1099BoxDetail</c> table to update.
    /// </param>
    private static void clear1099SAndG2(RecId _tax1099BoxDetailRecId)
    {
        Tax1099BoxDetail tax1099BoxDetail = Tax1099BoxDetail::findRecId(_tax1099BoxDetailRecId, true);

        if (tax1099BoxDetail)
        {
            Tax1099BoxDetail::clear1099SFieldValues(tax1099BoxDetail);
            Tax1099BoxDetail::clear1099G2FieldValues(tax1099BoxDetail);

            ttsbegin;
            tax1099BoxDetail.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099SAndG1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Tax1099BoxDetail</c> table fields related with tax 1099S and 1099G-1.
    /// </summary>
    /// <param name="_tax1099BoxDetailRecId">
    /// The <c>RecId</c> field value of <c>Tax1099BoxDetail</c> table to update.
    /// </param>
    private static void clear1099SAndG1(RecId _tax1099BoxDetailRecId)
    {
        Tax1099BoxDetail tax1099BoxDetail = Tax1099BoxDetail::findRecId(_tax1099BoxDetailRecId, true);

        if (tax1099BoxDetail)
        {
            Tax1099BoxDetail::clear1099SFieldValues(tax1099BoxDetail);
            Tax1099BoxDetail::clear1099G1FieldValues(tax1099BoxDetail);

            ttsbegin;
            tax1099BoxDetail.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099G1AndG2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Tax1099BoxDetail</c> table fields related with tax 1099G-1 and 1099G-2.
    /// </summary>
    /// <param name="_tax1099BoxDetailRecId">
    /// The <c>RecId</c> field value of <c>Tax1099BoxDetail</c> table to update.
    /// </param>
    private static void clear1099G1AndG2(RefRecId _tax1099BoxDetailRecId)
    {
        Tax1099BoxDetail tax1099BoxDetail = Tax1099BoxDetail::findRecId(_tax1099BoxDetailRecId, true);

        if (tax1099BoxDetail)
        {
            Tax1099BoxDetail::clear1099G1FieldValues(tax1099BoxDetail);
            Tax1099BoxDetail::clear1099G2FieldValues(tax1099BoxDetail);

            ttsbegin;
            tax1099BoxDetail.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099G2FieldValues</Name>
				<Source><![CDATA[
    private static void clear1099G2FieldValues(Tax1099BoxDetail _tax1099BoxDetail)
    {
        _tax1099BoxDetail.Tax1099TaxYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        _tax1099BoxDetail.Tax1099TradeOrBusiness = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099G1FieldValues</Name>
				<Source><![CDATA[
    private static void clear1099G1FieldValues(Tax1099BoxDetail _tax1099BoxDetail)
    {
        _tax1099BoxDetail.State = strMin();
        _tax1099BoxDetail.Tax1099StateTaxID = strMin();
        _tax1099BoxDetail.Tax1099StateTaxWithheld = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear1099SFieldValues</Name>
				<Source><![CDATA[
    private static void clear1099SFieldValues(Tax1099BoxDetail _tax1099BoxDetail)
    {
        _tax1099BoxDetail.Tax1099DateOfClosing = dateNull();
        _tax1099BoxDetail.Tax1099AddressorLegalDesc = strMin();
        _tax1099BoxDetail.Tax1099PropertyOrServices = false;
        _tax1099BoxDetail.Tax1099BuyersTax = 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrClear1099Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes or updates the Tax1099Detail record of a transaction when the 1099 box changes.
    /// </summary>
    /// <param name="_tax1099Box">
    /// The 1099 box for the 1099 detail record.
    /// </param>
    /// <param name="_tax1099RecId">
    /// The 1099 detail record to update.
    /// </param>
    /// <returns>
    /// The record ID of the Tax1099Detail record or zero if the record has been deleted.
    /// </returns>
    /// <remarks>
    /// The caller should set it's Tax1099RecId equal to this return value.
    /// </remarks>
    public static Tax1099RecId deleteOrClear1099Detail(Tax1099Box _tax1099Box, Tax1099RecId _tax1099RecId)
    {
        if (_tax1099RecId)
        {
            //Delete the tax1099detail record when not needed.
            switch (_tax1099Box)
            {
                case Tax1099G::unemploymentCompensation().tax1099Box:
                    //Make sure S and G-2 fields are cleared when G-1 selected
                    Tax1099BoxDetail::clear1099SAndG2(_tax1099RecId);
                    break;
                case Tax1099G::incomeTaxRefundsCreditsOffsets().tax1099Box:
                    //Make sure S and G-1 fields are cleared when G-2 selected
                    Tax1099BoxDetail::clear1099SAndG1(_tax1099RecId);
                    break;
                case Tax1099S::grossProceeds().tax1099Box:
                    //Make sure G-1 and G-2 fields are cleared when S selected
                    Tax1099BoxDetail::clear1099G1AndG2(_tax1099RecId);
                    break;
                default:
                    ttsbegin;
                    Tax1099BoxDetail::findRecId(_tax1099RecId,true).delete();
                    _tax1099RecId = 0;
                    ttscommit;
                    break;
            }
        }

        return _tax1099RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>Tax1099Detail</c> record that corresponds to a given invoice number.
    /// </summary>
    /// <param name="_vendInvoiceId">
    /// InvoiceId to search for.
    /// </param>
    /// <returns>
    /// <c>Tax1099Detail</c> record if found, otherwise a null record.
    /// </returns>
    /// <remarks>
    /// Searches the vendor invoice transaction table for a 1099 detail record.
    /// </remarks>
    public static Tax1099BoxDetail findInvoiceId(VendInvoiceId _vendInvoiceId)
    {
        VendInvoiceTrans            vendInvoiceTrans;
        Tax1099BoxDetail               tax1099Detail;

        select Tax1099RecId from vendInvoiceTrans
            join tax1099Detail
                where vendInvoiceTrans.InvoiceId == _vendInvoiceId &&
                    vendInvoiceTrans.Tax1099RecId == tax1099Detail.RecId;

        return tax1099Detail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>Tax1099BoxDetail</c> record based on recId.
    /// </summary>
    /// <param name="_recId">
    /// RecId of the <c>Tax1099BoxDetail</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// Flag that determines if record is selected in update mode.
    /// </param>
    /// <returns>
    /// <c>Tax1099BoxDetail</c> record with given recId.
    /// </returns>
    /// <remarks>
    /// Finds a <c>Tax1099BoxDetail</c> record based on recId.
    /// </remarks>
    public static Tax1099BoxDetail findRecId(
        RecId     _recId,
        boolean   _forUpdate = false)
    {
        Tax1099BoxDetail tax1099Detail;

        if (_recId)
        {
            tax1099Detail.selectForUpdate(_forUpdate);

            select firstonly tax1099Detail
                where tax1099Detail.RecId == _recId;
        }
        return tax1099Detail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTax1099State</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens VendStateTaxID form for specific vendor in specific data area
    /// </summary>
    /// <param name="_vendAccount">
    /// Vendor account to open
    /// </param>
    /// <param name="_state">
    /// AddressStateId to find the record
    /// </param>
    public static void jumpRefTax1099State(VendAccount _vendAccount, AddressStateId _state)
    {
        VendStateTaxID vendStateTaxID = VendStateTaxID::findByVendState(_vendAccount,_state);

        Args args = new Args();
        args.caller(args.caller());
         
        FormRun fr = new MenuFunction(menuitemDisplayStr(VendStateTaxIDAction), MenuItemType::Display).create(args);
        fr.run();
        fr.dataSource(1).findRecord(vendStateTaxID);
        fr.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTax1099State</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>VendStateTaxID</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_vendAccount">
    /// Vendor account to open
    /// </param>
    public static void lookupTax1099State(FormControl _formControl, VendAccount _vendAccount)
    {
        SysTableLookup          vendStateTaxIDlookup;
        Query                   query = new Query();
        QueryBuildDataSource    qbdsVendStateTaxID;

        vendStateTaxIDlookup = SysTableLookup::newParameters(tableNum(VendStateTaxID), _formControl);

        qbdsVendStateTaxID = query.addDataSource(tableNum(VendStateTaxID));

        qbdsVendStateTaxID.addRange(fieldNum(VendStateTaxID, VendAccount)).value(SysQuery::value(_vendAccount));
        qbdsVendStateTaxID.addRange(fieldNum(VendStateTaxID, TaxIDType)).value(SysQuery::value(TaxIDType::EIN));

        vendStateTaxIDlookup.parmQuery(query);

        vendStateTaxIDlookup.addLookupfield(fieldNum(VendStateTaxID, StateId));
        vendStateTaxIDlookup.addLookupfield(fieldNum(VendStateTaxID, StateTaxID));

        vendStateTaxIDlookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax1099SEntryValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the 1099 user entry for the 1099-S fields.
    /// </summary>
    /// <param name="_purchLine">
    /// The active <c>PurchLine</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the 1099-S entry is valid; otherwise, false.
    /// </returns>
    public static boolean tax1099SEntryValidation(PurchLine _purchLine)
    {
        Tax1099BoxDetail    tax1099BoxDetail;
        boolean             isValid = true;

        tax1099BoxDetail = Tax1099BoxDetail::findRecId(_purchLine.Tax1099RecId);

        if ((tax1099BoxDetail.Tax1099DateOfClosing == dateNull()) || (tax1099BoxDetail.Tax1099AddressorLegalDesc ==""))
        {
            isValid = checkFailed("@SPS3");
        }

        if (tax1099BoxDetail.Tax1099BuyersTax == 0.0)
        {
            isValid = checkFailed(strFmt("@SPS14","@PublicSector:Tax1099S6BuyersPart"));
        }

        if (_purchLine.Tax1099Amount == 0 && tax1099BoxDetail.Tax1099PropertyOrServices == NoYes::Yes)
        {
            isValid = checkFailed(strFmt("@SPS18","@SYS23907","@SPS1066"));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SYS336053</DeveloperDocumentation>
	<Label>@SYS336053</Label>
	<TitleField1>RecId</TitleField1>
	<TitleField2>Tax1099TaxYear</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099DateOfClosing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099AddressorLegalDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099PropertyOrServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099BuyersTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099TradeOrBusiness</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099TaxYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099G1Fields</Name>
			<Label>@SPS1111</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateTaxID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateTaxWithheld</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099GFields</Name>
			<Label>@SPS1111</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099TaxYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099TradeOrBusiness</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099SFields</Name>
			<Label>@SPS1102</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099DateOfClosing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099AddressorLegalDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099PropertyOrServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099BuyersTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isDeleted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsDeleted</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isModified</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningIsDeleted</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Tax1099G</ConfigurationKey>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
			<Label>@SPS1937</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099AddressorLegalDesc</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Tax1099AddressOrLegalDesc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099BuyersTax</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Tax1099BuyersTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Tax1099DateOfClosing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099DateOfClosing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Tax1099PropertyOrServices</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Tax1099PropertyOrServices</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099StateTaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Tax1099G</ConfigurationKey>
			<ExtendedDataType>Tax1099StateTaxID</ExtendedDataType>
			<Label>@SPS1939</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099StateTaxWithheld</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Tax1099G</ConfigurationKey>
			<ExtendedDataType>Tax1099StateTaxWithheld</ExtendedDataType>
			<Label>@SPS1941</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Tax1099TaxYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099TaxYear</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Tax1099TradeOrBusiness</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099TradeOrBusiness</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>Tax1099BoxDetailMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Tax1099DateOfClosing</MapField>
					<MapFieldTo>Tax1099DateOfClosing</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099PropertyOrServices</MapField>
					<MapFieldTo>Tax1099PropertyOrServices</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099TradeOrBusiness</MapField>
					<MapFieldTo>Tax1099TradeOrBusiness</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099AddressOrLegalDesc</MapField>
					<MapFieldTo>Tax1099AddressorLegalDesc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099BuyersTax</MapField>
					<MapFieldTo>Tax1099BuyersTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Tax1099TaxYear</MapField>
					<MapFieldTo>Tax1099TaxYear</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>