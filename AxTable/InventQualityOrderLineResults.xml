<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityOrderLineResults</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQualityOrderLineResults extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventQualityOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record based on the specified <c>InventQualityOrderLine</c> record.
    /// </summary>
    /// <param name="_inventQualityOrderLine">
    ///    The record from which to initialize.
    /// </param>
    public void initFromInventQualityOrderLine(InventQualityOrderLine _inventQualityOrderLine)
    {
        this.QualityOrderId         = _inventQualityOrderLine.QualityOrderId;
        this.TestSequence           = _inventQualityOrderLine.TestSequence;
        this.TestId                 = _inventQualityOrderLine.TestId;

        this.IncludeResults         = NoYes::Yes;

        if (_inventQualityOrderLine.VariableOutcomeIdStandard)
        {
            this.TestResultValueOutcome = _inventQualityOrderLine.VariableOutcomeIdStandard;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the standard insert method.
    /// </summary>
    /// <remarks>
    ///    This method automatically assigns a unique line number.
    /// </remarks>
    public void insert()
    {
        // Note that this method is NOT executed when the line is created as a consequence of the InventQualityOrderTable being created
        InventQualityOrderLineResults   inventQualityOrderLineResults;

        select maxof(LineNum) from inventQualityOrderLineResults
            where inventQualityOrderLineResults.QualityOrderId  == this.QualityOrderId
               && inventQualityOrderLineResults.TestSequence    == this.TestSequence;

        this.LineNum = inventQualityOrderLineResults.LineNum + 1;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQualityOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the related quality order line record.
    /// </summary>
    /// <returns>
    ///    A record in the <c>InventQualityOrderLine</c> table; otherwise, an empty record.
    /// </returns>
    public InventQualityOrderLine inventQualityOrderLine()
    {
        return InventQualityOrderLine::find(this.QualityOrderId, this.TestId, this.TestSequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the related <c>InventQualityOrderTable</c> record.
    /// </summary>
    /// <returns>
    ///    A record in the <c>InventQualityOrderTable</c> table; otherwise, an empty record.
    /// </returns>
    public InventQualityOrderTable inventQualityOrderTable()
    {
        return InventQualityOrderTable::find(this.QualityOrderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventQualityOrderLineResults, TestResultValueOutcome):
                this.setTestResult(null, false);
                break;
            case fieldNum(InventQualityOrderLineResults, TestResultValueReal):
                this.setTestResult(null, false);
                break;
            case fieldNum(InventQualityOrderLineResults, TestResultQuantity):
                this.setTestResult(null, false);
                break;
            case fieldnum(InventQualityOrderLineResults, PdsCWTestResultQuantity):
                this.setTestResult(null, false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSumOfResultsQtyPair</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity for which test results have not been entered.
    /// </summary>
    /// <returns>
    /// A <c>container </c> that includes tworeal values that represent the remaining test quantity in
    /// inventory and catchweight units.
    /// </returns>
    /// <remarks>
    /// This line is excluded from the calculations
    /// </remarks>
    public container pdsSumOfResultsQtyPair()
    {
        InventQualityOrderLineResults   inventQualityOrderLineResults;
        InventQualityOrderTable         inventQualityOrderTable;

        select sum(TestResultQuantity), sum(PdsCWTestResultQuantity)
            from inventQualityOrderLineResults
            where inventQualityOrderLineResults.RecId             != this.RecId
                  && inventQualityOrderLineResults.QualityOrderId    == this.QualityOrderId
                  && inventQualityOrderLineResults.TestId            == this.TestId
                  && inventQualityOrderLineResults.TestSequence      == this.TestSequence
                  && inventQualityOrderLineResults.IncludeResults    == NoYes::Yes;

        inventQualityOrderTable = this.inventQualityOrderTable();
        return [inventQualityOrderTable.Qty      - inventQualityOrderLineResults.TestResultQuantity,
                inventQualityOrderTable.PdsCWQty - inventQualityOrderLineResults.PdsCWTestResultQuantity];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDecimal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs rounding based on the number of decimals applicable for the test unit.
    /// </summary>
    public void setDecimal()
    {
        InventQualityOrderLine  qualityOrderLine = this.inventQualityOrderLine();
        UnitOfMeasureSymbol     unitSymbol = qualityOrderLine.TestUnitId == null ?
            InventTestTable::find(qualityOrderLine.TestId).TestUnitId :
            qualityOrderLine.TestUnitId;

        if (unitSymbol)
        {
            UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(unitSymbol);

            if (unitOfMeasure)
            {
                this.TestResultValueReal = decRound(this.TestResultValueReal, unitOfMeasure.DecimalPrecision);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTestResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the overall quality order line test result based on the results entered.
    /// </summary>
    /// <param name="_inventQualityOrderLine">
    /// The quality order line that is related to this result line.
    /// </param>
    /// <param name="_showWarning">
    /// A Boolean value that indicates whether a warning should be put in the Infolog in case of failure.
    /// </param>
    [Replaceable(true)]
    public void setTestResult(
        InventQualityOrderLine  _inventQualityOrderLine,
        boolean                 _showWarning)
    {
        if (!_inventQualityOrderLine)
        {
            _inventQualityOrderLine = this.inventQualityOrderLine();
        }

        PdsBatchAttrib attrib  = PdsBatchAttrib::find(_inventQualityOrderLine.PdsBatchAttribId);

        if (    _inventQualityOrderLine.PdsUpdateBatchAttributes == NoYes::Yes
            &&  attrib.RecId != 0)
        {
            _inventQualityOrderLine.PdsAttribValue = attrib.calculateBatchAttributeValueFromTestResults(this);
        }

        InventQty       resultsQty;
        PdsCWInventQty  cwResultsQty;
        [resultsQty, cwResultsQty] = this.pdsSumOfResultsQtyPair();
        boolean cwItem = PdsGlobal::pdsIsCWItem(_inventQualityOrderLine.inventQualityOrderTable().ItemId);

        if (this.IncludeResults     == NoYes::Yes &&
            (      (!cwItem && resultsQty   != this.TestResultQuantity)
                || (cwItem  && cwResultsQty != this.PdsCWTestResultQuantity)) &&
            _showWarning)
        {
            warning("@SYS113858");
        }

        if (this.TestResultQuantity)
        {
            if (this.TestResultValueOutcome)
            {
                if (InventTestVariableOutcome::find(_inventQualityOrderLine.VariableId, this.TestResultValueOutcome).OutcomeStatus == InventTestOutcomeStatus::Pass)
                {
                    this.TestResult = InventTestOutcomeStatus::Pass;
                }
                else
                {
                    this.TestResult = InventTestOutcomeStatus::Fail;
                }
            }
            else
            {
                if (this.checkTestResultValueReal(_inventQualityOrderLine))
                {
                    this.TestResult = InventTestOutcomeStatus::Pass;
                }
                else
                {
                    this.TestResult = InventTestOutcomeStatus::Fail;
                }
            }
        }
        else
        {
            this.TestResult = InventTestOutcomeStatus::Fail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTestResultValueReal</Name>
				<Source><![CDATA[
    protected boolean checkTestResultValueReal(InventQualityOrderLine _inventQualityOrderLine)
    {
        return (this.TestResultValueReal >= _inventQualityOrderLine.LowerLimit &&
                this.TestResultValueReal <= _inventQualityOrderLine.UpperLimit) ||
               (!this.TestResultValueReal && _inventQualityOrderLine.LowerLimit < 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumOfResultsQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity for which test results have not been entered.
    /// </summary>
    /// <returns>
    /// The remaining test result quantity.
    /// </returns>
    /// <remarks>
    /// Note that this line is excluded from the calculations
    /// </remarks>
    public InventQty sumOfResultsQty()
    {
        InventQualityOrderLineResults inventQualityOrderLineResults;

        select  sum(TestResultQuantity)
        from    inventQualityOrderLineResults
        where   inventQualityOrderLineResults.RecId             != this.RecId
             && inventQualityOrderLineResults.QualityOrderId    == this.QualityOrderId
             && inventQualityOrderLineResults.TestId            == this.TestId
             && inventQualityOrderLineResults.TestSequence      == this.TestSequence
             && inventQualityOrderLineResults.IncludeResults    == NoYes::Yes;

        return this.inventQualityOrderTable().Qty - inventQualityOrderLineResults.TestResultQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        this.setTestResult(null, false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>InventQualityOrderLineResults</c> table exists.
    /// </summary>
    /// <param name="_inventQualityOrderId">
    ///    The quality order ID of the record to find.
    /// </param>
    /// <param name="_inventTestId">
    ///    The test ID of the record to find.
    /// </param>
    /// <param name="_testSequence">
    ///    The test sequence number of the record to find.
    /// </param>
    /// <param name="_lineNum">
    ///    The line number of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        InventQualityOrderId    _inventQualityOrderId,
        InventTestId            _inventTestId,
        InventTestSequence      _testSequence,
        LineNum                 _lineNum)
    {
        return _inventQualityOrderId  && _inventTestId && _lineNum &&
            (select firstonly inventQualityOrderLineResults
            where   inventQualityOrderLineResults.QualityOrderId        == _inventQualityOrderId
                 && inventQualityOrderLineResults.TestId                == _inventTestId
                 && inventQualityOrderLineResults.TestSequence          == _testSequence
                 && inventQualityOrderLineResults.LineNum               == _lineNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventQualityOrderLineResults</c> table.
    /// </summary>
    /// <param name="_inventQualityOrderId">
    ///    The quality order ID of the record to find.
    /// </param>
    /// <param name="_inventTestId">
    ///    The test ID of the record to find.
    /// </param>
    /// <param name="_testSequence">
    ///    The test sequence number of the record to find.
    /// </param>
    /// <param name="_lineNum">
    ///    The line number of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventQualityOrderLineResults</c> table; otherwise, an empty record.
    /// </returns>
    public static InventQualityOrderLineResults find(
        InventQualityOrderId    _inventQualityOrderId,
        InventTestId            _inventTestId,
        InventTestSequence      _testSequence,
        LineNum                 _lineNum,
        boolean                 _forUpdate = false)
    {
        InventQualityOrderLineResults inventQualityOrderLineResults;

        inventQualityOrderLineResults.selectForUpdate(_forUpdate);

        if (_inventQualityOrderId && _inventTestId && _lineNum)
        {
            select firstonly inventQualityOrderLineResults
            where   inventQualityOrderLineResults.QualityOrderId        == _inventQualityOrderId
                 && inventQualityOrderLineResults.TestId                == _inventTestId
                 && inventQualityOrderLineResults.TestSequence          == _testSequence
                 && inventQualityOrderLineResults.LineNum               == _lineNum;
        }

        return inventQualityOrderLineResults;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS124053</DeveloperDocumentation>
	<Label>@SYS113850</Label>
	<SingularLabel>@SYS113850</SingularLabel>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>QualityOrderId</TitleField1>
	<TitleField2>TestId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>OrderTestLineIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>Inventory</Modules>
	<PrimaryIndex>OrderTestLineIdx</PrimaryIndex>
	<ReplacementKey>OrderTestLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResultValueOutcome</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeResults</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResultValueReal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResult</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResultQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWTestResultQuantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestResultQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWTestResultQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeResults</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResult</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QualityOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestSequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestResultQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWTestResultQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResultValueOutcome</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResultValueReal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeResults</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Results</Name>
			<Label>@SYS33918</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestResultValueOutcome</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestResultValueReal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeResults</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS113860</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWTestResultQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventTestResultQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QualityOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQualityOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TestResult</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestLineTestResult</ExtendedDataType>
			<EnumType>InventTestOutcomeStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TestResultQuantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestResultQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestResultValueOutcome</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestVariableOutcomeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TestResultValueReal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQualityOrderLineResultReal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TestSequence</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTestSequence</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OrderTestLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>QualityOrderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TestSequence</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TestId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventQualityOrderLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124052</EntityRelationshipRole>
			<RelatedTable>InventQualityOrderLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestSequence</Name>
					<Field>TestSequence</Field>
					<RelatedField>TestSequence</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QualityOrderId</Name>
					<Field>QualityOrderId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>QualityOrderTestSequenceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventQualityOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventQualityOrderTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QualityOrderId</Name>
					<Field>QualityOrderId</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>QualityOrderIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestId</Name>
					<Field>TestId</Field>
					<RelatedField>TestId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TestIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTestVariableOutcome</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTestVariableOutcome</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestResultValueOutcome</Name>
					<Field>TestResultValueOutcome</Field>
					<RelatedField>VariableOutcomeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>