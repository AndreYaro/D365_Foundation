<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFundType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerFundType extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fundTypeInUse</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns whether the fund type is in use on a fund.
    /// </summary>
    /// <returns>
    ///     A boolean value that indicates if the fund type is in use by a fund.
    /// </returns>
    /// <remarks>
    ///     This method is used by the validateDelete method to determine if the fund type can be deleted.
    /// </remarks>
    private boolean fundTypeInUse()
    {
        boolean inUse;

        inUse = (select firstonly LedgerFundType from ledgerFund
                    where ledgerFund.LedgerFundType == this.RecId).RecId != 0;

        return inUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && (this.fundTypeInUse()))
        {
            ret = checkFailed(strFmt("@SPS144", this.FundTypeNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified fund type number value exists in the table and reports an error if it does not exist.
    /// </summary>
    /// <param name="_fundTypeNumber">
    ///     The fund type number value to check.
    /// </param>
    /// <returns>
    ///     true if the fund type number exists in the table; otherwise, false.
    /// </returns>
    public static boolean checkExist(FundTypeNumber _fundTypeNumber)
    {
        boolean ret = true;

        if (!LedgerFundType::exist(_fundTypeNumber))
        {
            ret = checkFailed(strFmt(LedgerFundType::txtNotExist(), _fundTypeNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified fund type number value exists in the table.
    /// </summary>
    /// <param name="_fundTypeNumber">
    ///     The fund type number value to check.
    /// </param>
    /// <returns>
    ///     true if the fund type number value exists in the table; otherwise, false.
    /// </returns>
    public static boolean exist(FundTypeNumber _fundTypeNumber)
    {
        boolean found;

        found = (select firstonly RecId from ledgerFundType
                    where ledgerFundType.FundTypeNumber == _fundTypeNumber).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Searches the <c>LedgerFundType</c> table for the specified fund type number value.
    /// </summary>
    /// <param name="_fundTypeNumber">
    ///     The fund type number value to find.
    /// </param>
    /// <param name="_forupdate">
    ///     A boolean value that specify whether the record should be fetched for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The associated concurrency model for the fetched record; optional.
    /// </param>
    /// <returns>
    ///     The fetched <c>LedgerFundType</c> table record.
    /// </returns>
    public static LedgerFundType find(
        FundTypeNumber      _fundTypeNumber,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerFundType ledgerFundType;

        ledgerFundType.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerFundType.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerFundType
            where ledgerFundType.FundTypeNumber == _fundTypeNumber;

        return ledgerFundType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Searches the <c>LedgerFundType</c> table for the specified fund type record ID value.
    /// </summary>
    /// <param name="_fundTypeRecId">
    ///     The fund type record ID value to find.
    /// </param>
    /// <param name="_forupdate">
    ///     A boolean value that specify whether the record should be fetched for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The associated concurrency model for the fetched record; optional.
    /// </param>
    /// <returns>
    ///     The fetched <c>LedgerFundType</c> table record.
    /// </returns>
    public static LedgerFundType findByRecId(
        FundTypeRecId       _fundTypeRecId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerFundType ledgerFundType;

        ledgerFundType.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerFundType.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerFundType
            where ledgerFundType.RecId == _fundTypeRecId;

        return ledgerFundType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFundTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a lookup for fund types.
    /// </summary>
    /// <param name="_formStringControl">
    ///     The form string control object with which to perform the lookup.
    /// </param>
    public static void lookupFundTypes(FormStringControl _formStringControl)
    {
        Query query = new Query();
        QueryBuildDataSource dsLedgerFundTypes;
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerFundType), _formStringControl);

        dsLedgerFundTypes = query.addDataSource(tableNum(LedgerFundType));
        sysTableLookup.parmQuery(query);
        sysTableLookup.addLookupfield(fieldNum(LedgerFundType, FundTypeNumber));
        sysTableLookup.addLookupfield(fieldNum(LedgerFundType, FundTypeDescription));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the custom error message associated with the existence of the record.
    /// </summary>
    /// <returns>
    ///     A string that contains the error message.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SPS208";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS231</DeveloperDocumentation>
	<Label>@SPS109</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>FundTypeNumber</TitleField1>
	<TitleField2>FundTypeDescription</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>FundTypeNumberIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>FundTypeNumberIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundTypeNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundTypeDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundTypeNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundTypeDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundTypeNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundTypeNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundTypeDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundTypeDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FundTypeDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundTypeNumber</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>FundTypeNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FundTypeNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FundTypeNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>