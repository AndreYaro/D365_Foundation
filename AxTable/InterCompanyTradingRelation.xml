<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTradingRelation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InterCompanyTradingRelation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOwnerForIntercompanyTradingVendor</Name>
				<Source><![CDATA[
    private boolean checkOwnerForIntercompanyTradingVendor()
    {
        boolean ok = true;
        InterCompanyTradingPartner intercompanyTradingPartnerVendor;

        select firstonly VendorParty, VendorDataAreaId from intercompanyTradingPartnerVendor
                where intercompanyTradingPartnerVendor.RecId == this.InterCompanyTradingVendor;

        if (intercompanyTradingPartnerVendor.VendorDataAreaId)
        {
            changecompany(intercompanyTradingPartnerVendor.VendorDataAreaId)
            {
                if (InventOwner_RU::findByPartyRecId(intercompanyTradingPartnerVendor.VendorParty))
                {
                    VendAccount vendorAccount = VendTable::findByPartyRecId(intercompanyTradingPartnerVendor.VendorParty).AccountNum;
                    ok = checkFailed(strFmt("@Consignment:MessageValidation_IntercompanyTradingRelation_VendorOwner", vendorAccount));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPartners</Name>
				<Source><![CDATA[
    private boolean checkPartners()
    {
        InterCompanyTradingPartner  interCompanyTradingPartner,
                                    interCompanyTradingPartnerRelation;
        InterCompanyTradingRelation interCompanyTradingRelation;
        boolean                     ok = true;

        if (!this.InterCompanyTradingCustomer)
        {
            ok = checkFailed("@SYS318848");
        }

        if (!this.InterCompanyTradingVendor)
        {
            ok = checkFailed("@SYS318847");
        }

        if (ok)
        {
            select InterCompanyTradingVendor from interCompanyTradingRelation
                where interCompanyTradingRelation.InterCompanyTradingCustomer == this.InterCompanyTradingCustomer
                &&    interCompanyTradingRelation.RecId                       != this.RecId;

            if (interCompanyTradingRelation.InterCompanyTradingVendor)
            {
                interCompanyTradingPartner          = InterCompanyTradingPartner::find(this.InterCompanyTradingCustomer);
                interCompanyTradingPartnerRelation  = InterCompanyTradingPartner::find(interCompanyTradingRelation.InterCompanyTradingVendor);

                ok = checkFailed(strFmt("@SYS315917", interCompanyTradingPartner.custAccount(),
                                                      interCompanyTradingPartner.CustomerDataAreaId,
                                                      interCompanyTradingPartnerRelation.vendAccount(),
                                                      interCompanyTradingPartnerRelation.VendorDataAreaId));
            }
        }

        if (ok)
        {
            select InterCompanyTradingCustomer from interCompanyTradingRelation
                where interCompanyTradingRelation.InterCompanyTradingVendor == this.InterCompanyTradingVendor
                &&    interCompanyTradingRelation.RecId                     != this.RecId;

            if (interCompanyTradingRelation.InterCompanyTradingCustomer)
            {
                interCompanyTradingPartner          = InterCompanyTradingPartner::find(this.InterCompanyTradingVendor);
                interCompanyTradingPartnerRelation  = InterCompanyTradingPartner::find(interCompanyTradingRelation.InterCompanyTradingCustomer);

                ok = checkFailed(strFmt("@SYS315916", interCompanyTradingPartner.vendAccount(),
                                                      interCompanyTradingPartner.VendorDataAreaId,
                                                      interCompanyTradingPartnerRelation.custAccount(),
                                                      interCompanyTradingPartnerRelation.CustomerDataAreaId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenIntercompanyAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an effective intercompany agreement exists that relates to one of the
    /// intercompany trading partners.
    /// </summary>
    /// <returns>
    /// true if an effective intercompany agreement exists that relates to one of the intercompany trading
    /// partners; otherwise, false.
    /// </returns>
    public boolean existOpenIntercompanyAgreements()
    {
        SalesAgreementHeader        salesAgreementHeader;
        AgreementReference          agreementReference;
        CustTable                   custTable;
        InterCompanyTradingPartner  intercompanyTradingPartnerCustomer;
        boolean                     ret;

        select firstonly CustomerParty, CustomerDataAreaId from intercompanyTradingPartnerCustomer
            where intercompanyTradingPartnerCustomer.RecId == this.InterCompanyTradingCustomer;

        if (intercompanyTradingPartnerCustomer.CustomerDataAreaId)
        {
            changecompany(intercompanyTradingPartnerCustomer.CustomerDataAreaId)
            {
                select firstonly RecId from salesAgreementHeader
                    where salesAgreementHeader.AgreementState == AgreementState::Effective
                    exists join agreementReference
                        where agreementReference.DerivedAgreement == salesAgreementHeader.RecId
                           || agreementReference.SourceAgreement  == salesAgreementHeader.RecId
                    exists join custTable
                        where custTable.AccountNum == salesAgreementHeader.CustAccount
                           && custTable.DataAreaId == salesAgreementHeader.CustomerDataAreaId
                           && custTable.Party      == intercompanyTradingPartnerCustomer.CustomerParty;
                ret = salesAgreementHeader.RecId ? true : false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenNonIntercompanyAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an effective non-intercompany agreement exists that relates to one of the
    /// intercompany trading partners.
    /// </summary>
    /// <returns>
    /// true if an open non-intercompany agreement exists that relates to one of the intercompany trading
    /// partners; otherwise, false.
    /// </returns>
    public boolean existOpenNonIntercompanyAgreements()
    {
        SalesAgreementHeader        salesAgreementHeader;
        PurchAgreementHeader        purchAgreementHeader;
        CustTable                   custTable;
        VendTable                   vendTable;
        InterCompanyTradingPartner  intercompanyTradingPartnerCustomer,intercompanytradingpartnerVendor;
        boolean                     ret;

        select firstonly CustomerParty, CustomerDataAreaId from intercompanyTradingPartnerCustomer
            where intercompanyTradingPartnerCustomer.RecId == this.InterCompanyTradingCustomer;
        if (intercompanyTradingPartnerCustomer.CustomerDataAreaId)
        {
            changecompany(intercompanyTradingPartnerCustomer.CustomerDataAreaId)
            {
                select firstonly RecId from salesAgreementHeader
                    where salesAgreementHeader.AgreementState == AgreementState::Effective
                    exists join custTable
                        where custTable.AccountNum == salesAgreementHeader.CustAccount
                           && custTable.DataAreaId == salesAgreementHeader.CustomerDataAreaId
                           && custTable.Party      == intercompanyTradingPartnerCustomer.CustomerParty;
                ret = salesAgreementHeader.RecId ? true : false;
            }
        }
        if (!ret)
        {
            select firstonly VendorParty, VendorDataAreaId from intercompanytradingpartnerVendor
                where intercompanytradingpartnerVendor.RecId == this.InterCompanyTradingVendor;
            if (intercompanytradingpartnerVendor.VendorDataAreaId)
            {
                changecompany(intercompanytradingpartnerVendor.VendorDataAreaId)
                {
                    select firstonly RecId from purchAgreementHeader
                        where purchAgreementHeader.AgreementState == AgreementState::Effective
                            exists join vendTable
                                where vendTable.AccountNum == purchAgreementHeader.VendAccount
                                   && vendTable.DataAreaId == purchAgreementHeader.VendorDataAreaId
                                   && vendTable.Party      == intercompanytradingpartnerVendor.VendorParty;
                    ret = purchAgreementHeader.RecId ? true : false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        this.suspendAgreements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the current inter-company trading partner relation is active.
    /// </summary>
    /// <returns>
    ///    true if the inter-company trading partner relation is active; otherwise, false.
    /// </returns>
    public boolean isActive()
    {
        return this.Active;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suspendAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    sets agreements on hold.
    /// </summary>
    public void suspendAgreements()
    {
        if (this.Active)
        {
            this.suspendNonIntercompanyAgreements();
        }
        else
        {
            this.suspendIntercompanyAgreements();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>suspendIntercompanyAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    ///   sets intercompany agreements on hold.
    /// </summary>
    public void suspendIntercompanyAgreements()
    {
        SalesAgreementHeader        salesAgreementHeader;
        PurchAgreementHeader        purchAgreementHeader;
        CustTable                   custTable;
        VendTable                   vendTable;
        AgreementReference          agreementReference;
        InterCompanyTradingPartner  intercompanyTradingPartnerCustomer,intercompanytradingpartnerVendor;

        ttsbegin;

        intercompanyTradingPartnerCustomer = InterCompanyTradingPartner::find(this.InterCompanyTradingCustomer);

        if (intercompanyTradingPartnerCustomer.CustomerDataAreaId)
        {
            changecompany(intercompanyTradingPartnerCustomer.CustomerDataAreaId)
            {
                salesAgreementHeader.skipDataMethods(true);
                update_recordset salesAgreementHeader
                    setting AgreementState = AgreementState::OnHold
                    exists join agreementReference
                        where agreementReference.DerivedAgreement == salesAgreementHeader.RecId
                           || agreementReference.SourceAgreement  == salesAgreementHeader.RecId
                    exists join custTable
                        where custTable.AccountNum == salesAgreementHeader.CustAccount
                           && custTable.DataAreaId == salesAgreementHeader.CustomerDataAreaId
                           && custTable.Party      == intercompanyTradingPartnerCustomer.CustomerParty;
            }
        }

        intercompanytradingpartnerVendor = InterCompanyTradingPartner::find(this.InterCompanyTradingVendor);

        if (intercompanytradingpartnerVendor.VendorDataAreaId)
        {
            changecompany(intercompanytradingpartnerVendor.VendorDataAreaId)
            {
                purchAgreementHeader.skipDataMethods(true);
                update_recordset purchAgreementHeader
                        setting AgreementState = AgreementState::OnHold
                    exists join agreementReference
                        where agreementReference.DerivedAgreement == purchAgreementHeader.RecId
                           || agreementReference.SourceAgreement  == purchAgreementHeader.RecId
                        exists join vendTable
                            where vendTable.AccountNum == purchAgreementHeader.VendAccount
                               && vendTable.DataAreaId == purchAgreementHeader.VendorDataAreaId
                               && vendTable.Party      == intercompanytradingpartnerVendor.VendorParty;
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suspendNonIntercompanyAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    ///   sets agreements which are not intercompany agreements on hold.
    /// </summary>
    public void suspendNonIntercompanyAgreements()
    {
        SalesAgreementHeader        salesAgreementHeader;
        PurchAgreementHeader        purchAgreementHeader;
        AgreementReference          agreementReference;
        CustTable                   custTable;
        VendTable                   vendTable;
        InterCompanyTradingPartner  intercompanyTradingPartnerCustomer,intercompanytradingpartnerVendor;

        ttsbegin;

        intercompanyTradingPartnerCustomer = InterCompanyTradingPartner::find(this.InterCompanyTradingCustomer);

        if (intercompanyTradingPartnerCustomer.CustomerDataAreaId)
        {
            changecompany(intercompanyTradingPartnerCustomer.CustomerDataAreaId)
            {
                salesAgreementHeader.skipDataMethods(true);
                update_recordset salesAgreementHeader
                    setting AgreementState = AgreementState::OnHold
                        where salesAgreementHeader.AgreementState == AgreementState::Effective
                    exists join custTable
                        where custTable.AccountNum == salesAgreementHeader.CustAccount
                           && custTable.DataAreaId == salesAgreementHeader.CustomerDataAreaId
                           && custTable.Party      == intercompanyTradingPartnerCustomer.CustomerParty
                    notexists join agreementReference
                        where agreementReference.DerivedAgreement == salesAgreementHeader.RecId
                            || agreementReference.SourceAgreement == salesAgreementHeader.RecId;
            }
        }

        intercompanytradingpartnerVendor = InterCompanyTradingPartner::find(this.InterCompanyTradingVendor);

        if (intercompanytradingpartnerVendor.VendorDataAreaId)
        {
            changecompany(intercompanytradingpartnerVendor.VendorDataAreaId)
            {
                purchAgreementHeader.skipDataMethods(true);
                update_recordset purchAgreementHeader
                    setting AgreementState = AgreementState::OnHold
                        where purchAgreementHeader.AgreementState == AgreementState::Effective
                    exists join vendTable
                        where vendTable.AccountNum == purchAgreementHeader.VendAccount
                            && vendTable.DataAreaId == purchAgreementHeader.VendorDataAreaId
                            && vendTable.Party      == intercompanytradingpartnerVendor.VendorParty
                    notexists join agreementReference
                        where agreementReference.DerivedAgreement == purchAgreementHeader.RecId
                            || agreementReference.SourceAgreement == purchAgreementHeader.RecId;
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        this.suspendAgreements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = this.checkPartners();
        ret = ret && this.checkOwnerForIntercompanyTradingVendor();

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record in the <c>InterCompanyTradingRelation</c> table that is based on a
    /// customer ID and vendor ID.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer ID from which to base the <c>InterCompanyTradingRelation</c> record.
    /// </param>
    /// <param name="_custDataAreaID">
    /// The customer company ID from which to base the <c>InterCompanyTradingRelation</c> record.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor ID from which to base the <c>InterCompanyTradingRelation</c> record.
    /// </param>
    /// <param name="_vendDataAreaId">
    /// The vendor company ID from which to base the <c>InterCompanyTradingRelation</c> record.
    /// </param>
    /// <param name="_active">
    /// A Boolean value that indicates whether the <c>InterCompanyTradingRelation</c> table record is
    /// active.
    /// </param>
    /// <param name="_tradingRelationRecId">
    /// The record ID of the <c>InterCompanyTradingRelation</c> table record to update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingRelation</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// If the customer or the vendor is not an inter-company trading partner, the records in the
    /// <c>InterCompanyTradingPartner</c> table are created automatically.
    /// </remarks>
    public static InterCompanyTradingRelation createOrUpdate(CustAccount                            _custAccount,
                                                                    InterCompanyTradingCustomerDataAreaID  _custDataAreaID,
                                                                    VendAccount                            _vendAccount,
                                                                    InterCompanyTradingVendorDataAreaID    _vendDataAreaId,
                                                                    InterCompanyTradingActive              _active,
                                                                    recId                                  _tradingRelationRecId = 0)
    {
        InterCompanyTradingRelation             interCompanyTradingRelation;
        InterCompanyTradingPartner              interCompanyTradingCustomer,
                                                interCompanyTradingVendor;

        if (_custAccount && _custDataAreaID && _vendAccount && _vendDataAreaId)
        {
            ttsbegin;

            interCompanyTradingCustomer = InterCompanyTradingPartner::findOrCreateCustomer(_custAccount, _custDataAreaID);
            interCompanyTradingVendor   = InterCompanyTradingPartner::findOrCreateVendor(_vendAccount, _vendDataAreaId);

            if (_tradingRelationRecId)
            {
                interCompanyTradingRelation = InterCompanyTradingRelation::find(_tradingRelationRecId, true);
            }
            else
            {
                interCompanyTradingRelation = InterCompanyTradingRelation::findPartner(interCompanyTradingCustomer.RecId,
                                                                                       interCompanyTradingVendor.RecId);
            }

            if (!interCompanyTradingRelation)
            {
                interCompanyTradingRelation.clear();
                interCompanyTradingRelation.initValue();
            }

            interCompanyTradingRelation.InterCompanyTradingCustomer = interCompanyTradingCustomer.RecId;
            interCompanyTradingRelation.InterCompanyTradingVendor   = interCompanyTradingVendor.RecId;
            interCompanyTradingRelation.Active                      = _active;

            if (interCompanyTradingRelation.RecId)
            {
                interCompanyTradingRelation.update();
            }
            else
            {
                interCompanyTradingRelation.insert();
            }

            ttscommit;
        }

        return interCompanyTradingRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether an effective agreement exists that relates to one of the intercompany trading
    /// partners.
    /// </summary>
    /// <param name="_interCompanyTradingRelation">
    /// The intercompany trading relation record that validates if the effective agreements exist.
    /// </param>
    /// <returns>
    /// true if an open agreement exists that relates to one of the intercompany trading partners;
    /// otherwise, false.
    /// </returns>
    public static boolean existOpenAgreements(InterCompanyTradingRelation _interCompanyTradingRelation)
    {
        boolean     ret;

        if (_interCompanyTradingRelation.Active)
        {
            ret = _interCompanyTradingRelation.existOpenNonIntercompanyAgreements();
        }
        else
        {
            ret = _interCompanyTradingRelation.existOpenIntercompanyAgreements();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InterCompanyTradingRelation</c> table by using a record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>InterCompanyTradingRelation</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingRelation</c> table; otherwise, an empty record.
    /// </returns>
    public static InterCompanyTradingRelation find(recId   _recId,
                                                   boolean _forUpdate = false)
    {
        InterCompanyTradingRelation  interCompanyTradingRelation;

        if (_recId)
        {
            interCompanyTradingRelation.selectForUpdate(_forUpdate);

            select interCompanyTradingRelation
                where interCompanyTradingRelation.RecId == _recId;
        }

        return interCompanyTradingRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPartner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InterCompanyTradingRelation</c> table by intercompany trading
    /// partners.
    /// </summary>
    /// <param name="_customerPartnerRecId">
    /// The record ID of the <c>InterCompanyTradingPartner</c> record that represents the customer trading
    /// partner in the relation to find.
    /// </param>
    /// <param name="_vendorPartnerRecId">
    /// The record ID of the <c>InterCompanyTradingPartner</c> record that represents the vendor trading
    /// partner in the relation to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingRelation</c> table; otherwise, an empty record.
    /// </returns>
    public static InterCompanyTradingRelation findPartner(InterCompanyTradingPartnerRecID   _customerPartnerRecId,
                                                          InterCompanyTradingPartnerRecID   _vendorPartnerRecId,
                                                          boolean                           _forUpdate = false)
    {
        InterCompanyTradingRelation  interCompanyTradingRelation;

        if (_customerPartnerRecId && _vendorPartnerRecId)
        {
            interCompanyTradingRelation.selectForUpdate(_forUpdate);

            select interCompanyTradingRelation
                where interCompanyTradingRelation.InterCompanyTradingCustomer == _customerPartnerRecId
                &&    interCompanyTradingRelation.InterCompanyTradingVendor   == _vendorPartnerRecId;
        }

        return interCompanyTradingRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedTradingPartner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InterCompanyTradingPartner</c> record that is related to a specific
    /// <c>InterCompanyTradingPartner</c> record through the inter-company trading relations.
    /// </summary>
    /// <param name="_interCompanyTradingPartner">
    /// The <c>InterCompanyTradingPartner</c> record from which to find the related
    /// <c>InterCompanyTradingPartner</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingPartner</c> table; otherwise, an empty record.
    /// </returns>
    public static InterCompanyTradingPartner getRelatedTradingPartner(InterCompanyTradingPartner _interCompanyTradingPartner)
    {
        InterCompanyTradingPartner  interCompanyTradingPartner;
        InterCompanyTradingRelation interCompanyTradingRelation;

        switch (_interCompanyTradingPartner.TradingPartnerType)
        {
            case InterCompanyTradingPartnerType::Customer :
                select interCompanyTradingPartner
                    exists join interCompanyTradingRelation
                        where interCompanyTradingRelation.InterCompanyTradingVendor   == interCompanyTradingPartner.RecId
                        &&    interCompanyTradingRelation.InterCompanyTradingCustomer == _interCompanyTradingPartner.RecId;
                break;

            case InterCompanyTradingPartnerType::Vendor :
                select interCompanyTradingPartner
                    exists join interCompanyTradingRelation
                        where interCompanyTradingRelation.InterCompanyTradingCustomer == interCompanyTradingPartner.RecId
                        &&    interCompanyTradingRelation.InterCompanyTradingVendor   == _interCompanyTradingPartner.RecId;
                break;
        }

        return interCompanyTradingPartner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradingRelationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an active inter-company trading relation has been set up in the current company.
    /// </summary>
    /// <returns>
    /// true if an active inter-company trading partner relation has been set up in the current company;
    /// otherwise, false.
    /// </returns>
    public static boolean tradingRelationExists()
    {
        InterCompanyTradingRelation     interCompanyTradingRelation;
        InterCompanyTradingPartner      interCompanyTradingPartner;

        //The query is split here in order to hit the cache
        //if the conditions are OR'd together, the cache won't be hit.
        select firstonly RecId from interCompanyTradingRelation
            where interCompanyTradingRelation.Active == true
            exists join interCompanyTradingPartner
                where (interCompanyTradingPartner.RecId              == interCompanyTradingRelation.InterCompanyTradingCustomer
                    && interCompanyTradingPartner.CustomerDataAreaId == curext());

        if (!interCompanyTradingRelation.RecId)
        {
            select firstonly RecId from interCompanyTradingRelation
                where interCompanyTradingRelation.Active == true
                exists join interCompanyTradingPartner
                    where (interCompanyTradingPartner.RecId             == interCompanyTradingRelation.InterCompanyTradingVendor
                        && interCompanyTradingPartner.VendorDataAreaId   == curext());
        }

        return interCompanyTradingRelation.RecId ? true : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeInterCompany</ConfigurationKey>
	<DeveloperDocumentation>@SYS318838</DeveloperDocumentation>
	<FormRef>InterCompanyTradingRelationSetupCustomer</FormRef>
	<Label>@SYS313144</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InterCompanyTradingCustomer</TitleField1>
	<TitleField2>InterCompanyTradingVendor</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>TradingCustomerIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyTradingCustomer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyTradingVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyTradingCustomer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TradingRelation</Name>
			<Label>@SYS313144</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyTradingActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InterCompanyTradingCustomer</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyTradingPartnerRecID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InterCompanyTradingVendor</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyTradingPartnerRecID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TradingCustomerIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InterCompanyTradingCustomer</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TradingVendorIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InterCompanyTradingVendor</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TradingCustomer</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InterCompanyTradingPartner</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InterCompanyTradingPartnerCustomer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InterCompanyTradingPartnerCustomer_InterCompanyTradingRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyTradingCustomer</Name>
					<Field>InterCompanyTradingCustomer</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TradingVendor</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InterCompanyTradingPartner</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InterCompanyTradingPartnerVendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InterCompanyTradingPartnerVendor_InterCompanyTradingRelation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyTradingVendor</Name>
					<Field>InterCompanyTradingVendor</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>