<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailGrandTotalJournalTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findPreviousClosedJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds closed journal in previous period for the same store and journal type.
    /// </summary>
    /// <returns>
    /// Record of <c>RetailGrandTotalJournalTable</c> for previous period.
    /// </returns>
    public RetailGrandTotalJournalTable findPreviousClosedJournal()
    {
        RetailGrandTotalJournalTable journalTable;

        select firstonly journalTable order by ToDate desc
            where journalTable.Status == RetailGrandTotalJournalStatus::Closed
                && journalTable.StoreId == this.StoreId
                && journalTable.RecId != this.RecId
                && journalTable.ToDate < this.FromDate
                && journalTable.Annual == this.Annual;

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFiscalYearClosingJournalClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that last periodical journal included in the annual journal are closed.
    /// </summary>
    /// <returns>True, if last periodical journal closed; otherwise, false.</returns>
    public boolean checkFiscalYearClosingJournalClosed()
    {
        RetailGrandTotalJournalTable journalTable;
        
        select firstonly journalTable
                where journalTable.ToDate == this.ToDate
                && journalTable.Annual == NoYes::No
                && journalTable.StoreId == this.StoreId
                && journalTable.Status != RetailGrandTotalJournalStatus::Canceled;

        return journalTable.Status == RetailGrandTotalJournalStatus::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromStoreTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from the store table.
    /// </summary>
    /// <param name="_storeTable">
    /// The store table record.
    /// </param>
    public void initFromStoreTable(RetailStoreTable _storeTable)
    {
        this.CurrencyCode = _storeTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal periods based on previous journals and fiscal period.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Error exception thrown if fiscal period for journal is not found.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Error exception thrown if next fiscal period for journal is not found.
    /// </exception>
    public void initPeriod()
    {
        RetailGrandTotalJournalTable lastClosedJournal = RetailGrandTotalJournalTable::findLastClosedJournalByStoreIdAndAnnual(this.StoreId, this.Annual);

        if (lastClosedJournal.recId)
        {
            container period = RetailGrandTotalJournalTable::getFiscalPeriodByDateAndAnnual(lastClosedJournal.ToDate, this.Annual);

            if (conPeek(period, 1) == dateNull() || conPeek(period, 2) == dateNull())
            {
                throw error("@RetailGrandTotalJournal:FiscalPeriodNotFound");
            }
            else
            {
                if (conPeek(period, 2) > lastClosedJournal.ToDate)
                {
                    this.FromDate = lastClosedJournal.ToDate + 1;
                    this.ToDate   = conPeek(period, 2);
                }
                else if (conPeek(period, 2) == lastClosedJournal.ToDate)
                {
                    if (!this.updateFiscalDates(lastClosedJournal.ToDate + 1))
                    {
                        throw error("@RetailGrandTotalJournal:NextFiscalPeriodNotFound");
                    }
                }
            }
        }
        else if (this.ToDate != dateNull())
        {
            if (!this.updateFiscalDates(this.ToDate))
            {
                throw error("@RetailGrandTotalJournal:FiscalPeriodNotFound");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        if (!this.JournalNum)
        {
            this.JournalNum = NumberSeq::newGetNum(RetailParameters::numRefGrandTotalJournalId(), false).num();
        }

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnotherActiveJournalExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a non-closed journal exists. 
    /// For a periodical journal, periodical journals are checked, for an annual journal, annual journals are checked.
    /// </summary>
    /// <returns>
    /// True if journal exists; otherwise, false.
    /// </returns>
    private boolean isAnotherActiveJournalExist()
    {
        RetailGrandTotalJournalTable journalTable;

        select firstOnly RecId from journalTable
            where (journalTable.Status == RetailGrandTotalJournalStatus::Calculated
                || journalTable.Status == RetailGrandTotalJournalStatus::New)
                && journalTable.StoreId == this.StoreId
                && journalTable.RecId != this.RecId
                && journalTable.Annual == this.Annual;

        return journalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotCancelledJournalExistInNextPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checking the existence of a non-canceled journal in next period.
    /// </summary>
    /// <returns>True if the journal does exist, false otherwise.</returns>
    public boolean isNotCancelledJournalExistInNextPeriod()
    {
        RetailGrandTotalJournalTable journalTableOlder;

        select firstOnly RecId from journalTableOlder
            where journalTableOlder.FromDate > this.FromDate
                && journalTableOlder.Status != RetailGrandTotalJournalStatus::Canceled
                && journalTableOlder.StoreId == this.StoreId
                && journalTableOlder.Annual == this.Annual;

        return journalTableOlder.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotCancelledAnnualJournalExistInCurrentPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a not cancelled annual journal exists in the current period for regular journal.
    /// </summary>
    /// <returns>True if annual journal exists; otherwise, false.</returns>
    public boolean isNotCancelledAnnualJournalExistInCurrentPeriod()
    {
        RetailGrandTotalJournalTable journalTableOlder;
        
        if (this.Annual == NoYes::No)
        {
            select firstOnly RecId from journalTableOlder
            where journalTableOlder.FromDate <= this.ToDate
                && journalTableOlder.ToDate >= this.ToDate
                && journalTableOlder.Status != RetailGrandTotalJournalStatus::Canceled
                && journalTableOlder.StoreId == this.StoreId
                && journalTableOlder.Annual == NoYes::Yes;
        }

        return journalTableOlder.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RetailGrandTotalJournalTable, StoreId):
                this.initFromStoreTable(RetailStoreTable::find(this.StoreId));
                this.initPeriod();
                break;

            case fieldNum(RetailGrandTotalJournalTable, ToDate):
                this.initPeriod();
                break;

            case fieldNum(RetailGrandTotalJournalTable, Annual):
                this.FromDate = dateNull();
                this.ToDate = dateNull();
                this.initPeriod();
                break;
        }

        this.updateDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates description using field data.
    /// </summary>
    public void updateDescription()
    {
        if (this.StoreId && this.FromDate && this.ToDate)
        {
            this.Description = strFmt("@RetailGrandTotalJournal:PeriodGrandTotalForStores", this.StoreId, this.FromDate, this.ToDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates fiscal period.
    /// </summary>
    /// <param name="_periodDate">
    /// Date from corresponding fiscal period.
    /// </param>
    /// <returns>
    /// True, if update was succesful; otherwise, false.
    /// </returns>
    private boolean updateFiscalDates(PeriodDate _periodDate)
    {
        FromDate    fromDate;
        ToDate      toDate;

        [fromDate, toDate] = RetailGrandTotalJournalTable::getFiscalPeriodByDateAndAnnual(_periodDate, this.Annual);

        if (fromDate != dateNull() && toDate != dateNull())
        {
            [this.FromDate, this.ToDate] = [fromDate, toDate];
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (this.Status == RetailGrandTotalJournalStatus::Canceled
            || this.Status == RetailGrandTotalJournalStatus::Closed
            || this.Status == RetailGrandTotalJournalStatus::Calculated)
        {
            ret = checkFailed(strFmt("@RetailGrandTotalJournal:JournalDeleteFailure", this.Status));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.isAnotherActiveJournalExist())
        {
            ret = this.Annual == NoYes::No
                ? checkFailed(strFmt("@RetailGrandTotalJournal:ActiveJournalAlreadyExists", this.StoreId))
                : checkFailed(strFmt("@RetailGrandTotalJournal:ActiveAnnualJournalAlreadyExists", this.StoreId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the journal by record identifier.
    /// </summary>
    /// <param name="_journalRecId">
    /// Record identifier.
    /// </param>
    /// <returns>
    /// Record of the <c>RetailGrandTotalJournalTable</c> table.
    /// </returns>
    public static RetailGrandTotalJournalTable find(RetailGrandTotalJourRefRecId _journalRecId, boolean _forUpdate = false)
    {
        RetailGrandTotalJournalTable journalTable;

        journalTable.selectForUpdate(_forUpdate);

        if (_journalRecId)
        {
            select firstOnly journalTable
                where journalTable.RecId == _journalRecId;
        }

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastClosedJournalByStoreIdAndAnnual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous closed journal by a store identifier.
    /// </summary>
    /// <param name="_storeId">
    /// The store identifier.
    /// </param>
    /// <param name="_annual">
    /// The flag indicating whether or not to search for an annual journal.
    /// </param>
    /// <returns>
    /// Record of the <c>RetailGrandTotalJournalTable</c> table.
    /// </returns>
    public static RetailGrandTotalJournalTable findLastClosedJournalByStoreIdAndAnnual(RetailStoreId _storeId, RetailGrandTotalJournalAnnual  _annual)
    {
        RetailGrandTotalJournalTable journalTable;

        
            select firstonly journalTable order by ToDate desc
            where journalTable.Status == RetailGrandTotalJournalStatus::Closed
                && journalTable.StoreId == _storeId
                && journalTable.Annual == _annual;
          
       
        
        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalPeriodByDateAndAnnual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets fiscal year period by date.
    /// </summary>
    /// <param name="_periodDate">
    /// The date within period.
    /// </param>
    /// <param name="_annual">
    /// The flag indicating whether or not to search for an annual journal.
    /// </param>
    /// <returns>
    /// The container with period dates.
    /// </returns>
    public static container getFiscalPeriodByDateAndAnnual(PeriodDate _periodDate, RetailGrandTotalJournalAnnual _annual)
    {
        FiscalCalendarRecId calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        container ret;
        if (_annual == NoYes::Yes)
        {
            FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(calendarRecId, _periodDate);
            ret = [fiscalCalendarYear.StartDate, fiscalCalendarYear.EndDate];
        }
        else
        {
            FiscalCalendarPeriod fiscalPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId, _periodDate, FiscalPeriodType::Operating);
            ret = [fiscalPeriod.StartDate, fiscalPeriod.EndDate];
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastSignedSequentialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last sequention number of closed journal by store identifier.
    /// </summary>
    /// <param name="_storeId">
    /// The store identifier.
    /// </param>
    /// <returns>
    /// The last sequential number.
    /// </returns>
    public static Counter getLastSignedSequentialNumber(RetailStoreId _storeId)
    {
        return 
            (select maxof(SequentialNumber) from RetailGrandTotalJournalTable
                where RetailGrandTotalJournalTable.Status == RetailGrandTotalJournalStatus::Closed
                    && RetailGrandTotalJournalTable.StoreId == _storeId
            ).SequentialNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grandTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the grand total, i.e., sales grand total - returns grand total.
    /// </summary>
    /// <returns>
    /// Grand total amount.
    /// </returns>
    public display RetailGrandTotal grandTotal()
    {
        return this.GrandTotalSales - this.GrandTotalReturns;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<CountryRegionCodes>FR</CountryRegionCodes>
	<DeveloperDocumentation>@RetailGrandTotalJournal:RetailGrandTotalJournalTableDevDoc</DeveloperDocumentation>
	<FormRef>RetailGrandTotalJournalTable</FormRef>
	<Label>@RetailGrandTotalJournal:PeriodGrandTotalJournal</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>StoreId</TitleField1>
	<TitleField2>ToDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>NotApplicable</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailGrandTotalJournalTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>RetailGrandTotalJournalTable</Relation>
			<Table>RetailGrandTotalJournalTrans</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailGrandTotalJourTableBatchRelation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>RetailGrandTotalJournalTable</Relation>
			<Table>RetailGrandTotalJourTableBatchRelation</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailGrandTotalJournalArchiveHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>RetailGrandTotalJournalTable</Relation>
			<Table>RetailGrandTotalJournalArchiveHistory</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CumulativeGrandTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CumulativePerpetualGrandTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grandTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amounts</Name>
			<Label>@RetailGrandTotalJournal:Amounts</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GrandTotalSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrandTotalReturns</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CumulativeGrandTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CumulativePerpetualGrandTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>grandTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS114913</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequentialNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@RetailGrandTotalJournal:Period</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Annual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Signature</Name>
			<Label>@SYS11487</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataToSign</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Thumbprint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Signature</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataToSignFormatVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HashAlgorithm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CumulativeGrandTotal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailCumulativeGrandTotal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CumulativePerpetualGrandTotal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailCumulativePerpetualGrandTotal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataToSign</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Notes</ExtendedDataType>
			<HelpText>@RetailGrandTotalJournal:StringForSigning</HelpText>
			<Label>@RetailGrandTotalJournal:SignedData</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>JournalDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GrandTotalReturns</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@RetailGrandTotalJournal:TotalReturnsAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GrandTotalSales</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS23862</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalNum</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailGrandTotalJournalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequentialNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Counter</ExtendedDataType>
			<HelpText>@RetailGrandTotalJournal:SeqNumOfSignedJournal</HelpText>
			<Label>@RetailGrandTotalJournal:SeqNum</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Signature</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailDigitalSignature</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>RetailGrandTotalJournalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Thumbprint</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailCertificateThumbprint</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Annual</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailGrandTotalJournalAnnual</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataToSignFormatVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailDataToSignFormatVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HashAlgorithm</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RetailHashAlgorithm</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodStoreIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StoreId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PeriodStoreAnnualIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StoreId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Annual</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StoreId</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>StoreId</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>