<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjControl extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createControlCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create records in the <c>ProjControlCategory</c> table.
    /// </summary>
    /// <param name = "_projControl">
    ///     A <c>ProjControl</c> table buffer.
    /// </param>
    protected void createControlCategory(ProjControl _projControl)
    {
        ProjCategory        projCategory;
        ProjControlCategory projControlCategory = null;
        ;

        while select CategoryId, CategoryType from projCategory
            where projCategory.CategoryType == ProjCategoryType::Hour       ||
                  (projCategory.CategoryType == ProjCategoryType::Cost && (!projCategory.SetupEstimate))       ||
                  projCategory.CategoryType == ProjCategoryType::Item
        {
            projControlCategory.clear();

            projControlCategory.CategoryId  = projCategory.CategoryId;
            projControlCategory.ControlId   = _projControl.ControlId;

            this.populateControlCategory(_projControl, projCategory, projControlCategory);

            projControlCategory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateControlCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate records in the <c>ProjControlCategory</c> table.
    /// </summary>
    /// <param name = "_projControl">
    ///     A <c>ProjControl</c> table buffer.
    /// </param>
    /// <param name = "_projCategory">
    ///     A <c>ProjCategory</c> table buffer.
    /// </param>
    /// <param name = "_projControlCategory">
    ///     A <c>ProjControlCategory</c> table buffer.
    /// </param>
    protected void populateControlCategory(ProjControl _projControl, ProjCategory _projCategory, ProjControlCategory _projControlCategory)
    {
        switch (_projCategory.CategoryType)
        {
            case ProjCategoryType::Hour :
                _projControlCategory.CostGroupId = _projControl.CostGroupHourId;
                _projControlCategory.CostType    = ProjCostType::Hour;
                break;

            case ProjCategoryType::Cost     :
                _projControlCategory.CostGroupId = _projControl.CostGroupCostId;
                _projControlCategory.CostType    = ProjCostType::Cost;
                break;

            case ProjCategoryType::Item     :
                _projControlCategory.CostGroupId = _projControl.CostGroupItemId;
                _projControlCategory.CostType    = ProjCostType::Item;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSystemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates records in the <c>ProjControlCostGroup</c> table.
    /// </summary>
    /// <param name = "_projControl">
    ///     A <c>ProjControl</c> table buffer.
    /// </param>
    protected void createSystemGroup(ProjControl _projControl)
    {
        ProjControlCostGroup::createControlCostGroup(_projControl.ControlId, _projControl.CostGroupHourId, ProjCostType::Hour, NoYes::Yes, _projControl.AmountUnit);
        ProjControlCostGroup::createControlCostGroup(_projControl.ControlId, _projControl.CostGroupCostId, ProjCostType::Cost, NoYes::Yes, _projControl.AmountUnit);
        ProjControlCostGroup::createControlCostGroup(_projControl.ControlId, _projControl.CostGroupItemId, ProjCostType::Item, NoYes::Yes, _projControl.AmountUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.AmountUnit = AmountUnit::Amount;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {;
        ttsbegin;

        super();

        this.createSystemGroup(this);
        this.createControlCategory(this);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        ;

        ret = super();

        if ((this.CostGroupCostId == this.CostGroupHourId) ||
            (this.CostGroupHourId == this.CostGroupItemId) ||
            (this.CostGroupCostId == this.CostGroupItemId))
        {
            // Standard cost groups cannot have identical names.
            ret = checkFailed("@SYS56215");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryType2CostType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a cost transaction enumeration data type that is based on the category transaction.
    /// </summary>
    /// <param name = "_projCategoryType">
    /// A <c>ProjCategoryType</c> enumeration value.
    /// </param>
    /// <returns>
    /// A <c>ProjCostType</c> enumeration data type that corresponds to the cost transaction.
    /// </returns>
    /// <remarks>
    /// If no valid mapping between the category type and the project cost type option exists, an
    /// error is thrown.
    /// </remarks>
    public static ProjCostType categoryType2CostType(ProjCategoryType _projCategoryType)
    {
        ProjCostType projCostType
        ;

        switch (_projCategoryType)
        {
            case ProjCategoryType::Hour:
                projCostType = ProjCostType::Hour;
                break;

            case ProjCategoryType::Cost:
                projCostType = ProjCostType::Cost;
                break;

            case ProjCategoryType::Item:
                projCostType = ProjCostType::Item;
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                Projcontrol::categoryType2CostTypeDelegate(_projCategoryType, result);
                if (result.hasResult())
                {
                    projCostType = result.result();
                }
                else
                {
                    // Type '%1' does not exist
                    throw error(strfmt("@SYS5932", _projCategoryType));
                }
        }

        return projCostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryType2CostTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>ProjCostType</c> enumeration value given a <c>ProjCategoryType</c> enumeration value.
    /// </summary>
    /// <param name = "_projCategoryType">
    /// The <c>ProjCategoryType</c> enumeration value.
    /// </param>
    /// <param name = "_eventResult">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide default <c>ProjCostType</c> enumeration value.
    /// </param>
    static delegate void categoryType2CostTypeDelegate(ProjCategoryType _projCategoryType, EventHandlerResult _eventResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>costType2CategoryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a category transaction enumeration data type that is based on the cost transaction.
    /// </summary>
    /// <param name = "ProjCostType">
    /// A <c>ProjCostType</c> enumeration value.
    /// </param>
    /// <returns>
    /// A <c>ProjCategoryType</c> enumeration data type that corresponds to the category transaction.
    /// </returns>
    /// <remarks>
    /// If no valid mapping between the cost type and the project category type option exists, an
    /// error is thrown.
    /// </remarks>
    public static ProjCategoryType costType2CategoryType(ProjCostType _projCostType)
    {
        ProjCategoryType    projCategoryType;
        ;

        switch (_projCostType)
        {
            case ProjCostType::Hour:
                projCategoryType = ProjCategoryType::Hour;
                break;

            case ProjCostType::Cost:
                projCategoryType = ProjCategoryType::Cost;
                break;

            case ProjCostType::Item:
                projCategoryType = ProjCategoryType::Item;
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                Projcontrol::costType2CategoryTypeDelegate(_projCostType, result);
                if (result.hasResult())
                {
                    projCategoryType = result.result();
                }
                else
                {
                    // Type '%1' does not exist
                    throw error(strfmt("@SYS5932", _projCostType));
                }
        }

        return projCategoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costType2CategoryTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>ProjCategoryType</c> enumeration value given a <c>ProjCostType</c> enumeration value.
    /// </summary>
    /// <param name = "_projCostType">
    /// The <c>ProjCostType</c> enumeration value.
    /// </param>
    /// <param name = "_eventResult">
    /// An <c>EventHandlerResult</c> instance, where subscribers can provide default <c>ProjCategoryType</c> enumeration value.
    /// </param>
    static delegate void costType2CategoryTypeDelegate(ProjCostType _projCostType, EventHandlerResult _eventResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProjControlId controlId)
    {;
        return controlId && (select projControl where projControl.ControlId == controlId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjControl find(ProjControlId _controlId, boolean _forUpdate = false)
    {
        ProjControl  projControl = null;
        ;

        projControl.selectForUpdate(_forUpdate);

        if (_controlId)
        {
            select firstonly projControl where projControl.ControlId  == _controlId;
        }

        return projControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProjControlCostGroup                    costGroup;
        NoYes                                   costGroupCompletePct;
        ProjControl                             origProjControl;

        origProjControl = this.orig();

        if (origProjControl.AmountUnit != this.AmountUnit)
        {
            if (this.AmountUnit == AmountUnit::StraightLine || origProjControl.AmountUnit == AmountUnit::StraightLine)
            {
                costGroupCompletePct = (this.AmountUnit == AmountUnit::StraightLine) ? NoYes::No : NoYes::Yes;

                update_recordSet costGroup
                setting CompletePct = costGroupCompletePct
                    where costGroup.ControlId == this.ControlId;
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStraightLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculation methods for StraightLine projects
    /// </summary>
    /// <param name="_estimateProjId">
    /// _estimateProjId
    /// </param>
    /// <returns>
    /// Returns a boolean value; true or false
    /// </returns>
    public static boolean isStraightLine(ProjWipId _estimateProjId)
    {
        ProjWIPTable                    projWIPTable;
        ProjControl                     projControl;

        if (_estimateProjId)
        {
            select firstonly recid from projcontrol
                exists join projwiptable
                    where projcontrol.AmountUnit == AmountUnit::StraightLine
                        && projcontrol.controlid == projwiptable.controlid
                        && projWIPTable.ProjId == _estimateProjId;
        }

        return projControl.RecId ? true : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124971</DeveloperDocumentation>
	<FormRef>ProjControl</FormRef>
	<Label>@SYS54369</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ControlId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ControlIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ControlIdx</PrimaryIndex>
	<ReplacementKey>ControlIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjControlCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlCategory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjControlCostGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlCostGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjControlPeriodTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlPeriodTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjControlPeriodTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjControlPeriodTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS50074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>autoManual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostGroup</Name>
			<Label>@SYS91123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupHourId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupCostId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AmountUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS91124</Label>
			<EnumType>AmountUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>autoManual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjAutoManual</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupCostId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostGroupId</ExtendedDataType>
			<Label>@SYP4882014</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupHourId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCostGroupId</ExtendedDataType>
			<Label>@SYS5269</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>ProjCostGroupId</ExtendedDataType>
			<Label>@SYS15649</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ControlIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ControlId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>