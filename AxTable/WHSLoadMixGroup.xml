<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadMixGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLoadMixGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>evaluateItemOnMixingGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluate if an item qualifies for a load mixing group.
    /// </summary>
    /// <param name = "_mixGroupId">The load mixin group.</param>
    /// <param name = "_itemId">The item Id.</param>
    /// <param name = "_loadId">The load Id.</param>
    /// <returns>The <c>WHSLoadBuildAction</c> to be executed.</returns>
    [Hookable(false)]
    internal static WHSLoadBuildAction evaluateItemOnMixingGroup(
        WHSLoadMixGroupId   _mixGroupId,
        ItemId              _itemId,
        WHSLoadId           _loadId)
    {
        WHSLoadBuildAction      loadBuildAction = WHSLoadBuildAction::Restrict;
        WHSLoadMixGroupCriteria loadMixGroupCriteria;
        WHSInventTable          whsInventTable;
        InventTable             inventTable;
    
        select firstOnly inventTable
            where inventTable.ItemId == _itemId
            join whsInventTable
                where inventTable.ItemId == whsInventTable.ItemId;
    
        while select ItemGroupId, FilterCode from loadMixGroupCriteria
            where loadMixGroupCriteria.LoadMixGroupId == _mixGroupId
        {
            // Evaluate if item classifies in the item group
            if (inventTable.ItemGroupId()           == loadMixGroupCriteria.ItemGroupId
            ||  loadMixGroupCriteria.ItemGroupId    == '')
            {
                if (whsInventTable.isFilterMatching(loadMixGroupCriteria.FilterCode))
                {
                    if (_loadId == '')
                    {
                        loadBuildAction = WHSLoadBuildAction::None;
                    }
                    else
                    {
                        loadBuildAction = WHSLoadMixGroup::checkItemsOnLoad(_loadId, loadMixGroupCriteria.RecId);
                    }
                }
            }
        }
    
        return loadBuildAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemsOnLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates items on existing load for load mixing groups.
    /// </summary>
    /// <param name = "_loadId">The load Id.</param>
    /// <param name = "_loadMixGroupCriteriaRecId">The load mixing criterial record.</param>
    /// <returns>Returns object of type <c>WHSLoadBuildAction</c></returns>
    [Hookable(false)]
    internal static WHSLoadBuildAction checkItemsOnLoad(
        WHSLoadId                       _loadId,
        WHSLoadMixGroupCriteriaRecId    _loadMixGroupCriteriaRecId)
    {
        WHSLoadBuildAction  loadBuildAction = WHSLoadBuildAction::None;
        WHSLoadLine         loadLine;

        // Check each item on the proposed load to see if they can co-exist
        while select ItemId from loadLine
            group by ItemId
            where loadLine.LoadId == _loadId
        {
            loadBuildAction = WHSLoadMixGroup::checkItemAgainstConstraint(_loadMixGroupCriteriaRecId, loadLine.ItemId);
            
            if (loadBuildAction == WHSLoadBuildAction::Restrict)
            {
                break;
            }
        }

        return loadBuildAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemAgainstConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates items against load mixing constraints.
    /// </summary>
    /// <param name = "_loadMixGroupCriteriaRecId"></param>
    /// <param name = "_itemId"></param>
    /// <returns></returns>
    [Hookable(false)]
    internal static WHSLoadBuildAction checkItemAgainstConstraint(
        WHSLoadMixGroupCriteriaRecId    _loadMixGroupCriteriaRecId,
        ItemId                          _itemId)
    {
        WHSLoadBuildAction          loadBuildAction = WHSLoadBuildAction::None;
        WHSLoadMixGroupConstraint   loadMixGroupConstraint;
        WHSInventTable              constraintItem;
        ItemGroupId                 itemGroupId = InventTable::find(_itemId).ItemGroupId();

        // Check item against each constraint
        while select ItemGroupId, FilterCode, LoadBuildAction from loadMixGroupConstraint
            where loadMixGroupConstraint.LoadMixGroupCriteriaRecId == _loadMixGroupCriteriaRecId
        {
            if (itemGroupId                         == loadMixGroupConstraint.ItemGroupId
            ||  loadMixGroupConstraint.ItemGroupId  == '')
            {
                if (constraintItem.RecId == 0)
                {
                    constraintItem = WHSInventTable::find(_itemId);
                }

                if (constraintItem.isFilterMatching(loadMixGroupConstraint.FilterCode))
                {
                    loadBuildAction = loadMixGroupConstraint.LoadBuildAction;
                    
                    // if constraint is restrict - load fails
                    if (loadBuildAction == WHSLoadBuildAction::Restrict)
                    {
                        break;
                    }
                }
            }
        }

        return loadBuildAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:LoadMixGroupDevDoc</DeveloperDocumentation>
	<FormRef>WHSLoadMixGroup</FormRef>
	<Label>@WAX:LoadMixGroup</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>LoadMixGroupId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LoadMixGroupIdIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>LoadMixGroupIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadMixGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadMixGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadMixGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadMixGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LoadMixGroupIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadMixGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>