<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RestoredVATLogTransOper_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RestoredVATLogTransOper_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountInclVAT</Name>
				<Source><![CDATA[
    public display AmountMSTinclVAT_RU amountInclVAT()
    {
        return this.AmountLiableToVAT + this.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetAmounts</Name>
				<Source><![CDATA[
    public container assetAmounts()
    {
        RestoredVATLogTransOperAsset_RU     logTransOperAsset;
        Map mapAssets = new Map(Types::String, Types::Container);

        while select logTransOperAsset
            where logTransOperAsset.LogTransOperRefRecId == this.RecId
        {
            mapAssets.insert(logTransOperAsset.AssetId, [logTransOperAsset.TaxAmount,
                                                         logTransOperAsset.TaxAmountNotLiable,
                                                         logTransOperAsset.AmountLiableToVAT,
                                                         logTransOperAsset.AmountWrittenOff]);
        }
        return mapAssets.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAmountDirect</Name>
				<Source><![CDATA[
    public void calcTaxAmountDirect(boolean      _export,
                                           Factor       _factor,
                                           FactureId_RU _factureId,
                                           RefRecId     _invoiceRecId,
                                           Qty          _qtySettled)
    {
        RestoredVATLogTransOper_RU          restoredVATLogTransOperQty;
        RestoredVATLogTransOper_RU          restoredVATLogTransOperSum;

        PurchBookVATProcessLogTransOper_RU  processLogTransOper;
        PurchBookVATProcessLogTrans_RU      processLogTrans;

        TaxAmountVAT_RU                     taxAmount;
        AmountMST                           amountLiableToVAT;
        Qty                                 purchQty;
        BookStructSmallVATAmounts_RU        factureAmounts;
        Factor                              factor        = _factor;
        BookStructSmallVATAmounts_RU        usedAmounts   = new BookStructSmallVATAmounts_RU();
        TaxParameters                       taxParameters = TaxParameters::find();
        ;

        if (this.LineType != RestoredVATLineType_RU::Direct)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        restoredVATLogTransOperQty  = this.usedAmountsOper(RestoredVATLineType_RU::Direct);

        while select processLogTransOper
            where processLogTransOper.DefaultDimension     == this.DefaultDimension &&
                  processLogTransOper.TaxCode              == this.TaxCode          &&
                  processLogTransOper.Blocked              == NoYes::No             &&
                  processLogTransOper.BlockedAuto          == NoYes::No             &&
                  processLogTransOper.CanceledRefRecId     == 0                     &&
                  processLogTransOper.InventTransId        == this.InventTransId    &&
                  processLogTransOper.TransDate            <= this.TransDate
        exists join processLogTrans
            where processLogTrans.RecId           == processLogTransOper.RefRecId   &&
                  processLogTrans.FactureId       == _factureId                     &&
                  processLogTrans.InvoiceRecIdRef == _invoiceRecId                  &&
                  processLogTrans.ProcessingType  == PurchBookProcessingType_RU::Standard
        {
            factureAmounts = BookStructSmallVATAmounts_RU::create(processLogTransOper.FacturedAmounts);

            purchQty += factureAmounts.taxAmountVAT() ?
                        factureAmounts.qty() * processLogTransOper.TaxAmount / factureAmounts.taxAmountVAT() :
                        0;

            usedAmounts.addAmounts(processLogTransOper.AmountLiableToVAT + processLogTransOper.TaxAmount,
                                   processLogTransOper.AmountLiableToVAT,
                                   processLogTransOper.TaxAmount);
        }

        if (purchQty > restoredVATLogTransOperQty.QtySettled || taxParameters.RestoredVATCalcMethod_RU == RestoredVATCalcMethod_RU::ByFactor)
        {
            restoredVATLogTransOperSum = this.usedAmountsOper();

            taxAmount = usedAmounts.taxAmountVAT()                    -
                        restoredVATLogTransOperSum.TaxAmount          -
                        restoredVATLogTransOperSum.TaxAmountNotLiable -
                        restoredVATLogTransOperSum.TaxAmountWrittenOff;

            amountLiableToVAT = usedAmounts.amountLiableToVAT() - restoredVATLogTransOperSum.AmountLiableToVAT;

            if (taxParameters.RestoredVATCalcMethod_RU == RestoredVATCalcMethod_RU::Mixed)
            {
                factor = _qtySettled / (purchQty - restoredVATLogTransOperQty.QtySettled);
            }

            taxAmount           = taxAmount         * factor;
            amountLiableToVAT   = amountLiableToVAT * factor;

            if (taxAmount < 0)
            {
                taxAmount           = 0;
                amountLiableToVAT   = 0;
            }
        }

        taxAmount           = CurrencyExchangeHelper::amount(taxAmount);
        amountLiableToVAT   = CurrencyExchangeHelper::amount(amountLiableToVAT);

        if (_export)
        {
            this.TaxAmount += taxAmount;
        }
        else
        {
            this.TaxAmountNotLiable += taxAmount;
        }

        this.AmountLiableToVAT += amountLiableToVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureDate</Name>
				<Source><![CDATA[
    public display FactureDate_RU factureDate()
    {
        return RestoredVATLogTrans_RU::find(this.TransDate, this.ProcessLogTransRecId).FactureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureExternalId</Name>
				<Source><![CDATA[
    public display FactureExternalId_RU factureExternalId()
    {
        return RestoredVATLogTrans_RU::find(this.TransDate, this.ProcessLogTransRecId).FactureExternalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetsSum</Name>
				<Source><![CDATA[
    public void initFromAssetsSum()
    {
        RestoredVATLogTransOperAsset_RU transAsset;

        select sum(TaxAmount),
               sum(TaxAmountNotLiable),
               sum(AmountLiableToVAT),
               sum(AmountWrittenOff) from transAsset
                where transAsset.LogTransOperRefRecId == this.RecId;

        this.TaxAmount              = transAsset.TaxAmount;
        this.TaxAmountNotLiable     = transAsset.TaxAmountNotLiable;
        this.AmountLiableToVAT      = transAsset.AmountLiableToVAT;
        this.TaxAmountWrittenOff    = transAsset.AmountWrittenOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBookVATProcessLog</Name>
				<Source><![CDATA[
    public container salesBookVATProcessLog()
    {
        SalesBookVATProcessLogTable_RU      processLogTable;
        SalesBookVATProcessLogTrans_RU      processLogTrans;
        SalesBookVATProcessLogTransOper_RU  processLogTransOper;
        Map                                 mapTransRecId       = new Map(typeName2Type(extendedTypeStr(RefTableId)), Types::Container);
        RestoredVATLogTrans_RU              restoredVATLogTrans = RestoredVATLogTrans_RU::find(this.TransDate, this.ProcessLogTransRecId);

        void addRecIdToMap(RefTableId _tableId, RefRecId _recId)
        {
            container conRecId;

            if (mapTransRecId.exists(_tableId))
            {
                conRecId = mapTransRecId.lookup(_tableId);
            }

            if (! conFind(conRecId, _recId))
            {
                conRecId += _recId;
            }

            mapTransRecId.insert(_tableId, conRecId);
        }
        ;

        while select RecId from processLogTransOper
            where processLogTransOper.DefaultDimension == this.DefaultDimension &&
                  processLogTransOper.TaxCode          == this.TaxCode          &&
                  processLogTransOper.BlockedAuto      == NoYes::No             &&
                  processLogTransOper.InventTransId    == this.InventTransId    &&
                  processLogTransOper.RestoringType    != SalesBookVATRestoringType_RU::None &&
                 !processLogTransOper.CanceledRefRecId
        join RecId from processLogTrans
            where processLogTrans.RecId           == processLogTransOper.RefRecId     &&
                  processLogTrans.FactureId       == restoredVATLogTrans.FactureId    &&
                  processLogTrans.InvoiceRecIdRef == restoredVATLogTrans.InvoiceRecId &&
                  processLogTrans.ProcessingType  == SalesBookProcessingType_RU::VATRestoration
        join RecId from processLogTable
                where processLogTable.RecId == processLogTransOper.LogTableRefRecId
        {
            addRecIdToMap(processLogTable.TableId, processLogTable.RecId);
            addRecIdToMap(processLogTrans.TableId, processLogTrans.RecId);
            addRecIdToMap(processLogTransOper.TableId, processLogTransOper.RecId);
        }

        return mapTransRecId.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxType</Name>
				<Source><![CDATA[
    public display TaxType_W taxType()
    {
        return TaxTable::find(this.TaxCode).TaxType_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        RestoredVATSumCalc_RU       sumCalc;
        RestoredVATLogTrans_RU      vatLogTrans;
        RestoredVATLogTransOper_RU  vatLogTransOper;
        int                         sign = this.Include - this.orig().Include;
        ;

        ttsbegin;

        sumCalc = RestoredVATSumCalc_RU::construct();
        sumCalc.updateSum(this, false);
        sumCalc.end();

        super();

        if (sign)
        {
            vatLogTrans = RestoredVATLogTrans_RU::find(this.TransDate, this.ProcessLogTransRecId, true);

            select firstonly Include from vatLogTransOper
                where vatLogTransOper.TransDate             == this.TransDate            &&
                      vatLogTransOper.ProcessLogTransRecId  == this.ProcessLogTransRecId &&
                      vatLogTransOper.Include;

            if (vatLogTrans.Include != vatLogTransOper.Include)
            {
                vatLogTrans.Include = vatLogTransOper.Include;
                vatLogTrans.update(true);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usedAmountsOper</Name>
				<Source><![CDATA[
    public RestoredVATLogTransOper_RU usedAmountsOper(RestoredVATLineType_RU _lineType = RestoredVATLineType_RU::Direct)
    {
        RestoredVATLogTable_RU      restoredVATLogTable;
        RestoredVATLogTransOper_RU  restoredVATLogTransOperSum;
        ;

        select sum(AmountLiableToVAT),
               sum(TaxAmount),
               sum(TaxAmountNotLiable),
               sum(TaxAmountWrittenOff),
               sum(QtySettled) from restoredVATLogTransOperSum
            index hint TaxDimInventIdx
            where restoredVATLogTransOperSum.TransDate            != this.TransDate             &&
                  restoredVATLogTransOperSum.TaxCode              == this.TaxCode               &&
                  restoredVATLogTransOperSum.DefaultDimension     == this.DefaultDimension      &&
                  restoredVATLogTransOperSum.InventTransId        == this.InventTransId         &&
                  restoredVATLogTransOperSum.ProcessLogTransRecId == this.ProcessLogTransRecId  &&
                 (prmisDefault(_lineType)                                                       ||
                  restoredVATLogTransOperSum.LineType             == _lineType)                 &&
                  restoredVATLogTransOperSum.Include
        exists join restoredVATLogTable
            where restoredVATLogTable.TransDate == restoredVATLogTransOperSum.TransDate &&
                  restoredVATLogTable.Approved;

        return restoredVATLogTransOperSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                         ret = super();
        RestoredVATLogTransOper_RU      logTransOperSum;
        BookStructSmallVATAmounts_RU    facturedAmounts;
        TaxAmountVAT_RU                 taxAmount;
        ;

        if (this.LineType == RestoredVATLineType_RU::Direct || !this.Include)
        {
            return ret;
        }

        logTransOperSum = this.usedAmountsOper();
        facturedAmounts = BookStructSmallVATAmounts_RU::create(this.FacturedAmounts);

        taxAmount = facturedAmounts.taxAmountVAT()          -
                    logTransOperSum.TaxAmount               -
                    logTransOperSum.TaxAmountNotLiable      -
                    logTransOperSum.TaxAmountWrittenOff;

        if (taxAmount - this.TaxAmount - this.TaxAmountNotLiable - this.TaxAmountWrittenOff < 0)
        {
            ret = checkFailed("@GLS114221");

            this.data(this.orig());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static RestoredVATLogTransOper_RU find(TransDate                _transDate,
                                           TaxCode                  _taxCode,
                                           DimensionDefault         _dimension,
                                           InventTransId            _inventTransId,
                                           RefRecId                 _logTransRecId,
                                           RestoredVATLineType_RU   _lineType,
                                           NoYes                    _asset,
                                           boolean                  _forUpdate = false)
    {
        RestoredVATLogTransOper_RU  restoredVATLogTransOper;
        ;

        restoredVATLogTransOper.selectForUpdate(_forUpdate);

        select firstonly restoredVATLogTransOper
            index hint TaxDimInventIdx
            where restoredVATLogTransOper.TransDate             == _transDate     &&
                  restoredVATLogTransOper.TaxCode               == _taxCode       &&
                  restoredVATLogTransOper.DefaultDimension      == _dimension     &&
                  restoredVATLogTransOper.InventTransId         == _inventTransId &&
                  restoredVATLogTransOper.ProcessLogTransRecId  == _logTransRecId &&
                  restoredVATLogTransOper.LineType              == _lineType      &&
                  restoredVATLogTransOper.Asset                 == _asset;

        return restoredVATLogTransOper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS114333</DeveloperDocumentation>
	<Label>@GLS114333</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxCode</TitleField1>
	<TitleField2>LineType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TransRecIdIdx</ClusteredIndex>
	<Modules>RSalesPurchBooks</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RestoredVATLogTransOperAsset_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RestoredVATLogTransOperAsset_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amounts</Name>
			<Label>@GLS101175</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AmountLiableToVAT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountNotLiable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountWrittenOff</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@GLS105963</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Include</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Date</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DateExecuted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@GLS100861</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtySettled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Asset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransTxt</Name>
			<Label>@SYS13566</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountLiableToVAT</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS104936</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Asset</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS25653</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DateExecuted</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateExecuted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Executed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>FacturedAmounts</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BookAmounts_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Include</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IncludeIntoCalc_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemNameDisplay</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RestoredVATLineType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcessLogTransRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchBookLogTransRefRecId_RU</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtySettled</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>StartTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TimeOfDay</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountVAT_RU</ExtendedDataType>
			<Label>@GLS114339</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountNotLiable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountVAT_RU</ExtendedDataType>
			<Label>@GLS114340</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountWrittenOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountWrittenOff_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransTxt</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransTxt</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcessLogTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxDimInventIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProcessLogTransRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RestoredVATLogTransOper_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RestoredVATLogTransOper_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchBookVATProcessLogTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchBookVATProcessLogTrans_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchBookVATProcessLogTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RestoredVATLogTransOper_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcessLogTransRecId</Name>
					<SourceEDT>PurchBookLogTransRefRecId_RU</SourceEDT>
					<Field>ProcessLogTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RestoredVATLogTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RestoredVATLogTrans_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RestoredVATLogTrans</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RestoredVATLogTransOper_RU</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcessLogTransRecId</Name>
					<Field>ProcessLogTransRecId</Field>
					<RelatedField>ProcessLogTransRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>TaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>