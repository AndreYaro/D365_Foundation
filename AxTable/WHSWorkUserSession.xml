<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserSession</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkUserSession extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.UserSessionId = WHSWorkUserSession::generateNewUserSessionId();
        this.ResetNavigation = NoYes::No;
        this.VersionNumber = ApplicationVersion::applBuildNo();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNewUserSessionId</Name>
				<Source><![CDATA[
    private static guid generateNewUserSessionId()
    {
        using (var cryptoProvider = new System.Security.Cryptography.RNGCryptoServiceProvider())
        {
            System.Byte[] bytes = new System.Byte[16]();
            cryptoProvider.GetBytes(bytes);
            return new System.Guid(bytes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recreateAuthorizationTokensInXml</Name>
				<Source><![CDATA[
    internal XML recreateAuthorizationTokensInXml(XML _xml)
    {
        str searchPattern = 'sessionId="{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"';
        str replacementPattern = strFmt('sessionId="%1"', this.UserSessionId);

        return strReplace(_xml, searchPattern, replacementPattern);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAuthorizationTokensFromXml</Name>
				<Source><![CDATA[
    internal XML removeAuthorizationTokensFromXml(XML _xml)
    {
        str searchPattern = strFmt('%1', this.UserSessionId);
        str replacementPattern = '{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}';

        return strReplace(_xml, searchPattern, replacementPattern);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPrevPass</Name>
				<Source><![CDATA[
    /// <summary>
	/// Clears previous pass of the session.
	/// </summary>
	/// <param name="_userId">
	/// User id of the user that has the work user session.
	/// </param>
    static void clearPrevPass(WHSUserId _userId)
    {
        WHSWorkUserSession::setPrevPass(_userId, conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the RF user session.
    /// </summary>
    /// <param name="_userId">
    /// Current user id.
    /// </param>
    /// <param name="_workExecuteMode">
    /// Current value of execute mode.
    /// </param>
    /// <param name="_workExecuteStep">
    /// Current work execute mode step.
    /// </param>
    /// <param name="_workExecutePassThrough">
    /// Current packed value of work execute pass-through.
    /// </param>
    /// <param name="_languageId">
    /// The language ID of the associated worker.
    /// </param>
    /// <param name="_xml">
    /// XML from RF.
    /// </param>
    /// <param name="_workUserSessionStateCheck">
    /// Work user session state check string.
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse currently used.
    /// </param>
    /// <returns>
    /// Active user session.
    /// </returns>
    public static WHSWorkUserSession createOrUpdate(
        WHSUserId                       _userId,
        WHSWorkExecuteMode              _workExecuteMode,
        WHSWorkExecuteStep              _workExecuteStep,
        WHSWorkExecutePassThrough       _workExecutePassThrough,
        LanguageId                      _languageId,
        XML                             _xml,
        WHSWorkUserSessionStateCheck    _workUserSessionStateCheck,
        InventLocationId                _inventLocationId)
    {
        WHSWorkUserSession  workUserSession;

        if (_userId && WHSWorkUser::exist(_userId))
        {
            ttsbegin;

            workUserSession = WHSWorkUserSession::find(_userId, true);
            boolean creatingNewSession;

            if (!workUserSession)
            {
                workUserSession.UserId          = _userId;
                workUserSession.LoginDateTime   = DateTimeUtil::utcNow();
                creatingNewSession              = true;
            }

            if (_inventLocationId)
            {
                workUserSession.InventLocationId        = _inventLocationId;
            }

            workUserSession.CompanyId               = curext();
            workUserSession.LanguageId              = _languageId;
            workUserSession.VersionNumber           = ApplicationVersion::applBuildNo();
            workUserSession.LastActionDateTime      = DateTimeUtil::utcNow();

            XML scrubbedXml = workUserSession.removeAuthorizationTokensFromXml(_xml);

            container errorLog = conNull();
            if (Global::infologLine() > 0)
            {
                errorLog = infolog.cut();
            }

            var sessionState = workUserSession.sessionState(true);
            sessionState.parmMode(_workExecuteMode);
            sessionState.parmStep(_workExecuteStep);
            sessionState.parmPass(_workExecutePassThrough);
            sessionState.parmXml(scrubbedXml);
            sessionState.parmSessionStateCheck(_workUserSessionStateCheck);
            sessionState.parmErrorLog(errorLog);
            sessionState.createOrUpdate(); // Will take care of inserting workUserSession record if needed

            if (WHSParameters::find().rfSessionLogging)
            {
                if (errorLog)
                {
                    WHSWorkUserErrorLog::addErrorLog(_userId, errorLog);
                }

                WHSWorkUserSessionLog::addSessionLog(_userId, scrubbedXml);
            }

            ttscommit;

            if (creatingNewSession)
            {
                WHSWorkUserSessionInProgressLock::createForUserSession(workUserSession);
            }
        }

        return workUserSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSession</Name>
				<Source><![CDATA[
    /// <summary>
	/// Deletes work user session.
	/// </summary>
	/// <param name="_userId">
	/// Id of the user who owns the session.
	/// </param>
    public static void deleteSession(WHSUserId _userId)
    {
        ttsbegin;

        WHSWorkUserSession userSession = WHSWorkUserSession::find(_userId, true);
        if (userSession)
        {
            if (!userSession.validateDelete())
            {
                throw error(strFmt("@WAX:WHSCannotDeleteRecordInTable", tablePName(WHSWorkUserSession)));
            }

            WHSWorkUserSessionInProgressLock::deleteForUserSession(userSession);

            userSession.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvalidSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the work user session if its version number is different from current application version.
    /// </summary>
    /// <param name="_userId">
    /// Id of the user who owns the session.
    /// </param>
    public static void deleteInvalidSession(WHSUserId _userId)
    {
        ttsbegin;

        var userSession = WHSWorkUserSession::find(_userId, true);
        if (userSession.VersionNumber != ApplicationVersion::applBuildNo())
        {
            WHSWorkUserSession::deleteSession(_userId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
	/// Checks if a specific <c>whsWorkUserSession</c> record exists.
	/// </summary>
	/// <param name="_userId">
	/// User id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSUserId _userId)
    {
        return (_userId) &&
               (select firstonly whsWorkUserSession
                where whsWorkUserSession.UserId == _userId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds a specific <c>WHSWorkUserSession</c> record with given parameters.
	/// </summary>
	/// <param name="_userId">
	/// User id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
    /// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSWorkUserSession find(WHSUserId     _userId,
                                          boolean       _forupdate = false)
    {
        WHSWorkUserSession  workUserSession;

        if (_userId)
        {
            workUserSession.selectForUpdate(_forupdate);
           
            select firstonly workUserSession
                where workUserSession.UserId == _userId;
        }

        return workUserSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static WHSWorkUserSession findRecId(RecId _recId, boolean _forUpdate = false)
    {
        WHSWorkUserSession  workUserSession;

        if (_recId != 0)
        {
            workUserSession.selectForUpdate(_forupdate);
           
            select firstonly workUserSession
                where workUserSession.RecId == _recId;
        }

        return workUserSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEnsureRecordIsReadInsideTTS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkUserSession</c> record with given parameters. The record is read in a transaction scope to ensure it has been freshly updated in the cache in the transaction.
    /// </summary>
    /// <param name="_userId">
    /// User id of the record.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkUserSession findEnsureRecordIsReadInsideTTS(WHSUserId _userId)
    {
        WHSWorkUserSession  workUserSession;
        
        ttsbegin;
        workUserSession = WHSWorkUserSession::find(_userId);
        ttscommit;

        return workUserSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reset navigation flag
    /// for the session for given user
    /// if the session exists.
    /// </summary>
    /// <param name="_user">
    /// Id of the user to set the flag for.
    /// </param>
    public static void resetNavigation(UserId _user)
    {
        if (_user)
        {            
            
            ttsbegin;

            var workUserSession = WHSWorkUserSession::find(_user, true);
        
            if (workUserSession && workUserSession.ResetNavigation == NoYes::No)
            {
                workUserSession.ResetNavigation = NoYes::Yes;
                workUserSession.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetNavigationAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reset navigation flag on
    /// all of the active sessions.
    /// </summary>
    public static void resetNavigationAll()
    {
        WHSWorkUserSession sessions;

        ttsbegin;

        update_recordSet sessions
            setting
                ResetNavigation = NoYes::Yes
            where sessions.ResetNavigation == NoYes::No;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrevPass</Name>
				<Source><![CDATA[
    /// <summary>
	/// Sets a previous pass into user session.
	/// </summary>
	/// <param name="_userId">
	/// User id of the session.
	/// </param>
	/// <param name="_prevPass">
	/// Previous pass to be set into session.
	/// </param>
    static void setPrevPass(WHSUserId   _userId,
                            container   _prevPass)
    {
        ttsbegin;

        var workUserSession = WHSWorkUserSession::find(_userId, true);

        if (workUserSession)
        {
            WHSWorkUserSessionStateFacade sessionState = workUserSession.sessionState(true);

            if (sessionState.parmPrevPass() != _prevPass)
            {
                sessionState.parmPrevPass(_prevPass);
                sessionState.createOrUpdate();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastPrintedLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates the last printed license plate of the session.
	/// </summary>
	/// <param name="_userId">
	/// User id of the session.
	/// </param>
	/// <param name="_licensePlate">
	/// License plate id to be set into session.
	/// </param>
    static void updateLastPrintedLicensePlate(WHSUserId         _userId,
                                              WHSLicensePlateId _licensePlate)
    {
        if (WHSSkipUpdatingLastPrintedLicensePlateForGenericUserFlight::instance().isEnabled() && _userId == WHSParameters::find().GenericWorkUserId)
        {
            return;
        }

        ttsbegin;

        var workUserSession = WHSWorkUserSession::find(_userId, true);

        if (workUserSession.RecId != 0)
        {
            workUserSession.LastPrintedLicensePlate = _licensePlate;
            workUserSession.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
	/// Update warehouse info in the session.
	/// </summary>
	/// <param name="_userId">
	/// User id of the session.
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id to be set into session.
	/// </param>
    public static void updateWarehouse(WHSUserId _userId, InventLocationId _inventLocationId)
    {
        if (_userId && _inventLocationId)
        {
            ttsbegin;

            var userSession = WHSWorkUserSession::find(_userId, true);
            if (userSession
                && userSession.InventLocationId != _inventLocationId)
            {
                userSession.InventLocationId = _inventLocationId;
                userSession.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sessionState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkUserSessionStateFacade sessionState(boolean _forUpdate = false)
    {
        return WHSWorkUserSessionStateFacade::newFromWorkUserSession(this, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sessionXml</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public display XML sessionXml()
    {
        return this.sessionState().parmXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainSessionXML</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public display XML mainSessionXML()
    {
        return WHSWorkUserSessionState::find(this.RecId, WHSWorkUserSessionType::Main).XML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detourSessionXML</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public display XML detourSessionXML()
    {
        return WHSWorkUserSessionState::find(this.RecId, WHSWorkUserSessionType::Detour).XML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detour2SessionXML</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public display XML detour2SessionXML()
    {
        return WHSWorkUserSessionState::find(this.RecId, WHSWorkUserSessionType::Detour2).XML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInDetourSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isInDetourSession(WHSUserId _userId)
    {
        if (_userId)
        {
            WHSWorkUserSession userSession = WHSWorkUserSession::find(_userId);
            if (userSession)
            {
                return WHSWorkUserSessionState::find(userSession.RecId, WHSWorkUserSessionType::Detour).RecId > 0;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4518</DeveloperDocumentation>
	<Label>@WAX1072</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>UserId</TitleField1>
	<TitleField2>LoginDateTime</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>UserIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>UserIdIdx</PrimaryIndex>
	<ReplacementKey>UserIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WHSWorkUserSessionLog</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSWorkUserSessionLog</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserSessionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoginDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastActionDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoginDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastActionDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuBreadcrumbs</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastPrintedLicensePlate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserSessionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS30012</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastActionDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLastActionDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LastPrintedLicensePlate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLastPrintedLicensePlate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LoginDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoginDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>MenuBreadcrumbs</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuBreadcrumbs</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PrevPass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPrevPass</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ResetNavigation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>RFErrorLog</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFErrorLog</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>UserSessionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSWorkUserSessionId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkExecuteMode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkExecuteMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WorkExecutePassThrough</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkExecutePassThrough</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkExecuteStep</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkExecuteStep</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XML</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>XML</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SessionStateCheck</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkUserSessionStateCheck</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VersionNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysBuildNo</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyId</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>CompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LastPrintedLicensePlate</Name>
					<SourceEDT>WHSLastPrintedLicensePlate</SourceEDT>
					<Field>LastPrintedLicensePlate</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserId</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>UserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>