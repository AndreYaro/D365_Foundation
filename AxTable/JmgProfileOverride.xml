<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileOverride</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgProfileOverride extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs when the value of a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that is modified.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        if (_fieldId == fieldNum(JmgProfileOverride, ProfileStartCodeBlankPrev))
            this.setDayCode();

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normFlexTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>NormFlexSec</c> field on the <c>JmgProfileOverride</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the field value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>NormFlexSec</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelNormFlexTime normFlexTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.NormFlexSec = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Clocktime);
        }

        return JmgProfileSeconds::formattedSeconds(this.NormFlexSec,JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the value of the <c>NormSec</c> field on the <c>JmgProfileOverride</c> record.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the field value must be updated.
    /// </param>
    /// <param name="value">
    /// The new value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>NormSec</c> field formatted as a string.
    /// </returns>
    public edit JmgLabelNormTime normTime(boolean _set, JmgTimeString value)
    {
        if (_set)
        {
            this.Normsec = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Clocktime);
        }

        return JmgProfileSeconds::formattedSeconds(this.Normsec,JmgSecondPresentationEnum::Clocktime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDayCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the day code on <c>JmgProfileSpecOverride</c> records, which is associated to the <c>JmgProfileOverride</c> record.
    /// </summary>
    void setDayCode()
    {
        JmgProfileOverrideSpec  jmgProfileOverrideSpec;
        FromTime                dayTimeChk;
        JmgRelDayNo             dayCode;

        dayTimeChk = maxInt();
        dayCode    = this.ProfileStartCodeBlankPrev == JmgProfileStartCodeBlankPrev::Prev ? -1 : 0;

        ttsbegin;

        while select forupdate LineNum, StartTime, StartDay, EndTime, EndDay from jmgProfileOverrideSpec
            order by LineNum
            where jmgProfileOverrideSpec.Worker         == this.Worker &&
                  jmgProfileOverrideSpec.ProfileDate    == this.ProfileDate
        {
            if (dayTimeChk <maxInt())
            {
                if (jmgProfileOverrideSpec.StartTime < dayTimeChk)
                    dayCode++;
            }
            jmgProfileOverrideSpec.StartDay = dayCode;
            if (jmgProfileOverrideSpec.EndTime < jmgProfileOverrideSpec.StartTime)
                dayCode++;

            jmgProfileOverrideSpec.EndDay = dayCode;
            jmgProfileOverrideSpec.doUpdate();
            dayTimeChk  = jmgProfileOverrideSpec.EndTime;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFrom_JmgStampJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an overridden profile for the worker and profile date, specified in the
    /// <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="jmgStampJournalTable">
    /// A <c>JmgStampJournalTable</c> record that refers to a worker and profile date.
    /// </param>
    static void createFrom_JmgStampJournalTable(JmgStampJournalTable jmgStampJournalTable)
    {
        JmgProfileOverride      jmgProfileOverride;
        JmgProfileSpec          jmgProfileSpec;
        JmgProfileDay           jmgProfileDay;
        JmgProfileOverrideSpec  jmgProfileOverrideSpec;

        ttsbegin;

        if (jmgStampJournalTable)
        {
            jmgProfileOverride = JmgProfileOverride::find(jmgStampJournalTable.Worker,jmgStampJournalTable.ProfileDate,true);
            if (jmgProfileOverride)
                jmgProfileOverride.delete();

            jmgProfileDay                                   = JmgProfileDay::find(jmgStampJournalTable.Profile,JmgProfiles::date2DayId(jmgStampJournalTable.ProfileDate));
            jmgProfileOverride.Worker                       = jmgStampJournalTable.Worker;
            jmgProfileOverride.ProfileDate                  = jmgStampJournalTable.ProfileDate;
            jmgProfileOverride.ProfileStartCodeBlankPrev    = jmgProfileDay.ProfileStartCodeBlankPrev;
            jmgProfileOverride.NormFlexSec                  = jmgProfileDay.NormFlexSec;
            jmgProfileOverride.Normsec                      = jmgProfileDay.NormSec;
            jmgProfileOverride.insert();

            while select jmgProfileSpec
                order by LineNum
                where jmgProfileSpec.Profile    == jmgStampJournalTable.Profile &&
                      jmgProfileSpec.DayId      == jmgProfileDay.DayId
            {
                jmgProfileOverrideSpec.Worker           = jmgProfileOverride.Worker;
                jmgProfileOverrideSpec.ProfileDate      = jmgProfileOverride.ProfileDate;

                jmgProfileOverrideSpec.data(JmgProfileSpecMap::initFromMap(jmgProfileSpec));
                jmgProfileOverrideSpec.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgProfileOverride</c> record from the database.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker to search for.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date to search for.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the returned record must be selected for update.
    /// </param>
    /// <returns>
    /// A <c>JmgProfileOverride</c> record from the database.
    /// </returns>
    static JmgProfileOverride find(JmgWorkerRecId _worker, JmgProfileDate _profileDate, boolean  _forUpdate = false)
    {
        JmgProfileOverride jmgProfileOverride;

        if (_worker && _profileDate)
        {
            jmgProfileOverride.selectForUpdate(_forUpdate);

            select firstonly jmgProfileOverride
                where jmgProfileOverride.Worker         == _worker &&
                      jmgProfileOverride.ProfileDate    == _profileDate;
        }

        return jmgProfileOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317296</DeveloperDocumentation>
	<Label>@SYS38848</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>ProfileDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>EmplDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>EmplDateIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JmgProfileOverrideSpec</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>JmgProfileOverrideSpec</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfileStartCodeBlankPrev</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StandardTime</Name>
			<Label>@SYS38432</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>normTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>normFlexTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NormFlexSec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Normsec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProfileDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfileStartCodeBlankPrev</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>JmgProfileStartCodeBlankPrev</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProfileDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgProfileOverride</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgProfileOverrideSpec</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>JmgProfileOverrideSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProfileTimeOverride</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProfileOverride</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProfileDate</Name>
					<Field>ProfileDate</Field>
					<RelatedField>ProfileDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>