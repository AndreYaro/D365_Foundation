<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityIdentifier</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductEntityIdentifier extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>EcoResProductEntityIdentifier</c> record.
    /// </summary>
    /// <param name = "_identifierName">The identifier name.</param>
    /// <param name = "_productRecId">The product rec ID.</param>
    /// <param name = "_scopeRecId">The identifier scope rec ID.</param>
    /// <param name = "_selectForUpdate">True if the record needs to be selected for update; otherwise false.</param>
    /// <returns>The <c>EcoResProductEntityIdentifier</c> record that was found, if any.</returns>
    public static EcoResProductEntityIdentifier find(
                                    EcoResProductEntityIdentifierName           _identifierName,
                                    EcoResProductRecId                          _productRecId,
                                    EcoResProductEntityIdentifierScopeRecId     _scopeRecId,
                                    boolean                                     _selectForUpdate = false)
    {
        EcoResProductEntityIdentifier identifier;

        if (_identifierName && _productRecId && _scopeRecId)
        {
            identifier.selectForUpdate(_selectForUpdate);

            select firstonly identifier
                where identifier.Identifier == _identifierName
                    && identifier.Product == _productRecId
                    && identifier.Scope == _scopeRecId;
        }

        return identifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>EcoResProductEntityIdentifier</c> table.
    /// </summary>
    /// <param name = "_identifierName">The identifier name.</param>
    /// <param name = "_productRecId">The product rec ID.</param>
    /// <param name = "_scopeRecId">The identifier scope rec ID.</param>
    /// <param name = "_unitOfMeasure">The unit of measure.</param>
    /// <param name = "_quantity">The quantity.</param>
    /// <returns>The created <c>EcoResProductEntityIdentifier</c> record.</returns>
    public static EcoResProductEntityIdentifier create(
                                    EcoResProductEntityIdentifierName           _identifierName,
                                    EcoResProductRecId                          _productRecId,
                                    EcoResProductEntityIdentifierScopeRecId     _scopeRecId,
                                    UnitOfMeasureSymbol                         _unitOfMeasure = '',
                                    InventQty                                   _quantity = 0)
    {
        EcoResProductEntityIdentifier identifier;

        if (_identifierName && _productRecId && _scopeRecId)
        {
            ttsbegin;

            identifier.Identifier = _identifierName;
            identifier.Product = _productRecId;
            identifier.Scope = _scopeRecId;
            identifier.UnitOfMeasure = _unitOfMeasure;
            identifier.Quantity = _quantity;

            identifier.insert();

            ttscommit;
        }

        return identifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates, if it does not already exist, a <c>EcoResProductEntityIdentifier</c> record.
    /// </summary>
    /// <param name = "_identifierName">The identifier name.</param>
    /// <param name = "_productRecId">The product rec ID.</param>
    /// <param name = "_scopeRecId">The identifier scope rec ID.</param>
    /// <param name = "_unitOfMeasure">The unit of measure.</param>
    /// <param name = "_quantity">The quantity.</param>
    /// <returns>The <c>EcoResProductEntityIdentifier</c> record that was found or created</returns>
    public static EcoResProductEntityIdentifier findOrCreate(
                                    EcoResProductEntityIdentifierName           _identifierName,
                                    EcoResProductRecId                          _productRecId,
                                    EcoResProductEntityIdentifierScopeRecId     _scopeRecId,
                                    UnitOfMeasureSymbol                         _unitOfMeasure = '',
                                    InventQty                                   _quantity = 0)
    {
        EcoResProductEntityIdentifier identifier = EcoResProductEntityIdentifier::find(_identifierName, _productRecId, _scopeRecId);

        if (!identifier && _identifierName && _productRecId && _scopeRecId)
        {
            identifier = EcoResProductEntityIdentifier::create(_identifierName, _productRecId, _scopeRecId, _unitOfMeasure, _quantity);
        }

        return identifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<Label>@SCM:EcoResProductEntityIdentifier</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Identifier</TitleField1>
	<TitleField2>Product</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>IdentifierIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Identifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Scope</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Identifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Scope</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Identifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductEntityIdentifierName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Scope</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductEntityIdentifierScopeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitOfMeasure</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IdentifierIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Identifier</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Scope</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductEntityIdentifierScope</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>EcoResProductEntityIdentifierScope</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Scope</Name>
					<Field>Scope</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>