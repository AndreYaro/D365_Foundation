<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationGroupRuleLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationGroupRuleLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numberOfLinesForRule</Name>
				<Source><![CDATA[
    internal static int64 numberOfLinesForRule(RecId _groupRule)
    {
        BankReconciliationGroupRuleLine ruleLine;
        select count(RecId) from ruleLine
            where ruleLine.BankReconciliationGroupRule == _groupRule;

        return ruleLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldExist</Name>
				<Source><![CDATA[
    internal static boolean fieldExist(RecId _groupRule, FieldId _fieldId)
    {
        BankReconciliationGroupRuleLine ruleLine;

        if (BankReconciliationMatchingRuleDefaultGroupConditionFlight::instance().isEnabled())
        {
            ruleLine = BankReconciliationGroupRuleLine::findFieldGroupRuleLine(_groupRule, _fieldId);
        }
        else
        {
            select RecId from ruleLine
                where ruleLine.BankReconciliationGroupRule == _groupRule
                    && ruleLine.FieldId == _fieldId;
        }

        return ruleLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFieldGroupRuleLine</Name>
				<Source><![CDATA[
    internal static BankReconciliationGroupRuleLine findFieldGroupRuleLine(RecId _groupRule, FieldId _fieldId, boolean _update = false)
    {
        BankReconciliationGroupRuleLine ruleLine;
        select firstonly ruleLine
            where ruleLine.BankReconciliationGroupRule == _groupRule
                && ruleLine.FieldId == _fieldId;

        ruleLine.selectForUpdate(_update);
        return ruleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocGroupRuleLineFromDocMatchRuleLine</Name>
				<Source><![CDATA[
    internal static void insertDocGroupRuleLineFromDocMatchRuleLine(BankReconciliationMatchRule _matchRule, FieldId _fieldId)
    {
        if (_matchRule.MatchActionType == BankReconciliationMatchActionType::Match
            && _matchRule.isGroupBankTransaction()
            && !BankReconciliationGroupRuleLine::isFieldExcludedFromGroupingActions(tableNum(BankReconciliationDocumentOpenTmp), _fieldId))
        {
            ttsbegin;
            if (!_matchRule.BankDocumentGroupRule)
            {
                _matchRule.BankDocumentGroupRule = BankReconciliationGroupRule::createNewRule(BankReconciliationGroupRuleType::BankDocumentGroup).RecId;
                _matchRule.update();
            }

            BankReconciliationGroupRuleLine documentGroupRuleLine;
            select firstonly RecId from documentGroupRuleLine
                where documentGroupRuleLine.BankReconciliationGroupRule == _matchRule.BankDocumentGroupRule
                    && documentGroupRuleLine.FieldId == _fieldId;

            if (!documentGroupRuleLine.RecId
                && _fieldId
                && Box::yesNo(strFmt("@Bank:DocGroupConditionWillBeAddedMessage", fieldId2PName(tableNum(BankReconciliationDocumentOpenTmp), _fieldId)), DialogButton::Yes) == DialogButton::Yes)
            {
                documentGroupRuleLine.BankReconciliationGroupRule = _matchRule.BankDocumentGroupRule;
                documentGroupRuleLine.FieldId = _fieldId;
                documentGroupRuleLine.insert();
            }
            ttscommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStmtGroupRuleLineFromDocMatchRuleLine</Name>
				<Source><![CDATA[
    internal static void insertStmtGroupRuleLineFromDocMatchRuleLine(BankReconciliationMatchRule _matchRule, FieldId _docMatchRuleLineComparedFieldId)
    {
        BankReconciliationGroupRuleLine stmtGroupRuleLine;

        if (_matchRule.MatchActionType == BankReconciliationMatchActionType::Match
            && _matchRule.isGroupBankStatement()
            && !BankReconciliationGroupRuleLine::isFieldExcludedFromGroupingActions(tableNum(BankReconciliationStatementOpenTmp), _docMatchRuleLineComparedFieldId))
        {
            ttsbegin;
            if (!_matchRule.BankStatementGroupRule)
            {
                _matchRule.BankStatementGroupRule = BankReconciliationGroupRule::createNewRule(BankReconciliationGroupRuleType::BankStatementGroup).RecId;
                _matchRule.update();
            }
            
            select firstonly RecId from stmtGroupRuleLine
                where stmtGroupRuleLine.BankReconciliationGroupRule == _matchRule.BankStatementGroupRule
                    && stmtGroupRuleLine.FieldId == _docMatchRuleLineComparedFieldId;

            if (!stmtGroupRuleLine.RecId
                && _docMatchRuleLineComparedFieldId
                && Box::yesNo(strFmt("@Bank:StmtGroupConditionWillBeAddedMessage", fieldId2PName(tableNum(BankReconciliationStatementOpenTmp), _docMatchRuleLineComparedFieldId)), DialogButton::Yes) == DialogButton::Yes)
            {
                stmtGroupRuleLine.BankReconciliationGroupRule = _matchRule.BankStatementGroupRule;
                stmtGroupRuleLine.FieldId = _docMatchRuleLineComparedFieldId;
                stmtGroupRuleLine.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldExcludedFromGroupingActions</Name>
				<Source><![CDATA[
    internal static boolean isFieldExcludedFromGroupingActions(TableId _tableId, FieldId _fieldId)
    {
        boolean ret;

        container documentExcludedFileds = [
            fieldNum(BankReconciliationDocumentOpenTmp, BankCurrencyAmount),
            fieldNum(BankReconciliationDocumentOpenTmp, Cancelled),
            fieldNum(BankReconciliationDocumentOpenTmp, CorrectionBankCurrencyAmount),
            fieldNum(BankReconciliationDocumentOpenTmp, CreditAmount),
            fieldNum(BankReconciliationDocumentOpenTmp, DebitAmount),
            fieldNum(BankReconciliationDocumentOpenTmp, Description),
            fieldNum(BankReconciliationDocumentOpenTmp, IsMatched),
            fieldNum(BankReconciliationDocumentOpenTmp, Posted),
            fieldNum(BankReconciliationDocumentOpenTmp, IsReconciled),
            fieldNum(BankReconciliationDocumentOpenTmp, Status),
            fieldNum(BankReconciliationDocumentOpenTmp, TransactionCurrencyAmount),
            fieldNum(BankReconciliationDocumentOpenTmp, RecVersion),
            fieldNum(BankReconciliationDocumentOpenTmp, BankReconciliationMatchRuleId),
            fieldNum(BankReconciliationDocumentOpenTmp, BankReconciliationMatchingType)];

        container stmtExcludedFileds = [
            fieldNum(BankReconciliationStatementOpenTmp, AdditionalEntryInformation),
            fieldNum(BankReconciliationStatementOpenTmp, BankCurrencyAmount),
            fieldNum(BankReconciliationStatementOpenTmp, BankStatementCounterCurrencyAmount),
            fieldNum(BankReconciliationStatementOpenTmp, CreditAmount),
            fieldNum(BankReconciliationStatementOpenTmp, DebitAmount),
            fieldNum(BankReconciliationStatementOpenTmp, BankStatementInstructedCurrencyAmt),
            fieldNum(BankReconciliationStatementOpenTmp, IsMatched),
            fieldNum(BankReconciliationStatementOpenTmp, IsNewBankDocument),
            fieldNum(BankReconciliationStatementOpenTmp, Posted),
            fieldNum(BankReconciliationStatementOpenTmp, Reconciled),
            fieldNum(BankReconciliationStatementOpenTmp, Reversal),
            fieldNum(BankReconciliationStatementOpenTmp, SequenceNum),
            fieldNum(BankReconciliationStatementOpenTmp, RecVersion),
            fieldNum(BankReconciliationStatementOpenTmp, BankReconciliationMatchRuleId),
            fieldNum(BankReconciliationStatementOpenTmp, BankReconciliationMatchingType)];

        switch (_tableId)
        {
            case tableNum(BankReconciliationDocumentOpenTmp):
                ret = conFind(documentExcludedFileds, _fieldId);
                break;

            case tableNum(BankReconciliationStatementOpenTmp):
                ret = conFind(stmtExcludedFileds, _fieldId);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankReconciliationGroupRule</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldId</Name>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Label>@CashManagement:GroupCondition</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupRuleFieldIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>BankReconciliationGroupRule</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankReconciliationGroupRule</Name>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankReconciliationGroupRule</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankReconciliationGroupRule</Name>
					<Field>BankReconciliationGroupRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>