<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTaxTransInfo_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTaxTransInfo_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    public NoYes isCreditNote(TaxTrans _taxTrans)
    {
        NoYes ret;
        ;
        if ((((_taxTrans.TaxBaseAmount  > 0 || _taxTrans.TaxAmount > 0) &&
            _taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::IncomingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::UseTax            ||
            _taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
            ((_taxTrans.TaxBaseAmount   < 0 || _taxTrans.TaxAmount < 0) &&
            _taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::IncomingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::UseTax            ||
            _taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
            ((_taxTrans.TaxBaseAmount   < 0 || _taxTrans.TaxAmount < 0) &&
            _taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::OutgoingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
            ((_taxTrans.TaxBaseAmount   > 0 || _taxTrans.TaxAmount > 0) &&
            _taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
            (_taxTrans.TaxDirection  == TaxDirection::OutgoingTax       ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
            _taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))))
        {
            ret = NoYes::No;
        }
        else
        {
            ret = NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax information from customer transactions (if any exists)
    /// </summary>
    /// <param name="_taxTrans">
    /// Tax transaction for which the information should be found.
    /// </param>
    /// <returns>
    /// true, if related customer transaction is found.
    /// </returns>
    /// <remarks>
    /// Some data can be loaded from related customer invoice (if any exists)
    /// </remarks>
    public boolean loadFromCust(TaxTrans _taxTrans)
    {
        boolean             isProcessed;
        CustTrans           custTrans;
        CustTable           custTable;

        CustInvoiceJour     custInvoiceJour;
        ProjInvoiceJour     projInvoiceJour;
        LedgerJournalTrans  ledgerJournalTrans;
        #ISOCountryRegionCodes

        select firstonly custTrans
            where  custTrans.Voucher             == _taxTrans.Voucher
                && custTrans.TransDate           == _taxTrans.TransDate
        outer join custInvoiceJour
            where  custInvoiceJour.LedgerVoucher == custTrans.Voucher
                && custInvoiceJour.InvoiceDate   == custTrans.TransDate
        outer join projInvoiceJour
            where  projInvoiceJour.ProjInvoiceId == custTrans.Invoice
                && projInvoiceJour.InvoiceDate   == custTrans.TransDate
        outer join ledgerJournalTrans
            where  ledgerJournalTrans.Voucher    == custTrans.Voucher
                && ledgerJournalTrans.TransDate  == custTrans.TransDate;

        if (custTrans)
        {
            isProcessed = true;

            custTable = CustTable::find(custTrans.AccountNum);

            if (custInvoiceJour)
            {
                if (custInvoiceJour.VATNum == custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custInvoiceJour.InvoiceDate))
                {
                    if (CustTable::find(custInvoiceJour.OrderAccount).InvoiceAddress == InvoiceOrderAccount::OrderAccount)
                    {
                        this.CountryRegionId = custTable.countryRegionId();
                    }
                    else
                    {
                        this.CountryRegionId = LogisticsPostalAddress::findRecId(custInvoiceJour.InvoicePostalAddress).CountryRegionId;
                    }
                }
                else
                {
                    this.CountryRegionId = LogisticsPostalAddress::findRecId(custInvoiceJour.DeliveryPostalAddress).CountryRegionId;
                }
                this.VATNum             = custInvoiceJour.VATNum;
                this.TaxTransDataOrigin = TaxTransDataOrigin_W::CustInvoiceJour;
                this.DocumentAmountMST  = custInvoiceJour.SalesBalanceMST;
            }
            else if (projInvoiceJour)
            {
                this.CountryRegionId     = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress).CountryRegionId;
                this.VATNum              = projInvoiceJour.VATNum;
                this.TaxTransDataOrigin  = TaxTransDataOrigin_W::ProjInvoiceJour;
                this.DocumentAmountMST   = projInvoiceJour.invoiceAmountMST();
            }
            else
            {
                this.CountryRegionId = custTable.postalAddress().CountryRegionId;

                this.VATNum             = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custTrans.TransDate);
                this.TaxTransDataOrigin = TaxTransDataOrigin_W::GeneralJournal;
                this.DocumentAmountMST  = CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.calcLineAmountExclTax_RU(), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            }

            if (!this.CountryRegionId)
            {
                this.CountryRegionId = LogisticsPostalAddress::findRecId(custTable.InvoiceAddress).CountryRegionId;
            }
            this.CompanyName            = custTable.name();
            if (custTrans.Prepayment)
            {
                this.DocumentNum        = custTrans.DocumentNum;
                this.DocumentDate       = custTrans.DocumentDate ? custTrans.DocumentDate : custTrans.TransDate;
            }
            else
            {
                // if invoice is blank - it's OK; left for manual entry
                this.DocumentNum        = custTrans.Invoice;

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]) && custTrans.TransType == LedgerTransType::Sales)
                {
                    this.DocumentDate = custTrans.TransDate;
                }
                else
                {
                    this.DocumentDate = custTrans.DocumentDate ? custTrans.DocumentDate : custTrans.TransDate;
                }
            }

            this.IsPrepayment           = custTrans.Prepayment;
            this.Direction              = ModuleCustVend::Cust;
            this.IsCreditNote           = this.isCreditNote(_taxTrans);
        }

        return isProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromRCash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax information from petty cash transactions (if any exists)
    /// </summary>
    /// <param name="_taxTrans">
    /// Tax transaction for which the information should be found.
    /// </param>
    /// <returns>
    /// true, if related petty cash transaction is found.
    /// </returns>
    /// <remarks>
    /// Some data can be loaded from related customer or vendor transaction (if any exists)
    /// </remarks>
    public boolean loadFromRCash(TaxTrans _taxTrans)
    {
        boolean         isProcessed;
        RCashTrans      cashTrans;
        CustTrans       custTrans;
        VendTrans       vendTrans;

        CustTable       custTable;
        VendTable       vendTable;
        CompanyInfo     companyInfo;

        select firstonly cashTrans
            where  cashTrans.Voucher    == _taxTrans.Voucher
                && cashTrans.TransDate  == _taxTrans.TransDate
        outer join custTrans
            where  custTrans.Voucher    == cashTrans.Voucher
                && custTrans.TransDate  == cashTrans.TransDate
                && custTrans.Invoice    == ''
        outer join vendTrans
            where  vendTrans.Voucher    == cashTrans.Voucher
                && vendTrans.TransDate  == cashTrans.TransDate
                && vendTrans.Invoice    == '';

        if (cashTrans)
        {
            isProcessed = true;

            this.DocumentNum            = cashTrans.DocId;
            this.DocumentDate           = cashTrans.TransDate;
            this.TaxTransDataOrigin     = TaxTransDataOrigin_W::RCashModule;

            LedgerJournalTrans ledgerJournalTrans = cashTrans.ledgerJournalTrans();
            this.DocumentAmountMST  = CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.calcLineAmountExclTax_RU(), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);

            if (custTrans)
            {
                custTable            = CustTable::find(custTrans.AccountNum);
                this.CountryRegionId = custTable.CountryRegionId();

                if (!this.CountryRegionId)
                {
                    this.CountryRegionId = LogisticsPostalAddress::findRecId(custTable.InvoiceAddress).CountryRegionId;
                }

                this.VATNum      = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.DocumentDate);
                this.CompanyName = custTable.Name();
                this.Direction   = ModuleCustVend::Cust;
            }
            else if (vendTrans)
            {
                vendTable            = VendTable::find(vendTrans.AccountNum);
                this.CountryRegionId = vendTable.CountryRegionId();
                this.VATNum          = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.DocumentDate);
                this.CompanyName     = vendTable.Name();
                this.Direction       = ModuleCustVend::Vend;
            }
            else
            {
                companyInfo = CompanyInfo::find();

                this.CountryRegionId = companyInfo.postalAddress().CountryRegionId;
                this.VATNum          = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.DocumentDate);
                this.CompanyName     = companyInfo.Name;
                this.Direction       = ModuleCustVend::Vend;
            }
        }

        return isProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxTrans</Name>
				<Source><![CDATA[
    public boolean loadFromTaxTrans(TaxTrans _taxTrans)
    {
        boolean             isProcessed;

        isProcessed = this.loadFromCust(_taxTrans);
        if (!isProcessed)
        {
            isProcessed = this.loadFromVend(_taxTrans);
        }
        if (!isProcessed)
        {
            isProcessed = this.loadFromRCash(_taxTrans);
        }

        return isProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax information from vendor transactions (if any exists)
    /// </summary>
    /// <param name="_taxTrans">
    /// Tax transaction for which the information should be found.
    /// </param>
    /// <returns>
    /// true, if related vendor transaction is found.
    /// </returns>
    /// <remarks>
    /// Some data can be loaded from related vendor invoice (if any exists)
    /// </remarks>
    public boolean loadFromVend(TaxTrans _taxTrans)
    {
        boolean             isProcessed;
        VendTrans           vendTrans;
        VendTable           vendTable;

        VendInvoiceJour     vendInvoiceJour;
        LedgerJournalTrans  ledgerJournalTrans;

        select firstonly vendTrans
            where  vendTrans.Voucher             == _taxTrans.Voucher
                && vendTrans.TransDate           == _taxTrans.TransDate
        outer join vendInvoiceJour
            where  vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                && vendInvoiceJour.InvoiceDate   == vendTrans.TransDate
        outer join ledgerJournalTrans
            where  ledgerJournalTrans.Voucher    == vendTrans.Voucher
                && ledgerJournalTrans.TransDate  == vendTrans.TransDate;

        if (vendTrans)
        {
            isProcessed = true;

            vendTable = VendTable::find(vendTrans.AccountNum);

            if (vendInvoiceJour)
            {
                this.VATNum             = vendInvoiceJour.VATNum;
                this.TaxTransDataOrigin = TaxTransDataOrigin_W::VendInvoiceJour;
                this.DocumentAmountMST  = vendInvoiceJour.amountMST(vendInvoiceJour.SalesBalance);
            }
            else
            {
                this.VATNum             = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _taxTrans.TransDate);
                this.TaxTransDataOrigin = TaxTransDataOrigin_W::GeneralJournal;
                this.DocumentAmountMST  = CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.calcLineAmountExclTax_RU(), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            }

            this.CountryRegionId        = vendTable.CountryRegionId();
            this.CompanyName            = vendTable.Name();
            if (vendTrans.Prepayment)
            {
                this.DocumentNum        = vendTrans.DocumentNum;
            }
            else
            {
                // if invoice is blank - it's OK; left for manual entry
                this.DocumentNum        = vendTrans.Invoice;
            }
            this.DocumentDate           = vendTrans.DocumentDate ? vendTrans.DocumentDate : vendTrans.TransDate;
            this.IsPrepayment           = vendTrans.Prepayment;
            this.Direction              = ModuleCustVend::Vend;
            this.IsCreditNote           = this.isCreditNote(_taxTrans);
        }

        return isProcessed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>CZ,LT,LV</CountryRegionCodes>
	<Label>@GLS61601</Label>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CompanyName</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Direction</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>ModuleCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNumLarge</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCreditNote</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrepayment</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxTransDataOrigin</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxTransDataOrigin_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DocumentAmountMST</Name>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<HelpText>@VATDeclaration_W:AS_TmpTaxTransInfo_WDocumentAmountMSTHelp</HelpText>
			<Label>@VATDeclaration_W:AS_TmpTaxTransInfo_WDocumentAmountMSTLabel</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>