<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransferTable extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressLading_RU</Name>
				<Source><![CDATA[
    public display LogisticsAddressing addressLading_RU()
    {
        return LogisticsPostalAddress::findRecId(this.LadingPostalAddress_RU).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressUnlading_RU</Name>
				<Source><![CDATA[
    public display LogisticsAddressing addressUnlading_RU()
    {
        return LogisticsPostalAddress::findRecId(this.UnladingPostalAddress_RU).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLinesPrice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates lines price.
    /// </summary>
    /// <remarks>
    /// Calculates <c>InventTransferLines</c> line amount value and updates the records accordingly.
    /// </remarks>
    public void calcLinesPrice_RU()
    {
        InventTransferLine inventTransferLine;

        ttsbegin;

        while select forupdate inventTransferLine
            where inventTransferLine.TransferId == this.TransferId
        {
            inventTransferLine.setPrice_RU(this);
            inventTransferLine.LineAmount_RU = inventTransferLine.calcLineAmount_RU();
            inventTransferLine.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPickingListBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transfer order line that has a related inventory order.
    /// </summary>
    /// <returns>
    /// true if the transfer order has a line with a related inventory order; otherwise, false.
    /// </returns>
    public boolean canPickingListBeRegistered()
    {
        InventTransferLine  inventTransferLine;
        WMSOrder            wmsOrder;

        //go through the lines to hit appropriate index
        select firstonly RecId from inventTransferLine
            where inventTransferLine.TransferId == this.TransferId
        exists join wmsOrder
            where wmsOrder.InventTransId    == inventTransferLine.InventTransId
            &&    wmsOrder.Type             == WMSOrderType::OrderPick;

        return (inventTransferLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order is editable.
    /// </summary>
    /// <returns>
    /// true if the transfer order is editable; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>InventTransferStatus</c> enumeration.
    /// </remarks>
    public boolean isEditable()
    {
        return this.TransferStatus != InventTransferStatus::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddTransferLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order can have lines added.
    /// </summary>
    /// <returns>
    /// true if the transfer order can add new line; otherwise, false.
    /// </returns>
    public boolean canAddTransferLines()
    {
        return this.isCreated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPickingListBeUpdated</Name>
				<Source><![CDATA[
    public boolean canPickingListBeUpdated()
    {
        InventTransferLine              localInventTransferLine;
        InventTransOriginTransferShip   inventTransOriginTransferShip;
        InventTrans                     inventTrans;

        select firstonly RecId from localInventTransferLine
            where localInventTransferLine.TransferId     == this.TransferId
               && localInventTransferLine.RemainStatus   == InventTransferRemainStatus::Shipping
                exists join inventTransOriginTransferShip
                    where inventTransOriginTransferShip.TransferShipDataAreaId   == localInventTransferLine.DataAreaId
                       && inventTransOriginTransferShip.TransferShipId           == localInventTransferLine.TransferId
                       && inventTransOriginTransferShip.TransferShipLineNum      == localInventTransferLine.LineNum
                    exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOriginTransferShip.InventTransOrigin
                           && inventTrans.TransChildType    == InventTransChildType::None
                           && inventTrans.StatusReceipt     == StatusReceipt::None
                           && (inventTrans.StatusIssue      == StatusIssue::OnOrder
                           || inventTrans.StatusIssue       == StatusIssue::ReservOrdered
                           || inventTrans.StatusIssue       == StatusIssue::ReservPhysical);

        return (localInventTransferLine.RecId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the transfer order has been created or not.
    /// </summary>
    /// <remarks>
    /// Add a post-method handler for returning the right value when extending the <c>InventTransferStatus</c> enumeration.
    /// </remarks>
    /// <returns>
    /// true if the transfer order is created; otherwise, false.
    /// </returns>
    public boolean isCreated()
    {
        return this.TransferStatus == InventTransferStatus::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReceiptBeUpdated</Name>
				<Source><![CDATA[
    /**
        Returns true if the receipt can be updated
    */
    public boolean canReceiptBeUpdated()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            return (select firstonly RecId from inventTransferLine
                where inventTransferLine.TransferId == this.TransferId &&
                     (inventTransferLine.QtyShipped &&
                      inventTransferLine.QtyShipped >= inventTransferLine.QtyReceived)).RecId != 0;
        }

        if (BrazilParameters::isEnabled())
        {
            return (select firstonly RecId from inventTransferLine
                where inventTransferLine.TransferId == this.TransferId &&
                     (inventTransferLine.QtyShipped &&
                      inventTransferLine.QtyShipped > inventTransferLine.QtyReceived)).RecId != 0;
        }

        if (this.TransferStatus == InventTransferStatus::Received)
        {
            return false;
        }

        return (select firstonly RecId from inventTransferLine
            where inventTransferLine.TransferId == this.TransferId
            && inventTransferLine.QtyShipped > inventTransferLine.QtyReceived).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipmentBeUpdated</Name>
				<Source><![CDATA[
    /**
        Returns true if the shipment can be updated
    */
    public boolean canShipmentBeUpdated()
    {
        #ISOCountryRegionCodes
        InventTransferLine              localInventTransferLine;
        InventTrans                     inventTrans;
        InventTransOriginTransferShip   inventTransOriginTransferShip;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            return true;
        }

        if (BrazilParameters::isEnabled() && this.inventTransferTableFiscalInfo_BR().InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn)
        {
            return true;
        }

        select firstonly RecId from localInventTransferLine
            where localInventTransferLine.TransferId == this.TransferId
            exists join inventTransOriginTransferShip
                where inventTransOriginTransferShip.TransferShipDataAreaId == localInventTransferLine.DataAreaId
                   && inventTransOriginTransferShip.TransferShipId         == localInventTransferLine.TransferId
                   && inventTransOriginTransferShip.TransferShipLineNum    == localInventTransferLine.LineNum
            exists join inventTrans
                where inventTrans.InventTransOrigin == inventTransOriginTransferShip.InventTransOrigin
                   && inventTrans.TransChildType    == InventTransChildType::None
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && (inventTrans.StatusIssue      == StatusIssue::OnOrder
                   ||  inventTrans.StatusIssue      == StatusIssue::ReservOrdered
                   ||  inventTrans.StatusIssue      == StatusIssue::ReservPhysical
                   ||  inventTrans.StatusIssue      == StatusIssue::Picked);

        return (localInventTransferLine.RecId ? true :false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    private boolean checkAgreement_RU()
    {
        PurchAgreementHeader purchAgreementHeader;
        boolean ok = true;

        if (this.PartyAgreementHeaderExt_RU)
        {
            purchAgreementHeader = PurchAgreementHeaderExt_RU::purchAgreementHeader(this.PartyAgreementHeaderExt_RU);

            if (!purchAgreementHeader.canReleaseAgreement())
            {
                ok = checkFailed("@SYS103075");
            }

            if (purchAgreementHeader.VendAccount != this.PartyAccountNum_RU)
            {
                ok = checkFailed(strFmt("@SYS112224",
                    purchAgreementHeader.PurchNumberSequence, "@SYS309960", tableId2pname(tableNum(PurchAgreementHeader))));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCFDIApplicable_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if CFDI is applicable for the current transfer order.
    /// </summary>
    /// <returns>
    /// true if CFDI applicable for the current <c>InventTransferTable</c>; otherwise, false.
    /// </returns>
    public boolean checkCFDIApplicable_MX()
    {
        boolean ret = false;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) &&
                EInvoiceCFDIParameters_MX::find().EnabledCFDI &&
                EInvoiceCFDIParameters_MX::find().CFDIVersion >= EInvoiceCFDIVersion_MX::V3_3)
        {
            InventLocation inventLocationFrom  = InventLocation::find(this.InventLocationIdFrom);
            InventLocation InventLocationTo    = InventLocation::find(this.InventLocationIdTo);

            ret = inventLocationFrom.InventSiteId != inventLocationTo.InventSiteId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfile_RU</Name>
				<Source><![CDATA[
    boolean checkInventProfile_RU()
    {
        InventTransferLine  inventTransferLine;
        InventDim           inventDim;
        InventProfile_RU    inventProfile;
        boolean             ok = true;

        if (this.InventProfileType_RU != InventProfileType_RU::NotSpecified)
        {
            select firstonly RecId from inventTransferLine
                where inventTransferLine.TransferId         == this.TransferId
            join InventProfileId_RU from inventDim
                where inventDim.InventDimId                 == inventTransferLine.InventDimId
            join TableId from inventProfile
                where inventProfile.InventProfileId         == inventDim.InventProfileId_RU
                   && inventProfile.InventProfileType       != this.InventProfileType_RU;

            if (inventTransferLine.RecId)
            {
                ok = checkFailed(strFmt("@GLS113728",
                                        inventDim.InventProfileId_RU,
                                        this.InventProfileType_RU));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfileTo_RU</Name>
				<Source><![CDATA[
    boolean checkInventProfileTo_RU()
    {
        InventTransferLine  inventTransferLine;
        InventDim           inventDim;
        InventProfile_RU    inventProfile;
        boolean             ok = true;

        if (this.InventProfileType_RU != InventProfileType_RU::NotSpecified)
        {
            select firstonly RecId from inventTransferLine
                where inventTransferLine.TransferId     == this.TransferId
            join InventProfileId_RU from inventDim
                where inventDim.InventDimId             == inventTransferLine.InventDimIdTo_RU
            join TableId from inventProfile
                where inventProfile.InventProfileId     == inventDim.InventProfileId_RU
                   && inventProfile.InventProfileType   != this.InventProfileType_RU;

            if (inventTransferLine)
            {
                ok = checkFailed(strFmt("@GLS113728",
                                        inventDim.InventProfileId_RU,
                                        this.InventProfileType_RU));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfileType_RU</Name>
				<Source><![CDATA[
    boolean checkInventProfileType_RU()
    {
        boolean             ok = true;

        if (this.InventProfileId_RU &&
            this.InventProfileIdTo_RU &&
            InventProfile_RU::find(this.InventProfileId_RU).InventProfileType != InventProfile_RU::find(this.InventProfileIdTo_RU).InventProfileType)
        {
            ok = checkFailed("@GLS115706");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDriver_RU</Name>
				<Source><![CDATA[
    private boolean checkDriver_RU()
    {
        boolean ret = true;

        if (this.Driver_RU && this.CarrierType_RU != CarrierType_W::InvoiceAccount)
        {
            ContactPerson contactPerson = ContactPerson::find(this.Driver_RU);
            ret = this.checkDriver_CarrierType(contactPerson);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDriver_CarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if contact person is a driver.
    /// </summary>
    /// <param name = "_contactPerson">Instance of <c>ContactPerson</c> class.</param>
    /// <returns>true if contact person is driver; otherwise false.</returns>
    protected boolean checkDriver_CarrierType(ContactPerson _contactPerson)
    {
        boolean isDriverOk = true;
        switch (this.CarrierType_RU)
        {
            case CarrierType_W::Customer:
                if (_contactPerson.getCustAccount() != this.CarrierCode_RU)
                {
                    isDriverOk = checkFailed(strFmt("@SYS92800",this.Driver_RU, _contactPerson.personName(),this.CarrierCode_RU));
                }
                break;

            case CarrierType_W::Vendor:
                if (_contactPerson.getVendAccount() != this.CarrierCode_RU)
                {
                    isDriverOk = checkFailed(strFmt("@SYS114308",this.Driver_RU, _contactPerson.personName(),this.CarrierCode_RU));
                }
                break;
        }

        return isDriverOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the transfer is valid.
    /// </summary>
    /// <param name="_transferId">
    /// The transfer ID.
    /// </param>
    /// <returns>
    /// true if the transfer is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The transfer is valid if the transfer ID is not null and the <c>InventTransfer</c> table buffer
    /// exists.
    /// </remarks>
    public boolean checkValid(InventTransferId _transferId)
    {
        boolean         ok = true;

        if (! _transferId)
        {
            ok = checkFailed("@SYS78331");
        }

        if (! this && _transferId)
        {
            ok = checkFailed(strFmt(InventTransferTable::txtNotExist(), _transferId) );
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId fromLocation()
    {
        return LogisticsPostalAddress::getLocation(this.FromPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLogisticsLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default <c>LogisticsLocation</c> location based on the parameters.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The <c>InventLocationId</c> ID used to search for the default locations.
    /// </param>
    /// <param name="_logisticsLocationRoleType">
    /// The <c>LogisticsLocationRoleType</c> role to use to search for the default locations.
    /// </param>
    /// <returns>
    /// A <c>LogisticsLocation</c> record.
    /// </returns>
    /// <remarks>
    /// The order in which default locations are searched are: Warehouse, Site, Company.
    /// </remarks>
    public static LogisticsLocation defaultLogisticsLocation(
        InventLocationId            _inventLocationId,
        LogisticsLocationRoleType   _logisticsLocationRoleType)
    {
        LogisticsLocation       logisticsLocation;
        InventLocation          inventLocation;
        LogisticsLocationRole   role = LogisticsLocationRole::findBytype(_logisticsLocationRoleType);

        if (_inventLocationId)
        {
            inventLocation      = InventLocation::find(_inventLocationId);
            logisticsLocation   = LogisticsLocationDefault::findSimpleDefault(inventLocation, role);

            //warehouse didn't have a default location so search for site
            if (!logisticsLocation.RecId)
            {
                logisticsLocation = LogisticsLocationDefault::findSimpleDefault(InventSite::find(inventLocation.InventSiteId), role);
            }
        }

        if (!logisticsLocation.RecId)
        {
            // Warehouse and site didn't have default locations, so search for company location
            logisticsLocation = LogisticsLocationDefault::findSimpleDefault(CompanyInfo::find(), role);
        }

        return logisticsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransationEntity_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction entity record based on the <c>LogisticsLocationRoleType</c> enumeration value.
    /// </summary>
    /// <param name="_roleType">
    /// The <c>LogisticsLocationRoleType</c> enumeration value.
    /// </param>
    /// <returns>
    /// The record representing transaction entity based on the <c>LogisticsLocationRoleType</c> value provided.
    /// </returns>
    public Common getTransationEntity_RU(LogisticsLocationRoleType _roleType)
    {
        switch (_roleType)
        {
        case LogisticsLocationRoleType::Lading_W :
            if ( this.TransferType_RU == InventTransferType_RU::ReceiptFromParty &&
                this.PartyAccountNum_RU )
            {
                return this.partyVendTable_RU();
            }

            return InventLocation::find(this.InventLocationIdFrom) ;

        case LogisticsLocationRoleType::Unlading_W :
            if ( this.TransferType_RU == InventTransferType_RU::IssueToParty &&
                this.PartyAccountNum_RU )
            {
                return this.partyVendTable_RU();
            }

            return InventLocation::find(this.InventLocationIdTo);
        }
        return CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order has any lines.
    /// </summary>
    /// <returns>
    /// true if the transfer order has at least one line; otherwise, false.
    /// </returns>
    public boolean hasLines()
    {
        InventTransferLine line;

        select firstonly RecId from line
            where line.TransferId == this.TransferId;

        return (line.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithTmsItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order has any lines with items that are TMS enabled
    /// </summary>
    /// <returns>
    /// true if the transfer order has at least one such line; otherwise, false.
    /// </returns>
    public boolean hasLinesWithTmsItem()
    {
        InventTransferLine  line;
        TMSInventEnabled    tmsInventEnabled;

        select firstonly RecId from line
            where line.TransferId == this.TransferId
            exists join tmsInventEnabled
                where tmsInventEnabled.ItemId == line.ItemId;

        return (line.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithWhsItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order has any lines with items that are WHS enabled
    /// </summary>
    /// <returns>
    /// true if the transfer order has at least one such line; otherwise, false.
    /// </returns>
    public boolean hasLinesWithWhsItem()
    {
        InventTransferLine  line;
        WHSInventEnabled    whsInventEnabled;

        select firstonly RecId from line
            where line.TransferId == this.TransferId
            exists join whsInventEnabled
                where whsInventEnabled.ItemId == line.ItemId;

        return (line.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPickingListJournal</Name>
				<Source><![CDATA[
    public boolean hasPickingListJournal()
    {
        return (select firstonly RecId from wmsPickingRoute
                    where wmsPickingRoute.TransRefId        == this.TransferId
                    &&    wmsPickingRoute.TransType         == InventTransType::TransferOrderShip).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransferJournal</Name>
				<Source><![CDATA[
    public boolean hasTransferJournal()
    {
        return (select firstonly RecId from inventTransferJour
                    where inventTransferJour.TransferId  == this.TransferId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAddresses_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the lading and unlading to addresses.
    /// </summary>
    /// <remarks>
    /// A <c>LogisticsLocationRoleType::Lading_W</c> and <c>LogisticsLocationRoleType::Unlading_W</c> enumerations value is used to search for default
    /// locations.
    /// </remarks>
    public void initAddresses_RU()
    {
        RecId getDefaultLogisticsLocation(Common _entity, LogisticsLocationRoleType _role)
        {
            LogisticsLocationDefault        defaults;
            LogisticsLocationRoleType       typeForFind;
            LogisticsLocation               logisticsLocation;
            LogisticsPostalAddress          logisticsPostalAddress;

            defaults = LogisticsLocationDefault::construct(_entity);

            typeForFind = defaults.defaultExistsByType(_role) ?
                        _role :
                        LogisticsLocationRoleType::Delivery;

            logisticsLocation = LogisticsLocationDefault::findSimpleDefaultByRoleType(_entity, typeForFind);

            return LogisticsPostalAddress::findByLocation(logisticsLocation.RecId).RecId;
        }

        //reset

        this.LadingPostalAddress_RU = 0;
        this.UnladingPostalAddress_RU = 0;

        switch (this.TransferType_RU)
        {
            case InventTransferType_RU::Standard:
                if (this.InventLocationIdFrom)
                {
                    this.LadingPostalAddress_RU     = getDefaultLogisticsLocation(InventLocation::find( this.InventLocationIdFrom),
                                                                        LogisticsLocationRoleType::Lading_W);
                }
                if (this.InventLocationIdTo)
                {
                    this.UnladingPostalAddress_RU   = getDefaultLogisticsLocation(InventLocation::find( this.InventLocationIdTo),
                                                                        LogisticsLocationRoleType::Unlading_W);
                }
                break;

            case InventTransferType_RU::IssueToParty:
                if (this.InventLocationIdFrom)
                {
                    this.LadingPostalAddress_RU     = getDefaultLogisticsLocation(InventLocation::find( this.InventLocationIdFrom),
                                                                        LogisticsLocationRoleType::Lading_W);
                }
                if (this.PartyAccountNum_RU)
                {
                    this.UnladingPostalAddress_RU   = getDefaultLogisticsLocation(VendTable::find( this.PartyAccountNum_RU),
                                                                        LogisticsLocationRoleType::Unlading_W);
                }
                if (!this.UnladingPostalAddress_RU && this.InventLocationIdTo)
                {
                    this.UnladingPostalAddress_RU   = getDefaultLogisticsLocation(InventLocation::find( this.InventLocationIdTo),
                                                                        LogisticsLocationRoleType::Unlading_W);
                }
                break;

            case InventTransferType_RU::ReceiptFromParty:
                if (this.PartyAccountNum_RU)
                {
                    this.LadingPostalAddress_RU   = getDefaultLogisticsLocation(VendTable::find( this.PartyAccountNum_RU),
                                                                        LogisticsLocationRoleType::Lading_W);
                }
                if (!this.LadingPostalAddress_RU && this.InventLocationIdFrom)
                {
                    this.LadingPostalAddress_RU     = getDefaultLogisticsLocation(InventLocation::find( this.InventLocationIdFrom),
                                                                        LogisticsLocationRoleType::Lading_W);
                }
                if (this.InventLocationIdTo)
                {
                    this.UnladingPostalAddress_RU   = getDefaultLogisticsLocation(InventLocation::find( this.InventLocationIdTo),
                                                                        LogisticsLocationRoleType::Unlading_W);
                }
                break;
        }

        if ( !this.LadingPostalAddress_RU)
        {
            this.LadingPostalAddress_RU     = getDefaultLogisticsLocation(CompanyInfo::find(), LogisticsLocationRoleType::Lading_W);
        }
        if ( !this.UnladingPostalAddress_RU)
        {
            this.UnladingPostalAddress_RU   = getDefaultLogisticsLocation(CompanyInfo::find(), LogisticsLocationRoleType::Unlading_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the deliver mode based on transport rules between warehouses.
    /// </summary>
    public void initDeliveryMode()
    {
        InventTransferDlvModeId     inventTransferDlvModeId = this.DlvModeId;
        CustVendTransportPointLine  custVendTransportPointLine;
        CustVendTransportTime       custVendTransportTime;
        LogisticsPostalAddress      logisticsPostalAddress;

        if (this.InventLocationIdFrom && this.InventLocationIdTo)
        {
            select firstonly CountryRegionId, State, County, ZipCode from logisticsPostalAddress
            where logisticsPostalAddress.RecId == this.ToPostalAddress;

            custVendTransportPointLine = CustVendTransportPointLine::findDefaultValue(this.InventLocationIdFrom,
                                                                                      logisticsPostalAddress.CountryRegionId,
                                                                                      logisticsPostalAddress.State,
                                                                                      logisticsPostalAddress.County,
                                                                                      logisticsPostalAddress.ZipCode,
                                                                                      this.InventLocationIdTo);
            if (custVendTransportPointLine)
            {
                custVendTransportTime = CustVendTransportTime::defaultTransportTime(custVendTransportPointLine.RecId);
                if (custVendTransportTime)
                {
                    this.DlvModeId = custVendTransportTime.DlvMode;
                    if (this.DlvModeId != inventTransferDlvModeId)
                    {
                        this.modifiedField(fieldNum(InventTransferTable, DlvModeId));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source from address.
    /// </summary>
    /// <remarks>
    /// A <c>LogisticsLocationRoleType::Delivery</c> enumeration value is used to search for default
    /// locations.
    /// </remarks>
    public void initFromAddress()
    {
        this.defaultFromAddressName();
        this.defaultFromPostalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPuchAgreementHeader_RU</Name>
				<Source><![CDATA[
    private void initFromPuchAgreementHeader_RU(PurchAgreementHeader _purchAgreementHeader)
    {
        this.CurrencyCode_RU = _purchAgreementHeader.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPo</Name>
				<Source><![CDATA[
    public void initFromReqPo(ReqPO _reqPO)
    {
        this.ShipDate = _reqPO.SchedFromDate ? _reqPO.SchedFromDate : _reqPO.ReqDateOrder;
        this.ReceiveDate = _reqPO.ReqDateDlv;
        this.setListCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    public void initFromVendTable(VendTable _vendTable)
    {
        this.PriceGroupId_RU = CustTable::findByPartyRecId(_vendTable.Party).PriceGroup;
        this.CurrencyCode_RU = _vendTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfile_RU</Name>
				<Source><![CDATA[
    void initInventProfile_RU()
    {
        InventLocation inventLocationFrom = InventLocation::find(this.InventLocationIdFrom);

        if (inventLocationFrom.InventProfileId_RU)
        {
            this.InventProfileId_RU = inventLocationFrom.InventProfileId_RU;
        }

        if (this.InventProfileId_RU && !this.InventProfileIdTo_RU && this.InventProfileType_RU == InventProfileType_RU::NotSpecified)
        {
            this.InventProfileType_RU = InventProfile_RU::find(this.InventProfileId_RU).InventProfileType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfileTo_RU</Name>
				<Source><![CDATA[
    void initInventProfileTo_RU()
    {
        InventLocation inventLocationTo = InventLocation::find(this.InventLocationIdTo);

        if (inventLocationTo.InventProfileType_RU || inventLocationTo.InventProfileId_RU)
        {
            this.InventProfileType_RU   = inventLocationTo.InventProfileType_RU;
            this.InventProfileIdTo_RU   = inventLocationTo.InventProfileId_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the destination to address.
    /// </summary>
    /// <remarks>
    /// A <c>LogisticsLocationRoleType::Delivery</c> enumeration value is used to search for default
    /// locations.
    /// </remarks>
    public void initToAddress()
    {
        this.defaultToAddressName();
        this.defaultToPostalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the ShipDate, ReceiveDate and AutoReservation fields.
    /// </summary>
    public void initValue()
    {
        SalesParameters     salesParameters;
        IntrastatParameters intrastatParameters;

        #ISOCountryRegionCodes

        super();

        salesParameters = SalesParameters::find();

        this.ShipDate                   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.ReceiveDate                = this.ShipDate;
        this.AutoReservation            = InventParameters::find().InventTransferAutoReservation;
        this.DeliveryDateControlType    = salesParameters.DeliveryDateControlType;
        this.atpTimeFence               = salesParameters.atpTimeFence;
        this.atpInclPlannedOrders       = salesParameters.atpInclPlannedOrders;
        this.atpApplyDemandTimeFence    = salesParameters.atpApplyDemandTimeFence;
        this.atpApplySupplyTimeFence    = salesParameters.atpApplySupplyTimeFence;
        this.atpBackwardDemandTimeFence = salesParameters.atpBackwardDemandTimeFence;
        this.atpBackwardSupplyTimeFence = salesParameters.atpBackwardSupplyTimeFence;

        intrastatParameters             = IntrastatParameters::find();

        this.TransactionCode            = intrastatParameters.DefaultInvent;
        this.Transport                  = intrastatParameters.TransportModeParm;
        this.Port                       = intrastatParameters.PortParm;
        this.StatProcId                 = intrastatParameters.StatProcIdParm;
        this.PdsOverrideFEFO            = InventParameters::find().PdsOverrideFEFO;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.CurrencyCode_RU            = CompanyInfoHelper::standardCurrency();
            this.InventProfileId_RU         = InventParameters::find().InventProfileId_RU;
            this.InventProfileType_RU       = InventProfile_RU::find(this.InventProfileId_RU).InventProfileType;
            this.InventProfileUseRelated_RU = InventParameters::find().InventProfileUseRelated_RU;
            this.TransportInvoiceType_RU    = salesParameters.TransportInvoiceType_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a table buffer into the database.
    /// </summary>
    public void insert()
    {
        #ISOCountryRegionCodes
        ttsbegin;

        if (!this.TransferId)
        {
            this.TransferId = InventTransferTable::numberSeq().num();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.setInventProfileId_RU();
                this.setInventProfileIdTo_RU();

                if (!this.DeliveryDate_RU)
                {
                    this.DeliveryDate_RU = this.ShipDate;
                }
            }
        }

        super();

        if (BrazilParameters::isEnabled())
        {
            this.SysExtensionSerializerMap::postInsert();
        }

        if (this.DlvModeId)
        {
            this.tmsModifiedDlvMode(true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferTableFiscalInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>InventTransferTableFiscalInfo_BR</c> record related to the <c>InventTransferTable</c>.
    /// </summary>
    /// <returns>
    ///     The <c>InventTransferTableFiscalInfo_BR</c> record.
    /// </returns>
    public InventTransferTableFiscalInfo_BR inventTransferTableFiscalInfo_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(InventTransferTableFiscalInfo_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPartialTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the transfer order is partial shipped or received.
    /// </summary>
    /// <param name="_transferStatus">
    /// Transfer status of transfer order.
    /// </param>
    /// <returns>
    /// true, if the transfer order is partial shipped or received. Otherwise, false.
    /// </returns>
    public boolean isPartialTransfer(InventTransferStatus  _transferStatus)
    {
        switch (_transferStatus)
        {
            // Check if transfer order is partially shipped.
            // In a partially shipped transfer order, the status of transfer order is still created while shipped Qty is not 0.
            case InventTransferStatus::Shipped:
                return (select firstonly RecId from inventTransferLine
                            where inventTransferLine.TransferId == this.TransferId &&
                                 (inventTransferLine.QtyShipped > 0 &&
                                  inventTransferLine.QtyShipped < InventTransferLine.QtyTransfer &&
                                  this.TransferStatus == InventTransferStatus::Created)).RecId != 0;

            // Check if transfer order is partially received.
            // In a partially received transfer order, the status of transfer order is still shipped while received Qty is not 0.
            // Or the transfer order is partially shipped, the status of transfer order is still created while received Qty is not 0.
            case InventTransferStatus::Received:
                return (select firstonly RecId from inventTransferLine
                            where inventTransferLine.TransferId == this.TransferId &&
                                 (inventTransferLine.QtyReceived > 0 &&
                                  inventTransferLine.QtyReceived < InventTransferLine.QtyTransfer &&
                                  this.TransferStatus == InventTransferStatus::Shipped)).RecId != 0
                        || (select firstonly RecId from inventTransferLine
                            where inventTransferLine.TransferId == this.TransferId &&
                                 (inventTransferLine.QtyReceived > 0 &&
                                  inventTransferLine.QtyReceived < InventTransferLine.QtyTransfer &&
                                  this.TransferStatus == InventTransferStatus::Created)).RecId != 0;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationNameFrom</Name>
				<Source><![CDATA[
    display InventLocationName locationNameFrom()
    {
        return InventLocation::find(this.InventLocationIdFrom).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationNameTo</Name>
				<Source><![CDATA[
    display InventLocationName locationNameTo()
    {
        return InventLocation::find(this.InventLocationIdTo).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called by the kernel when a field on the table has its value modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID of the changed field.
    /// </param>
    /// <remarks>
    ///    This method calls methods that should be called when a field value changes.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTransferTable,InventLocationIdFrom):
                this.initDeliveryMode();

                if (countryRegion_RU)
                {
                    this.initInventProfile_RU();
                    this.setPartyAccount_RU();
                    this.initAddresses_RU();
                }

                if (!this.RecId)
                {
                    SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(this);
                }

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    if (this.TransferType_IN == TransferType_IN::StockTransfer)
                    {
                        TransTaxInformationHelper::newHelper().updateCompanyLocationFromTransTable(this, this.FromPostalAddress, TransTaxInformationType_IN::InventTransferFrom);
                    }
                }
                // </GIN>

                this.setListCode();
                break;

            case fieldNum(InventTransferTable,InventLocationIdTo):
                this.initDeliveryMode();

                if (countryRegion_RU)
                {
                    this.initInventProfileTo_RU();
                    this.setPartyAccount_RU();
                    this.initAddresses_RU();
                }

                if (!this.RecId)
                {
                    SalesCalcAvailableDlvDates::initDateFieldsOrderEntryDeadline(this);
                }

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    if (this.TransferType_IN == TransferType_IN::StockTransfer)
                    {
                        TransTaxInformationHelper::newHelper().updateCompanyLocationFromTransTable(this, this.ToPostalAddress, TransTaxInformationType_IN::InventTransferTo);
                    }
                }
                // </GIN>

                this.setListCode();
                break;

            case fieldNum(InventTransferTable, FromPostalAddress):
                this.FromAddressName = LogisticsPostalAddress::locationNameFromRecId(this.FromPostalAddress);
                break;
   
            case fieldNum(InventTransferTable, ToPostalAddress):
                this.ToAddressName = LogisticsPostalAddress::locationNameFromRecId(this.ToPostalAddress);
                break;

            case fieldNum(InventTransferTable, TransportationPayerType_RU):
                this.TransportationPayer_RU = '';
                break;

            case fieldNum(InventTransferTable, InventProfileId_RU):
                if (this.InventProfileId_RU && ! this.InventProfileIdTo_RU)
                {
                    this.InventProfileType_RU = InventProfile_RU::find(this.InventProfileId_RU).InventProfileType;
                }
                break;
            case fieldNum(InventTransferTable, InventProfileIdTo_RU):
                if (this.InventProfileIdTo_RU)
                {
                    this.InventProfileType_RU = InventProfile_RU::find(this.InventProfileIdTo_RU).InventProfileType;
                }
                break;
            case fieldNum(InventTransferTable, InventProfileType_RU):
                this.setInventProfileId_RU();
                this.setInventProfileIdTo_RU();
                break;
            case fieldNum(InventTransferTable, TransferType_RU):
                this.setPartyAccount_RU();
                this.setAgreement_RU();
                break;
            case fieldNum(InventTransferTable, PartyAccountNum_RU):
                switch (this.TransferType_RU)
                {
                    case InventTransferType_RU::IssueToParty:
                    case InventTransferType_RU::ReceiptFromParty:
                        this.initFromVendTable(this.partyVendTable_RU());
                        break;
                }
                this.setAgreement_RU();
                this.initAddresses_RU();
                break;
            case fieldNum(InventTransferTable, PartyAgreementHeaderExt_RU):
                this.setAgreement_RU();
                break;
            case fieldNum(InventTransferTable, Driver_RU):
                if (this.CarrierType_RU == CarrierType_W::InvoiceAccount)
                {
                    this.DriverName_RU = HcmWorker::findByPersonnelNumber(this.Driver_RU).name();
                }
                else
                {
                    this.DriverName_RU = ContactPerson::find(this.Driver_RU).personName();
                }
                break;
            case fieldNum(InventTransferTable, CarrierType_RU):
                    this.CarrierCode_RU = '';
                    this.Driver_RU      = '';
                    this.DriverName_RU  = '';
                break;
            case fieldNum(InventTransferTable, CarrierCode_RU):
                    this.Driver_RU      = '';
                    this.DriverName_RU  = '';
                break;

            case fieldNum(InventTransferTable, PriceGroupId_RU):
            case fieldNum(InventTransferTable, CurrencyCode_RU):
                    this.calcLinesPrice_RU();
                break;
            // <GIN>
            case fieldNum(InventTransferTable, Exempt_IN):
                if (Box::confirm(this.Exempt_IN ? "@TaxGST:MarkExemptForStockTransferOrder" :"@TaxGST:UnmarkExemptForStockTransferOrder"))
                {
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
                        && this.TransferType_IN == TransferType_IN::StockTransfer)
                    {
                        ttsbegin;
                        TransTaxInformation transTaxInformationFrom;
                        TransTaxInformation transTaxInformationTo;
                        InventTransferLine inventTransferLine;

                        this.write();

                        while select inventTransferLine
                            where inventTransferLine.TransferId == this.TransferId
                        {
                            
                            transTaxInformationFrom = TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(inventTransferLine,TransTaxInformationType_IN::InventTransferFrom);
                            transTaxInformationTo = TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(inventTransferLine,TransTaxInformationType_IN::InventTransferTo);
                        
                            if (transTaxInformationFrom && transTaxInformationTo)
                            {
                                
                                transTaxInformationFrom.selectForUpdate(true);
                                transTaxInformationFrom.Exempt = this.Exempt_IN;
                                transTaxInformationFrom.update();

                                transTaxInformationTo.selectForUpdate(true);
                                transTaxInformationTo.Exempt = this.Exempt_IN;
                                transTaxInformationTo.update();
                            }
                        }
                        ttscommit;
                    }
                    break;
                }
            // </GIN>
            case fieldNum(InventTransferTable, DlvModeId):
                this.Transport = DlvMode::find(this.DlvModeId).Transport;
                break;
        }

        this.modifiedFieldDDC(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the modified field event for delivery date control fields.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for the modified field.
    /// </param>
    private void modifiedFieldDDC(FieldId _fieldId) //Enhanced Delivery Date Control
    {
        SalesCalcAvailableDlvDates salesCalcAvailableDlvDates;

        if (this.DeliveryDateControlType)
        {
            salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(this,_fieldId);

            switch (_fieldId)
            {
                case fieldNum(InventTransferTable, DlvModeId):
                    if (!this.RecId)
                    {
                        salesCalcAvailableDlvDates.modifiedFieldBeforeInsert(this);
                    }
                    break;

                case fieldNum(InventTransferTable, DeliveryDateControlType):
                    if (this.RecId)
                    {
                        salesCalcAvailableDlvDates.modifiedField(this);
                    }
                    else
                    {
                        SalesCalcAvailableDlvDates::modifiedFieldOrderEntryDeadLine(this,_fieldId);
                    }
                    break;

                case fieldNum(InventTransferTable, ReceiveDate):
                    salesCalcAvailableDlvDates.modifiedField(this);
                    break;

                case fieldNum(InventTransferTable, ShipDate):
                    salesCalcAvailableDlvDates.modifiedField(this);
                    break;

                default:
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInventTransferTableFiscalInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an <c>InventTransferTableFiscalInfo_BR</c> record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_inventTransferTableFiscalInfo">
    /// The source record of <c>InventTransferTableFiscalInfo_BR</c> table.
    /// </param>
    public void packInventTransferTableFiscalInfo_BR(InventTransferTableFiscalInfo_BR _inventTransferTableFiscalInfo)
    {
        _inventTransferTableFiscalInfo.InventTransferTable = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_inventTransferTableFiscalInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyCustTable_RU</Name>
				<Source><![CDATA[
    public CustTable partyCustTable_RU()
    {
        return CustTable::findByPartyRecId(this.partyVendTable_RU().Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyPurchAgreementHeaderExt_RU</Name>
				<Source><![CDATA[
    private PurchAgreementHeaderExt_RU partyPurchAgreementHeaderExt_RU(boolean _forUpdate = false)
    {
        return PurchAgreementHeaderExt_RU::find(this.PartyAgreementHeaderExt_RU, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partySalesAgreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the <c>SalesAgreementHeaderExt_RU</c> record related to the current invent transfer table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     The the <c>SalesAgreementHeaderExt_RU</c> record.
    /// </returns>
    public SalesAgreementHeaderExt_RU partySalesAgreementHeaderExt_RU(boolean _forUpdate = false)
    {
        return this.partyPurchAgreementHeaderExt_RU().salesAgreementHeaderIntracompany(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyVendTable_RU</Name>
				<Source><![CDATA[
    public VendTable partyVendTable_RU()
    {
        return VendTable::find(this.PartyAccountNum_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsertBR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Post insertion event handler to update the fiscal document text.
    /// </summary>
    /// <remarks>
    ///    Applies only to Brazil.
    /// </remarks>
    public void postInsertBR()
    {
        if (this.inventTransferTableFiscalInfo_BR().toLocationIsThirdParty_BR())
        {
            FiscalDocumentTextUpdate_BR::newFromRecord(this).updateTexts(FiscalDocumentTextType_BR::CustVend);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Renames TransferId according to the change of the corresponding primary key value
    /// </summary>
    /// <remarks>
    ///    The TransferId in relevant inventTransOrigin tables is used to find the related
    ///    transfer lines, so update them explicitly.
    /// </remarks>
    public void renamePrimaryKey()
    {
        InventTransOriginTransferShip        inventTransOriginTransferShip;
        InventTransOriginTransferReceive     inventTransOriginTransferReceive;
        InventTransOriginTransferTransitFrom inventTransOriginTransferTransitFrom;
        InventTransOriginTransferTransitTo   inventTransOriginTransferTransitTo;
        InventTransOriginTransferScrap       inventTransOriginTransferScrap;
        InventTransOrigin                    inventTransOrigin;
        InventTransferLine                   inventTransferLine;
        InventTransferId                     oldTransferId = this.orig().TransferId;
        InventTransferId                     newTransferId = this.TransferId;

        ttsBegin;

        super();

        select firstonly RecId from inventTransferLine
            where inventTransferLine.TransferId == newTransferId;

        if (inventTransferLine && oldTransferId != newTransferId)
        {
            while select forUpdate inventTransOriginTransferShip
                where inventTransOriginTransferShip.TransferShipId == oldTransferId
            {
                inventTransOriginTransferShip.TransferShipId = newTransferId;
                inventTransOriginTransferShip.doUpdate();
                inventTransOrigin = InventTransOrigin::find(inventTransOriginTransferShip.InventTransOrigin, true);
                inventTransOrigin.ReferenceId = newTransferId;
                inventTransOrigin.doUpdate();
            }

            while select forUpdate inventTransOriginTransferReceive
                where inventTransOriginTransferReceive.TransferReceiveId == oldTransferId
            {
                inventTransOriginTransferReceive.TransferReceiveId = newTransferId;
                inventTransOriginTransferReceive.doUpdate();
                inventTransOrigin = InventTransOrigin::find(inventTransOriginTransferReceive.InventTransOrigin, true);
                inventTransOrigin.ReferenceId = newTransferId;
                inventTransOrigin.doUpdate();
            }

            while select forUpdate inventTransOriginTransferTransitFrom
                where inventTransOriginTransferTransitFrom.TransferTransitFromId == oldTransferId
            {
                inventTransOriginTransferTransitFrom.TransferTransitFromId = newTransferId;
                inventTransOriginTransferTransitFrom.doUpdate();
                inventTransOrigin = InventTransOrigin::find(inventTransOriginTransferTransitFrom.InventTransOrigin, true);
                inventTransOrigin.ReferenceId = newTransferId;
                inventTransOrigin.doUpdate();
            }

            while select forUpdate inventTransOriginTransferTransitTo
                where inventTransOriginTransferTransitTo.TransferTransitToId == oldTransferId
            {
                inventTransOriginTransferTransitTo.TransferTransitToId = newTransferId;
                inventTransOriginTransferTransitTo.doUpdate();
                inventTransOrigin = InventTransOrigin::find(inventTransOriginTransferTransitTo.InventTransOrigin, true);
                inventTransOrigin.ReferenceId = newTransferId;
                inventTransOrigin.doUpdate();
            }

            while select forUpdate inventTransOriginTransferScrap
                where inventTransOriginTransferScrap.TransferScrapId == oldTransferId
            {
                inventTransOriginTransferScrap.TransferScrapId = newTransferId;
                inventTransOriginTransferScrap.doUpdate();
                inventTransOrigin = InventTransOrigin::find(inventTransOriginTransferScrap.InventTransOrigin, true);
                inventTransOrigin.ReferenceId = newTransferId;
                inventTransOrigin.doUpdate();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>PartyAgreementHeaderExt_RU</c> field depending on <c>TransferType_RU</c> field of current invent transfer table.
    /// </summary>
    public void setAgreement_RU()
    {
        switch (this.TransferType_RU)
        {
            case InventTransferType_RU::Standard:
                this.PartyAgreementHeaderExt_RU = 0;
                break;
            case InventTransferType_RU::IssueToParty:
            case InventTransferType_RU::ReceiptFromParty:
                if (PurchAgreementHeaderExt_RU::purchAgreementHeader(this.PartyAgreementHeaderExt_RU).VendAccount != this.PartyAccountNum_RU)
                {
                    this.PartyAgreementHeaderExt_RU = 0;
                }
                break;
        }

        if (this.PartyAgreementHeaderExt_RU)
        {
            this.initFromPuchAgreementHeader_RU(
                PurchAgreementHeaderExt_RU::purchAgreementHeader(this.PartyAgreementHeaderExt_RU));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    void setInventProfileId_RU()
    {
        if (this.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
            this.InventProfileType_RU != InventProfile_RU::find(this.InventProfileId_RU).InventProfileType)
        {
            this.InventProfileId_RU = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileIdTo_RU</Name>
				<Source><![CDATA[
    void setInventProfileIdTo_RU()
    {
        if (this.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
            this.InventProfileType_RU != InventProfile_RU::find(this.InventProfileIdTo_RU).InventProfileType)
        {
            this.InventProfileIdTo_RU = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransferStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>TransferStatus</c> field so that it reflects the highest status for all
    ///    lines.
    /// </summary>
    /// <remarks>
    ///    If the order has no lines, the <c>TransferStatus</c> field is set to a value of
    ///    <c>InventTransferStatus::Created</c>.
    /// </remarks>
    public void setInventTransferStatus()
    {
        InventTransferLine  inventTransferLine;

        select maxof(RemainStatus) from inventTransferLine
            where inventTransferLine.TransferId == this.TransferId;

        if (!inventTransferLine)
        {
            this.TransferStatus = InventTransferStatus::Created;
            return;
        }

        switch (inventTransferLine.RemainStatus)
        {
            case InventTransferRemainStatus::None:
                this.TransferStatus = InventTransferStatus::Received;
                break;

            case InventTransferRemainStatus::Receiving:
                this.TransferStatus = InventTransferStatus::Shipped;
                break;

            case InventTransferRemainStatus::Shipping:
                this.TransferStatus = InventTransferStatus::Created;
                break;

            default:
                this.TransferStatus = InventTransferStatus::Created;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPartyAccount_RU</Name>
				<Source><![CDATA[
    public void setPartyAccount_RU()
    {
        switch (this.TransferType_RU)
        {
            case InventTransferType_RU::Standard:
                this.PartyAccountNum_RU = '';
                break;
            case InventTransferType_RU::IssueToParty:
                this.PartyAccountNum_RU = InventLocation::find(this.InventLocationIdTo).VendAccount;
                this.initFromVendTable(this.partyVendTable_RU());
                break;
            case InventTransferType_RU::ReceiptFromParty:
                this.PartyAccountNum_RU = InventLocation::find(this.InventLocationIdFrom).VendAccount;
                this.initFromVendTable(this.partyVendTable_RU());
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to display the route code tied to a transfer order.
    /// </summary>
    /// <returns>
    /// The route code tied to a transfer order.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display TMSRouteCode tmsDisplayRoute()
    {
        InventTransferLine          inventTransferLine;
        TMSRouteSegmentLoadLine     segmentLine;
        TMSRouteCode                ret;
        int                         counter = 0;

        while select RouteCode from segmentLine
            group by RouteCode
            join InventTransId, TransferId from inventTransferLine
                where inventTransferLine.InventTransId  == segmentLine.InventTransId &&
                      inventTransferLine.TransferId     == this.TransferId
        {
            ret = segmentLine.RouteCode;
            ++counter;

            if (counter > 1)
            {
                break;
            }
        }

        switch (counter)
        {
            case 0:
                ret = "";
                break;
            case 1:
                break;
            default:
                ret = "@SYS78137";
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayTotalFreight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total freight costs for the sum of transfer lines.
    /// </summary>
    /// <returns>
    /// The total freight cost.
    /// </returns>
    public display TMSRate tmsDisplayTotalFreight()
    {
        TMSTransferCharges      transferCharges;
        CurrencyExchangeHelper  currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        CurrencyCode            companyCurrency = CompanyInfoHelper::standardCurrency();

        select sum(Value)
            from transferCharges
            group by CurrencyCode
            where transferCharges.ModuleType        == MarkupModuleType::Invent
                && transferCharges.TransferId       == this.TransferId;

        return currencyExchangeHelper.calculateCurrencyToCurrency(transferCharges.CurrencyCode, companyCurrency, transferCharges.Value, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsModifiedDlvMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies all the fields of the correspondent <c>TMSInventTransferTable</c> record that depend on delivery mode field
    /// </summary>
    /// <param name="_insert">
    /// A <c>Boolean</c> value specifies if the corresponding <c>TMSTransferTable</c> should be inserted or updated.
    /// </param>
    /// <param name="_syncAgentTransfer">
    /// A instance of <c>TMSDeliveryModeSyncAgentTransfer</c> class.
    /// </param>
    public void tmsModifiedDlvMode(
        boolean _insert = false,
        TMSDeliveryModeSyncAgentTransfer _syncAgentTransfer = null)
    {
        if (isConfigurationkeyEnabled(ConfigurationKeyNum(WHSandTMS)))
        {
            if (_syncAgentTransfer == null)
            {
                _syncAgentTransfer = TMSDeliveryModeSyncAgentTransfer::newFromBuffer(this);
            }

            if (_insert)
            {
                _syncAgentTransfer.syncOnInsert(this.DlvModeId);
            }
            else
            {
                _syncAgentTransfer.syncOnUpdate(this.DlvModeId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing toAddress()
    {
        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(this.ToPostalAddress);
        boolean                isRU    = LogisticsPostalAddressUtility::isCountryRegionRU(address.CountryRegionId);
        
        var addressStringBuilderParameters = new LogisticsPostalAddressStringBuilderParameters();

        if (isRU)
        {
            addressStringBuilderParameters.initFromLogisticsPostalAddressMap(address);
            addressStringBuilderParameters.parmDistrictName('');

            return LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);
        }
        else
        {
            return address.Address;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId toLocation()
    {
        return LogisticsPostalAddress::getLocation(this.ToPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #ISOCountryRegionCodes

        if (this.DlvModeId != this.orig().DlvModeId)
        {
            this.tmsModifiedDlvMode();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ttsbegin;

            this.setInventProfileId_RU();
            this.setInventProfileIdTo_RU();
            this.updateLinesInventProfile_RU();

            super();

            ttscommit;
        }
        else
        {
            super();

            if (BrazilParameters::isEnabled())
            {
                this.SysExtensionSerializerMap::postUpdate();
            }
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesInventProfile_RU</Name>
				<Source><![CDATA[
    void updateLinesInventProfile_RU()
    {
        InventTransferLine  inventTransferLine;
        InventDim           inventDim;

        if (this.InventProfileId_RU &&
            this.InventProfileId_RU != this.orig().InventProfileId_RU)
        {
            while select forupdate inventTransferLine
                where inventTransferLine.TransferId == this.TransferId
            {
                if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(inventTransferLine.ItemId, fieldNum(InventDim, InventProfileId_RU)))
                {
                    inventDim                       = inventTransferLine.inventDim();
                    inventDim.InventProfileId_RU    = this.InventProfileId_RU;
                    inventTransferLine.InventDimId  = InventDim::findOrCreate(inventDim).InventDimId;
                    inventTransferLine.update();
                }
            }
        }
        if (this.InventProfileIdTo_RU &&
            this.InventProfileIdTo_RU != this.orig().InventProfileIdTo_RU)
        {
            while select forupdate inventTransferLine
                where inventTransferLine.TransferId == this.TransferId
            {
                if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(inventTransferLine.ItemId, fieldNum(InventDim, InventProfileId_RU)))
                {
                    inventDim                           = inventTransferLine.inventDimTo_RU();
                    inventDim.InventProfileId_RU        = this.InventProfileIdTo_RU;
                    inventTransferLine.InventDimIdTo_RU = InventDim::findOrCreate(inventDim).InventDimId;
                    inventTransferLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinesPrice_RU</Name>
				<Source><![CDATA[
    void updateLinesPrice_RU(InventTransferTable _inventTransferTableOrig)
    {
        InventTransferLine  inventTransferLine;
        boolean             agreementChanged;

        if (SalesParameters::find().AgreementPriceDisc_RU &&
            (this.PartyAgreementHeaderExt_RU != _inventTransferTableOrig.PartyAgreementHeaderExt_RU))
        {
            agreementChanged = true;
        }

        if (this.TransferType_RU    != _inventTransferTableOrig.TransferType_RU     ||
            this.PartyAccountNum_RU != _inventTransferTableOrig.PartyAccountNum_RU  ||
            this.CurrencyCode_RU    != _inventTransferTableOrig.CurrencyCode_RU     ||
            this.PriceGroupId_RU    != _inventTransferTableOrig.PriceGroupId_RU     ||
            agreementChanged)
        {
            while select forupdate inventTransferLine
                where inventTransferLine.TransferId == this.TransferId
            {
                inventTransferLine.setPrice_RU();
                inventTransferLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean             ret;

        ret = super();

        if (ret)
        {
            ret = this.validateLinesDelete();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;

        #ISOCountryRegionCodes

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventTransferTable, InventLocationIdFrom):
                if (ret && this.InventLocationIdFrom && InventLocation::find(this.InventLocationIdFrom).InventLocationIdTransit == '')
                {
                    ret = checkFailed("@SYS101202");
                }
                break;

            case fieldNum(InventTransferTable, InventProfileType_RU):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    ret = ret && this.checkInventProfile_RU();
                }
                break;

            case fieldNum(InventTransferTable, PartyAgreementHeaderExt_RU):
                ret = ret && this.checkAgreement_RU();
                break;

            case fieldNum(InventTransferTable, Driver_RU):
                ret = ret && this.checkDriver_RU();
                break;

            case fieldNum(InventTransferTable, DeliveryDateControlType):
                ret = ret && this.SalesDeliveryDateControlMap::checkDeliveryDateControlTypeCTP();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field Name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index to see
    /// </param>
    /// <returns>
    /// Its return true if all fields are fine else false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        #ISOCountryRegionCodes

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(InventTransferTable, InventLocationIdFrom):
                if (InventLocation::find(this.InventLocationIdFrom).InventCountingGroup_BR == InventCountingGroup_BR::OwnStockInOtherPower)
                {
                    ret = checkFailed("@GLS222864");
                }
                break;

            case fieldStr(InventTransferTable, InventLocationIdTo):
                if (InventLocation::find(this.InventLocationIdTo).InventCountingGroup_BR == InventCountingGroup_BR::OwnStockInOtherPower)
                {
                    if (!InventLocation::find(this.InventLocationIdTo).CustAccount_BR && !InventLocation::find(this.InventLocationIdTo).VendAccount)
                    {
                        ret = checkFailed("@GLS222793");
                    }
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinesDelete</Name>
				<Source><![CDATA[
    private boolean validateLinesDelete()
    {
        InventTransferLine inventTransferLine;
        boolean ret = true;

        setPrefix(#PreFixField(this,TransferId));

        while select inventTransferLine
            where inventTransferLine.TransferId == this.TransferId
        {
            setPrefix(#PreFixField(inventTransferLine,LineNum));

            if (!inventTransferLine.validateDelete())
            {
                //Do not return, get error log for each line
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        ret = super();

        if (this.InventLocationIdFrom == this.InventLocationIdTo)
        {
            ret = checkFailed("@SYS70035");
        }

        if (this.ShipDate > this.ReceiveDate)
        {
            ret = checkFailed("@SYS78769");
        }

        if (countryRegion_RU)
        {
            ret = ret && this.checkInventProfile_RU();
            ret = ret && this.checkInventProfileTo_RU();
            ret = ret && this.checkInventProfileType_RU();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReceiveFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates for a given InventTransferOrderType_BR if the transfer order will create fiscal documents on shipment.
    /// </summary>
    /// <param name="_inventTransferOrderType">
    ///     The <c>InventTransferOrderType_BR</c>
    /// </param>
    /// <returns>
    ///     True if a fiscal document will be created otherwise not.
    /// </returns>
    public static boolean canCreateReceiveFiscalDocument_BR(InventTransferOrderType_BR _inventTransferOrderType)
    {
        return _inventTransferOrderType != InventTransferOrderType_BR::WarehouseTransfer
                && _inventTransferOrderType != InventTransferOrderType_BR::ThirdPartyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateShipmentFiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates for a given InventTransferOrderType_BR if the transfer order will create fiscal documents on receive
    /// </summary>
    /// <param name="_inventTransferOrderType">
    ///     The <c>InventTransferOrderType_BR</c>
    /// </param>
    /// <returns>
    ///     True if a fiscal document will be created otherwise not.
    /// </returns>
    public static boolean canCreateShipmentFiscalDocument_BR(InventTransferOrderType_BR _inventTransferOrderType)
    {
        return _inventTransferOrderType != InventTransferOrderType_BR::WarehouseTransfer
                && _inventTransferOrderType != InventTransferOrderType_BR::ThirdPartyReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(InventTransferId _transferId)
    {
        return _transferId && (select inventTransferTable
                                    where inventTransferTable.TransferId == _transferId
                               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventTransferTable find(
        InventTransferId    _transferId,
        boolean             _forUpdate = false)
    {
        InventTransferTable     inventTransferTable;

        inventTransferTable.selectForUpdate(_forUpdate);

        if (_transferId)
        {
            select firstonly inventTransferTable
                where inventTransferTable.TransferId == _transferId;
        }

        return inventTransferTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>InventTransTable</c> table.
    /// </summary>
    /// <param name="_recid">
    /// The recid of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    static public InventTransferTable findRecId(RefRecId _recid, boolean _forUpdate = false)
    {
        InventTransferTable inventTransferTable;

        if (_recid)
        {
            inventTransferTable.selectForUpdate(_forUpdate);

            select firstonly inventTransferTable
                where inventTransferTable.RecId == _recId;
        }

        return inventTransferTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formUpdateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles events in the form.
    /// </summary>
    /// <param name="_inventDimFormSetup">
    /// An <c>InventDimCtrl_Frm_Mov_TransferOrder</c> object that is used to control the form that should
    /// be updated.
    /// </param>
    /// <param name="_localMovement">
    /// An <c>InventMovement</c> data type that is used to determine which dimensions should be visible.
    /// </param>
    /// <param name="_mode">
    /// A signal for a change in the form.
    /// </param>
    /// <param name="_fromShipReceiveUpdate">
    /// A Boolean value that is set to true if the form that called the method is the
    /// <c>InventTransferShip</c> or <c>InventTransfterReceive</c> form.
    /// </param>
    static public void formUpdateDesign(
        InventDimCtrl_Frm_Mov_TransferOrder     _inventDimFormSetup,
        InventMovement                          _localMovement,
        InventDimFormDesignUpdate               _mode,
        boolean                                 _fromShipReceiveUpdate)
    {
        InventDimParm   inventDimParm;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init           :
                _inventDimFormSetup.parmSkipOnHandLookUp(true);
                _inventDimFormSetup.parmFromShipReceiveUpdate(_fromShipReceiveUpdate);
                inventDimParm.InventSiteIdFlag      = NoYes::Yes;
                inventDimParm.InventLocationIdFlag  = NoYes::Yes;
                _inventDimFormSetup.parmDimParmLockedRightClick(inventDimParm.data());

                inventDimParm = _inventDimFormSetup.parmDimParmVisibleGrid();
                inventDimParm.InventSiteIdFlag      = NoYes::No;
                inventDimParm.InventLocationIdFlag  = NoYes::No;
                _inventDimFormSetup.parmDimParmVisibleGrid(inventDimParm);

                // do continue

            case InventDimFormDesignUpdate::Active         :
            case InventDimFormDesignUpdate::FieldChange    :

                _inventDimFormSetup.formActiveSetup(_localMovement.inventDimGroupSetup(),_localMovement);
                _inventDimFormSetup.formSetControls(true);
                break;

            default :
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReqPo</Name>
				<Source><![CDATA[
    static public void lookupReqPo(FormStringControl ctrl,InventLocationId _from, InventLocationId _to)
    {
        SysTableLookup              sysTableLookup = SysTableLookup::newParameters(tableNum(InventTransferTable), ctrl);
        Query                       query = new Query();
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildRange             queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, TransferId));
        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, InventLocationIdFrom));
        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, InventLocationIdTo));
        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, ReceiveDate));

        queryBuildDataSource = query.addDataSource(tableNum(InventTransferTable));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTransferTable, InventLocationIdFrom));
        queryBuildRange.value(queryValue(_from));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTransferTable, InventLocationIdTo));
        queryBuildRange.value(queryValue(_to));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWMSReception</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches for WMS receipts.
    /// </summary>
    /// <param name="ctrl">
    ///    The <c>FormStringControl</c> object where the WMS receipts should be displayed.
    /// </param>
    static public void lookupWMSReception(FormStringControl ctrl)
    {
        SysTableLookup              sysTableLookup = SysTableLookup::newParameters(tableNum(InventTransferTable), ctrl);
        Query                       query = new Query();
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildDataSource        queryBuildDataSource1;
        QueryBuildRange             queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, TransferId));
        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, InventLocationIdFrom));
        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, InventLocationIdTo));
        sysTableLookup.addLookupfield(fieldNum(InventTransferTable, ReceiveDate));

        queryBuildDataSource = query.addDataSource(tableNum(InventTransferTable));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTransferTable, TransferStatus));
        queryBuildRange.value(queryValue(InventTransferStatus::Created));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventTransferTable, TransferStatus));
        queryBuildRange.value(queryValue(InventTransferStatus::Shipped));

        queryBuildDataSource1 = queryBuildDataSource.addDataSource(tableNum(InventTrans));
        queryBuildDataSource1.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource1.relations(true);

        queryBuildRange = queryBuildDataSource1.addRange(fieldNum(InventTrans, StatusReceipt));
        queryBuildRange.value(enum2Value(StatusReceipt::Ordered));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDriverContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup of the <c>ContactPerson</c> table, by filtering based on carrier type and carrier code.
    /// </summary>
    /// <param name = "_ctrl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <param name = "_carrierType">
    /// The type of carrier referenced by the carrier code.
    /// </param>
    /// <param name = "_carrierCode">
    /// The code of the carrier to filter by.
    /// </param>
    static public void lookupDriverContactPerson(FormStringControl _ctrl, CarrierType_W _carrierType, CarrierCode_W _carrierCode)
    {
        DirPartyRecId           carrierPartyRecId;
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();

        carrierPartyRecId = InventTransferTable::lookupDriverContactPerson_CarrierType(_carrierType, _carrierCode);
        
        if (carrierPartyRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sysTableLookup = SysTableLookup::newParameters(tableNum(ContactPerson), _ctrl);
        sysTableLookup.addLookupfield(fieldNum(ContactPerson, ContactPersonId));
        sysTableLookup.addLookupfield(fieldNum(ContactPerson, Party));

        query.addDataSource(tableNum(ContactPerson)).addRange(fieldNum(ContactPerson, ContactForParty)).value(queryValue(carrierPartyRecId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDriverContactPerson_CarrierType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds DirParty record ID for carrier's code.
    /// </summary>
    /// <param name = "_carrierType">Element of <c>CarrierType_W</c> enum.</param>
    /// <param name = "_carrierCode">Element of <c>CarrierCode_W</c> enum.</param>
    /// <returns>DirParty record ID if carrier type is customer or vendor; 0 if any other value</returns>
    protected static DirPartyRecId lookupDriverContactPerson_CarrierType(CarrierType_W _carrierType, CarrierCode_W _carrierCode)
    {
        DirPartyRecId carrierPartyRecId;

        switch (_carrierType)
        {
            case CarrierType_W::Customer:
                carrierPartyRecId = CustTable::find(_carrierCode).Party;
                break;
            case CarrierType_W::Vendor:
                carrierPartyRecId = VendTable::find(_carrierCode).Party;
                break;
            default:
                carrierPartyRecId = 0;
                break;
        }

        return carrierPartyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>NumberSeq</c> data type for the transfer orders.
    /// </summary>
    /// <param name="_makeDecisionLater">
    /// A Boolean value that is passed on to the <c>newGetNum</c> method; optional.
    /// </param>
    /// <param name="_dontThrowOnMissingRefSetUp">
    /// A Boolean value that is passed on to the <c> newGetNum</c> method. If false, an exception is thrown
    /// when no number sequence has been set up; optional.
    /// </param>
    /// <returns>
    /// A <c>NumberSeq</c> data type for the transfer orders.
    /// </returns>
    static public NumberSeq numberSeq(
        boolean _makeDecisionLater              = false,
        boolean _dontThrowOnMissingRefSetUp     = false)
    {
        return NumberSeq::newGetNum(
            InventParameters::numRefTransferId(),
            _makeDecisionLater,
            _dontThrowOnMissingRefSetUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static public TxtNotExist txtNotExist()
    {
        return "@SYS78332";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDlvModeFromCarrierService</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates delivery mode on transfer order.
    /// </summary>
    /// <param name="_transferId">
    ///   The transfer order ID.
    /// </param>
    /// <param name="_carrierCode">
    ///   The carrier code.
    /// </param>
    /// <param name="_carrierServiceCode">
    ///   The carrier service code.
    /// </param>
    /// <remarks>
    ///   The delivery mode is assigned based on carrier code and carrier service.
    /// </remarks>
    public static void updateDlvModeFromCarrierService(
        InventTransferId        _transferId,
        TMSCarrierCode          _carrierCode,
        TMSCarrierServiceCode   _carrierServiceCode)
    {
        InventTransferTable inventTransferTable;
        DlvModeId           dlvModeId = TMSCarrierService::findDlvModeId(_carrierCode, _carrierServiceCode);

        if (DlvModeId)
        {
            ttsBegin;

            update_recordSet inventTransferTable
                setting DlvModeId = dlvModeId
                where InventTransferTable.transferId == _transferId;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromInventLocation</Name>
				<Source><![CDATA[
    public InventLocation fromInventLocation(InventLocation _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('FromInventLocation');
            }
            else
            {
                return this.setLink('FromInventLocation', _relatedTable);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to display number of lines for the current order.
    /// </summary>
    /// <returns>
    /// Returns the number of lines for the current order.
    /// </returns>
    public display int numOfLines()
    {
        InventTransferLine line;

        select count(RecId) from line
            where line.TransferId == this.TransferId;

        return int642int(line.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocumentsForHeader();
        }

        super();

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing fromAddress()
    {
        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(this.FromPostalAddress);
        boolean                isRU    = LogisticsPostalAddressUtility::isCountryRegionRU(address.CountryRegionId);

        var addressStringBuilderParameters = new LogisticsPostalAddressStringBuilderParameters();

        if (isRU)
        {
            addressStringBuilderParameters.initFromLogisticsPostalAddressMap(address);
            addressStringBuilderParameters.parmDistrictName('');

            return LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);
        }
        else
        {
            return address.Address;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcisable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks to see if any of the lines associated with the current header is a excise type.
    /// </summary>
    /// <returns>
    ///     True, if at least one line is of excise type.
    /// </returns>
    public boolean isExcisable_IN()
    {
        InventTransferLine                      inventTransferLine;
        InventTransferLine_IN                   inventTransferLineIN;
        TaxOnItem                               taxOnItem;
        TaxTable                                taxTable;

        select firstOnly RecId from inventTransferLine
            where inventTransferLine.TransferId == this.TransferId
            exists join inventTransferLineIN
                where inventTransferLineIN.InventTransferLine == inventTransferLine.RecId
            exists join taxOnItem
                where taxOnItem.TaxItemGroup == inventTransferLineIN.TaxItemGroup
            exists join taxTable
                where taxTable.TaxCode == taxOnItem.TaxCode
                    && taxTable.TaxType_IN == TaxType_IN::Excise;

        return (inventTransferLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPartiallyReleased</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the transfer order is partially released to warehouse.
    /// </summary>
    /// <returns>
    ///     true, if at least one line is partially released; otherwise, false.
    /// </returns>
    public boolean isPartiallyReleased()
    {
        InventTransferLine      inventTransferLine;
        WHSInventTransferLine   whsInventTransferLine;

        //Added catch weight specific statement to have minimal impact on non-cw customers
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            select firstonly RecId from inventTransferLine
                where inventTransferLine.TransferId == this.transferId
            exists join whsInventTransferLine
                where whsInventTransferLine.InventTransferLine == inventTransferLine.RecId
                && whsInventTransferLine.ReleasedQty != 0
                && ((whsInventTransferLine.ReleasedQty < inventTransferLine.QtyTransfer
                    && inventTransferLine.PdsCWQtyTransfer == 0) //non-cw item lines
                || (whsInventTransferLine.ReleasedQty < inventTransferLine.PdsCWQtyTransfer //cw item lines
                    && inventTransferLine.PdsCWQtyTransfer != 0));
        }
        else
        {
            select firstonly RecId from inventTransferLine
                where inventTransferLine.TransferId == this.transferId
            exists join whsInventTransferLine
                where whsInventTransferLine.InventTransferLine == inventTransferLine.RecId
                && whsInventTransferLine.ReleasedQty != 0
                && whsInventTransferLine.ReleasedQty < inventTransferLine.QtyTransfer;
        }

        return (inventTransferLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultShipDate</Name>
				<Source><![CDATA[
    private void defaultShipDate()
    {
        if (this.ShipDate > this.ReceiveDate)
        {
            this.ShipDate = this.ReceiveDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReceiveDate</Name>
				<Source><![CDATA[
    private void defaultReceiveDate()
    {
        if (this.ShipDate > this.ReceiveDate)
        {
            this.ReceiveDate = this.ShipDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryDate_RU</Name>
				<Source><![CDATA[
    private void defaultDeliveryDate_RU()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.DeliveryDate_RU = this.ShipDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationIdTransit</Name>
				<Source><![CDATA[
    private void defaultInventLocationIdTransit()
    {
        this.InventLocationIdTransit = InventLocation::find(this.InventLocationIdFrom).InventLocationIdTransit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromAddressName</Name>
				<Source><![CDATA[
    protected void defaultFromAddressName()
    {
        LogisticsLocation logisticsLocation = InventTransferTable::defaultLogisticsLocation(this.InventLocationIdFrom,LogisticsLocationRoleType::Delivery);

        if (logisticsLocation)
        {
            this.FromAddressName    = logisticsLocation.Description;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromPostalAddress</Name>
				<Source><![CDATA[
    protected void defaultFromPostalAddress()
    {
        LogisticsLocation logisticsLocation = InventTransferTable::defaultLogisticsLocation(this.InventLocationIdFrom,LogisticsLocationRoleType::Delivery);

        if (logisticsLocation)
        {
            this.FromPostalAddress  = LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocation.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToAddressName</Name>
				<Source><![CDATA[
    protected void defaultToAddressName()
    {
        LogisticsLocation logisticsLocation = InventTransferTable::defaultLogisticsLocation(this.InventLocationIdTo,LogisticsLocationRoleType::Delivery);

        if (logisticsLocation)
        {
            this.ToAddressName    = logisticsLocation.Description;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToPostalAddress</Name>
				<Source><![CDATA[
    protected void defaultToPostalAddress()
    {
        LogisticsLocation logisticsLocation = InventTransferTable::defaultLogisticsLocation(this.InventLocationIdTo,LogisticsLocationRoleType::Delivery);

        if (logisticsLocation)
        {
            this.ToPostalAddress  = LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocation.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(InventTransferTable, ShipDate):
                this.defaultShipDate();
                break;

            case fieldnum(InventTransferTable, ReceiveDate):
                this.defaultReceiveDate();
                break;

            case fieldnum(InventTransferTable, DeliveryDate_RU):
                this.defaultDeliveryDate_RU();
                break;

            case fieldnum(InventTransferTable, InventLocationIdTransit):
                this.defaultInventLocationIdTransit();
                break;
                
            case fieldnum(InventTransferTable, FromAddressName):
                if (this.isDefaultingAllowed(fieldNum(InventTransferTable, InventLocationIdFrom)))
                {
                    this.defaultFromAddressName();
                }
                break;

            case fieldnum(InventTransferTable, FromPostalAddress):
                if (this.isDefaultingAllowed(fieldNum(InventTransferTable, InventLocationIdFrom)))
                {
                    this.defaultFromPostalAddress();
                }
                break;
                
            case fieldnum(InventTransferTable, ToAddressName):
                if (this.isDefaultingAllowed(fieldNum(InventTransferTable, InventLocationIdTo)))
                {
                    this.defaultToAddressName();
                }
                break;

            case fieldnum(InventTransferTable, ToPostalAddress):
                if (this.isDefaultingAllowed(fieldNum(InventTransferTable, InventLocationIdTo)))
                {
                    this.defaultToPostalAddress();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(InventTransferTable, ShipDate), [fieldnum(InventTransferTable, ReceiveDate)]],
            [fieldnum(InventTransferTable, DeliveryDate_RU), [fieldnum(InventTransferTable, ShipDate)]],
            [fieldnum(InventTransferTable, InventLocationIdTransit), [fieldnum(InventTransferTable, InventLocationIdFrom)]],
            [fieldnum(InventTransferTable, FromAddressName), [fieldnum(InventTransferTable, InventLocationIdFrom)]],
            [fieldnum(InventTransferTable, FromPostalAddress), [fieldnum(InventTransferTable, InventLocationIdFrom)]],
            [fieldnum(InventTransferTable, ToAddressName), [fieldnum(InventTransferTable, InventLocationIdTo)]],
            [fieldnum(InventTransferTable, ToPostalAddress), [fieldnum(InventTransferTable, InventLocationIdTo)]],
            [fieldnum(InventTransferTable, ReceiveDate), [fieldnum(InventTransferTable, ShipDate)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransferOrderBeenReleasedToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a transfer order has been released to warehouse.
    /// </summary>
    /// <param name = "_transferId"><c>InventTransferId</c> for the transfer order.</param>
    /// <returns>
    /// true if the transfer order has been released; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean hasTransferOrderBeenReleasedToWarehouse()
    {
        WHSInventTransferLine whsInventTransferLine;
        InventTransferLine inventTransferLine;

        select firstonly RecId from whsInventTransferLine
            where whsInventTransferLine.ReleasedQty > 0
                exists join inventTransferLine
                    where inventTransferLine.RecId == whsInventTransferLine.InventTransferLine
                        && inventTransferLine.TransferId == this.TransferId;
            
        if (whsInventTransferLine.RecId != 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockTransfer_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Judge whether it is stock transfer.
    /// </summary>
    /// <returns>
    /// return true is stock transfer, false is not stock transfer.
    /// </returns>
    public boolean isStockTransfer_IN()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && this.TransferType_IN == TransferType_IN::StockTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> PurchLine </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this);
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReceivedJournal</Name>
				<Source><![CDATA[
    public static boolean hasReceivedJournal(InventTransferId _inventTransferId)
    {
        return (select firstonly inventTransferJour
                    where inventTransferJour.TransferId == _inventTransferId
                      &&  (inventTransferJour.UpdateType == InventTransferUpdateType::Receive
                      ||  inventTransferJour.AutoReceiveQty > 0)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCanceledJournal</Name>
				<Source><![CDATA[
    public static boolean hasCanceledJournal(InventTransferId _inventTransferId)
    {
        return (select firstonly inventTransferJour
                    where inventTransferJour.TransferId == _inventTransferId
                      &&  inventTransferJour.CanceledShipment == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setListCode</Name>
				<Source><![CDATA[
    private void setListCode()
    {
        InventLocation inventLocationFrom = InventLocation::find(this.InventLocationIdFrom);
        InventLocation inventLocationTo = InventLocation::find(this.InventLocationIdTo);

        this.Listcode = EUSalesList::resolveListCodeByCountryState(inventLocationFrom.logisticsPostalAddress(), inventLocationTo.logisticsPostalAddress());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultingAllowed</Name>
				<Source><![CDATA[
    private boolean isDefaultingAllowed(FieldId _field)
    {
        return this.isFieldModified(_field);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransferItemWithFinTrackingDim</Name>
				<Source><![CDATA[
    public boolean hasTransferItemWithFinTrackingDim()
    {
        InventTransferLine inventTransferLine;
        boolean ret;

        while select ItemId from inventTransferLine
            group by ItemId
            where inventTransferLine.TransferId == this.TransferId
        {
            ret = InventTable::find(inventTransferLine.ItemId).hasFinancialTrackingDim();

            if (ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventTransferOrders</ConfigurationKey>
	<DeveloperDocumentation>@SYS124004</DeveloperDocumentation>
	<FormRef>InventTransferOrder</FormRef>
	<Label>@SYS78286</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>TransferId</TitleField1>
	<TitleField2>ShipDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransferIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<PrimaryIndex>TransferIdx</PrimaryIndex>
	<ReplacementKey>TransferIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PrintMgmtDocInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PrintMgmtDocInstance</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address_RU</Name>
			<Label>@SYS7566</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LadingPostalAddress_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>addressLading_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnladingPostalAddress_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>addressUnlading_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailRetailStatusType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoNumbering_LT</Name>
			<Label>@GLS112826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrPackingSlipAutoNumbering_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Carrier_RU</Name>
			<Label>@SYS50733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CarrierType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardSupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplyDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplySupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPInclPlannedOrders</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FromWarehouse</Name>
			<Label>@SYS25253</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromContactPerson</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat_W</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatSpecMove_CZ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileIdTo_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileUseRelated_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeadTimeTransfer</Name>
			<Label>@SYS70638</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LicenseCard_RU</Name>
			<Label>@GLS111069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseCardType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseCardRegNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseCardSeries_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicenseCardNum_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Party_RU</Name>
			<Label>@SYS102988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartyAccountNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartyAgreementHeaderExt_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price_RU</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceGroupId_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Receipt</Name>
			<Label>@SYS77799</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReceiveDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reservation</Name>
			<Label>@SYS7120</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AutoReservation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Shipment</Name>
			<Label>@SYS50389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvModeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryDateControlType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPBackwardSupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplyDemandTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPApplySupplyTimeFence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATPInclPlannedOrders</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ToWarehouse</Name>
			<Label>@SYS8519</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToAddressName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToContactPerson</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transferorder</Name>
			<Label>@SYS78234</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTransit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsOverrideFEFO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferStatus</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferType_IN</Name>
			<Label>@GLS5899</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferType_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transport</Name>
			<Label>@SYS3843</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightZoneId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transportation_RU</Name>
			<Label>@GLS111070</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleModel_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehiclePlateNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaybillNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverContact_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DrivingLicenseNum_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Driver_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportationPayer_RU</Name>
			<Label>@GLS100924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportationPayerType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationPayer_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportInvoice_RU</Name>
			<Label>@GLS221922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportInvoiceType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CargoDescription_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CargoPacking_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GST_IN</Name>
			<Label>@TAXGST:GST</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Exempt_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice_MX</Name>
			<Label>@SYS341123</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFDIEnabled_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPApplyDemandTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPApplyDemandTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPApplySupplyTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPApplySupplyTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPBackwardDemandTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPBackwardDemandTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPBackwardSupplyTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPBackwardSupplyTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ATPInclPlannedOrders</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPInclPlannedOrders</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ATPTimeFence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesATPTimeFence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoReservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferAutoReservation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CargoDescription_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CargoDescription_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CargoPacking_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CargoPacking_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CarrierCode_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CarrierType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CarrierType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>DlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeliveryDateControlType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesDeliveryDateControlType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvModeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTermId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Driver_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>HcmPersonnelNumberId</ExtendedDataType>
			<Label>@GLS107369</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DriverContact_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DriverContact_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DriverName_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DriverName_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DrivingLicenseNum_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DrivingLicenseNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightSlipType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FreightSlipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightZoneId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FromAddressName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FromContactPerson</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventTransferContactPerson</ExtendedDataType>
			<Label>@SYS78291</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FromPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatSpecMove_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatSpecMove_CZ</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdFrom</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdTo</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdTo</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdTransit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdTransit</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileIdTo_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
			<Label>@GLS113726</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileUseRelated_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileUseRelated_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LadingPostalAddress_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Label>@GLS116002</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseCardNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseCardRegNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardRegNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseCardSeries_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LicenseCardSeries_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LicenseCardType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LicenseCardType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PartyAccountNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferPartyAccount_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PartyAgreementHeaderExt_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementHeaderExtRecId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsOverrideFEFO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsOverrideFEFO</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceGroupId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>CustPriceGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiveDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferReceiveDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailReplenishRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RetailReplenishRefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailRetailStatusType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailRetailStatusType</ExtendedDataType>
			<EnumType>RetailRetailStatusTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShipDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferShipDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToAddressName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsAddressName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ToContactPerson</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventTransferContactPerson</ExtendedDataType>
			<Label>@SYS78292</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ToPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransferStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferType_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransferType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransferType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationPayer_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransportationPayer_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransportationPayerType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransportationPayerType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransportationType_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransportInvoiceType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TransportInvoiceType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TrPackingSlipAutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS112811</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnladingPostalAddress_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Label>@GLS115977</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleModel_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehicleModel_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehiclePlateNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehiclePlateNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaybillNum_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WaybillNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfExempt</HelpText>
			<Label>@SYS24552</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CFDIEnabled_MX</Name>
			<ExtendedDataType>CFDIPackingSlipEnabled_MX</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransferIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransferId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransferStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransferId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PartyAgreementHeaderExt_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PartyAgreementHeaderExt_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LadingPostalAddress_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LadingPostalAddress_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnladingPostalAddress_RUIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>UnladingPostalAddress_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FromPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>FromPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ToPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ToPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventLocationIdToIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationIdTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReceiveDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransferStatus</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationIdFrom</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DlvModeId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventLocationIdFromIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ShipDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransferStatus</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationIdTo</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReceiveDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DlvModeId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesDeliveryDateControlMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ShippingDateRequested</MapField>
					<MapFieldTo>ShipDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShippingDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateRequested</MapField>
					<MapFieldTo>ReceiveDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiptDateConfirmed</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DlvMode</MapField>
					<MapFieldTo>DlvModeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationIdFrom</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SkipUpdate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostalAddress</MapField>
					<MapFieldTo>ToPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierAccountCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplySupplyTimeFence</MapField>
					<MapFieldTo>ATPApplySupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPApplyDemandTimeFence</MapField>
					<MapFieldTo>ATPApplyDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ShipCarrierDlvType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPInclPlannedOrders</MapField>
					<MapFieldTo>ATPInclPlannedOrders</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPTimeFence</MapField>
					<MapFieldTo>ATPTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDateControlType</MapField>
					<MapFieldTo>DeliveryDateControlType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardDemandTimeFence</MapField>
					<MapFieldTo>ATPBackwardDemandTimeFence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ATPBackwardSupplyTimeFence</MapField>
					<MapFieldTo>ATPBackwardSupplyTimeFence</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>ListCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventTransferMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransferId</MapField>
					<MapFieldTo>TransferId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>Carrier_CustTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Customer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode_RU</Name>
					<Field>CarrierCode_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Carrier_VendTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Vendor</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode_RU</Name>
					<Field>CarrierCode_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode_RU</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode_RU</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvModeId</Name>
					<Field>DlvModeId</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTermId</Name>
					<Field>DlvTermId</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Driver_CustTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Driver_RU</Name>
					<Field>Driver_RU</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Customer</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Driver_EmplTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Driver_EmplTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Driver_RU</Name>
					<Field>Driver_RU</Field>
					<RelatedField>PersonnelNumber</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::InvoiceAccount</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Driver_VendTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Driver_VendTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Driver_RU</Name>
					<Field>Driver_RU</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CarrierType_RU</Name>
					<Field>CarrierType_RU</Field>
					<ValueStr>CarrierType_W::Vendor</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FromContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromContactPerson</Name>
					<Field>FromContactPerson</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FromInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<NavigationPropertyMethodNameOverride>fromInventLocation</NavigationPropertyMethodNameOverride>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FromInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdFrom</Name>
					<Field>InventLocationIdFrom</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FromPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress_From</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_From_InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromPostalAddress</Name>
					<Field>FromPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProfile_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileId_RU</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>InventProfileId_RU</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProfileTo_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventProfileTo_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileIdTo_RU</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>InventProfileIdTo_RU</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LadingPostalAddress_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LadingPostalAddress</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LadingPostalAddress_RU</Name>
					<Field>LadingPostalAddress_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PartyAgreementHeaderExt_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AgreementHeaderExt_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartyAgreementHeaderExt_RU</Name>
					<Field>PartyAgreementHeaderExt_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PartyVendTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PartyVendTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartyAccountNum_RU</Name>
					<SourceEDT>InventTransferPartyAccount_RU</SourceEDT>
					<Field>PartyAccountNum_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Payer_CustTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Payer_CustTable_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TransportationPayerType_RU</Name>
					<Field>TransportationPayerType_RU</Field>
					<ValueStr>TransportationPayerType_RU::ThirdParty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationPayer_RU</Name>
					<SourceEDT>TransportationPayer_RU</SourceEDT>
					<Field>TransportationPayer_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceGroupId_RU</Name>
					<SourceEDT>CustPriceGroup</SourceEDT>
					<Field>PriceGroupId_RU</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailBuyersPushTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailBuyersPushTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailReplenishRefRecId</Name>
					<Field>RetailReplenishRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailReplenishRefTableId</Name>
					<Field>RetailReplenishRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToContactPerson</Name>
					<Field>ToContactPerson</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ToInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdTo</Name>
					<Field>InventLocationIdTo</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress_To</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_To_InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToPostalAddress</Name>
					<Field>ToPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransitInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TransitInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdTransit</Name>
					<Field>InventLocationIdTransit</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Transit</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationTypeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TransportationTypeTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationType_RU</Name>
					<SourceEDT>TransportationType_RU</SourceEDT>
					<Field>TransportationType_RU</Field>
					<RelatedField>Type</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnladingPostalAddress_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnladingPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnladingPostalAddress_RU</Name>
					<Field>UnladingPostalAddress_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VehicleModelTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VehicleModelTable_W</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VehicleModel_RU</Name>
					<SourceEDT>VehicleModel_W</SourceEDT>
					<Field>VehicleModel_RU</Field>
					<RelatedField>VehicleModel</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ModelIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FromLogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromPostalAddress</Name>
					<Field>FromPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ToLogisticsPostalAddressBaseEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddressBaseEntity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToPostalAddress</Name>
					<Field>ToPostalAddress</Field>
					<RelatedField>AddressRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>