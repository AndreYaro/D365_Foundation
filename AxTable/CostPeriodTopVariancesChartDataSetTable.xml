<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostPeriodTopVariancesChartDataSetTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostPeriodTopVariancesChartDataSetTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cost calculation top variances data cache in a format consumable by a chart control.
    /// </summary>
    /// <param name="_costPeriodCompareArgs">Cost calculation comparison data.</param>
    /// <param name="_dataSeriesType">The dataSeriesType to display for the top variances chart.</param>
    /// <param name="_contextId">The context id for the cached data.</param>
    public static void updateCache(
                CostPeriodCompareArgs _costPeriodCompareArgs,
                CostCalculationPeriodTopVariancesSeriesType _dataSeriesType,
                SysDataCacheContextId _contextId)
    {
        CostCalculationPeriodCompareSourceIdView    costCalculationCompareSourceView;
        CostCalculationPeriodCompareTmp             calculationCompareDataIntermediate;
        CostCalculationPeriodCompareView            costCalculationCompareView;
        CostCalculationPeriodCompareTmp             calculationCompareData;

        ttsbegin;
        CostPeriodTopVariancesChartDataSetTable::clearCache(_contextId);

        switch (_dataSeriesType)
        {
            case CostCalculationPeriodTopVariancesSeriesType::ProductionNumber:
                insert_recordset calculationCompareData (CostRollupId, CostDifference)
                select firstOnly10 CostRollupId, CostDifference from costCalculationCompareView
                    order by CostDifference desc
                    where  costCalculationCompareView.date >= _costPeriodCompareArgs.parmFromDate() && costCalculationCompareView.date <= _costPeriodCompareArgs.parmToDate()
                        && costCalculationCompareView.CostDifference > 0;
                break;

            case CostCalculationPeriodTopVariancesSeriesType::ProducedItemName:
                insert_recordset calculationCompareDataIntermediate (CostRollupSourceId, CostDifference)
                select CostRollupSourceId, sum(CostDifference) from costCalculationCompareSourceView
                    group by CostRollupSourceId
                    where costCalculationCompareSourceView.date >= _costPeriodCompareArgs.parmFromDate() && costCalculationCompareSourceView.date <= _costPeriodCompareArgs.parmToDate();

                insert_recordset calculationCompareData (CostRollupSourceId, CostDifference)
                select firstonly10 CostRollupSourceId, CostDifference from calculationCompareDataIntermediate
                    order by CostDifference desc
                    where calculationCompareDataIntermediate.CostDifference > 0;
                break;
        }

        while select calculationCompareData
        {
            str dataSeries;
            str resource;

            switch (_dataSeriesType)
            {
                case CostCalculationPeriodTopVariancesSeriesType::ProductionNumber:
                    dataSeries = calculationCompareData.CostRollupId;
                    resource = calculationCompareData.CostRollupId;
                    break;

                case CostCalculationPeriodTopVariancesSeriesType::ProducedItemName:
                    dataSeries = InventTable::find(calculationCompareData.CostRollupSourceId).NameAlias;
                    resource = calculationCompareData.CostRollupSourceId;
                    break;
            }

            CostPeriodTopVariancesChartDataSetTable::insertRecord(_contextId, calculationCompareData.CostDifference, dataSeries, _dataSeriesType, resource);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    private static void  insertRecord(
                SysDataCacheContextId                       _contextId,
                CostAmount                                  _costDifference,
                str                                         _dataSeries,
                CostCalculationPeriodTopVariancesSeriesType _seriesType,
                str                                         _resource)
    {
        CostPeriodTopVariancesChartDataSetTable chartData;

        chartData.SysDataCacheContextId = _contextId;
        chartData.Cost                  = CurrencyExchangeHelper::amount(_costDifference);
        chartData.DataSeries            = _dataSeries;
        chartData.DataSeriesType        = enum2str(_seriesType);
        chartData.Resource              = _resource;
        chartData.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the cache based on context.
    /// </summary>
    /// <param name="_contextId">The context id for the cached data to be removed from the cache.</param>
    public static void clearCache(SysDataCacheContextId _contextId)
    {
        CostPeriodTopVariancesChartDataSetTable dataSetTable;

        ttsbegin;

        delete_from dataSetTable
            where dataSetTable.SysDataCacheContextId == _contextId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Modules>Inventory</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Cost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataSeries</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>String50</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SysDataCacheContextId</Name>
			<AssetClassification>Customer Content</AssetClassification>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataSeriesType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>String50</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Resource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMCalcResource</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysDataSetCacheTableMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SysDataCacheContextId</MapField>
					<MapFieldTo>SysDataCacheContextId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>