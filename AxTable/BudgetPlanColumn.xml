<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanColumn</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanColumn extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanColumn</c> table.
    /// </summary>
    /// <param name='_budgetPlanColumnRecId'>
    /// The record ID of the <c>BudgetPlanColumn</c> record.
    /// </param>
    /// <param name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanColumn</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanColumn find(
        BudgetPlanColumnRecId   _budgetPlanColumnRecId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanColumn budgetPlanColumn;

        if (_budgetPlanColumnRecId)
        {
            budgetPlanColumn.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanColumn.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanColumn
                where budgetPlanColumn.RecId == _budgetPlanColumnRecId;
        }

        return budgetPlanColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetPlanColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies <c>BudgetPlanColumn</c> record based upon originating record.
    /// </summary>
    /// <param name = "_sourceBudgetPlanColumn">
    /// The original <c>BudgetPlanColumn</c> record.
    /// </param>
    /// <returns>
    /// A duplicate <c>BudgetPlanColumn</c> record.
    /// </returns>
    public static BudgetPlanColumn copyBudgetPlanColumn(
        BudgetPlanColumn        _sourceBudgetPlanColumn)
    {
        BudgetPlanColumn        budgetPlanColumnCopy;

        if (_sourceBudgetPlanColumn)
        {
            ttsbegin;

            buf2Buf(_sourceBudgetPlanColumn, budgetPlanColumnCopy);

            budgetPlanColumnCopy.Name = "";
            budgetPlanColumnCopy.insert();

            BudgetPlanColumnRule::copyBudgetPlanColumnRule(_sourceBudgetPlanColumn.RecId, budgetPlanColumnCopy.RecId);

            ttscommit;
        }

        return budgetPlanColumnCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildColumnFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the column filter for the specified column when generating the view for the budget plan layout.
    /// </summary>
    /// <param name='_budgetPlanColumnRecId'>
    /// The record ID of the <c>BudgetPlanColumn</c> record.
    /// </param>
    /// <returns>
    /// A string with all column filters concatenated in SQL syntax, otherwise empty.
    /// </returns>
    public static str buildColumnFilter(BudgetPlanColumnRecId _budgetPlanColumnRecId)
    {
        const str endFieldRange           = "%1)";
        const str betweenFieldRange       = "%1 AND '%2'";
        const str addFieldRange           = "%1 AND %2";
        const str createOperatorRange     = "(%1.%2 %3 '%4'";
        const str appendOperatorRange     = "%1 OR %2.%3 %4 '%5'";

        str                  columnFilter;
        str                  fieldRange;
        str                  columnSqlFieldName;
        BudgetPlanColumnRule budgetPlanColumnRule;
        TableName            lastTableName;
        FieldName            lastFieldName;

        while select budgetPlanColumnRule
            order by budgetPlanColumnRule.TableName,
                     budgetPlanColumnRule.FieldName,
                     budgetPlanColumnRule.RightSideValueOne
            where budgetPlanColumnRule.Column == _budgetPlanColumnRecId
        {
            if (fieldRange
                && (budgetPlanColumnRule.TableName != lastTableName
                    || budgetPlanColumnRule.FieldName != lastFieldName))
            {
                // Range based on different field. Close current range and create a new range
                fieldRange = strfmt(endFieldRange, fieldRange);

                if (columnFilter)
                {
                    columnFilter = strfmt(addFieldRange, columnFilter, fieldRange);
                }
                else
                {
                    columnFilter = fieldRange;
                }

                fieldRange = '';
            }

            // append to an existing range, or create a new range
            columnSqlFieldName = BudgetPlanLayoutManager::getSqlFieldName(budgetPlanColumnRule.TableName, budgetPlanColumnRule.FieldName);

            if (fieldRange)
            {
                fieldRange = strfmt(
                                appendOperatorRange,
                                fieldRange,
                                budgetPlanColumnRule.TableName,
                                columnSqlFieldName,
                                enum2value(budgetPlanColumnRule.Operator),
                                budgetPlanColumnRule.RightSideValueOne);
            }
            else
            {
                fieldRange = strfmt(
                                createOperatorRange,
                                budgetPlanColumnRule.TableName,
                                columnSqlFieldName,
                                enum2value(budgetPlanColumnRule.Operator),
                                budgetPlanColumnRule.RightSideValueOne);
            }

            if (budgetPlanColumnRule.Operator == BudgetPlanExpressionOperator::Between)
            {
                fieldRange = strfmt(betweenFieldRange, fieldRange, budgetPlanColumnRule.RightSideValueTwo);
            }

            lastTableName = budgetPlanColumnRule.TableName;
            lastFieldName = budgetPlanColumnRule.FieldName;
        }

        if (fieldRange)
        {
            // Add the final field range to the result
            fieldRange = strfmt(endFieldRange, fieldRange);

            if (columnFilter)
            {
                columnFilter = strfmt(addFieldRange, columnFilter, fieldRange);
            }
            else
            {
                columnFilter = fieldRange;
            }
        }

        return columnFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        if (isValid && !this.Scenario)
        {
            // Displays the default system message for incomplete required field. Simply return false.
            isValid = false;
        }

        // Validates the field ColumnPeriodLengthValue for ColumnPeriodLength of Month and Quarter
        switch (this.ColumnPeriodLength)
        {
            case BudgetPlanColumnPeriodLength::Month:
                if (this.ColumnPeriodLengthValue < 1 || this.ColumnPeriodLengthValue > BudgetPlanningConstants::MaxMonthValue)
                {
                    isValid = checkFailed('@Budget:BudgetPlan_MonthNumberIsGreaterThanMaxValue');
                }
                break;

            case BudgetPlanColumnPeriodLength::Quarter:
                if (this.ColumnPeriodLengthValue < 1 || this.ColumnPeriodLengthValue > BudgetPlanningConstants::MaxQuarterValue)
                {
                    isValid = checkFailed('@Budget:BudgetPlan_QuarterNumberIsGreaterThanMaxValue');
                }
                break;
        }

        if (isValid && this.RecId)
        {
            isValid = isValid && !BudgetPlanOverlappingColumnValidator::checkOverlapExistsAcrossAnyLayoutForColumn(
                                    BudgetPlanOverlappingColumnValidatorRequest::construct()
                                        .setCurrentBudgetPlanColumn(this)
                                        .setShowColumnModificationWarning(true));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLayoutOrdinal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanColumn</c> table given a <c>BudgetPlanLayout</c> record and <c>BudgetPlanElementOrdinal</c> value.
    /// </summary>
    /// <param name = "_budgetPlanLayout">
    /// The record ID of the <c>BudgetPlanLayout</c> record.
    /// </param>
    /// <param name = "_ordinal">
    /// The <c>BudgetPlanElementOrdinal</c> value.
    /// </param>
    /// <param name='_forUpdate'>
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanColumn</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanColumn findByLayoutOrdinal(
        BudgetPlanLayoutRecId       _budgetPlanLayout,
        BudgetPlanElementOrdinal    _ordinal,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanColumn        budgetPlanColumn;
        BudgetPlanLayoutElement budgetPlanLayoutElement;

        if (_budgetPlanLayout && _ordinal)
        {
            budgetPlanColumn.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanColumn.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanColumn
                exists join budgetPlanLayoutElement
                    where budgetPlanLayoutElement.ElementDefinition == budgetPlanColumn.RecId
                        && budgetPlanLayoutElement.Layout == _budgetPlanLayout
                        && budgetPlanLayoutElement.Ordinal == _ordinal;
        }

        return budgetPlanColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetPlanColumnRecId columnRecId = this.RecId;

        super();
        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement,
            columnRecId,
            BudgetPlanMappingRefreshType::RefreshByElement,
            columnRecId,
            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        BudgetPlanLayoutHelper::refreshLayout(
            BudgetPlanMappingCacheDeleteType::DeleteMappingCacheByElement,
            this.RecId,
            BudgetPlanMappingRefreshType::RefreshByElement,
            this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        if (this.ColumnPeriodLength == BudgetPlanColumnPeriodLength::All)
        {
            this.clearYearOffsetAndPeriodLengthValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(BudgetPlanColumn, ColumnPeriodLength))
        {
            this.clearYearOffsetAndPeriodLengthValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearYearOffsetAndPeriodLengthValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the yearOffset and ColumnPeriodLengthValue fields.
    /// </summary>
    protected void clearYearOffsetAndPeriodLengthValue()
    {
        this.YearOffset = 0;
        this.ColumnPeriodLengthValue = 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@Budget:ColumnDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfigurationColumn</FormRef>
	<Label>@Budget:ColumnDisplayName</Label>
	<SingularLabel>@Budget:ColumnDisplayNameSingular</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>ColumnPeriodLength</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>BudgetPlanElementDefinition</Extends>
	<Modules>Budget</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteColumnRule</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>BudgetPlanColumn</Relation>
			<Table>BudgetPlanColumnRule</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLengthValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLength</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLength</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HistoricalScenario</Name>
			<Label>@Budget:ColumnHistoricalScenarioGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLengthValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>YearOffset</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Scenario</Name>
			<Label>@Budget:ColumnScenarioGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Scenario</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLength</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ColumnPeriodLengthValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Scenario</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BudgetPlanScenarioRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ColumnPeriodLength</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetPlanColumnPeriodLength</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ColumnPeriodLengthValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanColumnPeriodLengthValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>YearOffset</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanColumnPeriodLengthYearOffset</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanScenario</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanScenario</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScenarioRecId</Name>
					<Field>Scenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanElementDefinition</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BudgetPlanElementDefinition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>