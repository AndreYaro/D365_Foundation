<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGroupMemberLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailGroupMemberLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a description of the <c>RetailGroupMemberLine</c> class.
    /// </summary>
    /// <returns>
    /// The description of the class.
    /// </returns>
    public Description getDescription()
    {
        Description description;

        if (this.Variant != 0)
        {
            description = EcoResDistinctProductVariant::find(this.Variant).productName();
        }
        else if (this.Product != 0)
        {
            description = EcoResProduct::find(this.Product).productName();
        }
        else if (this.Category != 0)
        {
            description = EcoResCategory::find(this.Category).Name;
        }

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsEmptyRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks for the existense of the record.
    /// </summary>
    /// <returns>
    /// false if the record exists otherwise true.
    /// </returns>
    public boolean IsEmptyRow()
    {
        boolean ret = true;

        if (this.Category || this.Product || this.Variant)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initilizes the fields <c>Product</c> and <c>Variant</c> with 0 if the value in the category field of
    /// original record is not the same of the current record. Initializes the field <c>Variant</c> to 0 if the value
    /// in the product field of original record is not the same of the current record.
    /// </summary>
    /// <param name="_fieldId">
    /// ID of the field in the AOT.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId ==  fieldNum(RetailGroupMemberLine, Category)
            && this.orig().Category != this.Category)
        {
            this.Product = 0;
            this.Variant = 0;
        }
        else if (_fieldId == fieldNum(RetailGroupMemberLine, Product)
            && this.orig().Product != this.Product)
        {
            this.Variant = 0;

            // Check if the modified product exists under the specified category.
            boolean found = RetailGroupMemberLineHelper::checkRetailProductExistInCategory(this.Category, this.Product);

            // If modified product does not exist under specified category then reset the category value.
            if (!found)
            {
                this.Category = 0;
            }
        }
        else if (_fieldId == fieldNum(RetailGroupMemberLine, CategoryHierarchy)
            && this.orig().CategoryHierarchy != this.CategoryHierarchy)
        {
            // Update category, product and variant if category hierarchy is modified.
            this.Category = 0;
            this.Product = 0;
            this.Variant = 0;
        }

        switch (_fieldId)
        {
            case fieldNum(RetailGroupMemberLine, Variant):
                if (this.Variant)
                {
                    if (this.Product)
                    {
                        if (this.Product != EcoResDistinctProductVariant::find(this.Variant).ProductMaster)
                        {
                            throw error("@Retail:ProductVariantValidation");
                        }
                    }
                    else
                    {
                        this.Product = EcoResDistinctProductVariant::find(this.Variant).ProductMaster;
                    }

                    if (this.Product && !this.Category)
                    {
                        // Updating the category based on product selection for supplemental retail hierarchy.
                        if (this.CategoryHierarchy && EcoResCategoryHierarchyRole::existRoleHierarchyPair(
                                EcoResCategoryNamedHierarchyRole::RetailSpecialGroup, this.CategoryHierarchy))
                        {
                            this.Category = EcoResProductCategory::findByProductIdCategoryHierarchyRole(this.Variant, EcoResCategoryNamedHierarchyRole::RetailSpecialGroup).Category;
                        }
                        else
                        {
                            // Updating the category & category hierarchy based on product selection for retail hierarchy.
                            this.Category = EcoResProductCategory::findByProductIdCategoryHierarchyRole(this.Product, EcoResCategoryNamedHierarchyRole::Retail).Category;
                            this.CategoryHierarchy = EcoResCategory::find(this.Category).CategoryHierarchy;
                        }
                    }
                }
                break;

            case fieldNum(RetailGroupMemberLine, Product):
                if (this.Product && !this.Category)
                {
                    // Updating the category based on product selection for supplemental retail hierarchy.
                    if (this.CategoryHierarchy && EcoResCategoryHierarchyRole::existRoleHierarchyPair(
                            EcoResCategoryNamedHierarchyRole::RetailSpecialGroup, this.CategoryHierarchy))
                    {
                        this.Category = EcoResProductCategory::findByProductAndCategoryHierarchy(this.Product, this.CategoryHierarchy).Category;

                        if (!this.Category)
                        {
                            EcoResDistinctProductVariant ecoResDistinctProductVariant;
                            EcoResProductCategory ecoResProductCategory;
                            EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

                            // Fetches the product variant based on the product for supplemental retail hierarchy.
                            select firstonly ecoResDistinctProductVariant
                                join Category from ecoResProductCategory
                                    where ecoResProductCategory.Product == ecoResDistinctProductVariant.RecId
                                join ecoResCategoryHierarchyRole
                                    where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                                        && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                                        && ecoResDistinctProductVariant.ProductMaster == this.Product;

                            this.Category = ecoResProductCategory.Category;
                        }

                    }
                    else
                    {
                        this.Category = EcoResProductCategory::findByProductIdCategoryHierarchyRole(this.Product, EcoResCategoryNamedHierarchyRole::Retail).Category;

                        // Updating the category hierarchy based on category.
                        this.CategoryHierarchy = EcoResCategory::find(this.Category).CategoryHierarchy;
                    }
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyContainingCategoryOfChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies any records in the <c>RetailSpecialCategoryMember</c> table that reference the record that
    /// a change has occurred.
    /// </summary>
    /// <param name="_lineId">
    /// ID of the line that contains referenced category.
    /// </param>
    /// <param name="_referencedCategoryId">
    /// ID of the category.
    /// </param>
    private static void notifyContainingCategoryOfChange(RecId _lineId, RecId _referencedCategoryId)
    {
        RetailSpecialCategoryMember categoryMember;
        while select Category, RecId from categoryMember
            where categoryMember.RetailGroupMember == _lineId
        {
            categoryMember.deleteReferencedCategoryHierarchy(_referencedCategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the name of the product.
    /// </summary>
    /// <returns>
    /// Product name.
    /// </returns>
    display public EcoResProductName productName()
    {
        EcoResProductName name;

        if (this.Variant)
        {
            name = EcoResProductTranslation::findByProductLanguage(this.Variant, SystemParameters::getSystemLanguageId()).Name;
        }

        if (!name && this.Product)
        {
            name = EcoResProductTranslation::findByProductLanguage(this.Product, SystemParameters::getSystemLanguageId()).Name;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productHierarchyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the category hierarchy name of the product.
    /// </summary>
    /// <returns>
    /// Product category hierarchy.
    /// </returns>
    display public EcoResCategoryHierarchyName productHierarchyName()
    {
        EcoResCategoryHierarchyName hierarchyName;

        hierarchyName = EcoResCategoryHierarchy::find(EcoResCategory::find(this.Category).CategoryHierarchy).Name;
        
        return hierarchyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record from <c>RetailGroupMemberLine</c> table.
    /// </summary>
    /// <remarks>
    /// Calls method <c>notifyContainingCategoryOfChange</c> to notify table <c>RetailSpecialCategoryMember</c> for the changes occuring.
    /// If replication of the record is allowed for the table, action is updated into the <c>RetailConnPreactionTable</c> table.
    /// </remarks>
    public void update()
    {
        if (this.Variant && !this.Product)
        {
            this.Product = EcoResDistinctProductVariant::find(this.Variant).ProductMaster;
        }

        if (this.Product && !this.Category)
        {
            this.Category = EcoResProductCategory::findByProductIdCategoryHierarchyRole(this.Product, EcoResCategoryNamedHierarchyRole::Retail).Category;
            this.CategoryHierarchy = EcoResCategory::find(this.Category).CategoryHierarchy;
        }

        ttsbegin;

        if (this.orig().Category != this.Category && !this.Product && !this.Variant)
        {
            RetailGroupMemberLine::notifyContainingCategoryOfChange(this.RecId, this.orig().Category);
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the lookup form for variant field on Retail member lines,
    ///   allows selecting a Retail or Retail special category
    /// </summary>
    /// <param name="_formReferenceControl">
    /// Reference Group control which has the lookup
    /// </param>
    /// <param name="_selectedCategoryHierarchyId">
    /// Id of the category hierarchy that is currently being edited.
    /// </param>
    /// <returns>
    /// selected Category record
    /// </returns>
    public static EcoResCategory categoryLookup(FormReferenceControl _formReferenceControl, RefRecId _selectedCategoryHierarchyId = 0)
    {
        EcoResCategoryHierarchy retailHierarchy =
            RetailGroupMemberLine::getRetailHierarchyIfExists();

        return EcoResCategory::lookupCategoryHierarchy(
                    _formReferenceControl,
                    retailHierarchy,
                    false,
                    true,
                    true,
                    null,
                    0,
                    0,
                    ProcCategoryOrganizationOption::BuyingLegalEntity,
                    0,
                    [EcoResCategoryNamedHierarchyRole::Retail,
                     EcoResCategoryNamedHierarchyRole::RetailSpecialGroup],
                    _selectedCategoryHierarchyId
                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>assortmentCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the lookup form for category field on Retail member lines,
    ///   allows selecting a Retail or Retail special category.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// Reference Group control which has the lookup.
    /// </param>
    /// <param name="_selectedAssortmentCategoryHierarchyId">
    /// Id of the category hierarchy that is currently being edited; optional.
    /// </param>
    /// <returns>
    /// Selected Category record.
    /// </returns>
    public static EcoResCategory assortmentCategoryLookup(FormReferenceControl _formReferenceControl, RefRecId _selectedAssortmentCategoryHierarchyId = 0)
    {
        EcoResCategoryHierarchy retailHierarchy = _selectedAssortmentCategoryHierarchyId ? EcoResCategoryHierarchy::find(_selectedAssortmentCategoryHierarchyId) :
            RetailGroupMemberLine::getRetailHierarchyIfExists();

        return EcoResCategory::lookupCategoryHierarchy(
                    _formReferenceControl,
                    retailHierarchy,
                    false,
                    true,
                    true,
                    null,
                    0,
                    0,
                    ProcCategoryOrganizationOption::BuyingLegalEntity,
                    0,
                    [EcoResCategoryNamedHierarchyRole::Retail,
                     EcoResCategoryNamedHierarchyRole::RetailSpecialGroup],
                    0
                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailGroupMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a retail member line record, used to make assignment of member lines to another record.
    /// </summary>
    /// <param name="_category">
    /// The category ID for the member line; optional.
    /// </param>
    /// <param name="_product">
    /// The product ID for the member line; optional.
    /// </param>
    /// <param name="_variant">
    /// The variant ID for the member line; optional.
    /// </param>
    /// <returns>
    /// The record ID of the new <c>RetailGroupMemberLine</c> record.
    /// </returns>
    [SysObsolete('This method is obsolete. Use RetailGroupMemberLine::createRetailGroupMemberV2() instead.', false, 28\2\2021)]
    public static RefRecId createRetailGroupMember(
        EcoResCategoryId _category = 0,
        EcoResDistinctProductRecId _product = 0,
        EcoResDistinctProductVariantRecId _variant = 0)
    {
        RetailGroupMemberLine groupMember;

        ttsbegin;
            groupMember.Category = _category;
            groupMember.Product  = _product;
            groupMember.Variant  = _variant;
            groupMember.insert();
        ttscommit;
        return groupMember.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailGroupMemberV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a retail member line record, used to make assignment of member lines to another record.
    /// </summary>
    /// <param name="_category">
    /// The category ID for the member line; optional.
    /// </param>
    /// <param name="_product">
    /// The product ID for the member line; optional.
    /// </param>
    /// <param name="_variant">
    /// The variant ID for the member line; optional.
    /// </param>
    /// <param name = "_categoryHierarchy">
    /// The category hierarchy ID for the member line; optional.
    /// </param>
    /// <returns>
    /// The record ID of the new <c>RetailGroupMemberLine</c> record.
    /// </returns>
    public static RefRecId createRetailGroupMemberV2(
        EcoResCategoryId _category = 0,
        EcoResDistinctProductRecId _product = 0,
        EcoResDistinctProductVariantRecId _variant = 0,
        EcoResCategoryHierarchyId _categoryHierarchy = 0)
    {
        RetailGroupMemberLine groupMember;

        ttsbegin;
        groupMember.Category = _category;
        groupMember.Product  = _product;
        groupMember.Variant  = _variant;
        groupMember.CategoryHierarchy = _categoryHierarchy;
        groupMember.insert();
        ttscommit;
        return groupMember.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteIfExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from the <c>RetailGroupMemberLine</c> table.
    /// </summary>
    /// <param name="_retailGroupMember">
    /// The record ID of the <c>RetailGroupMemberLine</c> record.
    /// </param>
    public static void deleteIfExists(RefRecId _retailGroupMember)
    {
        if (RetailGroupMemberLine::exists(_retailGroupMember))
        {
            ttsbegin;
                RetailGroupMemberLine::find(_retailGroupMember, true).delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>RetailGroupMemeberLine</c> exists.
    /// </summary>
    /// <param name="_retailGroupMember">
    /// The record ID of the <c>RetailGroupMemberLine</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exists(RefRecId _retailGroupMember)
    {
        return RetailGroupMemberLine::find(_retailGroupMember).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailGroupMemeberLine</c> table.
    /// </summary>
    /// <param name="_retailGroupMember">
    /// The record ID of the <c>RetailGroupMemeberLine</c> record.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailGroupMemeberLine</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailGroupMemberLine find(RefRecId _retailGroupMember, boolean _selectForUpdate = false)
    {
        RetailGroupMemberLine groupMember;
        select firstOnly groupMember
            where groupMember.RecId == _retailGroupMember;
        groupMember.selectForUpdate(_selectForUpdate);
        return groupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailGroupMemeberLine</c> table.
    /// </summary>
    /// <param name="_productId">
    /// The product of the retail group member line record to find.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailGroupMemeberLine</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailGroupMemberLine findByProduct(EcoResProductRecId _productId, boolean _selectForUpdate = false)
    {
        RetailGroupMemberLine groupMember;

        select firstOnly groupMember
            where groupMember.Product == _productId
               //avoid variants
               && groupMember.Variant == 0;

        groupMember.selectForUpdate(_selectForUpdate);
        return groupMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailHierarchyIfExists</Name>
				<Source><![CDATA[
    private static EcoResCategoryHierarchy getRetailHierarchyIfExists()
    {
        EcoResCategoryHierarchyRole retailHierarchyRole =
            EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail);

        if (!retailHierarchyRole)
        {
            retailHierarchyRole =
                EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup);
        }

        if (!retailHierarchyRole)
        {
            throw(error(strFmt("@SYS135043", EcoResCategoryNamedHierarchyRole::Retail)));
        }

        return EcoResCategoryHierarchy::find(retailHierarchyRole.CategoryHierarchy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>ECOResProductDetailsExtended</c> form for the current <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// A <c>InventTable</c> record.
    /// </param>
    public static void jumpRefProduct(InventTable _inventTable)
    {
        Args        args;
        FormRun     formRun;

        args = new Args();
        args.record(_inventTable);
        formRun = new MenuFunction(menuItemDisplayStr(EcoResProductDetailsExtended), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the lookup form for the product field on retail member lines, filtered by category if it is
    /// assigned.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The reference group control that has the lookup.
    /// </param>
    /// <param name="_groupMember">
    /// The current <c>RetailGroupMemberLine</c> record that is being edited.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area ID of the legal entity to filter; optional.
    /// </param>
    /// <returns>
    /// The selected product record.
    /// </returns>
    public static EcoResProduct productLookup(
        FormReferenceControl _formReferenceControl,
        RetailGroupMemberLine _groupMember,
        DataAreaId _dataAreaId = '')
    {
        EcoResProduct selectedProduct;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(
            tableNum(EcoResProduct), _formReferenceControl, true);

        sysTableLookup.addLookupfield(fieldNum(EcoResProduct, DisplayProductNumber));
        sysTableLookup.addLookupMethod(tableMethodStr(EcoResProduct, displayProductName));
        sysTableLookup.addLookupfield(fieldNum(EcoResProduct, SearchName));
        sysTableLookup.addLookupfield(fieldNum(EcoResProduct, ProductType));

        if (_groupMember.Category)
        {
            sysTableLookup.parmQuery(
                RetailGroupMemberLineQueryProvider::containedProductsQuery(_groupMember.Category, true /*includesubcategories*/, _dataAreaId));
        }
        else if (_groupMember.CategoryHierarchy)
        {
            // Initialize query to find all products contained in a given Retail category hierarchy.
            sysTableLookup.parmQuery(
                RetailGroupMemberLineQueryProvider::containedProductsCategoryHierarchyQuery(_groupMember.CategoryHierarchy, _dataAreaId));
        }
        else
        {
            sysTableLookup.parmQuery(
                RetailGroupMemberLineQueryProvider::distinctAndMasterProductQuery(_dataAreaId));
        }

        selectedProduct = sysTableLookup.performFormLookup();

        return selectedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLookupByLE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the lookup form for the product field on retail member lines, filtered by category if it is
    /// assigned, and restricted to the specified data area ID which defaults to current legal entity if it
    /// is not specified.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The reference group control that has the lookup.
    /// </param>
    /// <param name="_groupMember">
    /// The current <c>RetailGroupMemberLine</c> record that is being edited.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area ID of the legal entity to filter; optional.
    /// </param>
    /// <returns>
    /// The selected product record.
    /// </returns>
    public static EcoResProduct productLookupByLE(
        FormReferenceControl _formReferenceControl,
        RetailGroupMemberLine _groupMember,
        DataAreaId _dataAreaId = curext())
    {
        return RetailGroupMemberLine::productLookup(_formReferenceControl, _groupMember, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>variantLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the lookup form for variant field on retail member lines, filtered by product if it exists.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The reference group control that has the lookup.
    /// </param>
    /// <param name="_groupMember">
    /// The <c>RetailGroupMemberLine</c> record that is being edited.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area ID of the legal entity to filter; optional.
    /// </param>
    /// <returns>
    /// The selected <c>DistinctProductVariant</c> record.
    /// </returns>
    public static EcoResDistinctProductVariant variantLookup(
        FormReferenceControl _formReferenceControl,
        RetailGroupMemberLine _groupMember,
        DataAreaId _dataAreaId = '')
    {
        return RetailGroupMemberLine::variantLookupByCatalog(_formReferenceControl, _groupMember, _dataAreaId, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>variantLookupByCatalog</Name>
				<Source><![CDATA[
    internal static final EcoResDistinctProductVariant variantLookupByCatalog(
        FormReferenceControl _formReferenceControl,
        RetailGroupMemberLine _groupMember,
        DataAreaId _dataAreaId,
        CatalogRefRecId _catalogRecId)
    {
        EcoResDistinctProductVariant selectedVariant;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(
            tableNum(EcoResDistinctProductVariant), _formReferenceControl, true);

        EcoResCategoryId category = _groupMember.Category;

        // Category hierarchy is specified but not category, in this case lookup should show all variants of specified hierarchy.
        if (!category && _groupMember.CategoryHierarchy)
        {
            category = EcoResCategory::getRoot(_groupMember.CategoryHierarchy).RecId;
        }

        sysTableLookup.addLookupfield(fieldNum(EcoResDistinctProductVariant, DisplayProductNumber));
        sysTableLookup.addLookupfield(fieldNum(EcoResDistinctProductVariant, SearchName));

        sysTableLookup.parmQuery(
            RetailGroupMemberLineQueryProvider::availableVariantsQueryByCatalog(
                category, _groupMember.Product, _dataAreaId, _catalogRecId));

        selectedVariant = sysTableLookup.performFormLookup();

        return selectedVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>variantLookupByLE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the lookup form for variant field on Retail member lines, filtered by product if it exists.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The reference group control that has the lookup.
    /// </param>
    /// <param name="_groupMember">
    /// The <c>RetailGroupMemberLine</c> record that is being edited.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area ID of the legal entity to filter.
    /// </param>
    /// <returns>
    /// The selected <c>DistinctProductVariant</c> record.
    /// </returns>
    public static EcoResDistinctProductVariant variantLookupByLE(
        FormReferenceControl _formReferenceControl,
        RetailGroupMemberLine _groupMember,
        DataAreaId _dataAreaId = curext())
    {
        return RetailGroupMemberLine::variantLookup(_formReferenceControl, _groupMember, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified group member line is a subset of the given group member line.
    /// </summary>
    /// <param name="groupMemberLineToValidate">
    /// The <c>RetailGroupMemberLine</c> record to validate.
    /// </param>
    /// <param name="possibleSupersetgroupMemberLine">
    /// The <c>RetailGroupMemberLine</c> record which is a possible superset.
    /// </param>
    /// <returns>
    /// True if the given retail group member line is a subset or both the lines are the same; false otherwise.
    /// </returns>
    public static boolean isSubset(RetailGroupMemberLine groupMemberLineToValidate, RetailGroupMemberLine possibleSupersetgroupMemberLine)
    {
        if (possibleSupersetgroupMemberLine.Variant != 0 && possibleSupersetgroupMemberLine.Variant != groupMemberLineToValidate.Variant)
        {
            return false;
        }
        else if (possibleSupersetgroupMemberLine.Product != 0 && possibleSupersetgroupMemberLine.Product != groupMemberLineToValidate.Product)
        {
            return false;
        }
        else if (possibleSupersetgroupMemberLine.Category != 0 && !EcoResCategory::isDescendant(groupMemberLineToValidate.Category, possibleSupersetgroupMemberLine.Category, false))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductIsReleasedInActiveLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this RetailGroupMemberLine's Product is released in the active legal entity.
    /// </summary>
    /// <returns>
    /// True if the RetailGroupMemberLine's Product is released in the active legal entity; false otherwise.
    /// </returns>
    public boolean validateProductIsReleasedInActiveLegalEntity()
    {
        DataAreaId dataAreaId = curExt();
        EcoResProduct product = EcoResProduct::find(this.Product);
        Set companiesWhereReleased = product.getCompaniesWhereReleased();
        boolean isValid = companiesWhereReleased.in(dataAreaId);
        
        if (!isValid)
        {
            isValid = checkFailed(strFmt("@Retail:CannotAddDiscountForUnreleasedProduct", product.DisplayProductNumber, strUpr(dataAreaId)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssortmentProductLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailGroupMemeberLine</c> table.
    /// </summary>
    /// <param name="_assortmentRecId">
    /// The assortment recid of the assortment table record to find.
    /// </param>
    /// <param name="_categoryHierarchyId">
    /// The category hierarchy id of the retail group member line record to find.
    /// </param>
    /// <param name="_category">
    /// The category of the retail group member line record to find.
    /// </param>
    /// <param name="_productId">
    /// The product of the retail group member line record to find.
    /// </param>
    /// <param name="_variant">
    /// The variant of the retail group member line record to find.
    /// </param>
    /// <param name="_lineType">
    /// The retail assortment line type of the assortment table record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailGroupMemeberLine</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailGroupMemberLine getAssortmentProductLine(RetailAssortmentRefRecId _assortmentRecId, EcoResCategoryHierarchyId _categoryHierarchyId,
                                                                EcoResCategoryId _category, EcoResProductRecId _productId, EcoResDistinctProductVariantRecId _variant, RetailAssortmentLineType _lineType)
    {
        RetailGroupMemberLine groupMemberLine;
        RetailAssortmentProductLine assortmentProductLine;

        select firstonly groupMemberLine
            where groupMemberLine.CategoryHierarchy == _categoryHierarchyId
            &&    groupMemberLine.Category == _category
            &&    groupMemberLine.Product == _productId
            &&    groupMemberLine.Variant == _variant
            exists join assortmentProductLine
            where assortmentProductLine.RetailGroupMemberLineId == groupMemberLine.RecId
            &&    assortmentProductLine.AssortmentRecId == _assortmentRecId
            &&    assortmentProductLine.LineType == _lineType;

        return groupMemberLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssortmentLineGroupMemberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailGroupMemeberLine</c> table.
    /// </summary>
    /// <param name="_assortmentRecId">
    /// The assortment recid of the assortment table record to find.
    /// </param>
    /// <param name="_categoryHierarchyId">
    /// The category hierarchy id of the retail group member line record to find.
    /// </param>
    /// <param name="_category">
    /// The category of the retail group member line record to find.
    /// </param>
    /// <param name="_productId">
    /// The product of the retail group member line record to find.
    /// </param>
    /// <param name="_variant">
    /// The variant of the retail group member line record to find.
    /// </param>
    /// <param name="_lineType">
    /// The retail assortment line type of the assortment table record to find.
    /// </param>
    /// <param name="_retailGroupMemberLineRecid">
    /// The retail group member line record of the main record to find, Default it will be 0 for entity and retail add items.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailGroupMemeberLine</c> table; otherwise, an empty record.
    /// </returns>
    internal static RetailGroupMemberLine getAssortmentLineGroupMemberLine(RetailAssortmentRefRecId _assortmentRecId, EcoResCategoryHierarchyId _categoryHierarchyId,
                                                                EcoResCategoryId _category, EcoResProductRecId _productId, EcoResDistinctProductVariantRecId _variant, RetailAssortmentLineType _lineType, RefRecId _retailGroupMemberLineRecid = 0)
    {
        RetailGroupMemberLine groupMemberLine;
        RetailAssortmentProductLine assortmentProductLine;

        select firstonly groupMemberLine
            where groupMemberLine.CategoryHierarchy == _categoryHierarchyId
            &&    groupMemberLine.Category == _category
            &&    groupMemberLine.Product == _productId
            &&    groupMemberLine.Variant == _variant
            &&    groupMemberLine.RecId != _retailGroupMemberLineRecid
            exists join assortmentProductLine
            where assortmentProductLine.RetailGroupMemberLineId == groupMemberLine.RecId
            &&    assortmentProductLine.AssortmentRecId == _assortmentRecId
            &&    assortmentProductLine.LineType == _lineType
            &&    assortmentProductLine.status == RetailAssortmentStatusType::Draft;

        return groupMemberLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@RET5755</DeveloperDocumentation>
	<Label>@RET5754</Label>
	<TitleField1>Category</TitleField1>
	<TitleField2>Product</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Retail</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Variant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS14437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Variant</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Variant</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResDistinctProductVariantRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VarProCatIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Variant</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductVariantIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Variant</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResDistinctProductVariant</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResDistinctProductVariant</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Variant</Name>
					<Field>Variant</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryHierarchy</Name>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EcoResCategoryHierarchy</Name>
					<Field>CategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>