<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTenderDiscount</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTenderDiscount extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>discountValidationPeriodEndingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the end date of discount.
    /// </summary>
    /// <returns>
    /// The ending date of the discount.
    /// </returns>
    display RetailEndingDate discountValidationPeriodEndingDate()
    {
        return RetailDiscountValidationPeriod::find(this.ValidationPeriodId).ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountValidationPeriodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of discount validation period.
    /// </summary>
    /// <returns>
    /// The name of discount validation period.
    /// </returns>
    display Description discountValidationPeriodName()
    {
        Description ret;

        if (this.DateValidationType == RetailDateValidationTypeBase::Advanced)
        {
            ret = RetailDiscountValidationPeriod::find(this.ValidationPeriodId).Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountValidationPeriodStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the starting date of discount.
    /// </summary>
    /// <returns>
    /// The starting date of the discount.
    /// </returns>
    display RetailStartingDate discountValidationPeriodStartDate()
    {
        return RetailDiscountValidationPeriod::find(this.ValidationPeriodId).ValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new record value with a new key value.
    /// </summary>
    public void initValue()
    {
        RetailOfferId nextRetailOfferId = RetailTenderDiscount::getNextRetailOfferNumberSequence();

        this.OfferId = nextRetailOfferId;

        super();

        // default validation period to standard type
        this.DateValidationType = RetailDateValidationTypeBase::Standard;
        // Valid for 1 year from insertion
        this.ValidTo = DateTimeUtil::date(DateTimeUtil::addYears(DateTimeUtil::getSystemDateTime(), 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the value into <c>RetailTenderDiscount</c> table.
    /// </summary>
    public void insert()
    {
        if (this.OfferId == '')
        {
            RetailOfferId nextRetailOfferId = RetailTenderDiscount::getNextRetailOfferNumberSequence();
            this.OfferId = nextRetailOfferId;
        }
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextRetailOfferNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next available tender discount offer.
    /// </summary>
    /// <returns>
    /// The next available tender discount offer.
    /// </returns>
    private static RetailOfferId getNextRetailOfferNumberSequence()
    {
        RetailOfferId nextRetailOfferId = '';
        NumberSeq numSeq;

        numSeq = NumberSeq::newGetNum(RetailParameters::numRefOfferId());
        if (numSeq)
        {
            nextRetailOfferId = numSeq.num();
            numSeq.used();
        }

        return nextRetailOfferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTenderDiscount</c> table.
    /// </summary>
    /// <param name="_tenderDiscount">
    /// The record ID of the <c>RetailTenderDiscount</c> table.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTenderDiscount</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTenderDiscount find(RefRecId _tenderDiscount, boolean _forUpdate = false)
    {
        RetailTenderDiscount retailTenderDiscount;

        retailTenderDiscount.selectForUpdate(_forUpdate);

        select firstOnly retailTenderDiscount 
            where retailTenderDiscount.RecId == _tenderDiscount;

        return retailTenderDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOfferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTenderDiscount</c> table, depending on offer number.
    /// </summary>
    /// <param name="_offerId">
    /// The ID number of offer.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTenderDiscount</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTenderDiscount findByOfferId(RetailDiscountOfferId _offerId, boolean _forUpdate = false)
    {
        RetailTenderDiscount retailTenderDiscount;

        retailTenderDiscount.selectForUpdate(_forUpdate);

        select firstonly retailTenderDiscount
            where retailTenderDiscount.OfferId == _offerId;

        return retailTenderDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the starting date and ending date.
    /// </summary>
    /// <returns>
    /// true if starting date is less than ending date; otherwise, false.
    /// </returns>
    private boolean validateDatePeriod()
    {
        if ((this.ValidFrom && this.ValidTo) && (this.ValidTo < this.ValidFrom))
        {
            return checkFailed("@RET5275");
        }

        if ((this.DateValidationType == RetailDateValidationTypeBase::Advanced)
            && !this.ValidationPeriodId)
        {
            return checkFailed("@RET260923");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCardType</Name>
				<Source><![CDATA[
    private boolean validateCardType()
    {
        RetailTenderTypeTable retailTenderTypeTable;
        select firstonly defaultFunction from retailTenderTypeTable
                where retailTenderTypeTable.RecId == this.RetailTenderType;

        if (retailTenderTypeTable.defaultFunction == RetailTenderFunction::Card
             && !this.CardTypeId)
        {
            return checkFailed("@Retail:RetailCardTypeValidation");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super() && this.validateDatePeriod() && this.validateCardType();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is overridden to modify the values in the fields of the <c>RetailTenderDiscount</c> table when the fields are edited.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(RetailTenderDiscount, Status))
        {
            SysGlobalObjectCache cache = new SysGlobalObjectCache();
            cache.clear(RetailTenderDiscount::RetailExistsForTenderTypeScope());
        }
        else if (_fieldId == fieldNum(RetailTenderDiscount, ValidationPeriodId))
        {
            this.ValidFrom = RetailDiscountValidationPeriod::find(this.ValidationPeriodId).ValidFrom;
            this.ValidTo = RetailDiscountValidationPeriod::find(this.ValidationPeriodId).validTo;

            if (!this.ValidTo)
            {
                this.ValidTo = DateTimeUtil::date(DateTimeUtil::maxValue());
            }
        }
        else if (_fieldId == fieldNum(RetailTenderDiscount, ValidTo))
        {
            // make sure expiration date is always set to max, not min, when unspecified
            if (!this.ValidTo)
            {
                this.ValidTo = DateTimeUtil::date(datetimeutil::maxValue());
            }
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(RetailTenderDiscount, Status))
        {
            ret = this.validateEnable();
        }
        else if (_fieldIdToCheck == fieldNum(RetailTenderDiscount , RetailTenderType))
        {
            RetailTenderTypeTable retailTenderTypeTable;
            select firstonly defaultFunction from retailTenderTypeTable
                where retailTenderTypeTable.RecId == this.RetailTenderType;

            if (retailTenderTypeTable.defaultFunction != RetailTenderFunction::Card
                && retailTenderTypeTable.defaultFunction != RetailTenderFunction::Normal)
            {
                ret = ret && checkFailed(strFmt("@Retail:RetailTenderDiscountInvalidTenderTypeError", retailTenderTypeTable.defaultFunction));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the discount can be enabled.
    /// </summary>
    /// <returns>
    /// true if the discount can be enabled; otherwise, false.
    /// </returns>
    private boolean validateEnable()
    {
        boolean ret = true;

        if (this.Status == RetailDisabledEnabled::Enabled)
        {
            ret = this.validateDiscountTiersValue() && this.validatePriceGroup();
        }
            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDiscountTiersValue</Name>
				<Source><![CDATA[
    private boolean validateDiscountTiersValue()
    {
        boolean ret = true;

        if (RetailTenderDiscountThresholdTiers::find(this.OfferId).DiscountValue == 0)
        {
            ret = checkFailed("@Retail:RetailTenderDiscountTierEmptyError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///	Validates the price group.
    /// </summary>
    /// <returns>
    ///	true if the price group validation is ok; otherwise, false.
    /// </returns>
    private boolean validatePriceGroup()
    {
        RetailTenderDiscountPriceGroup discountPriceGroup;
        boolean ret = true;

        select firstOnly RecId from discountPriceGroup 
            where discountPriceGroup.RetailTenderDiscount == this.RecId;

        if (discountPriceGroup.RecId == 0)
        {
            ret = checkFailed("@RET260503");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountTenderDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger account for tender discount for the periodic discount type, item and customer account passed as parameter.
    /// </summary>
    /// <param name="_offerId">
    /// The current value for the <c>RetailTenderOfferId</c>.
    /// </param>
    /// <param name="_itemId">
    /// The current value of item ID.
    /// </param>
    /// <param name="_custAccount">
    /// The current value of customer account.
    /// </param>
    /// <returns>
    /// The ledger account to which tender discount is posted.
    /// </returns>
    /// <remarks>
    /// The ledger account is returned.
    /// </remarks>
    public static LedgerDimensionDefaultAccount ledgerAccountTenderDisc(RetailDiscountOfferId _offerId, ItemId _itemId, CustAccount _custAccount)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        RetailTenderDiscount tenderDiscount = RetailTenderDiscount::findByOfferId(_offerId);
        RetailParameters postingRetailSetup = RetailParameters::find();
        
        switch (postingRetailSetup.LedgerAccountType)
        {
            case RetailBookingLedgerAccountTypeBase::Periodic:
                if (tenderDiscount.DiscountLedgerDimension)
                {
                    ledgerDimensionDefaultAccount = tenderDiscount.DiscountLedgerDimension;
                }
                else
                {
                    ledgerDimensionDefaultAccount = postingRetailSetup.TenderLedgerDimension;
                }
                break;

            case RetailBookingLedgerAccountTypeBase::Standard:

                ledgerDimensionDefaultAccount = InventPosting::accountItemLedgerDimensionFromParameters(
                    InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
                        InventAccountType::SalesDisc,
                        _itemId,
                        '',
                        0,
                        _custAccount,
                        CustTable::find(_custAccount).CustGroup,
                        CustTable::find(_custAccount).TaxGroup));
                break;
        }
        
        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCardTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTenderDiscount</c> table, depending on card type.
    /// </summary>
    /// <param name="_cardType">
    /// The ID number of card.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTenderDiscount</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTenderDiscount findByCardTypeId(RetailCardTypeId _cardType, boolean _forUpdate = false)
    {
        RetailTenderDiscount retailTenderDiscount;

        retailTenderDiscount.selectForUpdate(_forUpdate);

        select firstonly retailTenderDiscount
            where retailTenderDiscount.CardTypeId == _cardType
            && retailTenderDiscount.Status == RetailDisabledEnabled::Enabled;

        return retailTenderDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForTenderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if enabled discounts exists for given tender type id
    /// </summary>
    /// <param name = "_tenderTypeId">The tender type id</param>
    /// <param name = "_tenderTypeId">The card type id to check for tender discounts</param>
    /// <returns></returns>    
    public static boolean existsForTenderType(RetailTenderTypeId _tenderTypeId, RetailCardTypeId _cardTypeId = '')
    {
        str cachScope = RetailTenderDiscount::RetailExistsForTenderTypeScope();
        boolean existsForTenderType;

        SysGlobalObjectCache cache = new SysGlobalObjectCache();

        str key = strFmt('%1-%2', _tenderTypeId, _cardTypeId);

        container cacheContainer = cache.find(cachScope, [key]);

        if (cacheContainer == conNull())
        {
            RetailTenderDiscount tenderDiscount;

            RecId tenderTypeRecId = RetailTenderTypeTable::find(_tenderTypeId).RecId;

            if (_cardTypeId != '')
            {
                existsForTenderType = RetailTenderDiscount::existsForCardType(_tenderTypeId, _cardTypeId);
            }
            else
            {
                select firstonly RecId from tenderDiscount
                    where tenderDiscount.RetailTenderType == tenderTypeRecId
                        && tenderDiscount.Status == RetailDisabledEnabled::Enabled;

                existsForTenderType = tenderDiscount.RecId != 0;
            }

            cache.insert(cachScope, [key], [existsForTenderType]);
        }
        else
        {
            existsForTenderType = conPeek(cacheContainer, 1);
        }

        return existsForTenderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForCardType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if enabled discounts exists for given tender type id
    /// </summary>
    /// <param name = "_tenderTypeId">The tender type id</param>
    /// <returns></returns>
    public static boolean existsForCardType(RetailTenderTypeId _tenderTypeId, RetailCardTypeId _cardTypeId)
    {
        RetailTenderDiscount tenderDiscount;

        if (_cardTypeId == '')
        {
            return false;
        }

        RecId tenderTypeRecId = RetailTenderTypeTable::find(_tenderTypeId).RecId;

        select firstonly RecId from tenderDiscount
            where tenderDiscount.RetailTenderType == tenderTypeRecId
                && (tenderDiscount.CardTypeId != '' && tenderDiscount.CardTypeId == _cardTypeId)
                && tenderDiscount.Status == RetailDisabledEnabled::Enabled;

        return tenderDiscount.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailExistsForTenderTypeScope</Name>
				<Source><![CDATA[
    private static str RetailExistsForTenderTypeScope()
    {
        return 'RetailExistsForTenderTypeScope';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@Retail:RetailTenderDiscountDevDoc</DeveloperDocumentation>
	<Label>@Retail:RetailTenderDiscount</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>RetailTenderType</TitleField1>
	<TitleField2>OfferId</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Merchandising</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailTenderType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@RET6391</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiscountDates</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidationPeriod</Name>
			<Label>@RET3074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidationPeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discountValidationPeriodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discountValidationPeriodStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>discountValidationPeriodEndingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MaxDiscountAmount</Name>
			<Label>@RET4584</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaxDiscountAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailTenderType</Name>
			<ExtendedDataType>RetailTenderTypeRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OfferId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>RetailOfferId</ExtendedDataType>
			<Label>@RET5577</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>RetailDisabledEnabled</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DateValidationType</Name>
			<EnumType>RetailDateValidationTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ValidationPeriodId</Name>
			<ExtendedDataType>RetailDiscountValidationPeriodId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailDiscountValidationPeriod</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaxDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailMaxDiscountAmount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardTypeId</Name>
			<ExtendedDataType>RetailCardTypeId</ExtendedDataType>
			<Label>@RET3869</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DiscountLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS75661</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailOfferIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OfferId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailTenderTypeTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailTenderType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTenderTypeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailTenderTypeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailTenderType</Name>
					<Field>RetailTenderType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailDiscountValidationPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailDiscountValidationPeriod</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ValidationPeriodId</Name>
					<SourceEDT>RetailDiscountValidationPeriodId</SourceEDT>
					<Field>ValidationPeriodId</Field>
					<RelatedField>periodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>periodIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTenderTypeCardTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTenderTypeCardTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CardTypeId</Name>
					<Field>CardTypeId</Field>
					<RelatedField>cardTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>cardTypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DiscountLedgerDimension</Name>
					<Field>DiscountLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>