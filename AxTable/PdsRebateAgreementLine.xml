<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateAgreementLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsRebateAgreementLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAmountBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>PdsRebateAgreementLine</c> table amount break fields are valid based on range and
    /// the <c> PdsRebateAgreement</c> table minimum amount field.
    /// </summary>
    /// <returns>
    /// true if the amount break fields are valid; otherwise, false.
    /// </returns>
    public boolean checkAmountBreaks()
    {
        PdsRebateAgreement  pdsRebateAgreement;
        boolean ok = true;

        pdsRebateAgreement = this.pdsRebateAgreement();

        if (this.RebateFromAmount < pdsRebateAgreement.PdsRebateMinAmt)
        {
            ok = checkFailed("@MCR40109");
        }

        if (ok && this.RebateToAmount && this.RebateFromAmount >= this.RebateToAmount)
        {
            ok = checkFailed("@SYS134949");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>PdsRebateAgreementLine</c> table quantity fields are valid based on range and the <c> PdsRebateAgreement</c> table minimum quantity field.
    /// </summary>
    /// <returns>
    /// true if the quantity fields are valid; otherwise, false.
    /// </returns>
    public boolean checkQuantities()
    {
        PdsRebateAgreement  pdsRebateAgreement;

        FromQty             fromQty;
        boolean             ok = true;

        pdsRebateAgreement = this.pdsRebateAgreement();

        if (this.RebateUnit != pdsRebateAgreement.PdsRebateUnit)
        {
            EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(pdsRebateAgreement.PdsItemRebateRelation,
																																	   this.InventdimId,
																																	   this.RebateUnit,
																																	   pdsRebateAgreement.PdsRebateUnit,
                                                                                                                                       NoYes::Yes);

            if (ecoResProductUnitConverter.canValueBeConverted())
            {
                fromQty = ecoResProductUnitConverter.convertValue(this.RebateFromQty);

                if (fromQty < pdsRebateAgreement.PdsRebateMinQty)
                {
                    ok = checkFailed("@PDS1404");
                }
            }
            else
            {
                ok = checkFailed(strFmt("@PDS1609",this.RebateUnit, this.pdsRebateAgreement().PdsRebateUnit));
            }
        }

        else
        {
            if (this.RebateFromQty < pdsRebateAgreement.PdsRebateMinQty)
            {
                ok = checkFailed("@PDS1404");
            }
        }

        if (ok && this.RebateToQty && this.RebateFromQty >= this.RebateToQty)
        {
            ok = checkFailed("@SYS134949");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateAmtRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate amount is valid for the agreement line based on the defined amount breaks.
    /// </summary>
    /// <param name="_rebateAmt">
    /// The amount on the sales order line for which the rebate should be calculated.
    /// </param>
    /// <param name="_maxRebateLineBreak">
    /// A boolean value that defines whether to check the rebate requirements for the maximum rebate or not.
    /// </param>
    /// <returns>
    /// true if the rebate amount is valid for the agreement line; otherwise, false.
    /// </returns>
    public boolean checkRebateAmtRequirements(AmountCur _rebateAmt,
                                              boolean   _maxRebateLineBreak = false)
    {
        AmountCur rebateAmt = abs(_rebateAmt);
        boolean   ret;

        if (this.RebateFromAmount <= rebateAmt && (this.toAmount() > rebateAmt || (_maxRebateLineBreak && this.toAmount() == rebateAmt)))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateQtyRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Rebate unit and sales unit can be convert.
    /// </summary>
    /// <param name="_rebateQty">
    /// The rebate quantity.
    /// </param>
    /// <param name="_salesUnit">
    /// The Sales unit.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> on the transaction.
    /// </param>
    /// <param name="_maxRebateLineBreak">
    /// A boolean value that defines whether to check the rebate requirements for the maximum rebate or not.
    /// </param>
    /// <returns>
    /// true if sales unit and rebate unit can be converted; otherwise, false.
    /// </returns>
    [SysObsolete('This method has been deprecated, use checkRebateQuantityRequirements instead', false, 31\03\2019)]
    public boolean checkRebateQtyRequirements(
        SalesQty    _rebateQty,
        SalesUnit   _salesUnit,
        ItemId      _itemId = '',
        boolean     _maxRebateLineBreak = false)
    {
        if (EcoResProduct::find(InventTable::find(_itemId).Product).isProductMasterWithProductVariantConversionEnabled())
        {
            throw error("@SCM:DeprecatedMethodErrorForVariantConversions");
        }

        RebateQuantityRequirementContract contract = RebateQuantityRequirementContract::constructWithVariables(_rebateQty,
                                                                                                               _salesUnit,
                                                                                                               _itemId,
                                                                                                               '',
                                                                                                               _maxRebateLineBreak);
        
        return this.checkRebateQuantityRequirements(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateQuantityRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate unit and sales unit can be convert.
    /// </summary>
    /// <param name="_contract">
    /// Rebate quantity requirement parameters.
    /// </param>
    /// <returns>
    /// true if sales unit and rebate unit can be converted; otherwise, false.
    /// </returns>
    public boolean checkRebateQuantityRequirements(RebateQuantityRequirementContract _contract)
    {
        real    rebateQty   = abs(_contract.rebateQty);
        boolean ret         = true;

        if (rebateQty)
        {
            rebateQty = this.convertQtyToUnit(rebateQty, _contract.unit, _contract.itemId, _contract.inventDimId);
            if (!rebateQty)
            {
                ret = false;
            }
        }

        if (ret
          && (this.RebateFromQty > rebateQty)
          || this.toQty()< rebateQty
          || (!_contract.maxRebateLineBreak && this.toQty()== rebateQty))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>PdsRebateAgreementLine</c> table unit field is valid based on other related records and on the <c> PdsRebateAgreement</c> table rebate unit conversion field.
    /// </summary>
    /// <returns>
    /// true if the rebate unit field is valid; otherwise, false.
    /// </returns>
    public boolean checkRebateUnit()
    {
        PdsRebateAgreementLine  line;

        boolean                 ok = true;

        if (this.pdsRebateAgreement().RebateUOMOption == PdsRebateUOMOption::Convert)
        {
            select firstonly RebateAgreementRefRecId, RebateUnit, RecId
                from line
                where line.RebateAgreementRefRecId  == this.RebateAgreementRefRecId
                    && line.RebateUnit              != this.RebateUnit
                    && line.RecId                   != this.RecId;

            if (line.RecId)
            {
                ok = checkFailed(strFmt("@PDS1923", line.RebateUnit));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedRebateTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Rebate agreement is assigned to any transaction and invalidates the rebate agreement.
    /// </summary>
    public void checkRelatedRebateTransExist()
    {
        PdsRebateAgreement agreement = this.pdsRebateAgreement();

        if (agreement.checkRelatedRebateTransExist())
        {
            throw error("@PDS1407");
        }
        else if (agreement.Validated)
        {
            agreement.selectForUpdate(true);
            agreement.invalidateRebateAgreement(true);
            info("@PDS1408");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RefRecId            rebateAgreementRecId = this.RebateAgreementRefRecId;
        PdsRebateAgreement  rebateAgreement;

        ttsbegin;

        super();

        rebateAgreement = PdsRebateAgreement::find(rebateAgreementRecId, true);
        // the following already calls update()
        if (rebateAgreement.Validated)
        {
            rebateAgreement.invalidateRebateAgreement(true);
            info("@PDS2014");
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPdsRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current agreement line record from an <c>PdsRebateAgreement</c> table record.
    /// </summary>
    /// <param name="_pdsRebateAgreement">
    /// The <c>PdsRebateAgreement</c> table record.
    /// </param>
    public void initFromPdsRebateAgreement(PdsRebateAgreement _pdsRebateAgreement)
    {
        this.RebateAgreementRefRecId  = _pdsRebateAgreement.RecId;

        this.defaultCurrency();
        this.defaultRebateUnit();
        this.defaultRebateAmountType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the InventDimId fields and inserts into the <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    public void insert()
    {
        this.checkRelatedRebateTransExist();

        if (!this.InventdimId)
        {
            this.InventdimId    = InventDim::inventDimIdBlank();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>InventDim</c> record to current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// Return <c>InventDim</c> record.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventdimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAmountBreakOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is an amount break overlap in the agreement line grouping.
    /// </summary>
    /// <param name="_pdsRebateAgreementLine">
    /// The other <c>PdsRebateAgreementLine</c> record to compare with this Rebate agreement line.
    /// </param>
    /// <returns>
    /// true if there is an amount break overlap; otherwise, false.
    /// </returns>
    public boolean isAmountBreakOverlap(PdsRebateAgreementLine _pdsRebateAgreementLine)
    {
        return (this.RebateFromAmount < _pdsRebateAgreementLine.toAmount() && this.toAmount() > _pdsRebateAgreementLine.RebateFromAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuantityOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there is a quantity overlap in the agreement line grouping.
    /// </summary>
    /// <param name="_pdsRebateAgreementLine">
    /// The other <c>PdsRebateAgreementLine</c> record to compare with this Rebate agreement line.
    /// </param>
    /// <returns>
    /// true if there is quantity overlap; otherwise, false.
    /// </returns>
    public boolean isQuantityOverlap(PdsRebateAgreementLine _pdsRebateAgreementLine)
    {
        return (this.RebateFromQty < _pdsRebateAgreementLine.toQty() && this.toQty() > _pdsRebateAgreementLine.RebateFromQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Rebate agreement validation.
    /// </summary>
    /// <returns>
    /// true if the rebate agreement is validated, otherwise false.
    /// </returns>
    public display PdsRebateValidated isValidated()
    {
        return this.pdsRebateAgreement().isValidated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>PdsRebateAgreement</c> record to current record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// Return <c>PdsRebateAgreement</c> record.
    /// </returns>
    public PdsRebateAgreement pdsRebateAgreement(boolean _forUpdate = false)
    {
        return PdsRebateAgreement::find(this.RebateAgreementRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate to amount.
    /// </summary>
    /// <returns>
    /// Returns the maximum real value for the negative rebate to amount.
    /// </returns>

    public PDSRebateToAmount toAmount()
    {
        if (this.RebateToAmount<= 0)
        {
            return realMax();
        }
        else
        {
            return this.RebateToAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Rebate ToQty.
    /// </summary>
    /// <returns>
    /// Returns maximum real value for the negative Rebate To Quantities.
    /// </returns>

    public PdsRebateToQty toQty()
    {
        if (this.RebateToQty <= 0)
        {
            return realMax();
        }
        else
        {
            return this.RebateToQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PdsRebateAgreementLineRecord</c>.
    /// </summary>

    public void update()
    {
        PdsRebateAgreement pdsRebateAgreement;

        this.checkRelatedRebateTransExist();
        super();

        pdsRebateAgreement = this.pdsRebateAgreement(true);
        // If the workflow is in a status other than NotSubmitted, change the workflow
        // status to NotSubmitted which will require the user to submit their changes to
        // the workflow before validating.
        if (pdsRebateAgreement.tamCustRebateApprovalStatus == TAMCustRebateApprovalStatus::Approved)
        {
            ttsbegin;
            pdsRebateAgreement.tamCustRebateApprovalStatus = TAMCustRebateApprovalStatus::NotSubmitted;
            pdsRebateAgreement.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>PdsRebateAgreementLine</c> record.
    /// </summary>
    /// <param name="_fieldNameToCheck">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldNameToCheck, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldNameToCheck, _arrayIndex);

        switch (_fieldNameToCheck)
        {
            case fieldStr(PdsRebateAgreementLine, RebateValue) :
                if (this.checkRebateValue())
                {
                    if (this.pdsRebateAgreement().PdsPaymtType == PdsPaymtType::Cheque)
                    {
                        ret = checkFailed("@PDS1405");
                    }
                    else
                    {
                        warning("@PDS1406");
                    }
                }
                break;

            case fieldStr(PdsRebateAgreementLine, RebateFromQty):
                if (this.checkRebateFromQty())
                {
                    ret = checkFailed("@SYS134947");
                }
                break;

            case fieldStr(PdsRebateAgreementLine, RebateToQty):
                if (this.checkRebateToQty())
                {
                    ret = checkFailed("@SYS134947");
                }
                break;
            case fieldStr(PdsRebateAgreementLine, RebateFromAmount):
                if (this.checkRebateFromAmount())
                {
                    ret = checkFailed("@SYS134947");
                }
                break;

            case fieldStr(PdsRebateAgreementLine, RebateToAmount):
                if (this.checkRebateToAmount())
                {
                    ret = checkFailed("@SYS134947");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks condition for the value in the field <c>RebateValue</c> in the <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    protected boolean checkRebateValue()
    {
        return this.RebateValue < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateFromQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks condition for the value in the field <c>RebateFromQty</c> in the <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    protected boolean checkRebateFromQty()
    {
        return this.RebateFromQty < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateToQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks condition for the value in the field <c>RebateToQty</c> in the <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    protected boolean checkRebateToQty()
    {
        return this.RebateToQty < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateFromAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks condition for the value in the field <c>RebateFromAmount</c> in the <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    protected boolean checkRebateFromAmount()
    {
        return this.RebateFromAmount < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateToAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks condition for the value in the field <c>RebateToAmount</c> in the <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    protected boolean checkRebateToAmount()
    {
        return this.RebateToAmount < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>PdsRebateAgreementLine</c> record can be written.
    /// </summary>
    /// <returns>
    /// Returns true if the record can be written; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;
        PdsRebateAgreement pdsRebateAgreement = this.pdsRebateAgreement();

        if (!this.LineNum)
        {
            this.LineNum = PdsRebateAgreementLine::lastLineNum(this.RebateAgreementRefRecId) + 1.0;
        }

        ret = super();

        if (ret
            && this.RebateAmtType == PdsRebateAmtType::Percentage
            && this.checkRebateValuePercentage())
        {
            ret = checkFailed("@PRO1313");
        }

        if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity)
        {
            ret = this.checkQuantities() && ret;
        }
        else if (pdsRebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount)
        {
            ret = this.checkAmountBreaks() && ret;
        }

        ret = this.checkRebateUnit() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateValuePercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks condition for the value Type::Percentage in the <c>PdsRebateAgreementLine</c> table.
    /// </summary>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    protected boolean checkRebateValuePercentage()
    {
        return this.RebateValue < 0 || this.RebateValue > 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns a record in the <c>PdsRebateAgreementLine</c> table by using a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID value of the record to find.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PdsRebateAgreementLine</c> table.
    /// </returns>
    public static PdsRebateAgreementLine find(
        RecId       _recId,
        boolean     _update = false)
    {
        PdsRebateAgreementLine pdsRebateAgreementLine;

        if (_update)
        {
            pdsRebateAgreementLine.selectForUpdate(_update);
        }

        select firstonly pdsRebateAgreementLine
            where pdsRebateAgreementLine.RecId == _recId;

        return pdsRebateAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the highest line number that exist for the Rebate Agreement lines.
    /// </summary>
    /// <param name="_pdsRebateAgreementRefRecId">
    /// The record Id of the Rebate agreement for which highest line number is finding.
    /// </param>
    /// <returns>
    /// Return highest line number for the rebate agreement.
    /// </returns>
    public static LineNum lastLineNum(PdsRebateAgreementRefRecId _pdsRebateAgreementRefRecId)
    {
        return (select maxof(LineNum) from pdsRebateAgreementLine
                    where pdsRebateAgreementLine.RebateAgreementRefRecId == _pdsRebateAgreementRefRecId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRebateAgreementLineMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rebate agreement line that has the maximum rebate line break to be is used
    /// for creating a rebate based on sales invoice record.
    /// </summary>
    /// <param name="_rebateAgreement">
    /// A <c>PDSRebateAgreement</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// A <c>InventDim</c> record.
    /// </param>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_rebateQty">
    /// The Rebate quantity.
    /// </param>
    /// <param name="_salesUnit">
    /// The sales unit.
    /// </param>
    /// <param name="_currency">
    /// The currency.
    /// </param>
    /// <param name="_rebateAmt">
    /// The Rebate amount.
    /// </param>
    /// <returns>
    /// Return the <c>PDSRebateAgreementLine</c> record to create a rebate for.
    /// </returns>
    public static PDSRebateAgreementLine selectRebateAgreementLineMax(
        PDSRebateAgreement          _rebateAgreement,
        InventDim                   _inventDim,
        ItemId                      _itemId,
        SalesQty                    _rebateQty,
        SalesUnit                   _salesUnit,
        CurrencyCode                _currency,
        AmountCur                   _rebateAmt)
    {
        PdsMaxRebateAgreementLineQueryBuilder	pdsMaxRebateAgreementLineQueryBuilder;
        PDSRebateAgreementLine				    pdsRebateAgreementLine;
        
        

        if (_rebateAgreement.PDSRebateLineBreakType == PdsRebateLineBreakType::Amount
            || _rebateAgreement.RebateUOMOption     == PDSRebateUOMOption::Convert
            || _rebateAgreement.PdsRebateUnit       == _salesUnit)
        {
            pdsMaxRebateAgreementLineQueryBuilder	= PdsMaxRebateAgreementLineQueryBuilder::newFromQuery(_rebateAgreement, _inventDim, _itemId,
                                                        _rebateQty, _salesUnit, _currency, _rebateAmt);

            pdsRebateAgreementLine				    = pdsMaxRebateAgreementLineQueryBuilder.selectPdsRebateAgreementLineMax();
        }

        if (pdsRebateAgreementLine)
        {
            SalesQty rebateQty = abs(_rebateQty);

            if (_rebateAgreement.PDSRebateLineBreakType == PdsRebateLineBreakType::Quantity
             && _rebateAgreement.RebateUOMOption        == PDSRebateUOMOption::Convert
             && rebateQty)
            {
                rebateQty = pdsRebateAgreementLine.convertQtyToUnit(rebateQty, _salesUnit, _itemId, _inventDim.inventDimId);
                if (pdsRebateAgreementLine.toQty() <= rebateQty)
                {
                    return pdsRebateAgreementLine;
                }
            }
            else if (_rebateAgreement.PDSRebateLineBreakType == PDSRebateLineBreakType::Amount)
            {
                AmountCur rebateAmt	= abs(_rebateAmt);

                if (_rebateAgreement.RebateCurrency != _currency)
                {
                    //the assumption is that at this point currency conversion between rebate amount currency and rebate agreement currency must be possible
                    rebateAmt = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmt, _currency, _rebateAgreement.RebateCurrency);
                }

                if (pdsRebateAgreementLine.toAmount() <= rebateAmt)
                {
                    return pdsRebateAgreementLine;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQtyToUnit</Name>
				<Source><![CDATA[
    private real convertQtyToUnit(
        SalesQty    _rebateQty,
        SalesUnit   _salesUnit,
        ItemId      _itemId = '',
        InventDimId _inventDimId = '')
    {
        SalesQty               rebateQty = _rebateQty;
        boolean                ret = true;

        if (_salesUnit != this.RebateUnit)
        {
            EcoResProductUnitConverter	ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId,
																																	   _inventDimId,
																																	   _salesUnit,
																																	   this.RebateUnit,
																																	   NoYes::Yes);

            if (!ecoResProductUnitConverter.canValueBeConverted())
            {
                rebateQty = 0;
            }
            else
            {
                rebateQty = ecoResProductUnitConverter.convertValue(_rebateQty);
            }
        }

        return rebateQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRebateAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Rebate agreement line that is used for creating a rebate based on sales invoice record.
    /// </summary>
    /// <param name="_rebateAgreement">
    /// A <c>PdsRebateAgreement</c> record.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// A <c>CustInvoicetrans</c> record.
    /// </param>
    /// <param name="_rebateQty">
    /// The Rebate quantity.
    /// </param>
    /// <param name="_rebateAmt">
    /// The Rebate amount.
    /// </param>
    /// <returns>
    /// Return the <c>PdsRebateAgreementLine</c> record to create a rebate for.
    /// </returns>
    public static PdsRebateAgreementLine findRebateAgreementLine(
        PdsRebateAgreement      _rebateAgreement,
        CustInvoiceTrans        _custInvoiceTrans,
        SalesQty                _rebateQty,     // In the UOM of the Agreement, so no need to convert
        AmountCur               _rebateAmt = 0  // In Currency of the Agreement, so no need to convert
    )
    {
        PdsRebateAgreementLine  pdsRebateAgreementLine;
        InventDim               inventDim;
        InventDim               salesInventDim = _custInvoiceTrans.inventDim();
        PdsRebateItem           pdsRebateItem;
        TAMPromotionItem        tamPromotionItem;
        TAMMerchandisingEvent   tamMerchandisingEvent;
        Qty                     rebateQty = abs(_rebateQty);
        AmountCur               rebateAmt = abs(_rebateAmt);
        InventDimId             blankInventDim = InventDim::findOrCreateBlank().InventDimId;

        if ((_rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount) ||
            (_rebateAgreement.PDSRebateLineBreakType == PdsRebateLineBreakType::Quantity && rebateQty)
        )
        {
            // Account for the custom item code and ensure that we check the item list.
            if (_rebateAgreement.PdsItemRebateCode == PdsRebateItemCode::Selection)
            {
                if (_rebateAgreement.PdsRebateProgramType == PdsRebateProgramType::BillBack)
                {
                    select firstonly pdsRebateAgreementLine order by RebateValue desc
                        where pdsRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                            && ((_rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity
                                && pdsRebateAgreementLine.RebateFromQty           <= rebateQty
                                && (pdsRebateAgreementLine.RebateToQty            >  rebateQty
                                || !pdsRebateAgreementLine.RebateToQty))
                            || (_rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount
                                && pdsRebateAgreementLine.RebateFromAmount        <= rebateAmt
                                && (pdsRebateAgreementLine.RebateToAmount         >  rebateAmt
                                || !pdsRebateAgreementLine.RebateToAmount)))
                            join RecId from tamMerchandisingEvent
                            where tamMerchandisingEvent.MerchandisingEventID == _rebateAgreement.tamMerchandisingEventID
                        join InventDimID from tamPromotionItem
                            where tamPromotionItem.MerchandisingEventID == tamMerchandisingEvent.MerchandisingEventID
                            && tamPromotionItem.ItemID == _custInvoiceTrans.ItemId
                        #TAMRebateInventDimExistsJoin(tamPromotionItem.InventDimId, inventDim, salesInventDim);
                }
                else
                {
                    select firstonly pdsRebateAgreementLine order by RebateValue desc
                        where pdsRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                            && ((_rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity
                                && pdsRebateAgreementLine.RebateFromQty           <= rebateQty
                                && (pdsRebateAgreementLine.RebateToQty            >  rebateQty
                                || !pdsRebateAgreementLine.RebateToQty))
                            || (_rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount
                                && pdsRebateAgreementLine.RebateFromAmount        <= rebateAmt
                                && (pdsRebateAgreementLine.RebateToAmount         >  rebateAmt
                                || !pdsRebateAgreementLine.RebateToAmount)))
                        join InventDimID from pdsRebateItem
                            where pdsRebateItem.RebateAgreementRefRecId == pdsRebateAgreementLine.RebateAgreementRefRecId
                            && pdsRebateItem.ItemID == _custInvoiceTrans.ItemId
                        #TAMRebateInventDimExistsJoin(pdsRebateItem.InventDimId, inventDim, salesInventDim);
                }
            }
            else
            {
                select firstonly pdsRebateAgreementLine order by RebateValue desc
                    where pdsRebateAgreementLine.RebateAgreementRefRecId  == _rebateAgreement.RecId
                        && ((_rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Quantity
                            && pdsRebateAgreementLine.RebateFromQty           <= rebateQty
                            && (pdsRebateAgreementLine.RebateToQty            >  rebateQty
                            || !pdsRebateAgreementLine.RebateToQty))
                        || (_rebateAgreement.PdsRebateLineBreakType == PdsRebateLineBreakType::Amount
                            && pdsRebateAgreementLine.RebateFromAmount        <= rebateAmt
                            && (pdsRebateAgreementLine.RebateToAmount         >  rebateAmt
                            || !pdsRebateAgreementLine.RebateToAmount)));
            }

            return pdsRebateAgreementLine;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrency</Name>
				<Source><![CDATA[
    private void defaultCurrency()
    {
        this.Currency = this.pdsRebateAgreement().RebateCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRebateUnit</Name>
				<Source><![CDATA[
    private void defaultRebateUnit()
    {
        this.RebateUnit = this.pdsRebateAgreement().PdsRebateUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRebateAmountType</Name>
				<Source><![CDATA[
    private void defaultRebateAmountType()
    {
        if (this.pdsRebateAgreement().PdsRebateLineBreakType == PDSRebateLineBreakType::Quantity)
        {
            this.RebateAmtType = PDSRebateAmtType::AmountPerUnit;
        }
        else if (this.pdsRebateAgreement().PdsRebateLineBreakType == PDSRebateLineBreakType::Amount)
        {
            this.RebateAmtType = PDSRebateAmtType::Percentage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsRebateAgreementLine, Currency):
                this.defaultCurrency();
                break;

            case fieldNum(PdsRebateAgreementLine, RebateUnit):
                this.defaultRebateUnit();
                break;

            case fieldNum(PdsRebateAgreementLine, RebateAmtType):
                this.defaultRebateAmountType();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return  [
                [fieldNum(PdsRebateAgreementLine, Currency), [fieldNum(PdsRebateAgreementLine, RebateAgreementRefRecId)]],
                [fieldNum(PdsRebateAgreementLine, RebateUnit), [fieldNum(PdsRebateAgreementLine, RebateAgreementRefRecId)]],
                [fieldNum(PdsRebateAgreementLine, RebateAmtType), [fieldNum(PdsRebateAgreementLine, RebateAgreementRefRecId)]]
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsRebate</ConfigurationKey>
	<DeveloperDocumentation>@PDS1415</DeveloperDocumentation>
	<FormRef>PdsRebateAgreements</FormRef>
	<Label>@PDS1422</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RebateAgreementRefRecId</TitleField1>
	<TitleField2>LineNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>PdsRebateAgreementIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateAgreementRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateAgreementRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@PDS1400</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAmtType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateToAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateFromAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@PDS1402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventdimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@PDS1401</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@PDS1403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateFromQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateToQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventdimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RebateAgreementRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PdsRebateAgreementRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateAmtType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsRebateAmtType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateFromAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSRebateFromAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateFromQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateFromQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateToAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PDSRebateToAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateToQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateToQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsRebateValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PdsRebateAgreementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RebateAgreementRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnitOfMeasureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RebateUnit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventdimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventdimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PdsRebateAgreement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PdsRebateAgreement</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateAgreementRefRecId</Name>
					<Field>RebateAgreementRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TamMerchandisingEventIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RebateUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateUnit</Name>
					<Field>RebateUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>