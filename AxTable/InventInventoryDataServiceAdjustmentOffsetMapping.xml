<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceAdjustmentOffsetMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class InventInventoryDataServiceAdjustmentOffsetMapping extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>upsertCommerceConfigurations</Name>
				<Source><![CDATA[
    public static void upsertCommerceConfigurations()
    {
        InventInventoryDataServiceAdjustmentOffsetMapping offsetMap;

        ttsbegin;
        offsetMap.InventTransType = InventTransType::Sales;
        offsetMap.StatusIssue = StatusIssue::OnOrder;
        offsetMap.StatusReceipt = StatusReceipt::None;
        offsetMap.Datasource = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;
        offsetMap.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::OnOrderOffset;
        offsetMap.upsert();

        offsetMap.clear();
        offsetMap.InventTransType = InventTransType::Sales;
        offsetMap.StatusIssue = StatusIssue::ReservPhysical;
        offsetMap.StatusReceipt = StatusReceipt::None;
        offsetMap.Datasource = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;
        offsetMap.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::ReservPhysicalOffset;
        offsetMap.upsert();

        offsetMap.clear();
        offsetMap.InventTransType = InventTransType::Sales;
        offsetMap.StatusIssue = StatusIssue::Sold;
        offsetMap.StatusReceipt = StatusReceipt::None;
        offsetMap.Datasource = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;
        offsetMap.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::SoldOffset;
        offsetMap.upsert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceAdjustmentOffsetMapping find(InventTransType _inventTransType, StatusIssue _statusIssue, StatusReceipt _statusReceipt, boolean _update = false)
    {
        InventInventoryDataServiceAdjustmentOffsetMapping offsetMapping;

        offsetMapping.selectForUpdate(_update);

        select firstonly offsetMapping
            where offsetMapping.InventTransType == _inventTransType
                && offsetMapping.StatusIssue == _statusIssue
            	&& offsetMapping.StatusReceipt == _statusReceipt;

        return offsetMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOffsetQueue</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceAdjustmentOffsetMapping findByOffsetQueue(InventInventoryDataServiceAdjustmentOffsetQueue _offsetQueue)
    {
        InventInventoryDataServiceAdjustmentOffsetMapping offsetMapping;
        select firstonly offsetMapping
            where _offsetQueue.InventTransType == offsetMapping.InventTransType
                && _offsetQueue.StatusIssue == offsetMapping.StatusIssue
                && _offsetQueue.StatusReceipt == offsetMapping.StatusReceipt;
        return offsetMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsert</Name>
				<Source><![CDATA[
    private void upsert()
    {
        ttsbegin;
        var offsetMapping = InventInventoryDataServiceAdjustmentOffsetMapping::find(this.InventTransType, this.StatusIssue, this.StatusReceipt, true);

        if (offsetMapping)
        {
            buf2Buf(this, offsetMapping);
            offsetMapping.update();
        }
        else
        {
            this.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>Key</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>Key</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransType</Name>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusIssue</Name>
			<EnumType>StatusIssue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusReceipt</Name>
			<EnumType>StatusReceipt</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Datasource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<StringSize>50</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhysicalMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<StringSize>50</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Key</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatusIssue</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StatusReceipt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>