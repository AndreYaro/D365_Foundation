<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPostMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSPostMethod extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isBaseMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current posting method is a base posting method.
    /// </summary>
    /// <returns>
    /// True if the posting method is a base posting method; otherwise, false.
    /// </returns>
    public boolean isBaseMethod()
    {
        if (!this.RecId)
        {
            throw error (error::wrongUseOfFunction(funcName()));
        }

        return this.checkIfBaseMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfBaseMethod</Name>
				<Source><![CDATA[
    private boolean checkIfBaseMethod()
    {        
        SysDictClass    sysDictClass;

        sysDictClass = new SysDictClass(classNum(WHSPostEngineBase));

        return    sysDictClass
               && sysDictClass.hasObjectMethod(this.PostMethodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        WHSWaveTemplateType origTemplateType;

        origTemplateType = this.orig().WaveTemplateType;

        super();

        if (origTemplateType != this.WaveTemplateType)
        {
            WHSWaveTemplateTable::validateAndUpdateAllTemplatesValidValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>WHSPostMethod</c> record exists.
	/// </summary>
	/// <param name="_postMethodName">
	/// Method name of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    static boolean exist(WHSPostMethodName _postMethodName)
    {
        return _postMethodName && (select firstOnly RecId from WHSPostMethod
                 where WHSPostMethod.PostMethodName == _postMethodName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSPostMethod</c> with given parameters.
	/// </summary>
	/// <param name="_postMethodPos">
	/// The method call position of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSPostMethod find(WHSPostMethodPos _postMethodPos, boolean  _forupdate = false)
    {
        WHSPostMethod postMethod;

        if (_postMethodPos)
        {
            postMethod.selectForUpdate(_forupdate);

            select firstonly postMethod
                where postMethod.PostMethodPos == _postMethodPos;
        }

        return postMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByMethodName</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSPostMethod</c> by method name.
	/// </summary>
	/// <param name="_name">
	/// Method name of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSPostMethod findByMethodName(WHSPostMethodName _name, boolean _forupdate = false)
    {
        WHSPostMethod    postMethod;

        if (_name)
        {
            postMethod.selectForUpdate(_forupdate);

            select firstonly postMethod
                where postMethod.PostMethodName == _name;
        }

        return postMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSPostMethod</c> record by id.
	/// </summary>
	/// <param name="_recId">
	/// Id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSPostMethod findByRecId(RecId  _recId, boolean _forupdate = false)
    {
        WHSPostMethod    postMethod;

        if (_recId)
        {
            postMethod.selectForUpdate(_forupdate);

            select firstonly postMethod
                where postMethod.RecId == _recId;
        }

        return postMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMethodIsDefined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the method name specified is valid.
    /// For that, it needs to either be a value on the corresponding Base Enum (<c>WHSPostMethodsBase</c>, <c>WHSPostMethodBaseProd</c>, <c>WHSPostMethodBaseKanban</c>),
    /// or an object method on <c>WHSPostEngineCustom</c> class.
    /// </summary>
    /// <returns>True, if the method is defined in metadata; otherwise, false.</returns>
    public boolean validateMethodIsDefined()
    {
        const int EnumValueNotFound = 255;

        if (!(this.WaveTemplateType == WHSWaveTemplateType::Shipping && SysDictEnum::newName(enumStr(WHSPostMethodsBase)).symbol2Value(this.PostMethodName) != EnumValueNotFound)
            && !(this.WaveTemplateType == WHSWaveTemplateType::Production && SysDictEnum::newName(enumStr(WHSPostMethodBaseProd)).symbol2Value(this.PostMethodName) != EnumValueNotFound)
            && !(this.WaveTemplateType == WHSWaveTemplateType::Kanban && SysDictEnum::newName(enumStr(WHSPostMethodBaseKanban)).symbol2Value(this.PostMethodName) != EnumValueNotFound)
            && !WHSCustomWaveStepMethod::newFromName(this.PostMethodName))
        {
            return checkFailed(strFmt("@WAX:Error_MethodNotDefinedOnPostEngineEnumOrClass", this.PostMethodName));
        }

        if (!WHSPostMethod::canEnableMethod(this.PostMethodName))
        {
            return checkFailed(strFmt("@WAX:Error_MethodNotDefinedOnPostEngineEnumOrClass", this.PostMethodName));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOptionalMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current posting method is optional.
    /// </summary>
    /// <returns>True, if the method is optional; otherwise, false.</returns>
    public boolean isOptionalMethod()
    {
        return WHSWaveStepMethodFactory::newMethodFromName(this.PostMethodName).isOptional();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the value of the specified field.
    /// </summary>
    /// <param name = "_fieldName">Name of the field to validate.</param>
    /// <param name = "_arrayIndex">Index of the field in case of array fields.</param>
    /// <returns>True, if validation succeeds; otherwise, false.</returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSPostMethod, WaveTemplateType):
                // In an update scenario, we should not be able to modify the Wave template type for 'base' methods.
                if (this.orig().RecId != 0 && this.orig().WaveTemplateType != this.WaveTemplateType && this.isBaseMethod())
                {
                    return checkFailed("@WAX:Error_WavePostMethodTemplateTypeCantBeChangedForBaseMethods");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTaskBasedProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current post method can be run in asynchronously
    /// </summary>
    /// <returns>
    /// true, if the method can be run asynchronously; otherwise, false.
    /// </returns>
    public boolean canUseTaskBasedProcessing()
    {
        WHSWaveStepMethod waveStepMethod = WHSWaveStepMethodFactory::newMethodFromName(this.PostMethodName);
        if (waveStepMethod)
        {
            return waveStepMethod.canUseTaskBasedProcessing();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMehodDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the display name of the method.
    /// </summary>
    /// <returns>
    /// The display name of the method.
    /// </returns>
    public display Name postMehodDisplayName()
    {
        WHSWaveStepMethod waveStepMethod = WHSWaveStepMethodFactory::newMethodFromName(this.PostMethodName);
        if (waveStepMethod)
        {
            return waveStepMethod.displayName();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a method can be enabled.
    /// </summary>
    /// <param name = "_postMethodName">
    /// A method name.
    /// </param>
    /// <returns>
    /// true if the method can be enabled; otherwise, false.
    /// </returns>
    public static boolean canEnableMethod(WHSPostMethodName _postMethodName)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4411</DeveloperDocumentation>
	<Label>@WAX438</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PostMethodPos</TitleField1>
	<TitleField2>PostMethodName</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PostMethodPosIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>PostMethodPosIdx</PrimaryIndex>
	<ReplacementKey>PostMethodPosIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostMethodPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveTemplateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OptionalMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepeatableStep</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostMethodPos</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostMethodPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveTemplateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OptionalMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RepeatableStep</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OptionalMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOptionalMethod</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostMethodName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPostMethodName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PostMethodPos</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPostMethodPos</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RepeatableStep</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@WAX5445</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WaveTemplateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWaveTemplateType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PostMethodPosIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PostMethodPos</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostMethodNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PostMethodName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>