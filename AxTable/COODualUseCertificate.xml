<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>COODualUseCertificate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class COODualUseCertificate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateCerts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if item has a valid dual use certificate for shipping to specific country.
    /// </summary>
    /// <param name="_itemId">
    ///    The item id need to verify.
    /// </param>
    /// <param name="_shippingDate">
    ///   The shipping date need to check whether is in the valid time range date for certification.
    /// </param>
    /// <param name="_country">
    ///    The value of country region id.
    /// </param>
    /// <returns>
    ///    Boolean true if verification is successful; else false.
    /// </returns>
    [Hookable(false)]
    internal static boolean validateCerts(ItemId _itemId, date _shippingDate, LogisticsAddressCountryRegionId _country)
    {
        COODualUseCertificate dualUseCertificate;

        select firstonly dualUseCertificate
            where dualUseCertificate.ItemId == _itemId
                && dualUseCertificate.CountryId == _country
                && dualUseCertificate.ValidFrom <= _shippingDate
                && dualUseCertificate.ValidTo > _shippingDate;

        return dualUseCertificate.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the specified record in the <c>COODualUseCertificate</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>COODualUseCertificate</c> table; otherwise, an empty buffer.
    /// </returns>
    public static COODualUseCertificate find(RecId _recId, boolean _forUpdate = false)
    {
        COODualUseCertificate dualUseCertificate;

        if (_recId)
        {
            dualUseCertificate.selectForUpdate(_forUpdate);

            select firstonly dualUseCertificate
                where dualUseCertificate.RecId  == _recId;
        }

        return dualUseCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>COODualUseCertificate</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (COODualUseCertificate::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>certificateReportStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns certificates to print in a report.
    /// </summary>
    /// <param name="_itemId">
    ///    The item id need to find related certificates.
    /// </param>
    /// <param name="_shippingDate">
    ///   The shipping date need to check whether is in the valid time range date for certification.
    /// </param>
    /// <param name="_country">
    ///    The value of country region id.
    /// </param>
    /// <param name="_printOnDocument">
    ///    The document on which the certificate will be printed
    /// </param>
    /// <returns>
    ///    Returns formatted string contains certificates.
    /// </returns>
    public static str certificateReportStr(ItemId _itemId, date _shippingDate, LogisticsAddressCountryRegionId _country, COOPrintOnDocumentType _printOnDocument)
    {
        str ret;
        container certificates;
        COODualUseCertificate dualUseCertificate;

        if(COODualUseCountry::isDualUseCertRequired(_country) &&
           InventTable::find(_itemId).COODualUseProduct)
        {
            while select dualUseCertificate
            where dualUseCertificate.ItemId == _itemId
                && dualUseCertificate.CountryId == _country
                && dualUseCertificate.ValidFrom <= _shippingDate
                && dualUseCertificate.ValidTo > _shippingDate
                && ((dualUseCertificate.PrintOnInvoice && _printOnDocument == COOPrintOnDocumentType::Invoice)
                    || (dualUseCertificate.PrintOnPackingSlip && _printOnDocument == COOPrintOnDocumentType::PackingSlip)
                    || (dualUseCertificate.PrintOnSO && _printOnDocument == COOPrintOnDocumentType::SalesOrder))
            {
                certificates += dualUseCertificate.CertificateNumber;
            }

            if (certificates)
            {
                ret = strFmt("@SCM:Certificate", con2Str(certificates));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>COOCertification</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DualUseCertificates</DeveloperDocumentation>
	<FormRef>COODualUseCerts</FormRef>
	<Label>@SCM:DualUseCertificates</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>CertificateNumber</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ItemCertificateIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintOnSO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintOnPackingSlip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintOnInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCertificationNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SCM:CertNo</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintOnSO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SCM:PrintOnSO</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintOnPackingSlip</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SCM:PrintOnPackingSlip</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintOnInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SCM:PringOnInvoice</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemCertificateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CertificateNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CountryId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>