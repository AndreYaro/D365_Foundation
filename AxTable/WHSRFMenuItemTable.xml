<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFMenuItemTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSRFMenuItemTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCanUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record can be updated.
    /// </summary>
    /// <returns>true if the record can be updated; Otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal boolean checkCanUpdate()
    {
        //this is used as an extension point for the scaleunit validation
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleDefaultData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>DefaultData</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleDefaultData()
    {
        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LoadItemReceiving:
            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
            case WHSWorkCreationProcess::Movement:
            case WHSWorkCreationProcess::MovementByTemplate:
            case WHSWorkCreationProcess::TransferOrderItemReceiving:
            case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::TransferOrderLineReceiving:
            case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LicensePlateLoading:
            case WHSWorkCreationProcess::AdjustmentIn:
            case WHSWorkCreationProcess::Quarantine:
            case WHSWorkCreationProcess::ReturnOrder:
            case WHSWorkCreationProcess::ReturnOrderAndLocate:
            case WHSWorkCreationProcess::WarehouseTransfer:
                return this.isFieldVisibleWorkCreationProcess();

            case WHSWorkCreationProcess::LicensePlateReceiving:
            case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                return this.isFieldVisibleWorkCreationProcess();

            case WHSWorkCreationProcess::AdjustmentOut:
                if (WHSProcessGuideAdjustOutDefaultDataFlight::instance().isEnabled())
                {
                    return this.ProcessGuideUseFramework && this.isFieldVisibleWorkCreationProcess();
                }
                else
                {
                    return false;
                }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleShowWorkLineList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>ShowWorkLineList</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldVisibleShowWorkLineList()
    {
        return this.isFieldVisibleMenuItemDirectedBy()
            && (this.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserDirected
                || this.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnabledWorkLineListQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if field list is enabled for work line list.
    /// </summary>
    /// <returns>true if the field list is enabled; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldEnabledWorkLineListQuery()
    {
        return this.isFieldVisibleShowWorkLineList() && this.ShowWorkLineList != WHSShowWorkLineList::NeverShow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleShowDisposition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>ShowDisposition</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleShowDisposition()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::LicensePlateReceiving:
                case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
                case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::LoadItemReceiving:
                case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
                case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::ReturnItemReceiving:
                case WHSWorkCreationProcess::ReportAsFinished:
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                    return true;
                case WHSWorkCreationProcess::MixedLPReceiving:
                case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                    if (this.MixedLPReceivingMode == WHSMixedLPReceivingMode::ReturnOrderReceiving)
                    {
                        return false;
                    }
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleWorkTemplateCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>WorkTemplateCode</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleWorkTemplateCode()
    {
        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LoadItemReceiving:
            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
            case WHSWorkCreationProcess::MovementByTemplate:
            case WHSWorkCreationProcess::TransferOrderItemReceiving:
            case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::TransferOrderLineReceiving:
            case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::ReportAsFinished:
            case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
            case WHSWorkCreationProcess::ReportAsFinishedBySerial:
            case WHSWorkCreationProcess::KanbanPut:
            case WHSWorkCreationProcess::KanbanPutAndLocate:
                return this.isFieldVisibleWorkCreationProcess();

            case WHSWorkCreationProcess::MixedLPReceiving:
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleBlockReceivingASNItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>BlockReceivingASNItem</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleBlockReceivingASNItem()
    {
        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LoadItemReceiving:
            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
            case WHSWorkCreationProcess::MixedLPReceiving:
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleReceivingSummaryPageDisplayRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>ReceivingSummaryPageDisplayRule</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>    
    public boolean isFieldVisibleReceivingSummaryPageDisplayRule()
    {
        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::LicensePlateReceiving:
            case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisiblePrintLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>PrintLabel</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisiblePrintLabel()
    {
        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LoadItemReceiving:
            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
            case WHSWorkCreationProcess::TransferOrderItemReceiving:
            case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::TransferOrderLineReceiving:
            case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LicensePlateReceiving:
            case WHSWorkCreationProcess::ReportAsFinished:
            case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
            case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
            case WHSWorkCreationProcess::ReportAsFinishedBySerial:
            case WHSWorkCreationProcess::KanbanPut:
            case WHSWorkCreationProcess::KanbanPutAndLocate:
                return this.isFieldVisibleWorkCreationProcess();
            case WHSWorkCreationProcess::MixedLPReceiving:
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
            case WHSWorkCreationProcess::ReturnOrder:
            case WHSWorkCreationProcess::ReturnOrderAndLocate:
            case WHSWorkCreationProcess::ReturnItemReceiving:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleDisplayContainerTypeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>DisplayContainerTypeCode</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleDisplayContainerTypeCode()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
                case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
                case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::LoadItemReceiving:
                case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderItemReceiving:
                case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderLineReceiving:
                case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::ReportAsFinished:
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                case WHSWorkCreationProcess::ReportAsFinishedBySerial:
                case WHSWorkCreationProcess::KanbanPut:
                case WHSWorkCreationProcess::KanbanPutAndLocate:
                case WHSWorkCreationProcess::LicensePlateReceiving:
                case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                case WHSWorkCreationProcess::ReturnOrder:
                case WHSWorkCreationProcess::ReturnOrderAndLocate:
                case WHSWorkCreationProcess::AdjustmentIn:
                case WHSWorkCreationProcess::WarehouseTransfer:
                case WHSWorkCreationProcess::Movement:
                    return true;
            }
        }

        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::MixedLPReceiving:
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleWorkCreationProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>WorkCreationProcess</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleWorkCreationProcess()
    {
        if (this.MenuItemMode == WHSMenuItemMode::Work && !this.UseExistingWork)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleMenuItemDirectedBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>MenuItemDirectedBy</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleMenuItemDirectedBy()
    {
        if (this.MenuItemMode == WHSMenuItemMode::Work && this.UseExistingWork)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleUnitization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>Unitization</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleUnitization()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
                case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
                case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::LoadItemReceiving:
                case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderItemReceiving:
                case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderLineReceiving:
                case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleDeferredPutProcessingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>IgnoreDeferredPut</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>    
    public boolean isFieldVisibleDeferredPutProcessingPolicy()
    {
        boolean isFieldVisible = this.isFieldVisibleMenuItemDirectedBy();

        isFieldVisible = isFieldVisible || this.WorkCreationProcess == WHSWorkCreationProcess::Movement;

        return isFieldVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleLocDirHintCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>LocDirHintCode</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleLocDirHintCode()
    {
        if (this.isFieldVisibleWorkCreationProcess() &&
            this.WorkCreationProcess == WHSWorkCreationProcess::MovementByTemplate)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleScheduleMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>ScheduleMovement</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleScheduleMovement()
    {
        if (this.isFieldVisibleWorkCreationProcess() &&
            this.WorkCreationProcess == WHSWorkCreationProcess::MovementByTemplate)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisiblePickPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>PickPack</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisiblePickPack()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::SystemDirected:
                case WHSMenuItemDirectedBy::UserDirected:
                case WHSMenuItemDirectedBy::None:
                    return !this.handleByLicensePlateActive();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleRFSysGroupField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>RFSysGroupField</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleRFSysGroupField()
    {        
        if (this.IsWorkListGroupingFilterDisplayed)
        {
            return true;
        }

        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::SystemGrouping:
                case WHSMenuItemDirectedBy::ValidatedUserDirected:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleHandleByLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>HandleByLP</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleHandleByLP()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::SystemDirected:
                    return true;
                case WHSMenuItemDirectedBy::UserDirected:
                case WHSMenuItemDirectedBy::None:
                    return this.isUserDirectedMenuItem();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleWorkClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>WorkClass</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleWorkClass()
    {
        if (this.MenuItemMode == WHSMenuItemMode::Indirect &&
            this.WorkActivity == WHSWorkActivity::WorkList)
        {
            return true;
        }

        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            return !this.handleByLicensePlateActive();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnabledWorkListQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>EditQuery</c> button is enabled.
    /// </summary>
    /// <returns>true if the button is enabled; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldEnabledWorkListQuery()
    {
        if (this.MenuItemMode == WHSMenuItemMode::Indirect &&
            (this.WorkActivity == WHSWorkActivity::WorkList ||
             this.WorkActivity == WHSWorkActivity::ReprintMultipleCartonLabels))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnabledWorkAutoConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AutoConfirm</c> button is enabled.
    /// </summary>
    /// <returns>true if the button is enabled; otherwise, false.</returns>    
    public boolean isFieldEnabledWorkAutoConfirm()
    {
        if (this.WorkCreationProcess == WHSWorkCreationProcess::MixedLPReceiving ||
            this.WorkActivity == WHSWorkActivity::CreateTransferOrderFromLP ||
            this.WorkActivity == WHSWorkActivity::Packing ||
            this.WorkActivity == WHSWorkActivity::ContainerClosing ||
            this.WorkActivity == WHSWorkActivity::ContainerCreation ||
            this.WorkActivity == WHSWorkActivity::ContainerDeletion ||
            this.WorkActivity == WHSWorkActivity::PrintContainerLabel ||
            this.WorkActivity == WHSWorkActivity::GenericDataInquiry ||
            this.WorkActivity == WHSWorkActivity::ReceivingCompletedConfirmation ||
            (this.MenuItemMode == WHSMenuItemMode::Work &&
             this.UseExistingWork &&
             this.handleByLicensePlateActive()))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnabledUseExistingWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>UseExistingWork</c> field is enabled.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldEnabledUseExistingWork()
    {
        if (this.MenuItemMode == WHSMenuItemMode::Work)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisiblePickOldestBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>PickOldestBatch</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisiblePickOldestBatch()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            return !this.handleByLicensePlateActive();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAreOlderBatchesWithinWarehouseDisplayed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>PickOldestBatchEntireWarehouse</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    public boolean isFieldVisibleAreOlderBatchesWithinWarehouseDisplayed()
    {
        if (this.isFieldVisibleMenuItemDirectedBy()
        &&  !this.handleByLicensePlateActive()
        &&  this.PickOldestBatch == WHSPickOldestBatch::Warn)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleOverrideTargetLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>OverrideTargetLP</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleOverrideTargetLP()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            return !this.handleByLicensePlateActive();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAllowShippingOverpick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AllowShippingOverpick</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAllowShippingOverpick()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            return !this.handleByLicensePlateActive();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAllowedShipConfirmationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AllowedShipConfirmationType</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAllowedShipConfirmationType()
    {
        switch (this.MenuItemDirectedBy)
        {
            case WHSMenuItemDirectedBy::TransportLoading:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleConfirmCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>ConfirmCancel</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleConfirmCancel()
    {
        if (this.isFieldVisibleWorkCreationProcess() &&
            this.WorkCreationProcess == WHSWorkCreationProcess::Movement)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleCycleCountFirstPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>CycleCountFirstPass</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleCycleCountFirstPass()
    {
        if (this.isFieldVisibleWorkCreationProcess() &&
            this.WorkCreationProcess == WHSWorkCreationProcess::SpotCycleCounting)
        {
            return true;
        }

        if (this.isFieldVisibleMenuItemDirectedBy())
        { 
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::CycleCountGrouping:
                    return true;
                case WHSMenuItemDirectedBy::SystemDirected:
                case WHSMenuItemDirectedBy::UserDirected:
                case WHSMenuItemDirectedBy::None:
                    return !this.handleByLicensePlateActive();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAllowEndJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AllowEndJob</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAllowEndJob()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                case WHSWorkCreationProcess::ReportAsFinished:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleClusterProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>ClusterProfileId</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleClusterProfileId()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::ClusterPicking:
                case WHSMenuItemDirectedBy::SystemDirectedClusterPicking:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAnchor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>Anchor</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAnchor()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::CycleCountGrouping:
                    return false;
                default:
                    return !this.handleByLicensePlateActive();
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAllowFullSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AllowFullSplit</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAllowFullSplit()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::CycleCountGrouping:
                    return false;
                default:
                    return !this.handleByLicensePlateActive();
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleWorkerKeepsOrigWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>WorkerKeepsOrigWork</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleWorkerKeepsOrigWork()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::CycleCountGrouping:
                    return false;
                default:
                    return !this.handleByLicensePlateActive();
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleRFDisplayPickSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>RFDisplayPickSummary</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleRFDisplayPickSummary()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::CycleCountGrouping:
                    return false;
                default:
                    return !this.handleByLicensePlateActive();
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleDisableCycleCountThreshold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>DisableCycleCountThreshold</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleDisableCycleCountThreshold()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::CycleCountGrouping:
                    return false;
                default:
                    return !this.handleByLicensePlateActive();
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAnchorBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AnchorBy</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAnchorBy()
    {
        if (this.Anchor &&
            this.isFieldVisibleAnchor())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleRFDisplayStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>RFDisplayStatus</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleRFDisplayStatus()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::AdjustmentIn:
                case WHSWorkCreationProcess::AdjustmentOut:
                case WHSWorkCreationProcess::ReturnOrderAndLocate:
                case WHSWorkCreationProcess::Movement:
                case WHSWorkCreationProcess::SpotCycleCounting:
                case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                case WHSWorkCreationProcess::MovementByTemplate:
                case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                    return true;
            }
        }

        if (this.isFieldVisibleAnchor())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleWorkAuditTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>WorkAuditTemplateId</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleWorkAuditTemplateId()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                case WHSWorkCreationProcess::MovementByTemplate:
                case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                    return true;
            }
        }

        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                return true;
        }

        if (this.isFieldVisibleAnchor())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAllowLicensePlatePutOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AllowLicensePlatePutOverride</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAllowLicensePlatePutOverride()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::MovementByTemplate:
                case WHSWorkCreationProcess::ReturnOrderAndLocate:
                case WHSWorkCreationProcess::KanbanPutAndLocate:
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                    return true;
            }
        }

        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                return true;
        }

        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            return !this.handleByLicensePlateActive();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleMixedLPRegistering</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>MixedLPRegistering</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleMixedLPRegistering()
    {
        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::MixedLPReceiving:
            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleGroupPutaway</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>GroupPutaway</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleGroupPutaway()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::SystemGrouping:
                case WHSMenuItemDirectedBy::SystemDirected:
                case WHSMenuItemDirectedBy::UserGrouping:
                case WHSMenuItemDirectedBy::UserDirected:
                    case WHSMenuItemDirectedBy::None:
                    return !this.handleByLicensePlateActive();
            }
        }

        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
            case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                return this.isFieldVisibleWorkCreationProcess();

            case WHSWorkCreationProcess::MixedLPReceivingAndLocate:
                return true;

            case WHSWorkCreationProcess::MovementByTemplate:
                if (WHSFullLPMovementByTemplateFlight::instance().isEnabled())
                {
                    return true;
                }
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleGenerateLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>GenerateLP</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleGenerateLP()
    {
        if (this.isFieldVisibleMenuItemDirectedBy() && 
            this.MenuItemDirectedBy != WHSMenuItemDirectedBy::CycleCountGrouping)
        {
            return true;
        }

        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
                case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
                case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::LoadItemReceiving:
                case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderItemReceiving:
                case WHSWorkCreationProcess::TransferOrderItemReceivingAndLocate:
                case WHSWorkCreationProcess::TransferOrderLineReceiving:
                case WHSWorkCreationProcess::TransferOrderLineReceivingAndLocate:
                case WHSWorkCreationProcess::ReportAsFinished:
                case WHSWorkCreationProcess::ReportAsFinishedBySerial:
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:          
                case WHSWorkCreationProcess::KanbanPut:         
                case WHSWorkCreationProcess::KanbanPutAndLocate:
                case WHSWorkCreationProcess::AdjustmentIn:                
                case WHSWorkCreationProcess::LicensePlateLoading:
                case WHSWorkCreationProcess::Movement:               
                case WHSWorkCreationProcess::MovementByTemplate:
                case WHSWorkCreationProcess::LicensePlateReceivingAndLocate:
                case WHSWorkCreationProcess::ReturnOrder:
                case WHSWorkCreationProcess::ReturnOrderAndLocate:
                case WHSWorkCreationProcess::ReturnItemReceiving:
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAdjustmentTypeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AdjustmentTypeCode</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public boolean isFieldVisibleAdjustmentTypeCode()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::AdjustmentIn:
                case WHSWorkCreationProcess::AdjustmentOut:
                case WHSWorkCreationProcess::LicensePlateLoading:
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleCountingReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the counting reason code field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleCountingReasonCode()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::AdjustmentIn:
                case WHSWorkCreationProcess::AdjustmentOut:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleDisplayCountingReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the display counting reason code field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleDisplayCountingReasonCode()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::AdjustmentIn:
                case WHSWorkCreationProcess::AdjustmentOut:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleEditCountingReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the edit counting reason code field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleEditCountingReasonCode()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::AdjustmentIn:
                case WHSWorkCreationProcess::AdjustmentOut:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleFullLPMovementPolicy</Name>
				<Source><![CDATA[
    internal boolean isFieldVisibleFullLPMovementPolicy()
    {
        return (WHSFullLPMovementPolicyFlight::instance().isEnabled() && this.WorkCreationProcess == WHSWorkCreationProcess::Movement)
            || (WHSFullLPMovementByTemplateFlight::instance().isEnabled() && this.WorkCreationProcess == WHSWorkCreationProcess::MovementByTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleCountingReasonCodeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the display counting reason code group field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>    
    public boolean isFieldVisibleCountingReasonCodeGroup()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::AdjustmentIn:
                case WHSWorkCreationProcess::AdjustmentOut:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAllowLocationOverflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the allow location overflow field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleAllowLocationOverflow()
    {
        return this.WorkCreationProcess == WHSWorkCreationProcess::AdjustmentIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleLicensePlateConsolidationCancelRemainingOriginWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cancel remaining origin work lines field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleLicensePlateConsolidationCancelRemainingOriginWorkLines()
    {
        return this.MenuItemMode == WHSMenuItemMode::Indirect
            && this.WorkActivity == WHSWorkActivity::ConsolidateLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleWillContainerRemovalCancelRelatedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cancel related work when removing container from group field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleWillContainerRemovalCancelRelatedWork()
    {
        return this.MenuItemMode == WHSMenuItemMode::Indirect
            && this.WorkActivity == WHSWorkActivity::RemoveContainerFromGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleCancelReplenishmentWorkWithDependentWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cancel replenishment work with dependent work field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleCancelReplenishmentWorkWithDependentWork()
    {
        return this.MenuItemMode == WHSMenuItemMode::Indirect
            && this.WorkActivity == WHSWorkActivity::CancelWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleIsWorkListGroupingFilterDisplayed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the display work list grouping filter field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleIsWorkListGroupingFilterDisplayed()
    {
        return this.isWorkList() || this.isMultipleLabelReprint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleShowFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the allow users to filter by work transaction type field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleShowFilter()
    {
        return this.isWorkList() || this.isMultipleLabelReprint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkList</Name>
				<Source><![CDATA[
    private boolean isWorkList()
    {
        return this.MenuItemMode == WHSMenuItemMode::Indirect
            && this.WorkActivity == WHSWorkActivity::WorkList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultipleLabelReprint</Name>
				<Source><![CDATA[
    private boolean isMultipleLabelReprint()
    {
        return this.WorkActivity == WHSWorkActivity::ReprintMultipleCartonLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleCreateTransferOrderFromLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the create transfer order from license plate policies should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleCreateTransferOrderFromLP()
    {
        return this.MenuItemMode == WHSMenuItemMode::Indirect
            && this.WorkActivity == WHSWorkActivity::CreateTransferOrderFromLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippingOverpickEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if overpicking is allowed for a given menu item, work line, and user.
    /// </summary>
    /// <param name="_userId">
    /// The user Id of the worker using the RF menu item.
    /// </param>
    /// <param name ="_workLine">
    /// The work line that is being over picked.
    /// </param>
    /// <param name="_workTransType">
    /// The transaction type for the work line using the menu item.
    /// </param>
    /// <returns>
    /// true if overpicking is allowed, otherwise false.
    /// </returns>
    public boolean shippingOverpickEnabled(
        WHSUserId        _userId,
        WHSWorkLine      _workLine,
        WHSWorkTransType _workTransType)
    {
        if (!this.AllowShippingOverpick)
        {
            return false;
        }

        WHSWorkUser workUser = WHSWorkUser::find(_userId);

        return workUser.allowOverpick(_workTransType)
            && !WHSWorkLine::isPutBefore(_workLine.WorkId, _workLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSRFMenuLine       menuLine;
        WHSMenuItemName     menuItemName;

        menuItemName = this.MenuItemName;

        super();

        delete_from menuLine
            where menuLine.MenuItemName == menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidWorkTemplateCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if the selected work template code is matching the selected work creation process value.
    /// </summary>
    /// <returns>
    /// true if the values are matched; otherwise, false.
    /// </returns>
    protected boolean isValidWorkTemplateCode()
    {
        SetEnumerator   workTransTypeEnumerator;
        Set             validWorkTransTypeForWorkCreationProcess;

        // Selected work template code has to belong to one of valid work order types.
        validWorkTransTypeForWorkCreationProcess = WHSWorkTemplateTable::getValidWorkTransTypesForCreationProcess(this.WorkCreationProcess);
        workTransTypeEnumerator = validWorkTransTypeForWorkCreationProcess.getEnumerator();
        while (workTransTypeEnumerator.moveNext())
        {
            if (WHSWorkTemplateTable::find(this.WorkTemplateCode, workTransTypeEnumerator.current()))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorkTemplateCodeByWorkTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the work template codes so that only those that have work order type matching the work creation process value are displayed.
    /// </summary>
    /// <param name="_formControl">
    /// The FormControl object from the calling form.
    /// </param>
    public void lookupWorkTemplateCodeByWorkTransType(FormControl _formControl)
    {
        QueryBuildRange         queryBuildRangeWorkTransType;

        Set validWorkTransTypes = WHSWorkTemplateTable::getValidWorkTransTypesForCreationProcess(this.WorkCreationProcess);
        SetEnumerator workTransTypesEnumerator = validWorkTransTypes.getEnumerator();

        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(WHSWorkTemplateTable), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(WHSWorkTemplateTable));

        while (workTransTypesEnumerator.moveNext())
        {
            queryBuildRangeWorkTransType = queryBuildDataSource.addRange(fieldNum(WHSWorkTemplateTable, WorkTransType));
            queryBuildRangeWorkTransType.value(queryValue(workTransTypesEnumerator.current()));
        }

        sysTableLookup.addLookupfield(fieldNum(WHSWorkTemplateTable, WorkTemplateCode));
        sysTableLookup.addLookupfield(fieldNum(WHSWorkTemplateTable, WorkTemplateDesc));
        sysTableLookup.addLookupfield(fieldNum(WHSWorkTemplateTable, WorkTransType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(WHSRFMenuItemTable, GroupPutaway),
                [fieldnum(WHSRFMenuItemTable, MenuItemDirectedBy)]],
            [fieldnum(WHSRFMenuItemTable, RFSysGroupFieldNum),
                [fieldnum(WHSRFMenuItemTable, RFSysGroupField)]],
            [fieldnum(WHSRFMenuItemTable, WorkListQuery),
                [fieldnum(WHSRFMenuItemTable, WorkActivity)]],
            [fieldnum(WHSRFMenuItemTable, CartonGroupQuery),
                [fieldnum(WHSRFMenuItemTable, WorkActivity)]],
            [fieldNum(WHSRFMenuItemTable, AreOlderBatchesWithinWarehouseDisplayed),
				[fieldNum(WHSRFMenuItemTable, PickOldestBatch)]],
            [fieldNum(WHSRFMenuItemTable, EditCountingReasonCode),
                [fieldNum(WHSRFMenuItemTable, DisplayCountingReasonCode)]],
            [fieldnum(WHSRFMenuItemTable, DataInquiryQuery),
                [fieldnum(WHSRFMenuItemTable, WorkActivity), fieldNum(WHSRFMenuItemTable, DataInquiryQueryTableName)]],
            [fieldnum(WHSRFMenuItemTable, DataInquiryFieldList),
                [fieldnum(WHSRFMenuItemTable, WorkActivity), fieldNum(WHSRFMenuItemTable, DataInquiryQueryTableName)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(WHSRFMenuItemTable, GroupPutaway):
                this.defaultGroupPutaway();
                break;
            case fieldnum(WHSRFMenuItemTable, RFSysGroupFieldNum):
                this.defaultRFSysGroupFieldNum();
                break;
            case fieldNum(WHSRFMenuItemTable, WorkListQuery):
                this.defaultWorkListQuery();
                break;
            case fieldNum(WHSRFMenuItemTable, AreOlderBatchesWithinWarehouseDisplayed):
                this.defaultPickOldestBatchEntireWarehouse();
                break;
            case fieldNum(WHSRFMenuItemTable, EditCountingReasonCode):
                this.defaultEditCountingReasonCode();
                break;
            case fieldNum(WHSRFMenuItemTable, CartonGroupQuery):
                this.defaultCartonGroupQuery();
                break;
            case fieldNum(WHSRFMenuItemTable, DataInquiryQuery):
                this.defaultDataInquiryQuery();
                break;    
            case fieldNum(WHSRFMenuItemTable, DataInquiryFieldList):
                this.defaultDataInquiryFieldList();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDataInquiryFieldList</Name>
				<Source><![CDATA[
    private void defaultDataInquiryFieldList()
    {
        if (this.WorkActivity == WHSWorkActivity::GenericDataInquiry
            && this.DataInquiryQueryTableName
            && this.orig().DataInquiryQueryTableName != this.DataInquiryQueryTableName)
        {
            this.DataInquiryFieldList = conNull();
        }
        else if (this.DataInquiryFieldList
            && (this.WorkActivity != WHSWorkActivity::GenericDataInquiry
                || !this.DataInquiryQueryTableName))
        {
            this.DataInquiryFieldList = conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDataInquiryQuery</Name>
				<Source><![CDATA[
    internal void defaultDataInquiryQuery()
    {
        if (this.WorkActivity == WHSWorkActivity::GenericDataInquiry
            && this.DataInquiryQueryTableName)
        {
            if (!this.DataInquiryQuery || this.orig().DataInquiryQueryTableName != this.DataInquiryQueryTableName)
            {
                QueryRun queryRun = this.defaultDataInquiryQueryRun();
                if (queryRun)
                {
                    this.DataInquiryQuery = queryRun.pack();
                }
            }
        }
        else if (this.DataInquiryQuery
            && (this.WorkActivity != WHSWorkActivity::GenericDataInquiry
                || !this.DataInquiryQueryTableName))
        {
            this.DataInquiryQuery = conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDataInquiryQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default generic data inquiry query run.
    /// </summary>
    /// <returns>The default work list query run.</returns>
    internal protected QueryRun defaultDataInquiryQueryRun()
    {
        if (this.DataInquiryQueryTableName)
        {
            Query q = new Query();
            q.addDataSource(tableName2Id(this.DataInquiryQueryTableName));

            return new QueryRun(q);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEditCountingReasonCode</Name>
				<Source><![CDATA[
    private void defaultEditCountingReasonCode()
    {
        if (this.isFieldSet(fieldNum(WHSRFMenuItemTable, DisplayCountingReasonCode))
            && this.DisplayCountingReasonCode != WHSDisplayCountingReasonCode::Line)
        {
            this.EditCountingReasonCode = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultGroupPutaway</Name>
				<Source><![CDATA[
    private void defaultGroupPutaway()
    {
        if (this.MenuItemDirectedBy != WHSMenuItemDirectedBy::SystemGrouping
            && this.MenuItemDirectedBy != WHSMenuItemDirectedBy::UserGrouping)
        {
            this.GroupPutaway = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRFSysGroupFieldNum</Name>
				<Source><![CDATA[
    private void defaultRFSysGroupFieldNum()
    {
        this.RFSysGroupFieldNum = fieldName2Id(tableNum(WHSWorkTable), this.RFSysGroupField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorkListQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default work list query run.
    /// </summary>
    /// <returns>The default work list query run.</returns>
    [Hookable(false)]
    internal QueryRun defaultWorkListQueryRun()
    {
        if (this.WorkActivity == WHSWorkActivity::WorkList)
        {
            return new QueryRun(queryStr(WHSWorkList));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorkListQuery</Name>
				<Source><![CDATA[
    internal void defaultWorkListQuery()
    {
        if (this.WorkActivity == WHSWorkActivity::WorkList &&
            !this.WorkListQuery)
        {
            QueryRun queryRun = this.defaultWorkListQueryRun();
            if (queryRun)
            {
                this.WorkListQuery = queryRun.pack();
            }
        }
        else if (this.WorkActivity != WHSWorkActivity::WorkList
            && this.WorkListQuery)
        {
            this.WorkListQuery = conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCartonGroupQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default carton group query run.
    /// </summary>
    /// <returns>The default carton group query run.</returns>
    [Hookable(false)]
    internal QueryRun defaultCartonGroupQueryRun()
    {
        if(this.WorkActivity == WHSWorkActivity::ReprintMultipleCartonLabels)
        {
            return new QueryRun(queryStr(WHSWaveLabelList));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCartonGroupQuery</Name>
				<Source><![CDATA[
    internal void defaultCartonGroupQuery()
    {
        if (this.WorkActivity == WHSWorkActivity::ReprintMultipleCartonLabels
            && !this.CartonGroupQuery)
        {
            QueryRun queryRun = this.defaultCartonGroupQueryRun();
            if (queryRun)
            {
                this.CartonGroupQuery = queryRun.pack();
            }
        }
        else if (this.WorkActivity != WHSWorkActivity::ReprintMultipleCartonLabels
            && this.CartonGroupQuery)
        {
            this.CartonGroupQuery = conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPickOldestBatchEntireWarehouse</Name>
				<Source><![CDATA[
	private void defaultPickOldestBatchEntireWarehouse()
    {
        if (this.PickOldestBatch != WHSPickOldestBatch::Warn)
        {
            this.AreOlderBatchesWithinWarehouseDisplayed = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains code to be executed when a field of the record is modified.
    /// </summary>
    /// <param name="_fieldName">
    /// Name of the modified field.
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index of the modified field.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSRFMenuItemTable, WorkCreationProcess):
                this.WorkTemplateCode = '';

                if (this.workActivityMustUseProcessGuideFramework() || this.workActivityShouldUseProcessGuideFramework())
                {
                    this.ProcessGuideUseFramework = NoYes::Yes;
                }
                break;

            case fieldStr(WHSRFMenuItemTable, WorkActivity):
                if (this.workActivityMustUseProcessGuideFramework() || this.workActivityShouldUseProcessGuideFramework())
                {
                    this.ProcessGuideUseFramework = NoYes::Yes;
                }
                break;

            case fieldStr(WHSRFMenuItemTable, MenuItemMode):
                switch (this.MenuItemMode)
                {
                    case WHSMenuItemMode::Work:
                        this.WorkActivity = WHSWorkActivity::None;
                        break;
                    case WHSMenuItemMode::Indirect:
                        this.WorkCreationProcess = WHSWorkCreationProcess::None;
                        this.UseExistingWork = NoYes::No;
                        this.MenuItemDirectedBy = WHSMenuItemDirectedBy::None;
                        break;
                    default:
                        break;
                }
                break;            

            case fieldStr(WHSRFMenuItemTable, GroupPutaway):
            case fieldStr(WHSRFMenuItemTable, AllowLicensePlatePutOverride):
            case fieldStr(WHSRFMenuItemTable, MenuItemDirectedBy):
                if (this.GroupPutaway &&
                    (this.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserGrouping || 
                    this.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemGrouping)
                    )
                {
                    this.AllowLicensePlatePutOverride = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;
        SysDictField    dictField;
        FieldId         workTableFieldId;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldNum(WHSRFMenuItemTable, rfSysGroupField)):
                if (this.rfSysGroupField != '')
                {
                    workTableFieldId = fieldName2id(tableNum(WHSWorkTable), this.rfSysGroupField);
                    if (workTableFieldId == 0)
                    {
                        ret = checkFailed("@WAX4678");
                    }
                    else
                    {
                        dictField = new SysDictField(tableNum(WHSWorkTable), workTableFieldId);
                        if (dictField.isSystem() && this.rfSysGroupField != literalStr(createdDateTime))
                        {
                            ret = checkFailed("@WAX4682");
                        }
                    }
                }
                break;

            case fieldNum(WHSRFMenuItemTable, ProcessGuideUseFramework):
                ret = this.validateProcessGuideIsImplementedForFlow();
                break;

            case fieldNum(WHSRFMenuItemTable, AllowShippingOverpick):
                if (this.AllowShippingOverpick == NoYes::Yes 
                    && WHSRFMenuItemLine::existsForMenuItemNameWorkTransType(this.MenuItemName, WHSWorkTransType::Replenishment))
                {
                    ret = checkFailed("@WAX:WHSReplenishmentNotAllowOverPick");
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessGuideIsImplementedForFlow</Name>
				<Source><![CDATA[
    private boolean validateProcessGuideIsImplementedForFlow()
    {
        if (this.ProcessGuideUseFramework == NoYes::Yes)
        {
            EventHandlerResult result = EventHandlerResult::newDefault();

            WHSRFMenuItemTable::isProcessGuideFlowFullyImplemented(result, WHSRFMenuItemTable::getWHSWorkExecuteMode(this));

            if (result.result())
            {
                this.ProcessGuideUseFramework = NoYes::No;
                return checkFailed(result.result());
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnItemReceivingPolicy</Name>
				<Source><![CDATA[
    private boolean validateReturnItemReceivingPolicy()
    {
        if (this.MenuItemMode == WHSMenuItemMode::Work
            && this.WorkCreationProcess == WHSWorkCreationProcess::ReturnItemReceiving
            && this.ReturnItemReceivingPolicyId == '')
        {
            return checkFailed("@WAX:WHSRFMenuItemReturnItemReceivingPolicyMissingError");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkListPageSizeVsMaxDisplayedRecords</Name>
				<Source><![CDATA[
    private boolean validateWorkListPageSizeVsMaxDisplayedRecords()
    {
        if (this.WorkListMaximumDisplayedRecords > 0 && this.WorkListMaximumDisplayedRecords < this.PageSize)
        {
            return checkFailed(strFmt("@WAX:PageSizeLargerThanMaxDisplayedRecordsError", 
                                        fieldPName(WHSRFMenuItemTable, PageSize), 
                                        fieldPName(WHSRFMenuItemTable, WorkListMaximumDisplayedRecords)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountingReasonCodeSetUp</Name>
				<Source><![CDATA[
    private boolean validateCountingReasonCodeSetUp()
    {
        boolean ret = true;

        if (this.CountingReasonCodeGroup
            && this.DefaultCountingReasonCode)
        {
            if (!InventCountingReasonCodeGroup::reasonCodeExistsInGroup(this.DefaultCountingReasonCode, this.CountingReasonCodeGroup))
            {
                ret = checkFailed("@SCM:WHSRFMenuItemTableValidateDefaultCountingReasonCodeBelongsToGroup_Error");
            }              
        }

        if (ret
            && this.DisplayCountingReasonCode == WHSDisplayCountingReasonCode::Hide
            && this.EditCountingReasonCode)
        {
            ret = checkFailed("@WAX:WHSRFMenuItemTableDisplayReasonCodeError");
        }

        return ret;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates menu item name.
    /// </summary>
    /// <returns>
    /// True if menu item is validated.
    /// </returns>
    boolean validateMenuItemName()
    {
        WHSRFMenuTable  menuTable;

        select firstonly RecId from menuTable
            where menuTable.MenuName == this.MenuItemName;

        return menuTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupingFields</Name>
				<Source><![CDATA[
	private boolean validateGroupingFields(boolean _ret)
    {
        boolean ret = _ret;

        if (!this.rfSysGroupField)
        {
            ret = checkFailed(strFmt("@WAX1942", fieldPName(WHSRFMenuItemTable, rfSysGroupField)));
        }
        if (!this.rfSysGroupLabel)
        {
            ret = checkFailed(strFmt("@WAX1942", fieldPName(WHSRFMenuItemTable, rfSysGroupLabel)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        switch (this.MenuItemDirectedBy)
        {
            case WHSMenuItemDirectedBy::SystemGrouping:
                ret = this.validateGroupingFields(ret);
                break;

            case WHSMenuItemDirectedBy::ValidatedUserDirected:
                if (!this.rfSysGroupField)
                {
                    ret = checkFailed(strFmt("@WAX1942", "@WAX2330"));
                }
                if (!this.rfSysGroupLabel)
                {
                    ret = checkFailed(strFmt("@WAX1942", "@WAX2329"));
                }
                break;
        }

        if (ret)
        {
            switch (this.MenuItemMode)
            {
                case WHSMenuItemMode::Work:
                    if (this.WorkCreationProcess == WHSWorkCreationProcess::None &&
                        this.UseExistingWork     == NoYes::No)
                    {
                        ret = checkFailed(strFmt("@WAX1942", "@WAX1108"));
                    }
                    if (ret && this.WorkTemplateCode && !this.isValidWorkTemplateCode())
                    {
                        ret = checkFailed(strFmt("@SYS4009831", this.WorkTemplateCode, this.WorkCreationProcess));
                    }

                    if (ret)
                    {
                        ret = this.validateGroupPick();
                    }

                    if (ret)
                    {
                        ret = this.validateReturnItemReceiving();
                    }

                    break;

                case WHSMenuItemMode::Indirect:
                    if (this.WorkActivity == WHSWorkActivity::None)
                    {
                        ret = checkFailed(strFmt("@WAX1942", "@WAX1106"));
                    }
                    else if (this.WorkActivity == WHSWorkActivity::WorkList
                          && this.IsWorkListGroupingFilterDisplayed)
                    {
                        ret = this.validateGroupingFields(ret);
                    }
                    else if (this.WorkActivity == WHSWorkActivity::OutboundSorting
							 && !this.SortTemplateId)
                    {
                        ret = checkFailed("@WAX:WHSOutboundSortTemplateRequiredError");
                    }
                    break;
            }
        }

        ret = ret && this.validateCountingReasonCodeSetUp();

        ret = ret && this.validateWorkConfirmationSetup();

        ret = ret && this.validateProcessGuideIsImplementedForFlow();

        ret = ret && this.validateReturnItemReceivingPolicy();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupPick</Name>
				<Source><![CDATA[
    private boolean validateGroupPick()
    {
        boolean ret = true;

        if (this.GroupPick
            && this.isFieldVisibleGroupPick())
        {
            if (this.AllowShippingOverpick
                && this.isFieldVisibleAllowShippingOverpick())
            {
                ret = checkFailed('@WAX:Error_WHSRFMenuItemTable_GroupPickOverPickNotAllowed');
            }

            if (ret 
                && WHSRFAutoConfirm::isPieceByPieceConfirmationEnabled(this.menuItemLabel(), WHSWorkType::Pick))
            {
                ret = checkFailed('@WAX:Error_WHSRFMenuItemTable_GroupPickPiecePickingNotAllowed');
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnItemReceiving</Name>
				<Source><![CDATA[
    private boolean validateReturnItemReceiving()
    {
        boolean ret = true;

        if (this.WorkCreationProcess == WHSWorkCreationProcess::ReturnItemReceiving
            && !WHSParameters::isReturnOrderCreationFromMobileDeviceEnabled())
        {
            ret = checkFailed('@WAX:WHSReturnOrderCreationFromMobileDeviceNotEnabledError');
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessGuideFlowFullyImplemented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for determining if the flow is supported by process guide framework.
    /// </summary>
    /// <param name = "_result">
    /// The result for whether the process guide flow is fully implemented.
    /// </param>
    /// <param name="_mode">
    /// The current <c>WHSWorkExecuteMode</c> from the menu item.
    /// </param>
    static delegate void isProcessGuideFlowFullyImplemented(
        EventHandlerResult _result,
        WHSWorkExecuteMode _mode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkConfirmationSetup</Name>
				<Source><![CDATA[
    private boolean validateWorkConfirmationSetup()
    {
        boolean ret = true;

        if (this.MenuItemMode == WHSMenuItemMode::Work
            && this.MenuItemDirectedBy != WHSMenuItemDirectedBy::SystemDirected
            && this.MenuItemDirectedBy != WHSMenuItemDirectedBy::UserGrouping
            && this.MenuItemDirectedBy != WHSMenuItemDirectedBy::SystemGrouping
            && !this.isUserDirectedMenuItem())
        {
            WHSRFAutoConfirm rfAutoConfirm;
            while select firstonly TableId from rfAutoConfirm
                where rfAutoConfirm.MenuItemName == this.MenuItemName
                    && rfAutoConfirm.ShowPickDetails == NoYes::Yes
            {
                ret = checkFailed("@WAX:WorkConfirmationSetupWithIncorrectShowPickDetailsValue");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsrfMenuItemTable</c> record exists.
    /// </summary>
    /// <param name="_menuItemName">
    /// Menu item name of the record.
    /// </param>
    /// <returns>
    /// True is the record exists.
    /// </returns>
    public static boolean exist(WHSMenuItemName _menuItemName)
    {
        return (_menuItemName) &&
               (select firstonly whsrfMenuItemTable
                where whsrfMenuItemTable.MenuItemName == _menuItemName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSRFMenuItemTable</c> record with given parameters.
    /// </summary>
    /// <param name="_menuItemName">
    /// Menu item name of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSRFMenuItemTable find(WHSMenuItemName   _menuItemName,
                                          boolean           _forupdate = false)
    {
        WHSRFMenuItemTable  menuItemTable;

        if (_menuItemName)
        {
            menuItemTable.selectForUpdate(_forupdate);

            select firstOnly menuItemTable
                where menuItemTable.MenuItemName == _menuItemName;
        }

        return menuItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatedLPEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Verify if users should be able to edit a generated license during work execution.
    /// </summary>
    /// <param name="_menuItemName">
    ///  The mobile device menu item name.
    /// </param>
    /// <returns>
    ///  True if a license plate field that is automatically generated can be edited; otherwise, false.
    /// </returns>
    public static boolean generatedLPEnabled(WHSMenuItemName   _menuItemName)
    {
        WHSRFMenuItemTable  menuItemTable = WHSRFMenuItemTable::find(_menuItemName);
        boolean             ret = true;

        if (menuItemTable.GenerateLP
        &&  menuItemTable.DisplayContainerTypeCode)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAdjustmentTypeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds adjustment type code of a menu item.
    /// </summary>
    /// <param name="_menuItemName">
    /// Name of the menu item.
    /// </param>
    /// <returns>
    /// The adjustment type code of the menu item.
    /// </returns>
    static WHSAdjustmentTypeCode getDefaultAdjustmentTypeCode(WHSMenuItemName   _menuItemName)
    {
        WHSAdjustmentTypeCode       ret;

        ret = WHSRFMenuItemTable::find(_menuItemName).AdjustmentTypeCode;

        if (ret)
        {
            return ret;
        }

        ret = WHSParameters::find().DefaultAdjustmentTypeCode;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemDirectedBy2ExecuteMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the WHSWorkExecuteMode enum type that matches the <c>WHSMenuItemDirectedBy</c> enum type.
    /// </summary>
    /// <param name="_whsMenuItemDirectedBy">
    /// The parameter of type <c>WHSMenuItemDirectedBy</c>.
    /// </param>
    /// <returns>The matching <c>WHSWorkExecuteMode</c> enum.</returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSMenuItemDirectedBy</c> enumeration.</remarks>    
    public static WHSWorkExecuteMode menuItemDirectedBy2ExecuteMode(WHSMenuItemDirectedBy _whsMenuItemDirectedBy)
    {
        switch (_whsMenuItemDirectedBy)
        {
            case WHSMenuItemDirectedBy::UserDirected:
            case WHSMenuItemDirectedBy::None:
                return WHSWorkExecuteMode::UserDirected;

            case WHSMenuItemDirectedBy::UserGrouping:
                return WHSWorkExecuteMode::UserGrouping;

            case WHSMenuItemDirectedBy::SystemGrouping:
                return WHSWorkExecuteMode::SystemGrouping;

            case WHSMenuItemDirectedBy::ValidatedUserDirected:
                return WHSWorkExecuteMode::ValidatedUserDirected;

            case WHSMenuItemDirectedBy::ClusterPicking:
                return WHSWorkExecuteMode::ClusterPicking;

            case WHSMenuItemDirectedBy::CycleCountGrouping:
                return WHSWorkExecuteMode::CycleCountGrouping;

            case WHSMenuItemDirectedBy::TransportLoading:
                return WHSWorkExecuteMode::TransportLoading;

            case WHSMenuItemDirectedBy::SystemDirectedClusterPicking:
                return WHSWorkExecuteMode::SystemDirectedClusterPicking;

            case WHSMenuItemDirectedBy::ClusterPutaway:
                return WHSWorkExecuteMode::ClusterPutaway;
        }
        return WHSWorkExecuteMode::SystemDirected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWHSWorkExecuteMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds work execution mode of a menu item.
    /// </summary>
    /// <param name="_menuItem">
    /// The WHSRFMenuItemTable record containing work execution info.
    /// </param>
    /// <returns>
    /// The work execution mode of a menu item.
    /// </returns>
    public static WHSWorkExecuteMode getWHSWorkExecuteMode(WHSRFMenuItemTable _menuItem)
    {
        WHSWorkExecuteMode mode;

        if (_menuItem.MenuItemMode == WHSMenuItemMode::Work)
        {
            if (_menuItem.UseExistingWork)
            {
                mode = WHSRFMenuItemTable::menuItemDirectedBy2ExecuteMode(_menuItem.MenuItemDirectedBy);

                if ((mode == WHSWorkExecuteMode::UserDirected || mode == WHSWorkExecuteMode::SystemDirected) &&
                    _menuItem.PickPack)
                {
                    mode = WHSWorkExecuteMode::PickPack;
                }
            }
            else
            {
                mode = WHSRFMenuItemTable::workProcessType2executeModeType(_menuItem.WorkCreationProcess);
            }
        }
        else
        {
            mode = WHSWorkExecuteModeMapper::workActivity2ExecuteMode(_menuItem.WorkActivity);
        }

        return mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserDirectedMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if menu item is directed by the user.
    /// </summary>
    /// <returns>true if the menu item is directed by the user, otherwise, false.</returns>
    public boolean isUserDirectedMenuItem()
    {
        return this.MenuItemDirectedBy == WHSMenuItemDirectedBy::UserDirected
                || (this.UseExistingWork
                && this.MenuItemDirectedBy == WHSMenuItemDirectedBy::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleByLicensePlateActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the license plate handling is active
    /// </summary>
    /// <returns>
    /// true if license plate handling is active; false otherwise
    /// </returns>
    /// <remarks>
    /// License plate handling is active when HandleByLP is set to Yes, as well as the work execution mode is either
    /// user directed or system directed. Handling by license plate is not supported for other modes at present
    /// </remarks>
    public boolean handleByLicensePlateActive()
    {
        return this.HandleByLP
            && this.MenuItemMode        == WHSMenuItemMode::Work
            && this.UseExistingWork
            && (this.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected
            || this.isUserDirectedMenuItem());
    }

]]></Source>
			</Method>
			<Method>
				<Name>workProcessType2executeModeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>WHSWorkExecuteMode</c> enum type that matches the <c>WHSWorkCreationProcess</c> enum type.
    /// </summary>
    /// <param name="_type">
    /// The <c>WHSWorkCreationProcess</c> type.
    /// </param>
    /// <returns>
    /// The <c>WHSWorkExecuteMode</c> enum type.
    /// </returns>
    /// <remarks>Add a post-method handler for returning the right value when extending the <c>WHSWorkCreationProcess</c> enumeration.</remarks>
    public static WHSWorkExecuteMode workProcessType2executeModeType(WHSWorkCreationProcess _type)
    {
        return WHSWorkExecuteModeMapper::workCreationProcess2ExecuteMode(_type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LicensePlateConsolidationCancelRemainingOriginWorkLines = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTransTypeForMixedLPMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the correct work transaction type that corresponds to the mixed license plate receiving mode.
    /// </summary>
    /// <param name = "_menuItemName">
    /// The menu item name to find.
    /// </param>
    /// <returns>
    /// The work transaction type for the found mixed license plate receiving mode.
    /// </returns>
    [SysObsolete('This method will become internal, please use getWorkTransTypeForMixedLP instead.', false, 13\04\2023)]
    public static WHSWorkTransType getWorkTransTypeForMixedLPMenuItem(WHSMenuItemName _menuItemName)
    {
        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(_menuItemName);
        return WHSRFMenuItemTable::getWorkTransTypeForMixedLPReceivingMode(menuItemTable.MixedLPReceivingMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTransTypeForMixedLPReceivingMode</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static WHSWorkTransType getWorkTransTypeForMixedLPReceivingMode(WHSMixedLPReceivingMode _receivingMode)
    {
        switch (_receivingMode)
        {
            case WHSMixedLPReceivingMode::LoadItemReceiving:
            case WHSMixedLPReceivingMode::POItemReceiving:
            case WHSMixedLPReceivingMode::POLineReceiving:
                return WHSWorkTransType::Purch;
            case WHSMixedLPReceivingMode::TOItemReceiving:
            case WHSMixedLPReceivingMode::TOLineReceiving:
                return WHSWorkTransType::TransferReceipt;
            case WHSMixedLPReceivingMode::ReturnOrderReceiving:
                return WHSWorkTransType::ReturnOrder;
            default:
                return WHSWorkTransType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTransTypeForMixedLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the correct work transaction type that corresponds to the mixed license plate receiving mode, given the pass.
    /// </summary>
    /// <param name = "_menuItemName">
    /// The menu item name to find.
    /// </param>
    /// <param name = "_pass">
    /// An instance of the <c>WhsrfPassthrough</c> class.
    /// </param>
    /// <returns>
    /// The work transaction type for the found mixed license plate receiving mode.
    /// </returns>
    public static WHSWorkTransType getWorkTransTypeForMixedLP(WHSMenuItemName _menuItemName, WhsrfPassthrough _pass)
    {
        WHSWorkTransType ret = WHSRFMenuItemTable::getWorkTransTypeForMixedLPMenuItem(_menuItemName);

        if (ret == WHSWorkTransType::Purch && _pass
            && WHSRFMenuItemTable::find(_menuItemName).MixedLPReceivingMode == WHSMixedLPReceivingMode::LoadItemReceiving)
        {
            ret = _pass.receivingOrderProvider().workTransType();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editUseProcessGuideFramework</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit method for enabling the use of Process Guide. This will ensure that for all flows that must use Process Guide the value is displayed as set.
    /// </summary>
    /// <param name = "_set">Set the value or just read the value?</param>
    /// <param name = "_useProcessGuideFramework">The actual value to set.</param>
    /// <returns>The value to return.</returns>
    public edit ProcessGuideUseFramework editUseProcessGuideFramework(boolean _set, ProcessGuideUseFramework _useProcessGuideFramework)
    {
        if (_set)
        {
            this.ProcessGuideUseFramework = _useProcessGuideFramework;
            this.validateField(fieldNum(WHSRFMenuitemTable, ProcessGuideUseFramework));
        }
        
        return this.useProcessGuideFramework();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useProcessGuideFramework</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if process guide framework should be used.
    /// </summary>
    /// <returns>true if process guide frame work should be attempted to use; otherwise, false</returns>
    public boolean useProcessGuideFramework()
    {
        return this.ProcessGuideUseFramework
			|| this.workActivityMustUseProcessGuideFramework();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workActivityMustUseProcessGuideFramework</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if the work activity is required to use process guide framework.
    /// </summary>
    /// <returns>true if process guide framework must be used; otherwise, false</returns>
	protected boolean workActivityMustUseProcessGuideFramework()
    {
        return this.WorkActivity	    == WHSWorkActivity::StartProdOrder
            || this.WorkActivity	    == WHSWorkActivity::InquiryItem
            || this.WorkActivity	    == WHSWorkActivity::InquiryLicensePlate
            || this.WorkActivity	    == WHSWorkActivity::InquiryLocation
            || this.WorkActivity	    == WHSWorkActivity::ChangeWarehouse
            || this.WorkActivity	    == WHSWorkActivity::CompleteMixedLicensePlate
            || this.WorkActivity	    == WHSWorkActivity::ReprintLabel
            || this.WorkCreationProcess == WHSWorkCreationProcess::AdjustmentIn
            || this.WorkActivity        == WHSWorkActivity::ReprintCartonLabel
            || this.WorkActivity        == WHSWorkActivity::ReprintMultipleCartonLabels
            || this.WorkActivity        == WHSWorkActivity::OutboundSorting
            || this.WorkActivity        == WHSWorkActivity::AssignToPutawayCluster
            || this.WorkActivity        == WHSWorkActivity::CreateTransferOrderFromLP
            || this.WorkActivity        == WHSWorkActivity::Packing
            || this.WorkActivity        == WHSWorkActivity::GenericDataInquiry
            || this.WorkActivity        == WHSWorkActivity::ContainerClosing
            || this.WorkActivity        == WHSWorkActivity::ContainerCreation
            || this.WorkActivity        == WHSWorkActivity::ContainerDeletion
            || this.WorkActivity        == WHSWorkActivity::ReceivingCompletedConfirmation
            || this.WorkActivity        == WHSWorkActivity::ConsolidateLicensePlates
            || this.WorkActivity        == WHSWorkActivity::PrintContainerLabel
            || this.WorkActivity        == WHSWorkActivity::OverrideLabelPrinter
            || this.WorkCreationProcess == WHSWorkCreationProcess::ReturnItemReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workActivityShouldUseProcessGuideFramework</Name>
				<Source><![CDATA[
    protected boolean workActivityShouldUseProcessGuideFramework()
    {
        return this.WorkCreationProcess == WHSWorkCreationProcess::AdjustmentOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnabledUseProcessGuide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if field <c>ProcessGuideUseFramework</c> is enabled.
    /// </summary>
    /// <returns>
    /// Returns <c>boolean</c> object.
    /// </returns>
    [Hookable(false)]
    public boolean isFieldEnabledUseProcessGuide()
    {
        if (this.workActivityMustUseProcessGuideFramework())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleGenerateCatchWeightTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>GenerateCatchWeightTag</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    [Wrappable(true)]
    internal boolean isFieldVisibleGenerateCatchWeightTag()
    {
        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
            case WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate:
            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
            case WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate:
            case WHSWorkCreationProcess::LoadItemReceiving:
            case WHSWorkCreationProcess::LoadItemReceivingAndLocate:
            case WHSWorkCreationProcess::LicensePlateReceiving:
            case WHSWorkCreationProcess::AdjustmentIn:
            case WHSWorkCreationProcess::LicensePlateLoading:
            case WHSWorkCreationProcess::ReportAsFinished:
            case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                return this.isFieldVisibleWorkCreationProcess();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleUseExistingCatchWeightTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>UseExistingCatchWeightTag</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldVisibleUseExistingCatchWeightTag()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return false;
        }

        switch (this.WorkCreationProcess)
        {
            case WHSWorkCreationProcess::ReportAsFinished:
            case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                return this.isFieldVisibleWorkCreationProcess();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEnabledUseExistingCatchWeightTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>UseExistingCatchWeightTag</c> field is enabled for input.
    /// </summary>
    /// <returns>true if the field is enabled for input; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldEnabledUseExistingCatchWeightTag()
    {
        return this.GenerateCatchWeightTag == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleGroupPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>GroupPick</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldVisibleGroupPick()
    {
        if (this.isFieldVisibleMenuItemDirectedBy())
        {
            switch (this.MenuItemDirectedBy)
            {
                case WHSMenuItemDirectedBy::UserDirected:
                case WHSMenuItemDirectedBy::SystemDirected:
                case WHSMenuItemDirectedBy::UserGrouping:
                case WHSMenuItemDirectedBy::SystemGrouping:
                case WHSMenuItemDirectedBy::ValidatedUserDirected:
                case WHSMenuItemDirectedBy::None:
                    return !this.handleByLicensePlateActive();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleRFFastValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>RFFastValidation</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldVisibleRFFastValidation()
    {
        return (this.isFieldVisibleMenuItemDirectedBy() && this.isSalesPickingProcess())
            || (this.WorkActivity == WHSWorkActivity::ConsolidateLicensePlates && this.ProcessGuideUseFramework);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesPickingProcess</Name>
				<Source><![CDATA[
    private boolean isSalesPickingProcess()
    {
        WHSRFMenuItemLine menuItemLine;
        WHSWorkClassTable workClass;

        select firstonly RecId from menuItemLine
            where menuItemLine.MenuItemName == this.MenuItemName
            exists join workClass
                where workClass.WorkClassId == menuItemLine.WorkClassId
                   && workClass.WorkTransType == WHSWorkTransType::Sales;

        return menuItemLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleSortTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>SortTemplateId</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    public boolean isFieldVisibleSortTemplateId()
    {
        if (this.WorkActivity == WHSWorkActivity::OutboundSorting)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisiblePrintCartonLabelMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>PrintCartonLabelMode</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldVisiblePrintCartonLabelMode()
    {
        switch (this.WorkActivity)
        {
            case WHSWorkActivity::ReprintMultipleCartonLabels:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAssignPutawayCluster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>AssignPutawayCluster</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    public boolean isFieldVisibleAssignPutawayCluster()
    {
        return this.WorkCreationProcess == WHSWorkCreationProcess::PurchaseOrderLineReceiving
            || this.WorkCreationProcess == WHSWorkCreationProcess::PurchaseOrderItemReceiving
            || this.WorkCreationProcess == WHSWorkCreationProcess::ReportAsFinished
            || this.WorkCreationProcess == WHSWorkCreationProcess::ReturnOrder
            || this.WorkCreationProcess == WHSWorkCreationProcess::LoadItemReceiving
            || this.WorkCreationProcess == WHSWorkCreationProcess::TransferOrderItemReceiving
            || this.WorkCreationProcess == WHSWorkCreationProcess::TransferOrderLineReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleLoadLineQuantityOverreceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>LoadLineQuantityOverreceipt</c> field is visible.
    /// </summary>
    /// <returns>true if the field is visible; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isFieldVisibleLoadLineQuantityOverreceipt()
    {
        return this.WorkCreationProcess == WHSWorkCreationProcess::LoadItemReceiving 
            || this.WorkCreationProcess == WHSWorkCreationProcess::LoadItemReceivingAndLocate
            || ((this.WorkCreationProcess == WHSWorkCreationProcess::MixedLPReceiving || this.WorkCreationProcess == WHSWorkCreationProcess::MixedLPReceivingAndLocate) && this.MixedLPReceivingMode == WHSMixedLPReceivingMode::LoadItemReceiving);
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the label shown for the menu item on warehouse mobile devices.
    /// </summary>
    /// <returns>Label to be shown on the mobile device.</returns>
    public WHSRFTitle menuItemLabel()
    {
        return this.RFTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDefaultContainerType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the menu item can get default container type.
    /// </summary>
    /// <returns>true if the menu item can default container type; otherwise, false.</returns>
    public boolean canDefaultContainerType()
    {
        return this.DefaultData
            || this.WorkCreationProcess == WHSWorkCreationProcess::ReportAsFinished
            || this.WorkCreationProcess == WHSWorkCreationProcess::ReportAsFinishedAndLocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFieldsValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether table <c>WHSRFMenuItemTable</c> fields have to be shown on the form
    /// If no - table fields reset to their initial values
    /// </summary>
    /// <param name="_observableControls">
    /// map, where: "key" is link to fieldID; "value" is whether this field value has to be populate with initial value (if "yes" - it have)
    /// </param>
    internal void resetFieldsValues(Map _observableControls)
    {
        MapEnumerator en = _observableControls.getEnumerator();

        while (en.moveNext())
        {
            if (!en.currentValue())
            {
                FieldId fieldId = en.currentKey();
                if (fieldId)
                {
                    this.(fieldId) = nullValue(this.(fieldId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockLoadLineQuantityOverreceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the menu item blocks load line quantity overreceipt
    /// </summary>
    /// <returns>
    /// Returns <c>boolean</c> object.
    /// </returns>
    [Hookable(false)]
    internal boolean blockLoadLineQuantityOverreceipt()
    {
        return this.LoadLineQuantityOverreceipt == WhsLoadLineQuantityOverreceipt::Block 
            || this.LoadLineQuantityOverreceipt == WhsLoadLineQuantityOverreceipt::BlockForClosedLoadsOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.checkAndSetFieldValuesToEnsureConsistency();
        this.createDefaultWorkSequenceQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.checkAndSetFieldValuesToEnsureConsistency();
        this.createDefaultWorkSequenceQuery();
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndSetFieldValuesToEnsureConsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks dependent values to ensure settings are correct.
    /// </summary>
    [Hookable(false)]
    private void checkAndSetFieldValuesToEnsureConsistency()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled() || (this.UseExistingCatchWeightTag && !this.isFieldEnabledUseExistingCatchWeightTag()))
        {
            this.UseExistingCatchWeightTag = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultWorkSequenceQuery</Name>
				<Source><![CDATA[
    private void createDefaultWorkSequenceQuery()
    {
        if (this.MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirected
            && this.orig().MenuItemDirectedBy != this.MenuItemDirectedBy)
        {
            WHSSystemDirectedWorkSequenceQuery::createDefaultWorkSequenceQuery(this.MenuItemName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleRespectFlushingPrincipleForWHSReportedOverproduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the respect flushing principle for over production field should be visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    [Hookable(false)]
    internal boolean isFieldVisibleRespectFlushingPrincipleForWHSReportedOverproduction()
    {
        if (this.isFieldVisibleWorkCreationProcess())
        {
            switch (this.WorkCreationProcess)
            {
                case WHSWorkCreationProcess::ReportAsFinishedAndLocate:
                case WHSWorkCreationProcess::ReportAsFinished:
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workFieldAtPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value at specified position from WorkListFieldList.
    /// </summary>
    /// <param name = "_position">A position to read at.</param>
    /// <returns>A combination of field name and table id.</returns>
    [Hookable(false)]
    internal container workFieldAtPosition(int _position)
    {
        container fieldContainer = conPeek(this.WorkListFieldList, _position);

        if (typeOf(conPeek(fieldContainer, 2)) == Types::String)
        {
            IdentifierName  identifierName;
            TableName       tableName;

            [identifierName, tableName] = fieldContainer;

            fieldContainer = [identifierName, tableName2Id(tableName)];
        }

        return fieldContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGenericDataInquiry</Name>
				<Source><![CDATA[
    private boolean isGenericDataInquiry()
    {
        return this.MenuItemMode == WHSMenuItemMode::Indirect
            && this.WorkActivity == WHSWorkActivity::GenericDataInquiry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleDataInquiryQueryTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the data inquiry query table name field is visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleDataInquiryQueryTableName()
    {
        return this.isGenericDataInquiry();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isButtonEnabledDataInquiryQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls if the <c>EditGenericDataInquiryQuery</c> button is enabled.
    /// </summary>
    /// <returns>true if the button is enabled; otherwise, false.</returns>
    public boolean isButtonEnabledDataInquiryQuery()
    {
        return this.isGenericDataInquiry() && this.DataInquiryQueryTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleMobileDeviceContainerPackingPolicyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the mobile device container packing policy field is visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleMobileDeviceContainerPackingPolicyId()
    {
        return this.MenuItemMode == WHSMenuItemMode::Indirect
            && this.WorkActivity == WHSWorkActivity::Packing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleDeferredReceivingPolicyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the mobile device deferred receiving policy field is visible.
    /// </summary>
    /// <returns>true if the field should be visible; otherwise, false</returns>
    public boolean isFieldVisibleDeferredReceivingPolicyId()
    {
        return this.MenuItemMode == WHSMenuItemMode::Work
            && WHSDeferredReceiving::isWorkCreationProcessSupported(this.WorkCreationProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleReturnItemReceivingPolicyId</Name>
				<Source><![CDATA[
    internal boolean isFieldVisibleReturnItemReceivingPolicyId()
    {
        return this.MenuItemMode == WHSMenuItemMode::Work
            && this.WorkCreationProcess == WHSWorkCreationProcess::ReturnItemReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEditQueryForPreview</Name>
				<Source><![CDATA[
    internal static Query processEditQueryForPreview(Query _query, Common _buffer)
    {
        WHSRFMenuItemTable menuItemTable = _buffer as WHSRFMenuItemTable;

        if (menuItemTable && menuItemTable.WorkActivity == WHSWorkActivity::WorkList)
        {
            QueryBuildDataSource qbdsWorkTable = _query.dataSourceTable(tableNum(WHSWorkTable));
            QueryBuildDataSource qbdsWorkLine = qbdsWorkTable.addDataSource(tableNum(WHSWorkLine));
            qbdsWorkLine.relations(true);
            qbdsWorkLine.joinMode(JoinMode::ExistsJoin);

            WHSRFMenuItemLine  menuItemLine;

            while select WorkClassId from menuItemLine
                where menuItemLine.MenuItemName == menuItemTable.MenuItemName
            {
                QueryBuildRange qbr = qbdsWorkLine.addRange(fieldNum(WHSWorkLine, WorkClassId));
                qbr.value(queryValue(menuItemLine.WorkClassId));
            }
        }

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX3099</DeveloperDocumentation>
	<FormRef>WHSRFMenuItem</FormRef>
	<Label>@WAX1038</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>MenuItemName</TitleField1>
	<TitleField2>MenuItemDirectedBy</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>MenuItemNameIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>MenuItemNameIdx</PrimaryIndex>
	<ReplacementKey>MenuItemNameIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WHSRFAutoConfirm</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSRFAutoConfirm</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSRFDefaultData</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSRFDefaultData</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSRFMenuItemCycleCount</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSRFMenuItemCycleCount</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSRFSysDirSort</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSRFSysDirSort</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WHSRFMenuItemLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WHSRFMenuItemLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuItemDirectedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuItemMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseExistingWork</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreationProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickPack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unitization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateLP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocVerification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowDisposition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowBatchDisposition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFSysGroupField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFSysGroupLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFSysGroupFieldNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirHintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDisplayPickSummary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountFirstPass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDisplayStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClusterProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisableCycleCountThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupPutaway</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickOldestBatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkAuditTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideInventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduleMovement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideTargetLP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HandleByLP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HandleByLP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuItemDirectedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuItemMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseExistingWork</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreationProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickPack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unitization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateLP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTemplateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocVerification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowDisposition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowBatchDisposition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFSysGroupField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFSysGroupLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFSysGroupFieldNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocDirHintCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Anchor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AnchorBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowFullSplit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDisplayPickSummary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CycleCountFirstPass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFDisplayStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClusterProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisableCycleCountThreshold</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupPutaway</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickOldestBatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkAuditTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideInventBatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScheduleMovement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideTargetLP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HandleByLP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLocationOverflow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerKeepsOrigWork</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockReceivingASNItem</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmCancel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowLicensePlatePutOverride</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkListQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkListFieldList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowFilter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PageSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowShippingOverpick</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSAllowEndJob</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayContainerTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelReplenishmentWorkWithDependentWork</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsWorkListGroupingFilterDisplayed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultCountingReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EditCountingReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayCountingReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedShipConfirmationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GenerateCatchWeightTag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveLabelPrintMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseExistingCatchWeightTag</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceivingSummaryPageDisplayRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFFastValidation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShowWorkLineList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RespectFlushingPrincipleForWHSReportedOverproduction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferOrderLineCreationPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundShipmentPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreateTransferOrderFromLPValidateLPPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdjustmentTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAdjustmentTypeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowFullSplit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowFullSplit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowLicensePlatePutOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowLicensePlatePutOverride</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowLocationOverflow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowLocationOverflow</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Anchor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAnchor</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AnchorBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSAnchorBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClusterProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSClusterProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CycleCountFirstPass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountFirstPass</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultData</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultData</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisableCycleCountThreshold</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDisableCycleCountThreshold</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenerateLP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSGenerateLP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GroupPutaway</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSGroupPutaway</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LocDirHintCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocDirHintCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocVerification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLocVerification</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MenuItemDirectedBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSMenuItemDirectedBy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MenuItemMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSMenuItemMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuItemName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuItemName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideInventBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOverrideInventBatchId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideTargetLP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOverrideTargetLP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PageSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMobileDisplayMenuPageSize</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PickOldestBatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSPickOldestBatch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PickPack</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPickPack</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPrintLabel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RFDisplayPickSummary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFDisplayPickSummary</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RFDisplayStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFDisplayStatus</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFSysGroupField</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFSysGroupField</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RFSysGroupFieldNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFSysGroupFieldNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFSysGroupLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFSysGroupLabel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFTitle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFTitle</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ScheduleMovement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSScheduleMovement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowBatchDisposition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShowBatchDisposition</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowDisposition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShowDisposition</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowFilter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMobileDisplayMenuShowFilter</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Unitization</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateGrouping</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSLicensePlateGroupingPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseExistingWork</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUseExistingWork</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkActivity</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkAuditTemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkAuditTemplateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkCreationProcess</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkCreationProcess</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTemplateCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTemplateCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HandleByLP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSHandleByLP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkerKeepsOrigWork</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkerKeepsOrigWork</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConfirmCancel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSConfirmCancel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WHSAllowEndJob</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowEndJob</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WorkListFieldList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMobileDisplayMenuWorkListFieldList</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WorkListQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMobileDisplayMenuWorkListQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowShippingOverpick</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowShippingOverpick</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlockReceivingASNItem</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSBlockReceivingASNItem</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LicensePlateConsolidationCancelRemainingOriginWorkLines</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateConsolidationCancelRemainingOriginWorkLines</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MixedLPReceivingMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSMixedLPReceivingMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayContainerTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDisplayContainerTypeCode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WillContainerRemovalCancelRelatedWork</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWillContainerRemovalCancelRelatedWork</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CancelReplenishmentWorkWithDependentWork</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCancelReplenishmentWorkWithDependentWork</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WHSWorkListFieldList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects70</ConfigurationKey>
			<ExtendedDataType>WHSMobileDisplayMenuWorkListFieldList</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>WHSWorkListQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects70</ConfigurationKey>
			<ExtendedDataType>WHSMobileDisplayMenuWorkListQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>WorkListMaximumDisplayedRecords</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMobileDisplayWorkListMaximumDisplayedRecords</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AreOlderBatchesWithinWarehouseDisplayed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAreOlderBatchesWithinWarehouseDisplayed</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWorkListGroupingFilterDisplayed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkListAllowGrouping</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EditCountingReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSEditReasonCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayCountingReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSDisplayCountingReasonCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultCountingReasonCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultCountingReasonCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowedShipConfirmationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSRFAllowedShipConfirmationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GenerateCatchWeightTag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSGenerateCWTag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessGuideUseFramework</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProcessGuideUseFramework</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GroupPick</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>WHSGroupPick</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>CartonGroupQuery</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>WHSMobileDisplayMenuCartonGroupQuery</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortTemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortTemplateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WaveLabelPrintMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSPrintMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DeferredPutProcessingPolicy</Name>
			<AssetClassification>Customer content</AssetClassification>
			<EnumType>WHSDeferredPutProcessingMobileDevicePolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssignPutawayCluster</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>WHSAssignPutawayCluster</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadLineQuantityOverreceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WhsLoadLineQuantityOverreceipt</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseExistingCatchWeightTag</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUseExistingCatchWeightTag</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceivingSummaryPageDisplayRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSReceivingSummaryPageDisplayRule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RFFastValidation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFFastValidation</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShowWorkLineList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSShowWorkLineList</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RespectFlushingPrincipleForWHSReportedOverproduction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdRespectFlushingPrincipleForWHSReportedOverproduction</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferOrderLineCreationPolicy</Name>
			<AssetClassification>Customer content</AssetClassification>
			<EnumType>WHSTransferOrderLineCreationPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OutboundShipmentPolicy</Name>
			<AssetClassification>Customer content</AssetClassification>
			<EnumType>WHSOutboundShipmentPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountingReasonCodeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventCountingReasonCodeGroupName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GS1PolicyName</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>WHSGS1PolicyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DataInquiryQueryTableName</Name>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<ExtendedDataType>TableName</ExtendedDataType>
			<Label>@WAX:DataInquiryQueryTableName</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataInquiryShowFilterPage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WhsRFGenericDataInquiryShowFilterPage</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>DataInquiryQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Label>@WAX:DataInquiryQuery</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>DataInquiryFieldList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Label>@WAX:DataInquiryCardFieldList</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContainerPackingPolicyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<ExtendedDataType>WHSMobileDeviceContainerPackingPolicyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeferredReceivingPolicyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDeferredReceivingPolicyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnItemReceivingPolicyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReturnItemReceivingPolicyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FullLPMovementPolicy</Name>
			<AssetClassification>Customer content</AssetClassification>
			<EnumType>WHSFullLPMovementPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreateTransferOrderFromLPValidateLPPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSCreateTransferOrderFromLPValidateLPPolicy</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MenuItemNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MenuItemName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSAdjustmentType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSAdjustmentType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdjustmentTypeCode</Name>
					<SourceEDT>WHSAdjustmentTypeCode</SourceEDT>
					<Field>AdjustmentTypeCode</Field>
					<RelatedField>AdjustmentTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSClusterProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSClusterProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClusterProfileId</Name>
					<SourceEDT>WHSClusterProfileId</SourceEDT>
					<Field>ClusterProfileId</Field>
					<RelatedField>ClusterProfileId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ClusterType</Name>
					<RelatedField>ClusterType</RelatedField>
					<ValueStr>WHSClusterType::Picking</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLocDirHint</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLocDirHint</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LocDirHintCode</Name>
					<SourceEDT>WHSLocDirHintCode</SourceEDT>
					<Field>LocDirHintCode</Field>
					<RelatedField>LocDirHintCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkAuditTemplateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWorkAuditTemplateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkAuditTemplateId</Name>
					<SourceEDT>WHSWorkAuditTemplateId</SourceEDT>
					<Field>WorkAuditTemplateId</Field>
					<RelatedField>WorkAuditTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkTemplateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkTemplateTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkTemplateCode</Name>
					<SourceEDT>WHSWorkTemplateCode</SourceEDT>
					<Field>WorkTemplateCode</Field>
					<RelatedField>WorkTemplateCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventCountingReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventCountingReasonCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultCountingReasonCode</Name>
					<Field>DefaultCountingReasonCode</Field>
					<RelatedField>ReasonCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SortTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSOutboundSortTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SortTemplateId</Name>
					<Field>SortTemplateId</Field>
					<RelatedField>SortTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventCountingReasonCodeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventCountingReasonCodeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountingReasonCodeGroup</Name>
					<Field>CountingReasonCodeGroup</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSGS1PolicyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSGS1PolicyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GS1PolicyName</Name>
					<Field>GS1PolicyName</Field>
					<RelatedField>PolicyName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSMobileDeviceContainerPackingPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSMobileDeviceContainerPackingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContainerPackingPolicyId</Name>
					<Field>ContainerPackingPolicyId</Field>
					<RelatedField>PackingPolicyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSDeferredReceivingPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSDeferredReceivingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeferredReceivingPolicyId</Name>
					<Field>DeferredReceivingPolicyId</Field>
					<RelatedField>DeferredReceivingPolicyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSReturnItemReceivingPolicyId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSReturnItemReceivingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnItemReceivingPolicyId</Name>
					<Field>ReturnItemReceivingPolicyId</Field>
					<RelatedField>ReturnItemReceivingPolicyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>