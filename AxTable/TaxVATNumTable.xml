<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATNumTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxVATNumTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if ((select firstonly RecId from custInvoiceJour
                    where custInvoiceJour.vatNum == this.vatNum).RecId != 0)
            ret = checkFailed(strFmt("@SYS56339",tableId2pname(tableNum(CustInvoiceJour))));

        if ((select firstonly RecId from vendInvoiceJour
                    where vendInvoiceJour.vatNum == this.vatNum).RecId != 0)
            ret = checkFailed(strFmt("@SYS56339",tableId2pname(tableNum(VendInvoiceJour))));

        if ((select firstonly RecId from projInvoiceJour
                    where projInvoiceJour.vatNum == this.vatNum).RecId != 0)
            ret = checkFailed(strFmt("@SYS56339",tableId2pname(tableNum(ProjInvoiceJour))));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = TaxVATNumTable::checkVATNum(this.vatNum, this, fieldNum(TaxVATNumTable, vatNum), this.CountryRegionId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(VATNum _vatNum, AddressCountryRegionId _countryRegionId )
    {
        boolean ret = true;
        ;

        if (!TaxVATNumTable::exist(_vatNum, _countryRegionId))
        {
            ret = checkFailed(strFmt(TaxVATNumTable::txtNotExist(), _vatNum, _countryRegionId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATNum</Name>
				<Source><![CDATA[
    static boolean checkVATNum(VATNum vatNum, Common common, FieldId fieldId, AddressCountryRegionId _countryRegionId = "")
    {
        AddressCountryRegionId  countryRegion;
        boolean                 ret = true;

        if (vatNum)
        {
            if (TaxVATNumTable::taxVATNumTableEnabled() &&
                common.TableId != tableNum(TaxVATNumTable))
            {
                if (!prmisDefault(_countryRegionId))
                {
                    countryRegion = _countryRegionId;
                }
                else
                {
                    countryRegion = TaxVATNumTable::resolveCountryRegionFromTable(common);
                }

                if (!TaxVATNumTable::existOptionalCountryRegion(vatNum) && !TaxVATNumTable::existOptionalCountryRegionTaxId(vatNum, common))
                {
                    ret = checkFailed(strFmt("@Tax:TaxExemptNumberValidationError", vatNum, fieldId2pname(common.TableId, fieldId), countryRegion));
                }
            }
            else
            {
                if  (TaxVATNumTable::taxVATNumTableEnabled())
                {
                    ret = TaxVATNumValidate::checkVATNum(vatNum, _countryRegionId);
                }
            }
        }
        else
        {
            if (SysDictTable::isTableMapped(tableNum(TaxExemptVATNumMap), common.TableId))
            {
                TaxExemptVATNumMap vatMap = common as TaxExemptVATNumMap;
                if (vatMap.TableId == tableNum(LedgerJournalTrans))
                {
                    LedgerJournalTrans ledgerJournalTrans = vatMap as LedgerJournalTrans;
                    if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTrans.ledgerJournalTable().JournalType))
                    {
                        LedgerJournalTransTaxExtension extensionTable = ledgerJournalTrans.ledgerJournalTransTaxExtension();
                        extensionTable.VATNumRecId = 0;
                        extensionTable.VATNumTableType = TaxExemptNumberSourceType::None;
                        ledgerJournalTrans.packExtensionTable(extensionTable);
                    }
                }
                else
                {
                    vatMap.VATNumRecId = 0;
                    vatMap.VATNumTableType = TaxExemptNumberSourceType::None;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeVATNum</Name>
				<Source><![CDATA[
    static VATNum completeVATNum(VATNum _vatNum, EUSalesListTax _taxCode)
    {
        VATNum         vatNum;

        vatNum = TaxVATNumTable::stripVATNum(_vatNum, _taxCode);
        vatNum = _taxCode + vatNum;

        return vatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLookupVATNum</Name>
				<Source><![CDATA[
    static void enableLookupVATNum(FormStringControl formStringControl)
    {
        if (TaxVATNumTable::taxVATNumTableEnabled())
        {
            formStringControl.lookupButton(FormLookupButton::Always); // Always lookup button.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableLookupVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables lookup button for VAT num.
    /// </summary>
    /// <param name = "formStringControl">The string form control of VAT num.</param>
    internal static void disableLookupVATNum(FormStringControl formStringControl)
    {
        if (TaxVATNumTable::taxVATNumTableEnabled())
        {
            formStringControl.lookupButton(FormLookupButton::Never);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(VATNum _vatNum, AddressCountryRegionId _countryRegionId )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxVATNumTable
                 where
                     taxVATNumTable.vatNum == _vatNum &&
                    taxVATNumTable.CountryRegionId == _countryRegionId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOptionalCountryRegion</Name>
				<Source><![CDATA[
    static boolean existOptionalCountryRegion(VATNum vatNum)
    {
        return vatNum && (select firstonly RecId from taxVATNumTable
                                     index hint TaxVATNumIdx
                                     where taxVATNumTable.vatNum     == vatNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOptionalCountryRegionTaxId</Name>
				<Source><![CDATA[
    static private boolean existOptionalCountryRegionTaxId(VATNum _vatNum, Common _common)
    {
        DirPartyMap dirPartyMap;
        boolean ret;

        if (_vatNum)
        {
            dirPartyMap = TaxVATNumTable::getTaxIdOriginator(_common);
            if (dirPartyMap.Party)
            {
                TaxRegistration taxRegistration;
                TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
                TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
                DirPartyLocation dirPartyLocation;
                date minDateCheck = dateNull();
                date maxDateCheck = maxDate();

                select firstonly validTimeState(minDateCheck, maxDateCheck) RecId from taxRegistration
                    where taxRegistration.RegistrationNumber == _vatNum
                    exists join taxRegistrationTypeApplicabilityRule
                        where taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
                    exists join taxRegistrationLegislationTypes
                        where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == taxRegistrationTypeApplicabilityRule.RecId
                           && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID
                    exists join dirPartyLocation
                        where dirPartyLocation.RecId == taxRegistration.DirPartyLocation
                           && dirPartyLocation.Party == dirPartyMap.Party;

                if (taxRegistration)
                {
                    ret = true;
                    // TBD
                    TaxExemptVATNumMap vatMap;
                    if (SysDictTable::isTableMapped(tableNum(TaxExemptVATNumMap), _common.TableId))
                    {
                        vatMap = _common as TaxExemptVATNumMap;
                    }

                    RefRecId vatNumRecId;
                    TaxExemptNumberSourceType vatNumSourceType;
                    LedgerJournalTransTaxExtension extensionTable;
                    if (vatMap.TableId == tableNum(LedgerJournalTrans))
                    {
                        LedgerJournalTrans ledgerJournalTrans = vatMap as ledgerJournalTrans;
                        extensionTable = ledgerJournalTrans.ledgerJournalTransTaxExtension();
                        vatNumRecId = extensionTable.VATNumRecId;
                        vatNumSourceType = extensionTable.VATNumTableType;
                    }
                    else
                    {
                        vatNumRecId = vatMap.VATNumRecId;
                        vatNumSourceType = vatMap.VATNumTableType;
                    }

                    if (vatMap && (!vatNumRecId || !vatNumSourceType))
                    {
                        if (vatMap.TableId == tableNum(LedgerJournalTrans))
                        {
                            LedgerJournalTrans ledgerJournalTrans = vatMap as ledgerJournalTrans;
                            extensionTable.VATNumRecId = taxRegistration.RecId;
                            extensionTable.VATNumTableType = TaxExemptNumberSourceType::TaxRegistration;
                            ledgerJournalTrans.packExtensionTable(extensionTable);
                        }
                        else
                        {
                            vatMap.VATNumRecId = taxRegistration.RecId;
                            vatMap.VATNumTableType = TaxExemptNumberSourceType::TaxRegistration;
                        }
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxVATNumTable find(
        VATNum _vatNum,
        AddressCountryRegionId _countryRegionId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxVATNumTable taxVATNumTable;
        ;

        taxVATNumTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxVATNumTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxVATNumTable
            where
            taxVATNumTable.vatNum == _vatNum &&
                    taxVATNumTable.CountryRegionId == _countryRegionId;

        return taxVATNumTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVATNumMandatory</Name>
				<Source><![CDATA[
    static boolean isVATNumMandatory(MandatoryVATNum _mandatoryVATNum, Common _common, str _parm = '')
    {
        #isoCountryRegionCodes
        VATNum                  vatNum;
        AddressCountryRegionId  countryRegionId;

        if (_mandatoryVATNum == TaxVATNumCountryRegionType::None)
            return false;

        vatNum = TaxVATNumTable::resolveVATNumFromTable(_common, _parm);

        if (!vatNum)
        {
            countryRegionId = TaxVATNumTable::resolveCountryRegionFromTable(_common);

            if (!countryRegionId)
            {
                return false;
            }

            if (countryRegionId == #isoBE && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
            {
                return false;
            }

            if (_mandatoryVATNum == TaxVATNumCountryRegionType::EU)
            {
                if (IntrastatCountryRegionParameters::isInEU(countryRegionId))
                    return true;
            }
            if (_mandatoryVATNum == TaxVATNumCountryRegionType::DomesticEU)
            {
                if (IntrastatCountryRegionParameters::isInEU(countryRegionId) || IntrastatCountryRegionParameters::isDomestic(countryRegionId))
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefVATNum</Name>
				<Source><![CDATA[
    static void jumpRefVATNum(Common common, Object object, str parm = '')
    {
        Args            args;
        MenuFunction    menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(TaxVATNumTable), MenuItemType::Display);

        args = new Args(formStr(TaxVATNumTable));
        args.record(common);
        args.caller(object);
        args.parm(parm);

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVATNum</Name>
				<Source><![CDATA[
    static void lookupVATNum (FormStringControl _ctrl, Common _common)
    {
        Args                args = new Args();
        Object              formRun;
        DirPartyMap         dirPartyMap;

        dirPartyMap = TaxVATNumTable::getTaxIdOriginator(_common);

        args.name(formStr(RegNumTaxIdLookup));
        args.caller(_ctrl);

        args.callerFormControl(_ctrl);

        args.record(dirPartyMap);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        if (SysDictTable::isTableMapped(tableNum(TaxExemptVATNumMap), _common.TableId))
        {
            formRun.initTaxExemptVATNumMap(_common);
        }

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdOriginator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets source of TaxId registration number for given cursor.
    /// </summary>
    /// <param name = "_common"> The cusror for processing.</param>
    /// <returns>The cusrosr of the DirPartyMap type that can contain TaxId registration number for given cursor.</returns>
    private static DirPartyMap getTaxIdOriginator(Common _common)
    {
        DirPartyMap dirPartyMap;

        if (SysDictTable::isTableMapped(tableNum(DirPartyMap), _common.TableId))
        {
            dirPartyMap = _common;
        }
        else
        {
            switch (_common.TableId)
            {
                case tablenum(CustInvoiceTable):
                    CustInvoiceTable custInvoiceTable = _common;
                    dirPartyMap = custInvoiceTable.custTable_InvoiceAccount();
                    break;
                case tablenum(SalesTable):
                    SalesTable salesTable = _common;
                    dirPartyMap = salesTable.custTable_InvoiceAccount();
                    break;
                case tablenum(EUSalesList):
                    EUSalesList salesList = _common;
                    if (salesList.Direction == ModuleSalesPurch::Sales)
                    {
                        dirPartyMap = salesList.custTable();
                    }
                    else
                    {
                        dirPartyMap = salesList.vendTable();
                    }
                    break;
                case tablenum(LedgerJournalTrans):
                    LedgerJournalTrans ledgerJournalTrans = _common;
                    if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                    {
                        dirPartyMap = ledgerJournalTrans.findCustTable();
                    }
                    else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                    {
                        dirPartyMap = ledgerJournalTrans.findVendTable();
                    }
                    break;
                case tablenum(PurchTable):
                    PurchTable purchTable = _common;
                    dirPartyMap = purchTable.vendTable_InvoiceAccount();
                    break;
                case tablenum(RCSalesList_UK):
                    RCSalesList_UK rCSalesList_UK = _common;
                    dirPartyMap = rCSalesList_UK.custTable();
                    break;
                case tablenum(SalesQuotationTable):
                    SalesQuotationTable salesQuotationTable = _common;
                    dirPartyMap = salesQuotationTable.custTable_InvoiceAccount();
                    break;
                case tablenum(VendInvoiceInfoTable):
                    VendInvoiceInfoTable vendInvoiceInfoTable = _common;
                    dirPartyMap = vendInvoiceInfoTable.vendTable_InvoiceAccount();
                    break;
                case tableNum(PurchRFQTable):
                    if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
                    {
                        PurchRFQTable purchRFQTable = _common;
                        dirPartyMap = purchRFQTable.vendTable();
                    }
                    break;
            }
        }

        return dirPartyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    static VATName name(VATNum                  _vatNum,
                        AddressCountryRegionId  _countryRegionId)
    {
        return TaxVATNumTable::find(_vatNum, _countryRegionId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCountryRegionFromTable</Name>
				<Source><![CDATA[
    static AddressCountryRegionId resolveCountryRegionFromTable(Common common)
    {
        LogisticsAddressCountryRegionId  countryRegionId;
        CustTable               custTable;
        CompanyInfo             companyInfo;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTable        custInvoiceTable;
        PurchTable              purchTable;
        EUSalesList             euSalesList;
        SalesTable              salesTable;
        SalesQuotationTable     salesQuotationTable;
        TmpCustVendVolume       tmpCustVendVolume;
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendTable               vendTable;
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTrans      ledgerJournalTransMain;
        TaxVATNumTable          taxVATNumTable;
        TaxReport347Table       taxReport347Table;
        RCSalesList_UK          rcSalesList;

        switch (common.TableId)
        {
            case tableNum(CustTable)                :   custTable           = common;
                countryRegionId     = custTable.postalAddress().CountryRegionId;
                break;
            case tableNum(CompanyInfo)              :   companyInfo         = common;
                countryRegionId     = companyInfo.postalAddress().CountryRegionId;
                break;
            case tableNum(CustInvoiceJour)          :   custInvoiceJour     = common;
                countryRegionId     = LogisticsPostalAddress::findRecId(custInvoiceJour.InvoicePostalAddress).CountryRegionId;
                break;
            case tableNum(CustInvoiceTable)         :   custInvoiceTable    = common;
                countryRegionId     = LogisticsLocationEntity::location2PostalAddress(custInvoiceTable.DeliveryLocation).CountryRegionId;
                break;
            case tableNum(EUSalesList)              :   euSalesList         = common;
                countryRegionId     = euSalesList.CountryRegionId;
                break;
            case tableNum(PurchTable)               :   purchTable          = common;
                countryRegionId     = TaxVATNumTable::resolveCountryRegionFromTable(purchTable.vendTable_OrderAccount());
                break;
            case tableNum(SalesTable)               :   salesTable          = common;
                countryRegionId     = TaxVATNumTable::resolveCountryRegionFromTable(salesTable.custTable_CustAccount());

                break;

            case tableNum(SalesQuotationTable)      :   salesQuotationTable = common;
                                                        if (salesQuotationTable.CustAccount)
                {
                    countryRegionId = TaxVATNumTable::resolveCountryRegionFromTable(salesQuotationTable.custTable_InvoiceAccount());
                }
                if (salesQuotationTable.BusRelAccount)
                {
                    countryRegionId = salesQuotationTable.deliveryAddress().CountryRegionId;
                }
                break;

            case tableNum(TmpCustVendVolume)        :   tmpCustVendVolume   = common;
                countryRegionId     = tmpCustVendVolume.CountryRegionId;
                break;
            case tableNum(VendInvoiceJour)          :   vendInvoiceJour     = common;
                countryRegionId     = TaxVATNumTable::resolveCountryRegionFromTable(vendInvoiceJour.vendTable_InvoiceAccount());
                break;
            case tableNum(VendInvoiceInfoTable)     :   vendInvoiceInfoTable = common;
                countryRegionId     = TaxVATNumTable::resolveCountryRegionFromTable(vendInvoiceInfoTable.vendTable_InvoiceAccount());
                break;
            case tableNum(VendTable)                :   vendTable           = common;
                countryRegionId     = vendTable.postalAddress().CountryRegionId;
                break;
            case tableNum(LedgerJournalTrans)       :   ledgerJournalTrans   = common;
                                                        switch (ledgerJournalTrans.AccountType)
                {
                    case LedgerJournalACType::Cust:
                        countryRegionId = TaxVATNumTable::resolveCountryRegionFromTable(CustTable::findByLedgerDimension(ledgerJournalTrans.parmLedgerDimension()));
                        break;
                    case LedgerJournalACType::Vend:
                        countryRegionId = TaxVATNumTable::resolveCountryRegionFromTable(VendTable::findByLedgerDimension(ledgerJournalTrans.parmLedgerDimension()));
                        break;
                    case LedgerJournalACType::Ledger:
                                                                ledgerJournalTransMain = LedgerJournalTrans::mainAccount(ledgerJournalTrans.JournalNum,
                                                                                                                         ledgerJournalTrans.Voucher);
                        if (ledgerJournalTransMain.AccountType == LedgerJournalACType::Cust ||
                                                                    ledgerJournalTransMain.AccountType == LedgerJournalACType::Vend)
                        {
                            countryRegionId = TaxVATNumTable::resolveCountryRegionFromTable(ledgerJournalTransMain);
                        }
                        break;
                }
                break;
            case tableNum(TaxVATNumTable)           :   taxVATNumTable      = common;
                countryRegionId     = taxVATNumTable.CountryRegionId;
                break;

            case tableNum(TaxReport347Table)        :   taxReport347Table   = common;
                countryRegionId     = CompanyInfo::find().postalAddress().CountryRegionId;
                break;

            case tableNum(RCSalesList_UK)           :   rcSalesList         = common;
                countryRegionId     = rcSalesList.CountryRegion;
                break;

            case tableNum(LvOtherClients)           :
                LvOtherClients lvOtherClients         = common;
                countryRegionId     = DirParty::primaryPostalAddress(lvOtherClients.Organization).CountryRegionId;
                break;
    }

        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveVATNumFromTable</Name>
				<Source><![CDATA[
    static VATNum resolveVATNumFromTable(Common common, str parm = '')
    {
        VATNum                  vatNum;
        CustTable               custTable;
        CompanyInfo             companyInfo;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTable        custInvoiceTable;
        PurchTable              purchTable;
        EUSalesList             euSalesList;
        TaxReport347Table       taxReport347Table;
        TaxReport347Tenants     taxReport347Tenants;
        TaxReport347Trans       taxReport347Trans;
        SalesTable              salesTable;
        TmpCustVendVolume       tmpCustVendVolume;
        VendInvoiceJour         vendInvoiceJour;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendTable               vendTable;
        LedgerJournalTrans      ledgerJournalTrans;
        TaxVATNumTable          taxVATNumTable;
        RCSalesList_UK          rcSalesList;

        switch (common.TableId)
        {
            case tableNum(CustTable)                :   custTable   = common;
                vatNum      = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID);
                break;
            case tableNum(CompanyInfo)              :   companyInfo = common;
                                                        switch (fieldName2id(tableNum(CompanyInfo), parm))
                {
                    case  fieldNum(CompanyInfo, vatNum)         :   vatNum  = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID);
                        break;
                    case  fieldNum(CompanyInfo, ImportVATNum)   :   vatNum  = companyInfo.ImportVATNum;
                        break;
                }
                break;
            case tableNum(CustInvoiceJour)          :   custInvoiceJour = common;
                vatNum      = custInvoiceJour.vatNum;
                break;
            case tableNum(CustInvoiceTable)         :   custInvoiceTable = common;
                vatNum      = custInvoiceTable.vatNum;
                break;
            case tableNum(EUSalesList)              :   euSalesList = common;
                vatNum      = euSalesList.vatNum;
                break;
            case tableNum(PurchTable)               :   purchTable = common;
                vatNum      = purchTable.vatNum;
                break;
            case tableNum(TaxReport347Table)        :   taxReport347Table = common;
                vatNum      = taxReport347Table.vatNum;
                break;
            case tableNum(TaxReport347Tenants)      :   taxReport347Tenants = common;
                vatNum      = taxReport347Tenants.vatNum;
                break;
            case tableNum(TaxReport347Trans)        :   taxReport347Trans = common;
                vatNum      = taxReport347Trans.vatNum;
                break;
            case tableNum(SalesTable)               :   salesTable = common;
                vatNum      = salesTable.vatNum;
                break;
            case tableNum(TmpCustVendVolume)        :   tmpCustVendVolume = common;
                vatNum      = tmpCustVendVolume.vatNum;
                break;
            case tableNum(VendInvoiceJour)          :   vendInvoiceJour = common;
                vatNum      = vendInvoiceJour.vatNum;
                break;
            case tableNum(VendInvoiceInfoTable)     :   vendInvoiceInfoTable = common;
                vatNum      = vendInvoiceInfoTable.vatNum;
                break;
            case tableNum(VendTable)                :   vendTable   = common;
                vatNum      = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID);
                break;
            case tableNum(LedgerJournalTrans)       :   ledgerJournalTrans = common;
                vatNum      = ledgerJournalTrans.vatNumJournal;
                break;
            case tableNum(TaxVATNumTable)           :   taxVATNumTable = common;
                vatNum      = taxVATNumTable.vatNum;
                break;

            case tableNum(RCSalesList_UK)           :   rcSalesList = common;
                vatNum      = rcSalesList.vatNum;
                break;

            case tableNum(LvOtherClients)           :
                LvOtherClients lvOtherClients         = common;
                vatNum     = lvOtherClients.getVatNumPrimaryRegistrationNumber();
                break;
        }
        return vatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stripVATNum</Name>
				<Source><![CDATA[
    static VATNum stripVATNum(VATNum _vatNum, EUSalesListTax _taxCode)
    {
        VATNum vatNum;
        ;
        vatNum = strRem(_vatNum,' -');

        if (strScan(vatNum,_taxCode,1,strLen(_taxCode)) == 1)
        {
            vatNum = strDel(vatNum,1,strLen(_taxCode));
        }

        return vatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stripVATNumSimple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the sales tax code prefix from the specified tax exempt number.
    /// </summary>
    /// <param name="_vatNum">
    /// A tax exempt number from which to remove the sales tax code.
    /// </param>
    /// <returns>
    /// The tax exempt number without the sales tax code prefix.
    /// </returns>
    public static VATNum stripVATNumSimple(VATNum _vatNum)
    {
        TaxVATNumTable taxVATNumTable;
        EUSalesListTax salesTaxCode;

        select firstonly CountryRegionId from taxVATNumTable
            where taxVATNumTable.VatNum == _vatNum;

        AddressCountryRegionId countryRegionId = taxVATNumTable.CountryRegionId;

        if (!countryRegionId && FeatureStateProvider::isFeatureEnabled(DutchICPDeclarationByTaxId_Feature::instance()))
        {
            countryRegionId = TaxVATNumTable::getCountryRegionIdFromTaxRegistrationNumber(_vatNum);
        }

        salesTaxCode = TaxCountryRegionParameters::find(countryRegionId).SalesTaxCode;

        return TaxVATNumTable::stripVATNum(_vatNum, salesTaxCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionIdFromTaxRegistrationNumber</Name>
				<Source><![CDATA[
    private static AddressCountryRegionId getCountryRegionIdFromTaxRegistrationNumber(TaxRegistrationNumber _registrationNumber)
    {
        TaxRegistrationTypeApplicabilityRule registrationRule;
        TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
        TaxRegistration taxRegistration;
        utcDateTime minDateCheck = DateTimeUtil::minValue();
        utcDateTime maxDateCheck = DateTimeUtil::maxValue();

        select firstonly validTimeState(minDateCheck, maxDateCheck) CountryRegionId from registrationRule
            exists join taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == registrationRule.RecId
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID
            exists join taxRegistration
                where taxRegistration.TaxRegistrationTypeApplicabilityRule == registrationRule.RecId
                   && taxRegistration.RegistrationNumber == _registrationNumber;

        return registrationRule.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxVATNumTableEnabled</Name>
				<Source><![CDATA[
    static boolean taxVATNumTableEnabled()
    {
        return new DictConfigurationKey(configurationKeyNum(LedgerBasicSalesTax)).enabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102255";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS330459</DeveloperDocumentation>
	<FormRef>TaxVATNumTable</FormRef>
	<Label>@SYS55109</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VATNum</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TaxVATNumIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxVATNumIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxExemptNumberTable</Name>
			<Label>@SYS55109</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxVATNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VATNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CountryRegionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>