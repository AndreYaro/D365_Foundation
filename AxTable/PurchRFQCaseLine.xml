<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQCaseLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountConsumptionLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger account for consumption transaction.
    /// </summary>
    /// <returns>
    /// LedgerAccount for the consumption transaction.
    /// </returns>
    LedgerDimensionDefaultAccount accountConsumptionLedgerDimension()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        InventPostingAccountItemLedgerDimensionParameters searchParameter = this.buildAccountItemLedgerDimensionParameter(
            InventAccountType::PurchConsump,
            InventTable::itemGroupIdByItemId(this.ItemId));

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            searchParameter.InventDim_RU = this.inventDim();
        }
        
        return InventPosting::accountItemLedgerDimensionFromParameters(searchParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountReceiptLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountReceiptLedgerDimension()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::PurchReceipt,
                InventTable::itemGroupIdByItemId(this.ItemId),
                this.inventDim()));
        }
        // </GEERU>
        // <GCN>
        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            return InventPosting::accountItemExtendParmFromParameter_CN(this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::PurchReceipt,
                this.inventTable().itemGroupId(),
                null,
                InventPostingExtendParm_CN::constructInventDim(this.inventDim()).parmInventSiteId()));
        }
        // </GCN>

        return InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter(
                InventAccountType::PurchReceipt,
                InventTable::itemGroupIdByItemId(this.ItemId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_inventAccountType">An inventory account type.</param>
    /// <param name="_itemGroupId">An item group Id.</param>
    /// <param name="_inventDim">An inventory dimension.</param>
    /// <param name="_siteRelation">An inventory site relation.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType, ItemGroupId _itemGroupId, InventDim _inventDim = null, InventSiteRelation_CN _siteRelation = '')
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            this.ItemId,
            _itemGroupId,
             0,
            '',
            '',
            '',
            _inventDim,
            _siteRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur _amountCur, Qty  _qty, TransDate _transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the company currency amount for a given amount.
    /// </summary>
    /// <param name="amountCur">
    /// The amount to convert.
    /// </param>
    /// <param name="exchRateDate">
    /// The date used to calculate the exchange rate; optional.
    /// </param>
    /// <param name="exchRate">
    /// The exchange rate to use, if known; optional.
    /// </param>
    /// <param name="exchrateSecondary">
    /// The secondary exchange rate to use, if known; optional.
    /// </param>
    /// <param name="exchRatesTriangulation">
    /// The exchange rate triangulation to use, if known; optional.
    /// </param>
    /// <returns>
    /// The amount in company currency.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountMST amountMST(AmountCur               amountCur,
                               TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                               ExchRate                exchRate                = 0,
                               ExchrateSecondary       exchrateSecondary       = 0,
                               ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown)
    {
        return this.salesPurchLineInterface().amountMST(amountCur, exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcGrossAmount(Qty    qty   = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcGrossAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur  calcGrossAmountExclTax(Qty  qty = this.PurchQty, TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().calcGrossAmountExclTax(qty, this.taxDate(transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty qty = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcLineAmount(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountExclTax(Qty         _qty          = this.PurchQty,
                                           TransDate   _transDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                           Tax         _tax          = null,
                                           boolean     _skipRounding = false)
    {
        return this.salesPurchLineInterface().calcLineAmountExclTax(_qty, _transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.PurchQty, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineDiscExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public DiscAmount calcLineDiscExclTax(Qty       qty       = this.PurchQty,
                                          TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 
                                          Tax       _tax      = null)
    {
        return this.salesPurchLineInterface().calcLineDiscExclTax(qty, this.taxDate(transDate), _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PurchRFQCaseLine</c> record buffer,
    /// from another <c>ReqPO</c> record buffer.
    /// </summary>
    /// <param name="_reqPO">
    /// The <c>ReqPO</c> record buffer.
    /// </param>
    void initFromReqTrans(ReqPO _reqPO)
    {
        ReqTrans          reqTransSettled;
        ReqTransCov       reqTransCov;
        ReqTrans          reqTrans;
        InventTransOrigin inventTransOrigin;
        SalesLine         salesLine;
        
        select count(RecId) from reqTransSettled
            exists join reqTransCov
                where reqTransCov.IssueRecId == reqTransSettled.RecId
            exists join reqTrans
                where reqTrans.RecId == reqTransCov.ReceiptRecId &&
                      reqTrans.RefType == _reqPO.RefType &&
                      reqTrans.RefId == _reqPO.RefId &&
                      reqTrans.PlanVersion == _reqPO.PlanVersion;

        if (reqTransSettled.RecId == 1) //No grouping of planned orders        
        {
            select RecId from reqTrans
                where reqTrans.RefType == _reqPO.RefType &&
                    reqTrans.RefId == _reqPO.RefId &&
                    reqTrans.PlanVersion == _reqPO.PlanVersion
                join RecId from reqTransCov
                    where reqTransCov.ReceiptRecId == reqTrans.RecId
                join RecId from reqTransSettled
                    where reqTransSettled.RecId == reqTransCov.IssueRecId &&
                        reqTransSettled.RefType == ReqRefType::Sales
                join RecId from inventTransOrigin
                    where inventTransOrigin.RecId == reqTransSettled.InventTransOrigin
                join RecId, ProjId, ActivityNumber, SalesId, InventTransId from salesLine
                    where salesLine.InventTransId == inventTransOrigin.InventTransId &&
                        salesLine.QtyOrdered == _reqPO.Qty && //planned order not split
                        salesLine.ProjId;
    
            if (salesLine) 
            {
                this.InventRefId        = salesLine.salesId;
                this.InventRefTransId   = salesLine.InventTransId;
                this.ItemRefType        = InventRefType::Sales;
                this.ProjId             = salesLine.ProjId;
                this.ActivityNumber     = salesLine.ActivityNumber;                    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOrdered</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public InventQty calcQtyOrdered(Qty purchQty = this.PurchQty)
    {
        return this.salesPurchLineInterface().calcQtyOrdered(purchQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditDisc</Name>
				<Source><![CDATA[
    // This method is called when setting disc fields
    public boolean canEditDisc()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the associated category record.
    /// </summary>
    /// <param name="_categoryId">
    /// The category <c>RecId</c> value to use; default value is the <c>CategoryId</c> field of the RFQ
    /// Case line.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; default value is false.
    /// </param>
    /// <returns>
    /// The associated category record.
    /// </returns>
    EcoResCategory category(PurchCategory _categoryId   = this.CategoryId,
                            boolean _forUpdate          = false)
    {
        return EcoResCategory::find(_categoryId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchRFQCaseLine</c> fields because the procurement category changed.
    /// </summary>
    void categoryIdChanged()
    {
        this.initFromEcoResCategory(this.category());
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the associated category name for the Request For Quotation (RFQ) case line.
    /// </summary>
    /// <returns>
    /// The associated category name for the RFQ Case line.
    /// </returns>
    display EcoResCategoryName categoryName()
    {
        return this.category().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInitFromInventTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean  checkInitFromInventTable(InventTable inventTable)
    {
        return this.salesPurchLineInterface().checkInitFromInventTable(inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemId</Name>
				<Source><![CDATA[
    boolean  checkItemId()
    {
        boolean  ok = true;

        if (this.orig().ItemId                      &&
            this.orig().ItemId != this.ItemId       &&
            this.InventTransId)
        {
            ok = checkFailed("@SYS19376");
        }

        if (ok && this.ItemId
            && !this.inventTable().hasProductDimensions()
            && this.InventDimId != InventDim::inventDimIdBlank()
            && !InventDistinctProductValidator::checkProductNotStopped(this.ItemId, InventItemOrderSetupType::Purch, this.inventDim(), false))
        {
            ok = false;
        }

        if (ok 
            && (this.purchRFQCaseTable().rfqType == PurchRFQType::PurchAgreement
                || this.purchRFQCaseTable().rfqType == PurchRFQType::PurchReq)
            && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            ok = checkFailed(strFmt("@PDS570", this.ItemId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a line number is unique within the scope of an order; if it is not, issues an
    /// error message.
    /// </summary>
    /// <returns>
    /// true if the line number is unique and StatusHigh is Create; otherwise, false.
    /// </returns>
    public boolean checkLineNumber()
    {
        boolean  ok = true;

        if (this.StatusHigh > PurchRFQStatus::Created)
        {
            ok = checkFailed("@EPR4460076");
        }

        return ok && TradeLineNumberManager::newLine(this).checkLineNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAddressReference</Name>
				<Source><![CDATA[
    public void clearAddressReference()
    {
        this.AddressRefRecId    = 0;
        this.AddressRefTableId  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    void convertCurrencyCode(CurrencyCode _currencyCode, TradeCurencyConversion _tradeCurrencyConversion = TradeCurencyConversion::ExchRate)
    {
        MarkupTrans markupTrans;

        ttsbegin;

        while select forupdate markupTrans
              index hint TableRecIdIdx
              where markupTrans.TransTableId  == this.TableId &&
                    markupTrans.TransRecId    == this.RecId   &&
                   !markupTrans.IsDeleted
        {
            markupTrans.convertCurrencyCode(_currencyCode);
            markupTrans.doUpdate();
        }

        this.PurchPrice   = ExchangeRateHelper::curPrice2CurPrice(this.PurchPrice, this.CurrencyCode, _currencyCode);
        this.LineDisc     = ExchangeRateHelper::curPrice2CurPrice(this.LineDisc, this.CurrencyCode, _currencyCode);
        this.MultiLnDisc  = ExchangeRateHelper::curPrice2CurPrice(this.MultiLnDisc, this.CurrencyCode, _currencyCode);
        this.PurchMarkup  = ExchangeRateHelper::curPrice2CurPrice(this.PurchMarkup, this.CurrencyCode, _currencyCode);
        this.LineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(this.LineAmount, this.CurrencyCode, _currencyCode);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.MaximumRetailPrice_IN = CurrencyExchangeHelper::curAmount2CurAmount(this.MaximumRetailPrice_IN, this.CurrencyCode, _currencyCode);
        }
        // </GIN>

        this.CurrencyCode = _currencyCode;
        this.updateBasedOnTradeCurrencyConversion(_tradeCurrencyConversion);
        this.LineAmount   = this.calcLineAmount();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnTradeCurrencyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the line amounts, price and discounts based on <c>TradeCurencyConversion</c>.
    /// </summary>
    /// <param name = "_tradeCurrencyConversion">A trade currency conversion value.</param>
    [Hookable]
    private void updateBasedOnTradeCurrencyConversion(TradeCurencyConversion _tradeCurrencyConversion)
    {
        switch (_tradeCurrencyConversion)
        {
            case TradeCurencyConversion::ExchRate:
                break;
            case TradeCurencyConversion::TradeAgreements:
                this.salesPurchLineInterface().resetPriceAgreement();
                this.setPriceDisc(this.inventDim());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>DefaultDimension</c> field of the
    /// <c>PurchRFQCaseLine</c> table. The method ensures that potential linked dimensions are not
    /// overwritten.
    /// </summary>
    /// <param name="_dimension">
    /// A dimension set that should be applied to the <c>DefaultDimension</c> field of the
    /// <c>PurchRFQCaseLine</c> table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>DimensionCopy</c> object that was previously initialized by using the current
    /// <c>PurchRFQCaseLine</c> buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>DefaultDimension</c> field of the
    /// <c>PurchRFQCaseLine</c> table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(DimensionDefault _dimension, DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this, CompanyInfo::findDataArea(curext()).RecId))
    {
        return _dimensionCopy.copy(_dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    void  createLine(boolean    _validation                = false,
                            boolean    _initFromPurchRFQCaseTable = false,
                            boolean    _initFromInventTable       = false,
                            boolean    _calcInventQty             = false,
                            boolean    _searchPrice               = false,
                            boolean    _updateRFQCaseTableStatus  = true)
    {
        PurchRFQCaseTable   purchRFQCaseTable;
        InventTable         inventTable;

        boolean         dropInvent= false;

        if (_initFromPurchRFQCaseTable)
        {
            purchRFQCaseTable= this.purchRFQCaseTable();
            this.initFromPurchRFQCaseTable(purchRFQCaseTable);
        }

        if (_initFromInventTable)
        {
            inventTable= this.inventTable();

            if (! this.checkInitFromInventTable(inventTable))
                throw error("@SYS18447");

            this.initFromInventTable(inventTable);
        }

        if (_calcInventQty)
            this.QtyOrdered = this.calcQtyOrdered();

        if (_searchPrice)
        {
            this.setPriceDisc(this.inventDim());
        }

        if (!this.LineNum)
            this.LineNum = PurchRFQCaseLine::lastLineNum(this.rfqCaseId) + 1.0;

        if (_validation && !this.validateWrite())
                throw error("@SYS18447");

        this.insert(dropInvent,_updateRFQCaseTableStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _showInfoDelReserv = true, boolean _updateRFQCaseTableStatus = true)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        PurchRFQCaseLineType purchRFQCaseLineType = this.type();
        
        purchRFQCaseLineType.deleting();

        // Mark the RFQ case line for deletion if the RFQ is in amendment, the line's status is not Created, and the
        // RFQ is not sourced from a purchase requisition.
        if (purchRFQCaseLineType.canMarkForDeletion())
        {
            this.ToBeDeleted = NoYes::Yes;
            this.write();
        }
        else
        {
            if (this.LineItemType == PurchRFQLineItemType::Item && this.InventTransId)
            {
                InventUpd_DeleteMovement  deleted;

                deleted = InventUpd_DeleteMovement::newMovement(InventMovement::construct(this), _showInfoDelReserv);
                if (deleted)
                {
                    deleted.updateNow();
                }
            }

            PurchRFQDeleteDocuRef::deleteDocuRef(this);

            super();

            if (_updateRFQCaseTableStatus)
            {
                PurchRFQCaseTable::find(this.rfqCaseId, true).updateStatus();
            }
        }

        purchRFQCaseLineType.deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    PurchLineDlvDate deliveryDate(PurchLineDlvDate blankDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        if (this.ConfirmedDlv)
            return this.ConfirmedDlv;

        if (this.DeliveryDate)
            return this.DeliveryDate;

        if (this.purchRFQCaseTable().DeliveryDate)
            return this.purchRFQCaseTable().DeliveryDate;

        return blankDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateTime</Name>
				<Source><![CDATA[
    TransDateTime deliveryDateTime()
    {
        return DateTimeUtil::newDateTime(this.DeliveryDate, 0 , DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryTerm</Name>
				<Source><![CDATA[
    DlvTermId  deliveryTerm()
    {
        return this.purchRFQCaseTable().DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount  discAmount()
    {
        return PriceDisc::discAmount(PurchParameters::find().Disc, this.LineDisc, this.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct   discPercent()
    {
        return PriceDisc::discPercent(PurchParameters::find().Disc, this.LinePercent, this.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBOM</Name>
				<Source><![CDATA[
    void  expandBOM(TmpFrmVirtual  _tmpFrmVirtual, BOM tmpBOM)
    {
        PurchRFQCaseTable   purchRFQCaseTable;
        PurchRFQCaseLine    purchRFQCaseLine;
        BOMCalcData         bomCalcData;
        InventTable         inventTable;
        RouteId             routeNum;
        TradeLineNumberManager  lineNumberManager;
        Counter             x = 1;

        ttsbegin;

        purchRFQCaseTable   = this.purchRFQCaseTable();
        inventTable         = this.inventTable();
        bomCalcData         = BOMCalcData::newInventTable(this.QtyOrdered,inventTable);
        routeNum            = inventTable.routeId(purchRFQCaseTable.DeliveryDate, this.QtyOrdered, this.inventDim());
        lineNumberManager   = TradeLineNumberManager::newLine(this);
        lineNumberManager.moveLineToLast(false);

        while select _tmpFrmVirtual
        {
            purchRFQCaseLine.clear();
            select tmpBOM where tmpBOM.RecId == _tmpFrmVirtual.RecordNo;

            purchRFQCaseLine.initFromPurchRFQCaseTable(this.purchRFQCaseTable());
            purchRFQCaseLine.initFromBOM(tmpBOM, this);
            purchRFQCaseLine.setAddressFromPurchRFQCaseLine(this);

            purchRFQCaseLine.QtyOrdered	   = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(tmpBOM.ItemId,
																												   tmpBOM.InventDimId,
																												   BOMCalcConsumption::construct(tmpBOM.Formula, bomCalcData).calcConsumption(tmpBOM,
																																															  Route::accError(routeNum,
																																																			  tmpBOM.OprNum)),
																												   tmpBOM.UnitId,
																												   purchRFQCaseLine.inventTable().inventUnitId(),
																												   NoYes::Yes);

            purchRFQCaseLine.PurchQty	   = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(tmpBOM.ItemId,
																												   tmpBOM.InventDimId,
																												   purchRFQCaseLine.QtyOrdered,
																												   purchRFQCaseLine.inventTable().inventUnitId(),
																												   purchRFQCaseLine.PurchUnit,
																												   NoYes::Yes);

            purchRFQCaseLine.LineNum       = this.LineNum + 0.001 * x; //ensure unique line number before IC line is created
            purchRFQCaseLine.RemainPurchPhysical       = purchRFQCaseLine.PurchQty;
            purchRFQCaseLine.RemainInventPhysical      = purchRFQCaseLine.QtyOrdered;
            lineNumberManager.setLine(purchRFQCaseLine);
            lineNumberManager.preUpdateLineNumber(false);
            purchRFQCaseLine.createLine(true,false,false,false,true);

            purchRFQCaseLine.write();
            lineNumberManager.postUpdateLineNumber();
            x++;
        }

        while select _tmpFrmVirtual
        {
            this.resetInvent();
            break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount based on the line amount passed.
    /// </summary>
    /// <param name="_lineamount">
    /// The amount of the particular line.
    /// </param>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN(AmountCur _lineamount)
    {
        Amount      notionalAmount;
        Amount      markupTotalValue;
        MarkupTrans markupTransLoc;
        Amount      notionalCharges;
        Amount      miscChargeAmount;

        this.LineAmount = _lineamount;

        while select Value, NotionalPct_IN, CurrencyCode, MarkupCategory, MarkUpAllocateAfter_IN
            from markupTransLoc
            where markupTransLoc.TransTableId == this.TableId
               && markupTransLoc.TransRecId   == this.RecId
        {
            if (this.TableId != tableName2id('CustInvoiceTable'))
            {
                markupTotalValue    = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, this.CurrencyCode);
            }
            else
            {
                markupTotalValue    = markupTransLoc.Value;
            }

            notionalCharges     = markupTransLoc.NotionalPct_IN/100;

            notionalAmount = this.LineAmount * notionalCharges;

            if (notionalAmount == 0)
            {
                miscChargeAmount += markupTotalValue;
            }
            else if (markupTotalValue == 0)
            {
                miscChargeAmount += notionalAmount;
            }
            else if (notionalAmount < markupTotalValue)
            {
                miscChargeAmount += notionalAmount;
            }
            else
            {
                miscChargeAmount += markupTotalValue;
            }
        }
        return miscChargeAmount + this.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method initializes RFQ case line from agreement line.
    /// </summary>
    /// <param name="_agreementLine">
    /// Purchase agreement order line to initialize from
    /// </param>
    /// <param name="copyPrecisely">
    /// Copy inventory dimensions and category from agreement line
    /// </param>
    /// <param name="copyPriceDisc">
    /// Copy discounts from agreement line
    /// </param>
    /// <param name="copyQtyAmount">
    /// Copy inventory dimensions id and units from agreement line. Quantity or Amount will be copied from qtyAmount parameter
    /// </param>
    /// <param name="qtyAmount">
    /// Quantity or Amount. It is only taken into account if copyQtyAmount parameter is true.
    /// </param>
    /// <param name="_cwQty">
    /// A real value that represents a catch weight quantity.
    /// </param>
    void initFromAgreementLine(
        AgreementLine   _agreementLine,
        boolean         copyPrecisely   = true,
        boolean         copyPriceDisc   = true,
        boolean         copyQtyAmount   = true,
        PurchLineAmount qtyAmount       = 0
        ,PdsCWInventQty _cwQty          = 0
        )
    {
        PurchRFQLine        rfqLine;
        ItemName            itemName;
        AgreementHeader     agreementHeader;

        AgreementLineDefault agreementLineDefault = AgreementLineDefault::findAgreementLine(_agreementLine.RecId);
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLineVolumeCommitment agreementLineVolumeCommitment;

        InventDim   inventDim;

        if (_agreementLine is AgreementLineQuantityCommitment)
        {
            agreementLineQuantityCommitment = _agreementLine as AgreementLineQuantityCommitment;
        }
        else
        {
            agreementLineVolumeCommitment = _agreementLine as AgreementLineVolumeCommitment;
        }

        this.LineItemType = _agreementLine.isItemBased() ? PurchRFQLineItemType::Item : PurchRFQLineItemType::Category;

        this.ItemId             = _agreementLine.ItemId;
        this.CategoryId         = _agreementLine.Category;

        if (!_agreementLine.isItemBased())
        {
            select firstonly RecId,ItemName from rfqLine
                join RecId from agreementHeader
                    where   agreementHeader.RecId == _agreementLine.Agreement
                    &&      rfqLine.AgreementId == agreementHeader.DocumentTitle
                    &&      rfqLine.CategoryId == _agreementLine.Category;

            itemName = rfqLine.ItemName;
        }

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            this.initFromInventTable(this.inventTable());

            if (copyQtyAmount)
            {
                this.setInventDimId(_agreementLine.InventDimId);
                if (PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    this.PdsCWQty = _cwQty;
                    this.PurchQty = PdsCatchWeight::inventQty(this.ItemId, this.PdsCWQty, agreementLineQuantityCommitment.ProductUnitOfMeasure);
                }
                else
                {
                    this.PurchQty         = qtyAmount;
                }
                this.PurchUnit        = agreementLineQuantityCommitment.ProductUnitOfMeasure;
                this.QtyOrdered       = agreementLineQuantityCommitment.CommitedQuantity == qtyAmount ?
                    agreementLineQuantityCommitment.CommitedQuantity : this.calcQtyOrdered();
            }
            else
            {
                inventDim             = this.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _agreementLine.inventDim(), inventDim);
                this.setInventDimIdFromInventDim(inventDim);
            }

            if (copyPriceDisc)
            {
                this.PurchPrice       = agreementLineQuantityCommitment.PricePerUnit;
                this.PriceUnit        = agreementLineQuantityCommitment.PriceUnit;
                this.LinePercent      = _agreementLine.LineDiscountPercent;
                this.LineDisc         = agreementLineQuantityCommitment.LineDiscountAmount;
                this.LineAmount       = this.calcLineAmount();
            }
        }
        else    // category-based line
        {
            if (copyQtyAmount)
            {
                this.setInventDimId(_agreementLine.InventDimId);
                this.LineAmount      = qtyAmount;
            }
            else
            {
                inventDim            = this.inventDim();
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _agreementLine.inventDim(), inventDim);
                this.setInventDimIdFromInventDim(inventDim);
            }

            if (copyPriceDisc)
            {
                this.LinePercent     = _agreementLine.LineDiscountPercent;
            }

            if (itemName)
            {
                this.ItemName = itemName;
            }
            else
            {
                this.ItemName = EcoResCategory::find(this.CategoryId).Name;
            }
        }

        if (copyPrecisely)
        {
            this.setInventDimId(_agreementLine.InventDimId);
            this.CategoryId          = _agreementLine.Category;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    void initFromBOM(BOM                bom,
                     PurchRFQCaseLine   parentRFQCaseLine)
    {
        InventDim   inventDim;
        InventDim   inventDimBom;

        if (this.InventDimId)
        {
            inventDim = this.inventDim();
        }

        this.ItemId         = bom.ItemId;
        this.LineItemType   = PurchRFQLineItemType::Item;
        inventDimBom = bom.inventDim();
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, inventDimBom, inventDim);
        inventDim.InventLocationId  = inventDimBom.InventLocationId;
        inventDim.initFromInventLocation(inventDim.inventLocation());
        this.setInventDimIdFromInventDim(inventDim);

        this.initFromInventTable(this.inventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchRFQCaseLine</c> fields based on the procurement category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The procurement category.
    /// </param>
    void initFromEcoResCategory(EcoResCategory _ecoResCategory)
    {
        if (this.ProjId)
        {
            ProjInventJournalTransMapForm::construct(this).initFromEcoResCategory(_ecoResCategory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes line values based on the <c>InventTable</c> record.
    /// </summary>
    /// <param name = "inventTable"></param>
    /// <param name = "_executeOnlyIfProductIsFullySpecified"></param>
    public void initFromInventTable(InventTable inventTable, boolean _executeOnlyIfProductIsFullySpecified = false)
    {
        this.type().initFromInventTable(inventTable, _executeOnlyIfProductIsFullySpecified);

        if (this.ProjId)
        {
            ProjInventJournalTransMapForm::construct(this).initFromInventTable(this.inventTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPriceDisc</Name>
				<Source><![CDATA[
    public void initFromPriceDisc(PriceDisc_Price priceDisc, PriceDiscPolicyCheckPolicy _checkPolicy = null, boolean _initDateFields = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the category of the journal line with the default category of the project activity passed in as a parameter.
    /// </summary>
    /// <param name="_projActivity">
    ///    The project activity used to initialize the category of the journal line.
    /// </param>
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
            ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Item)
        {
            return;
        }

        this.ProjCategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PurchRFQCaseLine</c> record buffer,
    /// from a <c>ProjTable</c> record buffer.
    /// </summary>
    /// <param name="_projTable">
    /// The <c>ProjTable</c> record buffer.
    /// </param>
    public void initFromProjTable(ProjTable _projTable)
    {
        ProjInventJournalTransMapForm::construct(this).initFromProjTable(_projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method initializes RFQ case line from purchase order line.
    /// </summary>
    /// <param name="_purchLine">
    /// Purchase order line to initialize from
    /// </param>
    /// <param name="copyPrecisely">
    /// Copy dimension, inventory dimensions id, name, external item id and address from purchase order line
    /// </param>
    /// <param name="copyPriceDisc">
    /// Copy discounts from purchase order line
    /// </param>
    /// <param name="copyQty">
    /// Copy inventory dimensions id and units from purchase order line. Quantity will be copied from qty parameter
    /// </param>
    /// <param name="qty">
    /// Quantity to assign to PurchQty field. It is only taken into account if copyQty parameter is true.
    /// </param>
    /// <param name="_cwQty">
    /// Optional parameter containing the catch weight Quantity to assign to PdsCWQty field.
    /// It is only taken into account if copyQty parameter is true. Default is the value for this
    /// field in the _purchLine parameter.
    /// </param>
    void  initFromPurchLine(PurchLine   _purchLine,
                            boolean     copyPrecisely = true,
                            boolean     copyPriceDisc = true,
                            boolean     copyQty       = true,
                            Qty         qty           = _purchLine.PurchQty
                            ,
                            PdsCWInventQty _cwQty     = _purchLine.PdsCWQty
                            )
    {
        InventDim   inventDim;

        this.LineItemType = _purchLine.isCategoryBased() ?
            PurchRFQLineItemType::Category : PurchRFQLineItemType::Item;

        this.CategoryId             = _purchLine.ProcurementCategory;
        this.ItemId                 = _purchLine.ItemId;

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            this.initFromInventTable(this.inventTable());
        }

        this.AssetId              = _purchLine.AssetId;
        this.AssetBookId          = _purchLine.AssetBookId;
        this.AssetTransTypePurch  = _purchLine.AssetTransTypePurch;

        if (copyQty)
        {
            this.setInventDimId(_purchLine.InventDimId);
            this.PurchQty         = qty;
            this.PurchUnit        = _purchLine.PurchUnit;
            this.QtyOrdered       = _purchLine.PurchQty == qty ? _purchLine.QtyOrdered : this.calcQtyOrdered();
            if (#PdsCatchWeightEnabled)
            {
                this.PdsCWQty       = _cwQty;
            }
        }
        else
        {
            inventDim             = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _purchLine.inventDim(), inventDim);
            this.setInventDimIdFromInventDim(inventDim);
        }

        if (copyPriceDisc)
        {
            this.PurchPrice       = _purchLine.PurchPrice;
            this.PriceUnit        = _purchLine.PriceUnit;
            this.LinePercent      = _purchLine.LinePercent;
            this.LineDisc         = _purchLine.LineDisc;
            this.MultiLnDisc      = _purchLine.MultiLnDisc;
            this.MultiLnPercent   = _purchLine.MultiLnPercent;
            this.PurchMarkup      = _purchLine.PurchMarkup;
            this.LineAmount       = _purchLine.LineAmount;
        }

        if (copyPrecisely)
        {
            this.setInventDimId(_purchLine.InventDimId);
            this.CategoryId       = _purchLine.ProcurementCategory;
            this.Name             = _purchLine.Name;
            this.ExternalItemId   = _purchLine.ExternalItemId;
            this.DefaultDimension = this.copyDimension(_purchLine.DefaultDimension);

            this.setAddressFromPurchLine(_purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PurchRFQCaseLine</c> record buffer, from a <c>PurchReqLine</c> record
    /// buffer.
    /// </summary>
    /// <param name="_purchReqLine">
    /// The <c>PurchReqLine</c> record buffer.
    /// </param>
    /// <param name="_copyPrecisely">
    /// A Boolean value indicates whether to copy the name and dimension data.
    /// </param>
    /// <param name="_copyPriceDisc">
    /// A Boolean value that indicates whether to copy the price discount data.
    /// </param>
    /// <param name="_qty">
    /// The quantity to use for the purchase quantity.
    /// </param>
    void  initFromPurchReqLine(PurchReqLine _purchReqLine,
                               boolean          _copyPrecisely = true,
                               boolean          _copyPriceDisc = true,
                               Qty              _qty           = _purchReqLine.PurchQty)
    {
        this.LineItemType = (_purchReqLine.LineType == PurchReqLineType::Category) ?
            PurchRFQLineItemType::Category : PurchRFQLineItemType::Item;

        this.CategoryId             = _purchReqLine.ProcurementCategory;
        this.ItemId                 = _purchReqLine.ItemId;

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            this.initFromInventTable(this.inventTable());
        }

        this.setInventDimId(_purchReqLine.InventDimId);
        this.PurchQty           = _qty;
        this.PurchUnit          = UnitOfMeasure::find(_purchReqLine.PurchUnitOfMeasure).Symbol;
        this.QtyOrdered         = _purchReqLine.PurchQty;

        if (_copyPriceDisc)
        {
            this.CurrencyCode    = _purchReqLine.CurrencyCode;
            this.PurchPrice         = _purchReqLine.PurchPrice;
            this.PriceUnit          = _purchReqLine.PriceUnit;
            this.LinePercent        = _purchReqLine.LinePercent;
            this.LineDisc           = _purchReqLine.LineDisc;
            this.PurchMarkup        = _purchReqLine.PurchMarkup;
            this.LineAmount         = _purchReqLine.LineAmount;
        }

        this.Name               = _purchReqLine.Name;
        this.ItemName           = _purchReqLine.itemName();
        this.ExternalItemId     = _purchReqLine.ExternalItemId;
        this.DefaultDimension   = _purchReqLine.DefaultDimension;
        this.setAddressFromPurchReqLine(_purchReqLine);

        if (_purchReqLine.ProjId)
        {
            this.ProjId                 = _purchReqLine.ProjId;
            this.ActivityNumber         = _purchReqLine.ActivityNumber;
            this.ProjCategoryId         = _purchReqLine.ProjCategoryId;
            this.ProjLinePropertyId     = _purchReqLine.ProjLinePropertyId;
            this.ProjSalesCurrencyId    = _purchReqLine.ProjSalesCurrencyId;
            this.ProjSalesUnitId        = UnitOfMeasure::find(_purchReqLine.ProjSalesUnitOfMeasure).Symbol;
            this.ProjSalesPrice         = _purchReqLine.ProjSalesPrice;
            this.ProjTaxGroupId         = _purchReqLine.ProjTaxGroupId;
            this.ProjTaxItemGroupId     = _purchReqLine.ProjTaxItemGroupId;
            this.ProjTransId            = _purchReqLine.ProjTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PurchRFQCaseLine</c> record buffer,
    /// from another <c>PurchRFQCaseLine</c> record buffer.
    /// </summary>
    /// <param name="_purchRFQCaseLine">
    /// The <c>PurchRFQCaseLine</c> record buffer.
    /// </param>
    /// <param name="_copyPrecisely">
    /// A boolean, to indicate if name and dimension data is to be copied.
    /// </param>
    /// <param name="_copyPriceDisc">
    /// A boolean, to indicate if price discount data is to be copied.
    /// </param>
    /// <param name="_copyQty">
    /// A boolean, to indicate if quantity information is to be copied.
    /// </param>
    /// <param name="_qty">
    /// The quantity to be used for the purchase quantity.
    /// </param>
    /// <param name="_cwQty">
    /// A real value that represents a catch weight quantity.
    /// </param>
    void  initFromPurchRFQCaseLine(PurchRFQCaseLine _purchRFQCaseLine,
                                   boolean          _copyPrecisely = true,
                                   boolean          _copyPriceDisc = true,
                                   boolean          _copyQty       = true,
                                   Qty              _qty           = _purchRFQCaseLine.PurchQty
                                   ,
                                   PdsCWInventQty   _cwQty         = _purchRFQCaseLine.PdsCWQty
                                   )
    {
        InventDim   inventDim;

        ProjInventJournalTransMapForm   projInventJournalTransMapForm;

        this.LineItemType           = _purchRFQCaseLine.LineItemType;
        this.CategoryId             = _purchRFQCaseLine.CategoryId;
        this.ItemId                 = _purchRFQCaseLine.ItemId;

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            this.initFromInventTable(this.inventTable());
        }
        else
        {
            this.ItemName           = _purchRFQCaseLine.ItemName;
        }

        this.AssetId                = _purchRFQCaseLine.AssetId;
        this.AssetBookId            = _purchRFQCaseLine.AssetBookId;
        this.AssetTransTypePurch    = _purchRFQCaseLine.AssetTransTypePurch;

        if (_copyQty)
        {
            this.setInventDimId(_purchRFQCaseLine.InventDimId);
            this.PurchQty           = _qty;
            this.PurchUnit          = _purchRFQCaseLine.PurchUnit;
            this.QtyOrdered         = _purchRFQCaseLine.PurchQty == _qty ? _purchRFQCaseLine.QtyOrdered : this.calcQtyOrdered();
            if (#PdsCatchWeightEnabled)
            {
                this.PdsCWQty       = _cwQty;
            }
        }
        else
        {
            inventDim               = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _purchRFQCaseLine.inventDim(), inventDim);
            this.setInventDimIdFromInventDim(inventDim);
        }

        if (_copyPriceDisc)
        {
            this.PurchPrice         = _purchRFQCaseLine.PurchPrice;
            this.PriceUnit          = _purchRFQCaseLine.PriceUnit;
            this.LinePercent        = _purchRFQCaseLine.LinePercent;
            this.LineDisc           = _purchRFQCaseLine.LineDisc;
            this.MultiLnDisc        = _purchRFQCaseLine.MultiLnDisc;
            this.MultiLnPercent     = _purchRFQCaseLine.MultiLnPercent;
            this.PurchMarkup        = _purchRFQCaseLine.PurchMarkup;
            this.LineAmount         = _purchRFQCaseLine.LineAmount;
        }

        if (_copyPrecisely)
        {
            this.setInventDimId(_purchRFQCaseLine.InventDimId);
            this.Name               = _purchRFQCaseLine.Name;
            this.ExternalItemId     = _purchRFQCaseLine.ExternalItemId;
            this.DefaultDimension   = this.copyDimension(_purchRFQCaseLine.DefaultDimension);

            this.setAddressFromPurchRFQCaseLine(_purchRFQCaseLine);
        }

        if (this.ProjId)
        {
            if (this.ProjId != _purchRFQCaseLine.ProjId)
            {
                projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(this);
                projInventJournalTransMapForm.fieldModifiedProjIdPost();
            }
            else
            {
                this.ActivityNumber         = _purchRFQCaseLine.ActivityNumber;
                this.ProjCategoryId         = _purchRFQCaseLine.ProjCategoryId;
                this.ProjLinePropertyId     = _purchRFQCaseLine.ProjLinePropertyId;
                this.ProjSalesCurrencyId    = _purchRFQCaseLine.ProjSalesCurrencyId;
                this.ProjSalesUnitId        = _purchRFQCaseLine.ProjSalesUnitId;
                this.ProjSalesPrice         = _purchRFQCaseLine.ProjSalesPrice;
                this.ProjTaxGroupId         = _purchRFQCaseLine.ProjTaxGroupId;
                this.ProjTaxItemGroupId     = _purchRFQCaseLine.ProjTaxItemGroupId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchRFQCaseTable</Name>
				<Source><![CDATA[
    public void  initFromPurchRFQCaseTable(PurchRFQCaseTable purchRFQCaseTable)
    {
        this.type().initFromPurchRFQCaseTable(purchRFQCaseTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPO</Name>
				<Source><![CDATA[
    void initFromReqPO(ReqPO _reqPO)
    {
        this.LineItemType           = PurchRFQLineItemType::Item;
        this.ItemId                 = _reqPO.ItemId;
        this.ItemName               = _reqPO.itemName();
        this.Name                   = this.ItemName;
        this.ReqPOId                = _reqPO.RefId;
        this.ReqPlanIdSched         = ReqPlanVersion::find(_reqPO.PlanVersion).ReqPlanId;

        this.setInventDimId(_reqPO.CovInventDimId);
        this.itemIdChanged();

        this.QtyOrdered             = _reqPO.Qty;
        this.RemainInventPhysical   = _reqPO.Qty;
        this.RemainPurchPhysical    = _reqPO.PurchQty;

        this.PurchQty               = _reqPO.PurchQty;
        this.PurchUnit              = _reqPO.PurchUnit;

        this.PdsCWQty               = _reqPO.PdsCWReqQty;

        this.DeliveryDate           = _reqPO.ReqDateDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendExternalItemDescription</Name>
				<Source><![CDATA[
    void initFromVendExternalItemDescription(InventDim _inventDim = this.inventDim())
    {
        VendExternalItemDescription vendExternalItemDescription = new VendExternalItemDescription(this.ItemId, _inventDim, 'All');

        if (vendExternalItemDescription.findExternalDescription())
        {
            this.ExternalItemId = vendExternalItemDescription.externalItemId();
            if (vendExternalItemDescription.externalItemFreeTxt())
            {
                if (VendFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.Name =  vendExternalItemDescription.externalItemFreeTxt();
                }
                else
                {
                    this.initName(this.inventTable());
                    if (this.Name)
                    {
                        this.Name += '\n';
                    }
                    this.Name += vendExternalItemDescription.externalItemFreeTxt();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PurchRFQCaseLine</c> record buffer,
    /// from a <c>VendInvoiceTrans</c> record buffer.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// The <c>VendInvoiceTrans</c> record buffer.
    /// </param>
    /// <param name="copyPrecisely">
    /// A boolean, to indicate if name and dimension data is to be copied.
    /// </param>
    /// <param name="copyPriceDisc">
    /// A boolean, to indicate if price discount data is to be copied.
    /// </param>
    /// <param name="copyQty">
    /// A boolean, to indicate if quantity information is to be copied.
    /// </param>
    /// <param name="qty">
    /// The quantity to be used for the purchase quantity.
    /// </param>
    /// <param name="_cwQty">
    /// A real value that represents a catch weight quantity.
    /// </param>
    void  initFromVendInvoiceTrans(VendInvoiceTrans  _vendInvoiceTrans,
                                          boolean           copyPrecisely = true,
                                          boolean           copyPriceDisc = true,
                                          boolean           copyQty       = true,
                                          Qty               qty           = _vendInvoiceTrans.Qty
                                          ,
                                          PdsCWInventQty    _cwQty        = _vendInvoiceTrans.PdsCWQty
                                          )
    {
        InventDim   inventDim;

        this.LineItemType = _vendInvoiceTrans.isCategoryBased() ?
            PurchRFQLineItemType::Category : PurchRFQLineItemType::Item;

        this.CategoryId             = _vendInvoiceTrans.ProcurementCategory;
        this.ItemId                 = _vendInvoiceTrans.ItemId;

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            this.initFromInventTable(this.inventTable());
        }

        if (copyQty)
        {
            this.setInventDimId(_vendInvoiceTrans.InventDimId);
            this.PurchQty           = qty;
            this.PurchUnit          = _vendInvoiceTrans.PurchUnit;

            this.QtyOrdered         = _vendInvoiceTrans.Qty == qty ? _vendInvoiceTrans.getInventQty() : this.calcQtyOrdered();

            if (#PdsCatchWeightEnabled)
            {
                this.PdsCWQty       = _cwQty;
            }
        }
        else
        {
            inventDim               = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _vendInvoiceTrans.inventDim(), inventDim);
            this.setInventDimIdFromInventDim(inventDim);
        }

        if (copyPriceDisc)
        {
            this.PurchPrice         = _vendInvoiceTrans.PurchPrice;
            this.PriceUnit          = _vendInvoiceTrans.PriceUnit;
            this.LinePercent        = _vendInvoiceTrans.LinePercent;
            this.LineDisc           = _vendInvoiceTrans.LineDisc;
            this.MultiLnDisc        = _vendInvoiceTrans.MultiLnDisc;
            this.MultiLnPercent     = _vendInvoiceTrans.MultiLnPercent;
            this.PurchMarkup        = _vendInvoiceTrans.PurchMarkup;
            this.LineAmount         = _vendInvoiceTrans.LineAmount;
        }

        if (copyPrecisely)
        {
            this.setInventDimId(_vendInvoiceTrans.InventDimId);
            this.Name               = _vendInvoiceTrans.Name;
            this.ExternalItemId     = _vendInvoiceTrans.ExternalItemId;
            this.DefaultDimension   = this.copyDimension(_vendInvoiceTrans.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>PurchRFQCaseLine</c> record buffer, from a <c>VendPackingSlipTrans</c>
    /// record buffer.
    /// </summary>
    /// <param name="_vendPackingSlipTrans">
    /// The <c>VendPackingSlipTrans</c> record buffer.
    /// </param>
    /// <param name="_copyPrecisely">
    /// A Boolean value that indicates whether to copy the name and dimension data.
    /// </param>
    /// <param name="_copyPriceDisc">
    /// A Boolean value that indicates whether to copy the price discount data.
    /// </param>
    /// <param name="_copyQty">
    /// A Boolean values that indicates whether to copy the quantity information.
    /// </param>
    /// <param name="_qty">
    /// The quantity to use for the purchase quantity.
    /// </param>
    void  initFromVendPackingSlipTrans(VendPackingSlipTrans  _vendPackingSlipTrans,
                                              boolean               _copyPrecisely = true,
                                              boolean               _copyPriceDisc = true,
                                              boolean               _copyQty       = true,
                                              Qty                   _qty           = _vendPackingSlipTrans.Qty)
    {
        InventDim   inventDim;

        this.LineItemType = _vendPackingSlipTrans.isCategoryBased() ?
            PurchRFQLineItemType::Category : PurchRFQLineItemType::Item;

        this.CategoryId             = _vendPackingSlipTrans.ProcurementCategory;
        this.ItemId                 = _vendPackingSlipTrans.ItemId;

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            this.initFromInventTable(this.inventTable());
        }

        if (_copyQty)
        {
            this.setInventDimId(_vendPackingSlipTrans.InventDimId);
            this.PurchQty           = _qty;
            this.PurchUnit          = _vendPackingSlipTrans.PurchUnit;
            this.QtyOrdered         = _vendPackingSlipTrans.Qty == _qty ? _vendPackingSlipTrans.InventQty : this.calcQtyOrdered();
        }
        else
        {
            inventDim               = this.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, _vendPackingSlipTrans.inventDim(), inventDim);
            this.setInventDimIdFromInventDim(inventDim);
        }

        if (_copyPrecisely)
        {
            this.Name               = _vendPackingSlipTrans.Name;
            this.ExternalItemId     = _vendPackingSlipTrans.ExternalItemId;
            this.DefaultDimension   = this.copyDimension(_vendPackingSlipTrans.DefaultDimension);
            this.PriceUnit          = _vendPackingSlipTrans.PriceUnit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemFromPurchRFQLine</Name>
				<Source><![CDATA[
    void initItemFromPurchRFQLine(PurchRFQLine  _purchRFQLine)
    {
        this.type().initItemFromPurchRFQLine(_purchRFQLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initName</Name>
				<Source><![CDATA[
    void initName(InventTable inventTable = InventTable::find(this.ItemId))
    {
        this.Name = PurchParameters::nameAndOrDescription(inventTable,
                                        this.purchRFQCaseTable().LanguageId,
                                        this.InventDimId,
                                        this.category());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchQty</Name>
				<Source><![CDATA[
    void initPurchQty()
    {
        this.type().initPurchQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>PurchRFQCaseLine</c> table.
    /// </summary>
    /// <param name="_dropInvent">
    /// A Boolean value that indicates whether to update the inventory for the current
    /// <c>PurchRFQCaseLine</c> record.
    /// </param>
    /// <param name="_updateRFQCaseTableStatus">
    /// A Boolean value that indicates whether to update the RFQ Case Table for the current
    /// <c>PurchRFQCaseLine</c> record.
    /// </param>
    public void  insert(boolean _dropInvent = false, boolean _updateRFQCaseTableStatus = true)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        PurchRFQCaseLineType purchRFQCaseLineType = this.type();

        purchRFQCaseLineType.inserting();

        this.LineNum = PurchRFQCaseLine::lastLineNum(this.rfqCaseId) + 1.0;

        InventUpd_Estimated estimated;

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            if (!_dropInvent && this.inventTable().isStocked())
            {
                this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

                estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(this));
                estimated.updateNow();
            }
        }

        TradeLineNumberManager::updateLineNumberOfNewOrder(this);

        super();

        if (estimated)
        {
            estimated.updateOwnerRelationship();
        }

        if (_updateRFQCaseTableStatus)
        {
            PurchRFQCaseTable::find(this.rfqCaseId, true).updateStatus();
        }

        if (this.ProjId)
        {
            ProjInventJournalTransMapForm::construct(this).insertPost();
        }

        purchRFQCaseLineType.inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean  update = false)
    {
        return InventDim::find(this.InventDimId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(ItemId     itemId = this.ItemId,
                            boolean    update = false)
    {
        return InventTable::find(itemId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    InventTableModule  inventTableModule(ItemId     itemId = this.ItemId)
    {
        return InventTableModule::find(itemId, this.moduleType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total invoice amount for an RFQ.
    /// </summary>
    /// <returns>
    /// The total invoice amount for an RFQ.
    /// </returns>
    /// <remarks>
    /// The calculated invoice amount will include the currency conversion, line discount, total discount,
    /// miscellaneous charges, sales tax round-off, and any other costs that will influence the calculation
    /// the invoice total.
    /// </remarks>
    public display AmountCur invoiceAmountValue()
    {
        PurchtotalsForm purchtotalsForm = PurchtotalsForm::newPurchTotalsForm(PurchRFQCaseTable::find(this.rfqCaseId),0);

        purchtotalsForm.calctotals();

        return purchtotalsForm.invoiceAmountValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCategoryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current RFQ line is a valid category line.
    /// </summary>
    /// <returns>
    /// true if the current RFQ line is a valid category line; otherwise, false.
    /// </returns>
    public boolean isValidCategoryLine()
    {
        return ((this.LineItemType == PurchRFQLineItemType::Category) && this.CategoryId && (this.ItemName != ''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidItemLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current RFQ line is a valid item line.
    /// </summary>
    /// <returns>
    /// true if the current RFQ line is a valid item line; otherwise, false.
    /// </returns>
    public boolean isValidItemLine()
    {
        return ((this.LineItemType == PurchRFQLineItemType::Item) && (this.ItemId != ''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRejectedOrAcceptedRFQLine</Name>
				<Source><![CDATA[
    public boolean hasRejectedOrAcceptedRFQLine()
    {
        PurchRFQLine purchRFQLine;
        PurchRFQCaseLine PurchRFQCaseLine;

        select firstonly RecId from purchRFQLine
                where purchRFQLine.RFQCaseLineRefRecId == this.RecId
                    && (purchRFQLine.Status == PurchRFQStatus::Rejected || purchRFQLine.Status == PurchRFQStatus::Accepted);

        return purchRFQLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdChanged</Name>
				<Source><![CDATA[
    void itemIdChanged()
    {
        this.initFromInventTable(this.inventTable(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the associated item line discount group.
    /// </summary>
    /// <returns>
    /// A null value.
    /// </returns>
    /// <remarks>
    /// This method only exists because it is called from the <c>SalesPurchLine</c> table map.
    /// </remarks>
    LineDiscCode itemLineDisc()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNameDisplay</Name>
				<Source><![CDATA[
    display ItemName itemNameDisplay()
    {
        return this.inventTable().itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PurchLineAmount lineAmountExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(_transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void lineAmountModified()
    {
        this.salesPurchLineInterface().lineAmountModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMST</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST lineAmountMST(TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                   ExchRate                exchRate                = 0,
                                   ExchrateSecondary       exchrateSecondary       = 0,
                                   ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown)

    {
        return this.salesPurchLineInterface().lineAmountMST(exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMSTExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountMST  lineAmountMSTExclTax(TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                           ExchRate                exchRate                = 0,
                                           ExchrateSecondary       exchrateSecondary       = 0,
                                           ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown,
                                           Tax                     _tax                    = null)

    {
        return this.salesPurchLineInterface().lineAmountMSTExclTax(exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the associated customer line disc group.
    /// </summary>
    /// <returns>
    /// A null value.
    /// </returns>
    /// <remarks>
    /// This method only exists because it is called from the <c>SalesPurchLine</c> table map.
    /// </remarks>
    LineDiscCode  lineDisc()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default <c>PurchRFQCaseLine.dimension</c> values that are based on the <c>InventDim</c>
    /// record buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    /// The <c>InventDim</c> record buffer linked to the current <c>PurchRFQCaseLine</c> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    /// The <c>InventDim</c> record buffer that was previously linked to the current
    /// <c>PurchRFQCaseLine</c> record buffer.
    /// </param>
    public void linkInventDim2Dimension(InventDim _newInventDim, InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PurchRFQCaseLine, PdsCWQty):
                this.pdsCWQtyConversion();
            //fallthrough
            case fieldNum(PurchRFQCaseLine, PurchQty):
                PurchRFQCaseLine::modifyPurchQty(this);
            case fieldNum(PurchRFQCaseLine, PurchPrice):
            case fieldNum(PurchRFQCaseLine, LineDisc):
            case fieldNum(PurchRFQCaseLine, LinePercent):
            case fieldNum(PurchRFQCaseLine, PurchMarkup):
            case fieldNum(PurchRFQCaseLine, MultiLnDisc):
            case fieldNum(PurchRFQCaseLine, MultiLnPercent):
                this.LineAmount = this.calcLineAmountForced();
                if (this.ProjId)
                {
                    this.setProjSalesPrice();
                }
                break;

            case fieldNum(PurchRFQCaseLine, PriceUnit):
                this.LineAmount = this.calcLineAmount();
                break;

            case fieldNum(PurchRFQCaseLine, LineAmount):
                this.lineAmountModified();
                break;

            case fieldNum(PurchRFQCaseLine, DeliveryPostalAddress):
                this.clearAddressReference();
                break;

            case fieldNum(PurchRFQCaseLine, LineItemType):
                this.CategoryId = 0;
            case fieldNum(PurchRFQCaseLine, ItemId):
                this.type().updateInventDim();
                if (this.ProjId)
                {
                    this.setProjSalesPrice();
                }
                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataUtil::getFormDataSource(this).refresh();
                }
                break;
            case fieldNum(PurchRFQCaseLine, CategoryId):
                this.categoryIdChanged();
                break;

            case fieldNum(PurchRFQCaseLine, PurchUnit):
                this.pdsCWQtyConversion();
                if (this.ProjId && this.PurchUnit && !this.ItemId && !this.ProjSalesUnitId)
                {
                    this.ProjSalesUnitId = this.PurchUnit;
                }
                break;

            case fieldNum(PurchRFQCaseLine, ProjCategoryId):
            case fieldNum(PurchRFQCaseLine, ProjSalesCurrencyId):
                this.setProjSalesPrice();
                break;

            case fieldNum(PurchRFQCaseLine, ProjId):
                this.setProjSalesPrice();
                this.DefaultDimension = this.ProjId ? this.copyDimension(ProjTable::find(this.ProjId).DefaultDimension) : 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    public CustVendAC  orderAccount()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    private void pdsCWQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.PurchQty = PdsCatchWeight::inventQty(
                                this.ItemId,
                                this.PdsCWQty,
                                this.PurchUnit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId  priceGroupId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
                this.initFromProjActivity(ProjActivity::find(_activityNumber));
            }
            else
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
                name = smmActivities.Purpose;
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqLine</Name>
				<Source><![CDATA[
    PurchReqLine purchReqLine(boolean _update = false)
    {
        PurchReqLine reqLine;

        reqLine.selectForUpdate(_update);
        select firstonly reqLine
            where reqLine.LineRefId == this.ReqLineRefId;
        return reqLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQCaseTable</Name>
				<Source><![CDATA[
    PurchRFQCaseTable purchRFQCaseTable(boolean  update = false)
    {
        return PurchRFQCaseTable::find(this.rfqCaseId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedInventInTotal</Name>
				<Source><![CDATA[
    display InventQty    receivedInventInTotal()
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           inventQty = 0;

        if (this.InventTransId)
        {
            inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginPurchRFQCaseLine::findInventTransOriginId(this.DataAreaId, this.rfqCaseId, this.LineNum));

            inventQty = (inventTransIdSum.physical() + inventTransIdSum.financial());
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    display InventQtyRegistered registered()
    {
        InventTransOriginId inventTransOriginId = InventTransOriginPurchRFQCaseLine::findInventTransOriginId(this.DataAreaId, this.rfqCaseId, this.LineNum);

        return InventTransIdSumSingleStatus::qtyRegistered(inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInvent</Name>
				<Source><![CDATA[
    void  resetInvent(boolean update = true)
    {
        this.PurchQty      = 0;
        this.QtyOrdered    = 0;
        this.PurchPrice    = 0;
        this.LineAmount    = 0;

        this.RemainPurchPhysical    = this.PurchQty;
        this.RemainInventPhysical   = this.QtyOrdered;

        InventMovement::bufferSetTransQtyUnit(this);

        if (update)
        {
            this.update();
            this.StatusHigh  = PurchRFQStatus::Canceled;
            this.StatusLow   = PurchRFQStatus::Canceled;
            this.doUpdate();
        }
        else
        {
            this.StatusHigh  = PurchRFQStatus::Canceled;
            this.StatusLow   = PurchRFQStatus::Canceled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SalesPurchTable salesPurchTable()
    {
        return this.salesPurchLineInterface().salesPurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromInventDim</Name>
				<Source><![CDATA[
    void setAddressFromInventDim(InventDim _inventDim)
    {
        InventLocation              inventLocation;
        InventSite                  inventSite;
        LogisticsLocationEntity     location;

        if (_inventDim.RecId)
        {
            inventLocation  = InventLocation::find(_inventDim.InventLocationId);
            location        = LogisticsLocationEntity::findLocation(inventLocation, LogisticsLocationRoleType::Delivery);

            if (location && location.parmLocationRecId())
            {
                this.setLocation(location.getLogisticsLocation());
            }
            else
            {
                inventSite  = InventSite::find(_inventDim.InventSiteId);
                location    = LogisticsLocationEntity::findLocation(inventSite, LogisticsLocationRoleType::Delivery);

                if (location && location.parmLocationRecId())
                {
                    this.setLocation(location.getLogisticsLocation());
                }
                else
                {
                    this.setAddressFromPurchRFQCaseTable();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchLine</Name>
				<Source><![CDATA[
    void  setAddressFromPurchLine(PurchLine  _purchLine)
    {
        this.DeliveryPostalAddress      = _purchLine.DeliveryPostalAddress;
        this.DeliveryName               = _purchLine.DeliveryName;
        this.AddressRefRecId            = _purchLine.RecId;
        this.AddressRefTableId          = _purchLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchReqLine</Name>
				<Source><![CDATA[
    void  setAddressFromPurchReqLine(PurchReqLine  _purchReqLine)
    {
        this.DeliveryPostalAddress      = _purchReqLine.DeliveryPostalAddress;
        this.DeliveryName               = _purchReqLine.DeliveryName;
        this.AddressRefRecId            = _purchReqLine.RecId;
        this.AddressRefTableId          = _purchReqLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchRFQCaseLine</Name>
				<Source><![CDATA[
    void  setAddressFromPurchRFQCaseLine(PurchRFQCaseLine  purchRFQCaseLine)
    {
        this.DeliveryPostalAddress      = purchRFQCaseLine.DeliveryPostalAddress;
        this.DeliveryName               = purchRFQCaseLine.DeliveryName;
        this.AddressRefRecId            = purchRFQCaseLine.RecId;
        this.AddressRefTableId          = purchRFQCaseLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromPurchRFQCaseTable</Name>
				<Source><![CDATA[
    void  setAddressFromPurchRFQCaseTable(PurchRFQCaseTable  purchRFQCaseTable = this.purchRFQCaseTable())
    {
        this.DeliveryPostalAddress      = purchRFQCaseTable.DeliveryPostalAddress;
        this.DeliveryName               = purchRFQCaseTable.DeliveryName;
        this.AddressRefRecId            = purchRFQCaseTable.RecId;
        this.AddressRefTableId          = purchRFQCaseTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFromVendTable</Name>
				<Source><![CDATA[
    void  setAddressFromVendTable(VendTable _vendTable)
    {
        LogisticsPostalAddress postalAddress = DirParty::primaryPostalAddress(_vendTable.Party, this.deliveryDateTime());

        this.DeliveryName               = _vendTable.name();
        this.DeliveryPostalAddress      = postalAddress.RecId;
        this.AddressRefRecId            = _vendTable.RecId;
        this.AddressRefTableId          = _vendTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>PurchRFQCaseLine.inventDimId</c> field and
    /// assigns default values that are based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that should be applied to the <c>PurchRFQCaseLine.InventDimId</c>
    /// field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(InventDimId _inventDimId, InventDim _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    /// found <c>InventDimId</c> to the <c>PurchRFQCaseLine.inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that should be referenced by the current <c>PurchRFQCaseLine</c>
    /// record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    void  setLocation(LogisticsLocation location)
    {
        if (location.Description)
            this.DeliveryName = location.Description;

        this.DeliveryPostalAddress      = LogisticsPostalAddress::addressRecIdFromLocationRecId(location.RecId);
        this.AddressRefRecId            = location.RecId;
        this.AddressRefTableId          = location.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>setPriceAgreement</c> method of the <c>SalesPurchLine</c> table map.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record that contains the dimensions the price disc should apply for.
    /// </param>
    /// <param name="_doCallPriceDate">
    ///    A Boolean value that specifies whether to use the price date or the system date for the price calculation; optional.
    /// </param>
    /// <param name="_checkPolicy">
    /// An instance of the <c>PriceDiscPolicyCheckPolicy</c> class defining if price and discount fields
    /// should be updated; optional.
    /// </param>
    /// <param name="_initDateFields">
    /// Indicates if the dates related to prices should be set or not; optional.
    /// </param>
    [Hookable(false), Wrappable(false)]
    public void setPriceAgreement(
        InventDim					_inventDim,
        boolean						_doCallPriceDate	= false,
        PriceDiscPolicyCheckPolicy  _checkPolicy		= null,
        boolean						_initDateFields		= true)
    {
        this.salesPurchLineInterface().setPriceAgreement(_inventDim, _doCallPriceDate, _checkPolicy, _initDateFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc</Name>
				<Source><![CDATA[
    public void setPriceDisc(InventDim inventDim)
    {
        this.setPriceAgreement(inventDim);
        this.LineAmount = this.calcLineAmountForced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocHandIcon</Name>
				<Source><![CDATA[
    display smmDocIconNum showDocHandIcon()
    {
        #macrolib.resource

        if ((select firstonly docuRef where docuRef.RefCompanyId  == this.DataAreaId && docuRef.RefTableId == this.TableId && docuRef.RefRecId == this.RecId).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    TransDate taxDate(TransDate transDate)
    {
        return TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate ? this.deliveryDate(transDate) : transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PriceCur taxPcsPrice(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.salesPurchLineInterface().taxPcsPrice(transDate, _tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    PurchRFQCaseLineType type()
    {
        return PurchRFQCaseLineType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchRFQCaseLine</c> record.
    /// </summary>
    /// <param name="_dropInvent">
    /// A Boolean value that indicates whether the inventory for the current <c>PurchRFQCaseLine</c> record
    /// should be updated.
    /// </param>
    public void update(boolean  _dropInvent = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        PurchRFQCaseLine purchRFQCaseLineOrig = this.orig();

        PurchRFQCaseLineType purchRFQCaseLineType = this.type();
        
        purchRFQCaseLineType.updating();

        if (this.LineItemType == PurchRFQLineItemType::Item)
        {
            if (!_dropInvent && this.inventTable().isStocked())
            {
                if (!this.InventTransId)
                {
                    this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                }

                InventUpd_Estimated::newInventMovement(InventMovement::construct(this)).updateNow();
            }
        }

        super();

        purchRFQCaseLineType.updated(purchRFQCaseLineOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    void updateStatus(boolean _setLowStatus2Created = false)
    {
        PurchRFQCaseLineType purchRFQCaseLineType;

        purchRFQCaseLineType = this.type();
        purchRFQCaseLineType.updateStatus(_setLowStatus2Created);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        PurchRFQCaseLineType    purchRFQCaseLineType;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(PurchRFQCaseLine, ItemId):
                case fieldStr(PurchRFQCaseLine, InventTransId):
                    if (this.LineItemType == PurchRFQLineItemType::Item
                        && this.rfqType == PurchRFQType::PurchAgreement
                        && PdsGlobal::pdsIsCWItem(this.ItemId))
                    {
                        return checkFailed(strFmt("@PDS570", this.ItemId));
                    }
                    if (this.LineItemType == PurchRFQLineItemType::Category ||
                        this.rfqType == PurchRFQType::PurchAgreement)
                        return true;
                    break;
                case fieldStr(PurchRFQCaseLine, CategoryId):
                    if (this.LineItemType == PurchRFQLineItemType::Item ||
                        this.rfqType == PurchRFQType::PurchAgreement)
                        return true;
                    break;
            }

            purchRFQCaseLineType = this.type();
            ret = purchRFQCaseLineType.validateField(fieldName2id(this.TableId, _fieldName));

            if (ret && this.ProjId)
            {
                ret = ProjInventJournalTransMapForm::construct(this).validateFieldPost(_fieldName, _arrayIndex);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret && this.ProjId)
        {
            ret = ProjInventJournalTransMapForm::construct(this).validateWritePost();
        }

        if (ret)
        {
            if (this.LineItemType == PurchRFQLineItemType::Item &&
                !this.ItemId)
            {
                // Field %1 must be filled in.
                ret = checkFailed(strFmt("@SYS26332", fieldPName(PurchRFQCaseLine, ItemId)));
            }

            if (this.LineItemType == PurchRFQLineItemType::Category &&
                !this.CategoryId)
            {
                // Field %1 must be filled in.
                ret = checkFailed(strFmt("@SYS26332", fieldPName(PurchRFQCaseLine, CategoryId)));
            }

            if (this.LineItemType == PurchRFQLineItemType::Category &&
                !this.ItemName)
            {
                // Field %1 must be filled in.
                ret = checkFailed(strFmt("@SYS26332", fieldPName(PurchRFQCaseLine, ItemName)));
            }
        }

        // check if the product is stopped
        if (ret)
        {
            ret = this.checkItemId()
                && InventDistinctProductValidator::checkProductNotStopped(this.ItemId, InventItemOrderSetupType::Purch, this.inventDim(), false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean  exist(PurchRFQCaseId   rfqCaseId,
                                        LineNum          lineNum = naReal())
    {
        if (rfqCaseId)
        {
            if (lineNum == naReal())
                return (select firstonly RecId from purchRFQCaseLine
                            index RFQCaseLineIdx
                            where purchRFQCaseLine.rfqCaseId     == rfqCaseId
                       ).RecId     != 0;

            return (select firstonly RecId from purchRFQCaseLine
                            index RFQCaseLineIdx
                            where purchRFQCaseLine.rfqCaseId   == rfqCaseId     &&
                                  purchRFQCaseLine.LineNum     == lineNum
                       ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static PurchRFQCaseLine find(PurchRFQCaseId     rfqCaseId,
                                               LineNum            lineNum     = naReal(),
                                               boolean            update      = false)
    {
        PurchRFQCaseLine    purchRFQCaseLine;

        if (rfqCaseId)
        {
            purchRFQCaseLine.selectForUpdate(update);

            if (lineNum == naReal())
            {
                select firstonly purchRFQCaseLine
                    index hint RFQCaseLineIdx
                    where purchRFQCaseLine.rfqCaseId == rfqCaseId;
            }
            else
            {
                select firstonly purchRFQCaseLine
                    index hint RFQCaseLineIdx
                    where purchRFQCaseLine.rfqCaseId   == rfqCaseId    &&
                          purchRFQCaseLine.LineNum     == lineNum;
            }
        }

        return purchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with the given <c>RefTableId</c> _addressTableId and <c>refRecId</c> _addressRecId.
    /// </summary>
    /// <param  name='_addressTableId'>
    /// The table ID in the <c>PurchRFQCaseLine</c> record to find.
    /// </param>
    /// <param  name='_addressRecId'>
    /// The record ID in the <c>PurchRFQCaseLine</c> record to find.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>boolean</c> data type.
    /// </param>
    /// <param  name='_concurrencyModel'>
    /// An instance of the <c>ConcurrencyModel</c> data type.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchRFQCaseLine</c> table.
    /// </returns>

    public static PurchRFQCaseLine findByAddress(RefTableId       _addressTableId,
                                                 RefRecId         _addressRecId,
                                                 boolean          _forUpdate            = false,
                                                 ConcurrencyModel _concurrencyModel     = ConcurrencyModel::Auto)
    {
        PurchRFQCaseLine  purchRFQCaseLine;

        if (_addressTableId && _addressRecId)
        {
            if (_forUpdate)
            {
                purchRFQCaseLine.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    purchRFQCaseLine.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly purchRFQCaseLine where
                purchRFQCaseLine.AddressRefTableId == _addressTableId &&
                purchRFQCaseLine.AddressRefRecId   == _addressRecId;
        }

        return purchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAddressAndRFQCaseId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with the given <c>RefTableId</c> _addressTableId and <c>refRecId</c> _addressRecId.
    /// </summary>
    /// <param  name='_addressTableId'>
    /// The table ID in the <c>PurchRFQCaseLine</c> record to find.
    /// </param>
    /// <param  name='_addressRecId'>
    /// The record ID in the <c>PurchRFQCaseLine</c> record to find.
    /// </param>
    /// <param  name='_purchRFQCaseId'>
    /// The PurchRFQCaseId in <c>PurchRFQCaseLine</c> record to find.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the <c>boolean</c> data type.
    /// </param>
    /// <param  name='_concurrencyModel'>
    /// An instance of the <c>ConcurrencyModel</c> data type.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchRFQCaseLine</c> table.
    /// </returns>

    public static PurchRFQCaseLine findByAddressAndRFQCaseId(RefTableId             _addressTableId,
                                                                RefRecId            _addressRecId,
                                                                PurchRFQCaseId      _purchRFQCaseId,
                                                                boolean             _forUpdate            = false,
                                                                ConcurrencyModel    _concurrencyModel     = ConcurrencyModel::Auto)
    {
        PurchRFQCaseLine  purchRFQCaseLine;

        if (_addressTableId && _addressRecId && _purchRFQCaseId)
        {
            if (_forUpdate)
            {
                purchRFQCaseLine.selectForUpdate(_forUpdate);

                if (_concurrencyModel != ConcurrencyModel::Auto)
                {
                    purchRFQCaseLine.concurrencyModel(_concurrencyModel);
                }
            }

            select firstonly purchRFQCaseLine where
                purchRFQCaseLine.AddressRefTableId  == _addressTableId  &&
                purchRFQCaseLine.AddressRefRecId    == _addressRecId    &&
                purchRFQCaseLine.rfqCaseId          == _purchRFQCaseId;
        }

        return purchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static PurchRFQCaseLine findRecId(PurchRFQCaseLineRefRecId _recId, boolean _forUpdate = false)
    {
        PurchRFQCaseLine    purchRFQCaseLine;

        if (_recId)
        {
            if (_forUpdate)
            {
                purchRFQCaseLine.selectForUpdate(true);
            }

            select firstonly purchRFQCaseLine
                where purchRFQCaseLine.RecId == _recId;
        }
        return purchRFQCaseLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum  lastLineNum(PurchRFQCaseId  _caseId)
    {
        return (select maxof(LineNum) from purchRFQCaseLine
                    index hint RFQCaseLineIdx
                    where purchRFQCaseLine.rfqCaseId == _caseId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPurchQty</Name>
				<Source><![CDATA[
    public static void  modifyPurchQty(PurchRFQCaseLine _purchRFQCaseLine)
    {
        InventMovement::setMinMaxQty(_purchRFQCaseLine);
        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(_purchRFQCaseLine.ItemId, _purchRFQCaseLine.inventDim()))
        {
            _purchRFQCaseLine.initPurchQty();
        }

        InventMovement::bufferSetTransQtyUnit(_purchRFQCaseLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    private void setProjSalesPrice()
    {
        ProjInventJournalTransMapForm   projInventJournalTransMapForm;
        ProjTable                       projTable;

        projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(this);
        projTable = ProjTable::find(this.ProjId);
        projInventJournalTransMapForm.setProjSalesPrice(projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the RFQ case line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the line is tracked in inventory; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isStocked()
    {
        return this.salesPurchLineInterface().isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoLineOrZeroQuantityLineByRFQCaseID</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if there is no line or there is any line with zero quantity in the <c>PurchRFQCaseLine</c> table by the specific RFQ case ID.
    /// </summary>
    /// <param name = "_purchRFQCaseId">
	/// The RFQ case ID to search.
	/// </param>
    /// <returns>
    /// true if there is no line or there is at least one line with zero quantity for specific RFQ case; otherwise, false.
	/// </returns>
    public static boolean hasNoLineOrZeroQuantityLineByRFQCaseID(PurchRFQCaseId _purchRFQCaseId)
    {
        PurchRFQCaseLine purchRFQCaseLine;

        select firstOnly PurchQty from purchRFQCaseLine
            order by PurchQty
            where purchRFQCaseLine.RFQCaseId == _purchRFQCaseId;

        return (purchRFQCaseLine.PurchQty == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyLineByRFQCaseID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is any line in the <c>PurchRFQCaseLine</c> table by the specific RFQ case ID.
    /// </summary>
    /// <param name = "_purchRFQCaseId">
    /// The RFQ case ID to search.
    /// </param>
    /// <returns>
    /// true if there is at least one line for specific RFQ case; otherwise, false.
    /// </returns>
    public static boolean hasAnyLineByRFQCaseID(PurchRFQCaseId _purchRFQCaseId)
    {
        PurchRFQCaseLine purchRFQCaseLine;

        select firstOnly RecId from purchRFQCaseLine
             where purchRFQCaseLine.RFQCaseId == _purchRFQCaseId;

        return (purchRFQCaseLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The recode for purchRFQCaseTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.purchRFQCaseTable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124591</DeveloperDocumentation>
	<Label>@SYS134395</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RFQCaseId</TitleField1>
	<TitleField2>LineNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RFQCaseLineIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>RFQCaseLineIdx</PrimaryIndex>
	<ReplacementKey>RFQCaseLineIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQCaseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusLow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQCaseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RFQCaseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressReference</Name>
			<Label>@SYS88679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AddressRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressRefTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Category</Name>
			<Label>@SYS139028</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedDlv</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS71980</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetTransTypePurch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS35583</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQCaseId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QtyOrdered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainInventPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRefType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWInventory</Name>
			<Label>@PDS83</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainPurchPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceBasis_IN</Name>
			<Label>@GLS6628</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaximumRetailPrice_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectIdentification</Name>
			<Label>@SYS89920</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjLinePropertyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjSalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectSalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectTransaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Req</Name>
			<Label>@SYS11856</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RFQLines</Name>
			<Label>@SYS102858</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineItemType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpiryDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RFQQuantity</Name>
			<Label>@SYS102891</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainPurchPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StatusLow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusHigh</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AddressRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AddressRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AddressRefTableId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AddressRefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetBookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetIdOpen</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetTransTypePurch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransTypePurchEDT</ExtendedDataType>
			<EnumType>AssetTransTypePurch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ConfirmedDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQConfirmedDeliveryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteLinkedDimensionValueSet</ExtendedDataType>
			<Visible>No</Visible>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeliveryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQRequestedDeliveryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>TradeMultiShipTo</ConfigurationKey>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS80991</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpiryDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQExpiryDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemRefType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineItemType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchRFQLineItemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainInventPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS566</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainPurchPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS568</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Label>@SYS6114</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjLinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjSalesUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjItemTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS23884</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchOrderedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyOrdered</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainInventPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainPurchPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>reqLineRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqLineRefId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanIdSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPOId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFQCaseId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQCaseId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RFQType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchRFQType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusHigh</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS102683</Label>
			<EnumType>PurchRFQStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusLow</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS102685</Label>
			<EnumType>PurchRFQStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ToBeDeleted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RFQCaseLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RFQCaseId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RFQCaseId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>RFQCaseId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ProjInventJournalTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BudgetReservationLine_PSN</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EcoResCategory</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>ProjCategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCostPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjLinePropertyId</MapField>
					<MapFieldTo>ProjLinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjPriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesCurrencyId</MapField>
					<MapFieldTo>ProjSalesCurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesPrice</MapField>
					<MapFieldTo>ProjSalesPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjSalesUnitId</MapField>
					<MapFieldTo>ProjSalesUnitId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxGroupId</MapField>
					<MapFieldTo>ProjTaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTaxItemGroupId</MapField>
					<MapFieldTo>ProjTaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjTransId</MapField>
					<MapFieldTo>ProjTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PurchRFQLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AddressRefRecId</MapField>
					<MapFieldTo>AddressRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AddressRefTableId</MapField>
					<MapFieldTo>AddressRefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetBookId</MapField>
					<MapFieldTo>AssetBookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetId</MapField>
					<MapFieldTo>AssetId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssetTransTypePurch</MapField>
					<MapFieldTo>AssetTransTypePurch</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
					<MapFieldTo>ConfirmedDlv</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryAddress</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryCity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryCountryRegionId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryCounty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryStreet</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryZipCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExpiryDateTime</MapField>
					<MapFieldTo>ExpiryDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
					<MapFieldTo>ExternalItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefId</MapField>
					<MapFieldTo>InventRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefTransId</MapField>
					<MapFieldTo>InventRefTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventRefType</MapField>
					<MapFieldTo>ItemRefType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemName</MapField>
					<MapFieldTo>ItemName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineType</MapField>
					<MapFieldTo>LineItemType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
					<MapFieldTo>QtyOrdered</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqPlanIdSched</MapField>
					<MapFieldTo>ReqPlanIdSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReqPOId</MapField>
					<MapFieldTo>ReqPOId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RFQId</MapField>
					<MapFieldTo>RFQCaseId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RFQType</MapField>
					<MapFieldTo>RFQType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Status</MapField>
					<MapFieldTo>StatusHigh</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatusHigh</MapField>
					<MapFieldTo>StatusHigh</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StatusLow</MapField>
					<MapFieldTo>StatusLow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>RFQCaseId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TradeLineNumbering</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>HeaderId</MapField>
					<MapFieldTo>RFQCaseId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HeaderRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsDeleted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNumber</MapField>
					<MapFieldTo>LineNumber</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>PurchQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
					<MapFieldTo>PurchUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>DeliveryDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AccountingDistributionTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBookTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetBookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>AssetBookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetIdOpen</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Common</Name>
			<RelatedTable>Common</RelatedTable>
			<RelatedTableRole>Common</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>Common_PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefRecId</Name>
					<Field>AddressRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AddressRefTableId</Name>
					<Field>AddressRefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyProjSales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency_ProjSales</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesCurrencyId</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>ProjSalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<Field>CategoryId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LineItemTypeCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory_LineItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>LineItemType</Name>
					<Field>LineItemType</Field>
					<ValueStr>PurchRFQLineItemType::Category</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<Field>CategoryId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LineItemTypeItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_ItemType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTable_PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>LineItemType</Name>
					<Field>LineItemType</Field>
					<ValueStr>PurchRFQLineItemType::Item</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjItemTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjItemTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjItemTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTransId</Name>
					<SourceEDT>ProjItemTransId</SourceEDT>
					<Field>ProjTransId</Field>
					<RelatedField>ProjTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjLineProperty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjLinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>ProjLinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjSalesUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure_ProjSales</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_ProjSalesUnitId</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjSalesUnitId</Name>
					<Field>ProjSalesUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQCaseTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchRFQCaseTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchRFQCaseTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RFQCaseId</Name>
					<SourceEDT>PurchRFQCaseId</SourceEDT>
					<Field>RFQCaseId</Field>
					<RelatedField>RFQCaseId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RFQCaseIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_PuchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnit</Name>
					<Field>PurchUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReqPlanSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdSched</Name>
					<SourceEDT>ReqPlanIdSched</SourceEDT>
					<Field>ReqPlanIdSched</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PlanIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>ProjTaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchRFQCaseLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjTaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>ProjTaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>