<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfLayoutFields_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConfLayoutFields_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSize</Name>
				<Source><![CDATA[
    public int calcSize()
    {
        #ConfMacros_BR

        str     formatMain;
        int     mainFormatPos;
        int     length;
        int     decimals;
        int     i;
        int     j;

        switch (this.Type)
        {
            case ConfFieldType_BR::String_type:
                if (strScan(this.Format,'X(', 1, strLen(this.Format)))
                {
                    mainFormatPos = strScan(this.Format, 'X(', 1, strLen(this.Format));
                }
                else if (strScan(this.Format, 'D(', 1, strLen(this.Format)))
                {
                    mainFormatPos = strScan(this.Format, 'D(', 1, strLen(this.Format));
                }
                if (mainFormatPos)
                {
                    i = strScan(this.Format, ')', mainFormatPos + 2, strLen(this.Format));
                    if (!i)
                    {
                        throw error(strFmt("@GLS978", this.Format));
                    }
                    formatMain = subStr(this.Format, mainFormatPos, i - mainFormatPos + 1);
                    length = str2int(subStr(formatMain, 3, strLen(formatMain) - 3));
                }
                break;

            case ConfFieldType_BR::Date_type:
            case ConfFieldType_BR::Time_type:
            case ConfFieldType_BR::DateTime_type:
                length = strLen(this.Format);
                break;

            case ConfFieldType_BR::Real_type:
            case ConfFieldType_BR::Integer:
                if (this.FieldName == #sequence || this.FieldName == #SequenceZeroBased)
                {
                    length = strLen(this.Format);
                }
                else
                {
                    mainFormatPos = strScan(this.Format, '9(', 1, strLen(this.Format));
                    if (mainFormatPos)
                    {
                        if (strScan(this.Format, ')V9(', mainFormatPos + 2, strLen(this.Format)))
                        {
                            i = strScan(this.Format, ')V9(', mainFormatPos + 2, strLen(this.Format));
                            length = str2int(subStr(this.Format, mainFormatPos + 2, i - mainFormatPos + 2));
                            j = strScan(this.Format, ')', i + 4, strLen(this.Format));
                            if (!j)
                            {
                                throw error(strFmt("@GLS978", this.Format));
                            }
                            decimals = str2int(subStr(this.Format, i + 4, j - i + 4));
                            length = length + decimals + 1;
                        }
                        else if (strScan(this.Format, ')P9(', mainFormatPos + 2, strLen(this.Format)))
                        {
                            i = strScan(this.Format, ')P9(', mainFormatPos + 2, strLen(this.Format));
                            length = str2int(subStr(this.Format, mainFormatPos + 2, i - mainFormatPos + 2));
                            j = strScan(this.Format, ')', i + 4, strLen(this.Format));
                            if (!j)
                            {
                                throw error(strFmt("@GLS978", this.Format));
                            }
                            decimals = str2int(subStr(this.Format, i + 4, j - i + 4));
                            length = length + decimals + 1;
                        }
                        else if (strScan(this.Format, ')9(', mainFormatPos + 2, strLen(this.Format)))
                        {
                            i = strScan(this.Format, ')9(', mainFormatPos + 2, strLen(this.Format));
                            length = str2int(subStr(this.Format, mainFormatPos + 2, i - (mainFormatPos + 2)));
                            j = strScan(this.Format, ')', i + 3, strLen(this.Format));
                            if (!j)
                            {
                                throw error(strFmt("@GLS978", this.Format));
                            }
                            decimals = str2int(subStr(this.Format, i + 3, j - (i + 3)));
                            length = length + decimals;
                        }
                        else
                        {
                            j = strScan(this.Format, ')', mainFormatPos + 2, strLen(this.Format));
                            if (!j)
                            {
                                throw error(strFmt("@GLS978", this.Format));
                            }
                            length = str2int(subStr(this.Format, mainFormatPos + 2, j - (mainFormatPos - 2)));
                            decimals = 0;
                        }
                    }
                }
        }

        if (length <= 0)
        {
            throw error(strFmt("@GLS1195", "@SYS666"));
        }
        else
        {
            return length;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dictMethod</Name>
				<Source><![CDATA[
    DictMethod dictMethod(TableId _tableId, IdentifierName _methodName)
    {
        SysDictTable    sysDictTable = new SysDictTable(_tableId);
        int             i;

        if (sysDictTable)
        {
            for (i = 1; i <= sysDictTable.objectMethodCnt(); i++)
            {
                if (sysDictTable.objectMethod(i) == _methodName)
                {
                    return sysDictTable.objectMethodObject(i);
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLayoutLines</Name>
				<Source><![CDATA[
    void initFromLayoutLines(ConfLayoutLines_BR _layoutLines)
    {
        if (_layoutLines.LayoutLineType || _layoutLines.BatchLayoutLineType)
        {
            this.LayoutGroupId = _layoutLines.LayoutGroupId;
            this.LayoutLineNum = _layoutLines.LayoutLineNum;
            this.FieldArrayIdx = 0;
        }
        else
        {
            throw error("@GLS1314");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.FieldSeq = (select maxof(FieldSeq) from confLayoutFields_BR
                            where   confLayoutFields_BR.LayoutGroupId == this.LayoutGroupId
                                &&  confLayoutFields_BR.LayoutLineNum == this.LayoutLineNum).FieldSeq +1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record being processed is a batch.
    /// </summary>
    /// <returns>
    /// true if the record is a batch; false otherwise.
    /// </returns>
    public boolean isBatchID()
    {
        #ConfMacros_BR
        return (this.FieldName == #BatchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateOrTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the data type is date or time.
    /// </summary>
    /// <returns>
    /// true if the data type is date or time; false otherwise.
    /// </returns>
    public boolean isDateOrTime()
    {
        return (    this.Type == ConfFieldType_BR::Date_type
                ||  this.Type == ConfFieldType_BR::Time_type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumeric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the data type is numeric.
    /// </summary>
    /// <returns>
    /// true if the data type is integer or real; false otherwise.
    /// </returns>
    public boolean isNumeric()
    {
        return (    this.Type == ConfFieldType_BR::Integer
                ||  this.Type == ConfFieldType_BR::Real_type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        #ConfMacros_BR

        DictMethod      dictMethod;
        SysDictField    sysDictField;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ConfLayoutFields_BR, TableName):
                this.FieldName      = #None;
                this.Summaryfield   = #None;
                this.MethodName     = #None;
                this.FieldArrayIdx  = 0;
                break;

            case fieldNum(ConfLayoutFields_BR, FieldName):
                this.MethodName = #None;
                this.Value      = #None;

                if (this.TableName == #Command)
                {
                    if (this.FieldName != #None)
                    {
                        switch (this.FieldName)
                        {
                            case #QtdRegistersinBatch_File:
                            case #QtdBatches:
                            case #BatchId:
                            case #BatchRegisterNumber:
                            case #BatchSequenceNumber:
                            case #Sequence:
                            case #SequenceZeroBased:
                                this.setTypeFormat(0, Types::Integer);
                                break;

                            case #Systemdate:
                                this.setTypeFormat(0, Types::Date);
                                break;

                            case #Systemtime:
                                this.setTypeFormat(0, Types::Time);
                                break;

                            case #Fixed, #RegisterType:
                                FormDataUtil::getFormDataSource(this).active();
                                this.setTypeFormat(0, Types::String);
                                break;

                            default:
                                this.setTypeFormat(0, Types::String);
                        }
                    }
                }
                else if (this.FieldName != #None)
                {
                    sysDictField = new SysDictField(tableName2id (this.TableName), fieldName2id(tableName2id (this.TableName), this.FieldName));
                    this.setTypeFormat(0, sysDictField.baseType());
                    this.Summaryfield = #None;
                }
                else
                {
                    this.Summaryfield   = #None;
                    this.MethodName     = #None;
                    this.Value          = #None;
                    this.EndPosition    = 0;
                    this.Size           = 0;
                }
                FormDataUtil::getFormDataSource(this).active();
                break;

            case fieldNum(ConfLayoutFields_BR, MethodName):
                dictMethod = this.dictMethod(tableName2id(this.TableName), this.MethodName);
                if (dictMethod)
                {
                    this.MethodTypeDisplayEdit = dictMethod.displayType();
                    this.setTypeFormat(dictMethod.returnId(), dictMethod.returnType());
                }
                this.FieldName      = #None;
                this.Summaryfield   = #None;
                break;

            case fieldNum(ConfLayoutFields_BR, Format):
                this.Size           = this.calcSize();
                this.EndPosition    = this.StartPos + this.calcSize() - 1;
                break;

            case fieldNum(ConfLayoutFields_BR, Summaryfield):
                if (    this.TableName  != #Command
                    &&  this.FieldName  != #None
                    &&  this.Type       != ConfFieldType_BR::Real_type
                    &&  this.Type       != ConfFieldType_BR::Integer)
                {
                    sysDictField = new SysDictField(tableName2id (this.TableName), fieldName2id(tableName2id (this.TableName), this.FieldName));
                    this.setTypeFormat(0, sysDictField.baseType());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevNextLine</Name>
				<Source><![CDATA[
    ConfLayoutFields_BR prevNextLine(NextPrevious _direction,boolean _forUpdate=false)
    {
        ConfLayoutFields_BR  layoutField;

        layoutField.selectForUpdate(_forUpdate);

        if (_direction == NextPrevious::Next)
        {
            select firstonly layoutField
                order by FieldSeq asc
                    where   layoutField.LayoutGroupId   == this.LayoutGroupId
                        &&  layoutField.LayoutLineNum   == this.LayoutLineNum
                        &&  layoutField.FieldSeq        >  this.FieldSeq;
        }
        else
        {
            select firstonly layoutField
                order by FieldSeq desc
                    where   layoutField.LayoutGroupId   == this.LayoutGroupId
                        &&  layoutField.LayoutLineNum   == this.LayoutLineNum
                        &&  layoutField.FieldSeq        <  this.FieldSeq;
        }

        return  layoutField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTypeFormat</Name>
				<Source><![CDATA[
    void setTypeFormat(ExtendedTypeId _extDataType,Types _baseType)
    {
        #ConfMacros_Br

        DictType    dictType;
        Types       type;

        if (_extDataType)
        {
            dictType = new DictType(_extDataType);
        }

        if (dictType)
        {
            type = dictType.baseType();
        }
        else
        {
            type = _baseType;
        }

        switch (type)
        {
            case Types::String:
                this.Format = strFmt('X(%1)', dictType ? dictType.stringLen() : 10);
                this.Type   = ConfFieldType_BR::String_type;
                this.Size   = dictType ? dictType.stringLen() : 10;

                if (this.FieldName == #RegisterType ||
                        this.FieldName == fieldStr(EPSegmentTable_BR, EPSegment_BR))
                {
                    this.Format = strFmt('X(%1)',dictType ? dictType.stringLen() : 1);
                    this.Type = ConfFieldType_BR::String_type;
                    this.Size = 1;
                }
                break;

            case Types::Real:
                this.Format = strFmt('9(%1)V9(%2)',9,2);
                this.Type   = ConfFieldType_BR::Real_type;
                this.Size   = 12;
                break;

            case Types::Integer:
                this.Format = strFmt('9(%1)',6);
                this.Type   = ConfFieldType_BR::Integer;
                this.Size   = 6;

                switch (this.FieldName)
                {
                    case #Sequence:
                    case #SequenceZeroBased:
                        this.Format = #Hash+#Hash+#Hash+#Hash+#Hash;
                        this.Type   = ConfFieldType_BR::Integer;
                        this.Size   = 5;
                        break;

                    case #BatchId:
                        this.Format = strFmt('9(%1)', 5);
                        this.Type   = ConfFieldType_BR::Integer;
                        this.Size   = 5;
                        break;

                    case #QtdRegistersinBatch_File:
                        this.Format = strFmt('9(%1)',3);
                        this.Type   = ConfFieldType_BR::Integer;
                        this.Size   = 3;
                        break;

                    case #QtdBatches:
                        this.Format = strFmt('9(%1)',3);
                        this.Type   = ConfFieldType_BR::Integer;
                        this.Size   = 3;
                        break;

                    case #BatchRegisterNumber:
                        this.Format = strFmt('9(%1)',5);
                        this.Type   = ConfFieldType_BR::Integer;
                        this.Size   = 5;
                        break;

                    case #BatchSequenceNumber:
                        this.Format = strFmt('9(%1)',5);
                        this.Type   = ConfFieldType_BR::Integer;
                        this.Size   = 5;
                        break;
                }
                break;

            case  Types::Date:
                this.Format = #DateFormat;
                this.Type   = ConfFieldType_BR::Date_type;
                this.Size   = 10;
                break;

            case  Types::Time:
                this.Format = #TimeFormat;
                this.Type   = ConfFieldType_BR::Time_type;
                this.Size   = 6;
                break;

            case Types::UtcDateTime:
                this.Format = #DateTimeFormat;
                this.Type   = ConfFieldType_BR::DateTime_type;
                this.Size   = strLen(#DateTimeFormat);
                break;

            default:
                this.Format = strFmt('X(%1)', dictType ? dictType.stringLen() : 10);
                this.Type   = ConfFieldType_BR::String_type;
                this.Size   = dictType ? dictType.stringLen() : 10;
        }

        this.EndPosition = (this.StartPos + this.Size) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        #ConfMacros_BR

        boolean                 ret;
        SysDictField            sysDictField;
        DictMethod              dictMethod;
        TableId                 tableId = tableName2id(this.TableName);
        int                     i, j, v, size;
        int                     decimals, mainFormatPos;
        str                     string;
        SysDictTable            sysDictTable;
        DictType                dictType;
        container               names;
        ConfTableSelection_BR   tableSelection;
        ConfSummation_BR        confSummationloc;
        str                     strCheck;
        int                     position;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(ConfLayoutFields_BR, Value):
                    if (this.FieldName == #Registertype && strLen(this.Value) != this.Size)
                    {
                        ret = checkFailed(strFmt("@GLS1162", fieldPName(ConfLayoutFields_BR, Value), this.Format));
                    }
                    else if (this.FieldName == #Fixed && strLen(this.Value) > this.Size)
                    {
                        ret = checkFailed(strFmt("@GLS1163", fieldPName(ConfLayoutFields_BR, Value)));
                    }
                    break;

                case fieldNum(ConfLayoutFields_BR, MethodName):
                    sysDictTable = new SysDictTable(tableId);
                    if (sysDictTable)
                    {
                        for (i = 1; i <= sysDictTable.objectMethodCnt(); i++)
                        {
                            dictMethod = sysDictTable.objectMethodObject(i);

                            if (dictMethod
                                && (    dictMethod.displayType() == DisplayFunctionType::Get
                                    ||  dictMethod.displayType() == DisplayFunctionType::Set))
                            {
                                dictType = new DictType(dictMethod.returnId());
                                if (dictType
                                    &&  (   dictType.baseType() == Types::String
                                        ||  dictType.baseType() == Types::Integer
                                        ||  dictType.baseType() == Types::Real
                                        ||  dictType.baseType() == Types::Date
                                        ||  dictType.baseType() == Types::Enum))
                                {
                                    names += dictMethod.name();
                                }
                            }
                        }
                    }

                    if (this.MethodName != #None)
                    {
                        if (!conFind(names,this.MethodName))
                        {
                            ret = false;
                        }

                        if (this.RecId)
                        {
                            dictMethod = this.dictMethod(tableName2id(this.TableName), this.MethodName);
                            if (dictMethod)
                            {
                                this.MethodTypeDisplayEdit = dictMethod.displayType();
                                this.setTypeFormat(dictMethod.returnId(), dictMethod.returnType());
                            }
                        }
                        FormDataUtil::getFormDataSource(this).active();
                    }
                    break;

                case fieldNum(ConfLayoutFields_BR, TableName):
                    names += #Command;

                    while select TableName from tableSelection
                        where   tableSelection.ConfGroupId == ConfLayoutGroups_BR::find(this.LayoutGroupId).ConfGroupId
                    {
                        names += tableSelection.TableName;
                    }

                    if (this.TableName !=#None)
                    {
                        if (!conFind(names, this.TableName))
                        {
                            ret = false;
                        }
                    }
                    break;

                case fieldNum(ConfLayoutFields_BR, FieldArrayIdx):
                    sysDictField = new SysDictField(tableName2id(this.TableName), fieldName2id(tableName2id(this.TableName), this.FieldName));
                    if (    sysDictField
                        &&  sysDictField.arraySize() < this.FieldArrayIdx)
                    {
                        throw error("@GLS1205");
                    }
                    break;

                case fieldNum(ConfLayoutFields_BR, Format):
                    switch (this.Type)
                    {
                        case ConfFieldType_BR::String_type:
                            if (    (!strFind(this.Format, 'X', 1,1) && !strFind(this.Format, 'D', 1, 1))
                                ||  !strFind(this.Format, '(', 2,1)
                                ||  !strFind(this.Format, ')', strLen(this.Format),1))
                            {
                                ret = checkFailed(strFmt("@GLS1186", "@GLS976", "@GLS60346"));
                            }
                            break;

                        case ConfFieldType_BR::Integer:
                            if (this.FieldName != #sequence && this.FieldName != #sequenceZeroBased)
                            {
                                position = strFind(this.Format, ')', 1, strLen(this.Format));

                                if (    !strFind(this.Format, '9', 1,1)
                                    ||  !strFind(this.Format, '(', 2,1)
                                    ||  !strFind(this.Format, ')', strLen(this.Format),1)
                                    ||  subStr(this.Format, position+1, strLen(this.Format)-position))
                                {
                                    ret = checkFailed(strFmt("@GLS1186", "@SYS3845", "@GLS1187"));
                                }
                            }
                            break;

                        case ConfFieldType_BR::Real_type:
                            if (strFind(this.Format, 'V', 3,strLen(this.Format)))
                            {
                                v = strFind(this.Format, 'V', 3,strLen(this.Format));
                                if (    !strFind(this.Format, '9', 1,1)
                                    ||  !strFind(this.Format, '(', 2,1)
                                    ||  !strFind(this.Format, ')', v-1 ,1)
                                    ||  !v
                                    ||  !strFind(this.Format, '9', v+1 ,1)
                                    ||  !strFind(this.Format, '(', v+2 ,1)
                                    ||  !strFind(this.Format, ')', strLen(this.Format) ,1))
                                {
                                    ret = checkFailed(strFmt("@GLS2305", "@SYS10602", "@GLS1189", "@GLS1187"+"@GLS1187", "@GLS2109"));
                                }
                            }
                            else if (strFind(this.Format, 'P', 3,strLen(this.Format)))
                            {
                                v = strFind(this.Format, 'P', 3, strLen(this.Format));
                                if (    !strFind(this.Format, '9', 1,1)
                                    ||  !strFind(this.Format, '(', 2,1)
                                    ||  !strFind(this.Format, ')', v-1 ,1)
                                    ||  !v
                                    ||  !strFind(this.Format, '9', v+1 ,1)
                                    ||  !strFind(this.Format, '(', v+2 ,1)
                                    ||  !strFind(this.Format, ')', strLen(this.Format) ,1))
                                {
                                    ret = checkFailed(strFmt("@GLS2108", "@SYS10602", "@GLS1189", "@GLS1187"+"@GLS1187", "@GLS2109"));
                                }
                            }
                            else
                            {
                                v = strScan(this.Format, ')9(', 3,strLen(this.Format));
                                if (    !strFind(this.Format, '9', 1,1)
                                    ||  !strFind(this.Format, '(', 2,1)
                                    ||  !v
                                    ||  !strFind(this.Format, ')', strLen(this.Format) ,1))
                                {
                                    ret = checkFailed(strFmt("@GLS2108", "@SYS10602", "@GLS1189", "@GLS1187"+"@GLS1187", "@GLS2109"));
                                }
                            }
                            break;

                        case ConfFieldType_BR::Date_type:
                            this.Format = strUpr(this.Format);
                            if (    !strFind(this.Format,#D,1,strLen(this.Format))
                                ||  !strFind(this.Format,#M,1,strLen(this.Format))
                                ||  !strFind(this.Format,#Y,1,strLen(this.Format)))
                            {
                                ret = checkFailed("@GLS1191");
                                return ret;
                            }

                            if (    strLen(strKeep(this.Format, #D)) != 2
                                ||  strLen(strKeep(this.Format, #M)) != 2
                                ||  (   strLen(strKeep(this.Format, #Y)) != 2
                                    &&  strLen(strKeep(this.Format, #Y)) != 4))
                            {
                                ret = checkFailed("@GLS1191");
                                return ret;
                            }

                            strCheck = strAlpha(this.Format);
                            strCheck = strRem(strCheck, #D);
                            strCheck = strRem(strCheck, #M);
                            strCheck = strRem(strCheck, #Y);
                            if (strLen(strCheck) > 0)
                            {
                                ret = checkFailed("@GLS1191");
                            }

                            v = strFind(this.Format, #Y, 1, strLen(this.Format));
                            string = subStr(this.Format,v,4);

                            if (    !(strLen(string) == 2)
                                &&  !(strLen(string) == 4))
                            {
                                ret = checkFailed("@GLS1191");
                            }
                            break;

                        case ConfFieldType_BR::Time_type:
                            this.Format = strUpr(this.Format);

                            if (strLen(this.Format) != 6)
                            {
                                ret = checkFailed(strFmt("@GLS1186", "@SYS25816", "@GLS1190"));
                                return ret;
                            }

                            if (    subStr(this.Format, 1, 2) != 'HH'
                                ||  subStr(this.Format, 3, 2) != 'MM'
                                ||  subStr(this.Format, 5, 2) != 'SS')
                            {
                                ret = checkFailed(strFmt("@GLS1186", "@SYS25816", "@GLS1190"));
                                return ret;
                            }
                            break;

                        case ConfFieldType_BR::DateTime_type :
                            if (this.Format != #dateTimeFormat)
                            {
                                ret = checkFailed("@GLS60642");
                            }
                    }

                    if (this.Format == #None)
                    {
                        ret = checkFailed(strFmt("@SYS26332", "@SYS666"));
                    }
                    else if (this.FieldName == #sequence)
                    {
                        v = strLen(this.Format);
                        if (v != strLen(strKeep(this.Format, #hash)))
                        {
                            ret = false;
                        }

                        if (ret)
                        {
                            this.Size = v;
                        }
                        else
                        {
                            ret = checkFailed("@GLS1192");
                        }
                    }
                    break;

                case fieldNum(ConfLayoutFields_BR, EndPosition):
                    if (this.EndPosition < this.StartPos)
                    {
                        throw error(strFmt("@GLS1197", "@SYS54708", "@SYS54707"));
                    }
                    size = this.EndPosition - this.StartPos + 1;

                    switch (this.Type)
                    {
                        case ConfFieldType_BR::Date_type:
                            ret = checkFailed(strFmt("@GLS1198", "@SYS7402", "@SYS666"));
                            break;

                        case ConfFieldType_BR::Time_type:
                            ret = checkFailed(strFmt("@GLS1198", "@SYS25816", "@SYS666"));
                            break;

                        case ConfFieldType_BR::DateTime_type:
                            ret = checkFailed(strFmt("@GLS1198", "@SYS15226", "@SYS666"));
                            break;

                        case ConfFieldType_BR::Real_type:
                            mainFormatPos = strScan(this.Format, '9(', 1, strLen(this.Format));
                            if (mainFormatPos)
                            {
                                if (strScan(this.Format, ')V9(', mainFormatPos  + 2, strLen(this.Format)))
                                {
                                    i = strScan(this.Format, ')V9(', mainFormatPos + 2, strLen(this.Format));
                                    if (i)
                                    {
                                        j = strScan(this.Format, ')', i + 4, strLen(this.Format));
                                        if (!j)
                                        {
                                            throw error(strFmt("@GLS978",this.Format));
                                        }
                                        decimals = str2int(subStr(this.Format, i + 4, j - i + 4));
                                    }
                                    else
                                    {
                                        j = strScan(this.Format, ')', mainFormatPos + 2, strLen(this.Format));
                                        if (!j)
                                        {
                                            throw error(strFmt("@GLS978",this.Format));
                                        }
                                        decimals = 0;
                                    }
                                    if (    size >= 3
                                        &&  size >= (decimals + 2))
                                    {
                                        this.Format = strFmt('9(%1)V9(%2)', size - (decimals + 1), decimals);
                                    }
                                    else
                                    {
                                        throw error(strFmt("@GLS1196", "@SYS10602"));
                                    }
                                }
                                else
                                {
                                    i = strScan(this.Format, ')9(', mainFormatPos + 2, strLen(this.Format));
                                    if (i)
                                    {
                                        j = strScan(this.Format, ')', i + 3, strLen(this.Format));
                                        if (!j)
                                        {
                                            throw error(strFmt("@GLS978", this.Format));
                                        }
                                        decimals = str2int(subStr(this.Format, i + 3, j - (i + 3)));
                                    }
                                    else
                                    {
                                        j = strScan(this.Format, ')', mainFormatPos + 2, strLen(this.Format));
                                        if (!j)
                                        {
                                            throw error(strFmt("@GLS978",this.Format));
                                        }
                                        decimals = 0;
                                    }
                                    if ((size >= 1) && (size >= (decimals)))
                                    {
                                        this.Format = strFmt('9(%1)9(%2)', (size - decimals), decimals);
                                    }
                                    else
                                    {
                                        throw error(strFmt("@GLS1196", "@SYS10602"));
                                    }
                                }
                            }
                            break;

                        case ConfFieldType_BR::String_type:
                            this.Format = strFmt('X(%1)', size);
                            break;

                        case ConfFieldType_BR::Integer:
                            if (this.FieldName == #Sequence)
                            {
                                this.Format = strRep(#Hash, size);
                            }
                            else
                            {
                                this.Format = strFmt('9(%1)', size);
                            }
                            break;
                    }

                    if (ret)
                    {
                        this.Size = size;
                    }
                    break;

                case fieldNum(ConfLayoutFields_BR, TruncateField):
                    if (this.Type == ConfFieldType_BR::String_type)
                    {
                        if (    this.TruncateField != ConfTruncate_BR::None
                            &&  this.TruncateField != ConfTruncate_BR::Truncate)
                        {
                            ret = checkFailed("@GLS1200");
                        }
                    }
                    else
                    {
                        if (    this.TruncateField != ConfTruncate_BR::None
                            &&  this.TruncateField != ConfTruncate_BR::Round
                            &&  this.TruncateField != ConfTruncate_BR::RoundUp
                            &&  this.TruncateField != ConfTruncate_BR::RoundDown)
                        {
                            ret = checkFailed("@GLS1201");
                        }
                    }
                    break;

                case fieldNum(ConfLayoutFields_BR, Summaryfield):
                    if (    this.TableName != #Command
                        &&  this.FieldName != #None)
                    {
                        while select SumSelected, CountSelected, AverageSelected from confSummationloc
                            where   confSummationloc.ConfGroupId == ConfLayoutGroups_BR::find(this.LayoutGroupId).ConfGroupId
                                &&  confSummationloc.TableName   == this.TableName
                                &&  confSummationloc.FieldName   == this.FieldName
                        {
                            if (confSummationloc.SumSelected)
                            {
                                names += #SumTotal;
                            }

                            if (confSummationloc.CountSelected)
                            {
                                names += #Count;
                            }

                            if (confSummationloc.AverageSelected)
                            {
                                names += #Average;
                            }
                        }
                    }
                    else if (this.MethodName != #None)
                    {
                        if (    this.Type == ConfFieldType_BR::Integer
                            ||  this.Type == ConfFieldType_BR::Real_type)
                        {
                            names += #SumTotal;
                            names += #Count;
                            names += #Average;
                        }
                    }

                    if (this.Summaryfield != #None
                        && !ConfTable_BR::find(ConfLayoutGroups_BR::find(this.LayoutGroupId).ConfGroupId).IsQueryBased)
                    {
                        if (!conFind(names, this.Summaryfield))
                        {
                            ret = false;
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #ConfMacros_BR

        boolean             ret;
        int                 nextStartPosition;
        ConfLayoutFields_BR confLayoutFieldsLoc;

        ret = super();
        if (ret)
        {
            if (    !this.FieldName
                &&  !this.MethodName)
            {
                ret = false;
                throw error("@GLS1161");
            }

            if (    this.TableName == #Command
                &&  (   this.FieldName == #Fixed
                    ||  this.FieldName == #RegisterType))
            {
                if (this.Value == #None)
                {
                    ret = false;
                    info(strFmt("@SYS26332", fieldPName(ConfLayoutFields_BR, Value)));
                }
            }

            if (    ConfLayoutLines_BR::findRecordType(this.LayoutGroupId, this.LayoutLineNum, false).BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileHeader
                ||  ConfLayoutLines_BR::findRecordType(this.LayoutGroupId, this.LayoutLineNum, false).BatchLayoutLineType == ConfBatchLayoutLineType_BR::FileTrailer)
            {
                if (this.FieldName == #batchId)
                {
                    if (this.Value == #None)
                    {
                        ret = checkFailed(strFmt("@SYS26332", fieldPName(ConfLayoutFields_BR, Value)));
                    }
                }
            }

            if (    (this.FieldName == fieldStr(EPSegmentTable_BR, EPSegment_BR) || this.FieldName == fieldStr(CustPaymModeSpec, EPSegmentReturn_BR))
                &&  ConfLayoutLines_BR::findRecordType(this.LayoutGroupId, this.LayoutLineNum, false).BatchLayoutLineType == ConfBatchLayoutLineType_BR::Details)
            {
                if (this.Value == #None)
                {
                    ret = checkFailed(strFmt("@SYS26332", fieldPName(ConfLayoutFields_BR, Value)));
                }
            }

            if (ret)
            {
                if (    this.FieldName      == #Registertype
                    &&  strLen(this.Value)  != this.Size)
                {
                    ret = checkFailed(strFmt("@GLS1162", fieldPName(ConfLayoutFields_BR, Value), this.Format));
                }
                else if (   this.FieldName == #Fixed
                        ||  this.FieldName == #batchId
                        ||  this.FieldName == fieldStr(EPSegmentTable_BR, EPSegment_BR)
                        &&  strLen(this.Value) > this.Size)
                {
                    ret = checkFailed(strFmt("@GLS1163", fieldPName(ConfLayoutFields_BR, Value)));
                }
            }

            if (ret)
            {
                ttsbegin;

                nextStartPosition   = this.StartPos + this.Size;
                this.EndPosition    = nextStartPosition - 1;

                while select forupdate confLayoutFieldsLoc
                    order by FieldSeq
                    where   confLayoutFieldsLoc.LayoutGroupId   == this.LayoutGroupId
                        &&  confLayoutFieldsLoc.LayoutLineNum   == this.LayoutLineNum
                        &&  confLayoutFieldsLoc.FieldSeq        >  this.FieldSeq
                {
                    confLayoutFieldsLoc.StartPos    = nextStartPosition;
                    confLayoutFieldsLoc.EndPosition = confLayoutFieldsLoc.StartPos + confLayoutFieldsLoc.Size - 1;
                    nextStartPosition               = confLayoutFieldsLoc.StartPos + confLayoutFieldsLoc.Size;
                    confLayoutFieldsLoc.update();
                }

                ttscommit;
            }

            if (ret)
            {
                if (    this.TableName == #Command
                    &&  this.FieldName == #batchId)
                {
                    if (this.Size > 5)
                    {
                        ret = checkFailed(strFmt("@GLS1315", #batchid, 5));
                    }
                }
                if (    this.FieldName  == fieldStr(EPSegmentTable_BR, EPSegment_BR)
                    &&  this.Size       != 1)
                {
                    ret = checkFailed(strFmt("@GLS1315", fieldStr(EPSegmentTable_BR, EPSegment_BR), 1));
                }
            }

            if (ret)
            {
                if (    this.TableName == #Command
                    &&  this.FieldName == #batchId)
                {
                    select firstonly confLayoutFieldsLoc
                        where   confLayoutFieldsLoc.LayoutGroupId   == this.LayoutGroupId
                            &&  confLayoutFieldsLoc.LayoutLineNum   == 1
                            &&  confLayoutFieldsLoc.FieldName       == #batchId
                            &&  confLayoutFieldsLoc.FieldSeq        != this.FieldSeq;

                    if (    confLayoutFieldsLoc
                        &&  confLayoutFieldsLoc.Size != this.Size)
                    {
                        ret = checkFailed("@GLS1316");
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ConfLayoutFields_BR find(ConfGroupId_BR _groupId, LineNum _layoutLineNo, LineNum _fieldSeqToFind, boolean _forUpdate=false)
    {
        ConfLayoutFields_BR confLayoutFields;

        confLayoutFields.selectForUpdate(_forUpdate);

        select confLayoutFields
            where   confLayoutFields.LayoutGroupId  == _groupId
                &&  confLayoutFields.LayoutLineNum  ==  _layoutLineNo
                &&  confLayoutFields.FieldSeq       == _fieldSeqToFind;

        return  confLayoutFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupBy</Name>
				<Source><![CDATA[
    static ConfLayoutFields_BR findGroupBy(ConfGroupId_BR _groupId, LineNum _layoutLineNo, boolean _forUpdate=false)
    {
        #ConfMacros_BR

        ConfLayoutFields_BR  confLayoutFields;

        confLayoutFields.selectForUpdate(_forUpdate);

        select confLayoutFields
            where   confLayoutFields.LayoutGroupId  ==  _groupId
                &&  confLayoutFields.LayoutLineNum  ==  _layoutLineNo
                &&  confLayoutFields.Summaryfield   ==  #GroupBy;

        return confLayoutFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineNum</Name>
				<Source><![CDATA[
    static ConfLayoutFields_BR findLineNum( ConfGroupId_BR  _groupId,
                                             EPSegment_BR    _segment,
                                            boolean         _forUpdate = false)
    {
        #ConfMacros_BR

        ConfLayoutFields_BR confLayoutFields;

        confLayoutFields.selectForUpdate(_forUpdate);

        select confLayoutFields
            where confLayoutFields.LayoutGroupId    == _groupId
                &&  confLayoutFields.FieldName      == fieldStr(EPSegmentTable_BR, EPSegment_BR)
                &&  confLayoutFields.Value          == _segment;

        return  confLayoutFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    static ConfLayoutFields_BR findRecord(  ConfGroupId_BR  _groupId,
                                            LineNum         _layoutLineNo,
                                            TableName       _tableName,
                                            FieldName       _fieldName,
                                            boolean         _forUpdate      = false)
    {
        #ConfMacros_BR

        ConfLayoutFields_BR confLayoutFields;

        confLayoutFields.selectForUpdate(_forUpdate);

        select  confLayoutFields
            where   confLayoutFields.LayoutGroupId  ==  _groupId
                &&  confLayoutFields.LayoutLineNum  == _layoutLineNo
                &&  confLayoutFields.TableName      == _tableName
                &&  confLayoutFields.FieldName      == _fieldName;

        return confLayoutFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64023</DeveloperDocumentation>
	<Label>@GLS999</Label>
	<TitleField1>LayoutGroupId</TitleField1>
	<TitleField2>TableName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<ClusteredIndex>LayoutLineSeqIdx</ClusteredIndex>
	<Modules>Bank</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>LayoutLineSeqIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FieldSeq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Summaryfield</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldArrayIdx</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodTypeDisplayEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndPosition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Size</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Format</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justifiy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldFill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TruncateField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldArrayIdx</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldSeq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodTypeDisplayEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Size</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Format</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justifiy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndPosition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldFill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TruncateField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Summaryfield</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LayoutLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldSeq</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FieldMethodData</Name>
			<Label>@GLS1000</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldArrayIdx</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LayoutFields</Name>
			<Label>@GLS999</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LayoutGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MethodTypeDisplayEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartPos</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Size</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Format</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Justifiy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndPosition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FieldFill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TruncateField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Summaryfield</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BatchId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ConfBatchId_BR</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfDescription_BR</ExtendedDataType>
			<Label>@SYS71295</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EndPosition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
			<Label>@SYS54708</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FieldArrayIdx</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ConfFieldArrayIdx_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldFill</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ConfFieldFill_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FieldName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfFieldName_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FieldSeq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Format</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfFieldFormat_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Justifiy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ConfJustify_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LayoutGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfLayoutGroupId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LayoutLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Label>@GLS955</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MethodName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfMethodName_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MethodTypeDisplayEdit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS974</Label>
			<EnumType>DisplayFunctionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Size</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
			<Label>@SYS28127</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>StartPos</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Counter</ExtendedDataType>
			<Label>@SYS54707</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Summaryfield</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfSummaryField_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfTableName_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TruncateField</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ConfTruncate_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConfFieldTypeId_BR</ExtendedDataType>
			<EnumType>ConfFieldType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FormatTxt</ExtendedDataType>
			<Label>@SYS74604</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LayoutLineSeqIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LayoutGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LayoutLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FieldSeq</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ConfLayoutLines</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ConfLayoutLines_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConfLayoutLines_BR</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ConfLayoutFields_BR</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutLineNum</Name>
					<Field>LayoutLineNum</Field>
					<RelatedField>LayoutLineNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LayoutGroupId</Name>
					<Field>LayoutGroupId</Field>
					<RelatedField>LayoutGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>