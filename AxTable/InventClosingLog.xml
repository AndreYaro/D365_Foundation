<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventClosingLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventClosingLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>concatenate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Concatenates two containers with Infolog messages.
    /// </summary>
    /// <param name="_head">
    ///    The first container with Infolog messages.
    /// </param>
    /// <param name="_tail">
    ///    The second container with Infolog messages.
    /// </param>
    /// <returns>
    ///    A container that contains the concatenated Infolog messages from the first and second container.
    /// </returns>
    private static container concatenate(container _head, container _tail)
    {
        if (_head == conNull())
            return _tail;

        if (_tail == conNull())
            return _head;

        if (typeOf(conPeek(_tail, 1)) == Types::Container && conLen(conPeek(_tail, 1)) == 1 &&
            typeOf(conPeek(conPeek(_tail, 1), 1)) == Types::Integer)
        {
            return _head + conDel(_tail,1,1); // remove version
        }
        else
        {
            return _head + _tail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether there are Infolog messages for a given date and voucher.
    /// </summary>
    /// <param name="_transDate">
    ///    The date for which the Infolog messages would have been logged.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher for which the Infolog messages would have been logged.
    /// </param>
    /// <returns>
    ///    true if there are Infolog messages for the given date and voucher; otherwise, false.
    /// </returns>
    public static boolean hasLog(TransDate _transDate, Voucher _voucher)
    {
        InventClosingLog inventClosingLog;

        select firstonly Voucher from inventClosingLog
            where inventClosingLog.TransDate == _transDate
            &&    inventClosingLog.Voucher   == _voucher;

        return inventClosingLog.Voucher != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the infolog messages for a given date and voucher by loading them into the infolog.
    /// </summary>
    /// <param name="_transDate">
    /// The date for which the infolog messages are to be shown.
    /// </param>
    /// <param name="_voucher">
    /// The voucher for which the infolog messages are to be shown.
    /// </param>
    public static void showLog(TransDate _transDate, Voucher _voucher)
    {
        InventClosing inventClosing = InventClosing::find(_voucher, _transDate);

        setPrefix(strFmt("%1 - %2", tablePName(InventClosing), inventClosing.caption()));

        InventClosingLog inventClosingLog;

        while select inventClosingLog order by LogType, LogId
            where inventClosingLog.TransDate == _transDate
            &&    inventClosingLog.Voucher   == _voucher
        {
            if (inventClosingLog.InfologDataSummary != conNull())
            {
                infolog.import(inventClosingLog.InfologDataSummary);
            }

            infolog.import(inventClosingLog.InfologData);

            // the infolog can show at most 500 lines, so why import more?
            if (infologLine() > 500)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts Infolog messages for a given date, voucher, and item ID into the database.
    /// </summary>
    /// <param name="_transDate">
    ///    The date for which the messages are to be logged.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher for which the messages are to be logged.
    /// </param>
    /// <param name="_logType">
    ///    An enumeration used to categorize the messages by.
    /// </param>
    /// <param name="_logId">
    ///    A string used to categorize the messages by.
    /// </param>
    /// <param name="_infologData">
    ///    The container in which the Infolog messages should be logged.
    /// </param>
    public static void writeLog(TransDate _transDate, Voucher _voucher, LogType _logType, LogId _logId, container _infologData)
    {
        InventClosingLog inventClosingLog;

        if (_infologData != conNull())
        {
            ttsbegin;

            select firstonly forupdate inventClosingLog
                where inventClosingLog.TransDate == _transDate &&
                      inventClosingLog.Voucher   == _voucher   &&
                      inventClosingLog.LogType   == _logType   &&
                      inventClosingLog.LogId     == _logId;

            if (inventClosingLog.RecId)
            {
                if (conLen(inventClosingLog.InfologData) < InventClosingLog::getMaxNumberOfLogLinesPerLogType())
                {
                    inventClosingLog.InfologData = InventClosingLog::concatenate(inventClosingLog.InfologData, _infologData);
                    inventClosingLog.update();
                }
            }
            else
            {
                inventClosingLog.TransDate   = _transDate;
                inventClosingLog.Voucher     = _voucher;
                inventClosingLog.LogType     = _logType;
                inventClosingLog.LogId       = _logId;
                inventClosingLog.InfologData = _infologData;
                inventClosingLog.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogWithSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts Infolog messages for a given date, voucher, and item ID into the database with summary message.
    /// </summary>
    /// <param name="_transDate">
    ///    The date for which the messages are to be logged.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher for which the messages are to be logged.
    /// </param>
    /// <param name="_logType">
    ///    An enumeration used to categorize the messages by.
    /// </param>
    /// <param name="_logId">
    ///    A string used to categorize the messages by.
    /// </param>
    /// <param name="_infologDataSummary">
    ///    The container in which the Infolog summary messages should be logged.
    /// </param>
    public static void writeLogWithSummary(TransDate _transDate, Voucher _voucher, LogType _logType, LogId _logId, container _infologDataSummary = conNull())
    {
        InventClosingLog inventClosingLog;

        if (_infologDataSummary != conNull())
        {
            ttsbegin;

            select firstonly forupdate inventClosingLog
                where inventClosingLog.TransDate == _transDate &&
                      inventClosingLog.Voucher   == _voucher   &&
                      inventClosingLog.LogType   == _logType   &&
                      inventClosingLog.LogId     == _logId;

            if (inventClosingLog.RecId)
            {
                inventClosingLog.InfologDataSummary = _infologDataSummary;
                inventClosingLog.update();
            }
            else
            {
                inventClosingLog.TransDate   = _transDate;
                inventClosingLog.Voucher     = _voucher;
                inventClosingLog.LogType     = _logType;
                inventClosingLog.LogId       = _logId;
                inventClosingLog.InfologDataSummary = _infologDataSummary;
                inventClosingLog.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLog</Name>
				<Source><![CDATA[
    public static void clearLog(TransDate _transDate, Voucher _voucher)
    {
        InventClosingLog inventClosingLog;
        delete_from inventClosingLog
              where inventClosingLog.TransDate == _transDate
                 && inventClosingLog.Voucher == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumberOfLogLinesPerLogType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the maximum number of Log lines to be inserted in the table per log type and log ID on a particular closing.
    /// </summary>
    /// <returns>The maximum number of log lines.</returns>
    /// <remarks>The base implementation of this method returns 5000 to prevent SQL buffer overflow and improve performance by reducing number of updates</remarks>
    protected static int getMaxNumberOfLogLinesPerLogType()
    {
        return 5000;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123680</DeveloperDocumentation>
	<Label>@SYS2515</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>Voucher</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>VoucherDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<OccEnabled>No</OccEnabled>
	<PrimaryIndex>VoucherDateIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InfologData</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LogId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>InfologData</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InfologData</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LogId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LogType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LogType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>InfologDataSummary</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InfologData</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LogType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LogId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventClosing</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123670</EntityRelationshipRole>
			<RelatedTable>InventClosing</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>