<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetGroupGlobal2LocalAssetGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified asset group ID.
    /// </summary>
    /// <param name="_assetGroupGlobalRecId">
    /// The record ID of the <c>AssetGroupGlobal</c> record to find.
    /// </param>
    /// <param name="_assetRuleRecId">
    /// The record ID of the asset rule for which the check is being made.
    /// </param>
    /// <param name="_legalEntity">
    /// The record ID of the applicable legal entity.
    /// </param>
    /// <returns>
    /// The asset group ID; otherwise, an empty string.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The global asset group is missing on qualifiers or the global asset group has not been mapped to
    /// local asset group.
    /// </exception>
    public static AssetGroupId assetGroupGlobal2LocalAssetGroupId(RefRecId _assetGroupGlobalRecId, recId _assetRuleRecId, LegalEntity _legalEntity)
    {
        AssetGroupId   assetGroupId;

        if (_assetGroupGlobalRecId)
        {
            assetGroupId = AssetGroupGlobalMapping::findAssetGroupGlobal(_assetGroupGlobalRecId, _legalEntity).GroupId;
        }

        return assetGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetRule</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID in the <c>AssetRule</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>AssetRule</c> table if found; otherwise, an empty record.
    /// </returns>
    public static AssetRule find(
        recId                   _recId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetRule   assetRule;

        assetRule.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetRule
        where
            assetRule.RecId == _recId;

        return assetRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetRuleThresholds</Name>
				<Source><![CDATA[
    internal static container findAssetRuleThresholds(RefRecId _ecoResCategory,
        date         _transDate,
        CurrencyCode _currencyCode,
        PurchPrice   _purchPrice,
        LegalEntity  _legalEntity,
        LanguageId   _languageId = xUserInfo::find().Language,
        boolean      _getQualifiers = true)
    {
        AssetRuleEcoResCategory                 assetRuleEcoResCategory;
        EcoResCategory                          selectedEcoResCategory;
        EcoResCategory                          ecoResCategory;
        AssetRuleThreshold                      assetRuleThreshold;
        AssetRuleLocal                          assetRuleLocal;
        AssetRuleThresholdLocal                 assetRuleThresholdLocal;

        AssetRule                               assetRule;
        container                               assetRuleThresholdContainer;


        var cacheScope = tableStaticMethodStr(AssetRule, findAssetRuleThresholds);
        var ruleThresholdCacheKey = [_ecoResCategory, _transDate, _currencyCode, _purchPrice, _legalEntity, _languageId, _getQualifiers];
        
        if (SysTransactionScopeCache::isSet(cacheScope, ruleThresholdCacheKey))
        {
            return SysTransactionScopeCache::get(cacheScope, ruleThresholdCacheKey);
        }

        selectedEcoResCategory =  EcoResCategory::find(_ecoResCategory);

        select  firstonly    RecId from assetRule
            order by ecoResCategory.Level desc
            join CategoryHierarchy, NestedSetLeft, NestedSetRight, RecId from ecoResCategory
                where   ecoResCategory.CategoryHierarchy == selectedEcoResCategory.CategoryHierarchy
                    &&  ecoResCategory.NestedSetLeft  <= selectedEcoResCategory.NestedSetLeft
                    &&  ecoResCategory.NestedSetRight >= selectedEcoResCategory.NestedSetRight
            join EcoResCategory, AssetRule from assetRuleEcoResCategory
                where   assetRuleEcoResCategory.EcoResCategory == ecoResCategory.RecId
                    &&  assetRuleEcoResCategory.AssetRule == assetRule.RecId;

        if (assetRule)
        {
            select firstonly  validTimeState(_transDate, _transDate) ThresholdAmount, Currency, RecId from assetRuleThreshold
                where assetRuleThreshold.AssetRule == assetRule.RecId;

            select validTimeState(_transDate, _transDate) AssetGroupId, RecId from assetRuleLocal
                    where   assetRuleLocal.BuyingLegalEntity       == _legalEntity
                        &&  assetRuleLocal.AssetRule               == assetRule.RecId
            join ThresholdAmount, Currency, RecId from assetRuleThresholdLocal
                    where   assetRuleThresholdLocal.AssetRuleLocal == assetRuleLocal.RecId;

            assetRuleThresholdContainer =
                [
                 assetRule.RecId,
                 assetRuleEcoResCategory.AssetRule,
                 assetRuleLocal.RecId,
                 assetRuleThreshold.RecId,
                 assetRuleThreshold.Currency,
                 assetRuleThreshold.ThresholdAmount,
                 assetRuleThresholdLocal.RecId,
                 assetRuleThresholdLocal.Currency,
                 assetRuleThresholdLocal.ThresholdAmount
                ];
        }

        SysTransactionScopeCache::set(cacheScope, ruleThresholdCacheKey, assetRuleThresholdContainer);
        return assetRuleThresholdContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAssetRuleForCategory</Name>
				<Source><![CDATA[
    internal static boolean existsAssetRuleForCategory(RefRecId _ecoResCategory,
        date             _transDate,
        CurrencyCode     _currencyCode,
        PurchPrice       _purchPrice,
        LegalEntity      _legalEntity,
        LanguageId       _languageId = xUserInfo::find().Language,
        boolean          _getQualifiers = true)
    {
        var assetRuleThresholds = AssetRule::findAssetRuleThresholds(
            _ecoResCategory,
            _transDate,
            _currencyCode,
            _purchPrice,
            _legalEntity,
            _languageId,
            _getQualifiers);

        RefRecId assetRuleRecId;
        RefRecId assetRuleEcoResCategoryAssetRule;
        RefRecId assetRuleLocalRecId;

        RefRecId assetRuleThresholdRecId;
        CurrencyCode assetRuleThresholdCurrency;
        AssetCapitalizationPriceThreshold assetRulethresholdAmount;
            
        RefRecId assetRuleThresholdLocalRecId;
        CurrencyCode assetRuleThresholdLocalCurrency;
        AssetCapitalizationPriceThreshold assetRuleThresholdLocalThresholdAmount;

        [assetRuleRecId,
         assetRuleEcoResCategoryAssetRule,
         assetRuleLocalRecId,
         assetRuleThresholdRecId,
         assetRuleThresholdCurrency,
         assetRulethresholdAmount,
         assetRuleThresholdLocalRecId,
         assetRuleThresholdLocalCurrency,
         assetRuleThresholdLocalThresholdAmount] = assetRuleThresholds;

        return assetRuleEcoResCategoryAssetRule
            && (assetRuleThresholdRecId || assetRuleThresholdLocalRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessedAssetRule</Name>
				<Source><![CDATA[
    internal static container getProcessedAssetRule(RefRecId _ecoResCategory,
        date         _transDate,
        CurrencyCode _currencyCode,
        PurchPrice   _purchPrice,
        LegalEntity  _legalEntity,
        LanguageId   _languageId = xUserInfo::find().Language,
        boolean      _getQualifiers = true)
    {
        container con;

        var cacheScope = funcName();
        var cacheKey = [_ecoResCategory, _transDate, _currencyCode, _purchPrice, _legalEntity, _languageId, _getQualifiers];
    
        if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
        {
            return SysTransactionScopeCache::get(cacheScope, cacheKey);
        }

        var assetThresholdCacheScope = tableStaticMethodStr(AssetRule, findAssetRuleThresholds);

        container assetRuleThresholds;

        if (SysTransactionScopeCache::isSet(assetThresholdCacheScope, cacheKey))
        {
            assetRuleThresholds = SysTransactionScopeCache::get(assetThresholdCacheScope, cacheKey);
        }
        else
        {
            assetRuleThresholds = AssetRule::findAssetRuleThresholds(
                _ecoResCategory,
                _transDate,
                _currencyCode,
                _purchPrice,
                _legalEntity,
                _languageId,
                _getQualifiers);
        }

        RefRecId assetRuleRecId;
        RefRecId assetRuleEcoResCategoryAssetRule;
        RefRecId assetRuleLocalRecId;

        RefRecId assetRuleThresholdRecId;
        CurrencyCode assetRuleThresholdCurrency;
        AssetCapitalizationPriceThreshold assetRulethresholdAmount;
        
        RefRecId assetRuleThresholdLocalRecId;
        CurrencyCode assetRuleThresholdLocalCurrency;
        AssetCapitalizationPriceThreshold assetRuleThresholdLocalThresholdAmount;

        [assetRuleRecId,
         assetRuleEcoResCategoryAssetRule,
         assetRuleLocalRecId,
         assetRuleThresholdRecId,
         assetRuleThresholdCurrency,
         assetRulethresholdAmount,
         assetRuleThresholdLocalRecId,
         assetRuleThresholdLocalCurrency,
         assetRuleThresholdLocalThresholdAmount] = assetRuleThresholds;

        if (assetRuleRecId)
        {
            AmountMST amountInOrgWideCur = 0;
            AmountMST amountLESpecificCur = 0;

            if (assetRuleThresholdRecId)
            {
                amountInOrgWideCur  = ExchangeRateHelper::curPrice2CurPrice(_purchPrice, _currencyCode, assetRuleThresholdCurrency);
            }

            if (assetRuleThresholdLocalRecId)
            {
                amountLESpecificCur = ExchangeRateHelper::curPrice2CurPrice(_purchPrice, _currencyCode, assetRuleThresholdLocalCurrency);
            }

            boolean useGlobal = false;

            if (assetRuleEcoResCategoryAssetRule &&
            ((assetRuleThresholdRecId && amountInOrgWideCur >= assetRuleThresholdAmount ) ||
            (assetRuleThresholdLocalRecId && amountLESpecificCur >= assetRuleThresholdLocalThresholdAmount)))
            {
                if (!assetRuleLocalRecId ||
                ((assetRuleThresholdRecId && amountInOrgWideCur > assetRuleThresholdAmount ) &&
                (assetRuleThresholdLocalRecId && amountLESpecificCur > assetRuleThresholdLocalThresholdAmount)))
                {
                    useGlobal = true;
                }

                con = AssetRule::processRule(assetRuleEcoResCategoryAssetRule, _languageId, useGlobal, _legalEntity, _getQualifiers);
            }
        }

        SysTransactionScopeCache::set(cacheScope, cacheKey, con);
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndProcessRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a rule is applicable to a procurement and optionally processes the rule if applicable to the procurement category.
    /// </summary>
    /// <param name="_ecoResCategory">
    ///    The record ID of the category.
    /// </param>
    /// <param name="_transDate">
    ///    transaction date of procurement.
    /// </param>
    /// <param name="_currencyCode">
    ///    currency code of the transaction amount.
    /// </param>
    /// <param name="_purchPrice">
    ///    purchase price on the transaction.
    /// </param>
    /// <param name="_legalEntity">
    ///    The record ID of the applicable legal entity.
    /// </param>
    /// <param name="_languageId">
    ///    lanugageId of the user.
    /// </param>
    /// <param name="_getQualifiers">
    ///    whether to retrieve qualifiers or not.
    /// </param>
    /// <returns>
    ///    The appropriate values, such as global asset group, options or local asset group.
    /// </returns>
    public static container findAndProcessRule(RefRecId         _ecoResCategory,
                                               date             _transDate,
                                               CurrencyCode     _currencyCode,
                                               PurchPrice       _purchPrice,
                                               LegalEntity      _legalEntity,
                                               LanguageId       _languageId = xUserInfo::find().Language,
                                               boolean          _getQualifiers = true)
    {
        if (PurchReqLineBlankAssetGroupOnlyForConfigRuleFlight::instance().isEnabled())
        {
            return AssetRule::getProcessedAssetRule(_ecoResCategory, _transDate, _currencyCode, _purchPrice, _legalEntity, _languageId, _getQualifiers);
        }

        return AssetRule::findAndProcessRuleValues(_ecoResCategory, _transDate, _currencyCode, _purchPrice, _legalEntity, _languageId, _getQualifiers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndProcessRuleValues</Name>
				<Source><![CDATA[
    private static container findAndProcessRuleValues(RefRecId         _ecoResCategory,
                                                      date             _transDate,
                                                      CurrencyCode     _currencyCode,
                                                      PurchPrice       _purchPrice,
                                                      LegalEntity      _legalEntity,
                                                      LanguageId       _languageId = xUserInfo::find().Language,
                                                      boolean          _getQualifiers = true)
    {
        AssetRuleEcoResCategory                 assetRuleEcoResCategory;
        EcoResCategory                          selectedEcoResCategory;
        EcoResCategory                          ecoResCategory;
        AssetRuleThreshold                      assetRuleThreshold;
        AssetRuleLocal                          assetRuleLocal;
        AssetRuleThresholdLocal                 assetRuleThresholdLocal;
        AmountMST                               amountInOrgWideCur = 0;
        AmountMST                               amountLESpecificCur = 0;
        AssetRule                               assetRule;
        container                               con;
        boolean                                 useGlobal = false;

        var cacheScope = funcName();
        var cacheKey = [_ecoResCategory, _transDate, _currencyCode, _purchPrice, _legalEntity, _languageId, _getQualifiers];
        
        if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
        {
            return SysTransactionScopeCache::get(cacheScope, cacheKey);
        }

        selectedEcoResCategory =  EcoResCategory::find(_ecoResCategory);

        select  firstonly    RecId from assetRule
            order by ecoResCategory.Level desc
            join CategoryHierarchy, NestedSetLeft, NestedSetRight, RecId from ecoResCategory
                where   ecoResCategory.CategoryHierarchy == selectedEcoResCategory.CategoryHierarchy
                    &&  ecoResCategory.NestedSetLeft  <= selectedEcoResCategory.NestedSetLeft
                    &&  ecoResCategory.NestedSetRight >= selectedEcoResCategory.NestedSetRight
            join EcoResCategory, AssetRule from assetRuleEcoResCategory
                where   assetRuleEcoResCategory.EcoResCategory == ecoResCategory.RecId
                    &&  assetRuleEcoResCategory.AssetRule == assetRule.RecId;

        if (assetRule)
        {
            select firstonly  validTimeState(_transDate, _transDate) ThresholdAmount, Currency, RecId from assetRuleThreshold
                where assetRuleThreshold.AssetRule == assetRule.RecId;

            select validTimeState(_transDate, _transDate) AssetGroupId, RecId from assetRuleLocal
                    where   assetRuleLocal.BuyingLegalEntity       == _legalEntity
                        &&  assetRuleLocal.AssetRule               == assetRule.RecId
            join ThresholdAmount, Currency, RecId from assetRuleThresholdLocal
                    where   assetRuleThresholdLocal.AssetRuleLocal == assetRuleLocal.RecId;

            if (assetRuleThreshold)
            {
                amountInOrgWideCur  = ExchangeRateHelper::curPrice2CurPrice(_purchPrice, _currencyCode, assetRuleThreshold.Currency);
            }

            if (assetRuleThresholdLocal)
            {
                amountLESpecificCur = ExchangeRateHelper::curPrice2CurPrice(_purchPrice, _currencyCode, assetRuleThresholdLocal.Currency);
            }

            if (assetRuleEcoResCategory.AssetRule &&
                ((assetRuleThreshold && amountInOrgWideCur >= assetRuleThreshold.ThresholdAmount ) ||
                (assetRuleThresholdLocal && amountLESpecificCur >= assetRuleThresholdLocal.ThresholdAmount)))
            {
                if (!assetRuleLocal.RecId ||
                    ((assetRuleThreshold && amountInOrgWideCur > assetRuleThreshold.ThresholdAmount ) &&
                    (assetRuleThresholdLocal && amountLESpecificCur > assetRuleThresholdLocal.ThresholdAmount)))
                {
                    useGlobal = true;
                }

                con = AssetRule::processRule(assetRuleEcoResCategory.AssetRule, _languageId, useGlobal, _legalEntity, _getQualifiers);
            }
        }

        SysTransactionScopeCache::set(cacheScope, cacheKey, con);
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetGroupIdFromQualifier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the asset group ID by using the asset rule qualifier record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the asset rule qualifier record.
    /// </param>
    /// <param name="_isGlobal">
    ///    A Boolean value that indicates whether the asset rule is a global rule.
    /// </param>
    /// <param name="_legalEntity">
    ///    The record ID of the applicable legal entity.
    /// </param>
    /// <returns>
    ///    The asset group ID if found; otherwise, an empty string.
    /// </returns>
    /// <exception cref="M:exception::Error">
    ///    No asset group is defined for the qualifier.
    /// </exception>

    public static AssetGroupId getAssetGroupIdFromQualifier(RefRecId _recId, boolean _isGlobal, LegalEntity _legalEntity)
    {
        AssetRuleQualifierOption        assetRuleQualifierOption;
        AssetRuleQualifierOptionLocal   assetRuleQualifierOptionLocal;
        AssetRuleQualifier              assetRuleQualifier;

        if (_isGlobal)
        {
            select firstonly AssetGroupGlobal from assetRuleQualifierOption where
                    assetRuleQualifierOption.RecId == _recId;

            select firstonly AssetRule from assetRuleQualifier where
                assetRuleQualifier.RecId == assetRuleQualifierOption.AssetRuleQualifier;

            return AssetRule::assetGroupGlobal2LocalAssetGroupId(assetRuleQualifierOption.AssetGroupGlobal, assetRuleQualifier.AssetRule, _legalEntity);
        }
        else
        {
            select firstonly AssetGroupId from assetRuleQualifierOptionLocal where
                assetRuleQualifierOptionLocal.RecId == _recId;

            return assetRuleQualifierOptionLocal.AssetGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQualifierQuestion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the question by using the asset rule qualifier record ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the asset rule qualifier record.
    /// </param>
    /// <param name="_isGlobal">
    ///    A Boolean value that indicates whether the asset rule is a global rule.
    /// </param>
    /// <returns>
    ///    The description of the asset rule qualifier record.
    /// </returns>

    public static Description getQualifierQuestion(RefRecId _recId, boolean _isGlobal)
    {
        Description                     description;
        AssetRuleQualifier              assetRuleQualifier;
        AssetRuleQualifierLocal         assetRuleQualifierLocal;
        AssetRuleQualifierOption        assetRuleQualifierOption;
        AssetRuleQualifierOptionLocal   assetRuleQualifierOptionLocal;
        AssetRuleQualifierLanguage      assetRuleQualifierLanguage;
        AssetRuleQualifierLanguageLocal assetRuleQualifierLanguageLocal;

        if (_isGlobal)
        {
            select firstonly DefaultText from assetRuleQualifier
                join TableId from assetRuleQualifierOption where
                        assetRuleQualifierOption.RecId == _recId &&
                        assetRuleQualifier.RecId       == assetRuleQualifierOption.AssetRuleQualifier
                outer join Text,RecId from assetRuleQualifierLanguage where
                        assetRuleQualifierLanguage.AssetRuleQualifier == assetRuleQualifier.RecId &&
                        assetRuleQualifierLanguage.LanguageId         == xUserInfo::find().Language;

            if (assetRuleQualifierLanguage)
            {
                description = assetRuleQualifierLanguage.Text;
            }
            else
            {
                description = assetRuleQualifier.DefaultText;
            }
        }
        else
        {
            select firstonly DefaultText from assetRuleQualifierLocal
                join TableId from assetRuleQualifierOptionLocal where
                        assetRuleQualifierOptionLocal.RecId == _recId &&
                        assetRuleQualifierLocal.RecId       == assetRuleQualifierOptionLocal.AssetRuleQualifierLocal
                outer join Text,RecId from assetRuleQualifierLanguageLocal where
                        assetRuleQualifierLanguageLocal.AssetRuleQualifierLocal == assetRuleQualifierLocal.RecId &&
                        assetRuleQualifierLanguageLocal.LanguageId              == xUserInfo::find().Language;

            if (assetRuleQualifierLanguageLocal)
            {
                description = assetRuleQualifierLanguageLocal.Text;
            }
            else
            {
                description = assetRuleQualifierLocal.DefaultText;
            }
        }

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    checks whether a rule is applicable to a procurement and optinally process the rules.
    /// </summary>
    /// <param name="_assetRule">
    ///    The record ID of the applicable global asset rule.
    /// </param>
    /// <param name="_languageId">
    ///    lanugageId of the user.
    /// </param>
    /// <param name="_useGlobal">
    ///    whether Global asset rule is to be used or local asset rule.
    /// </param>
    /// <param name="_legalEntity">
    ///    The record ID of the applicable legal entity.
    /// </param>
    /// <param name="_getQualifiers">
    ///    whether to retrieve qualifiers or not.
    /// </param>
    /// <returns>
    ///    appropriate values like Global asset group or options or local asset group etc.
    /// </returns>

    //Values at higher position can be used only if the values at lower position have been filled.
    //i.e. QualifierTextPos will get filled at 1st position (instead of 2nd) if QualifierApplicablePos is not filled.
    //hence there should never be any optional position in this macro except the last position.
    //If a value is not applicable then a blank value should be filled for all positions.
    //This also means that the order of filling up container from lower to higher must be maintained.
    //If you change the order of this macro then make sure then all functions doing read/write using this macro are using the correct order.

    #define.Yes(1)
    #define.No(0)

    #AssetRules

    private static container processRule(RefRecId        _assetRule       ,
                                         LanguageId      _languageId      ,
                                         boolean         _useGlobal       ,
                                         LegalEntity     _legalEntity     ,
                                         boolean         _getQualifiers = true)
    {
        AssetRule                               assetRule;
        AssetRuleLocal                          assetRuleLocal;
        AssetRuleQualifier                      assetRuleQualifier;
        AssetRuleQualifierLanguage              assetRuleQualifierLanguage;
        AssetRuleQualifierOption                assetRuleQualifierOption;
        AssetRuleQualifierOptionLanguage        assetRuleQualifierOptionLanguage;
        AssetRuleQualifierLocal                 assetRuleQualifierLocal;
        AssetRuleQualifierLanguageLocal         assetRuleQualifierLanguageLocal;
        AssetRuleQualifierOptionLocal           assetRuleQualifierOptionLocal;
        AssetRuleQualifierOptionLanguageLocal   assetRuleQualifierOptionLanguageLocal;

        container                               conGlobal;
        container                               conOption;
        RefRecId                                assetGroupGlobalRecId;
        AssetGroupId                            assetGroupId;
        int                                     numOfDisplayableOptions;
        boolean                                 isFirst = true;

        if (_useGlobal)
        {
            conGlobal = conIns(conGlobal,#GlobalRuleUsed,#Yes);

            select AssetGroupGlobal, HasQualifiers, RecId from assetRule where assetRule.RecId == _assetRule;

            if (assetRule.HasQualifiers && _getQualifiers)
            {
                select DefaultText, RecId from assetRuleQualifier where assetRuleQualifier.AssetRule == assetRule.RecId;
            }

            if (assetRuleQualifier)
            {
                select Text,RecId from assetRuleQualifierLanguage where assetRuleQualifierLanguage.AssetRuleQualifier == assetRuleQualifier.RecId &&
                                                                        assetRuleQualifierLanguage.LanguageId         == _languageId;

                while select DefaultText, AssetGroupGlobal from assetRuleQualifierOption where assetRuleQualifierOption.AssetRuleQualifier == assetRuleQualifier.RecId
                {
                    select firstonly assetRuleQualifierOptionLanguage where assetRuleQualifierOptionLanguage.AssetRuleQualifierOption == assetRuleQualifierOption.RecId &&
                                                                            assetRuleQualifierOptionLanguage.LanguageId               == _languageId;

                    conOption = conIns(conOption, conLen(conOption) +1, assetRuleQualifierOptionLanguage ? assetRuleQualifierOptionLanguage.Text : assetRuleQualifierOption.DefaultText);
                    conOption = conIns(conOption, conLen(conOption) +1, AssetRule::assetGroupGlobal2LocalAssetGroupId(assetRuleQualifierOption.AssetGroupGlobal, assetRule.RecId, _legalEntity));
                    conOption = conIns(conOption, conLen(conOption) +1, assetRuleQualifierOption.RecId);

                    if (assetGroupGlobalRecId != assetRuleQualifierOption.AssetGroupGlobal || isFirst)
                    {
                        numOfDisplayableOptions++;
                        isFirst = false;
                    }

                    assetGroupGlobalRecId = assetRuleQualifierOption.AssetGroupGlobal;
                }

                if (numOfDisplayableOptions > 1)
                {
                    conGlobal = conIns(conGlobal, #AssetQualifierApplicablePosition,#QualifierApplicable);
                    conGlobal = conIns(conGlobal, #AssetQualifierTextPosition, assetRuleQualifierLanguage ? assetRuleQualifierLanguage.Text : assetRuleQualifier.DefaultText);
                    conGlobal = conIns(conGlobal, #AssetQualifierAssetGroupPosition,"");
                    conGlobal = conIns(conGlobal, #AssetOptionContainerPosition, conOption);
                }
                else if (assetGroupGlobalRecId != 0)
                {
                    conGlobal = conIns(conGlobal, #AssetQualifierApplicablePosition,#QualifierNotApplicable);
                    conGlobal = conIns(conGlobal, #AssetQualifierTextPosition, "");
                    conGlobal = conIns(conGlobal, #AssetQualifierAssetGroupPosition, AssetRule::assetGroupGlobal2LocalAssetGroupId(assetGroupGlobalRecId, assetRule.RecId, _legalEntity));
                    conGlobal = conIns(conGlobal, #AssetOptionContainerPosition, conNull());
                }
                else
                {
                    conGlobal = conNull();
                }
            }
            else
            {
                if (assetRule.AssetGroupGlobal)
                {
                    conGlobal = conIns(conGlobal, #AssetQualifierApplicablePosition,#QualifierNotApplicable);
                    conGlobal = conIns(conGlobal, #AssetQualifierTextPosition, "");
                    conGlobal = conIns(conGlobal, #AssetQualifierAssetGroupPosition,AssetRule::assetGroupGlobal2LocalAssetGroupId(assetRule.AssetGroupGlobal, assetRule.RecId, _legalEntity));
                    conGlobal = conIns(conGlobal, #AssetOptionContainerPosition, conOption);
                }
                else
                {
                    conGlobal = conNull();
                }
            }
        }
        else
        {
            conGlobal = conIns(conGlobal,#GlobalRuleUsed,#No);

            select AssetGroupId, HasQualifiers, RecId from assetRuleLocal where assetRuleLocal.AssetRule         == _assetRule &&
                                                                                assetRuleLocal.BuyingLegalEntity == _legalEntity;

            if (assetRuleLocal.HasQualifiers && _getQualifiers)
            {
                select DefaultText, RecId from assetRuleQualifierLocal where assetRuleQualifierLocal.AssetRuleLocal == assetRuleLocal.RecId;
            }

            if (assetRuleQualifierLocal)
            {
                select Text,RecId from assetRuleQualifierLanguageLocal where assetRuleQualifierLanguageLocal.AssetRuleQualifierLocal == assetRuleQualifierLocal.RecId &&
                                                                             assetRuleQualifierLanguageLocal.LanguageId              == _languageId;

                while select DefaultText, AssetGroupId from assetRuleQualifierOptionLocal where assetRuleQualifierOptionLocal.AssetRuleQualifierLocal == assetRuleQualifierLocal.RecId
                {
                    select firstonly assetRuleQualifierOptionLanguageLocal where assetRuleQualifierOptionLanguageLocal.AssetRuleQualifierOptionLocal == assetRuleQualifierOptionLocal.RecId &&
                                                                                 assetRuleQualifierOptionLanguageLocal.LanguageId                    == _languageId;

                    conOption = conIns(conOption, conLen(conOption) +1, assetRuleQualifierOptionLanguageLocal ? assetRuleQualifierOptionLanguageLocal.Text : assetRuleQualifierOptionLocal.DefaultText);
                    conOption = conIns(conOption, conLen(conOption) +1, assetRuleQualifierOptionLocal.AssetGroupId);
                    conOption = conIns(conOption, conLen(conOption) +1, assetRuleQualifierOptionLocal.RecId);

                    if (assetGroupId != assetRuleQualifierOptionLocal.AssetGroupId || isFirst)
                    {
                        numOfDisplayableOptions++;
                        isFirst = false;
                    }

                    assetGroupId = assetRuleQualifierOptionLocal.AssetGroupId;
                }
                if (numOfDisplayableOptions > 1)
                {
                    conGlobal = conIns(conGlobal, #AssetQualifierApplicablePosition,#QualifierApplicable);
                    conGlobal = conIns(conGlobal, #AssetQualifierTextPosition, assetRuleQualifierLanguageLocal ? assetRuleQualifierLanguageLocal.Text : assetRuleQualifierLocal.DefaultText);
                    conGlobal = conIns(conGlobal, #AssetQualifierAssetGroupPosition,"");
                    conGlobal = conIns(conGlobal, #AssetOptionContainerPosition, conOption);
                }
                else if (assetGroupId != "")
                {
                    conGlobal = conIns(conGlobal, #AssetQualifierApplicablePosition,#QualifierNotApplicable);
                    conGlobal = conIns(conGlobal, #AssetQualifierTextPosition, "");
                    conGlobal = conIns(conGlobal, #AssetQualifierAssetGroupPosition, assetGroupId);
                    conGlobal = conIns(conGlobal, #AssetOptionContainerPosition, conNull());
                }
                else
                {
                    conGlobal = conNull();
                }
            }
            else
            {
                if (assetRuleLocal.AssetGroupId)
                {
                    conGlobal = conIns(conGlobal, #AssetQualifierApplicablePosition,#QualifierNotApplicable);
                    conGlobal = conIns(conGlobal, #AssetQualifierTextPosition, "");
                    conGlobal = conIns(conGlobal, #AssetQualifierAssetGroupPosition, assetRuleLocal.AssetGroupId);
                    conGlobal = conIns(conGlobal, #AssetOptionContainerPosition, conNull());
                }
                else
                {
                    conGlobal = conNull();
                }
            }
        }
        return conGlobal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAssetRuleInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the asset rule is configured correctly in the context of a legal entity.
    /// </summary>
    /// <param name="_localRuleLegalEntityRecId">
    ///     The Rec id of the Legal entity for the local rule.
    /// </param>
    /// <returns>
    ///     Value of the <c>AssetRuleValidationStatus</c> enum indicating if checks passed; if a chek fails the enum value indicates the failure.
    /// </returns>
    /// <remarks>
    ///     If one or more thresholds on a local rule should prove invalid, the return value reflects the first violation found.
    /// </remarks>
    public AssetRuleValidationStatus checkAssetRuleInLegalEntity(LegalEntityRecId _localRuleLegalEntityRecId)
    {
        AssetRuleThreshold           assetRuleThreshold;
        AssetRuleThresholdLocal      assetRuleThresholdLocal;
        date                         minValue = dateNull();
        date                         maxValue = dateMax();
        date                         globalValidFrom;
        date                         globalValidTo;
        Price                        localAmountInSharedCur;
        RefRecId                     assetRuleLocalRecId;
        CurrencyExchangeRate         currencyExchangeRate;
        ExchangeRateDisplayFactor    exchangeRateDisplayFactor;
        container                    currencyExchangeRateAndDisplayFactorPair;
        AssetRuleValidationStatus    assetRuleValidationStatus = AssetRuleValidationStatus::Valid;

        // Check for category
        if (assetRuleValidationStatus ==  AssetRuleValidationStatus::Valid
            && !AssetRuleEcoResCategory::existsCategory(this.RecId))
        {
            assetRuleValidationStatus = AssetRuleValidationStatus::NoCategory;
        }

        // Check for existance of threshold
        if (assetRuleValidationStatus ==  AssetRuleValidationStatus::Valid
            && !AssetRuleThreshold::findByAssetRule(this.RecId, minValue, maxValue))
        {
            assetRuleValidationStatus = AssetRuleValidationStatus::NoThreshold;
        }

        // Check for zero-amount threshold
        if (assetRuleValidationStatus ==  AssetRuleValidationStatus::Valid)
        {
            select validTimeState(minValue, maxValue) * from assetRuleThreshold
                    where assetRuleThreshold.AssetRule        == this.RecId
                       && assetRuleThreshold.ThresholdAmount  == 0;

            if (assetRuleThreshold)
            {
                assetRuleValidationStatus = AssetRuleValidationStatus::ZeroThreshold;
            }
        }

        // Checks involving currency and exchange rate
        if (assetRuleValidationStatus ==  AssetRuleValidationStatus::Valid)
        {
            // Select Global threshold(s)
            while select validTimeState(minValue, maxValue) * from assetRuleThreshold
                where assetRuleThreshold.AssetRule == this.RecId
            {
                assetRuleLocalRecId = AssetRuleLocal::findByAssetRule(this.RecId, _localRuleLegalEntityRecId).RecId;
                globalValidFrom = assetRuleThreshold.ValidFrom;
                globalValidTo   = assetRuleThreshold.ValidTo;

                // Select each threshold on local rule for which the valid time interval overlaps with the current global threshold
                while select validtimestate(globalValidFrom, globalValidTo) * from assetRuleThresholdLocal
                    where assetRuleThresholdLocal.AssetRuleLocal == assetRuleLocalRecId
                {
                    // Only continue if a previous local rule did not already prove invalid
                    if (assetRuleValidationStatus ==  AssetRuleValidationStatus::Valid)
                    {
                        // If currencies are the same then compare amounts directly; Invalid if Local threshold is larger than Global threshold
                        if (assetRuleThreshold.Currency == assetRuleThresholdLocal.Currency)
                        {
                            if (assetRuleThresholdLocal.ThresholdAmount > assetRuleThreshold.ThresholdAmount)
                            {
                                assetRuleValidationStatus = AssetRuleValidationStatus::LEThresholdHigher;
                            }
                        }
                        else
                        {
                            currencyExchangeRateAndDisplayFactorPair = this.getExchangeRateInfo(assetRuleThreshold.Currency,
                                                                                            assetRuleThresholdLocal.Currency,
                                                                                            assetRuleThresholdLocal.ValidFrom,
                                                                                            _localRuleLegalEntityRecId);

                            currencyExchangeRate = conpeek(currencyExchangeRateAndDisplayFactorPair, 1);
                            exchangeRateDisplayFactor = conpeek(currencyExchangeRateAndDisplayFactorPair, 2);

                            if (currencyExchangeRate)
                            {
                                localAmountInSharedCur = AssetRuleThresholdLocal::getLocalAmountInSharedCur(this.RecId, _localRuleLegalEntityRecId, assetRuleThresholdLocal.ValidFrom, assetRuleThresholdLocal.ValidTo);

                                // Invalid if Local threshold is larger than Global threshold
                                if (localAmountInSharedCur > assetRuleThreshold.ThresholdAmount)
                                {
                                    assetRuleValidationStatus = AssetRuleValidationStatus::LEThresholdHigherBasedOnExchangeRate;
                                }
                            }
                            else
                            {
                                assetRuleValidationStatus = AssetRuleValidationStatus::NoExchangeRate;
                            }
                        }
                    }
                }
            }
        }

        return assetRuleValidationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves exchange rate information for currency pair of the Organization-wide rule currency
    /// and Legal entity-specific rule currency.
    /// </summary>
    /// <param name="_assetRuleThresholdCurrency">
    ///     The from currency code.
    /// </param>
    /// <param name="_assetRuleThresholdLocalCurrency">
    ///     The to currency code.
    /// </param>
    /// <param name="_validFrom">
    ///     The transaction date.
    /// </param>
    /// <param name="_localRuleLegalEntityRecId">
    ///     The Rec id of the Legal entity for the local rule.
    /// </param>
    /// <returns>
    ///     Container with the <c>CurrencyExchangeRate</c> and <c>ExchangeRateDisplayFactor</c> pair for the Organization-wide rule currency and Legal entity-specific rule currency.
    /// </returns>
    public container getExchangeRateInfo(CurrencyCode       _assetRuleThresholdCurrency,
                                         CurrencyCode       _assetRuleThresholdLocalCurrency,
                                         validFromDate      _validFrom,
                                         LegalEntityRecId   _localRuleLegalEntityRecId)
    {
        Ledger                      ledger;
        CurrencyExchangeRate        currencyExchangeRate;
        ExchangeRateDisplayFactor   exchangeRateDisplayFactor;
        container                   currencyExchangeRateAndDisplayFactorPair;

        if (_assetRuleThresholdCurrency == _assetRuleThresholdLocalCurrency)
        {
            // Exchange rates are not stored in the database when the from currency
            // is the same as the to currency.
            currencyExchangeRate        = 100.0;
            exchangeRateDisplayFactor   = 1;
        }
        else
        {
            ledger                       = Ledger::findByLegalEntity(_localRuleLegalEntityRecId);
            currencyExchangeRate         = ExchangeRateHelper::getCrossRate_Static(ledger.RecId, _assetRuleThresholdCurrency, _validFrom);
            exchangeRateDisplayFactor    = ExchangeRateCurrencyPair::getExchangeRateDisplayFactor(_assetRuleThresholdCurrency, ledger.AccountingCurrency, ledger.DefaultExchangeRateType, true);
        }

        currencyExchangeRateAndDisplayFactorPair = [currencyExchangeRate, exchangeRateDisplayFactor];

        return currencyExchangeRateAndDisplayFactorPair;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@SYS315696</DeveloperDocumentation>
	<FormRef>AssetRule</FormRef>
	<Label>@SYS134805</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetRuleEcoResCategory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetRuleEcoResCategory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetRuleLocal</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetRuleLocal</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetRuleQualifier</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetRuleQualifier</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetRuleThreshold</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetRuleThreshold</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroupGlobal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasQualifiers</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroupGlobal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HasQualifiers</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetGroupGlobal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS67417</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasQualifiers</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS134827</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetRuleName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetGroupGlobal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetGroupGlobal</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetGroupGlobal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetGroupGlobal_AssetRule</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroupGlobal</Name>
					<Field>AssetGroupGlobal</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>