<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransCashDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTransCashDisc extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCashDisc</Name>
				<Source><![CDATA[
    // This method should be static because it does not use the instance for
    // anything. Everything it uses is passed as a parameter.
    public VendTransCashDisc calcCashDisc(
        CompanyId _company,
        CurrencyCode _currencyCode,
        AmountCur _amountCur,
        TransDate _dueDate,
        TransDate _transDate,
        CashDiscCode _cashDiscCode,
        TableId _tableId,
        RecId _recId,
        boolean _manual = false,
        AmountCur _manualAmount = 0,
        date _manualDate = _transDate,
        DiscPct _cashDiscPercent = 0)
    {
        CashDisc cashDisc;
        VendTransCashDisc vendTransCashDisc;
        TransDate firstDiscDate = dateNull();
        boolean manual = _manual;

        ttsbegin;

        delete_from vendTransCashDisc
            where vendTransCashDisc.RefRecId == _recId &&
                  vendTransCashDisc.RefTableId == _tableId;

        // cashdisc records.
        if (TaxParameters::find().CashDiscOnInvoice)
        {
            // cashDisc is uninitialized here and the result is that _transDate is returned by the CashDisc.discDate method
            vendTransCashDisc = VendTransCashDisc::find(_tableId, _recId, cashDisc.discDate(_transDate), true);

            vendTransCashDisc.CashDiscDue = CashDiscDue::CashDisc;
            vendTransCashDisc.RefTableId = _tableId;
            vendTransCashDisc.RefRecId = _recId;
            vendTransCashDisc.CashDiscdate = cashDisc.discDate(_transDate);

            if (_cashDiscPercent)
            {
                vendTransCashDisc.CashDiscPercent = _cashDiscPercent;
            }
            else
            {
                vendTransCashDisc.CashDiscPercent = CashDisc::findByCompany(_company, _cashDiscCode).Percent;
            }

            if (manual)
            {
                vendTransCashDisc.CashDiscAmount = _manualAmount;
                if (_manualDate && vendTransCashDisc.CashDiscdate != _manualDate && firstDiscDate == dateNull())
                {
                    vendTransCashDisc.CashDiscdate = _manualDate;
                }
                vendTransCashDisc.Manual = true;
                manual = false;
            }
            else
            {
                if (_cashDiscPercent)
                {
                    vendTransCashDisc.CashDiscAmount = cashDisc.discAmountOnInvoice(_currencyCode, _amountCur,_cashDiscPercent);
                }
                else
                {
                    vendTransCashDisc.CashDiscAmount = cashDisc.discAmount(_currencyCode, _amountCur);
                }
            }

            vendTransCashDisc.write();

            if (firstDiscDate == dateNull())
            {
                firstDiscDate = vendTransCashDisc.CashDiscdate;
            }
        }
        else
        {
            cashDisc = CashDisc::findByCompany(_company, _cashDiscCode);
            while (cashDisc != null)
            {
                vendTransCashDisc = VendTransCashDisc::find(_tableId, _recId, cashDisc.discDate(_transDate), true);

                vendTransCashDisc.CashDiscDue = CashDiscDue::CashDisc;
                vendTransCashDisc.RefTableId = _tableId;
                vendTransCashDisc.RefRecId = _recId;
                vendTransCashDisc.CashDiscdate = cashDisc.discDate(_transDate);
                vendTransCashDisc.CashDiscCode = cashDisc.CashDiscCode;

                if (manual)
                {
                    vendTransCashDisc.CashDiscAmount = _manualAmount;
                    if (_manualDate && vendTransCashDisc.CashDiscdate != _manualDate && firstDiscDate == dateNull())
                    {
                        vendTransCashDisc.CashDiscdate = _manualDate;
                    }
                    vendTransCashDisc.Manual = true;
                    manual = false;
                }
                else
                {
                    if (_cashDiscPercent)
                    {
                        vendTransCashDisc.CashDiscAmount = cashDisc.discAmountOnInvoice(_currencyCode, _amountCur,_cashDiscPercent);
                    }
                    else
                    {
                        vendTransCashDisc.CashDiscAmount = cashDisc.discAmount(_currencyCode, _amountCur);
                    }
                }

                vendTransCashDisc.write();

                if (firstDiscDate == dateNull())
                {
                    firstDiscDate = vendTransCashDisc.CashDiscdate;
                }

                cashDisc = CashDisc::findByCompany(_company, cashDisc.CashDiscCodeNext);
            }
        }

        // duedate record
        vendTransCashDisc = VendTransCashDisc::findDue(_tableId, _recId, true);

        vendTransCashDisc.CashDiscDue = CashDiscDue::Due;
        vendTransCashDisc.RefTableId = _tableId;
        vendTransCashDisc.RefRecId = _recId;
        vendTransCashDisc.CashDiscdate = _dueDate ? _dueDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        vendTransCashDisc.CashDiscAmount = 0;

        vendTransCashDisc.write();
        ttscommit;

        return VendTransCashDisc::find(_tableId, _recId, firstDiscDate ? firstDiscDate : cashDisc.discDate(_transDate), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.CustVendTransCashDisc::update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TableId _refTableId, RecId _refRecId, TransDate _transDate)
    {
        boolean ret = true;

        if (!VendTransCashDisc::exist(_refTableId, _refRecId, _transDate))
        {
            ret = checkFailed(strFmt(VendTransCashDisc::txtNotExist(), _refTableId, _refRecId, date2StrUsr(_transDate, DateFlags::FormatAll)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCashDisc</Name>
				<Source><![CDATA[
    public static void copyCashDisc(TableId _fromTableId, RecId _fromRecId, TableId _toTableId, RecId _toRecId)
    {
        VendTransCashDisc vendTransCashDisc;
        VendTransCashDisc copyVendTransCashDisc;

        insert_recordset copyVendTransCashDisc(
            RefTableId,
            RefRecId,
            CashDiscAmount,
            CashDiscdate,
            CashDiscDue,
            CashDiscCode,
            Manual)
            select _toTableId, _toRecId, CashDiscAmount, CashDiscdate, CashDiscDue, CashDiscCode, Manual from
            vendTransCashDisc
            where vendTransCashDisc.RefTableId == _fromTableId
                && vendTransCashDisc.RefRecId == _fromRecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TableId _refTableId, RecId _refRecId, TransDate _transDate)
    {
       return (select firstonly
                     RecId
                from
                     vendTransCashDisc
                 where
                    vendTransCashDisc.RefTableId == _refTableId &&
                    vendTransCashDisc.RefRecId == _refRecId &&
                    vendTransCashDisc.CashDiscdate == _transDate &&
                    vendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendTransCashDisc find(
        TableId _refTableId,
        RecId _refRecId,
        TransDate _transDate ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTransCashDisc vendTransCashDisc;

        vendTransCashDisc.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendTransCashDisc.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            vendTransCashDisc
            where
                    vendTransCashDisc.RefTableId == _refTableId &&
                    vendTransCashDisc.RefRecId == _refRecId &&
                    vendTransCashDisc.CashDiscdate == _transDate &&
                    vendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;

        return vendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByUseCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>VendTransCashDisc</c> record for the specified table and record ID fields.
    /// </summary>
    /// <param name="_refTableId">
    ///    The reference table ID of the <c>VendTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    ///    The reference record ID of the <c>VendTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_useCashDisc">
    ///    The cash discount rule used to find the cash discount record.
    /// </param>
    /// <param name="_cashDiscDate">
    ///    The date used to find the cash discount record.
    /// </param>
    /// <param name="_discGraceDays">
    ///    The number of grace days used to find the cash discount record; optional.
    /// </param>
    /// <returns>
    ///    The <c>VendTransCashDisc</c> record found for the open transaction record.
    /// </returns>
    /// <remarks>
    ///    This method finds the first discount record with a date later than or equal to the date used to
    ///    determine the discount if the <paramref name="_useCashDisc" /> parameter is set to Normal or
    ///    Always. If no record is found and the <paramref name="_useCashDisc" /> parameter is set to Always,
    ///    this method finds the last discount record by date.
    /// </remarks>
    public static VendTransCashDisc findByUseCashDisc(
        TableId _refTableId,
        RefRecId _refRecId,
        UseCashDisc _useCashDisc,
        TransDate _cashDiscDate,
        DiscGraceDays _discGraceDays = 0)
    {
        VendTransCashDisc foundVendTransCashDisc;

        if (_useCashDisc == UseCashDisc::Normal || _useCashDisc == UseCashDisc::Always)
        {
            // Find applicable discount for date to estimate discount
            foundVendTransCashDisc = VendTransCashDisc::findCashDisc(_refTableId, _refRecId, _cashDiscDate, _discGraceDays, false);

            if (foundVendTransCashDisc.RecId == 0 && _useCashDisc == UseCashDisc::Always)
            {
                // No discount was found for discount date, if Always, get last applicable discount
                select firstonly foundVendTransCashDisc
                    order by foundVendTransCashDisc.CashDiscdate desc
                    where foundVendTransCashDisc.RefTableId == _refTableId &&
                        foundVendTransCashDisc.RefRecId == _refRecId &&
                        foundVendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
            }
        }

        return foundVendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDisc</Name>
				<Source><![CDATA[
    static VendTransCashDisc findCashDisc(TableId _tableId,
                                          RecId _recId,
                                          TransDate _transDate = dateNull(),
                                          DiscGraceDays _graceDays = 0,
                                          boolean _forUpdate = false)
    {
        VendTransCashDisc vendTransCashDisc;

        if (_tableId && _recId)
        {
            vendTransCashDisc.selectForUpdate(_forUpdate);

            select firstonly vendTransCashDisc
                where vendTransCashDisc.RefTableId == _tableId &&
                      vendTransCashDisc.RefRecId == _recId &&
                      vendTransCashDisc.CashDiscdate >= _transDate - _graceDays &&
                      vendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
        }

        return vendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDue</Name>
				<Source><![CDATA[
    static VendTransCashDisc findDue(TableId _refTableId, RecId _refRecId,boolean _forUpdate = false)
    {
        VendTransCashDisc vendTransCashDisc;

        if (_refTableId && _refRecId)
        {
            vendTransCashDisc.selectForUpdate(_forUpdate);

            select firstonly vendTransCashDisc
                where vendTransCashDisc.RefTableId == _refTableId &&
                      vendTransCashDisc.RefRecId == _refRecId &&
                      vendTransCashDisc.CashDiscDue == CashDiscDue::Due;
        }

        return vendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscountDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the cash discount date of of the due date cash discount associated with a given <t>VendTransOpen</t> record.
    /// </summary>
    /// <param name = "_vendTransOpen">The <t>VendTransOpen</t> record.</param>
    public static void updateCashDiscountDueDate(VendTransOpen _vendTransOpen)
    {
        VendTransCashDisc vendTransCashDisc = VendTransCashDisc::findDue(_vendTransOpen.TableId, _vendTransOpen.RecId, true);

        if (vendTransCashDisc)
        {
            vendTransCashDisc.CashDiscDate = _vendTransOpen.DueDate;
            vendTransCashDisc.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLargestCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>VendTransCashDisc</c> record with the largest applicable discount.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>VendTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>VendTransCashDisc</c> record to find.
    /// </param>
    /// <returns>
    /// The <c>VendTransCashDisc</c> record that is found for the open transaction record.
    /// </returns>
    public static VendTransCashDisc findLargestCashDisc(TableId _refTableId, RefRecId _refRecId)
    {
        VendTransCashDisc foundVendTransCashDisc;

        select firstonly foundVendTransCashDisc
            order by foundVendTransCashDisc.CashDiscAmount
            where foundVendTransCashDisc.RefTableId == _refTableId &&
                foundVendTransCashDisc.RefRecId == _refRecId &&
                foundVendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;

        // Handle case where this is a credit note in that case amount in descending order
        if (foundVendTransCashDisc.CashDiscAmount > 0)
        {
            select firstonly foundVendTransCashDisc
                order by foundVendTransCashDisc.CashDiscAmount desc
                where foundVendTransCashDisc.RefTableId == _refTableId &&
                    foundVendTransCashDisc.RefRecId == _refRecId &&
                    foundVendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
        }

        return foundVendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>VendTransCashDisc</c> record with the last applicable discount.
    /// </summary>
    /// <param name="_refTableId">
    /// The reference table ID of the <c>VendTransCashDisc</c> record to find.
    /// </param>
    /// <param name="_refRecId">
    /// The reference record ID of the <c>VendTransCashDisc</c> record to find.
    /// </param>
    /// <returns>
    /// The <c>VendTransCashDisc</c> record found for the open transaction record.
    /// </returns>
    public static VendTransCashDisc findLastCashDisc(TableId _refTableId, RefRecId _refRecId)
    {
        VendTransCashDisc foundVendTransCashDisc;

        select firstonly foundVendTransCashDisc
            order by foundVendTransCashDisc.CashDiscdate desc
            where foundVendTransCashDisc.RefTableId == _refTableId &&
                foundVendTransCashDisc.RefRecId == _refRecId &&
                foundVendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;

        return foundVendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRef</Name>
				<Source><![CDATA[
    public static VendTransCashDisc findRef(TableId _refTableId, RecId _refRecId, boolean _forUpdate = false)
    {
        VendTransCashDisc vendTransCashDisc;

        if (_refTableId && _refRecId)
        {
            vendTransCashDisc.selectForUpdate(_forUpdate);

            select firstonly vendTransCashDisc
                where vendTransCashDisc.RefTableId == _refTableId &&
                      vendTransCashDisc.RefRecId == _refRecId &&
                      vendTransCashDisc.CashDiscDue == CashDiscDue::CashDisc;
        }

        return vendTransCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCashDisc</Name>
				<Source><![CDATA[
    public static void moveCashDisc(TableId _fromTableId, RecId _fromRecId, TableId _toTableId,RecId _toRecId)
    {
        VendTransCashDisc vendTransCashDisc;

        update_recordset vendTransCashDisc
            setting RefTableId = _toTableId,
                    RefRecId = _toRecId
            where
                vendTransCashDisc.RefTableId == _fromTableId &&
                vendTransCashDisc.RefRecId == _fromRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102266";
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;
        super();

        if (CFMParameters::isPaymentRequestsEnabled() && tablenum(VendTransOpen) == this.RefTableId && this.CashDiscDue != CashDiscDue::Due)
        {
            CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::VendInvoice, this.RefRecId);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;
        if (CFMParameters::isPaymentRequestsEnabled())
        {
            CFMPaymentRequestTable::setOutdatedBySource(CFMPaymentRequestSourceType::VendInvoice, this.RecId, true);
        }

        super();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126086</DeveloperDocumentation>
	<Label>@SYS8790</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>RefTableId</TitleField1>
	<TitleField2>RefRecId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecIdDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecIdDateIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashDiscount</Name>
			<Label>@SYS4376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashDiscdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CashDiscDue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CashDiscDue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Manual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS23968</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RecIdDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CashDiscdate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdRefTableIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendTransCashDisc</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscdate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Manual</MapField>
					<MapFieldTo>Manual</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDue</MapField>
					<MapFieldTo>CashDiscDue</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefTableId</MapField>
					<MapFieldTo>RefTableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RefRecId</MapField>
					<MapFieldTo>RefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscAmount</MapField>
					<MapFieldTo>CashDiscAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>CashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123520</EntityRelationshipRole>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTransCashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123520</EntityRelationshipRole>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTransCashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendSettlement</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126087</EntityRelationshipRole>
			<RelatedTable>VendSettlement</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendSettlement</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTransCashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126088</EntityRelationshipRole>
			<RelatedTable>VendTransOpen</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTransOpen</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendTransCashDisc</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>