<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDefermentTransaction_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VATDefermentTransaction_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableCheckBox</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the table with specific field
    /// </summary>
    public void enableCheckBox()
    {
        VATDefermentTransaction_IN  vatDefermentTransaction;

        ttsbegin;
        while select forupdate vatDefermentTransaction
          where vatDefermentTransaction.RefRecId ==  this.RefRecId
             && vatDefermentTransaction.RecId    != this.RecId
        {
            vatDefermentTransaction.Mark = this.Mark;
            vatDefermentTransaction.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates a field in a form when super is called.
    /// </summary>
    /// <param name="_fieldName">
    ///     A string that contains the field name.
    /// </param>
    /// <param name="_arrayIndex">
    ///     An integer that contains the array index, applies only if the field has array elements.
    /// </param>
    /// <remarks>
    ///     System defined method provided as an event for applying logic before and after a field is modified.
    /// </remarks>
    public void modifiedFieldValue(
        fieldName   _fieldName,
        int         _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(VATDefermentTransaction_IN, Mark):
                this.enableCheckBox();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the table with specific record
    /// </summary>
    /// <param name="_vatDeferment">
    ///     The array field which holds the records.
    /// </param>
    public void updateTransLines(Array _vatDeferment)
    {
        VATDefermentTransaction_IN  vatDefermentLine;
        VATDefermentTransaction_IN  transLine;
        VATDefermentTransaction_IN  vatDeferment;
        container                   vatDeferments;
        int                         loop;

        vatDeferments = _vatDeferment.pack();

        for (loop = 5; loop <= conlen(vatDeferments); loop ++)
        {
            transLine =  conpeek(vatDeferments,loop);
            ttsbegin;
            vatDefermentLine = VATDefermentTransaction_IN::find(transLine.RecId);
            if (vatDefermentLine)
            {
                while select forupdate vatDeferment
                    where vatDeferment.RefRecId == vatDefermentLine.RefRecId
                {
                    vatDeferment.Mark = transLine.Mark;
                    vatDeferment.update();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculate the tax amount and insert the record in a table.
    /// </summary>
    /// <param name="_tmpVATDefermentBal">
    ///     The table buffer used to find the specific record.
    /// </param>
    /// <param name="_tmpVATDefermentBalLine">
    ///     The table buffer used to find the specific record.
    /// </param>
    public static void calculateTransactionLine(
        TmpVATDefermentBal_IN      _tmpVATDefermentBal,
        TmpVATDefermentBalLine_IN  _tmpVATDefermentBalLine)
    {
        TaxTrans                        taxTrans;
        TaxTrans                        taxTransloc;
        TaxTrans                        taxTransOrig;
        LedgerJournalTrans              ledgerJournalTrans;
        DefermentScheduleTransLines_IN  defermentLines;
        VendInvoiceTrans                vendInvoiceTrans;
        VendInvoiceTransTaxExtensionIN  vendInvoiceTransTaxExtensionIN;
        VATDefermentTransaction_IN      vatDefermentTrans;
        DefermentScheduleTrans_IN       deferment;
        TaxTrans_IN                     taxTransLocal;
        TaxTrans_IN                     taxTransLocalOrig;
        TaxAmount                       postedTax;
        TransTaxInformation             transTaxInformation;
        TransTaxInformationHelper       transTaxInformationHelper = TransTaxInformationHelper::newHelper();

        delete_from vatDefermentTrans;

        while select JournalNum, Voucher, TransDate, CurrencyCode, TaxGroup, TaxItemGroup, SourceRecId, SourceTableId from taxTrans
            group by JournalNum, Voucher, TransDate, CurrencyCode, TaxGroup, TaxItemGroup, SourceRecId, SourceTableId
            where taxTrans.Source    == TaxModuleType::Voucher
               && taxTrans.TaxOrigin == TaxOrigin::Tax
               && taxTrans.TaxPeriod == _tmpVATDefermentBal.TaxPeriod

        {
            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.JournalNum        == taxTrans.JournalNum
                   && ledgerJournalTrans.RecId             == taxTrans.SourceRecId
                   && taxTrans.sourceTableId               == tablenum(LedgerJournalTrans);

            transTaxInformation = transTaxInformationHelper.getTransTaxInformationByRecord(ledgerJournalTrans);

            if (ledgerJournalTrans && transTaxInformation.VATGoodsType == VATGoodsType_IN::CapitalGoods)
            {
                deferment = DefermentScheduleTrans_IN::findExtRecId(ledgerJournalTrans.RecId);

                while select defermentLines
                    where defermentLines.FatherRecId == deferment.RecId
                       && (defermentLines.Period     <= _tmpVATDefermentBalLine.From
                       || defermentLines.Period      <= _tmpVATDefermentBalLine.To)
                {
                    if (!confind(defermentLines.TransferDetails, taxTrans.RecId))
                    {
                        vatDefermentTrans.clear();
                        postedTax                       = 0;
                        vatDefermentTrans.Mark          = NoYes::Yes;
                        vatDefermentTrans.Voucher       = taxTrans.Voucher;
                        vatDefermentTrans.DefermentDate = defermentLines.Period;
                        vatDefermentTrans.Source        = TaxModuleType::Voucher;
                        vatDefermentTrans.InvoiceNumber = VendTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate).Invoice;

                        if (VendTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate).AmountCur < 0)
                        {
                            vatDefermentTrans.TransactionAmount = ledgerJournalTrans.amount();
                            vatDefermentTrans.DeferredAmount    = deferment.vatDefermentAmount;

                            while select SourceCurrencyCode, RecId from taxTransloc
                                where taxTransloc.Voucher    == taxTrans.Voucher
                                   && taxTransloc.TaxPeriod  == _tmpVATDefermentBal.TaxPeriod
                                   && taxTransloc.TaxOrigin  == TaxOrigin::Tax
                                   && taxTransloc.JournalNum == ledgerJournalTrans.JournalNum
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransloc.RecId);
                                if (!confind(defermentLines.TransferDetails,taxTransloc.RecId))
                                {
                                    vatDefermentTrans.DefermentInstallmentAmount += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Debit, taxTransloc.SourceCurrencyCode);
                                }
                            }
                            vatDefermentTrans.TransferAmount  = vatDefermentTrans.DefermentInstallmentAmount;
                        }
                        else
                        {
                            vatDefermentTrans.TransactionAmount = -ledgerJournalTrans.amount();
                            vatDefermentTrans.DeferredAmount    = -deferment.vatDefermentAmount;

                            while select SourceCurrencyCode, RecId from taxTransloc
                                where taxTransloc.Voucher    == taxTrans.Voucher
                                   && taxTransloc.TaxPeriod  == _tmpVATDefermentBal.TaxPeriod
                                   && taxTransloc.TaxOrigin  == TaxOrigin::Tax
                                   && taxTransloc.JournalNum == ledgerJournalTrans.JournalNum
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransloc.RecId);
                                if (!confind(defermentLines.TransferDetails, taxTransloc.RecId))
                                {
                                    vatDefermentTrans.DefermentInstallmentAmount += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Credit, taxTransloc.SourceCurrencyCode);
                                }
                            }

                            vatDefermentTrans.TransferAmount = vatDefermentTrans.DefermentInstallmentAmount;
                        }
                        vatDefermentTrans.Date                    = taxTrans.TransDate;
                        vatDefermentTrans.Currency                = taxTrans.CurrencyCode;
                        vatDefermentTrans.JournalName             = LedgerJournalTable::find(ledgerJournalTrans.JournalNum).Name;
                        vatDefermentTrans.JounrnalNumber          = ledgerJournalTrans.JournalNum;
                        vatDefermentTrans.TaxGroup                = taxTrans.TaxGroup;
                        vatDefermentTrans.ItemTaxGroup            = taxTrans.TaxItemGroup;
                        vatDefermentTrans.Allocation              = deferment.Allocation;
                        vatDefermentTrans.PaymantPer              = deferment.PaymentPer;
                        vatDefermentTrans.NumberOfDeferment       = deferment.NumberOfDeferment;
                        vatDefermentTrans.Change                  = deferment.Change;
                        vatDefermentTrans.AmountCurrency          = deferment.AmountCurrency;
                        vatDefermentTrans.Minimum                 = deferment.Minimum;
                        vatDefermentTrans.RefRecId                = defermentLines.RecId;
                        vatDefermentTrans.FatherRecId             = deferment.RecId;
                        if (vatDefermentTrans.DefermentInstallmentAmount != 0)
                        {
                            vatDefermentTrans.insert();
                        }
                    }
                }
            }
        }
        while select InventTransId, Voucher, TaxGroup, TaxItemGroup, TransDate, CurrencyCode from taxTrans
            group by InventTransId, Voucher, TaxGroup, TaxItemGroup, TransDate, CurrencyCode
            where taxTrans.TaxPeriod == _tmpVATDefermentBal.TaxPeriod
               && taxTrans.Source    == TaxModuleType::Purch
               && taxTrans.TaxPeriod == _tmpVATDefermentBal.TaxPeriod
        {
            select firstonly vendInvoiceTrans
                where vendInvoiceTrans.InventTransId     == taxTrans.InventTransId
                   && vendInvoiceTrans.vatGoodsType_IN   == VATGoodsType_IN::CapitalGoods
            exists join vendInvoiceTransTaxExtensionIN
                where vendInvoiceTrans.RecId                            == vendInvoiceTransTaxExtensionIN.VendInvoiceTrans
                    && vendInvoiceTransTaxExtensionIN.TaxInformation_IN == _tmpVATDefermentBal.TaxIdentificationNumber;
            if (vendInvoiceTrans)
            {
                if (vendInvoiceTrans.InventRefTransId)
                {
                    deferment = DefermentScheduleTrans_IN::findExtRecId(VendInvoiceTrans::findInventTransId(vendInvoiceTrans.InventRefTransId).RecId);
                }
                else
                {
                    deferment = DefermentScheduleTrans_IN::findExtRecId(vendInvoiceTrans.RecId);
                }
                while select defermentLines
                    where defermentLines.FatherRecId == deferment.RecId
                       && (defermentLines.Period     <= _tmpVATDefermentBalLine.From
                       || defermentLines.Period      <= _tmpVATDefermentBalLine.To)
                {
                    if (!confind(defermentLines.TransferDetails,taxTrans.RecId))
                    {
                        vatDefermentTrans.clear();
                        postedTax = 0;
                        vatDefermentTrans.Mark              = NoYes::Yes;
                        vatDefermentTrans.Voucher           = taxTrans.Voucher;
                        vatDefermentTrans.DefermentDate     = defermentLines.Period;
                        vatDefermentTrans.Source            = TaxModuleType::Purch;
                        vatDefermentTrans.InvoiceNumber     = VendTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate).Invoice;
                        vatDefermentTrans.Item              = vendInvoiceTrans.ItemId;
                        vatDefermentTrans.TransactionAmount = vendInvoiceTrans.LineAmount;

                        if (vendInvoiceTrans.InventRefTransId)
                        {
                            while select SourceCurrencyCode, TaxCode, RecId from taxTransloc
                                where taxTransloc.InventTransId == vendInvoiceTrans.InventTransId
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransloc.RecId);
                                if (taxTransLocal.DeferredLedgerDimension)
                                {
                                    select firstonly RecId from taxTransOrig
                                        where taxTransOrig.InventTransId == vendInvoiceTrans.InventRefTransId
                                           && taxTransOrig.TaxCode       == taxTransloc.TaxCode;

                                    taxTransLocalOrig = TaxTrans_IN::findRefRecId(taxTransOrig.RecId);
                                    if (!confind(defermentLines.TransferDetails,taxTransOrig.RecId))
                                    {
                                        vatDefermentTrans.DefermentInstallmentAmount += -CurrencyExchangeHelper::amount(taxTransLocalOrig.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Credit, taxTransloc.SourceCurrencyCode);
                                    }
                                }
                                vatDefermentTrans.DeferredAmount += taxTransLocal.PostedTaxAmout;
                            }
                            postedTax = 0;
                        }
                        else
                        {
                            while select SourceCurrencyCode, RecId from taxTransloc
                                where taxTransloc.Voucher       == taxTrans.Voucher
                                   && taxTransloc.InventTransId == vendInvoiceTrans.InventTransId
                                   && taxTransloc.TaxPeriod     == _tmpVATDefermentBal.TaxPeriod
                            {
                                taxTransLocal = TaxTrans_IN::findRefRecId(taxTransloc.RecId);
                                if (!confind(defermentLines.TransferDetails,taxTransloc.RecId))
                                {
                                    vatDefermentTrans.DefermentInstallmentAmount += CurrencyExchangeHelper::amount(taxTransLocal.PostedTaxAmout / deferment.vatDefermentAmount * defermentLines.Debit, taxTransloc.SourceCurrencyCode);
                                }
                            }
                            vatDefermentTrans.DeferredAmount = deferment.vatDefermentAmount;
                        }
                        vatDefermentTrans.TransferAmount          = vatDefermentTrans.DefermentInstallmentAmount;
                        vatDefermentTrans.Date                    = taxTrans.TransDate;
                        vatDefermentTrans.Currency                = taxTrans.CurrencyCode;
                        vatDefermentTrans.PurchaseOrder           = vendInvoiceTrans.PurchID;
                        vatDefermentTrans.InventTransId           = vendInvoiceTrans.InventTransId;
                        vatDefermentTrans.TaxGroup                = taxTrans.TaxGroup;
                        vatDefermentTrans.ItemTaxGroup            = taxTrans.TaxItemGroup;
                        vatDefermentTrans.Allocation              = deferment.Allocation;
                        vatDefermentTrans.PaymantPer              = deferment.PaymentPer;
                        vatDefermentTrans.NumberOfDeferment       = deferment.NumberOfDeferment;
                        vatDefermentTrans.Change                  = deferment.Change;
                        vatDefermentTrans.AmountCurrency          = deferment.AmountCurrency;
                        vatDefermentTrans.Minimum                 = deferment.Minimum;
                        vatDefermentTrans.RefRecId                = defermentLines.RecId;
                        vatDefermentTrans.FatherRecId             = deferment.RecId;
                        if (vatDefermentTrans.DefermentInstallmentAmount != 0)
                        {
                            vatDefermentTrans.insert();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reads the <c>VATDefermentTransaction_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    ///     The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    ///     If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    ///     A buffer containing <c>VATDefermentTransaction_IN</c> table.
    /// </returns>
    public static VATDefermentTransaction_IN find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        VATDefermentTransaction_IN  vatDefermentTransaction;

        vatDefermentTransaction.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vatDefermentTransaction.concurrencyModel(_concurrencyModel);
        }

        select firstonly vatDefermentTransaction
            where vatDefermentTransaction.RecId == _recId;

        return vatDefermentTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefermentInstallmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     To get the amount from table.
    /// </summary>
    /// <returns>
    ///     returns the amount after the calculation
    /// </returns>
    public static Amount getDefermentInstallmentAmount()
    {
        VATDefermentTransaction_IN  deferment;
        Amount                      defermentInstallmentAmount;

        select sum(DefermentInstallmentAmount) from deferment
            where deferment.Mark == NoYes::Yes;

        defermentInstallmentAmount = deferment.DefermentInstallmentAmount;

        return defermentInstallmentAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64193</DeveloperDocumentation>
	<Label>@GLS5608</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>DefermentDate</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefermentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FatherRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefermentSchedule</Name>
			<Label>@GLS5212</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Allocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymantPer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Change</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberOfDeferment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Minimum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InquiryOverview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefermentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Item</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeferredAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefermentInstallmentAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Journal</Name>
			<Label>@SYS24010</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JounrnalNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverView</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Mark</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefermentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Item</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeferredAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefermentInstallmentAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FatherRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@SYS28668</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemTaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Allocation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>Allocation_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCurrency</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS860</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Change</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS54158</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DefermentDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS6032</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DefermentInstallmentAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS6033</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeferredAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS6034</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FatherRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FatherRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<Label>@SYS4726</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Item</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<Label>@SYS14428</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemTaxGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<Label>@GLS5941</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JounrnalNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
			<Label>@SYS35283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Mark</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS19120</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Minimum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS5330</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumberOfDeferment</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@GLS5223</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymantPer</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymentPer_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchaseOrder</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxModuleTypeId</ExtendedDataType>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<Label>@GLS5124</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransactionAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBaseCur</ExtendedDataType>
			<Label>@GLS5872</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransferAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@GLS6230</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerTransactionVoucher_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingDate</MapField>
					<MapFieldTo>Date</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FatherRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DefermentScheduleTransLines_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefermentScheduleTransLines_IN_FatherRecId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefermentScheduleTransLines_IN_FatherRecId_VATDefermentTransaction_IN</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FatherRecId</Name>
					<Field>FatherRecId</Field>
					<RelatedField>FatherRecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Item</Name>
					<SourceEDT>ItemIdSmall</SourceEDT>
					<Field>Item</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalName</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalName</Name>
					<SourceEDT>LedgerJournalNameId</SourceEDT>
					<Field>JournalName</Field>
					<RelatedField>JournalName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalNameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JounrnalNumber</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>JounrnalNumber</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchaseOrder</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchaseOrder</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RefRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DefermentScheduleTransLines_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemTaxGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>ItemTaxGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>