<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdOnItem_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdOnItem_TH extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>showTaxWithholdValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the withholding tax value.
    /// </summary>
    /// <returns>
    /// Returns the withholding tax value.
    /// </returns>
    display TaxWithholdValue  showTaxWithholdValue()
    {
        TaxWithholdValue  taxWithholdValue;

        taxWithholdValue  = this.taxWithholdPercent_TH(this.TaxWithholdCode,
                                                     DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                     0);

        return taxWithholdValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of withholding tax.
    /// </summary>
    /// <returns>
    /// Returns the name of withholding tax.
    /// </returns>
    display TaxWithholdName taxWithholdName()
    {
        return TaxWithholdTable::find(this.TaxWithholdCode).TaxWithholdName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdPercent_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the withholding tax value for given parameter.
    /// </summary>
    /// <param name="_taxWithholdCode">
    /// The tax withhold code is used to find record of the <c>TaxWithholdTable</c> table.
    /// </param>
    /// <param name="_date">
    /// The transaction date is used to find record of the <c>TaxWithholdTable</c> table.
    /// </param>
    /// <param name="_amount">
    /// The tax withhold base amount is used to find record of the <c>TaxWithholdTable</c> table.
    /// </param>
    /// <returns>
    /// Returns a withholding tax value.
    /// </returns>
    private TaxWithholdValue  taxWithholdPercent_TH(TaxWithholdCode    _taxWithholdCode,
                                     TransDate          _date,
                                     TaxWithholdBase    _amount)

    {
        TaxWithholdTable        taxWithholdTable;
        TaxWithholdValue        percent;
        TaxWithholdBase         currencyAmount;

        if (_taxWithholdCode)
        {
            taxWithholdTable  = TaxWithholdTable::find(_taxWithholdCode);

            if (taxWithholdTable.CurrencyCode != CompanyInfoHelper::standardCurrency())
            {
                 currencyAmount = CurrencyExchangeHelper::curAmount(_amount, taxWithholdTable.CurrencyCode, _date);
            }
            else
            {
                currencyAmount = _amount;
            }

            percent = TaxWithholdData::find(_taxWithholdCode, _date, currencyAmount).TaxWithholdValue;
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(TaxWithholdItemGroup_TH _taxWithholdItemGroup,
                              TaxWithholdCode         _taxWithholdCode)
    {
        boolean retValue = true;

        if (!TaxWithholdOnItem_TH::exist(_taxWithholdItemGroup, _taxWithholdCode))
        {
            retValue = checkFailed(strFmt(TaxWithholdOnItem_TH::txtNotExist(), _taxWithholdItemGroup, _taxWithholdCode));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether record exists or not for given parameter.
    /// </summary>
    /// <param name="_taxWithholdItemGroup">
    /// The tax withhold item group is used to find record.
    /// </param>
    /// <param name="_taxWithholdCode">
    /// The tax withhold code is used to find record.
    /// </param>
    /// <returns>
    /// true if the record exits; otherwise, false.
    /// </returns>
    static boolean exist(TaxWithholdItemGroup_TH    _taxWithholdItemGroup,
                         TaxWithholdCode            _taxWithholdCode)
    {
        TaxWithholdOnItem_TH taxWithholdOnItem_TH;
        TaxWithholdItemGroupHeading_TH taxWithholdItemGroupHeading_TH;

        if (_taxWithholdItemGroup && _taxWithholdCode)
        {
            select RecId from taxWithholdOnItem_TH join taxWithholdItemGroupHeading_TH
                        where taxWithholdItemGroupHeading_TH.RecId == taxWithholdOnItem_TH.TaxWithholdItemGroupHeading_TH
                            && taxWithholdItemGroupHeading_TH.TaxWithholdItemGroup == _taxWithholdItemGroup
                            && taxWithholdOnItem_TH.TaxWithholdCode == _taxWithholdCode;

            return taxWithholdOnItem_TH.RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWithholdOnItem_TH</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional
    /// </param>
    /// <returns>
    /// A record in the <c>TaxWithholdOnItem_TH</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxWithholdOnItem_TH find(
        recId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdOnItem_TH taxWithholdOnItem_TH;

        taxWithholdOnItem_TH.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdOnItem_TH.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdOnItem_TH
            where
                taxWithholdOnItem_TH.RecId == _recId;

        return taxWithholdOnItem_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS314137";
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        TaxWithholdCache::clearScope(TaxWithholdCacheScope::IntersectionData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        TaxWithholdCache::clearScope(TaxWithholdCacheScope::IntersectionData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        TaxWithholdCache::clearScope(TaxWithholdCacheScope::IntersectionData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS320025</DeveloperDocumentation>
	<FormRef>TaxWithholdItemGroup_TH</FormRef>
	<Label>@SYS314129</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdItemGroupHeading_TH</TitleField1>
	<TitleField2>TaxWithholdCode</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxItemGroupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxItemGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxItemCodeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdItemGroupHeading_TH</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWithholdItemGroupHeading_TH_TaxWithholdOnItem_TH</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>TaxWithholdOnItem_TH</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>