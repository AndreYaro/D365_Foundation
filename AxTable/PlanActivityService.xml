<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityService</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlanActivityService extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>productDimensionFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field Id of the corresponding flag for a given <c>InventProductDimension</c> class.
    /// </summary>
    /// <param name = "_productDimension">The instance of the <c>InventProductDimension</c> class.</param>
    /// <returns>The field Id.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static FieldId productDimensionFieldId(InventProductDimension _productDimension)
    {
        #InventDimDevelop

        switch (true)
        {
            case _productDimension is InventProductDimensionConfig:
                return fieldNum(PlanActivityService, UseOutputConfiguration);                
            case _productDimension is InventProductDimensionSize:
                return fieldNum(PlanActivityService, UseOutputSize);
            case _productDimension is InventProductDimensionColor:
                return fieldNum(PlanActivityService, UseOutputColor);
            case _productDimension is InventProductDimensionStyle:
                return fieldNum(PlanActivityService, UseOutputStyle);          
            case _productDimension is InventProductDimensionVersion:
                return fieldNum(PlanActivityService, UseOutputVersion);          
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears an <c>InventDim</c> record based on the product dimensions in use.
    /// </summary>
    /// <param name = "_inventDim">The record to clear.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearInventDim(InventDim _inventDim)
    {
        var enumerator = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enumerator.moveNext())
        {
            InventProductDimension productDimension = enumerator.current();
            FieldId inventDimParmFieldId = productDimension.parmInventDimParmFieldId();
            FieldId serviceFlagFieldId = PlanActivityService::productDimensionFieldId(productDimension);

            if (serviceFlagFieldId && this.(serviceFlagFieldId))
            {
                FieldId inventDimFieldId = productDimension.parmInventDimFieldId();
                _inventDim.(inventDimFieldId) = InventDim::emptyDimField(inventDimFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product dimension flags on an <c>InventDimParm</c> record.
    /// </summary>
    /// <param name = "_inventDimParm">The record to initialize.</param>
    private void initInventDimParm(InventDimParm _inventDimParm)
    {
        var enumerator = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enumerator.moveNext())
        {
            InventProductDimension productDimension = enumerator.current();
            FieldId inventDimParmFieldId = productDimension.parmInventDimParmFieldId();
            FieldId serviceFlagFieldId = PlanActivityService::productDimensionFieldId(productDimension);

            if (serviceFlagFieldId)
            {
                _inventDimParm.(inventDimParmFieldId) = this.(serviceFlagFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAnyProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if any of the product dimension flags are set.
    /// </summary>
    /// <returns>true is one or more product dimension flags are set; otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean useAnyProductDimensions()
    {
        InventDimParm inventDimParm;
        this.initInventDimParm(inventDimParm);
        return inventDimParm.anyProductDimensionFlagSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product dimension flags from an <c>InventDimParm</c> record.
    /// </summary>
    /// <param name = "_inventDimParm">The record to initialize from.</param>
    private void initFromInventDimParm(InventDimParm _inventDimParm)
    {
        var enumerator = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enumerator.moveNext())
        {
            InventProductDimension productDimension = enumerator.current();
            FieldId inventDimParmFieldId = productDimension.parmInventDimParmFieldId();
            FieldId serviceFlagFieldId = PlanActivityService::productDimensionFieldId(productDimension);

            if (serviceFlagFieldId)
            {
                this.(serviceFlagFieldId) = _inventDimParm.(inventDimParmFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the dimensions of the given <c>InventDim</c> buffer into the service product inventory
    /// dimensions.
    /// </summary>
    /// <param name="_inventDimMerge">
    /// The <c>InventDim</c> table buffer from which to merge the inventory dimensions.
    /// </param>
    /// <param name="_createInDatabase">
    /// A Boolean value that indicates whether the result dimension must be stored in the database.
    /// </param>
    /// <param name="_clearNotProductDimensions">
    /// A Boolean value that indicates whether all dimensions that are not product dimensions must be
    /// removed from the result.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim mergeInventDim(
        InventDim _inventDimMerge,
        boolean   _createInDatabase,
        boolean   _clearNotProductDimensions)
    {
        InventDim           inventDimMerge;
        InventDim           inventDimResult;
        InventDim           inventDimProduct;
        InventDimParm       inventDimParm;
        InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId);

        if (_clearNotProductDimensions)
        {
            inventDimParm.clear();
        }
        else
        {
            inventDimParm.initFromInventDim(_inventDimMerge);
        }

        this.initInventDimParm(inventDimParm);

        inventDimMerge = _inventDimMerge.data();
        inventDimMerge.clearNotSelectedDim(inventDimParm);

        // service inventory dimension contains only product dimensions
        inventDimProduct = InventDim::find(this.ServiceItemInventDimId);
        inventDimResult  = inventDimProduct.data();

        inventDimResult.mergeUsedDim(inventDimGroupSetup,inventDimMerge);
        inventDimResult.clearNotActiveDim(inventDimGroupSetup);

        if (!inventDimProduct.equal(inventDimResult))
        {
            if (_createInDatabase)
            {
                inventDimResult = InventDim::findOrCreate(inventDimResult);
            }
            else
            {
                inventDimResult.RecId       = 0;
                inventDimResult.InventDimId = '';
            }
        }

        return inventDimResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputServiceDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the output product dimensions for the current <c>PlanActivityService</c> record.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A kanban job from which to derive the dimensions; optional.
    /// </param>
    /// <param name="_createInDatabase">
    /// A Boolean value that indicates whether the output dimension is to be stored in the database.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> buffer that contains the output service dimensions.
    /// </returns>
    /// <remarks>
    /// In the case that the service is marked to derive one or more dimensions from the output product,
    /// the kanban job parameter must be provided; otherwise, an error will be raised.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim outputServiceDimensions(
        KanbanJob _kanbanJob = null,
        boolean   _createInDatabase = false)
    {
        InventDimParm inventDimParm;
        this.initInventDimParm(inventDimParm);

        if (inventDimParm.anyProductDimensionFlagSet()
            && prmisDefault(_kanbanJob))
        {
            throw error(Error::missingRecord(tableStr(KanbanJob)));
        }

        return this.mergeInventDim(_kanbanJob.inventDim(),_createInDatabase,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAsDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the service activity as the default.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setAsDefault()
    {
        PlanActivityService     oldDefaultplanActivityService;

        if (!this.IsDefault)
        {
            ttsbegin;

            // Find the old default service activity
            select firstonly forupdate oldDefaultplanActivityService
                where oldDefaultplanActivityService.PlanActivity    == this.PlanActivity
                &&    oldDefaultplanActivityService.IsDefault       == NoYes::Yes;

            // Clear the old default service activity
            oldDefaultplanActivityService.IsDefault = NoYes::No;
            oldDefaultplanActivityService.update();

            // Set the current service activity as the default
            this.IsDefault = NoYes::Yes;
            this.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                 ret;
        PlanActivityService     planActivityService;

        ret = super();

        if (this.IsDefault)
        {
            select firstonly planActivityService
                where planActivityService.RecId         != this.RecId
                &&    planActivityService.PlanActivity  == this.PlanActivity;

            if (planActivityService)
            {
                // You cannot remove a default service when other services are assigned to the activity. Please select another service as default service.
                ret = checkFailed("@SYS332402");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean         ret;
        InventTable     serviceItem;

        ret = super();

        if (ret)
        {
            serviceItem = InventTable::findInLegalEntity(this.ItemId, this.ItemDataAreaId);

            if (ret && !serviceItem.inventItemType().isServiceItem())
            {
                ret = checkFailed(strFmt("@SYS340401", enum2str(serviceItem.ItemType)));
            }

            if (ret && serviceItem.isStocked())
            {
                ret = checkFailed("@SYS340402");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the vendor account of the service activity.
    /// </summary>
    /// <returns>
    /// The vendor account of the service activity; otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendAccount vendorAccount()
    {
        VendAccount vendAccount;

        if (this.CarrierCode)
        {
            vendAccount = PlanActivityService::vendorAccountCarrierCompany(this.CarrierCode);
        }
        else
        {
            vendAccount = PlanActivity::find(this.PlanActivity).vendor();
        }

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlanActivityService</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new record in the <c>PlanActivityService</c> table.
    /// </summary>
    /// <param name="_planActivity">
    ///    The record id of the associated <c>PlanActivity</c> record
    /// </param>
    /// <param name="_serviceItemId">
    ///    The service item id
    /// </param>
    /// <param name="_serviceItemDataAreaId">
    ///    The data area id of the service item id
    /// </param>
    /// <param name="_serviceItemInventDimId">
    ///    The invent dim id of the service item
    /// </param>
    /// <param name="_serviceItemInventDimDataAreaId">
    ///    The data area id of the invent dim
    /// </param>
    /// <param name="_serviceUnitOfMeasure">
    ///    The record id of the associated <c>UnitOfMeasure</c> record
    /// </param>
    /// <param name="_serviceRatio">
    ///    The service ratio
    /// </param>
    /// <param name="_serviceQuantityCalculationBase">
    ///    The service quantity calculation base
    /// </param>
    /// <param name="_isDefault">
    ///    Indicates whether the service activity is the default
    /// </param>
    /// <param name="_purchAgreementHeader">
    ///    The record id of the associated <c>PurchAgreementHeader</c> record
    /// </param>
    /// <param name="_outputProducts">
    ///    A container with the output products related to the service activity; optional
    /// </param>
    /// <param name="_carrierCode">
    ///    The carrier code of the carrier associated with the service activity; optional
    /// </param>
    /// <param name="_carrierIdDataAreaId">
    ///    The carrier data area id; optional
    /// </param>
    /// <param name="_inventDimParm">
    ///    Indicates which product dimensions should be taken from the output product; optional
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createPlanActivityService(
        RecId                           _planActivity,
        ItemId                          _serviceItemId,
        DataAreaId                      _serviceItemDataAreaId,
        InventDimId                     _serviceItemInventDimId,
        DataAreaId                      _serviceItemInventDimDataAreaId,
        RecId                           _serviceUnitOfMeasure,
        PlanActivityServiceRatio        _serviceRatio,
        PlanActivityServiceQuantityBase _serviceQuantityCalculationBase,
        NoYes                           _isDefault,
        RecId                           _purchAgreementHeader,
        container                       _outputProducts                 = conNull(),
        TMSCarrierCode                  _carrierCode                    = '',
        DataAreaId                      _carrierIdDataAreaId            = '',
        InventDimParm                   _inventDimParm                  = null)
    {
        PlanActivityService                     planActivityService;
        PlanActivityTmpServiceOutputProducts    planActivityTmpServiceOutputProducts;
        int                                     conIdx;

        ttsbegin;

        planActivityService.PlanActivity                    = _planActivity;
        planActivityService.ItemId                          = _serviceItemId;
        planActivityService.ItemDataAreaId                  = _serviceItemDataAreaId;
        planActivityService.ServiceItemInventDimId          = _serviceItemInventDimId;
        planActivityService.ServiceItemInventDimDataAreaId  = _serviceItemInventDimDataAreaId;
        planActivityService.ServiceUnitOfMeasure            = _serviceUnitOfMeasure;
        planActivityService.ServiceRatio                    = _serviceRatio;
        planActivityService.ServiceQuantityCalculationBase  = _serviceQuantityCalculationBase;
        planActivityService.PurchAgreementHeader            = _purchAgreementHeader;
        planActivityService.CarrierCode                     = _carrierCode;
        planActivityService.IsDefault                       = _isDefault;
        planActivityService.CarrierIdDataAreaId             = _carrierIdDataAreaId;
        planActivityService.initFromInventDimParm(_inventDimParm);

        if (planActivityService.validateWrite())
        {
            planActivityService.insert();
        }

        if (planActivityService.RecId)
        {
            for (conIdx = 1; conIdx <= conLen(_outputProducts); conIdx++)
            {
                planActivityTmpServiceOutputProducts.clear();
                con2Buf(conPeek(_outputProducts, conIdx), planActivityTmpServiceOutputProducts);
                planActivityTmpServiceOutputProducts.insert();
            }

            while select planActivityTmpServiceOutputProducts
            {
                PlanActivityServiceOutputItem::createServiceActivityOutputItem(
                    planActivityService.RecId,
                    planActivityTmpServiceOutputProducts.ItemId,
                    getCompany(tableNum(InventTable), curext()),
                    planActivityTmpServiceOutputProducts.InventDimId,
                    getCompany(tableNum(InventDim), curext())
                    );
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PlanActivityService</c> table exists.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>PlanActivityService</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _refRecId)
    {
        return _refRecId &&
               (select firstonly planActivityService
                    where planActivityService.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PlanActivityService</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>PlanActivityService</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PlanActivityService</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityService find(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        PlanActivityService planActivityService;

        if (_refRecId)
        {
            planActivityService.selectForUpdate(_forUpdate);

            select firstonly planActivityService
                where planActivityService.RecId == _refRecId;
        }

        return planActivityService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default <c>PlanActivityService</c> record for a specific plan activity.
    /// </summary>
    /// <param name="_planActivityRecId">
    /// The record ID of the <c>PlanActivity</c> record for which the default service will be retrieved.
    /// </param>
    /// <returns>
    /// The default <c>PlanActivityService</c> value for the plan activity; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityService findDefaultService(PlanActivityRefRecId _planActivityRecId)
    {
        PlanActivityService     planActivityService;

        if (_planActivityRecId)
        {
            select firstonly planActivityService
                where planActivityService.PlanActivity == _planActivityRecId
                   && planActivityService.IsDefault    == NoYes::Yes;
        }

        return planActivityService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>PlanActivityService</c> record for a specific kanban job.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record for which the service will be matched.
    /// </param>
    /// <param name="_useCache">
    /// A Boolean value that indicates whether caching must be used.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>PlanActivityService</c> for the kanban job; otherwise, an empty buffer.
    /// </returns>
    /// <remarks>
    /// The caching is not per kanban job, but per combination of activity, item, and item dimensions.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityService findKanbanJob(
        KanbanJob _kanbanJob,
        boolean _useCache  = false,
        boolean _forUpdate = false)
    {
        PlanActivityService             planActivityService;
        PlanActivityServiceFindCache    cache = PlanActivityServiceFindCache::newStandard();
        KanbanJobPlanActivityService    kanbanJobPlanActivityService;

        // 1. If a explicit reference exists, it has priority
        kanbanJobPlanActivityService = KanbanJobPlanActivityService::findKanbanJob(_kanbanJob.RecId);
        if (kanbanJobPlanActivityService.RecId)
        {
            planActivityService = PlanActivityService::find(kanbanJobPlanActivityService.PlanActivityService);
        }

        if (!planActivityService.RecId)
        {
            // 2. Rely on cache
            if (_useCache)
            {
                planActivityService = cache.getPlanActivityServiceForJob(_kanbanJob);
            }

            // 3. Try finding a service for the plan activity
            if (!planActivityService.RecId)
            {
                planActivityService = PlanActivityService::findPlanActivity(
                                                                _kanbanJob.planActivity().RecId,
                                                                _kanbanJob.itemId(),
                                                                _kanbanJob.InventDimId);
            }

            if (   _useCache
                && planActivityService.RecId)
            {
                cache.insertPlanActivityServiceForJob(_kanbanJob, planActivityService);
            }
        }

        if (_forUpdate)
        {
            planActivityService = PlanActivityService::find(planActivityService.RecId, true);
        }

        return planActivityService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanJobOutputItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanActivityService</c> records for a specific kanban job output item.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record for which the service will be matched.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanActivityService</c> table for the kanban job output item; otherwise an empty
    /// buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityService findKanbanJobOutputItem(KanbanJob _kanbanJob)
    {
        PlanActivityService planActivityService;

        if (_kanbanJob.RecId)
        {
            planActivityService = PlanActivityService::findPlanActivityOutputItem(
                                                                _kanbanJob.planActivity().RecId,
                                                                _kanbanJob.itemId(),
                                                                _kanbanJob.InventDimId);
        }

        return planActivityService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMatchingAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an active <c>AgreementLine</c> record based on a vendor account, item number, and plan
    /// </summary>
    /// <param name="_vendorAccount">
    /// The vendor account to search for.
    /// </param>
    /// <param name="_itemId">
    /// The item number to search for.
    /// </param>
    /// <param name="_buyingLegalEntityDataAreaId">
    /// The data area of the buying legal entity to search for.
    /// </param>
    /// <param name="_plan">
    /// The plan that is used for filtering the effective period of the agreement line.
    /// </param>
    /// <returns>
    /// A <c>AgreementLine</c> record if an active agreement line matching the filtering criteria is found;
    /// otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AgreementLine findMatchingAgreementLine(
        VendAccount    _vendorAccount,
        ItemId         _itemId,
        CompanyId
        _buyingLegalEntityDataAreaId,
        Plan           _plan
        )
    {
        PurchAgreementHeader                purchAgreementHeader;
        AgreementLine                       agreementLine;
        InventTable                         inventTable;
        utcdatetime                         toDateTime;

        // If the plan have no "valid to" date, the to date should be unlimited
        toDateTime = _plan.ValidTo == DateTimeUtil::minValue() ? DateTimeUtil::maxValue() : _plan.ValidTo;

        select firstonly
            crossCompany
            agreementLine
            exists join purchAgreementHeader
            exists join inventTable
            where purchAgreementHeader.RecId            == agreementLine.Agreement
            &&    inventTable.ItemId                    == _itemId
            &&    inventTable.DataAreaId                ==
                                                           getCompany(tableNum(InventTable), _buyingLegalEntityDataAreaId)
            &&    agreementLine.ItemId                  == inventTable.ItemId
            &&    agreementLine.ItemDataAreaId          == inventTable.DataAreaId
            &&    inventTable.ItemType                  == ItemType::Service
            &&    purchAgreementHeader.VendAccount      == _vendorAccount
            &&    purchAgreementHeader.VendorDataAreaId == getCompany(tableNum(VendTable), _buyingLegalEntityDataAreaId)
            &&    purchAgreementHeader.AgreementState   == AgreementState::Effective
            &&    purchAgreementHeader.IsDeleted        == NoYes::No
            &&    agreementLine.EffectiveDate           < DateTimeUtil::date(toDateTime)
            &&    agreementLine.ExpirationDate          > DateTimeUtil::date(_plan.ValidFrom);

        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>PlanActivityService</c> record for a specific plan activity.
    /// </summary>
    /// <param name="_planActivityRecId">
    /// The <c>PlanActivity</c> record for which the service will be matched.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value for which the service will be matched; optional.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value for which the service will be matched; optional.
    /// </param>
    /// <returns>
    /// A <c>PlanActivityService</c> for the plan activity; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityService findPlanActivity(
        PlanActivityRefRecId _planActivityRecId,
        ItemId               _itemId      = '',
        InventDimId          _inventDimId = '')
    {
        PlanActivityService planActivityService;

        // find specific service activity
        if (   _itemId
            && _inventDimId)
        {
            planActivityService = PlanActivityService::findPlanActivityOutputItem(_planActivityRecId,
                                                                                  _itemId,
                                                                                  _inventDimId);
        }

        // fall back to default
        if (!planActivityService.RecId)
        {
            planActivityService = PlanActivityService::findDefaultService(_planActivityRecId);
        }

        return planActivityService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivityOutputItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanActivityService</c> records for a specific output item.
    /// </summary>
    /// <param name="_planActivityRecId">
    /// A record ID of the <c>PlanActivity</c> table.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value to find.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value to find.
    /// </param>
    /// <returns>
    /// A <c>PlanActivityService</c> for the output item; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityService findPlanActivityOutputItem(
        PlanActivityRefRecId _planActivityRecId,
        ItemId               _itemId,
        InventDimId          _inventDimId)
    {
        PlanActivityService             planActivityService;
        PlanActivityServiceOutputItem   planActivityServiceOutputItem;
        InventDim                       inventDimSearch;
        InventDim                       inventDim;
        InventDimParm                   inventDimParmCovPr;

        if (_planActivityRecId)
        {
            inventDimParmCovPr.initCovPrDimension(InventDimGroupSetup::newItemId(_itemId));
            inventDim = InventDim::find(_inventDimId);

            select firstfast planActivityService
                where planActivityService.PlanActivity == _planActivityRecId
                   && planActivityService.IsDefault    == NoYes::No
                exists join planActivityServiceOutputItem
                    where planActivityServiceOutputItem.PlanActivityService == planActivityService.RecId
                       && planActivityServiceOutputItem.ItemId              == _itemId
            #InventDimJoinCoveragePriority(planActivityServiceOutputItem.InventDimId, inventDimSearch, inventDim, inventDimParmCovPr);
        }

        return planActivityService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceFormulaPreviewDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a formula preview string for the current record.
    /// </summary>
    /// <returns>The preview description.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display Description serviceFormulaPreviewDisplay()
    {
        return PlanActivityService::serviceFormulaPreview(this.ServiceQuantityCalculationBase,
                                                        UnitOfMeasure::find(this.ServiceUnitOfMeasure).Symbol,
                                                        this.ServiceRatio);
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceFormulaPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a string for the formula preview.
    /// </summary>
    /// <param name="_serviceQuantityBase">
    /// The service quantity base.
    /// </param>
    /// <param name="_symbol">
    /// The service unit of measure.
    /// </param>
    /// <param name="_serviceRatio">
    /// The service ratio.
    /// </param>
    /// <returns>
    /// The service formula preview.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description serviceFormulaPreview(
        PlanActivityServiceQuantityBase _serviceQuantityBase,
        UnitOfMeasureSymbol             _symbol,
        PlanActivityServiceRatio        _serviceRatio)
    {
        Description formulaDescription;

        switch (_serviceQuantityBase)
        {
            case PlanActivityServiceQuantityBase::Jobs:
                // Number of jobs required
                formulaDescription = "@SYS331782";
                break;

            case PlanActivityServiceQuantityBase::ProductQuantityGood:
                // Output item quantity (good)
                formulaDescription = "@SYS331783";
                break;

            case PlanActivityServiceQuantityBase::TotalOutputItemQuantity:
                // Output item quantity (good + error)
                formulaDescription = "@SYS331784";
                break;

            case PlanActivityServiceQuantityBase::ActivityTime:
                // Activity time
                formulaDescription = "@SYS152512";
                break;
        }

        // Formula: Service delivery quantity(%1) = %2 * Service ratio (%3)
        return strFmt(currentSessionLanguageRTL() ? "@SYS340403" : "@SYS331785" ,
               _symbol ? _symbol : "@SYS332099",
               formulaDescription,
               _serviceRatio);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCarrierCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the validity of a carrier code.
    /// </summary>
    /// <param name="_carrierCode">
    /// The carrier code to be validated.
    /// </param>
    /// <returns>
    /// true is the carrier is valid; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean validateCarrierCode(TMSCarrierCode _carrierCode)
    {
        TMSCarrier tmsCarrier = tmsCarrier::find(_carrierCode);

        if (tmsCarrier.RecId != 0 && tmsCarrier.Active == NoYes::Yes)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorAccountCarrierCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the vendor account of the carrier that is based on the carrier company.
    /// </summary>
    /// <param name="_carrierCode">
    /// The carrier code.
    /// </param>
    /// <returns>
    /// Vendor account of the carrier company; otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendAccount vendorAccountCarrierCompany(TMSCarrierCode _carrierCode)
    {
        TMSCarrier      tmsCarrier;
        VendAccount     vendAccount;

        if (_carrierCode)
        {
            vendAccount = TmsCarrier::find(_carrierCode).VendorCode;
        }

        return vendAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS331573</DeveloperDocumentation>
	<FormRef>PlanActivityDetails</FormRef>
	<Label>@SYS331570</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>PurchAgreementHeader</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>KanbanJobPlanActivityService</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>KanbanJobPlanActivityService</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PlanActivityServiceOutputItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PlanActivityServiceOutputItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceItemInventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceItemInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceQuantityCalculationBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Agreement</Name>
			<Label>@SYS130887</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Carrier</Name>
			<Label>@SYS50733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierIdDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDefault</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceDimensions</Name>
			<Label>@SYS331568</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceItemInventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceItemInventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceItem</Name>
			<Label>@SYS7780</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ServiceQuantityCalculation</Name>
			<Label>@SYS331569</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceQuantityCalculationBase</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UseOutputProductDimensions</Name>
			<Label>@SYS332103</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseOutputConfiguration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOutputColor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOutputStyle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOutputVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseOutputSize</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierIdDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS27587</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchAgreementHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS130887</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceItemInventDimDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceItemInventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceQuantityCalculationBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PlanActivityServiceQuantityBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ServiceRatio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityServiceRatio</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ServiceUnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS331571</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOutputColor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS331789</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOutputConfiguration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS331788</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOutputSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS331787</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOutputStyle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@FPK270021</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseOutputVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SCM:ProductVersionUseOutput</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ShipCarrierId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanActivityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnitOfMeasureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceUnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchAgreementHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceItemInventDimDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ServiceItemInventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TMSCarrierIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CarrierCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CarrierIdDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceItemInventDimDataAreaId</Name>
					<Field>ServiceItemInventDimDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceItemInventDimId</Name>
					<Field>ServiceItemInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanActivity</Name>
					<Field>PlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchAgreementHeader</Name>
					<Field>PurchAgreementHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceUnitOfMeasure</Name>
					<Field>ServiceUnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSCarrier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierIdDataAreaId</Name>
					<Field>CarrierIdDataAreaId</Field>
					<RelatedField>DataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ShipCarrierTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ShipCarrierTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierIdDataAreaId</Name>
					<Field>CarrierIdDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierId</Name>
					<Field>CarrierId</Field>
					<RelatedField>CarrierId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>