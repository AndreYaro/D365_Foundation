<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvAppEmplSub</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvAppEmplSub extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editDateFrom</Name>
				<Source><![CDATA[
    public edit TrvDelegateStartDate editDateFrom(boolean _set, TrvDelegateStartDate dateFrom)
    {
        TimeOfDay beginTime = 0;        // time as of 12:00:00 AM or 00:00:00 Hrs
        UserInfo userInfo;

        if (_set)
        {
            if (dateFrom)
            {
                if (this.DelegatedUser)
                {
                    userInfo = xUserInfo::find(false, this.DelegatedUser);

                    if (userInfo)
                    {
                        this.FromDateUTC = DateTimeUtil::newDateTime(dateFrom, beginTime, userInfo.PreferredTimeZone);
                    }
                }
            }
            else
            {
                this.FromDateUTC = DateTimeUtil::newDateTime(dateNull(), 0);
            }
        }
        else
        {
            userInfo = xUserInfo::find(false, this.DelegatedUser);
            dateFrom = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.FromDateUTC, userInfo.PreferredTimeZone));
        }

        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDateTo</Name>
				<Source><![CDATA[
    public edit TrvDelegateEndDate editDateTo(boolean _set, TrvDelegateEndDate dateTo)
    {
        TimeOfDay endTime = 86399;      // Time as of 11:59:59 PM or 23:59:59 hrs
        UserInfo userInfo;

        if (_set)
        {
            if (dateTo)
            {
                if (this.DelegatedUser)
                {
                    userInfo = xUserInfo::find(false, this.DelegatedUser);

                    if (userInfo)
                    {
                        this.ToDateUTC = DateTimeUtil::newDateTime(dateTo, endTime, userInfo.PreferredTimeZone);
                    }
                }
            }
            else
            {
                this.ToDateUTC = DateTimeUtil::newDateTime(dateNull(), 0);
            }
        }
        else
        {
            userInfo = xUserInfo::find(false, this.DelegatedUser);
            dateTo = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ToDateUTC, userInfo.PreferredTimeZone));
        }

        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDelegatedUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits the delegated user value
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the delegated user value has been modified.
    /// </param>
    /// <param name="_user">
    /// The new delegated user id.
    /// </param>
    /// <returns>
    /// The delegated user id.
    /// </returns>
    edit TrvDelegationUser editDelegatedUser(boolean _set, TrvDelegationUser _user)
    {
        if (_set)
        {
            if (_user)
            {
                this.DelegatedUser = _user;
            }
            else
            {
                this.DelegatedUser = '';
            }
        }
        else
        {
            _user = this.DelegatedUser;
        }

        return _user;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the delegated user.
    /// </summary>
    /// <returns>
    /// Name of the delegated user
    /// </returns>
    display UserName userName()
    {
        return xUserInfo::find(false,this.DelegatedUser).name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        UserInfo userInfo;

        ret = super();

        if (ret)
        {
            userInfo = xUserInfo::find(false, this.DelegatedUser);

            if (!userInfo)
            {
                ret = checkFailed(strFmt ("@SYS4110084", this.DelegatedUser));
            }

            if ( this.FromDateUTC != DateTimeUtil::newDateTime(dateNull(),0) &&
                this.ToDateUTC   != DateTimeUtil::newDateTime(dateNull(),0) &&
                (this.FromDateUTC > this.ToDateUTC))
            {
                ret = checkFailed("@SYS84349");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TrvAppEmplSub find(RefRecId _recId, boolean _forUpdate = false)
    {
        TrvAppEmplSub trvAppEmplSub;
        if (_recId)
        {
            trvAppEmplSub.selectForUpdate(_forUpdate);
            select firstonly trvAppEmplSub where trvAppEmplSub.RecId == _recId;
        }
        return trvAppEmplSub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllDelegates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns all the workers across all companies for whom the specified worker has current delegate access for.
    /// </summary>
    /// <param name="_user">
    ///     The <c>UserId</c> of the specified worker.
    /// </param>
    /// <returns>
    ///     All the workers across all companies for whom the specified worker has current delegate access for.
    /// </returns>
    public static TrvAppEmplSub findAllDelegates(WorkflowUser _user)
    {
        TrvAppEmplSub trvAppEmplSub;

        if (_user)
        {
            select crossCompany trvAppEmplSub where
                trvAppEmplSub.DelegatedUser     == _user                    &&
                trvAppEmplSub.FromDateUTC       <= DateTimeUtil::utcNow()   && //Check whether the current system date falls within the worker's delegate access date range
                (trvAppEmplSub.ToDateUTC        == utcDateTimeNull()        ||
                trvAppEmplSub.ToDateUTC         >= DateTimeUtil::utcNow());
        }

        return trvAppEmplSub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllDelegatedUsers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns all the users across all companies to whom the specified worker has been given delegate access for.
    /// </summary>
    /// <param name="_delegatingWorker">
    ///     The <c>RecId</c> of the specified worker.
    /// </param>
    /// <returns>
    ///     All the users across all companies to whom the specified worker has given delegate access for.
    /// </returns>
    public static TrvAppEmplSub findAllDelegatedUsers(TrvHcmWorkerRecId _delegatingWorker)
    {
        TrvAppEmplSub trvAppEmplSub;

        //Check whether the current system date falls within the worker's delegate access date range
        select crossCompany trvAppEmplSub where
            trvAppEmplSub.DelegatingWorker  == _delegatingWorker		&&
            trvAppEmplSub.FromDateUTC       <= DateTimeUtil::utcNow()   &&
            (trvAppEmplSub.ToDateUTC        == utcDateTimeNull()        ||
            trvAppEmplSub.ToDateUTC         >= DateTimeUtil::utcNow());

        return trvAppEmplSub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllForCurrentUser</Name>
				<Source><![CDATA[
    public static TrvAppEmplSub findAllForCurrentUser()
    {
        UserId      currentUser = '';
        RecId       workerRecId = HcmWorkerLookup::currentWorker();

        if (workerRecId != 0)
        {
            currentUser = curUserId();
        }

        return TrvAppEmplSub::findAllDelegates(currentUser);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForCurrentUser</Name>
				<Source><![CDATA[
    public static boolean existForCurrentUser()
    {
        return (TrvAppEmplSub::findAllForCurrentUser().RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPersonUser_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes delegate entries matching the user id.
    /// </summary>
    /// <param name="sender">
    /// <c>DirPersonUser</c> table buffer.
    /// </param>
    /// <param name="e">
    /// The event args.
    /// </param>
    [DataEventHandler(tableStr(DirPersonUser), DataEventType::Deleted)]
    public static void DirPersonUser_onDeleted(Common _sender, DataEventArgs _e)
    {
        DirPersonUser dirPersonUser = _sender;
        TrvAppEmplSub trvAppEmplSub;

        // Delete the delegate records matching this user id
        delete_from trvAppEmplSub
            where trvAppEmplSub.DelegatedUser == dirPersonUser.User;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDelegatingWorkerValidForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the delegating worker is valid for user.
    /// </summary>
    /// <param name = "_delegatingWorker">Delegating worker record identifier.</param>
    /// <param name = "_user">Delegated user.</param>
    /// <returns>True, if the delegating worker is valid for user; otherwise false.</returns>
    public static boolean isDelegatingWorkerValidForUser(HcmWorkerRecId _delegatingWorker, UserId _user = curUserId())
    {
        TrvAppEmplSub trvAppEmplSub;

        //Check whether the current system date falls within the worker's delegate access date range
        select crossCompany trvAppEmplSub where
            trvAppEmplSub.DelegatingWorker == _delegatingWorker		&&
            trvAppEmplSub.DelegatedUser == _user &&
            trvAppEmplSub.FromDateUTC <= DateTimeUtil::utcNow() &&
            (trvAppEmplSub.ToDateUTC == utcDateTimeNull() ||
            trvAppEmplSub.ToDateUTC >= DateTimeUtil::utcNow());

        return (trvAppEmplSub.RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@SYS342245</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS101461</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>DelegatingWorker</TitleField1>
	<TitleField2>DelegatedUser</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TrvAppEmpIdx</ClusteredIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DelegatingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelegatedUser</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPNew</Name>
			<Label>@SYS110065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateUTC</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateUTC</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelegatedUser</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS2952</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToDateUTC</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateUTC</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelegatingWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DelegatedUser</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DelegatedUser</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WorkflowUser</ExtendedDataType>
			<Label>@SYS101461</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DelegatedWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Label>@SYS101461</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DelegatingWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TrvHcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateUTC</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDelegateDateTime</ExtendedDataType>
			<Label>@SYS110051</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateUTC</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvDelegateDateTime</ExtendedDataType>
			<Label>@SYS110049</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TrvAppEmpIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DelegatingWorker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DelegatedUser</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TrvDelegatedHcmWorker</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsTheDelegatee</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsTheDelegatee</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DelegatedWorker</Name>
					<Field>DelegatedWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TrvDelegatedUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsTheDelegatedUser</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsTheDelegatedUser</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DelegatedUser</Name>
					<SourceEDT>WorkflowUser</SourceEDT>
					<Field>DelegatedUser</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TrvDelegatingHcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsTheDelegator</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsTheDelegator</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DelegatingWorker</Name>
					<Field>DelegatingWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>