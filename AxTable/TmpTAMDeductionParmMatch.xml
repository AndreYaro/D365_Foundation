<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTAMDeductionParmMatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTAMDeductionParmMatch extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustTransOpen</c> record from the match parameter record.
    /// </summary>
    /// <returns>
    /// The found <c>CustTransOpen</c> record if exists; otherwise, an empty buffer.
    /// </returns>
    CustTransOpen custTransOpen()
    {
        CustTransOpen custTransOpen;
        custTransOpen = CustTransOpen::find(this.CustTransOpenRecId);
        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDeductionCustTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the current temporary table using information from a <c>TAMDeduction</c>
    /// record and a <c>CustTransOpen</c> record.
    /// </summary>
    /// <param name="_tamDeduction">
    /// The deduction.
    /// </param>
    /// <param name="_custTransOpen">
    /// The open customer transaction.
    /// </param>
    /// <returns>
    /// A <c>SpecTransManager</c> object initialized with connections between the
    /// deduction and the open transaction.
    /// </returns>
    SpecTransManager fillDeductionCustTransOpen(
        TAMDeduction  _tamDeduction,
        CustTransOpen _custTransOpen)
    {
        TmpTAMDeductionParmMatch tmpTAMDeductionParmMatch;
        RecordSortedList         recordSortedListCustTransOpen;
        SpecTransManager         specTransManager;

        recordSortedListCustTransOpen = new RecordSortedList(tableNum(CustTransOpen));
        recordSortedListCustTransOpen.sortOrder(fieldNum(CustTransOpen, RecId));
        recordSortedListCustTransOpen.ins(_custTransOpen);

        specTransManager =
            tmpTAMDeductionParmMatch.fillDeductionCustTransOpenList(_tamDeduction, recordSortedListCustTransOpen);
        this.setTmpData(tmpTAMDeductionParmMatch);
        return specTransManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDeductionCustTransOpenList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the current temporary table using information from a <c>TAMDeduction</c>
    /// record and a record sorted list of <c>CustTransOpen</c> records.
    /// </summary>
    /// <param name="_tamDeduction">
    /// The deduction.
    /// </param>
    /// <param name="_recordSortedListCustTransOpen">
    /// The record sorted list of open customer transaction.
    /// </param>
    /// <returns>
    /// A <c>SpecTransManager</c> object initialized with connections between the
    /// deduction and the open transaction or transactions.
    /// </returns>
    SpecTransManager fillDeductionCustTransOpenList(
        TAMDeduction     _tamDeduction,
        RecordSortedList _recordSortedListCustTransOpen)
    {
        CustTrans                custTrans;
        CustTransOpen            custTransOpen;
        TmpTAMDeductionParmMatch tmpTAMDeductionParmMatch;
        RecordSortedList         recordSortedListDeduction;
        TransDate                calcDiscDate;
        CustTransOpenData        custTransOpenData;
        AmountCur                transRemainAmount;
        boolean                  loop;
        SpecTransManager         specTransManager;

        recordSortedListDeduction = new RecordSortedList(tableNum(TAMDeduction));
        recordSortedListDeduction.sortOrder(fieldNum(TAMDeduction, RecId));
        recordSortedListDeduction.ins(_tamDeduction);

        specTransManager = SpecTransManager::newFromSpec(_tamDeduction);

        loop = _recordSortedListCustTransOpen.first(custTransOpen);
        while (loop)
        {
            select CurrencyCode from custTrans
                where custTrans.RecId == custTransOpen.RefRecId;

            custTransOpenData = CustVendTransOpenData::construct(custTransOpen);
            calcDiscDate      = custTransOpenData.calcDiscDate(num2date(date2num(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
            transRemainAmount = custTransOpenData.remainAmountCashDisc(calcDiscDate);

            if (specTransManager.exist(curext(), custTransOpen.TableId, custTransOpen.RecId))
            {
                // Remove any other marks that might have been made.
                specTransManager.deleteAll();
                throw error("@SYS29065");
            }
            specTransManager.insert(
                curext(),
                custTransOpen.TableId,
                custTransOpen.RecId,
                transRemainAmount,
                custTrans.CurrencyCode);

            loop = _recordSortedListCustTransOpen.next(custTransOpen);
        }

        tmpTAMDeductionParmMatch.fillDeductionSpecification(
            _tamDeduction,
            specTransManager);

        this.setTmpData(tmpTAMDeductionParmMatch);
        return specTransManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDeductionSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the current temporary table with match information given a <c>TAMDeduction</c>
    /// record and a specification object used to mark transactions.
    /// </summary>
    /// <param name="_tamDeduction">
    /// The deduction for which to create matches.
    /// </param>
    /// <param name="_specTransManager">
    /// The specification object detailing which transactions to mark against.
    /// </param>
    void fillDeductionSpecification(
        TAMDeduction     _tamDeduction,
        SpecTransManager _specTransManager)
    {
        CustTrans                custTrans;
        CustTransOpen            custTransOpen;
        TmpTAMDeductionParmMatch tmpTAMDeductionParmMatch;
        CustTransOpenData        custTransOpenData;
        QueryRun                 queryRun;
        QueryBuildDataSource     queryBuildDataSourceCustTransOpen;
        QueryBuildDataSource     queryBuildDataSourceCustTrans;
        AmountCur                transAmountCur;
        AmountCur                transAmountConverted;
        AmountCur                matchAmountCur;
        AmountCur                remainAmountCur;
        TransDate                calcDiscDate;
        SpecTrans                specTrans;

        if (! _specTransManager)
        {
            return;
        }

        remainAmountCur = _tamDeduction.RemainAmountCur;

        queryRun = SpecTrans::createQueryRunToRefTable(
            curext(),
            _tamDeduction.TableId,
            _tamDeduction.RecId,
            custTransOpen.TableId);

        queryBuildDataSourceCustTransOpen = queryRun.query().dataSourceTable(tableNum(CustTransOpen));
        queryBuildDataSourceCustTransOpen.addSortField(fieldNum(CustTransOpen, AmountCur), SortOrder::Descending);
        queryBuildDataSourceCustTrans = queryBuildDataSourceCustTransOpen.addDataSource(tableNum(CustTrans));
        queryBuildDataSourceCustTrans.addLink(
            fieldNum(CustTransOpen, RefRecId),
            fieldNum(CustTrans, RecId));

        while (queryRun.next())
        {
            custTransOpen = queryRun.get(tableNum(CustTransOpen));
            custTrans     = queryRun.get(tableNum(CustTrans));

            custTransOpenData = custTransOpen.transOpenData();

            calcDiscDate = custTransOpenData.calcDiscDate(num2date(date2num(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))));
            specTrans = _specTransManager.findByRef(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId);

            transAmountCur = custTransOpenData.remainAmountCashDisc(
                calcDiscDate,
                0,
                true,
                specTrans.Balance01,
                specTrans.CashDiscToTake);

            // Initialize match amount to remaining amount of transaction.
            transAmountConverted = CurrencyExchangeHelper::curAmount2CurAmount(transAmountCur, custTrans.CurrencyCode, _tamDeduction.CurrencyCode);

            // Amount on transaction negative, amount for match needs to be positive.
            matchAmountCur = abs(transAmountConverted);

            // If amount being matched for transactions is greater than amount left on deduction then
            // set match amount to be current amount remaining on deduction.
            if (matchAmountCur > remainAmountCur)
            {
                matchAmountCur = remainAmountCur;
            }
            remainAmountCur -= matchAmountCur;

            tmpTAMDeductionParmMatch.clear();
            tmpTAMDeductionParmMatch.DeductionId          = _tamDeduction.TAMDeductionID;
            tmpTAMDeductionParmMatch.CustTransOpenRecId   = custTransOpen.RecId;
            tmpTAMDeductionParmMatch.MatchAmountCur       = matchAmountCur;
            tmpTAMDeductionParmMatch.TransAmountCur       = transAmountCur;
            tmpTAMDeductionParmMatch.TransCurrencyCode    = custTrans.CurrencyCode;
            tmpTAMDeductionParmMatch.TransAmountConverted = transAmountConverted;
            tmpTAMDeductionParmMatch.insert();
        }

        this.setTmpData(tmpTAMDeductionParmMatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (abs(this.TransAmountConverted) < this.MatchAmountCur)
        {
            ret = checkFailed("@MCR27815");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeAgreements</ConfigurationKey>
	<Label>@MCR27625</Label>
	<TitleField1>DeductionId</TitleField1>
	<TitleField2>TransAmountCur</TitleField2>
	<ClusteredIndex>DeductionRefIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>DeductionRefIdx</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Match</Name>
			<Label>@SYS111790</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTransOpenRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransAmountConverted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransCurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTransOpenRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustTransOpenRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeductionId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TAMDeductionID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MatchAmountCur</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TAMDeductionAmountCur</ExtendedDataType>
			<Label>@MCR27595</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransAmountConverted</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@MCR28046</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransAmountCur</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS10170</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransCurrencyCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS62786</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DeductionRefIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>DeductionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustTransOpenRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransCurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>TransCurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTransOpenRecId</Name>
					<Field>CustTransOpenRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMDeduction</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TAMDeduction</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Deduction</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Deduction</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeductionId</Name>
					<SourceEDT>TAMDeductionID</SourceEDT>
					<Field>DeductionId</Field>
					<RelatedField>TAMDeductionID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DeductionIDIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>