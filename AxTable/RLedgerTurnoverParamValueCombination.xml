<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverParamValueCombination</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RLedgerTurnoverParamValueCombination extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RLedgerTurnoverParamValueCombination</c> table.
    /// </summary>
    /// <param name="_reportType">
    /// A value of the <c>RLedgerTurnoverSheetType</c> enumeration specifying the report type.
    /// </param>
    /// <param name="_hashKey">
    /// A hash value used as a key of the parameter value combination.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RLedgerTurnoverParamValueCombination</c> table; otherwise, an empty record.
    /// </returns>
    static public RLedgerTurnoverParamValueCombination find(RLedgerTurnoverSheetType _reportType,
                                                            HashKey                  _hashKey,
                                                            boolean                  _forupdate = false)
    {
        RLedgerTurnoverParamValueCombination paramValueCombibation;

        paramValueCombibation.selectForUpdate(_forupdate);

        select firstonly paramValueCombibation
            where paramValueCombibation.ReportType == _reportType
               && paramValueCombibation.Hash       == _hashKey;

        return paramValueCombibation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a record in the <c>RLedgerTurnoverParamValueCombination</c> table for a specific report type and parameter string.
    /// </summary>
    /// <param name="_reportType">
    /// A value of the <c>RLedgerTurnoverSheetType</c> enumeration specifying the report type.
    /// </param>
    /// <param name="_paramStr">
    /// A string containing the parameter value combination.
    /// </param>
    /// <returns>
    /// A container holding the record ID of the parameter combination and a flag indicating whether the combination was created or found.
    /// </returns>
    static container findOrCreate(RLedgerTurnoverSheetType _reportType, str _paramStr)
    {
        boolean                              newCombination;
        HashKey                              hashKey               = RLedgerTurnoverParamHashKey::getHash(_paramStr);
        RLedgerTurnoverParamValueCombination paramValueCombination = RLedgerTurnoverParamValueCombination::find(_reportType, hashKey);

        if (! paramValueCombination)
        {
            paramValueCombination.ReportType = _reportType;
            paramValueCombination.Hash       = hashKey;
            paramValueCombination.insert();
            newCombination = true;
        }

        return [paramValueCombination.RecId, newCombination];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RLedgerTurnoverParamValueCombination</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>RLedgerTurnoverParamValueCombination</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RLedgerTurnoverParamValueCombination</c> table; otherwise, an empty record.
    /// </returns>
    static public RLedgerTurnoverParamValueCombination findRecId(RefRecId _recId, boolean _forupdate = false)
    {
        RLedgerTurnoverParamValueCombination paramValueCombibation;

        paramValueCombibation.selectForUpdate(_forupdate);

        select firstonly paramValueCombibation
            where paramValueCombibation.RecId == _recId;

        return paramValueCombibation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHash</Name>
				<Source><![CDATA[
        private static HashKey getHash(str _paramStr)
    {
        HashKey                             hashKey;
        System.Security.Cryptography.MD5    md5;
        System.Text.Encoding                encoding;
        System.Byte[]                       hashBytes;
        InteropPermission                   permission = new InteropPermission(InteropKind::ClrInterop);

        permission.assert();

        md5         = System.Security.Cryptography.MD5::Create();
        encoding    = System.Text.Encoding::get_Default();
        hashBytes   = md5.ComputeHash(encoding.GetBytes(_paramStr));
        hashKey     = new System.Guid(hashBytes);

        CodeAccessPermission::revertAssert();

        return hashKey;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4081720</DeveloperDocumentation>
	<Label>@SYS4081766</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ReportType</TitleField1>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Hash</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hash</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>Hash</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HashKey</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReportType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RLedgerTurnoverSheetType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportTypeHashIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReportType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Hash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>