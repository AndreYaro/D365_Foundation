<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTmpMaxAmountValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MarkupTmpMaxAmountValidation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records based on the <c>PurchId</c> field and the <c>MarkupCode</c> field.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> field of the purchase order to which miscellaneous charges are assigned.
    /// </param>
    /// <param name="_markupCode">
    /// The <c>MarkupCode</c> field of the miscellaneous charges.
    /// </param>
    /// <param name="_markupTmpMaxAmountValidation">
    /// The <c>MarkupTmpMaxAmountValidation</c> buffer of the temporary table.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The temporary <c>MarkupTmpMaxAmountValidation</c> table buffer.
    /// </returns>
    private  MarkupTmpMaxAmountValidation getRecord(PurchId      _purchId,
                                        MarkupCode   _markupCode,
                                        MarkupTmpMaxAmountValidation _markupTmpMaxAmountValidation,
                                        boolean      _selectForUpdate = false)
    {
        select firstonly _markupTmpMaxAmountValidation
                where   _markupTmpMaxAmountValidation.PurchId == _purchId &&
                        _markupTmpMaxAmountValidation.MarkupCode == _markupCode;
        if (_selectForUpdate)
        {
            _markupTmpMaxAmountValidation.selectForUpdate(true);
        }

        return  _markupTmpMaxAmountValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalActiveInvoiceMiscChargesValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarize miscellaneous charges values of the active invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field of <c>VendInvoiceInfoTable</c> table to summarize and calculate miscellaneous charges.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> field of <c>VendInvoiceInfoTable</c> table to summarize and calculate miscellaneous charges.
    /// </param>
    /// <param name="_markupCode">
    /// The <c>MarkupCode</c> whose value is checked to see if it has exceeded the maximum amount limit; optional.
    /// </param>
    private void totalActiveInvoiceMiscChargesValues(ParmId _parmId, TradeLineRefId _tableRefId, MarkupCode _markupCode = '')
    {
        VendInvoiceInfoTable    activeVendInvoiceInfoTable;
        VendInvoiceInfoSubTable activeVendInvoiceInfoSubTable;
        VendInvoiceInfoLine     activeVendInvoiceInfoLine;
        MarkupTrans             markupTrans;
        MarkupTable             markupTable;
        PurchId                 purchId;

        activeVendInvoiceInfoTable = VendInvoiceInfoTable::find(_parmId,_tableRefId);
        purchId = activeVendInvoiceInfoTable.PurchId;

        if (activeVendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed)
        {
            while select sum(Value), MarkupCode,CurrencyCode from markupTrans group by MarkupCode,CurrencyCode
                where !markupTrans.IsDeleted
                exists join activeVendInvoiceInfoSubTable
                    where markupTrans.TransTableId   == activeVendInvoiceInfoSubTable.TableId
                        && markupTrans.TransRecId     == activeVendInvoiceInfoSubTable.RecId
                        && markupTrans.ModuleType     ==
                            MarkupModuleType::Vend
                        && markupTrans.MarkupCategory == MarkupCategory::Fixed
                        && (markupTrans.MarkupCode      == _markupCode || _markupCode == '')
                        && activeVendInvoiceInfoSubTable.ParmId     == _parmId
                        && activeVendInvoiceInfoSubTable.TableRefId == _tableRefId
                exists join markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode
                        && markupTable.ModuleType == markupTrans.ModuleType
            {
                this.writeSummary(markupTrans, purchId);
            }

            while select  sum(Value), MarkupCode,CurrencyCode from markupTrans group by MarkupCode,CurrencyCode
                where !markupTrans.IsDeleted
                exists join activeVendInvoiceInfoLine
                    where markupTrans.TransTableId   == activeVendInvoiceInfoLine.TableId
                        && markupTrans.TransRecId     == activeVendInvoiceInfoLine.RecId
                        && markupTrans.ModuleType     ==
                            MarkupModuleType::Vend
                        && markupTrans.MarkupCategory == MarkupCategory::Fixed
                        && (markupTrans.MarkupCode      == _markupCode || _markupCode == '')
                        && activeVendInvoiceInfoLine.ParmId == _parmId
                        && activeVendInvoiceInfoLine.TableRefId == _tableRefId
                exists join markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode
                        && markupTable.ModuleType == markupTrans.ModuleType
            {
                this.writeSummary(markupTrans, purchId);
            }

            while select sum(Value), MarkupCode,CurrencyCode from markupTrans group by MarkupCode,CurrencyCode
                where !markupTrans.IsDeleted
                join activeVendInvoiceInfoTable
                    where markupTrans.TransTableId        == activeVendInvoiceInfoTable.TableId
                        && markupTrans.TransRecId          == activeVendInvoiceInfoTable.RecId
                        && markupTrans.ModuleType          ==
                            MarkupModuleType::Vend
                        && markupTrans.MarkupCategory      == MarkupCategory::Fixed
                        && (markupTrans.MarkupCode      == _markupCode || _markupCode == '')
                        && activeVendInvoiceInfoTable.ParmId     == _parmId
                        && activeVendInvoiceInfoTable.TableRefId == _tableRefId
                exists join markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode
                        && markupTable.ModuleType == markupTrans.ModuleType
            {
                this.writeSummary(markupTrans, purchId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInvoiceMiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes miscellaneous charges of the invoice transaction when posting occurs.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> field of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_markupCode">
    /// The <c>MarkupCode</c> whose value is checked to see if it has exceeded the maximum amount limit; optional.
    /// </param>
    public void totalInvoiceMiscAmount(ParmId            _parmId,
                                       TradeLineRefId    _tableRefId,
                                       MarkupCode        _markupCode = '')
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        MarkupTrans             markupTrans;

        while select OrigPurchId from vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == _parmId
                && vendInvoiceInfoSubTable.TableRefId == _tableRefId
            exists join vendInvoiceInfoTable
                where vendInvoiceInfoSubTable.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoSubTable.TableRefId == vendInvoiceInfoTable.TableRefId
            exists join markupTrans
                where vendInvoiceInfoSubTable.TableId == markupTrans.TransTableId
                    && vendInvoiceInfoSubTable.RecId == markupTrans.TransRecId
                    && (markupTrans.MarkupCode == _markupCode || _markupCode == '')
        {
            if (vendInvoiceInfoSubTable.OrigPurchId)
            {
                this.totalPostedlInvoicesMiscChargesValues(vendInvoiceInfoSubTable.OrigPurchId, _markupCode);
                this.totalSavedInvoicesMiscChargesValues(vendInvoiceInfoSubTable.OrigPurchId, _parmId, _tableRefId, _markupCode);
            }
        }

        this.totalActiveInvoiceMiscChargesValues(_parmId, _tableRefId, _markupCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPostedlInvoicesMiscChargesValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes miscellaneous charges for the posted invoice transactions.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> field of the <c>VendInvoiceJour</c> table.
    /// </param>
    /// <param name="_markupCode">
    /// The <c>MarkupCode</c> whose value is checked to see if it has exceeded the maximum amount limit; optional.
    /// </param>
    private void totalPostedlInvoicesMiscChargesValues(PurchId _purchId, MarkupCode _markupCode = '')
    {
        VendInvoiceJour     vendInvoiceJour;
        VendInvoiceTrans    vendInvoiceTrans;
        MarkupTrans         markupTrans;
        MarkupTable         markupTable;

        while select sum(Value), MarkupCode, CurrencyCode from markupTrans
            group by MarkupCode, CurrencyCode
            join TableId from vendInvoiceJour
                    where       markupTrans.TransTableId    == tablenum(VendInvoiceJour)    &&
                                markupTrans.TransRecId      == vendInvoiceJour.RecId        &&
                                markupTrans.ModuleType      ==
                                    MarkupModuleType::Vend &&
                                markupTrans.MarkupCategory  == MarkupCategory::Fixed        &&
                                markupTrans.Keep            == NoYes::No                    &&
                                (markupTrans.MarkupCode      == _markupCode || _markupCode == '') &&
                                vendInvoiceJour.PurchId     == _purchId
            exists join markupTable
                    where       markupTable.MarkupCode      == markupTrans.MarkupCode       &&
                                markupTable.ModuleType      == markupTrans.ModuleType
        {
            this.writeSummary(markupTrans, _purchId);
        }

        while select sum(Value), MarkupCode, CurrencyCode  from markupTrans
            group by MarkupCode, CurrencyCode
            join TableId from vendInvoiceTrans
                    where       markupTrans.TransTableId    == tablenum(VendInvoiceTrans)   &&
                                markupTrans.TransRecId      == vendInvoiceTrans.RecId       &&
                                markupTrans.ModuleType      ==
                                    MarkupModuleType::Vend &&
                                markupTrans.MarkupCategory  == MarkupCategory::Fixed        &&
                                markupTrans.Keep            == NoYes::No                    &&
                                (markupTrans.MarkupCode      == _markupCode || _markupCode == '') &&
                                vendInvoiceTrans.PurchID    ==_purchId
            exists join vendInvoiceJour
                    where       vendInvoiceJour.InvoiceId   == vendInvoiceTrans.InvoiceId   &&
                                vendInvoiceJour.PurchId     == vendInvoiceTrans.PurchID
            exists join markupTable
                    where       markupTable.MarkupCode      == markupTrans.MarkupCode       &&
                                markupTable.ModuleType      == markupTrans.ModuleType
        {
            this.writeSummary(markupTrans, _purchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalSavedInvoicesMiscChargesValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the miscellaneous charges for the saved invoice transactions.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> field of <c>VendInvoiceInfoTable</c> table to summarize the miscellaneous charges of the saved invoices.
    /// </param>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field of <c>VendInvoiceInfoTable</c> the table.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> field of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_markupCode">
    /// The <c>MarkupCode</c> whose value is checked to see if it has exceeded the maximum amount limit; optional.
    /// </param>
    private void totalSavedInvoicesMiscChargesValues(PurchId _purchId, ParmId _parmId, TradeLineRefId _tableRefId, MarkupCode _markupCode = '')
    {
        VendInvoiceInfoSubTable         savedVendInvoiceInfoSubTable;
        VendInvoiceInfoLine             savedVendInvoiceInfoLine;
        VendInvoiceInfoTable            savedVendInvoiceInfoTable;
        MarkupTrans                     markupTrans;
        MarkupTable                     markupTable;

            while select sum(Value), MarkupCode, CurrencyCode
                from markupTrans group by MarkupCode, CurrencyCode
                join TableId from savedVendInvoiceInfoSubTable
                    where   markupTrans.TransTableId            == tablenum(VendInvoiceInfoSubTable)    &&
                            markupTrans.TransRecId              == savedVendInvoiceInfoSubTable.RecId   &&
                            markupTrans.ModuleType              ==
                                MarkupModuleType::Vend &&
                            markupTrans.MarkupCategory          == MarkupCategory::Fixed                &&
                            markupTrans.Keep                    == NoYes::No                            &&
                            (markupTrans.MarkupCode == _markupCode || _markupCode == '')           &&
                            savedVendInvoiceInfoSubTable.ParmId == ''
                    exists join savedVendInvoiceInfoTable
                    where   savedVendInvoiceInfoTable.PurchId        == savedVendInvoiceInfoSubTable.OrigPurchId  &&
                            savedVendInvoiceInfoTable.PurchId        == _purchId &&
                            savedVendInvoiceInfoTable.PurchId        != '' &&
                            savedVendInvoiceInfoTable.ParmId         == ''
                    exists join markupTable
                    where       markupTable.MarkupCode == markupTrans.MarkupCode                        &&
                                markupTable.ModuleType == markupTrans.ModuleType
            {
                this.writeSummary(markupTrans,_purchId);
            }

            while select  sum(Value), MarkupCode, CurrencyCode
                from markupTrans group by MarkupCode, CurrencyCode
                join  TableId from savedVendInvoiceInfoLine
                    where   markupTrans.TransTableId            == tablenum(VendInvoiceInfoLine)    &&
                            markupTrans.TransRecId              == savedVendInvoiceInfoLine.RecId   &&
                            markupTrans.MarkupCategory          == MarkupCategory::Fixed            &&
                            markupTrans.Keep                    == NoYes::No                        &&
                            markupTrans.ModuleType              ==
                                MarkupModuleType::Vend &&
                            (markupTrans.MarkupCode      == _markupCode || _markupCode == '')       &&
                            savedVendInvoiceInfoLine.ParmId     == ''
                exists join savedVendInvoiceInfoSubTable
                    where   savedVendInvoiceInfoSubTable.OrigPurchId == savedVendInvoiceInfoLine.OrigPurchId  &&
                            savedVendInvoiceInfoSubTable.TableRefId  == savedVendInvoiceInfoLine.TableRefId   &&
                            savedVendInvoiceInfoSubTable.OrigPurchId == _purchId &&
                            savedVendInvoiceInfoSubTable.OrigPurchId != '' &&
                            savedVendInvoiceInfoSubTable.ParmId      == ''
                exists join markupTable
                    where   markupTable.MarkupCode              == markupTrans.MarkupCode           &&
                            markupTable.ModuleType              == markupTrans.ModuleType
            {
                this.writeSummary(markupTrans,_purchId);
            }

            while select  sum(Value), MarkupCode, CurrencyCode
                 from markupTrans group by MarkupCode, CurrencyCode
                  join TableId from savedVendInvoiceInfoTable
                    where   markupTrans.TransTableId            == tablenum(VendInvoiceInfoTable)       &&
                            markupTrans.TransRecId              == savedVendInvoiceInfoTable.RecId      &&
                            markupTrans.ModuleType              ==
                                MarkupModuleType::Vend &&
                            markupTrans.MarkupCategory          == MarkupCategory::Fixed                &&
                            markupTrans.Keep                    == NoYes::No                            &&
                            (markupTrans.MarkupCode      == _markupCode || _markupCode == '')           &&
                            savedVendInvoiceInfoTable.PurchId        == _purchId                        &&
                            savedVendInvoiceInfoTable.PurchId        != ''                              &&
                            savedVendInvoiceInfoTable.ParmId    == ''
                  exists join markupTable
                    where   markupTable.MarkupCode              == markupTrans.MarkupCode               &&
                            markupTable.ModuleType              == markupTrans.ModuleType
            {
               this.writeSummary(markupTrans,_purchId);
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceMaxMiscChargesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarize and validates the misc charges for the posted invoice transactions.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field of <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> field of the <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_markupTmpMaxAmountValidation">
    /// The <c>MarkupTmpMaxAmountValidation</c> buffer of the temporary table.
    /// </param>
    /// <param name="_markupCode">
    /// The <c>MarkupCode</c> whose value is checked to see if it has exceeded the maximum amount limit; optional.
    /// </param>
    /// <param name="_ispolicyViolation">
    /// The value is checked to see if it is call for policy violation or not.
    /// </param>
    /// <returns>
    /// true if miscellaneous charges of the <c>VendInvoiceInfoTable</c> table has not crossed the maximum amount limit; otherwise,
    /// false.
    /// </returns>

    public boolean validateInvoiceMaxMiscChargesValue(ParmId _parmId,
                                                             TradeLineRefId _tableRefId,
                                                             MarkupTmpMaxAmountValidation _markupTmpMaxAmountValidation,
                                                             MarkupCode _markupCode = '',
                                                             boolean _ispolicyViolation = false)
    {
        boolean  ret = true;

        if (!Ledger::accountingCurrency(CompanyInfo::current()))
        {
            throw error("@SYS26296");
        }
        delete_from _markupTmpMaxAmountValidation;

        this.totalInvoiceMiscAmount(_parmId, _tableRefId, _markupCode);

        while select _markupTmpMaxAmountValidation
        {
            if (this.TotalMiscChargesValue > MarkupTable::find(
                                                MarkupModuleType::Vend
                                                , this.MarkupCode).MaxAmount)
            {
                if (VendParameters::find().PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::AllowWithWarning)
                {
                    if (_ispolicyViolation)
                    {
                        ret = false;
                    }
                    else
                    {
                        warning(strfmt("@SYS134347", this.MarkupCode, VendInvoiceInfoTable::find(_parmId, _tableRefId).Num));
                    }
                }
                else
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the <c>MarkupTmpMaxAmountValidation</c> records based on the <c>Purchid</c> field, the
    /// <c>MarkupCode</c> field, and the <c>CurrencyCode</c> field.
    /// </summary>
    /// <param name="_markupTrans">
    /// The <c>MarkupTrans</c> record.
    /// </param>
    /// <param name="_purchId">
    /// The <c>PurchId</c> field of the purchase order.
    /// </param>

    private void writeSummary(MarkupTrans _markupTrans, PurchId _purchId)
    {
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::construct();

        if (_markupTrans.CurrencyCode != Ledger::accountingCurrency(CompanyInfo::current()))
        {
            currencyExchangeHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
            _markupTrans.Value = currencyExchangeHelper.calculateTransactionToAccounting(_markupTrans.CurrencyCode, _markupTrans.Value, true);
        }

        if (this.getRecord(_purchId,_markupTrans.MarkupCode,this,true))
        {
            ttsbegin;
            this.TotalMiscChargesValue = this.TotalMiscChargesValue + _markupTrans.Value;
            this.update();
            ttscommit;
        }
        else
        {
            ttsbegin;
            this.PurchId = _purchId;
            this.MarkupCode = _markupTrans.MarkupCode;
            this.TotalMiscChargesValue = _markupTrans.Value;
            this.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS134918</DeveloperDocumentation>
	<Label>@SYS134917</Label>
	<TitleField1>PurchId</TitleField1>
	<TitleField2>MarkupCode</TitleField2>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalMiscChargesValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupCode</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MarkupCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalMiscChargesValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Markup</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS134343</Label>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MarkupPurchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MarkupCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>MarkupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MarkupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>ModuleType_Extern</Name>
					<RelatedField>ModuleType</RelatedField>
					<ValueStr>MarkupModuleType::Delivery</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupCode</Name>
					<Field>MarkupCode</Field>
					<RelatedField>MarkupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>