<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjAdvancedJournal extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.ProjAdvancedJournalId)
        {
            this.ProjAdvancedJournalId = this.getNewProjAdvancedJournalId();
        }

        this.SourceDocumentHeader = 0;
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the project advanced journal is posted.
    /// </summary>
    /// <returns>
    ///     true if the project advanced journal is posted; otherwise, false.
    /// </returns>
    public boolean isPosted()
    {
        return this.Status == ProjAdvancedJournalStatus::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>draftJournalExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there exists any journal in draft stage.
    /// </summary>
    /// <returns>Returns true if a draft journal exists; otherwise, false.</returns>
    public static boolean draftJournalExists()
    {
        ProjAdvancedJournal journal;

        select firstonly RecId from journal
            where journal.Status == ProjAdvancedJournalStatus::Draft;

        return journal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllNeverNoLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether all of the project advanced journal's lines are not posted to the general ledger.
    /// </summary>
    /// <returns>
    ///     true if all the project advanced journal's lines are not be posted to the general ledger; otherwise, false.
    /// </returns>
    public boolean isAllNeverNoLedger()
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;
        ProjAdvancedJournalLine nonHourJournalLine;
        boolean ret = true;
        
        select firstonly RecId from nonHourJournalLine
            where nonHourJournalLine.ProjAdvancedJournal == this.RecId
                && nonHourJournalLine.TransType != ProjTransType::Hour;

        // If any non-hour line is found then that line would have posted already and so we need to return false.
        ret = nonHourJournalLine.RecId == 0;
        
        if (ret && !ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            // If no other kind of line exists in this journal, then check all hour lines and see if any one of them had emplLedgerStatus as Balance or PnL.
            // If any of the hour lines has Balance or PnL that means posting for that line would have already happened and hence return false.
            ProjTable projTable;
            ProjGroup projGroup;

            select firstonly crosscompany RecId from projAdvancedJournalLine
                    where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                        exists join RecId from projTable
                            where projTable.ProjId == projAdvancedJournalLine.ProjId
                                && projTable.DataAreaId == projAdvancedJournalLine.ProjDataAreaId
                        exists join RecId from  projGroup
                            where projTable.ProjGroupId == projGroup.ProjGroupId
                                && (projGroup.EmplTransCost == ProjLedgerStatus::BalanceSheet
                                    || projGroup.EmplTransCost == ProjLedgerStatus::Operations);
    
            ret = projAdvancedJournalLine.RecId == 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewProjAdvancedJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a new value for the <c>ProjAdvancedJournalId</c> field from the number sequence framework
    /// </summary>
    private ProjAdvancedJournalId getNewProjAdvancedJournalId()
    {
        ProjAdvancedJournalId projAdvancedJournalId;

        NumberSequenceReference numberSequenceReference = ProjParameters::numRefProjAdvancedJournalId();
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceReference && numberSequenceTable)
        {
            if (!numberSequenceTable.Manual)
            {
                NumberSeq numberSeq = NumberSeq::newGetNumFromId(numberSequenceTable.RecId, true, true, null, false);

                if (numberSeq)
                {
                    projAdvancedJournalId = numberSeq.num();
                }
            }
        }

        return projAdvancedJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    public enumName parmSourceDocHeaderTypeEnumName()
    {
        return enumId2Name(enumNum(SourceDocument_ProjAdvancedJournal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the source document header record associated with this record.
    /// </summary>
    /// <returns>
    ///     A <c>SourceDocumentHeader</c> buffer.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the accounting status of the source document header corresponding to this record.
    /// </summary>
    /// <returns>
    ///     The source document header accounting status.
    /// </returns>
    display SourceDocumentAccountingStatus sourceDocumentStatus()
    {
        SourceDocumentHeader sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        return sourceDocumentHeader.AccountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the number of lines that are associated with this project advanced journal.
    /// </summary>
    /// <returns>
    ///     The number of lines that are associated with this project advanced journal.
    /// </returns>
    public JournalNumOfLines numOfLines()
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select count(RecId) from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId;

        return any2int(projAdvancedJournalLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfLinesByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the number of lines associated with this project advanced journal filtered by type.
    /// </summary>
    /// <param name="_projTransType">
    ///     Project transaction type used for filter.
    /// </param>
    /// <returns>
    ///     The number of lines associated with this project advanced journal
    ///     filtered by the project transaction type specified.
    /// </returns>
    public JournalNumOfLines numberOfLinesByType(ProjTransType _projTransType)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select count(RecId) from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                && projAdvancedJournalLine.TransType == _projTransType;

        return int642int(projAdvancedJournalLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityTotalByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the total quantity lines associated with this project advanced journal filtered by type.
    /// </summary>
    /// <param name="_projTransType">
    ///     Project transaction type used for filter.
    /// </param>
    /// <returns>
    ///     The total quantity for lines associated with this project advanced journal
    ///     filtered by the project transaction type specified.
    /// </returns>
    public ProjQtyEmpl quantityTotalByType(ProjTransType _projTransType)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select sum(Quantity) from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                && projAdvancedJournalLine.TransType == _projTransType;

        return projAdvancedJournalLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costTotalByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the total cost for lines associated with this Project advanced journal filtered by type.
    /// </summary>
    /// <param name="_projTransType">
    ///     Project transaction type used for filter.
    /// </param>
    /// <returns>
    ///     The total cost for lines associated with this project advanced journal
    ///     filtered by the project transaction type specified.
    /// </returns>
    public ProjQtyEmpl costTotalByType(ProjTransType _projTransType)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;
        ProjQtyEmpl total = 0;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        while select ExtendedCost, CostCurrency, AccountingDate from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                && projAdvancedJournalLine.TransType == _projTransType
        {
            if (projAdvancedJournalLine.CostCurrency != accountingCurrency)
            {
                CurrencyExchangeHelper currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::current(),
                    projAdvancedJournalLine.AccountingDate);
                total += currencyExchHelper.calculateTransactionToAccounting(projAdvancedJournalLine.CostCurrency, projAdvancedJournalLine.ExtendedCost, true);
            }
            else
            {
                total += CurrencyExchange::roundWithRuleTypeCurrencyTable(projAdvancedJournalLine.ExtendedCost, Currency::find(accountingCurrency), CurrencyRoundingRuleType::Amount);
            }
        }

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTotalByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the total sales for lines associated with this Project advanced journal filtered by type.
    /// </summary>
    /// <param name="_projTransType">
    ///     Project transaction type used for filter.
    /// </param>
    /// <returns>
    ///     The total sales for lines associated with this project advanced journal
    ///     filtered by the project transaction type specified.
    /// </returns>
    public ProjQtyEmpl salesTotalByType(ProjTransType _projTransType)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;
        ProjQtyEmpl total = 0;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        while select ExtendedPrice, PriceCurrency, AccountingDate from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                && projAdvancedJournalLine.TransType == _projTransType
        {
            if (projAdvancedJournalLine.PriceCurrency != accountingCurrency)
            {
                CurrencyExchangeHelper currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::current(),
                    projAdvancedJournalLine.AccountingDate);
                total += currencyExchHelper.calculateTransactionToAccounting(projAdvancedJournalLine.PriceCurrency, projAdvancedJournalLine.ExtendedPrice, true);
            }
            else
            {
                total += CurrencyExchange::roundWithRuleTypeCurrencyTable(projAdvancedJournalLine.ExtendedPrice, Currency::find(accountingCurrency), CurrencyRoundingRuleType::Amount);
            }
        }

        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a <c>ProjAdvancedJournal</c> record by <c>SourceDocument</c>.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    ///     A <c>SourceDocument</c> record id.
    /// </param>
    /// <returns>
    ///     A <c>ProjAdvancedJournal</c> record.
    /// </returns>
    public static ProjAdvancedJournal findBySourceDocumentHeader(SourceDocumentHeaderRecId _sourceDocumentHeader)
    {
        ProjAdvancedJournal projAdvancedJournal;

        select firstOnly projAdvancedJournal
            where projAdvancedJournal.SourceDocumentHeader == _sourceDocumentHeader;

        return projAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjAdvancedJournal</c> table.
    /// </summary>
    /// <param name="_projAdvancedJournal">
    /// A <c>ProjAdvancedJournal</c> record ID.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjAdvancedJournal</c> table.
    /// </returns>
    public static ProjAdvancedJournal find(
        ProjAdvancedJournalRecId    _projAdvancedJournal,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        return ProjAdvancedJournal::findV2(_projAdvancedJournal, _forupdate, _concurrencyModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjAdvancedJournal</c> and ignores data from cache.
    /// </summary>
    /// <param name="_projAdvancedJournal">
    /// A <c>ProjAdvancedJournal</c> record ID.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjAdvancedJournal</c> table.
    /// </returns>
    public static ProjAdvancedJournal findNoCache(
        ProjAdvancedJournalRecId    _projAdvancedJournal,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        const boolean CacheDisabled = true;
        return ProjAdvancedJournal::findV2(_projAdvancedJournal, _forupdate, _concurrencyModel, CacheDisabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findV2</Name>
				<Source><![CDATA[
private static ProjAdvancedJournal findV2(
        ProjAdvancedJournalRecId _projAdvancedJournal,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto,
        boolean _cacheDisabled = false)
    {
        ProjAdvancedJournal projAdvancedJournal;
        projAdvancedJournal.disableCache(_cacheDisabled);

        projAdvancedJournal.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projAdvancedJournal.concurrencyModel(_concurrencyModel);
        }

        select firstonly projAdvancedJournal
            where projAdvancedJournal.RecId == _projAdvancedJournal;

        return projAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        if (ret)
        {
            if (this.isPosted())
            {
                // Cannot delete a journal that has been posted
                ret = ret && checkFailed(strFmt("@Proj:JournalCannotBeDeletedAlreadyPosted", this.ProjAdvancedJournalId));
            }

            boolean isProjAdvancedJournalPostingEnhancementEnabled = FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance());

            if (ret
                && isProjAdvancedJournalPostingEnhancementEnabled
                && this.Status != ProjAdvancedJournalStatus::Draft)
            {
                ret = ret && checkFailed(strFmt("@Proj:DeleteIntegrationJournalWarning", this.ProjAdvancedJournalId));
            }

            if (ret
                && isProjAdvancedJournalPostingEnhancementEnabled
                && this.hasJournalLines()
                && !this.checkIfAllJournalLineHasSameStatus(ProjAdvancedJournalLineStatus::Draft))
            {
                ret = ret && checkFailed(strFmt("@Proj:DeleteIntegrationJournalWarning2", this.ProjAdvancedJournalId));
            }
                
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret)
        {
            if (this.isPosted())
            {
                // Cannot edit a journal that has already been posted
                ret = ret && checkFailed(strFmt("@Proj:JournalCannotBeEditedAlreadyPosted", this.ProjAdvancedJournalId));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateErrorProjAdvancedJournal</Name>
				<Source><![CDATA[
    public ProjAdvancedJournal findOrCreateErrorProjAdvancedJournal()
    {
        boolean enhancedPostingFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance());
        ProjAdvancedJournal errorProjAdvancedJournal;

        if (enhancedPostingFeatureEnabled)
        {
            // This ensures a 1:1 relationship between the original journal and the transfer journal
            select firstonly errorProjAdvancedJournal
                where errorProjAdvancedJournal.OriginalProjAdancedJournalId == this.ProjAdvancedJournalId;
        }
        else
        {
            select firstonly errorProjAdvancedJournal
                where errorProjAdvancedJournal.status == ProjAdvancedJournalStatus::Draft &&
                  errorProjAdvancedJournal.OriginalProjAdancedJournalId == this.ProjAdvancedJournalId;
        }

        if (errorProjAdvancedJournal.RecId)
        {
            return errorProjAdvancedJournal;
        }
        else
        {
            // Create journal header
            if (enhancedPostingFeatureEnabled)
            {
                errorProjAdvancedJournal.Status = ProjAdvancedJournalStatus::Error;
            }
            else
            {
                errorProjAdvancedJournal.Status = ProjAdvancedJournalStatus::Draft;
            }
            errorProjAdvancedJournal.Description = this.Description;
            errorProjAdvancedJournal.OriginalProjAdancedJournalId = this.ProjAdvancedJournalId;
            errorProjAdvancedJournal.PeriodStartDate = this.PeriodStartDate;

            ttsbegin;
            errorProjAdvancedJournal.insert();
            ttscommit;

            return errorProjAdvancedJournal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfErrorLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the number of lines with errors that are associated with this project advanced journal. (Unrecoverable are also considered Error lines)
    /// </summary>
    /// <returns>
    ///     The number of lines that are associated with this project advanced journal.
    /// </returns>
    public JournalNumOfLines numOfErrorLines()
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select count(RecId) from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                && (projAdvancedJournalLine.PostError == NoYes::Yes
                    || projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::Error
                    || projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::Unrecoverable
                    || projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::ActualsMissing);

        return any2int(projAdvancedJournalLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxWithholdForDocumentHeader_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>TaxWithholdUncommitted_IN</c> records through document header.
    /// </summary>
    public void deleteTaxWithholdForDocumentHeader_IN()
    {
        if (FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance())
            && TaxWithholdParameters_IN::checkTaxParameters())
        {
            TaxWithholdUncommitted_IN::deleteForDocumentHeader(tableNum(ProjAdvancedJournal), this.RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.deleteTaxWithholdForDocumentHeader_IN();   
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates Journal Status if the initial status condition match.
    /// </summary>
    /// <param name="_expectedStatusBeforeUpdate">The status <c>ProjAdvancedJournalStatus</c> before update.</param>
    /// <param name="_expectedStatusAfterUpdate">The status <c>ProjAdvancedJournalStatus</c> after update.</param>
    public void updateJournalStatus(ProjAdvancedJournalStatus _expectedStatusBeforeUpdate, ProjAdvancedJournalStatus _expectedStatusAfterUpdate)
    {
        ttsbegin;
        if (this.Status == _expectedStatusBeforeUpdate)
        {
            this.selectForUpdate(true);
            this.Status = _expectedStatusAfterUpdate;
            this.doUpdate();
        }
        else
        {
            throw error(strFmt("@Proj:JournalStatusUpdateFailed",
                this.ProjAdvancedJournalId, this.DataAreaId, _expectedStatusBeforeUpdate, _expectedStatusAfterUpdate, this.Status));
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAllJournalLineHasSameStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all lines associated with journal has same status.
    /// </summary>
    /// <param name="_status">The expected status <c>ProjAdvancedJournalLineStatus</c>.</param>
    /// <returns>true, if all the lines on the journal have the same status; otherwise, false.</returns>
    public boolean checkIfAllJournalLineHasSameStatus(ProjAdvancedJournalLineStatus _status)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select firstonly RecId from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId 
                && projAdvancedJournalLine.Status != _status;

        return projAdvancedJournalLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournalLineStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status of all lines associated with the journal and satisfying the criteria on current status.
    /// </summary>
    /// <param name = "_projAdvancedJournal">The journal <c>ProjAdvancedJournal</c> buffer.</param>
    /// <param name = "_expectedStatus">Status<c>ProjAdvancedJournalLineStatus</c> of line before update.</param>
    /// <param name = "_updatedStatus">Status<c>ProjAdvancedJournalLineStatus</c> of line after update.</param>
    public static void processJournalLineStatusUpdate(ProjAdvancedJournal _projAdvancedJournal, ProjAdvancedJournalLineStatus _expectedStatus, ProjAdvancedJournalLineStatus _updatedStatus)
    {
        ttsbegin;

        if (_projAdvancedJournal)
        {
            ProjAdvancedJournalLine projAdvancedJournalLine;

            // Skip event listeners and update method call on projAdvancedJournalLine as following update on status doesn't affect any other field.
            // Caution should be observed if update method undergoes a change in future.
            projAdvancedJournalLine.skipDatabaseLog(true);
            projAdvancedJournalLine.skipEvents(true);
            projAdvancedJournalLine.skipDataMethods(true);

            update_recordset projAdvancedJournalLine
                setting Status = _updatedStatus
            where projAdvancedJournalLine.Status == _expectedStatus
                && projAdvancedJournalLine.ProjAdvancedJournal == _projAdvancedJournal.RecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markJournalLineForTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates PostError field on all lines in journal satisfying criteria on status.
    /// </summary>
    /// <param name = "_projAdvancedJournal">The journal <c>ProjAdvancedJournal</c> buffer.</param>
    /// <param name = "_Status">The status on journal line</param>
    public static void markJournalLineForTransfer(ProjAdvancedJournal _projAdvancedJournal, ProjAdvancedJournalLineStatus _Status)
    {
        ttsbegin;

        if (_projAdvancedJournal)
        {
            ProjAdvancedJournalLine projAdvancedJournalLine;

            // Skip event listeners and update method call on projAdvancedJournalLine as following update on status doesn't affect any other field.
            // Caution should be observed if update method undergoes a change in future.
            projAdvancedJournalLine.skipDatabaseLog(true);
            projAdvancedJournalLine.skipEvents(true);
            projAdvancedJournalLine.skipDataMethods(true);

            update_recordset projAdvancedJournalLine
                setting PostError = NoYes::Yes
            where projAdvancedJournalLine.Status == _status
                && projAdvancedJournalLine.ProjAdvancedJournal == _projAdvancedJournal.RecId
                && projAdvancedJournalLine.PostError == NoYes::No;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markLinesAsDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks any line for this journal with the status of Error as Draft
    /// </summary>
    public void markLinesAsDraft()
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(tableStr(ProjAdvancedJournal));
        using (var activityContext = logger.integrationJournalActivity().moveJournalInfoToDraft())
        {
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, int642Str(this.RecId));

            ProjAdvancedJournalLine projAdvancedJournalLine;
        
            update_recordset projAdvancedJournalLine
                setting Status = ProjAdvancedJournalLineStatus::Draft, PostError = NoYes::No
                where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                    && (projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::Error
                        || projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::Processing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if this journal has any journal line.
    /// </summary>
    /// <returns>ture if this journal has at least 1 journal line; otherwise, false.</returns>
    public boolean hasJournalLines()
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select firstonly RecId from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId;
                
        return projAdvancedJournalLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countLinesByStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines with the provided <c>ProjAdvancedJournalLineStatus</c> for this journal.
    /// </summary>
    /// <param name = "_status">The <c>ProjAdvancedJournalLineStatus</c> to lookup on.</param>
    /// <returns>The number of lines with the given status.</returns>
    public int countLinesByStatus(ProjAdvancedJournalLineStatus _status)
    {
        ProjAdvancedJournalLine projAdvancedJournalLine;

        select count(RecId) from projAdvancedJournalLine
            where projAdvancedJournalLine.ProjAdvancedJournal == this.RecId
                && projAdvancedJournalLine.Status == _status;

        return any2Int(projAdvancedJournalLine.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<FormRef>ProjAdvancedJournal</FormRef>
	<Label>@Proj:ProjectAdvancedJournal</Label>
	<SingularLabel>@Proj:ProjectAdvancedJournal</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ProjAdvancedJournalId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>ProjAdvancedJournalIdx</PrimaryIndex>
	<ReplacementKey>ProjAdvancedJournalIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjAdvancedJournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjAdvancedJournal</Name>
			<Label>@SPS1211</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjAdvancedJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SPS1232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SPS1234</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SPS1236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>History</Name>
			<Label>@SYS10575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostedUserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjAdvancedJournalId</Name>
			<ExtendedDataType>ProjAdvancedJournalId</ExtendedDataType>
			<Label>@SYS17795</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<ExtendedDataType>SourceDocumentHeaderRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>ProjAdvancedJournalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PostedDateTime</Name>
			<ExtendedDataType>JournalPostedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostedUserId</Name>
			<ExtendedDataType>JournalPostedUserId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalProjAdancedJournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ProjOriginalAdancedJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodStartDate</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
			<Label>@Proj:AdvancedJournalPeriodStartDate</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjAdvancedJournalIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjAdvancedJournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjAdvancedJournalTransferIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>OriginalProjAdancedJournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjAdvancedJournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreationSearchFromActualsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PeriodStartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OriginalProjAdancedJournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjAdvancedJournalId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>IsAccountingDistributionFor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsAccountingDistributedBy</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>