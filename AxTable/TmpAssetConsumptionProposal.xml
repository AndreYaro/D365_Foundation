<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpAssetConsumptionProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpAssetConsumptionProposal extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    private void calcConsumption()
    {
        if (this.AssetId && this.BookId && this.TransDate)
        {
            this.Qty = TmpAssetConsumptionProposal::calculateConsumption(this.AssetId, this.BookId, this.TransDate);
        }
        else
        {
            this.Qty = 0;
        }

        this.calculateDepreciationAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumptionUnitId</Name>
				<Source><![CDATA[
    public display AssetConsumptionUnitId consumptionUnitId()
    {
        DictTable   dictTable;

        dictTable = new DictTable(tableNum(AssetBook));
        if (dictTable.rights() >= AccessType::View)
        {
            return AssetBook::find(this.AssetId, this.BookId).ConsumptionUnitId;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAmountUnit</Name>
				<Source><![CDATA[
    public display AssetDepreciationAmountUnit depreciationAmountUnit()
    {
        DictTable   dictTable;

        dictTable = new DictTable(tableNum(AssetBook));
        if (dictTable.rights() >= AccessType::View)
        {
            return AssetBook::find(this.AssetId, this.BookId).DepreciationAmountUnit;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationAmountUnitReportingCurrency</Name>
				<Source><![CDATA[
    public display AssetDepreciationAmountUnitReportingCurrency depreciationAmountUnitReportingCurrency()
    {
        DictTable   dictTable;

        dictTable = new DictTable(tableNum(AssetBook));
        if (dictTable.rights() >= AccessType::View)
        {
            return AssetBook::find(this.AssetId, this.BookId).DepreciationAmountUnitReportingCurrency;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDepreciationDate</Name>
				<Source><![CDATA[
    public display AssetLastDepreciationDate lastDepreciationDate()
    {
        DictTable   dictTable;

        dictTable = new DictTable(tableNum(AssetBook));
        if (dictTable.rights() >= AccessType::View)
        {
            return AssetBook::find(this.AssetId, this.BookId).LastDepreciationDate;
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        AssetBook                   assetBook;
        AssetBookTable              assetBookTable;
        AssetDepreciationProfile    assetDepreciationProfile;
        AssetDepreciationAmountUnit depreciationAmountUnit;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TmpAssetConsumptionProposal, AssetId):
                this.BookId = TmpAssetConsumptionProposal::findFirstConsumptionValueModel(this.AssetId, CurrentOperationsTax::Current);
            case fieldNum(TmpAssetConsumptionProposal, BookId):
            case fieldNum(TmpAssetConsumptionProposal, TransDate):
                this.calcConsumption();
                break;
            case fieldNum(TmpAssetConsumptionProposal, Qty):
                this.calculateDepreciationAmounts();
                break;
            case fieldNum(TmpAssetConsumptionProposal, Depreciation):
                depreciationAmountUnit =  this.depreciationAmountUnit();
                if (depreciationAmountUnit)
                {
                    this.Qty  = CurrencyExchange::round(this.Depreciation / depreciationAmountUnit, Ledger::accountingCurrency());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDepreciationAmounts</Name>
				<Source><![CDATA[
    private void calculateDepreciationAmounts()
    {
        this.Depreciation = CurrencyExchange::round(this.Qty * this.depreciationAmountUnit(), Ledger::accountingCurrency());
        this.DepreciationReportingCurrency = CurrencyExchange::round(this.Qty * this.depreciationAmountUnitReportingCurrency(), Ledger::reportingCurrency());    
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateConsumption</Name>
				<Source><![CDATA[
    static public AssetConsumptionQty calculateConsumption(AssetId _assetId,
                                                    AssetBookId _bookId,
                                                    TransDate _periodEnd,
                                                    boolean _firstDepreciationCalculated = false,
                                                    boolean _calculateForBudget = false)
    {
        AssetBook               assetBook = AssetBook::find(_assetId,_bookId);
        AssetConsumptionQty     consumptionQty;

        if (AssetConsumptionFactor::fixedConsumption(assetBook.ConsumptionFactorId, _periodEnd))
        {
            if (_calculateForBudget)
            {
                consumptionQty  = assetBook.ConsumptionQtyEstimated;
            }
            else
            {
                consumptionQty  = AssetConsumptionFactor::find(assetBook.ConsumptionFactorId).findAssetConsumptionQty(_periodEnd);
            }
        }
        else
        {
            if (!assetBook.LastDepreciationDate
                && !_firstDepreciationCalculated
                && mthOfYr(_periodEnd) == mthOfYr(assetBook.DepreciationStartDate))
            {
                if (_calculateForBudget)
                {
                    consumptionQty =   assetBook.ConsumptionQtyEstimated *
                                      decRound(((dayOfMth(_periodEnd) - dayOfMth(assetBook.DepreciationStartDate) + 1) / dayOfMth(_periodEnd)), 2);
                }
                else
                {
                    consumptionQty = AssetConsumptionFactor::find(assetBook.ConsumptionFactorId).findAssetConsumptionQty(_periodEnd, assetBook.ConsumptionQtyEstimated) *
                                     decRound(((dayOfMth(_periodEnd) - dayOfMth(assetBook.DepreciationStartDate) + 1) / dayOfMth(_periodEnd)), 2);
                }

                _firstDepreciationCalculated = true;
            }
            else
            {
                if (_calculateForBudget)
                {
                    consumptionQty =  assetBook.ConsumptionQtyEstimated;
                }
                else
                {
                    consumptionQty = AssetConsumptionFactor::find(assetBook.ConsumptionFactorId).findAssetConsumptionQty(_periodEnd, assetBook.ConsumptionQtyEstimated);
                }
            }
        }

        return consumptionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstConsumptionValueModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds first Value Model for an asset that is of type Consumption and in the correct posting layer
    /// </summary>
    /// <param name = "assetID">ID of asset selected</param>
    /// <param name = "currentOperationsTax">Current Posting Layer to be used</param>
    /// <returns>Returns first deprecation book for an asset that is of type Consumption and in the correct posting layer</returns>
    public static AssetBookId findFirstConsumptionValueModel(AssetId assetID, CurrentOperationsTax currentOperationsTax)
    {
        AssetBook                   assetBook;
        AssetBookTable              assetBookTable;
        AssetDepreciationProfile    assetDepreciationProfile;
        AssetBookId                 assetBookId;

        select firstonly assetBook
            where assetBook.AssetId == assetID
        exists join assetBookTable
            where assetBookTable.BookId == assetBook.BookId &&
                  assetBookTable.CurrentOperationsTax == currentOperationsTax
        exists join assetDepreciationProfile
            where assetDepreciationProfile.Profile == assetBook.DepreciationProfile &&
                  assetDepreciationProfile.Method == AssetDepreciationMethod::Consumption;

        if (assetBook)
        {
            assetBookId = assetBook.BookId;
        }
        else
        {
            assetBookId = "";
        }

        return assetbookId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@SYS71344</Label>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex></PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depreciation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetBookType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects70</ConfigurationKey>
			<EnumType>AssetBookType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depreciation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetDepreciation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DepreciationReportingCurrency</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetDepreciation</ExtendedDataType>
			<Label>@FixedAssets:FA_TableField_DepreciationReportingCurrency</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetConsumptionQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetConsumptionToDate</ExtendedDataType>
			<Label>@SYS7402</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetId</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBook</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TmpAssetConsumptionProposal</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>