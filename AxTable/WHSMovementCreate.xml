<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMovementCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSMovementCreate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>physicalOnHanditemAndDimAboveLocation</Name>
				<Source><![CDATA[
    private Set physicalOnHanditemAndDimAboveLocation(WMSLocation _location)
    {
        InventSum       inventSum;
        InventDim       inventDim;
        InventSiteId    inventSiteId;
        container       setKey;

        inventSiteId = _location.inventSiteId();

        Set itemDimLocationAndAboveSet = new Set(Types::Container);

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select ItemId, #InventDimGroupAllFields from inventSum
                where inventSum.PhysicalInvent      > 0
                    && inventSum.ClosedQty          == NoYes::No
                    && inventSum.InventSiteId       == inventSiteId
                    && inventSum.InventLocationId   == _location.InventLocationId
                    && inventSum.wmsLocationId      == _location.wmsLocationId
            {
                InventDim locationAndAboveDim;
                locationAndAboveDim.initFromInventSum(inventSum);
                locationAndAboveDim.clearBelowLocationDim(inventSum.itemId);

                setKey = [inventSum.ItemId, inventDim::findOrCreate(locationAndAboveDim).inventDimId];

                itemDimLocationAndAboveSet.add(setKey);
            }
        }
        else
        {
            while select ItemId from inventSum
                where inventSum.PhysicalInvent > 0
                    && inventSum.ClosedQty == NoYes::No
            join inventDim
                where   inventDim.InventDimId       == inventSum.InventDimId
                   &&   inventDim.InventSiteId      == inventSiteId
                   &&   inventDim.InventLocationId  == _location.InventLocationId
                   &&   inventDim.wmsLocationId     == _location.wmsLocationId
            {
                InventDim locationAndAboveDim;
                locationAndAboveDim.data(inventDim);
                locationAndAboveDim.clearBelowLocationDim(inventSum.itemId);

                setKey = [inventSum.ItemId, inventDim::findOrCreate(locationAndAboveDim).inventDimId];

                itemDimLocationAndAboveSet.add(setKey);
            }
        }

        return itemDimLocationAndAboveSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates temporary <c>WHSMovementCreate</c> records that can be used to define inventory movement work.
    /// </summary>
    /// <param name = "_location">
    ///  The location from which the goods need to be moved.
    /// </param>
    public void buildFromWMSLocation(WMSLocation _location)
    {
        Set physicalOnHanditemAndDimAboveLocationSet = this.physicalOnHanditemAndDimAboveLocation(_location);

        ttsbegin;

        SetEnumerator   se = physicalOnHanditemAndDimAboveLocationSet.getEnumerator();
        InventUnitId    inventUnitId;
        ItemId          itemId, itemIdPrevious;
        InventDimId     inventDimIdLocationAndAbove;

        while (se.moveNext())
        {
            [itemId, inventDimIdLocationAndAbove] = se.current();

            if (itemIdPrevious != itemId)
            {
                inventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
            }

            this.ItemId             = itemId;
            this.InventDimId        = inventDimIdLocationAndAbove;
            // We don't use realmax as default for inventory movement work.
            this.InventQty          = WHSInventOnHand::getWorkPhysicalAvailHandlingQty(itemId, inventDimIdLocationAndAbove, false);
            this.UnitID             = inventUnitId;
            this.insert();

            this.clear();

            itemIdPrevious = itemId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMovementWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates movement work for valid work lines
    /// </summary>
    /// <param name="_fromLocation">
    ///     The location from which the movement will happen
    /// </param>
    /// <returns>
    ///     Returns true if all lines are valid work lines.
    ///     Returns false if one or more lines touched contains incomplete information for creating movement work
    /// </returns>
    public boolean createMovementWork(WMSLocation _fromLocation)
    {
        InventDim   inventDim;
        WHSUserId   userId;
        WHSWorkId   workId;
        boolean     allLinesValid;

        userId = WHSParameters::find().GenericWorkUserId;

        if (!userId)
        {
            return checkFailed("@WAX2758");
        }

        // Check for lines that were modified to imply the intent to create movement work but do not have all required information filled out.
        select firstOnly RecId from this
            where   (  this.QtyToMove != 0
                    || this.MovementTypeCode != ''
                    || this.ToLoc != '') // means we want to create work for this line.
                 && (this.QtyToMove == 0
                    || this.MovementTypeCode == ''); // means one of the neccessary fields is not populated.

        if ( this.RecId != 0 )
        {
            allLinesValid = checkFailed("@SYS4010251");
        }
        else
        {
            while select this
                where   this.QtyToMove        > 0
                    &&  this.MovementTypeCode != ''
            {
                inventDim = InventDim::find(this.InventDimId);

                workId = WHSWorkCreateMovementBasic::createBasicMovementWork(userId,
                                                                             this.ItemId,
                                                                             this.QtyToMove,
                                                                             this.UnitID,
                                                                             inventDim,
                                                                             '',
                                                                             _fromLocation.wmsLocationId,
                                                                             this.ToLoc,
                                                                             '',
                                                                             inventDim.InventStatusId,
                                                                             inventDim.InventStatusId,
                                                                             false,
                                                                             false,
                                                                             WHSMovementType::find(this.MovementTypeCode).WorkClassId);

                info(strFmt("@WAX3849", workId));
            }
            allLinesValid = true;
        }

        return allLinesValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        InventDim   inventDim;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
        switch (_fieldIdToCheck)
        {
                case fieldNum(WHSMovementCreate, ToLoc):
                    if (this.ToLoc != '')
                    {
                        inventDim = InventDim::find(this.InventDimId);
                        if (!WMSLocation::exist(this.ToLoc, inventDim.InventLocationId))
                {
                            ret = checkFailed(strFmt("@SYS53781", this.ToLoc, inventDim.InventLocationId));
                        }
                }
                break;
        }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4408</DeveloperDocumentation>
	<Label>@WAX3838</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>MovementTypeCode</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ItemIdInventDimIdIdx</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MovementTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMovementTypeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyToMove</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQtyToMove</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ToLoc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@WAX277</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdInventDimIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitID</Name>
					<Field>UnitID</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSMovementType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSMovementType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MovementTypeCode</Name>
					<SourceEDT>WHSMovementTypeCode</SourceEDT>
					<Field>MovementTypeCode</Field>
					<RelatedField>MovementTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToLoc</Name>
					<Field>ToLoc</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>