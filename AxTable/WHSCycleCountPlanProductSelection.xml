<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCycleCountPlanProductSelection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSCycleCountPlanProductSelection extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initItemQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the item query.
    /// </summary>
    /// <returns>Container with the packed item query.</returns>
    public static container initItemQuery()
    {
        QueryRun queryRun = WHSCycleCountPlanProductSelection::defaultItemQuery();
        return queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemQuery</Name>
				<Source><![CDATA[
    internal static QueryRun defaultItemQuery()
    {
        QueryRun queryRun = new QueryRun(queryStr(WHSInventTable));
        queryRun.name("@SYP4980032");
        queryRun.saveUserSetup(false);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductVariantQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product variant query.
    /// </summary>
    /// <returns>Container with the packed product variant query.</returns>
    public static container initProductVariantQuery()
    {
        QueryRun queryRun = WHSCycleCountPlanProductSelection::defaultProductVariantQuery();
        return queryRun.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductVariantQuery</Name>
				<Source><![CDATA[
    internal static QueryRun defaultProductVariantQuery()
    {
        QueryRun queryRun = new QueryRun(queryStr(WHSReleasedProductVariants));
        queryRun.name("@SYP4980030");
        queryRun.saveUserSetup(false);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (!this.ItemQuery)
        {
            this.ItemQuery = WHSCycleCountPlanProductSelection::initItemQuery();
        }

        if (!this.ProductVariantQuery)
        {
            this.ProductVariantQuery = WHSCycleCountPlanProductSelection::initProductVariantQuery();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstForCycleCountPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first <c>WHSCycleCountPlanProductSelection</c> record with given parameters.
    /// </summary>
    /// <param name="_cycleCountPlanId">
    /// Cycle count plan id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update; optional.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSCycleCountPlanProductSelection findFirstForCycleCountPlanId(WHSCycleCountPlanId _cycleCountPlanId, boolean _forupdate = false)
    {
        WHSCycleCountPlanProductSelection cycleCountPlanProductSelection;

        if (_cycleCountPlanId)
        {
            cycleCountPlanProductSelection.selectForUpdate(_forupdate);

            select firstonly cycleCountPlanProductSelection
                order by cycleCountPlanProductSelection.SequenceNumber asc
                where cycleCountPlanProductSelection.CycleCountPlanId == _cycleCountPlanId;
        }

        return cycleCountPlanProductSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks if a specific <c>WHSCycleCountPlanProductSelection</c> record exists.
	/// </summary>
    /// <param name="_cycleCountPlanId">
	/// Cycle count plan id of the record.
	/// </param>
    /// <param name="_sequenceNumber">
	/// Sequence number of the record.
	/// </param>
	/// <returns>
	/// true if the record exists; otherwise false.
	/// </returns>
    public static boolean exist(WHSCycleCountPlanId _cycleCountPlanId, WHSCycleCountPlanProductSelectionSequenceNumber _sequenceNumber)
    {
        return (_cycleCountPlanId && _sequenceNumber)
            && (select firstonly RecId from WHSCycleCountPlanProductSelection
                    where WHSCycleCountPlanProductSelection.CycleCountPlanId == _cycleCountPlanId
                        && WHSCycleCountPlanProductSelection.SequenceNumber == _sequenceNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForCycleCountPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>WHSCycleCountPlanProductSelection</c> record exists for the specified cycle count plan ID.
    /// </summary>
    /// <param name="_cycleCountPlanId">
    /// Cycle count plan id of the record.
    /// </param>
    /// <returns>
    /// true if a record exists; otherwise false.
    /// </returns>
    public static boolean existForCycleCountPlanId(WHSCycleCountPlanId _cycleCountPlanId)
    {
        return _cycleCountPlanId
            && (select firstonly RecId from WHSCycleCountPlanProductSelection
                    where WHSCycleCountPlanProductSelection.CycleCountPlanId == _cycleCountPlanId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
    /// Finds a specific <c>WHSCycleCountPlanProductSelection</c> record with given parameters.
    /// </summary>
    /// <param name="_cycleCountPlanId">
    /// Cycle count plan id of the record.
    /// </param>
    /// <param name="_sequenceNumber">
    /// Sequence number of the record.
    /// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSCycleCountPlanProductSelection find(
		WHSCycleCountPlanId								_cycleCountPlanId,
		WHSCycleCountPlanProductSelectionSequenceNumber	_sequenceNumber,
		boolean											_forupdate			= false)
    {
        WHSCycleCountPlanProductSelection cycleCountPlanProductSelection;

		if (_cycleCountPlanId && _sequenceNumber)
        {
            cycleCountPlanProductSelection.selectForUpdate(_forupdate);

			select firstonly cycleCountPlanProductSelection
                where cycleCountPlanProductSelection.CycleCountPlanId == _cycleCountPlanId
                    && cycleCountPlanProductSelection.SequenceNumber == _sequenceNumber;
        }

        return cycleCountPlanProductSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetCycleCountPlanProductQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the cycle count plan product query.
    /// </summary>
    /// <returns>true if it should be enabled to set these fields; otherwise false.</returns>
    public boolean canSetCycleCountPlanProductQuery()
    {
        return this.ProductSelectionMode == WHSCycleCountProductSelectionMode::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetCycleCountPlanProductVariantQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is possible to set the cycle count plan product variant query.
    /// </summary>
    /// <returns>true if it should be enabled to set these fields; otherwise false.</returns>
    public boolean canSetCycleCountPlanProductVariantQuery()
    {
        return this.ProductSelectionMode == WHSCycleCountProductSelectionMode::Variant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSCycleCountPlanLineDeveloperDocumentation</DeveloperDocumentation>
	<FormRef>WHSCycleCountPlan</FormRef>
	<Label>@WAX:CycleCountPlanProductSelections</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CycleCountPlanId</TitleField1>
	<TitleField2>SequenceNumber</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CycleCountPlanIdSequenceNumberIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>CycleCountPlanIdSequenceNumberIdx</PrimaryIndex>
	<ReplacementKey>CycleCountPlanIdSequenceNumberIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CycleCountPlanId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CycleCountPlanId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountPlanId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountPlanProductSelectionSequenceNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountPlanProductSelectionDescription</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductSelectionMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSCycleCountProductSelectionMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ItemQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSItemQuery</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ProductVariantQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSProductVariantQuery</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CycleCountPlanIdSequenceNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CycleCountPlanId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSCycleCountPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSCycleCountPlan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CycleCountPlanId</Name>
					<Field>CycleCountPlanId</Field>
					<RelatedField>CycleCountPlanId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>