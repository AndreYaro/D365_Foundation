<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpTransSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvExpTransSplit extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>legalEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the legal entity name selected by the user.
    /// </summary>
    /// <returns>
    ///     The data area id selected, if nothing is selected, return the current company.
    /// </returns>
    public LegalEntityDataAreaId legalEntityName()
    {
        return this.InterCompanyLE != '' ? this.InterCompanyLE : curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the expense is intercompany.
    /// </summary>
    /// <returns>
    /// true if this is an intercompany transaction; false otherwise.
    /// </returns>
    public boolean isIntercompany()
    {
        return (this.InterCompanyLE && this.InterCompanyLE != this.DataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSplitHeader</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Init values from split header expense.
    /// </summary>
    /// <param name = "_trvExpTransSplitHeader">Split header expense</param>
	public void initFromSplitHeader(TrvExpTrans _trvExpTransSplitHeader)
    {
        this.SplitHeaderRecId = _trvExpTransSplitHeader.RecId;
        this.InterCompanyLE = _trvExpTransSplitHeader.InterCompanyLE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedSplitLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the related split line for a given expense line recid.
    /// </summary>
    /// <param name = "_recId">
    ///     Expense line recid.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Boolean value indicating whether the returned buffer is to be selected for update.
    /// </param>
    /// <returns>
    ///     Split line record.
    /// </returns>
    public static TrvExpTransSplit findRelatedSplitLine(RefRecId _recId, boolean _forUpdate = false)
    {
        TrvExpTransSplit trvExpTransSplit;

        if (_recId)
        {
            trvExpTransSplit.selectForUpdate(_forUpdate);
            select firstonly trvExpTransSplit where trvExpTransSplit.SplitLineRecId == _recId;
        }
        return trvExpTransSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryIntegratedWithProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the category on the expense line, is integrated with project.
    /// </summary>
    /// <returns>
    ///     True if the expense line category is integrated with project, false otherwise.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display boolean isCategoryIntegratedWithProject()
    {
        return CategoryTable::find(this.CostType).UseInProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTrvExpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initial values filled into split line based on the expense line provided.
    /// </summary>
    public void initFromTrvExpTrans(TrvExpTrans _trvExpTrans, TrvExpTransSplit _trvExpTransSplit)
    {
        _trvExpTransSplit.CostType = _trvExpTrans.CostType;
        _trvExpTransSplit.InterCompanyLE = _trvExpTrans.InterCompanyLE;
        _trvExpTransSplit.ProjId = _trvExpTrans.ProjId;
        _trvExpTransSplit.ProjActivityNumber = _trvExpTrans.ProjActivityNumber;
        _trvExpTransSplit.ProjStatusId = _trvExpTrans.ProjStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSplitHeaderOriginatingLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create split header originating line matching similar to the actual credit card expense.
    /// </summary>
    /// <param name = "_trvExpTrans">
    ///     Expense line table buffer.
    /// </param>
    public static void createSplitHeaderOriginatingLine(TrvExpTrans _trvExpTrans)
    {
        TrvExpTransSplit splitFillerLine;

        splitFillerLine.SplitHeaderRecId = _trvExpTrans.RecId;

        splitFillerLine.CostType = _trvExpTrans.CostType;
        splitFillerLine.InterCompanyLE = _trvExpTrans.InterCompanyLE;
        splitFillerLine.ProjId = _trvExpTrans.ProjId;
        splitFillerLine.ProjActivityNumber = _trvExpTrans.ProjActivityNumber;
        splitFillerLine.ProjStatusId = _trvExpTrans.ProjStatusId;
        splitFillerLine.SplitAmount = _trvExpTrans.CreditCardTransactionCurrencyAmount;
        splitFillerLine.SplitAllocationFactor = 100;
        splitFillerLine.IsOriginatingLine = NoYes::Yes;

        splitFillerLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitHeaderOriginatingLineExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates whether split line exists of type originating line.
    /// </summary>
    /// <param name = "_splitHeaderRecId">
    ///     Split expense record id.
    /// </param>
    /// <returns>
    ///     Split line record.
    /// </returns>
    public static TrvExpTransSplit splitHeaderOriginatingLineExists(RefRecId _splitHeaderRecId)
    {
        TrvExpTransSplit trvExpTransSplit;

        select firstonly trvExpTransSplit
            where trvExpTransSplit.SplitHeaderRecId == _splitHeaderRecId
                && trvExpTransSplit.IsOriginatingLine == NoYes::Yes;

        return trvExpTransSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLinesExistForAnExpense</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds whether a related split lines exists for a given expense line recid.
    /// </summary>
    /// <param name = "_splitHeaderRecId">
    ///     Expense line recid.
    /// </param>
    /// <returns>
    ///     True if split line exists for an expense line; otherwise, false.
    /// </returns>
    public static boolean splitLinesExistForAnExpense(RefRecId _splitHeaderRecId)
    {
        TrvExpTransSplit expenseSplitLine;
        
        select firstonly RecId from expenseSplitLine
            where expenseSplitLine.SplitHeaderRecId == _splitHeaderRecId;

        return (expenseSplitLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update project related fields based on cost type.
    /// </summary>
    /// <param name = "_fieldId">Field id</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case (fieldnum(TrvExpTransSplit, CostType)):
                TrvCostType newCostType = TrvCostType::find(this.CostType);
                this.setDefaultProjectFromExpenseReport();
                break;

            case (fieldNum(TrvExpTransSplit, ProjId)):
                this.setProjStatusId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a field after it has been modified
    /// </summary>
    /// <param name = "_fieldId">Field id</param>
    /// <returns></returns>
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;
        DataAreaId companyDataArea;

        // Skip the super for projectid to check data in case of intercompany.
        if (this.isIntercompany() && (_fieldId == fieldnum(TrvExpTransSplit, ProjId)
                || _fieldId == fieldnum(TrvExpTransSplit, ProjActivityNumber)
                || _fieldId == fieldnum(TrvExpTransSplit, ProjStatusId)))
        {
            ret = true;
        }
        else
        {
            ret = super(_fieldId);
        }

        switch (_fieldId)
        {
            case (fieldNum(TrvExpTransSplit, ProjId)):
                if (this.ProjId != '')
                {
                    companyDataArea = this.InterCompanyLE != '' ? this.InterCompanyLE : this.DataAreaId;

                    changecompany(companyDataArea)
                    {
                        if (!ProjTable::find(this.ProjId).RecId)
                        {
                            ret = ret && checkFailed(strFmt("@Expense:TableFieldFKViolationMessage",
                                                        this.ProjId,
                                                        fieldpname(TrvExpTransSplit, ProjId),
                                                        tablepname(ProjTable)));
                        }
                    }

                    if (ret && this.InterCompanyLE == this.DataAreaId && !this.isCategoryIntegratedWithProject())
                    {
                        ret = ret && checkFailed("@SYS327727");
                    }
                    else
                    {
                        changecompany(companyDataArea)
                        {
                            ret = ret && this.validateProject();
                        }
                    }
                }

                break;

            case (fieldNum(TrvExpTransSplit, ProjActivityNumber)):
                ret = ret && this.validateProjActivityNumber();
                break;

            case (fieldNum(TrvExpTransSplit, ProjStatusId)):
                ret = ret && this.validateLineProperty();
                break;
        }


        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountSign</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Validate split amount sign to be same as total amount.
    /// </summary>
    /// <param name = "_expenseTotalAmount">
	/// Expense total amount.
	/// </param>
    /// <returns>
	/// True if amount sign matches with the total; otherwise, false.
	/// </returns>
	public boolean validateAmountSign(TrvTransactionCurrencyAmount _expenseTotalAmount)
    {
        boolean ret = this.isAmountSignCorrect(_expenseTotalAmount);

        if (!ret)
        {
            error("@Expense:SplitAmountSignNotMatching");
            ret = false;
        }
        
		return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAmountSignCorrect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the sign of the amount matches the sign of the total amount.
    /// </summary>
    /// <param name = "_expenseTotalAmount">
    /// Expense total amount.
    /// </param>
    /// <returns>True if amount sign matches with the total; otherwise, false.</returns>
    public boolean isAmountSignCorrect(TrvTransactionCurrencyAmount _expenseTotalAmount)
    {
        boolean ret = true;

        if ((_expenseTotalAmount > 0 && this.SplitAmount < 0)
               || (_expenseTotalAmount < 0 && this.SplitAmount > 0))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determine whether the project used in expense line is valid
    /// </summary>
    /// <returns>
    ///     true if the project used in valid; otherwise, false.
    /// </returns>
    private boolean validateProject()
    {
        ProjTable           projTable;
        boolean             ret = true;
        ProjValCheckTrans   projValCheckTrans;
        boolean             isIntercompany;
        TrvLegalEntity      legalEntity;

        if (this.ProjId)
        {
            projValCheckTrans = new ProjValCheckTrans();

            isIntercompany = this.isIntercompany();
            projValCheckTrans.parmIsIntercompany(isIntercompany);
            if (!projValCheckTrans.validateMandatory(this))
            {
                ret = false;
            }

            // For an inter company expense change the current company context.
            legalEntity = isIntercompany ? this.InterCompanyLE : curExt();

            changecompany(legalEntity)
            {
                projTable = ProjTable::find(this.ProjId);
                if (!projTable.status().validateWriteCreateJournal())
                {
                    // validateWriteCreateJournal will give failure message
                    ret = false;
                }

                if (projTable.Type == ProjType::Time)
                {
                    ret = checkFailed(strFmt("@SYS53011", ProjType::Time));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the line property field.
    /// </summary>
    /// <returns>
    ///     true if the line property is valid and not empty; false otherwise.
    /// </returns>
    private boolean validateLineProperty()
    {
        DataAreaId      dataAreaId;

        dataAreaId = this.InterCompanyLE != '' ? this.InterCompanyLE : this.DataAreaId;

        if (dataAreaId && this.ProjStatusId != '')
        {
            changecompany(dataAreaId)
            {
                if (!ProjLineProperty::find(this.ProjStatusId).RecId)
                {
                    return checkFailed(strFmt("@Expense:TheValue1InField2IsNotFoundInTheRelatedTable3", this.ProjStatusId,
                            fieldId2name(tableNum(TrvExpTransSplit), fieldNum(TrvExpTransSplit, ProjStatusId)),
                            tableId2pname(tableNum(ProjLineProperty))));
                }
            }
        }
        else if (this.ProjId != '')
        {
            return checkFailed("@SYS76857");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the project activity number field.
    /// </summary>
    /// <returns>
    ///     true if the project activity number is valid; false otherwise.
    /// </returns>
    private boolean validateProjActivityNumber()
    {
        DataAreaId  dataAreaId;

        dataAreaId = this.InterCompanyLE != '' ? this.InterCompanyLE : this.DataAreaId;

        changecompany(dataAreaId)
        {
            if (this.ProjActivityNumber != '')
            {
                if (!smmActivities::find(this.ProjActivityNumber).RecId)
                {
                    return checkFailed(strFmt("@Expense:TheValue1InField2IsNotFoundInTheRelatedTable3", this.ProjActivityNumber,
                            fieldId2name(tableNum(TrvExpTransSplit), fieldNum(TrvExpTransSplit, ProjActivityNumber)),
                            tableId2pname(tableNum(smmActivities))));
                }
                else
                {
                    if (this.ProjId &&
                        smmActivityParentLinkTable::findByActivityAndParent(this.ProjActivityNumber, smmActivityParentType::Project, ProjTable::find(this.ProjId).RecId, tableNum(ProjTable)).RecId == 0)
                    {
                        return checkFailed(strFmt("@Proj:ActivityNumberNotAssociatedToProject",this.ProjActivityNumber, this.ProjId));
                    }
                }
            }
            else
            {
                if (this.ProjId && ProjTable::checkRequireActivity(this.ProjId, tableNum(TrvExpTransSplit)))
                {
                    // Fail because a project has been specified which requires activiy number.
                    return checkFailed("@Expense:ActivityNumberMissing");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjStatusId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project status id.
    /// </summary>
    /// <param name = "_projStatusId">
    /// Project status id.
    /// </param>
    private void setProjStatusId(ProjLinePropertyId _projStatusId = '')
    {
        LegalEntityDataAreaId legalEntity = this.legalEntityName();
        this.ProjStatusId = _projStatusId;

        changeCompany(legalEntity)
        {
            if (this.ProjId && !this.ProjStatusId)
            {
                this.ProjStatusId = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.CostType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultProjectFromExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the project fields from split header expense line.
    /// </summary>
    public void setDefaultProjectFromExpenseReport()
    {
        ProjLinePropertyId      projLinePropertyId;
        TrvExpTrans             trvExpTrans = TrvExpTrans::find(this.SplitHeaderRecId);

        // Default dimension and project id from expense header when both header and line reference the same company
        // and having valid worker category validation groups.
        if (!this.isCategoryIntegratedWithProject())
        {
            this.ProjId = '';
            this.ProjActivityNumber = '';
            this.ProjStatusId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingExpenseAmount</Name>
				<Source><![CDATA[
	/// <summary>
    ///     Remaining amount for split.
    /// </summary>
    /// <param name = "_totalExpenseAmount">
    ///     Total expense amount that is available for split. 
    /// </param>
    /// <returns>
    ///     Remaining split amount.
    /// </returns>
	public static TrvTransactionCurrencyAmount remainingExpenseAmount(RefRecId _trvExpTransRecId, TrvTransactionCurrencyAmount _totalExpenseAmount)
    {
        TrvExpTransSplit					trvExpTransSplitLines;
        TrvExpTransSplit					trvExpTransSplitPersonalLines;
        TrvTransactionCurrencyAmount		remainingExpenseAmount;

        select sum(SplitAmount) from trvExpTransSplitLines
            where trvExpTransSplitLines.SplitHeaderRecId == _trvExpTransRecId;

        remainingExpenseAmount = _totalExpenseAmount - trvExpTransSplitLines.SplitAmount;
        
        return remainingExpenseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLineExistsMatchingHeaderCostType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds whether a split line exists which matches cost type of split header.
    /// </summary>
    /// <param name = "_splitHeaderCostType">
    ///     Split header expense line cost type.
    /// </param>
    /// <param name = "_splitHeaderRecId">
    ///     Split header expense line recid.
    /// </param>
    /// <returns>
    ///     True if split line exists matching the split header cost type; otherwise, false.
    /// </returns>
    public static boolean splitLineExistsMatchingHeaderCostType(TrvCostTypeEDT _splitHeaderCostType, RefRecId _splitHeaderRecId)
    {
        TrvExpTransSplit    splitLines;

        select RecId from splitLines
            where splitLines.CostType == _splitHeaderCostType
                && splitLines.SplitHeaderRecId == _splitHeaderRecId;

        return splitLines.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAndUpdateOriginatingLineSplitToPersonal</Name>
				<Source><![CDATA[
    public static void calculateAndUpdateOriginatingLineSplitToPersonal(RecId _recId, real _totalAmount, real _splitAmount)
    {
        TrvExpTransSplit splitOriginatingLine = TrvExpTransSplit::splitHeaderOriginatingLineExists(_recId);
        
        if (splitOriginatingLine)
        {

            //
            // After updating current line get the amount for originating line based on this calculation.
            // Total amount available for split minus consumed split amount excluding the originating line.
            // Now update this amount to the originating line.
            //

            TrvTransactionCurrencyAmount amountForOriginatingLine = _totalAmount - _splitAmount;

            if ((_totalAmount > 0 && amountForOriginatingLine < 0)
                        || (_totalAmount < 0 && amountForOriginatingLine > 0))
            {
                throw error("@Expense:IncorrectSplit");
            }

            splitOriginatingLine.selectForUpdate(true);
            splitOriginatingLine.SplitAmount = amountForOriginatingLine;
            splitOriginatingLine.SplitAllocationFactor = abs ((amountForOriginatingLine / _totalAmount) * 100);
            splitOriginatingLine.write();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Trv</ConfigurationKey>
	<DeveloperDocumentation>@Expense:SplitDetailsTable</DeveloperDocumentation>
	<Label>@Expense:ExpenseSplitDetails</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CostType</TitleField1>
	<TitleField2>SplitAmount</TitleField2>
	<ClusteredIndex>SplitHeaderIdx</ClusteredIndex>
	<Modules>Expense</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation>SplitLine</Relation>
			<Table>TrvExpTrans</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SplitAllocationFactor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyLE</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyLE</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvCostTypeEDT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyLE</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvLegalEntity</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjStatusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<Label>@Expense:Billable</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SplitAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TrvTransactionCurrencyAmount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<RelationContext>Currency</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SplitAllocationFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AllocationFactor</ExtendedDataType>
			<Label>@SYS15774</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SplitHeaderRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SplitLineRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOriginatingLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@Expense:AutoCreatedOriginatingLine</HelpText>
			<Label>@Expense:OriginatingLine</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SplitHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SplitHeaderRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SplitLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SplitHeader</Name>
			<RelatedTable>TrvExpTrans</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SplitHeaderRecId</Name>
					<Field>SplitHeaderRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SplitLine</Name>
			<RelatedTable>TrvExpTrans</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SplitLineRecId</Name>
					<Field>SplitLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>