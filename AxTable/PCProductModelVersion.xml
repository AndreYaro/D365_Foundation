<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCProductModelVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCProductModelVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approver</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the approver of the current version.
    /// </summary>
    /// <returns>
    ///    A string value that contains the name of the approver.
    /// </returns>
    public display HcmPersonnelNumberId approver()
    {
        PCProductModelVersionApprover   versionApprover;
        HcmWorker                       worker;

        select firstonly RecId, PersonnelNumber from worker
        join   firstonly RecId from versionApprover
            where   versionApprover.ProductModelVersion == this.RecId
            &&      worker.RecId == versionApprover.Approver;

        if (worker.RecId)
        {
            return worker.PersonnelNumber;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductConfigurationModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the product configuration model related to this product model version.
    /// </summary>
    /// <returns>
    ///    A <c>PCProductConfigurationModel</c> record.
    /// </returns>
    public PCProductConfigurationModel getProductConfigurationModel()
    {
        return PCProductConfigurationModel::find(this.Model);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the domain associated with the current version.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set the domain.
    /// </param>
    /// <param name="_productNumber">
    ///    The current ID of the product that is to be associated with this version.
    /// </param>
    /// <returns>
    ///    The ID of the product that is associated with the current version.
    /// </returns>
    /// <remarks>
    ///    This edit method is used in the <c>PCProductModelVersion</c> form.
    /// </remarks>
    public edit EcoResProductNumber getSetProduct(boolean _set, EcoResProductNumber _productNumber)
    {
        EcoResProductIdentifier         ecoResProductIdentifier;

        if (_set)
        {
            select firstonly Product
            from ecoResProductIdentifier
            where ecoResProductIdentifier.ProductNumber == _productNumber;

            this.ProductMaster = ecoResProductIdentifier.Product;

            return _productNumber;
        }
        else
        {
            select firstonly ProductNumber
            from ecoResProductIdentifier
            where ecoResProductIdentifier.Product == this.ProductMaster;

            return ecoResProductIdentifier.ProductNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ValidFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.ValidTo = this.ValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the approval status of the current version.
    /// </summary>
    /// <returns>
    ///    The <c>NoYes::Yes</c> enumeration value if the version is approved; otherwise, the <c>NoYes::No</c>
    ///    enumeration value.
    /// </returns>
    public display NoYes isApproved()
    {
        PCProductModelVersionApprover approver;

        select firstonly RecId from approver where approver.ProductModelVersion == this.RecId;

        if (approver.RecId)
        {
            return NoYes::Yes;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if ( ret && (_fieldIdToCheck == fieldnum(PCProductModelVersion, ProductMaster)))
        {
            ret = PCModelingLibrary::validateProductForVersion(this);
        }

        if ( ret && (_fieldIdToCheck == fieldnum(PCProductModelVersion, IsActive) && (this.isApproved() == NoYes::No)))
        {
            ret = checkFailed("@SYS26246");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        ret = ret && PCModelingLibrary::validateVersionDate(this);
        ret = ret && PCModelingLibrary::validateProductForVersion(this);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PCProductModelVersion</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCProductModelVersion::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCProductModelVersion</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PCProductModelVersion</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCProductModelVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductModelVersion find(RefRecId _recId, boolean _forupdate = false)
    {
        PCProductModelVersion record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record of the current active version in the <c>PCProductModelVersion</c> table.
    /// </summary>
    /// <param name="_productRecId">
    ///    The record ID of the related <c>PCProductConfigurationModel</c> record.
    /// </param>
    /// <param name="_selectedDate">
    ///    The date used to retrieve the version.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCProductModelVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductModelVersion findActiveVersion(RefRecId _productRecId, date _selectedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean _forupdate = false)
    {
        PCProductModelVersion       record;

        if (!_productRecId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);
        select  firstonly record
        where   record.IsActive     == NoYes::Yes
        &&      record.ValidFrom    <= _selectedDate
        &&      record.ValidTo      >= _selectedDate
        &&      record.ProductMaster == _productRecId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findApprovedActiveVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record of the current approved and active version in the <c>PCProductModelVersion</c> table.
    /// </summary>
    /// <param name="_productRecId">
    ///    The record ID of the related <c>PCProductModelVersion</c> record to find.
    /// </param>
    /// <param name="_selectedDate">
    ///    The date used to retrieve the version; optional.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCProductModelVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductModelVersion findApprovedActiveVersion(RefRecId _productRecId, date _selectedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean _forupdate = false)
    {
        PCProductModelVersion       record;
        PCProductModelVersionApprover approver;

        if (!_productRecId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);
        select  firstonly record
        where   record.IsActive     == NoYes::Yes
        &&      record.ValidFrom    <= _selectedDate
        &&      record.ValidTo      >= _selectedDate
        &&      record.ProductMaster == _productRecId
        exists join approver
        where  approver.ProductModelVersion == record.RecId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveVersionByProductModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record of the current active version in the <c>PCProductModelVersion</c> table.
    /// </summary>
    /// <param name="_productModelRecId">
    ///    The record ID of the related <c>PCProductConfigurationModel</c> record.
    /// </param>
    /// <param name="_selectedDate">
    ///    The date used to get the version.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCProductModelVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductModelVersion findActiveVersionByProductModel(RefRecId _productModelRecId, date _selectedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean _forupdate = false)
    {
        PCProductModelVersion       record;

        if (!_productModelRecId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);
        select  firstonly record
        where   record.IsActive     == NoYes::Yes
        &&      record.ValidFrom    <= _selectedDate
        &&      record.ValidTo      >= _selectedDate
        &&      record.Model        == _productModelRecId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findApprovedActiveVersionByProductModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record of the current approved and active version in the <c>PCProductModelVersion</c> table.
    /// </summary>
    /// <param name="_productModelRecId">
    ///    The record ID of the related <c>PCProductModelVersion</c> record to find.
    /// </param>
    /// <param name="_selectedDate">
    ///    The date used to get the version; optional.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCProductModelVersion</c> table; otherwise, an empty record.
    /// </returns>
    public static PCProductModelVersion findApprovedActiveVersionByProductModel(RefRecId _productModelRecId, date _selectedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean _forupdate = false)
    {
        PCProductModelVersion       record;
        PCProductModelVersionApprover approver;

        if (!_productModelRecId)
        {
            return record;
        }

        record.selectForUpdate(_forupdate);
        select  firstonly record
        where   record.IsActive     == NoYes::Yes
        &&      record.ValidFrom    <= _selectedDate
        &&      record.ValidTo      >= _selectedDate
        &&      record.Model        == _productModelRecId
        exists join approver
        where  approver.ProductModelVersion == record.RecId;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153070</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153069</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProductMaster</TitleField1>
	<TitleField2>Model</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCProductModelVersionApprover</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCProductModelVersionApprover</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductMaster</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Model</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductMaster</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Model</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS24676</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Model</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS310578</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PCPriceMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductMaster</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductMasterRecId</ExtendedDataType>
			<Label>@SYS314795</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCProductModelVersionValidFromDate</ExtendedDataType>
			<Label>@SYS24050</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCProductModelVersionValidToDate</ExtendedDataType>
			<Label>@SYS14656</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ModelActiveVersion</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Model</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProductMaster</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductConfigurationModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCProductConfigurationModel</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductModelContainer</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductMasterRelated</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Model</Name>
					<Field>Model</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProductMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductMasterRelated</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductModelContainer</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductMaster</Name>
					<Field>ProductMaster</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>