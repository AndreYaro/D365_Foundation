<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInvoiceJour extends common
{

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur2Euro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an amount from the transaction currency to the Euro triangulation currency.
    /// </summary>
    /// <param name="_amountCur">
    /// The amount to convert.
    /// </param>
    /// <returns>
    /// The amount in Euro triangulation currency.
    /// </returns>
    /// <remarks>
    /// The transaction currency is first converted to the accounting currency of the ledger, then that amount is converted
    /// to the Euro triangulation currency.
    /// </remarks>
    AmountCur amountCur2Euro(AmountCur _amountCur)
    {
        CurrencyCode euroCurrencyCode;
        CurrencyExchangeHelper currencyExchangeHelper;
        AmountMST mstAmount;
        
        euroCurrencyCode = Currency::findEuroCurrencyCode();
        
        if (euroCurrencyCode == '')
        {
            // if no currency code is selected as the euro currency, return 0
            return 0;
        }
        
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            this.InvoiceDate);
        
        currencyExchangeHelper.parmErrorType(AifErrorType::None);
        currencyExchangeHelper.parmExchangeRate1(this.ExchRate);
        currencyExchangeHelper.parmExchangeRate2(this.ExchRateSecondary);
        
        mstAmount = currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode, _amountCur, true);
        
        currencyExchangeHelper.parmExchangeRate1(0);
        currencyExchangeHelper.parmExchangeRate2(0);
        
        return currencyExchangeHelper.calculateAccountingToTransaction(euroCurrencyCode, mstAmount, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    AmountMST amountMST(AmountCur amountCur)
    {
        return CurrencyExchangeHelper::mstAmount(amountCur, this.CurrencyCode, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchRateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2Euro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an amount from the accounting currency of the ledger to the Euro triangulation currency.
    /// </summary>
    /// <param name="_amountMST">
    /// The amount to convert.
    /// </param>
    /// <returns>
    /// The amount in Euro triangulation currency.
    /// </returns>
    AmountCur amountMST2Euro(AmountMST _amountMST)
    {
        CurrencyCode euroCurrencyCode;
        CurrencyExchangeHelper currencyExchangeHelper;
        
        euroCurrencyCode = Currency::findEuroCurrencyCode();
        
        if (euroCurrencyCode == '')
        {
            // if no currency code is selected as the euro currency, return 0
            return 0;
        }
        
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            this.InvoiceDate);
        
        currencyExchangeHelper.parmErrorType(AifErrorType::None);
        
        return currencyExchangeHelper.calculateAccountingToTransaction(euroCurrencyCode, _amountMST, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>billingClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>BillingClassification</c> value of the <c>CustBillingClassification</c> record that is specified by the <c>InvoiceId</c> value.
    /// </summary>
    /// <returns>
    /// The <c>BillingClassification</c> value of the <c>CustBillingClassification</c> table.
    /// </returns>
    display BillingClassification billingClassification()
    {
        return CustBillingClassification::find(CustTrans::findFromInvoice(this.InvoiceId).CustBillingClassification).BillingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscDate</Name>
				<Source><![CDATA[
    void calcCashDiscDate()
    {
        this.CustVendInvoiceJour::calcCashDiscDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue</Name>
				<Source><![CDATA[
    void calcDue()
    {
        this.CustVendInvoiceJour::calcDue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateLimit_ES</Name>
				<Source><![CDATA[
    public PaymDueDateLimit_ES calcDueDateLimit_ES(PaymTerm _paymTerm, TransDate _transDate)
    {
        return this.CustVendInvoiceJour::calcDueDateLimit_ES(_paymTerm, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMSTAmounts</Name>
				<Source><![CDATA[
    public void calcMSTAmounts()
    {
        this.InvoiceAmountMST = this.amountMST(this.InvoiceAmount);
        this.InvoiceRoundOffMST = this.amountMST(this.InvoiceRoundOff);
        this.SumMarkupMST = this.amountMST(this.SumMarkup);
        this.SumLineDiscMST = this.amountMST(this.SumLineDisc);
        this.EndDiscMST = this.amountMST(this.EndDisc);
        this.SalesBalanceMST = this.amountMST(this.SalesBalance);
        this.SumTaxMST = this.amountMST(this.SumTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeUpdatedGoodsInRoute_RU</Name>
				<Source><![CDATA[
    public boolean canBeUpdatedGoodsInRoute_RU()
    {
        CustInvoiceTrans custInvoiceTrans;
        
        while select custInvoiceTrans
            where custInvoiceTrans.SalesId == this.SalesId
               && custInvoiceTrans.InvoiceId == this.InvoiceId
               && custInvoiceTrans.InvoiceDate == this.InvoiceDate
               && custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            if (custInvoiceTrans.qtyToDelivery_RU())
            {
                return true;
            }
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscTxt_LanguageId</Name>
				<Source><![CDATA[
    display CashDiscFreeTxt cashDiscTxt_LanguageId()
    {
        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(this.TableId, this.RecId))
        {
            boolean isCashDiscCalculatedOnAmountInclTaxForCust = TaxCashDiscountParametersHelper::cashDiscInclTax(ModuleCustVend::Cust);

            return CashDisc::cashDiscTxt(this.CashDiscCode,
                                         this.DocumentDate ? this.DocumentDate : this.InvoiceDate,
                                         isCashDiscCalculatedOnAmountInclTaxForCust,
                                         this.InvoiceAmount,
                                         this.InvoiceAmount - this.SumTax,
                                         this.CurrencyCode,
                                         this.CashDiscDate,
                                         this.CashDisc,
                                         this.LanguageId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    display ContactPersonName contactPersonName()
    {
        return ContactPerson::name(this.ContactPersonId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargin</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates the contribution margin for the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <returns>
    ///   The contribution margin.
    /// </returns>
    /// <remarks>
    ///   This method expects the <c>ExchRate</c>, <c>ExchRateSecondary</c>, and
    ///   <c>Triangulation</c> fields to have been selected on the <c>CustInvoiceJour</c>
    ///   record when it is called.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    display SalesContributionMargin contributionMargin()
    {
        SalesContributionMargin contributionMargin;
        CustInvoiceTrans custInvoiceTrans;
        boolean linesFound = false;
        
        while select custInvoiceTrans
            index hint InvoiceIdx
            where custInvoiceTrans.SalesId == this.SalesId &&
                  custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                  custInvoiceTrans.InvoiceId == this.InvoiceId &&
                  custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            contributionMargin += custInvoiceTrans.calcContributionMargin(this);
            linesFound = true;
        }
        
        if (!linesFound)
        {
            contributionMargin = this.SalesBalance;
        }
        
        return contributionMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMarginMST</Name>
				<Source><![CDATA[
    display SalesContributionMarginMST contributionMarginMST()
    {
        SalesContributionMarginMST contributionMargin;
        CustInvoiceTrans custInvoiceTrans;
        boolean linesFound = false;
        
        while select custInvoiceTrans
            index hint InvoiceIdx
            where custInvoiceTrans.SalesId == this.SalesId &&
                  custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                  custInvoiceTrans.InvoiceId == this.InvoiceId &&
                  custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            contributionMargin += custInvoiceTrans.contributionMarginMST();
            linesFound = true;
        }
        
        if (!linesFound)
        {
            contributionMargin = this.SalesBalanceMST;
        }
        
        return contributionMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionRatio</Name>
				<Source><![CDATA[
    display SalesContributionRatio contributionRatio()
    {
        if (this.SalesBalance)
            return (this.contributionMargin() / this.SalesBalance) * 100;
        
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>CustInvoiceJour</c> table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that is applied to the <c>defaultDimension</c> field on the <c>CustInvoiceJour</c>
    /// table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>CustInvoiceJour</c> table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns type of facture correction for current record.
    /// </summary>
    /// <returns>
    /// <c>FactureCorrectionType_RU</c> value.
    /// </returns>
    public FactureCorrectionType_RU correctionType_RU()
    {
        return CustInvoiceJourCorrectionType_RU::correctionType(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValue</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SalesCostValueInvoice costValue()
    {
        SalesCostValueInvoice costValue = 0;
        CustInvoiceTrans custInvoiceTrans;
        
        while select custInvoiceTrans
            index hint InvoiceIdx
            where custInvoiceTrans.SalesId == this.SalesId &&
                  custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                  custInvoiceTrans.InvoiceId == this.InvoiceId
        {
            costValue += custInvoiceTrans.costValue();
        }
        
        return costValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create a payment schedule.
    /// </summary>
    /// <param name="_salesTotals">
    /// An instance of SalesTotals class.
    /// </param>
    /// <param name="_skipVersionChangeCheck">
    /// Skip version change check.
    /// </param>
    void createPaymentSched(SalesTotals _salesTotals = NULL, boolean _skipVersionChangeCheck = false)
    {
        this.CustVendInvoiceJour::createPaymentSched(_salesTotals, _skipVersionChangeCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check is this record a credit note document.
    /// </summary>
    /// <returns>
    ///     True, if the document is the credit note
    /// </returns>
    boolean creditNote()
    {
        // <GEERU>
        if (this.returnLinesExist_W())
        {
            return true;
        }
        // </GEERU>
        if (this.InvoiceAmount < 0)
            return true;
        
        // <GEECZ>
        if (this.custInvoiceJour_W().CashDiscOrigInvoiceCustTrans_CZ)
        {
            return true;
        }
        // </GEECZ>
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossrate</Name>
				<Source><![CDATA[
    display ExchRate crossrate()
    {
        if (! this.ExchRateSecondary)
            return this.ExchRate;
        
        return (this.ExchRateSecondary / this.ExchRate)*100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceJour_BR</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceJour_BR</c> record
    /// </returns>
    public CustInvoiceJour_BR custInvoiceJour_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceJour_FR</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceJour_FR</c> record
    /// </returns>
    public CustInvoiceJour_FR custInvoiceJour_FR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_FR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceJour_IN</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceJour_IN</c> record.
    /// </returns>
    public CustInvoiceJour_IN custInvoiceJour_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>CustInvoiceJour_Intrastat</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public CustInvoiceJour_Intrastat custInvoiceJour_Intrastat()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_Intrastat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_Officials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>CustInvoiceJour_Officials</c> extension table record.
    /// </summary>
    /// <returns>
    /// The extension table record related to current record.
    /// </returns>
    public CustInvoiceJour_Officials custInvoiceJour_Officials()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_Officials));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceJour_PL</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceJour_PL</c> record
    /// </returns>
    public CustInvoiceJour_PL custInvoiceJour_PL()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_PL));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceJour_RU</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceJour_RU</c> record
    /// </returns>
    public CustInvoiceJour_RU custInvoiceJour_RU()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInvoiceJour_W</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceJour_W</c> record
    /// </returns>
    public CustInvoiceJour_W custInvoiceJour_W()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJour_W));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJourExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the TH extension table of the current buffer
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceJourExtensionTH</c>
    /// </returns>
    public CustInvoiceJourExtensionTH custInvoiceJourExtensionTH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(CustInvoiceJourExtensionTH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTable</Name>
				<Source><![CDATA[
    CustInvoiceTable custInvoiceTable(boolean _update = false)
    {
        CustInvoiceTable custInvoiceTable;
        
        custInvoiceTable.selectForUpdate(_update);
        
        select custInvoiceTable
            where custInvoiceTable.InvoiceId == this.InvoiceId &&
                  custInvoiceTable.InvoiceDate == this.InvoiceDate &&
                  custInvoiceTable.NumberSequenceGroup == this.NumberSequenceGroup;
        
        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    CustTable custTable_InvoiceAccount(boolean update = false)
    {
        return CustTable::find(this.InvoiceAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_OrderAccount</Name>
				<Source><![CDATA[
    CustTable custTable_OrderAccount(boolean update = false)
    {
        return CustTable::find(this.OrderAccount, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    CustTrans custTrans()
    {
        CustTrans custTrans;
        
        this.CustVendInvoiceJour::custVendTrans(custTrans);
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitCreditNoteReasonCode_MY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays reason code of debit note or credit note.
    /// </summary>
    /// <returns>
    /// The reason code of debit note or credit note.
    /// </returns>
    display ReasonCode debitCreditNoteReasonCode_MY()
    {
        return ReasonTableRef::find(this.ReasonTableRef).Reason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        SourceDocumentHeader sourceDocumentHeader;
        SourceDocumentLine sourceDocumentLine;
        
        if (this.Proforma)
        {
            delete_from sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == this.SourceDocumentHeader
                   && sourceDocumentLine.SourceRelationType == tableNum(CustInvoiceTrans);
            
            delete_from sourceDocumentHeader
                where sourceDocumentHeader.RecId == this.SourceDocumentHeader
                   && sourceDocumentHeader.SourceRelationType == tableNum(CustInvoiceJour);
        }
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return DirUtility::replaceAddressTokenLanguage(LogisticsPostalAddress::findRecIdNoCache(this.DeliveryPostalAddress), this.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressing deliveryAddress_RU()
    {
        CustInvoiceJour_RU custInvoiceJourRU;
        CustTable custTableConsignee;
        Addressing address;
        
        custInvoiceJourRU = this.custInvoiceJour_RU();
        
        if (custInvoiceJourRU.ConsigneeAccount_RU)
        {
            custTableConsignee = CustTable::find(custInvoiceJourRU.ConsigneeAccount_RU);
            address = DirParty::getPostalAddressByType(custTableConsignee.Party, LogisticsLocationRoleType::Delivery);
            if (!address)
            {
                address = custTableConsignee.address();
            }
        }
        
        return address ? address : this.deliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAmountNotSettled</Name>
				<Source><![CDATA[
    display AmountCur displayAmountNotSettled()
    {
        return this.custTrans().transOpen().AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDomesticSalesTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the export sales domestic sales tax voucher.
    /// </summary>
    /// <returns>
    /// The export sales domestic sales tax voucher.
    /// </returns>
    public display PlVoucher displayDomesticSalesTaxVoucher()
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;
        PlVoucher domesticSalesTaxVoucher;
        
        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            exportSalesInvoiceDomesticTaxVoucher = ExportSalesInvoiceDomesticTaxVoucher::findByCustInvoiceJour(this.RecId);
            
            if (exportSalesInvoiceDomesticTaxVoucher && exportSalesInvoiceDomesticTaxVoucher.IsPosted)
            {
                domesticSalesTaxVoucher = exportSalesInvoiceDomesticTaxVoucher.Voucher;
            }
        }
        
        return domesticSalesTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInterestAmount</Name>
				<Source><![CDATA[
    display AmountCur displayInterestAmount()
    {
        return this.custTrans().transOpen().interestAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLastInterestDate</Name>
				<Source><![CDATA[
    display DueDate displayLastInterestDate()
    {
        CustTransDetails custTransDetails = new CustTransDetails(this.custTrans());
        
        return custTransDetails.lastInterestDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymMode</Name>
				<Source><![CDATA[
    display CustPaymMode displayPaymMode()
    {
        return this.custTrans().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesDate_W</Name>
				<Source><![CDATA[
    public display SalesDate_W displaySalesDate_W()
    {
        return this.custInvoiceJour_W().SalesDate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnpostedInterestAmount</Name>
				<Source><![CDATA[
    display AmountCur displayUnpostedInterestAmount()
    {
        CustTransOpen custTransOpen;
        
        custTransOpen = this.custTrans().transOpen();
        return custTransOpen.unpostedInterestAmount(custTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnpostedPaymentAmount</Name>
				<Source><![CDATA[
    display NoYes displayUnpostedPaymentAmount()
    {
        return this.custTrans().transOpen().unpostedPaymentAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispVATRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// display method for customer VAT registration number.
    /// </summary>
    /// <returns>
    /// display customer VAT registration number.
    /// </returns>
    public display TaxRegistrationNumber dispVATRegistrationNum()
    {
        CompanyInfoExtension_CN companyInfoExtension;
        
        companyInfoExtension = CompanyInfoExtension_CN::findByCompany(CompanyInfo::current());
        
        if (companyInfoExtension.TaxRegistrationType)
        {
            return TaxRegistration::getTaxRegistrationNumberFromCust(this.InvoiceAccount, this.InvoiceDate, companyInfoExtension.TaxRegistrationType);
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuAllowEdit_W</Name>
				<Source><![CDATA[
    // Documents attached to customer invoice are read only, but
    // some fields of invoice itself can be
    boolean docuAllowEdit_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateTime</Name>
				<Source><![CDATA[
    TransDateTime documentDateTime()
    {
        return DateTimeUtil::newDateTime(this.DocumentDate, 0 , DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscEuro</Name>
				<Source><![CDATA[
    display SalesEndDiscAmount endDiscEuro()
    {
        return this.amountMST2Euro(this.EndDiscMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTORG12data_RU</Name>
				<Source><![CDATA[
    public boolean existsTORG12data_RU()
    {
        CustInvoiceTrans invoiceTrans;
        MarkupTrans trans;
        MarkupTable table;
        
        boolean ret = (this.custInvoiceJour_RU().CustInvoicePrintoutType_RU == CustInvoicePrintoutType_RU::TORG_12 ||
                       this.InvoiceRoundOff ||
                       this.EndDisc);
        
        ret = ret ||
              MarkupTrans::existOfTypeCustVend_RU(this.TableId, this.RecId);
        
        if (! ret)
        {
            select firstonly RecId from trans
                exists join table
                where table.MarkupCode == trans.MarkupCode &&
                      (table.CustType == MarkupType::CustVend ||
                       table.VendType == MarkupType::CustVend)
                exists join invoiceTrans
                where trans.TransTableId == tableNum(CustInvoiceTrans) &&
                      trans.TransRecId == invoiceTrans.RecId &&
                      invoiceTrans.SalesId == this.SalesId &&
                      invoiceTrans.InvoiceId == this.InvoiceId &&
                      invoiceTrans.InvoiceDate == this.InvoiceDate &&
                      invoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup;
            ret = trans.RecId ? true : ret;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportTaxFileAllowed_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate the record for allow tax file export.
    /// </summary>
    /// <returns>
    /// return true if fullfill the IF statement.
    /// </returns>
    public boolean exportTaxFileAllowed_CN()
    {
        boolean ret;
        
        if (!(this.SalesType == SalesType::Sales
            && this.InvoiceAmount <= 0))
        {
            ret = true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureJourSortedList_RU</Name>
				<Source><![CDATA[
    public RecordSortedList factureJourSortedList_RU()
    {
        FactureJour_RU factureJour;
        FactureTrans_RU factureTrans;
        
        MarkupTrans markupTrans;
        CustInvoiceTrans custInvoiceTrans;
        
        RecordSortedList ret = this.CustVendInvoiceJour::factureJourSortedList_RU();
        
        while select factureJour
            join RecId from factureTrans
            where factureJour.Module == FactureModule_RU::Cust &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Cust &&
                  factureTrans.FactureLineType == FactureLineType_RU::InvoiceLine &&
                  factureTrans.InvoiceDate == this.InvoiceDate &&
                  factureTrans.InvoiceId == this.InvoiceId &&
                  factureTrans.SalesPurchId == this.SalesId &&
                  factureTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            if (! ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }
        
        // Header markups
        while select factureJour
            join RecId from factureTrans
            join RecId from markupTrans
            where factureJour.Module == FactureModule_RU::Cust &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Cust &&
                  factureTrans.FactureLineType == FactureLineType_RU::Markup &&
                  markupTrans.RecId == factureTrans.MarkupRefRecId &&
                  markupTrans.TransTableId == this.TableId &&
                  markupTrans.TransRecId == this.RecId
        {
            if ( ! ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }
        
        // Line markups
        while select factureJour
            join RecId from factureTrans
            join RecId from markupTrans
            join RecId from custInvoiceTrans
            where factureJour.Module == FactureModule_RU::Cust &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Cust &&
                  factureTrans.FactureLineType == FactureLineType_RU::Markup &&
                  markupTrans.RecId == factureTrans.MarkupRefRecId &&
                  markupTrans.TransTableId == custInvoiceTrans.TableId &&
                  custInvoiceTrans.RecId == markupTrans.TransRecId &&
                  custInvoiceTrans.SalesId == this.SalesId &&
                  custInvoiceTrans.InvoiceId == this.InvoiceId
        {
            if ( ! ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }
        
        // Invoice round-offs && discounts
        while select factureJour
            exists join factureTrans
            where factureJour.Module == FactureModule_RU::Cust &&
                  factureJour.CustVendInvoiceAccount == this.InvoiceAccount &&
                  factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module == FactureModule_RU::Cust &&
                 (factureTrans.FactureLineType == FactureLineType_RU::InvoiceEndDisc ||
                  factureTrans.FactureLineType == FactureLineType_RU::InvoiceRoundOff) &&
                  factureTrans.InvoiceDate == this.InvoiceDate &&
                  factureTrans.InvoiceId == this.InvoiceId &&
                  factureTrans.SalesPurchId == this.SalesId &&
                  factureTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            if (! ret.find(factureJour))
            {
                ret.ins(factureJour);
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>FiscalDocument_BR</c> related to the <c>custInvoiceJour</c>
    /// </summary>
    /// <returns>
    /// Returns a <c>FiscalDocument_BR</c> record.
    /// </returns>
    public FiscalDocument_BR fiscalDocument_BR()
    {
        FiscalDocument_BR fiscalDocument;
        
        select fiscalDocument
            where fiscalDocument.RefTableId == this.TableId
                && fiscalDocument.RefRecId == this.RecId;
        
        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalInvoiceAccount_PL</Name>
				<Source><![CDATA[
    private CustTable fiscalInvoiceAccount_PL()
    {
        return CustTable::find(this.custInvoiceJour_PL().FiscalInvoiceAccount_PL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalInvoiceAddressing_PL</Name>
				<Source><![CDATA[
    display Addressing fiscalInvoiceAddressing_PL()
    {
        return this.fiscalInvoiceAccount_PL().address();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalInvoiceName_PL</Name>
				<Source><![CDATA[
    display Name fiscalInvoiceName_PL()
    {
        return this.fiscalInvoiceAccount_PL().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalOrderAccount_PL</Name>
				<Source><![CDATA[
    private CustTable fiscalOrderAccount_PL()
    {
        return CustTable::find(this.custInvoiceJour_PL().FiscalOrderAccount_PL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalOrderAddressing_PL</Name>
				<Source><![CDATA[
    display Addressing fiscalOrderAddressing_PL()
    {
        return this.fiscalOrderAccount_PL().address();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalOrderName_PL</Name>
				<Source><![CDATA[
    display Name fiscalOrderName_PL()
    {
        return this.fiscalOrderAccount_PL().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsigneeAccount_RU</Name>
				<Source><![CDATA[
    public CustAccountConsignee_RU getConsigneeAccount_RU()
    {
        return this.custInvoiceJour_RU().ConsigneeAccount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsignorAccount_RU</Name>
				<Source><![CDATA[
    public VendAccountConsignor_RU getConsignorAccount_RU()
    {
        return this.custInvoiceJour_RU().ConsignorAccount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrect_RU</Name>
				<Source><![CDATA[
    public Correct_RU getCorrect_RU()
    {
        return this.custInvoiceJour_RU().Correct_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedInvoiceDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CorrectedInvoiceDate_RUeId_RU</c> field of <c>CustInvoiceJour_RU</c> table
    /// record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CorrectedInvoiceDate_RU</c> value
    /// </returns>
    public CorrectedInvoiceDate_RU getCorrectedInvoiceDate_RU()
    {
        return this.custInvoiceJour_RU().CorrectedInvoiceDate_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CorrectedInvoiceId_RU</c> field of <c>CustInvoiceJour_RU</c> table
    /// record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CorrectedInvoiceId_RU</c> value
    /// </returns>
    public CorrectedInvoiceId_RU getCorrectedInvoiceId_RU()
    {
        return this.custInvoiceJour_RU().CorrectedInvoiceId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFacturedFully_RU</Name>
				<Source><![CDATA[
    public FacturedFully_RU getFacturedFully_RU()
    {
        return this.custInvoiceJour_RU().FacturedFully_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventProfileType_RU</Name>
				<Source><![CDATA[
    public InventProfileType_RU getInventProfileType_RU()
    {
        return this.custInvoiceJour_RU().InventProfileType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNoteType_MY</Name>
				<Source><![CDATA[
    private NoteType_MY getNoteType_MY()
    {
        if (this.InvoiceAmount < 0)
        {
            return NoteType_MY::CreditNote;
        }
        else if (this.InvoiceAmount >= 0 && this.custInvoiceJour_W().HasReference_MY)
        {
            return NoteType_MY::DebitNote;
        }
        else
        {
            return NoteType_MY::Blank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffSessionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the official's session identifier.
    /// </summary>
    /// <returns>
    /// An official's session identifier.
    /// </returns>
    public OffSessionId_RU getOffSessionId()
    {
        return this.custInvoiceJour_Officials().OffSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATOnPayment_RU</Name>
				<Source><![CDATA[
    public VATOnPayment_RU getVATOnPayment_RU()
    {
        return this.custInvoiceJour_RU().vatOnPayment_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFDIUUID_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique identification of CDFI document
    /// </summary>
    /// <returns>
    /// The CFDI identification
    /// </returns>
    public EInvoiceCFDIUUID_MX getCFDIUUID_MX()
    {
        return EInvoiceJour_MX::findByRef(this.TableId, this.RecId).CFDIUUID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFC_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer RFC
    /// </summary>
    /// <returns>
    /// The RFC number
    /// </returns>
    public RFC_MX getRFC_MX()
    {
        return this.custTable_InvoiceAccount().RFC_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupId</Name>
				<Source><![CDATA[
    CustVendGroupId groupId()
    {
        return this.custTable_OrderAccount().CustGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPositiveTrans_RU</Name>
				<Source><![CDATA[
    public boolean hasPositiveTrans_RU()
    {
        CustInvoiceTrans custInvoiceTrans;
        
        select firstonly RecId from custInvoiceTrans
            where custInvoiceTrans.SalesId == this.SalesId
               && custInvoiceTrans.InvoiceId == this.InvoiceId
               && custInvoiceTrans.InvoiceDate == this.InvoiceDate
               && custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
               && custInvoiceTrans.Qty > 0;
        
        return custInvoiceTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustFreeInvoiceCalcTotals</Name>
				<Source><![CDATA[
    void initFromCustFreeInvoiceCalcTotals(CustFreeInvoiceCalcTotals _custFreeInvoiceCalcTotals)
    {
        CustInvoiceJour_W custInvoiceJourW;
        
        this.SalesBalance = _custFreeInvoiceCalcTotals.custFreeInvoiceBalance();
        this.EndDisc = _custFreeInvoiceCalcTotals.custFreeInvoiceEndDisc();
        this.CashDisc = _custFreeInvoiceCalcTotals.custFreeInvoiceCashDisc();
        this.SumMarkup = _custFreeInvoiceCalcTotals.custFreeInvoiceMarkup();
        this.SumTax = _custFreeInvoiceCalcTotals.custFreeInvoiceTaxTotal();
        this.SumLineDisc = _custFreeInvoiceCalcTotals.custFreeInvoiceLineDisc();
        this.InvoiceRoundOff = _custFreeInvoiceCalcTotals.custFreeInvoiceRoundOff();
        this.InvoiceAmount = _custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount();
        this.ReverseChargeAmount = _custFreeInvoiceCalcTotals.totalTaxReverseCharge();

        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            
            if (PaymSched::find(this.PaymentSched).PaymBy == PaymSchedBy::AmountByPayment)
            {
                custInvoiceJourW.TaxWithholdAmount_IN = _custFreeInvoiceCalcTotals.custFreeInvoiceTaxWithholdTotal_IN();
            }
            
            custInvoiceJourW.SumTaxWithhold_IN = _custFreeInvoiceCalcTotals.custFreeInvoiceTaxWithholdTotal_IN();
            
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.NoteType_MY = this.getNoteType_MY();
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GMY>

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::FTI)
            || Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            TaxTransactionTaxIDHelper::saveTaxIdToCustVendJour(_custFreeInvoiceCalcTotals.tax(), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTriangulationAndExchRates</Name>
				<Source><![CDATA[
    private void setTriangulationAndExchRates(CustInvoiceTable _custInvoiceTable)
    {
        TransDate custInvoiceDate = _custInvoiceTable.getExchangeRateDate(this.InvoiceDate);
        this.Triangulation = _custInvoiceTable.euroTriangulation(custInvoiceDate);
        this.ExchRate = _custInvoiceTable.getExchRate(custInvoiceDate);
        this.ExchRateSecondary = _custInvoiceTable.getExchRateSecondary(custInvoiceDate);
        this.ReportingCurrencyExchangeRate = _custInvoiceTable.getReportingCurrencyExchRate(custInvoiceDate);
        this.ReportingCurrencyExchangeRateSecondary = _custInvoiceTable.getReportingCurrencyExchRateSecondary(custInvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTable</Name>
				<Source><![CDATA[
    void initFromCustInvoiceTable(CustInvoiceTable _custInvoiceTable, RefNum _refNum = RefNum::Cust)
    {
        // <GBR>
        CustInvoiceJour_BR custInvoiceJourBR;
        // </GBR>
        CustInvoiceJour_FR custInvoiceJourFR;
        // <GEERU><GEEU>

        CustInvoiceJour_W custInvoiceJourW;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        boolean countryRegion_EE = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]);
        // </GEEU></GEERU>
        // <GEERU>
        CustInvoiceJour_RU custInvoiceJourRU;
        // </GEERU>
        // <GMY>
        CustInvoiceTable_W custInvoiceTable_W;
        // </GMY>

        //<GTH>
        CustInvoiceJourExtensionTH custInvoiceJourExtensionTH;
        CustInvoiceTableExtensionTH custInvoiceTableExtensionTH;
        //</GTH>

        this.RefNum = _refNum;

        this.InvoiceDate = _custInvoiceTable.InvoiceDate;
        this.DocumentDate = _custInvoiceTable.DocumentDate;

        this.OrderAccount = _custInvoiceTable.OrderAccount;
        this.InvoiceAccount = _custInvoiceTable.InvoiceAccount;
        this.CustGroup = _custInvoiceTable.CustGroup;

        if (!_custInvoiceTable.PostalAddress)
        {
            this.setInvoiceAddress(_custInvoiceTable);
        }
        else
        {
            this.InvoicePostalAddress = _custInvoiceTable.PostalAddress;
            this.InvoicingName = _custInvoiceTable.Name;
        }

        if (!_custInvoiceTable.DeliveryLocation)
        {
            this.DeliveryPostalAddress = this.InvoicePostalAddress;
            this.DeliveryName = this.InvoicingName;
        }
        else
        {
            var deliveryLocation = LogisticsLocation::find(_custInvoiceTable.DeliveryLocation);
            this.DeliveryPostalAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(deliveryLocation.RecId);
            this.DeliveryName = deliveryLocation.Description;
        }

        //Intrastat
        this.DlvTerm = _custInvoiceTable.DlvTerm;
        
        this.DefaultDimension = _custInvoiceTable.DefaultDimension;
        this.Payment = _custInvoiceTable.Payment;
        this.PaymDayId = _custInvoiceTable.paymDayId();
        this.CashDiscCode = _custInvoiceTable.CashDiscCode;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDiscPercent = _custInvoiceTable.CashDiscPercent;
        }

        this.PaymentSched = _custInvoiceTable.PaymentSched;
        this.DueDate = _custInvoiceTable.DueDate;

        if (this.DueDate != _custInvoiceTable.paymentDueDate())
        {
            this.FixedDueDate = this.DueDate;
        }
        this.CashDiscDate = _custInvoiceTable.CashDiscDate;

        this.PostingProfile = _custInvoiceTable.PostingProfile;
        this.vatNum = _custInvoiceTable.vatNum;
        this.EnterpriseNumber = _custInvoiceTable.EnterpriseNumber;
        this.NumberSequenceGroup = _custInvoiceTable.NumberSequenceGroup;
        this.InclTax = _custInvoiceTable.InclTax;
        this.ReasonTableRef = _custInvoiceTable.CorrectionReasonCode;

        // <GEERU><GEEU>
        if (countryRegion_RU || countryRegion_EE)
        {
            if (_custInvoiceTable.InclTax)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00024, funcName());
            }

            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.SalesDate_W = _custInvoiceTable.SalesDate_W;
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GEEU></GEERU>

        this.TaxGroup = _custInvoiceTable.TaxGroup;
        this.CustomerRef = _custInvoiceTable.CustomerRef;
        this.PurchaseOrder = _custInvoiceTable.PurchOrderFormNum;
        this.LanguageId = _custInvoiceTable.LanguageId;
        this.WorkerSalesTaker = _custInvoiceTable.WorkerSalesTaker;

        this.CurrencyCode = _custInvoiceTable.CurrencyCode;
 
        // <GEEU>
        if (countryRegion_EE)
        {
            this.setTriangulationAndExchRates(_custInvoiceTable);

            if (SalesParameters::find().DateOfExchRate_W)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
            }
        }
        else
        {
            // </GEEU>
            if (CustInvoiceCancellingExchangeRateFlight::instance().isEnabled())
            {
                this.setTriangulationAndExchRates(_custInvoiceTable);
            }
            else
            {
                this.Triangulation = _custInvoiceTable.euroTriangulation(this.InvoiceDate);
                this.ExchRate = _custInvoiceTable.getExchRate(this.InvoiceDate);
                this.ExchRateSecondary = _custInvoiceTable.getExchRateSecondary(this.InvoiceDate);
                this.ReportingCurrencyExchangeRate = _custInvoiceTable.getReportingCurrencyExchRate(this.InvoiceDate);
                this.ReportingCurrencyExchangeRateSecondary = _custInvoiceTable.getReportingCurrencyExchRateSecondary(this.InvoiceDate);
            }
            // <GEEU>
        }
        // </GEEU>

        this.Listcode = _custInvoiceTable.Listcode;

        this.GiroType = _custInvoiceTable.GiroType;

        this.ContactPersonId = _custInvoiceTable.ContactPersonId;

        this.eInvoiceLineSpecific = _custInvoiceTable.eInvoiceLineSpec;

        if (_custInvoiceTable.eInvoiceLineSpec == NoYes::No)
        {
            this.eInvoiceAccountCode = _custInvoiceTable.eInvoiceAccountCode;
        }

        // <GEEU>
        if (countryRegion_EE)
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
            {
                custInvoiceJourW.CustBankAccount_LV = _custInvoiceTable.CustBankAccount_LV;
            }
            custInvoiceJourW.BankAccount_W = _custInvoiceTable.BankAccount_LV;
            custInvoiceJourW.CompanyCurBankAccount_W = _custInvoiceTable.CurBankAccount_LV;
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GEEU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custInvoiceJourBR = this.custInvoiceJour_BR();
            custInvoiceJourBR.CustFinalUser_BR = _custInvoiceTable.CustFinalUser_BR;
            custInvoiceJourBR.FiscalDocumentType_BR = _custInvoiceTable.FiscalDocumentType_BR;
            custInvoiceJourBR.SalesPurchOperationType_BR = _custInvoiceTable.SalesPurchOperationType_BR;
            custInvoiceJourBR.ServiceCodeOnDlvAddress_BR = _custInvoiceTable.ServiceCodeOnDlvAddress_BR;
            custInvoiceJourBR.FiscalEstablishment_BR = _custInvoiceTable.FiscalEstablishment_BR;
            custInvoiceJourBR.PresenceType = _custInvoiceTable.PresenceType_BR;
            this.packCustInvoiceJour_BR(custInvoiceJourBR);
        }
        // </GBR>

        // <GEERU>
        if (countryRegion_RU)
        {
            custInvoiceJourRU = this.custInvoiceJour_RU();
            custInvoiceJourRU.ConsigneeAccount_RU = _custInvoiceTable.ConsigneeAccount_RU;
            custInvoiceJourRU.ConsignorAccount_RU = _custInvoiceTable.ConsignorAccount_RU;
            custInvoiceJourRU.NonRealRevenue_RU = _custInvoiceTable.NonRealRevenue_RU;
            custInvoiceJourRU.vatOnPayment_RU = _custInvoiceTable.vatOnPayment_RU;
            custInvoiceJourRU.Correct_RU = _custInvoiceTable.Correct_RU;
            custInvoiceJourRU.CorrectedInvoiceId_RU = _custInvoiceTable.CorrectedInvoiceId_RU;
            custInvoiceJourRU.CorrectedInvoiceDate_RU = _custInvoiceTable.CorrectedInvoiceDate_RU;
            this.packCustInvoiceJour_RU(custInvoiceJourRU);
        }
        // </GEERU>

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.UnitedVATInvoice_LT = _custInvoiceTable.UnitedVATInvoice_LT;
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GEELT>

        this.SourceDocumentHeader = _custInvoiceTable.SourceDocumentHeader;
        this.SourceDocumentLine = _custInvoiceTable.SourceDocumentLine;

        this.ReceiptDateConfirmed_ES = _custInvoiceTable.DeliveryDate_ES;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            custInvoiceJourFR = this.custInvoiceJour_FR();
            custInvoiceJourFR.PrintOverdueFineTxt = _custInvoiceTable.PrintOverdueFineTxt_FR;
            this.packCustInvoiceJour_FR(custInvoiceJourFR);
        }

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            custInvoiceJourExtensionTH = this.custInvoiceJourExtensionTH();
            custInvoiceTableExtensionTH = _custInvoiceTable.custInvoiceTableExtensionTH();

            custInvoiceJourExtensionTH.RefInvoiceId = custInvoiceTableExtensionTH.RefInvoiceId;
            custInvoiceJourExtensionTH.RefInvoiceAmountCur = custInvoiceTableExtensionTH.RefInvoiceAmountCur;
            custInvoiceJourExtensionTH.NoteFormat = custInvoiceTableExtensionTH.NoteFormat;
            custInvoiceJourExtensionTH.ReasonTableRef = custInvoiceTableExtensionTH.ReasonTableRef;
            custInvoiceJourExtensionTH.TaxAgent = custInvoiceTableExtensionTH.TaxAgent;

            this.SysExtensionSerializerMap::packExtensionTable(custInvoiceJourExtensionTH);
        }
        //</GTH>

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(_custInvoiceTable, this);
        }

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            if (_custInvoiceTable.DocNumberingCode_LT)
            {
                custInvoiceJourW = this.custInvoiceJour_W();
                custInvoiceJourW.NumberSequenceCode_W = LtInvoiceAutoNumberingTable::find(_custInvoiceTable.DocNumberingCode_LT).NumberSequenceCode;
                this.packCustInvoiceJour_W(custInvoiceJourW);
            }
        }
        // </GEEU>

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = _custInvoiceTable.IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>

        if (CustPaymModeTable::find(_custInvoiceTable.PaymMode).IsSEPA)
        {
            if (_custInvoiceTable.DirectDebitMandate == 0)
            {
                this.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(_custInvoiceTable.InvoiceAccount);
            }
            else
            {
                this.DirectDebitMandate = _custInvoiceTable.DirectDebitMandate;
            }
        }

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            custInvoiceTable_W = _custInvoiceTable.custInvoiceTable_W();

            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.InvoiceType_MY = custInvoiceTable_W.InvoiceType_MY;
            custInvoiceJourW.HasReference_MY = _custInvoiceTable.hasLinesWithRefrence_MY();
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GMY>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.ProvisionalAssessment_IN = _custInvoiceTable.ProvisionalAssessment_IN;
        }
        // </GIN>

        if (FeatureStateProvider::isFeatureEnabled(CompanyTaxRegistrationFeature::instance()))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceGB00021, funcName());

            this.TaxID = _custInvoiceTable.TaxId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable(CustTable custTable)
    {
        CustInvoiceJour_W custInvoiceJourW;
        
        this.RefNum = RefNum::Cust;
        
        this.TaxGroup = TaxSales::custTaxGroup(custTable.DlvTerm, custTable.TaxGroup);
        this.Payment = custTable.PaymTermId;
        this.PaymDayId = custTable.PaymDayId ? custTable.PaymDayId : PaymTerm::find(this.Payment).PaymDayId;
        
        if (!this.InvoiceDate)
            this.InvoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        
        this.calcDue();
        
        this.LanguageId = DirPartyTable::findRec(custTable.Party).LanguageId;
        this.CustGroup = custTable.CustGroup;
        
        this.OrderAccount = custTable.AccountNum;
        this.InvoiceAccount = this.InvoiceAccount ? this.InvoiceAccount : custTable.InvoiceAccount ? custTable.InvoiceAccount : custTable.AccountNum;
        this.vatNum = this.custTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.InvoiceDate);
        this.EnterpriseNumber = this.custTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.InvoiceDate);
        
        this.NumberSequenceGroup = custTable.NumberSequenceGroup;
        
        this.DefaultDimension = custTable.DefaultDimension;
        this.CashDiscCode = custTable.CashDisc;
        this.DlvTerm = custTable.DlvTerm;
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.DlvMode = custTable.DlvMode;
        }
        this.PostingProfile = CustParameters::find().PostingProfile;
        this.PaymentSched = custTable.PaymSched ? custTable.PaymSched: PaymTerm::find(this.Payment).PaymSched;
        
        this.CurrencyCode = custTable.Currency;
        this.ExchRate = ExchangeRateHelper::exchRate(this.CurrencyCode, this.InvoiceDate);
        this.ExchRateSecondary = ExchangeRateHelper::exchRateSecond(this.CurrencyCode, this.InvoiceDate);
        this.Triangulation = Currency::triangulation(this.CurrencyCode,this.InvoiceDate);
        
        this.GiroType = custTable.GiroType;
        
        this.setInvoiceAddress();
        
        this.DeliveryName = this.InvoicingName;
        this.DeliveryPostalAddress = this.InvoicePostalAddress;

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForEUSalesList())
        {
            InventLocation inventLocation = InventLocation::find(this.inventLocationId);
            
            this.Listcode = EUSalesList::resolveListCodeByCountryState(LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress), inventLocation.logisticsPostalAddress());
        }
        else
        {
            this.Listcode = EUSalesList::resolveListCodeByCountryState(LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]))
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
            {
                custInvoiceJourW.CustBankAccount_LV = CustBankAccount::findDefault_LV(this.InvoiceAccount, this.CurrencyCode).AccountID;
            }
            custInvoiceJourW.BankAccount_W = BankAccountTable::findDefault_LV(CompanyInfoHelper::standardCurrency()).AccountID;
            custInvoiceJourW.CompanyCurBankAccount_W = BankAccountTable::findDefault_LV(this.CurrencyCode).AccountID;
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTrans</Name>
				<Source><![CDATA[
    void initFromCustTrans(CustTrans custTrans)
    {
        CustTable custTable = CustTable::find(custTrans.AccountNum);
        
        this.NumberSequenceGroup = custTable.NumberSequenceGroup;
        this.LanguageId = DirPartyTable::findRec(custTable.Party).LanguageId;
        
        this.CustVendInvoiceJour::initFromCustVendTrans(custTrans);
        this.vatNum = this.custTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custTrans.TransDate);
        this.EnterpriseNumber = this.custTable_InvoiceAccount().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, custTrans.TransDate);
        
        this.TaxInvoiceSalesId = custTrans.TaxInvoiceSalesId;
        this.ReasonTableRef = custTrans.ReasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Cust)
        {
            return;
        }
        
        this.initFromCustTable(CustTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension()));
        
        this.Listcode = _ledgerJournalTrans.Listcode;
        
        this.CustVendInvoiceJour::initFromLedgerJournalTrans(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRBOTransactionTable</Name>
				<Source><![CDATA[
    void initFromRBOTransactionTable(RetailTransactionTable _transactionTable)
    {
        CustTable tCustTable = CustTable::find(_transactionTable.CustAccount);
        LogisticsPostalAddress address =tCustTable.postalAddress();
        
        this.RefNum = RefNum::SalesOrder;
        this.SalesType = SalesType::Sales;
        this.SalesId = _transactionTable.TransactionId;
        this.OrderAccount = _transactionTable.CustAccount;
        this.InvoiceAccount = tCustTable.InvoiceAccount ? tCustTable.InvoiceAccount : _transactionTable.CustAccount;
        
        this.TaxGroup = TaxSales::custTaxGroup(tCustTable.DlvTerm, tCustTable.TaxGroup);
        this.vatNum = tCustTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _transactionTable.transDate);
        this.EnterpriseNumber = tCustTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _transactionTable.transDate);
        
        this.DeliveryPostalAddress = address.RecId;
        
        this.setInvoiceAddress();
        
        if (!this.InvoicePostalAddress && this.DeliveryPostalAddress)
        {
            this.InvoicePostalAddress = this.DeliveryPostalAddress;
        }
        
        this.LanguageId = tCustTable.languageId();
        this.CustGroup = tCustTable.CustGroup;
        this.Payment = tCustTable.PaymTermId;
               
        this.PaymDayId = this.custTable_InvoiceAccount().PaymDayId;
        
        if (!this.PaymDayId)
            this.PaymDayId = PaymTerm::find(this.Payment).PaymDayId;
               
        this.PostingProfile = CustParameters::find().PostingProfile;
        
        this.CashDisc = 0;
        this.Qty = 0;
        this.Volume = 0;
        this.Weight = 0;
        this.SumLineDisc = 0;
        this.SalesBalance = 0;
        this.EndDisc = 0;
        this.InvoiceAmount = 0;
               
        this.Qty = _transactionTable.NumberOfItems;
        this.CurrencyCode = _transactionTable.Currency; // The currency code needs to be set to which the sale was made in.
        
        this.ExchRate = ExchangeRateHelper::exchRate(this.CurrencyCode, this.InvoiceDate);
        this.ExchRateSecondary = ExchangeRateHelper::exchRateSecond(this.CurrencyCode, this.InvoiceDate);
        this.Triangulation = Currency::triangulation(this.CurrencyCode,this.InvoiceDate);
        // ATH
        
        this.OnAccountAmount = 0;
        
        this.DefaultDimension = _transactionTable.DefaultDimension;
        
        this.DlvTerm = tCustTable.DlvTerm;
        this.DlvMode = tCustTable.DlvMode;
        
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForEUSalesList())
        {
            InventLocation inventLocation = InventLocation::find(this.inventLocationId);
            
            this.Listcode = EUSalesList::resolveListCodeByCountryState(inventLocation.logisticsPostalAddress(), address);
        }
        else
        {
            this.Listcode = EUSalesList::resolveListCodeByCountryState(address);
        }

        this.PaymentSched = PaymTerm::find(tCustTable.PaymTermId).PaymSched;
        if (tCustTable.PaymSched)
        {
            this.PaymentSched = tCustTable.PaymSched;
        }
        this.GiroType = tCustTable.GiroType;
        this.ContactPersonId = tCustTable.ContactPersonId;
        this.InventLocationId = tCustTable.InventLocation;
               
        if (tCustTable.interCompanyTradingRelationActive())
        {
            this.InterCompanyCompanyId = tCustTable.interCompanyTradingPartnerCompanyID();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRetailSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds retail info to <c>RetailCustInvoiceJourTable</c>.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record from which invoice is created.
    /// </param>
    private void initFromRetailSalesTable(SalesTable _salesTable)
    {
        RetailSalesTable retailSalesTable;
        RetailCustInvoiceJourTable retailCustInvoiceJour;
        
        retailSalesTable = _salesTable.retailSalesTable();
        retailCustInvoiceJour = this.retailCustInvoiceJourTable();

        retailCustInvoiceJour.RetailChannel = retailSalesTable.RetailChannel;
        retailCustInvoiceJour.RetailHourOfDay = retailSalesTable.RetailHourOfDay;
        retailCustInvoiceJour.RetailStoreId = retailSalesTable.RetailStoreId;
        retailCustInvoiceJour.RetailTerminalId = retailSalesTable.RetailTerminalId;
        retailCustInvoiceJour.omInternalOrganization = retailSalesTable.omInternalOrganization;
        retailCustInvoiceJour.RetailStatementId = retailSalesTable.StatementId;

        this.packRetailCustInvoiceJourTable(retailCustInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>CustInvoiceJour</c> record from the specified <c>SalesParmTable</c> record.
    /// </summary>
    /// <param name="_salesParmTable">
    ///    The <c>SalesParmTable</c> record to use to initialize the <c>CustInvoiceJour</c> record.
    /// </param>
    void initFromSalesParmTable(SalesParmTable _salesParmTable)
    {
        CustInvoiceJour_FR custInvoiceJourFR;
        // <GBR>
        CustInvoiceJour_BR custInvoiceJourBR;
        // </GBR>
        //<GIN>
        CustInvoiceJour_IN custInvoiceJourIN;
        //</GIN>
        // <GEEU>
        CustInvoiceJour_W custInvoiceJourW;
        CustInvoiceJour_Officials custInvoiceJour_Officials;
        #EECountryRegionCodes
        // </GEEU>
        // <GEERU>
        CustInvoiceJour_RU custInvoiceJourRU;
        // </GEERU>
        
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAllandRU))
        {
            custInvoiceJour_Officials = this.custInvoiceJour_Officials();
            custInvoiceJour_Officials.OffSessionId = _salesParmTable.OffSessionId_RU;
            this.packCustInvoiceJour_Officials(custInvoiceJour_Officials);
        }
        // </GEEU>
        
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custInvoiceJourRU = this.custInvoiceJour_RU();
            custInvoiceJourRU.AttorneyId_RU = _salesParmTable.AttorneyId_RU;
            custInvoiceJourRU.AttorneyDate_RU = _salesParmTable.AttorneyDate_RU;
            custInvoiceJourRU.AttorneyIssuedName_RU = _salesParmTable.AttorneyIssuedName_RU;
            custInvoiceJourRU.vatOnPayment_RU = _salesParmTable.vatOnPayment_RU;
            custInvoiceJourRU.Correct_RU = _salesParmTable.Correct_RU;
            custInvoiceJourRU.CorrectedInvoiceId_RU = _salesParmTable.CorrectedInvoiceId_RU;
            custInvoiceJourRU.CorrectedInvoiceDate_RU = _salesParmTable.CorrectedInvoiceDate_RU;
            
            if (_salesParmTable.PostingProfile_RU)
            {
                this.PostingProfile = _salesParmTable.PostingProfile_RU;
            }
            
            custInvoiceJourRU.InventProfileType_RU = _salesParmTable.InventProfileType_RU;
            custInvoiceJourRU.InvoicePostingType_RU = _salesParmTable.InvoicePostingType_RU;
            custInvoiceJourRU.InventOwnerId_RU = _salesParmTable.InventOwnerId_RU;
            this.packCustInvoiceJour_RU(custInvoiceJourRU);
            
            if (!this.NumberSequenceGroup)
            {
                this.NumberSequenceGroup = InventProfileTypeSetup_RU::find(_salesParmTable.InventProfileType_RU).NumberSequenceGroupId;
            }
        }
        // </GEERU>
        
        this.FixedDueDate = _salesParmTable.FixedDueDate;
        this.DocumentDate = _salesParmTable.DocumentDate;
        
        this.CashDiscBaseDate = _salesParmTable.CashDiscBaseDate;
        
        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(_salesParmTable, this);
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custInvoiceJourBR = this.custInvoiceJour_BR();
            custInvoiceJourBR.FiscalDocumentType_BR = _salesParmTable.FiscalDocumentType_BR;
            custInvoiceJourBR.FiscalEstablishment_BR = InventSite::find(_salesParmTable.InventSiteId).fiscalEstablishment().RecId;
            this.packCustInvoiceJour_BR(custInvoiceJourBR);
        }
        // </GBR>
        
        if (BankLCExportFeatureChecker::checkBankLCExportEnabled())
        {
            this.BankLCExportLine = _salesParmTable.BankLCExportLine;
        }
        
        // <GEEU>
        if (CustInvoiceJour_W::isLegalEntityInCountryRegion())
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.SalesDate_W = _salesParmTable.SalesDate_W;
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GEEU>
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            custInvoiceJourFR = this.custInvoiceJour_FR();
            custInvoiceJourFR.PrintOverdueFineTxt = _salesParmTable.PrintOverdueFineTxt_FR;
            this.packCustInvoiceJour_FR(custInvoiceJourFR);
        }
        
        if (CustParameters::find().EntryCertificateManagementEnabled_W)
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.EntryCertificateReceiptStatus_W = _salesParmTable.EntryCertificateRequired_W ?
                                                                EntryCertificateReceiptStatus_W::Required :
                                                                EntryCertificateReceiptStatus_W::NotRequired;
            // <GMY>
            if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
            {
                custInvoiceJourW.InvoiceType_MY = _salesParmTable.InvoiceType_MY;
            }
            // </GMY>
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        //<GIN>
        if (TaxParameters::isExciseEnable_IN() && _salesParmTable.salesTable().isExcisable_IN())
        {
            custInvoiceJourIN = this.custInvoiceJour_IN();
            custInvoiceJourIN.ExciseInvoiceAddress = SalesParmUpdate_IN::findBySalesParmUpdate(SalesParmUpdate::find(_salesParmTable.ParmId).RecId).ExciseInvoiceAddress;
            this.packCustInvoiceJour_IN(custInvoiceJourIN);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.ProvisionalAssessment_IN = _salesParmTable.ProvisionalAssessment_IN;
        }
        //</GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    public void initFromSalesTable(SalesTable salesTable, SalesParmTable _salesParmTable = null)
    {
        // <GEERU><GEEU>
        boolean countryRegion_EEU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]);
        // </GEEU></GEERU>
        // <GEEU>
        TransDate exchRateDate;
        CustInvoiceJour_W custInvoiceJourW;
        // </GEEU>
        // <GEERU>
        SalesTable_RU salesTableRU;
        CustInvoiceJour_RU custInvoiceJourRU;
        // </GEERU>
        // <GBR>
        CustInvoiceJour_BR custInvoiceJourBR;
        SalesTable_BR salesTable_BR;
        // </GBR>
        //<GTH>
        CustInvoiceJourExtensionTH custInvoiceJourExtensionTH;
        SalesTableExtensionTH salesTableExtensionTH;
        //</GTH>

        CustInvoiceJour_Intrastat custInvoiceJour_Intrastat;

        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(CustInvoiceJour_Intrastat)))
        {
            custInvoiceJour_Intrastat = this.custInvoiceJour_Intrastat();
        }

        this.RefNum = RefNum::SalesOrder;
        this.SalesType = salesTable.SalesType;
        this.SalesId = salesTable.SalesId;
        this.OrderAccount = salesTable.CustAccount;
        this.InvoiceAccount = salesTable.InvoiceAccount;
        this.TaxGroup = salesTable.TaxGroup;
        this.vatNum = salesTable.vatNum;
        this.EnterpriseNumber = salesTable.EnterpriseNumber;

        this.DeliveryPostalAddress = salesTable.DeliveryPostalAddress;

        if (salesTable.ProjId)
            this.setInvoiceAddressFromProject(salesTable.ProjId);
        else
            this.setInvoiceAddress(salesTable);

        if (!this.InvoicePostalAddress && this.DeliveryPostalAddress)
        {
            this.InvoicePostalAddress = this.DeliveryPostalAddress;
        }
        if (CustParameters::find().CustNameFromVATNum)
        {
            this.InvoicingName = salesTable.SalesName;
        }

        this.LanguageId = this.getLanguageId(salesTable);
        this.CustGroup = salesTable.CustGroup;

        this.WorkerSalesTaker = salesTable.WorkerSalesTaker;
        this.Payment = salesTable.Payment;
        this.PaymDayId = salesTable.paymDayId();
        this.CashDiscCode = salesTable.CashDisc;

        if (TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDiscPercent = salesTable.CashDiscPercent;
        }

        this.PostingProfile = salesTable.PostingProfile;
        this.NumberSequenceGroup = salesTable.NumberSequenceGroup;
        this.InclTax = salesTable.InclTax;
        this.SalesOriginId = salesTable.SalesOriginId;

        this.CashDisc = 0;
        this.Qty = 0;
        this.Volume = 0;
        this.Weight = 0;
        this.SumLineDisc = 0;
        this.SalesBalance = 0;
        this.EndDisc = 0;
        this.InvoiceAmount = 0;

        this.CurrencyCode = salesTable.CurrencyCode;
        this.ReasonTableRef = salesTable.CreditNoteReasonCode;
        // <GEEU>
        if (countryRegion_EEU)
        {
            exchRateDate = _salesParmTable.getExchRateDate(this.InvoiceDate, salesTable);

            this.Triangulation = salesTable.euroTriangulation(exchRateDate);
            this.ExchRate = salesTable.exchRate(exchRateDate);
            this.ExchRateSecondary = salesTable.exchRateSecondary(exchRateDate);
            this.ReportingCurrencyExchangeRate = salesTable.reportingCurrencyExchRate(exchRateDate);
            this.ReportingCurrencyExchangeRateSecondary = salesTable.reportingCurrencyExchRateSecondary(exchRateDate);

            if (SalesParameters::find().DateOfExchRate_W)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
            }
        }
        else
        {
            // </GEEU>
            this.Triangulation = salesTable.euroTriangulation(this.InvoiceDate);
            this.ExchRate = salesTable.exchRate(this.InvoiceDate);
            this.ExchRateSecondary = salesTable.exchRateSecondary(this.InvoiceDate);
            this.ReportingCurrencyExchangeRate = salesTable.reportingCurrencyExchRate(this.InvoiceDate);
            this.ReportingCurrencyExchangeRateSecondary = salesTable.reportingCurrencyExchRateSecondary(this.InvoiceDate);
            // <GEEU>
        }
        // </GEEU>

        this.OnAccountAmount = 0;
        this.DefaultDimension = salesTable.DefaultDimension;

        this.PurchaseOrder = salesTable.PurchOrderFormNum;
        this.CustomerRef = salesTable.CustomerRef;
        this.DlvTerm = salesTable.DlvTerm;
        this.DlvMode = salesTable.DlvMode;

        this.Listcode = salesTable.Listcode;
        this.PaymentSched = salesTable.PaymentSched;
        this.GiroType = salesTable.GiroType;
        this.ContactPersonId = salesTable.ContactPersonId;
        this.InventLocationId = salesTable.InventLocationId;

        this.ShipCarrierBlindShipment = salesTable.ShipCarrierBlindShipment;

        this.InterCompanyCompanyId = salesTable.InterCompanyCompanyId;
        this.InterCompanyPurchId = salesTable.InterCompanyPurchId;

        this.eInvoiceLineSpecific = salesTable.eInvoiceLineSpec;

        if (salesTable.eInvoiceLineSpec == NoYes::No)
        {
            this.eInvoiceAccountCode = salesTable.eInvoiceAccountCode;
        }
        if (RetailParameters::isRetailEnabledAndInUse())
        {
            this.initFromRetailSalesTable(salesTable);
        }

        this.ReturnItemNum = salesTable.ReturnItemNum;
        this.ReturnReasonCodeId = salesTable.ReturnReasonCodeId;
        this.ReturnStatus = salesTable.ReturnStatus;

        if (FinTagConfiguration::isFinTagConfigurationSet(salesTable.DataAreaId) && SalesOrderFinTagFeature::isEnabled())
        {
            this.FinTag = salesTable.FinTag;
        }

        // Added Email field to table
        this.mcrEmail = salesTable.Email;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            this.ReceiptDateConfirmed_ES = salesTable.ReceiptDateConfirmed;
        }

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL]))
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
            {
                custInvoiceJourW.CustBankAccount_LV = salesTable.CustBankAccount_LV;
            }
            custInvoiceJourW.BankAccount_W = salesTable.BankAccount_LV;
            custInvoiceJourW.CompanyCurBankAccount_W = salesTable.CurBankAccount_LV;
            custInvoiceJourW.IntrastatAddValue_LV = salesTable.IntrastatAddValue_LV;
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GEEU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            salesTable_BR = salesTable.salesTable_BR();

            custInvoiceJourBR = this.custInvoiceJour_BR();
            custInvoiceJourBR.SalesPurchOperationType_BR = salesTable_BR.SalesPurchOperationType_BR;
            custInvoiceJourBR.CustFinalUser_BR = salesTable_BR.CustFinalUser_BR;
            custInvoiceJourBR.PresenceType = salesTable_BR.PresenceType;
            custInvoiceJourBR.ServiceCodeOnDlvAddress_BR = salesTable_BR.ServiceCodeOnDlvAddress_BR;
            this.packCustInvoiceJour_BR(custInvoiceJourBR);
        }
        // </GBR>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesTableRU = salesTable.salesTable_RU();
            custInvoiceJourRU = this.custInvoiceJour_RU();
            custInvoiceJourRU.ConsigneeAccount_RU = salesTableRU.ConsigneeAccount_RU;
            custInvoiceJourRU.ConsignorAccount_RU = salesTableRU.ConsignorAccount_RU;
            custInvoiceJourRU.SettleVoucher_RU = salesTable.SettleVoucher;
            this.packCustInvoiceJour_RU(custInvoiceJourRU);
        }
        // </GEERU>

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.UnitedVATInvoice_LT = salesTable.UnitedVATInvoice_LT;
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GEELT>

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(salesTable, this);
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = salesTable.IntrastatFulfillmentDate_HU;
        }
        // </GEEHU>

        // <GEECZ>
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(CustInvoiceJour_Intrastat)))
        {
            custInvoiceJour_Intrastat.SpecialMovement_CZ = salesTable.salesTable_Intrastat().SpecialMovement_CZ;
            this.packCustInvoiceJour_Intrastat(custInvoiceJour_Intrastat);
        }
        // </GEECZ>

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            custInvoiceJourExtensionTH = this.custInvoiceJourExtensionTH();
            salesTableExtensionTH = salesTable.salesTableExtensionTH();
            custInvoiceJourExtensionTH.RefInvoiceId = salesTableExtensionTH.RefInvoiceId;
            custInvoiceJourExtensionTH.RefInvoiceAmountCur = salesTableExtensionTH.RefInvoiceAmountCur;
            custInvoiceJourExtensionTH.NoteFormat = salesTableExtensionTH.NoteFormat;
            custInvoiceJourExtensionTH.ReasonTableRef = salesTableExtensionTH.ReasonTableRef;
            custInvoiceJourExtensionTH.TaxAgent = salesTableExtensionTH.TaxAgent;

            this.SysExtensionSerializerMap::packExtensionTable(custInvoiceJourExtensionTH);
        }
        //</GTH>

        if (CustPaymModeTable::find(salesTable.PaymMode).IsSEPA)
        {
            if (salesTable.DirectDebitMandate == 0)
            {
                this.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(salesTable.InvoiceAccount);
            }
            else
            {
                this.DirectDebitMandate = salesTable.DirectDebitMandate;
            }
        }

        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.InvoiceType_MY = salesTable.salesTable_W().InvoiceType_MY;
            custInvoiceJourW.HasReference_MY = salesTable.hasLinesWithRefrence_MY();
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTotals</Name>
				<Source><![CDATA[
    void initFromSalesTotals(SalesTotals _salesTotals, AmountCur _cashDiscAmount = 0, boolean _installmentEligible = false)
    {
        AmountCur markupinstallment;
        MCRSalesOrderType mcrSalesOrderType;
        CustInvoiceJour_W custInvoiceJourW;
        SalesTable salesTable;
        
        this.Qty = _salesTotals.totalQty();
        this.Weight = _salesTotals.totalWeight();
        this.Volume = _salesTotals.totalVolume();
        this.SalesBalance = _salesTotals.totalBalance();
        this.EndDisc = _salesTotals.totalEndDisc();
        
        if (TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDisc = _cashDiscAmount;
        }
        else
        {
            this.CashDisc = _salesTotals.totalCashDisc();
        }
        
        this.SumMarkup = _salesTotals.totalMarkup();
        this.SumTax = _salesTotals.totalTaxAmount();
        this.SumLineDisc = _salesTotals.totalLineDisc();
        this.InvoiceRoundOff = _salesTotals.totalRoundOff();
        this.InvoiceAmount = _salesTotals.totalAmount();
        this.ReverseChargeAmount = _salesTotals.totalTaxReverseCharge();
        
        salesTable = this.salesTable();
        if (RetailMCRChannelTable::mcrEnableOrderCompletion(salesTable))
        {
            markupinstallment = _salesTotals.mcrReturnInstallmentEligibleMarkUpTotal();
            
            if (this.SumMarkup == markupinstallment
                && !_installmentEligible)
            {
                mcrSalesOrderType = salesTable.mcrEvalSalesOrderType();
                
                if (mcrSalesOrderType == MCRSalesOrderType::InstallmentOnly
                    || mcrSalesOrderType == MCRSalesOrderType::OrderAndInstallment)
                {
                    this.InvoiceAmount = this.InvoiceAmount - markupinstallment;
                }
            }
        }
        
        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && TaxParameters::isCustomsEnable_IN())
        {
            this.InvoiceAmount = this.InvoiceAmount + _salesTotals.tax().getCustomsDuty_IN();
        }
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            
            if ( PaymSched::find(this.PaymentSched).PaymBy == PaymSchedBy::AmountByPayment)
            {
                custInvoiceJourW.TaxWithholdAmount_IN = _salesTotals.parmTaxWithholdAmount_IN();
            }
            
            custInvoiceJourW.SumTaxWithhold_IN = _salesTotals.parmTaxWithholdAmount_IN();
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            custInvoiceJourW = this.custInvoiceJour_W();
            custInvoiceJourW.NoteType_MY = this.getNoteType_MY();
            this.packCustInvoiceJour_W(custInvoiceJourW);
        }
        // </GMY>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.TaxInvoiceSalesId = NumberSeq::newGetNum(TaxParameters::numRefTaxInvoiceSalesId(), true).num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.calcMSTAmounts();
        
        ttsbegin;
        
        super();
        
        this.SysExtensionSerializerMap::postInsert();
               
        ttscommit;
        
        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasicSalesTax)) &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ExportSalesInvoice::insertForCustInvoiceJour(this.RecId);
        }
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            CustVendInvoiceJour::initRefOriginalInvoice_RU(this);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            BaseDocument_IT::insertForCustInvoiceJour(this);
        }

        if (RetailParameters::isRetailEnabledAndInUse())
        {
            // Order invoiced notification
            RetailEventNotificationAction::insertRetailOENAction(RetailEventNotificationType::OrderInvoiced, this.RecId, SalesTable::find(this.SalesId));

            if (RetailOrdersFeatureControl::useOrderShippedEventNotification())
            {
                // Order shipped notification (notification will only be sent if there is a sales line on the invoice journal with a shipment delivery mode.
                // This cannot be checked at this point because the invoice journal lines have not been inserted yet.
                RetailEventNotificationAction::insertRetailOENAction(RetailEventNotificationType::Shipment, this.RecId, SalesTable::find(this.SalesId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyAllocateMarkupAndConfirm</Name>
				<Source><![CDATA[
    private void intercompanyAllocateMarkupAndConfirm(Map _inventTransIdMap)
    {
        MapIterator miInventTransId;
        Map purchIdMap = new Map(new DictField(tableNum(PurchTable),fieldNum(PurchTable, PurchId)).baseType(), Types::Integer);
        PurchTable purchTable;
        PurchId interCompanyPurchId;
        InventTransId interCompanyInventTransId;
        
        if (!_inventTransIdMap)
        {
            return;
        }
        
        miInventTransId = new MapIterator(_inventTransIdMap);
        miInventTransId.begin();
        
        while (miInventTransId.more())
        {
            interCompanyInventTransId = miInventTransId.key();
            interCompanyPurchId = PurchLine::findInventTransId(interCompanyInventTransId).PurchId;
            
            if (!purchIdMap.exists(interCompanyPurchId))
            {
                purchTable = PurchTable::find(interCompanyPurchId);
                
                if (purchTable.isInterCompanyOrder() && !purchTable.InterCompanyDirectDelivery)
                {
                    InterCompanyPostPurch_PackingSlip::interCompanyMarkupAllocation(purchTable, this.InvoiceId, this.InvoiceDate);
                    purchTable.reread();
                }
                
                if (purchTable.DocumentState != VersioningDocumentState::Confirmed)
                {
                    PurchFormLetter::construct(DocumentStatus::PurchaseOrder).update(purchTable, this.InvoiceId);
                    purchTable.reread();
                }
                purchIdMap.insert(interCompanyPurchId, 1);
            }
            miInventTransId.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDoExternalPosting</Name>
				<Source><![CDATA[
    public boolean interCompanyDoExternalPosting()
    {
        return this.salesTable().InterCompanyDirectDeliveryOrig
            && this.salesTable().interCompanyPurchTable().interCompanyEndpointActionPolicy().PostPurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDoInternalPosting</Name>
				<Source><![CDATA[
    public boolean interCompanyDoInternalPosting()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntercompanyInvoice</Name>
				<Source><![CDATA[
    internal boolean checkIntercompanyInvoice(AccountNum _accountNum, InvoiceId _invoiceId, DataAreaId _vendDataAreaId)
    {
        boolean ret = true;

        VendTable vendTable;
        InterCompanyTradingRelation interCompanyTradingRelation;
        InterCompanyTradingPartner interCompanyTradingPartnerVendor;
        InterCompanyTradingPartner interCompanyTradingPartnerCustomer;

        select firstonly Party, RecId from vendTable
                join Active from interCompanyTradingRelation
                    where vendTable.accountNum == _accountNum
                join VendorDataAreaId from interCompanyTradingPartnerVendor
                    where interCompanyTradingPartnerVendor.RecId == interCompanyTradingRelation.InterCompanyTradingVendor &&
                        interCompanyTradingPartnerVendor.VendorParty == vendTable.Party &&
                        interCompanyTradingPartnerVendor.VendorDataAreaId == _vendDataAreaId
                join CustomerDataAreaId from interCompanyTradingPartnerCustomer
                    where interCompanyTradingPartnerCustomer.RecId == interCompanyTradingRelation.InterCompanyTradingCustomer;

        if (interCompanyTradingRelation.Active)
        {
            changecompany(interCompanyTradingPartnerCustomer.CustomerDataAreaId)
            {
                CustInvoiceJour custInvoiceJour;

                select firstonly InvoiceId, RecId from custInvoiceJour
                    where custInvoiceJour.IntercompanyCompanyId == _vendDataAreaId &&
                        custInvoiceJour.InvoiceId == _invoiceId;

                if (custInvoiceJour)
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyEndpointActionPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany trading policy for the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyEndpointActionPolicy</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy(boolean _forUpdate = false)
    {
        InterCompanyEndpointActionPolicy interCompanyEndpointActionPolicy;
        
        changecompany (
                       this.company()
                       )
        {
            interCompanyEndpointActionPolicy = CustTable::find(this.OrderAccount).interCompanyTradingPartner().interCompanyEndpointActionPolicy(_forUpdate);
        }
        return interCompanyEndpointActionPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the intercompany trading value mapping for the current <c>CustInvoiceJour</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InterCompanyTradingValueMap</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyTradingValueMap interCompanyTradingValueMap(boolean _forUpdate = false)
    {
        InterCompanyTradingValueMap interCompanyTradingValueMap;
        
        changecompany (
                       this.company()
                       )
        {
            interCompanyTradingValueMap = CustTable::find(this.OrderAccount).interCompanyTradingPartner().interCompanyTradingValueMap(_forUpdate);
        }
        return interCompanyTradingValueMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTransTableNum</Name>
				<Source><![CDATA[
    public TableId interCompanyTransTableNum()
    {
        return tableNum(CustInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdate</Name>
				<Source><![CDATA[
    public void interCompanyUpdate()
    {
        CustInvoiceTrans custInvoiceTrans;
        // <PMF>
        Map inventTransIdMap = new Map(new DictField(tableNum(CustInvoiceTrans),fieldNum(CustInvoiceTrans, InventTransId)).baseType(), Types::Container);
        // </PMF>
        MapIterator miInventTransId;
        Map purchIdMap = new Map(new DictField(tableNum(PurchTable),fieldNum(PurchTable, PurchId)).baseType(), Types::Integer);
        MapIterator miPurchId;
        Map receiveNowMap = new Map(new DictField(tableNum(PurchLine),fieldNum(PurchLine, InventTransId)).baseType(), Types::Container);
        container receiveNow;
        PurchFormLetter_Invoice purchFormLetter;
        SysQueryRun chooseLinesQuery;
        SysQueryRun chooseLinesPendingInvoiceQuery;
        
        SalesParmUpdate salesParmUpdate;
        
        PurchId interCompanyPurchId;
        InventTransId interCompanyInventTransId;
        
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        
        CustPackingSlipTrans custPackingSlipTrans;
        CustInvoicePackingSlipQuantityMatch custInvoicePackingSlipQuantityMatch;
        TmpFrmVirtual tmpFrmVirtualCust;
        TmpFrmVirtual tmpFrmVirtualVend;
        List selectedList = new List(Types::Record);
        container conTmpFrmVirtual;
        boolean setTMPFrmVirtualCust;
        
        salesParmUpdate = SalesParmUpdate::find(this.ParmId);
        boolean isIntercompanyPartialDeliveredPOPostInvoiceFlightEnabled = IntercompanyPartialDeliveredPOPostInvoiceFlight::instance().isEnabled();

        while select InventTransId, InterCompanyInventTransId, Qty, PdsCWQty, StockedProduct, SourceDocumentLine from custInvoiceTrans
            where custInvoiceTrans.SalesId == this.SalesId
                   && custInvoiceTrans.InvoiceId == this.InvoiceId
                   && custInvoiceTrans.InvoiceDate == this.InvoiceDate
                   && custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            inventTransIdMap.insert(custInvoiceTrans.InterCompanyInventTransId, [custInvoiceTrans.Qty, custInvoiceTrans.PdsCWQty]);

            setTMPFrmVirtualCust = false;

            if (isIntercompanyPartialDeliveredPOPostInvoiceFlightEnabled)
            {
                changecompany(this.InterCompanyCompanyId)
                {
                    PurchLine localPurchLine = PurchLine::findInventTransId(custInvoiceTrans.InterCompanyInventTransId);
                    setTMPFrmVirtualCust = localPurchLine.isThreeWayMatchEnabled();
                }
            }

            if (custInvoiceTrans.isStocked())
            {
                while select PackingSlipId, DatePhysical from inventTrans
                        where inventTrans.InvoiceId == this.InvoiceId
                        && inventTrans.DateFinancial == this.InvoiceDate
                        exists join inventTransOrigin
                        where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                            && inventTransOrigin.InventTransId == custInvoiceTrans.InventTransId
                {
                    if (setTMPFrmVirtualCust)
                    {
                        tmpFrmVirtualCust = this.updateTMPVirtualLine(this.InterCompanyPurchId, inventTrans.PackingSlipId, inventTrans.DatePhysical, tmpFrmVirtualCust);
                    }
                    else
                    {
                        this.updateVirtualLine(this.InterCompanyPurchId, inventTrans.PackingSlipId, inventTrans.DatePhysical);
                    }
                }
            }
            else
            {
                while select PackingSlipId from custPackingSlipTrans
                    exists join custInvoicePackingSlipQuantityMatch
                        where custInvoicePackingSlipQuantityMatch.InvoiceSourceDocumentLine == custInvoiceTrans.SourceDocumentLine
                            && custInvoicePackingSlipQuantityMatch.PackingSlipSourceDocumentLine == custPackingSlipTrans.SourceDocumentLine
                {
                    if (setTMPFrmVirtualCust)
                    {
                        tmpFrmVirtualCust = this.updateTMPVirtualLine(this.InterCompanyPurchId, custPackingSlipTrans.PackingSlipId, dateNull(), tmpFrmVirtualCust);
                    }
                    else
                    {
                        this.updateVirtualLine(this.InterCompanyPurchId, custPackingSlipTrans.PackingSlipId);
                    }
                }
            }
        }
        
        changecompany(this.InterCompanyCompanyId)
        {
            PurchLine purchLine;
            VendPackingSlipJour vendPackingSlipJour;

            this.intercompanyAllocateMarkupAndConfirm(inventTransIdMap);
            tmpFrmVirtualVend = null;
            while select tmpFrmVirtualCust
            {
                select firstonly vendPackingSlipJour
                    where vendPackingSlipJour.PurchId == tmpFrmVirtualCust.Id
                    && vendPackingSlipJour.PackingSlipId == tmpFrmVirtualCust.ItemId;
                /*
                // This is omitted, due to problems when the intercompany sales order items are delivered one day,
                // and the items are received on the intercompany purchase order on the following day
                //
                && vendPackingSlipJour.DeliveryDate == tmpFrmVirtualCust.TransDate;
                */
                if (vendPackingSlipJour)
                {
                    select firstonly tmpFrmVirtualVend
                           where tmpFrmVirtualVend.TableNum == vendPackingSlipJour.TableId
                           && tmpFrmVirtualVend.RecordNo == vendPackingSlipJour.RecId
                           && tmpFrmVirtualVend.Id == vendPackingSlipJour.PurchId;
                    if (!tmpFrmVirtualVend)
                    {
                        tmpFrmVirtualVend.clear();
                        tmpFrmVirtualVend.TableNum = vendPackingSlipJour.TableId;
                        tmpFrmVirtualVend.RecordNo = vendPackingSlipJour.RecId;
                        tmpFrmVirtualVend.NoYes = NoYes::Yes;
                        tmpFrmVirtualVend.Id = vendPackingSlipJour.PurchId;
                        tmpFrmVirtualVend.insert();
                    }
                }
                else
                {
                    tmpFrmVirtualVend = null;
                    warning(strFmt("@SYS106122",this.InterCompanyPurchId));
                    break;
                }
            }
            
            ttsbegin;
            
            chooseLinesQuery = new SysQueryRun(queryStr(PurchUpdate));
            
            miInventTransId = new MapIterator(inventTransIdMap);
            miInventTransId.begin();
            while (miInventTransId.more())
            {
                interCompanyInventTransId = miInventTransId.key();
                interCompanyPurchId = PurchLine::findInventTransId(interCompanyInventTransId).PurchId;
                
                if (!purchIdMap.exists(interCompanyPurchId))
                {
                    while select forupdate purchLine
                          where purchLine.PurchId == interCompanyPurchId
                             && !purchLine.IsDeleted
                    {
                        purchLine.reread();

                        if (inventTransIdMap.exists(purchLine.InventTransId))
                        {
                            // <PMF>
                            [purchLine.PurchReceivedNow, purchLine.PdsCWInventReceivedNow] = inventTransIdMap.lookup(purchLine.InventTransId);
                            // </PMF>
                        }
                        else
                        {
                            receiveNow = [purchLine.PurchReceivedNow, purchLine.InventReceivedNow];
                            receiveNowMap.insert(purchLine.InventTransId, receiveNow);
                            purchLine.PurchReceivedNow = 0;
                        }
                        purchLine.setInventReceivedNow();
                        purchLine.update();
                    }
                    purchIdMap.insert(interCompanyPurchId, 1);
                    chooseLinesQuery.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId)).value(queryValue(interCompanyPurchId));
                }
                miInventTransId.next();
            }
            ttscommit;
            chooseLinesQuery.query().interactive (false);
            chooseLinesQuery.saveUserSetup (false);
            
            // VendInvoiceInfoTable is the required datasource of the query
            chooseLinesQuery.query().addDataSource(tableNum(VendInvoiceInfoTable)).enabled(false);
            // chooseLinesPendingInvoiceQuery needs to be initialized, although it will not be used
            chooseLinesPendingInvoiceQuery = new SysQueryRun(queryStr(PurchUpdatePendingInvoice));
            chooseLinesPendingInvoiceQuery.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable,PurchId)).value(queryValue(''));
            
            purchFormLetter = PurchFormLetter::construct(DocumentStatus::Invoice);
            purchFormLetter.chooseLinesQuery (chooseLinesQuery);
            purchFormLetter.parmQueryChooseLinesPendingInvoice(chooseLinesPendingInvoiceQuery);
            purchFormLetter.purchTable (PurchTable::find(this.InterCompanyPurchId));
            purchFormLetter.transDate (this.InvoiceDate);
            purchFormLetter.parmParmTableNum (this.InvoiceId);
            purchFormLetter.creditRemaining (salesParmUpdate.CreditRemaining);
            purchFormLetter.printFormLetter (NoYes::No);
            purchFormLetter.interCompanyVoucher (this.LedgerVoucher);
            purchFormLetter.sumBy (AccountOrder::Auto);
            
            if (tmpFrmVirtualVend)
            {
                purchFormLetter.specQty (PurchUpdate::PackingSlip);
                
                while select tmpFrmVirtualVend
                {
                    selectedList.addEnd(tmpFrmVirtualVend);
                    conTmpFrmVirtual = selectedList.pack();
                }
                purchFormLetter.selectFromJournal(conTmpFrmVirtual);
            }
            else
            {
                purchFormLetter.specQty (PurchUpdate::ReceiveNow);
                purchFormLetter.chooseLines(false);
            }
            
            purchFormLetter.reArrangeNow(true);
            purchFormLetter.run();
            
            if (receiveNowMap.elements())
            {
                ttsbegin;
                miPurchId = new MapIterator(purchIdMap);
                miPurchId.begin();
                while (miPurchId.more())
                {
                    interCompanyPurchId = miPurchId.key();
                    
                    while select forupdate purchLine
                          where purchLine.PurchId == interCompanyPurchId
                             && !purchLine.IsDeleted
                    {
                        if (receiveNowMap.exists(purchLine.InventTransId))
                        {
                            receiveNow = receiveNowMap.lookup(purchLine.InventTransId);
                            purchLine.PurchReceivedNow = conPeek(receiveNow, 1);
                            purchLine.InventReceivedNow = conPeek(receiveNow, 2);
                            purchLine.doUpdate();
                        }
                    }
                    
                    miPurchId.next();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateAllowed</Name>
				<Source><![CDATA[
    boolean interCompanyUpdateAllowed()
    {
        boolean ok = true;
        VendInvoicePurchLink purchLink;
        
        if (!this.InterCompanyCompanyId)
            return false;
        
        changecompany(this.InterCompanyCompanyId)
        {
            select RecId from purchLink
                index hint origPurchIdx
                where purchLink.OrigPurchId == this.InterCompanyPurchId
                   && purchLink.InvoiceId == this.InvoiceId;
            
            ok = !(purchLink.RecId);
        }
        
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing invoiceAccountAddress()
    {
        return this.custTable_InvoiceAccount().postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountEuro</Name>
				<Source><![CDATA[
    display AmountCur invoiceAmountEuro()
    {
        return this.amountMST2Euro(this.InvoiceAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateTime</Name>
				<Source><![CDATA[
    TransDateTime invoiceDateTime()
    {
        return DateTimeUtil::newDateTime(this.InvoiceDate, 0 ,DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceIdDisplay</Name>
				<Source><![CDATA[
    public display CustInvoiceId invoiceIdDisplay()
    {
        CustInvoiceId custInvoiceId = '';
        
        if (!this.isProforma())
        {
            custInvoiceId = this.InvoiceId;
        }
        else
        {
            if (this.Prepayment == NoYes::Yes)
            {
                custInvoiceId = this.DocumentNum;
            }
        }
        
        return custInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceName</Name>
				<Source><![CDATA[
    display CustName invoiceName()
    {
        return this.custTable_InvoiceAccount().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceReferenceNumberFI</Name>
				<Source><![CDATA[
    public display ReferenceNumber_FI invoiceReferenceNumberFI()
    {
        ReferenceNumber_FI refNumber;
        int refNumberLength;
        CustTrans custTrans;
        #define.Space(' ')
        
        select firstonly PaymReference from custTrans where custTrans.Invoice == this.InvoiceId;
        refNumber = custTrans.PaymReference;
        refNumberLength = strLen(refNumber);
        
        // Add spaces for report formatting
        if (refNumberLength > 15)
        {
            return subStr(refNumber, 1, refNumberLength - 15) + #Space +
                subStr(refNumber, refNumberLength - 14, 5) + #Space +
                subStr(refNumber, refNumberLength - 9, 5) + #Space +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else if (refNumberLength > 10)
        {
            return subStr(refNumber, 1, refNumberLength - 10) + #Space +
                subStr(refNumber, refNumberLength - 9, 5) + #Space +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else if (refNumberLength > 5)
        {
            return subStr(refNumber, 1, refNumberLength - 5) + #Space +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else
        {
            return refNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRoundOffEuro</Name>
				<Source><![CDATA[
    display RoundOff invoiceRoundOffEuro()
    {
        return this.amountMST2Euro(this.InvoiceRoundOffMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingAccount_PL</Name>
				<Source><![CDATA[
    private CustTable invoicingAccount_PL()
    {
        CustInvoiceJour_PL custInvoiceJourPL;
        
        custInvoiceJourPL = this.custInvoiceJour_PL();
        
        if (custInvoiceJourPL.FiscalInvoiceAccount_PL)
        {
            return CustTable::find(custInvoiceJourPL.FiscalInvoiceAccount_PL);
        }
        else
        {
            return CustTable::find(this.InvoiceAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing invoicingAddress()
    {
        return DirUtility::replaceAddressTokenLanguage(LogisticsPostalAddress::findRecId(this.InvoicePostalAddress), this.languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingAddress_PL</Name>
				<Source><![CDATA[
    display Addressing invoicingAddress_PL()
    {
        if (this.custInvoiceJour_PL().FiscalInvoiceAccount_PL)
        {
            return this.invoicingAccount_PL().address();
        }
        else
        {
            return this.invoicingAddress();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName_PL</Name>
				<Source><![CDATA[
    display Name invoicingName_PL()
    {
        if (this.custInvoiceJour_PL().FiscalInvoiceAccount_PL)
        {
            return this.invoicingAccount_PL().name();
        }
        else
        {
            return this.InvoicingName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingVatRegNum_PL</Name>
				<Source><![CDATA[
    display VATNum invoicingVatRegNum_PL()
    {
        if (this.custInvoiceJour_PL().FiscalInvoiceAccount_PL)
        {
            return this.invoicingAccount_PL().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, this.custInvoiceJour_PL().FiscalDocDate_PL);
        }
        else
        {
            return this.vatNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockedForBookInvoice_RU</Name>
				<Source><![CDATA[
    public boolean isBlockedForBookInvoice_RU()
    {
        return this.isCostAllocationInvoice_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostAllocationInvoice_RU</Name>
				<Source><![CDATA[
    public boolean isCostAllocationInvoice_RU()
    {
        boolean ret;
        CustTrans custTrans = this.custTrans();

        if (custTrans)
        {
            ret = (select firstonly RecId from CostAllocationHistory_RU
                where CostAllocationHistory_RU.IndebtednessTransRecId == custTrans.RecId).RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExportInvoice_RU</Name>
				<Source><![CDATA[
    boolean isExportInvoice_RU()
    {
        CustInvoiceTrans custInvoiceTrans;
        
        while select TaxGroup, TaxItemGroup from custInvoiceTrans
            where custInvoiceTrans.InvoiceId == this.InvoiceId &&
                  custInvoiceTrans.SalesId == this.SalesId &&
                  custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                  custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
        {
            if (custInvoiceTrans.isExportTrans_RU())
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIndebtednessInvoice_RU</Name>
				<Source><![CDATA[
    public boolean isIndebtednessInvoice_RU()
    {
        return this.isCostAllocationInvoice_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    public boolean isProforma()
    {
        return (this.Proforma == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRealizedVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the table is realized vat for a disposal sale transaction.
    /// </summary>
    /// <returns>
    /// True if the record is realized vat, otherwise false.
    /// </returns>
    public boolean isRealizedVAT()
    {
        TaxTrans taxTransLocal;
        
        taxTransLocal = TaxTrans::find(this.LedgerVoucher, this.InvoiceDate);
        
        return TaxTable::isRealizedVAT(taxTransLocal.TaxCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryUpdated</Name>
				<Source><![CDATA[
    public boolean isSummaryUpdated()
    {
        Query query = this.queryCustInvoiceSalesLink();
        QueryRun queryRun;
        query.dataSourceTable(tableNum(CustInvoiceSalesLink)).firstOnly(true);
        query.dataSourceTable(tableNum(CustInvoiceSalesLink)).addRange(fieldNum(CustInvoiceSalesLink, OrigSalesId)).value(strFmt('!%1',queryValue(this.SalesId)));
        
        queryRun = new QueryRun(query);
        
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateAdjustedPaymentSched_IB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>CustPaymSched</c> for an installment order at the time of invoicing.
    /// </summary>
    /// <param name="_salesTable">
    /// <c>SalesTable</c> buffer assoicated with the invoice.
    /// </param>
    /// <param name="_salesTotals">
    /// <c>SalesTotals</c> for the sales order being invoiced.
    /// </param>
    /// <param name="_partialInvoice">
    /// A <c>boolean</c> value to indicate if the invoice is a full or partial invoice.It will be set to true if the invoice is a
    /// partial invoice; otherwise, false.
    /// </param>
    public void mcrCreateAdjustedPaymentSched_IB(SalesTable _salesTable,
                                                 SalesTotals _salesTotals,
                                                 boolean _partialInvoice)
    {
        CustPaymSched custPaymSchedSO;
        CustPaymSched custPaymSchedInv;
        CustPaymSchedLine custPaymSchedLineInv;
        CustPaymSchedLine custpaymSchedLineSO;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        
        select firstonly custPaymSchedSO
            where custPaymSchedSO.ExtTableId == _salesTable.TableId &&
                  custPaymSchedSO.ExtRecId == _salesTable.RecId;
        
        custPaymSchedInv = custPaymSchedSO.data();
        custPaymSchedInv.ExtRecId = this.RecId;
        custPaymSchedInv.ExtTableId = this.TableId;
        
        if (custPaymSchedInv.validateWrite())
        {
            custPaymSchedInv.insert();
        }
        else
        {
            throw error("@SYS104318");
        }
        
        this.CustVendInvoiceJour::createPaymentSched(_salesTotals);
        //Adjust the sched lines and the corresponding cust trans opens if they exist
        // else adjust the sched lines.
        if (_partialInvoice != true)
        {
            ttsbegin;
            update_recordset custPaymSchedLineInv setting
                    DueAmount = custpaymSchedLineSO.DueAmount
                where custpaymSchedLineSO.ParentRecID==custPaymSchedSO.RecId
                    && custpaymSchedLineSO.mcrAmountDueChanged == NoYes::Yes
                join custPaymSchedLineInv
                    where custPaymSchedLineInv.ParentRecID == custPaymSchedInv.RecId
                    && custPaymSchedLineInv.DueDate == custpaymSchedLineSO.DueDate;
            
            update_recordset custTransOpen setting
                    AmountCur = custTransOpen.AmountCur*(custPaymSchedLineInv.mcrPercentChange/100),
                    AmountMST = custTransOpen.AmountMST*(custPaymSchedLineInv.mcrPercentChange/100)
                where custTransOpen.DueDate == custPaymSchedLineInv.DueDate
                exists join RecId, mcrPaymOrderID from custTrans
                    where custTrans.mcrPaymOrderID == _salesTable.SalesId &&
                    custTrans.RecId == custTransOpen.RefRecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreatePaymentSched_IB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the required payment schedule information before creating the payment schedule.
    /// </summary>
    /// <param name="_salesTable">
    /// Sales table buffer for which the payment schedule is being created.
    /// </param>
    /// <param name="_salesTotals">
    /// Sales totals for the installment billing order for which the schedule is being created.
    /// </param>
    /// <param name="_partialInvoice">
    /// <c>boolean</c> to indicate if the invoice is a partial invoice.
    /// </param>
    public void mcrCreatePaymentSched_IB(SalesTable _salesTable,
                                         SalesTotals _salesTotals,
                                         boolean _partialInvoice)
    {
        CustPaymSched custPaymSchedSO;
        CustPaymSched custPaymSchedInv;
        
        select firstonly custPaymSchedSO
            where custPaymSchedSO.ExtTableId == _salesTable.TableId &&
                  custPaymSchedSO.ExtRecId == _salesTable.RecId;
        
        custPaymSchedInv = custPaymSchedSO.data();
        custPaymSchedInv.ExtRecId = this.RecId;
        custPaymSchedInv.ExtTableId = this.TableId;
        if (custPaymSchedInv.validateWrite())
        {
            custPaymSchedInv.insert();
        }
        else
        {
            throw error("@SYS104318");
        }
        this.CustVendInvoiceJour::createPaymentSched(_salesTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGiftCardAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total gift card issue amount for the invoice.
    /// </summary>
    /// <returns>
    /// The the total gift card issue amount for the invoice.
    /// </returns>
    public MCRGiftCardIssueAmount_RU mcrGiftCardAmount_RU()
    {
        CustInvoiceTrans_RU custInvoiceTrans_RU;
        CustInvoiceTrans custInvoiceTrans;
        
        select sum(mcrGiftCardAmount) from custInvoiceTrans_RU
            exists join custInvoiceTrans
                where custInvoiceTrans.RecId == custInvoiceTrans_RU.CustInvoiceTrans &&
                      custInvoiceTrans.SalesId == this.SalesId &&
                      custInvoiceTrans.InvoiceId == this.InvoiceId &&
                      custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                      custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup;
        
        return custInvoiceTrans_RU.mcrGiftCardAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on the <c>CustInvoiceJour</c> table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set that is merged with the current <c>defaultDimension</c> field on the
    /// <c>CustInvoiceJour</c> table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set that is merged with the current <c>defaultDimension</c> field on the
    /// <c>CustInvoiceJour</c> table; optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object previously instantiated using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// the <c>CustInvoiceJour</c> table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additionally, the entity specifier defaulting will be considered.
    /// </remarks>
    
    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    SysModule module()
    {
        return SysModule::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmount</Name>
				<Source><![CDATA[
    display AmountCurNet netAmount()
    {
        return this.SalesBalance - this.EndDisc + this.SumMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmountEuro</Name>
				<Source><![CDATA[
    display AmountCurNet netAmountEuro()
    {
        return this.amountMST2Euro(this.netAmountMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmountMST</Name>
				<Source><![CDATA[
    display AmountMSTNet netAmountMST()
    {
        return this.SalesBalanceMST - this.EndDiscMST + this.SumMarkupMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nfePaymentMethod_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment method for NF-e
    /// </summary>
    /// <returns>
    /// The payment method for NF-e
    /// </returns>
    public EFDocPaymentMethod_BR nfePaymentMethod_BR()
    {
        SalesTable salesTable;
        CustInvoiceTable custInvoiceTable;
        CustPaymModeTable custPaymModeTable;
        
        CustPaymMode custPaymMode;
        
        if (this.RefNum == RefNum::SalesOrder)
        {
            select firstOnly PaymMode from salesTable
                where salesTable.SalesId == this.SalesId;
            custPaymMode = salesTable.PaymMode;
        }
        else if(this.RefNum == RefNum::Cust)
        {
            select firstOnly PaymMode from custinvoiceTable
                where custInvoiceTable.InvoiceId == this.InvoiceId
                    && custInvoiceTable.InvoiceDate == this.InvoiceDate
                    && custInvoiceTable.numberSequenceGroup == this.numberSequenceGroup;
            custPaymMode = custInvoiceTable.PaymMode;
        }
        else
        {
            return EFDocPaymentMethod_BR::NoPayment;
        }

        select firstOnly PaymentMethod_BR from custPaymModeTable
            where custPaymModeTable.PaymMode == custPaymMode;
        
        return custPaymModeTable.PaymentMethod_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notClosed_RU</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CustVendNotClosed_RU notClosed_RU()
    {
        CustInvoiceJour_RU custInvoiceJourRU;
        
        custInvoiceJourRU = this.custInvoiceJour_RU();
        
        if (custInvoiceJourRU.InvoicePostingType_RU == SalesInvoicePostingType_RU::GoodsInRoute ||
            custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::CommissionPrincipalAgent ||
            custInvoiceJourRU.InventProfileType_RU == InventProfileType_RU::Bailee)
        {
            return false;
        }
        
        return ! (select firstonly Closed from custTrans
                    where custTrans.AccountNum == this.InvoiceAccount &&
                          custTrans.TransDate == this.InvoiceDate &&
                          custTrans.Voucher == this.LedgerVoucher).Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount_PL</Name>
				<Source><![CDATA[
    private CustTable orderAccount_PL()
    {
        CustInvoiceJour_PL custInvoiceJourPL;
        
        custInvoiceJourPL = this.custInvoiceJour_PL();
        
        if (custInvoiceJourPL.FiscalOrderAccount_PL)
        {
            return CustTable::find(custInvoiceJourPL.FiscalOrderAccount_PL);
        }
        else
        {
            return CustTable::find(this.OrderAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInvoices_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns original invoices for credit note.
    /// </summary>
    /// <param name = "_separator">
    /// _separator to show comma to separate.
    /// </param>
    /// <param name = "_listPattern">
    /// _listPattern = "%1" to show invoice numbers only.
    /// _listPattern = "%2" to show invoice dates only.
    /// </param>
    /// <returns>
    /// Returns original invoices for credit note.
    /// </returns>
    public str originalInvoices_W(str _separator = ', ',
                                         str _listPattern = '\%1 \%2')
    {
        str ret;
        Set retSet = new Set(Types::String);
        SetIterator retIt;
        str value;
        
        CustInvoiceTrans invoiceTrans, origTrans;
        CustInvoiceTrans_W invoiceTrans_W;

        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)) && CustInvoiceTrans_W::isLegalEntityInCountryRegion())
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) &&
                CustInvoiceJourOrigInvoices_PLFlight::instance().isEnabled())
            {
                Set valueSet = CustInvoiceJour::originalCustInvoices_PL(this);

                SetEnumerator en = valueSet.getEnumerator();

                while (en.moveNext())
                {
                    CustInvoiceId invoiceId;
                    TransDate invoiceDate;
                    [invoiceId, invoiceDate] = en.current();
                    value = strFmt(_listPattern, invoiceId, invoiceDate);
                    retSet.add(value);
                }
            }
            else
            {
                while select InvoiceId, InvoiceDate from origTrans
                exists join invoiceTrans
                    where invoiceTrans.InvoiceId == this.InvoiceId &&
                          invoiceTrans.InvoiceDate == this.InvoiceDate &&
                          invoiceTrans.SalesId == this.SalesId &&
                          invoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
                exists join invoiceTrans_W
                    where invoiceTrans_W.CustInvoiceTrans == invoiceTrans.RecId &&
                          invoiceTrans_W.RefReturnInvoiceTrans_W == origTrans.RecId
                {
                    value = strFmt(_listPattern, origTrans.InvoiceId, origTrans.InvoiceDate);
                    if (! retSet.in(value))
                    {
                        retSet.add(value);
                    }
                }
            }

            retIt = new SetIterator(retSet);
            while (retIt.more())
            {
                ret += (ret ? _separator : "") + retIt.value();
                retIt.next();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInvoiceId_PL</Name>
				<Source><![CDATA[
    display PlOriginalInvoiceId origInvoiceId_PL()
    {
        // PL credit note always refers to one invoice
        CustInvoiceTrans invoiceTrans, origTrans;
        CustInvoiceTrans_W invoiceTrans_W;
        
        if (CustInvoiceTrans_W::isLegalEntityInCountryRegion())
        {
            select firstonly InvoiceId, InvoiceDate from origTrans
            exists join invoiceTrans
                where invoiceTrans.InvoiceId == this.InvoiceId &&
                      invoiceTrans.InvoiceDate == this.InvoiceDate &&
                      invoiceTrans.SalesId == this.SalesId &&
                      invoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
                exists join invoiceTrans_W
                    where invoiceTrans_W.CustInvoiceTrans == invoiceTrans.RecId &&
                          invoiceTrans_W.RefReturnInvoiceTrans_W == origTrans.RecId;
        }
        
        return origTrans.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceJour_BR</c> record into the current record.
    /// </summary>
    /// <param name="_custInvoiceJour_BR">
    /// The <c>CustInvoiceJour_BR</c> record.
    /// </param>
    public void packCustInvoiceJour_BR(CustInvoiceJour_BR _custInvoiceJour_BR)
    {
        _custInvoiceJour_BR.CustInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceJour_FR</c> record into the current record.
    /// </summary>
    /// <param name="_custInvoiceJour_FR">
    /// The <c>CustInvoiceJour_FR</c> record.
    /// </param>
    public void packCustInvoiceJour_FR(CustInvoiceJour_FR _custInvoiceJour_FR)
    {
        _custInvoiceJour_FR.CustInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour_FR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceJour_IN</c> record into the current record.
    /// </summary>
    /// <param name ="_custInvoiceJour">
    /// The <c>CustInvoiceJour_IN</c> record.
    /// </param>
    public void packCustInvoiceJour_IN(CustInvoiceJour_IN _custInvoiceJour)
    {
        _custInvoiceJour.CustInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_Intrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>CustInvoiceJour_Intrastat</c> extension table record.
    /// </summary>
    /// <param name="_custInvoiceJour_Intrastat">
    /// The extension table record to pack.
    /// </param>
    public void packCustInvoiceJour_Intrastat(CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat)
    {
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour_Intrastat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_Officials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs <c>CustInvoiceJour_Officials</c> extension table record.
    /// </summary>
    /// <param name="_custInvoiceJour_Officials">
    /// The extension table record to pack.
    /// </param>
    public void packCustInvoiceJour_Officials(CustInvoiceJour_Officials _custInvoiceJour_Officials)
    {
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour_Officials);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceJour_PL</c> record into the current record.
    /// </summary>
    /// <param name="_custInvoiceJour_PL">
    /// The <c>CustInvoiceJour_PL</c> record.
    /// </param>
    public void packCustInvoiceJour_PL(CustInvoiceJour_PL _custInvoiceJour_PL)
    {
        _custInvoiceJour_PL.CustInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour_PL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceJour_RU</c> record into the current record.
    /// </summary>
    /// <param name="_custInvoiceJour_RU">
    /// The <c>CustInvoiceJour_RU</c> record.
    /// </param>
    public void packCustInvoiceJour_RU(CustInvoiceJour_RU _custInvoiceJour_RU)
    {
        _custInvoiceJour_RU.CustInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustInvoiceJour_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>CustInvoiceJour_W</c> record into the current record.
    /// </summary>
    /// <param name="_custInvoiceJour_W">
    /// The <c>CustInvoiceJour_W</c> record.
    /// </param>
    public void packCustInvoiceJour_W(CustInvoiceJour_W _custInvoiceJour_W)
    {
        _custInvoiceJour_W.CustInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_custInvoiceJour_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packRetailCustInvoiceJourTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes an extension record from the <c>RetailCustInvoiceJourTable</c> table.
    /// </summary>
    /// <param name="retailCustInvoiceJourTable">
    /// A <c>RetailCustInvoiceJourTable</c> table record.
    /// </param>
    public void packRetailCustInvoiceJourTable(RetailCustInvoiceJourTable retailCustInvoiceJourTable)
    {
        retailCustInvoiceJourTable.CustInvoiceJour = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(retailCustInvoiceJourTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date used as the basis for calculating the exchange rate.
    /// </summary>
    /// <returns>
    /// A date.
    /// </returns>
    public AccountingDate parmExchangeRateDate()
    {
        return this.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardCaptureAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the custTrans amount - settlement amount.
    /// </summary>
    /// <returns>
    /// Amount.
    /// </returns>
    [Replaceable(true)]
    public Amount getCreditCardCaptureAmount() 
    { 
        return this.custTrans().AmountCur - this.custTrans().SettleAmountCur; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentBankAccountId</Name>
				<Source><![CDATA[
    CompanyBankAccountId paymentBankAccountId()
    {
        CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(this.paymMode());
        if (custPaymModeTable.AccountType == LedgerJournalACType::Bank)
        {
            return custPaymModeTable.parmPaymAccount();
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCondition</Name>
				<Source><![CDATA[
    display PaymTxt paymentCondition()
    {
        PaymTxt paymCondition;

        if (this.FixedDueDate)
        {
            paymCondition = date2StrUsr(this.FixedDueDate, DateFlags::FormatAll);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            paymCondition = date2StrUsr(this.DueDate, DateFlags::FormatAll);
        }
        else
        {
            paymCondition = PaymTerm::txt(this.Payment, this.LanguageId);
        }

        return paymCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode</Name>
				<Source><![CDATA[
    CustPaymMode paymMode()
    {
        return this.custTrans().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmount</Name>
				<Source><![CDATA[
    display AmountCur prepaidAmount()
    {
        CustTrans custTrans;
        QueryRun queryRun;
        AmountCur prepaidAmount;

        queryRun = this.queryRunCustTrans();
        
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(CustTrans)))
            {
                custTrans = queryRun.get(tableNum(CustTrans));
                if (custTrans)
                    prepaidAmount += custTrans.settledPrepaidAmountCur(NoYes::No);
            }
        }
        return prepaidAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmountEuro</Name>
				<Source><![CDATA[
    display AmountCur prepaidAmountEuro()
    {
        return this.amountMST2Euro(this.prepaidAmountMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmountMST</Name>
				<Source><![CDATA[
    display AmountMST prepaidAmountMST()
    {
        return this.amountMST(this.prepaidAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.InvoiceId, this.invoiceName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFreeTextJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the posted Free text invoice.
    /// </summary>
    /// <param name = "_salesFormLetter"><c>SalesFormLetter</c> instance</param>
    /// <param name = "_journalList">List of journals.</param>
    /// <param name = "_action">The <c>PrintCopyOriginal</c> value to use for printing the report.</param>
    /// <param name = "_parmPrintFormLetter">Indicates whether or not to print form letter.</param>
    /// <param name = "_parmPrintAcceptanceReport">Indicates whether or not to print the acceptance report.</param>
    [Replaceable]
    public void printFreeTextJournal(SalesFormLetter _salesFormLetter = null,
        RecordSortedList _journalList = null,
        PrintCopyOriginal _action = PrintCopyOriginal::OriginalPrint,
        NoYes _parmPrintFormLetter = NoYes::Yes,
        NoYes _parmPrintAcceptanceReport = NoYes::No)
    {
        Args parameters = new Args();
        
        MenuFunction salesAcceptanceReport;
        
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            this.printFreeTextJournalTH(
                _salesFormLetter,
                _journalList,
                _action);
            return;
        }
        
        parameters.caller(_salesFormLetter);
        
        if (countryRegion_RU)
        {
            parameters.parmEnum(NoYes::No);
            salesAcceptanceReport = new MenuFunction(menuitemOutputStr(SalesAcceptanceReport_RU), MenuItemType::Output);
        }
        if (_journalList)
            parameters.object(_journalList);
        else
            parameters.record(this);
        if (countryRegion_RU)
        {
            if (_parmPrintFormLetter)
            {
                switch (_action)
                {
                    // print the copy, original, or originalPrint depending upon user selection.
                case PrintCopyOriginal::Copy :
                    parameters.name(menuitemOutputStr(FreeTextInvoiceCopy));
                    new MenuFunction(menuitemOutputStr(FreeTextInvoiceCopy), MenuItemType::Output).run(parameters);
                    break;
                case PrintCopyOriginal::Original :
                    parameters.name(menuitemOutputStr(FreeTextInvoiceOriginal));
                    new MenuFunction(menuitemOutputStr(FreeTextInvoiceOriginal), MenuItemType::Output).run(parameters);
                    break;
                case PrintCopyOriginal::OriginalPrint :
                    parameters.name(menuitemOutputStr(FreeTextInvoice));
                    new MenuFunction(menuitemOutputStr(FreeTextInvoice), MenuItemType::Output).run(parameters);
                    break;
                }
            }
            
            if (_parmPrintAcceptanceReport)
            {
                salesAcceptanceReport.run(parameters);
            }
        }
        else
        {
            switch (_action)
            {
                // print the copy, original, or originalPrint depending upon user selection.
            case PrintCopyOriginal::Copy :
                parameters.name(menuitemOutputStr(FreeTextInvoiceCopy));
                new MenuFunction(menuitemOutputStr(FreeTextInvoiceCopy), MenuItemType::Output).run(parameters);
                break;
            case PrintCopyOriginal::Original :
                parameters.name(menuitemOutputStr(FreeTextInvoiceOriginal));
                new MenuFunction(menuitemOutputStr(FreeTextInvoiceOriginal), MenuItemType::Output).run(parameters);
                break;
            case PrintCopyOriginal::OriginalPrint :
                parameters.name(menuitemOutputStr(FreeTextInvoice));
                new MenuFunction(menuitemOutputStr(FreeTextInvoice), MenuItemType::Output).run(parameters);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFreeTextJournalTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the free text invoice journal as TH format.
    /// </summary>
    /// <param name="_salesFormLetter">
    /// The instance of sales form letter.
    /// </param>
    /// <param name="_journalList">
    /// The invoice journal list
    /// </param>
    /// <param name="_action">
    /// The printing action.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If no journal, error will be raised out.
    /// </exception>
    void printFreeTextJournalTH(
        SalesFormLetter _salesFormLetter = null,
        RecordSortedList _journalList = null,
        PrintCopyOriginal _action = PrintCopyOriginal::OriginalPrint)
    {
        Args parameters = new Args();
        CustInvoiceJour custInvoiceJourLocal;
        RecordSortedList freeTextInvoiceJournalList;
        
        parameters.caller(_salesFormLetter);
        
        if (!_journalList)
        {
            _journalList = FormLetter::createJournalListCopy(parameters.record(this));
        }
        
        _journalList.first(custInvoiceJourLocal);
        if (!custInvoiceJourLocal)
        {
            // Report must be called with a journal
            throw error("@SYS26348");
        }
        
        freeTextInvoiceJournalList = new RecordSortedList(tableNum(CustInvoiceJour));
        freeTextInvoiceJournalList.sortOrderFromContainer(
            FormLetterSortingParameters::formLetterSorting(
                tableNum(CustInvoiceJour),
                fieldNum(CustInvoiceJour, RecId),
                tableNum(CustInvoiceTable)));
        
        do
        {
            if (custInvoiceJourLocal.custInvoiceJourExtensionTH().NoteFormat != TaxUnrealizedSalesNoteFormat::None)
            {
                parameters.record(custInvoiceJourLocal);
                
                str menuItemNameStr;
                switch (_action)
                {
                    case PrintCopyOriginal::Copy:
                        menuItemNameStr = menuitemOutputStr(CustDebitCreditNoteCopy);
                        break;

                    case PrintCopyOriginal::Original:
                        menuItemNameStr = menuitemOutputStr(CustDebitCreditNote);
                        break;

                    default:
                        menuItemNameStr = menuitemOutputStr(CustDebitCreditNoteOriginalPrint);
                }

                parameters.name(menuItemNameStr);
                new MenuFunction(menuItemNameStr, MenuItemType::Output).run(parameters);
            }
            else
            {
                freeTextInvoiceJournalList.ins(custInvoiceJourLocal);
            }
        }
        while (_journalList.next(custInvoiceJourLocal));
        
        if (freeTextInvoiceJournalList.len())
        {
            parameters.object(freeTextInvoiceJournalList);
            switch (_action)
            {
                // print the copy, original, or originalPrint depending upon user selection.
            case PrintCopyOriginal::Copy :
                parameters.name(menuitemOutputStr(FreeTextInvoiceCopy));
                new MenuFunction(menuitemOutputStr(FreeTextInvoiceCopy), MenuItemType::Output).run(parameters);
                break;
            case PrintCopyOriginal::Original :
                parameters.name(menuitemOutputStr(FreeTextInvoiceOriginal));
                new MenuFunction(menuitemOutputStr(FreeTextInvoiceOriginal), MenuItemType::Output).run(parameters);
                break;
            case PrintCopyOriginal::OriginalPrint :
                parameters.name(menuitemOutputStr(FreeTextInvoice));
                new MenuFunction(menuitemOutputStr(FreeTextInvoice), MenuItemType::Output).run(parameters);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceMenuForPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get report menu item to generate <c>SalesInvoice</c> report.
    /// </summary>
    /// <param name = "_journalPrint">
    ///     The <c>SalesInvoiceJournalPrint</c> class handles the printing of the Sales order invoice.
    /// </param>
    /// <returns>
    ///     Menu item of <c>SalesInvoice</c> report.
    /// </returns>
    protected MenuFunction getSalesInvoiceMenuForPrinting(SalesInvoiceJournalPrint _journalPrint)
    {
        return new MenuFunction(menuitemOutputStr(SalesInvoice), MenuItemType::Output);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    void printJournal(
        SalesInvoiceJournalPrint journalPrint = null,
        RecordSortedList journalList = null,
        NoYes copy = NoYes::No
    ,
        NoYes parmPrintFormLetter = NoYes::Yes,
        NoYes parmPrintAcceptanceReport = NoYes::No,
        NoYes parmPrintBillOfLading = NoYes::No,
        NoYes parmPrintInventBaileeReport = NoYes::No,
        NoYes parmPrintTransportInvoice = NoYes::No
    ,NoYes parmPrintExciseFormLetter = NoYes::No
    )
    {
        if (this.shouldPrintJournal())
        {
            Args parameters = new Args();
            // <GIN>
            MenuFunction exciseMenu_IN;
            // </GIN>

            // <GEERU>
            boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
            MenuFunction salesAcceptanceReport,
                                billOfLadingMenu,
                                transportInvoiceMenu,
                                salesInventBaileeReport;
            CustInvoiceJour tmpInvoiceJour = CustInvoiceJour::findRecId(this.RecId);
            // </GEERU>
        
            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) &&
                tmpInvoiceJour.custInvoiceJour_PL().FiscalDocState_PL != PlFiscalDocState::Invoice)
            {
                tmpInvoiceJour.clear();
            }
            // </GEEPL>
        
            //<GTH>
            if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
            {
                this.printJournalTH(
                    journalPrint,
                    journalList,
                    copy);
                return;
            }
            //</GTH>
        
            MenuFunction salesInvoiceMenu = this.getSalesInvoiceMenuForPrinting(journalPrint);
            // <GIN>
            if (TaxParameters::isExciseEnable_IN())
            {
                exciseMenu_IN = new MenuFunction(menuitemOutputStr(ExciseSalesInvoice_IN),MenuItemType::Output);
            }
            // </GIN>
            parameters.caller(journalPrint);
        
            // <GEERU>
            if (countryRegion_RU)
            {
                parameters.parmEnum(NoYes::No);
            
                salesAcceptanceReport = new MenuFunction(menuitemOutputStr(SalesAcceptanceReport_RU), MenuItemType::Output);
                billOfLadingMenu = new MenuFunction(menuitemOutputStr(WMSBillOfLadingOriginalPrint), MenuItemType::Output);
                salesInventBaileeReport = new MenuFunction(menuitemOutputStr(SalesInventBaileeReport_RU), MenuItemType::Output);
                transportInvoiceMenu = new MenuFunction(menuitemOutputStr(WMSTransportInvoiceReport_RU), MenuItemType::Output);
            }
            // </GEERU>
        
            if (journalList)
            // <GEERU>
            {
                if (countryRegion_RU)
                {
                    journalList.first(tmpInvoiceJour);
                }
                else
                {
                    // </GEERU>
                    parameters.object(journalList);
                    // <GEERU>
                }
            }
            // </GEERU>
            else
            // <GEERU>
            {
                if (!countryRegion_RU)
                {
                    // </GEERU>
                    parameters.record(this);
                    // <GEERU>
                }
            }
        
            if (!countryRegion_RU)
            {
                // </GEERU>
                // <GIN>
                if (!TaxParameters::checkTaxParameters_IN())
                {
                    // </GIN>
                    salesInvoiceMenu.run(parameters);
                    // <GIN>
                }
                else
                {
                    if (parmPrintFormLetter)
                    {
                        salesInvoiceMenu.run(parameters);
                    }
                    if (TaxParameters::isExciseEnable_IN() && parmPrintExciseFormLetter)
                    {
                        exciseMenu_IN.run(parameters);
                    }
                }
                // </GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && journalList)
                {
                    CustPrintOutInvoice::construct().sendAsXML(null, journalList, PrintCopyOriginal::Original, true);
                }
                // <GEERU>
            }
            else
            {
                while (tmpInvoiceJour)
                {
                    parameters.record(tmpInvoiceJour);
                
                    if (parmPrintFormLetter)
                    {
                        salesInvoiceMenu.run(parameters);
                    }
                    // <GIN>
                    if (TaxParameters::isExciseEnable_IN() && parmPrintExciseFormLetter)
                    {
                        exciseMenu_IN.run(parameters);
                    }
                    // </GIN>
                    if (parmPrintAcceptanceReport)
                    {
                        salesAcceptanceReport.run(parameters);
                    }
                
                    if (parmPrintInventBaileeReport &&
                        tmpInvoiceJour.custInvoiceJour_RU().InventProfileType_RU == InventProfileType_RU::Bailee &&
                        tmpInvoiceJour.hasPositiveTrans_RU())
                    {
                        salesInventBaileeReport.run(parameters);
                    }
                
                    if (parmPrintBillOfLading)
                    {
                        if (tmpInvoiceJour.BillOfLadingId)
                        {
                            parameters.record(WMSBillOfLading::find_RU(tmpInvoiceJour.BillOfLadingId));
                            billOfLadingMenu.run(parameters);
                        }
                        else
                        {
                            info("@GLS111081");
                        }
                    }
                
                    if (parmPrintTransportInvoice)
                    {
                        if (tmpInvoiceJour.BillOfLadingId)
                        {
                            parameters.record(WMSBillOfLading::find_RU(tmpInvoiceJour.BillOfLadingId));
                            transportInvoiceMenu.run(parameters);
                        }
                        else
                        {
                            info("@GLS111081");
                        }
                    }
                
                    if (! journalList || ! journalList.next(tmpInvoiceJour))
                    {
                        break;
                    }
                }
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournalTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints journal as TH format
    /// </summary>
    /// <param name="_journalPrint">
    /// The journal to print.
    /// </param>
    /// <param name="_journalList">
    /// The jorunal list to print
    /// </param>
    /// <param name="_copy">
    /// True to make a copy; Otherwise, false
    /// </param>
    /// <exception cref="Exception::Error">
    /// The error will be raised, if there is not journal.
    /// </exception>
    void printJournalTH(
        SalesInvoiceJournalPrint _journalPrint = null,
        RecordSortedList _journalList = null,
        NoYes _copy = NoYes::No)
    {
        Args parameters = new Args();
        MenuFunction salesInvoiceMenu;
        CustInvoiceJour custInvoiceJourLocal;
        RecordSortedList salesInvoiceJournalList;
        
        parameters.caller(_journalPrint);
        
        if (!_journalList)
        {
            _journalList = FormLetter::createJournalListCopy(this);
        }
        
        _journalList.first(custInvoiceJourLocal);
        if (!custInvoiceJourLocal)
        {
            // Report must be called with a journal
            throw error("@SYS26348");
        }
        
        salesInvoiceJournalList = new RecordSortedList(tableNum(CustInvoiceJour));
        salesInvoiceJournalList.sortOrderFromContainer(
            FormLetterSortingParameters::formLetterSorting(
                tableNum(CustInvoiceJour),
                fieldNum(CustInvoiceJour, RecId),
                tableNum(CustInvoiceTable)));
        
        do
        {
            if (custInvoiceJourLocal.custInvoiceJourExtensionTH().NoteFormat != TaxUnrealizedSalesNoteFormat::None)
            {
                parameters.record(custInvoiceJourLocal);
                // Print Thailand Debit/Credit note report
                salesInvoiceMenu = new MenuFunction(menuitemOutputStr(CustDebitCreditNote), MenuItemType::Output);
                salesInvoiceMenu.run(parameters);
            }
            else
            {
                salesInvoiceJournalList.ins(custInvoiceJourLocal);
            }
        }
        while (_journalList.next(custInvoiceJourLocal));
        
        if (salesInvoiceJournalList.len())
        {
            parameters.object(salesInvoiceJournalList);
            // Print original Sales order invoice
            salesInvoiceMenu = new MenuFunction(menuitemOutputStr(SalesInvoice), MenuItemType::Output);
            salesInvoiceMenu.run(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustInvoiceSalesLink</Name>
				<Source><![CDATA[
    Query queryCustInvoiceSalesLink()
    {
        return SysQuery::queryFromTableRelation(this,tableNum(CustInvoiceSalesLink));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustInvoiceTrans</Name>
				<Source><![CDATA[
    Query queryCustInvoiceTrans()
    {
        Query tradeLoopTrans;
        
        tradeLoopTrans = new TradeLoopTrans(this,tableNum(CustInvoiceTrans)).buildQuery();
        
        return tradeLoopTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustTrans</Name>
				<Source><![CDATA[
    Query queryCustTrans(boolean update = false)
    {
        DictRelation dictRelation;
        DictField externdictField;
        DictField dictField;
        Query query = new Query();
        Counter c;
        
        query.addDataSource(tableNum(CustTrans));
        
        dictRelation = new DictRelation(tableNum(CustTrans));
        dictRelation.loadTableRelation(this.TableId);
          
        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(CustTrans),dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(CustTrans)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        query.dataSourceTable(tableNum(CustTrans)).update(update);
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunCustTrans</Name>
				<Source><![CDATA[
    QueryRun queryRunCustTrans(boolean update = false)
    {
        return new QueryRun(this.queryCustTrans(update));
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySettledPrepaidCustTrans</Name>
				<Source><![CDATA[
    Query querySettledPrepaidCustTrans()
    {
        Query query;
        
        query = this.queryCustTrans();
        query.allowCrossCompany(true);
        
        query.dataSourceTable(tableNum(CustTrans)).addDataSource(tableNum(CustSettlement));
        query.dataSourceTable(tableNum(CustTrans)).joinMode(JoinMode::InnerJoin);
        query.dataSourceTable(tableNum(CustSettlement)).addLink(fieldNum(CustTrans, RecId), fieldNum(CustSettlement, TransRecId));
        
        query.dataSourceTable(tableNum(CustSettlement)).addDataSource(tableNum(CustTrans));
        
        query.dataSourceTable(tableNum(CustTrans),2).joinMode(JoinMode::InnerJoin);
        query.dataSourceTable(tableNum(CustTrans),2).addLink(fieldNum(CustSettlement, OffsetRecid), fieldNum(CustTrans, RecId));
        query.dataSourceTable(tableNum(CustTrans),2).addLink(fieldNum(CustSettlement, OffsetCompany), fieldNum(CustTrans, DataAreaId));
        
        query.dataSourceTable(tableNum(CustTrans),2).addRange(fieldNum(CustTrans, Prepayment)).value(queryValue(NoYes::Yes));
        query.dataSourceTable(tableNum(CustTrans),2).addSortField(fieldNum(CustTrans, TransDate));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTaxTrans</Name>
				<Source><![CDATA[
    Query queryTaxTrans(boolean update = false)
    {
        DictRelation dictRelation;
        DictField externdictField;
        DictField dictField;
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        Counter c;
        
        queryBuildDataSource = query.addDataSource(tableNum(TaxTrans));
        
        dictRelation = new DictRelation(tableNum(TaxTrans));
        dictRelation.loadTableRelation(this.TableId);
        
        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(TaxTrans),dictRelation.lineTableValue(c));
                
                queryBuildDataSource.addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        
        queryBuildDataSource.update(update);
        queryBuildDataSource.addSelectionField(fieldNum(TaxTrans, SourceBaseAmountCur), SelectionField::Max);
        queryBuildDataSource.addRange(fieldNum(TaxTrans, TaxOrigin)).value(strFmt('!%1',queryValue(TaxOrigin::TaxReversed)));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, InventTransId));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, TaxGroup));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, TaxItemGroup));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, ExemptTax));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, ReverseCharge_W));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, SourceRecId));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    Query queryTmpTaxWorkTrans(boolean update = false)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildFieldList fieldList;
        
        queryBuildDataSource = query.addDataSource(tableNum(TmpTaxWorkTrans));
        
        queryBuildDataSource.update(update);
        fieldList = queryBuildDataSource.fields();
        fieldList.addField(fieldNum(TmpTaxWorkTrans, SourceBaseAmountCur), SelectionField::Max);
        queryBuildDataSource.addRange(fieldNum(TmpTaxWorkTrans, TaxOrigin)).value(strFmt('!%1',queryValue(TaxOrigin::TaxReversed)));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, InventTransId));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxGroup));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxItemGroup));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxRefId));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, ExemptTax));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, ReverseCharge_W));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, SourceRecId));
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refOriginalInvoiceRecId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets record id of original invoice.
    /// </summary>
    /// <returns>
    /// RecId of original invoice.
    /// </returns>
    public RefRecId refOriginalInvoiceRecId_RU()
    {
        return CustInvoiceJourCorrLink_RU::findCustInvoiceJour(this.RecId).CorrJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountToBePaid</Name>
				<Source><![CDATA[
    display AmountCur remainAmountToBePaid()
    {
        return this.InvoiceAmount - this.prepaidAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountToBePaidEuro</Name>
				<Source><![CDATA[
    display AmountCur remainAmountToBePaidEuro()
    {
        return this.amountMST2Euro(this.remainAmountToBePaidMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountToBePaidMST</Name>
				<Source><![CDATA[
    display AmountMST remainAmountToBePaidMST()
    {
        return this.InvoiceAmountMST - this.prepaidAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailCustInvoiceJourTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the extension record for the <c>RetailCustInvoiceJourTable</c> table.
    /// </summary>
    /// <returns>
    /// A <c>RetailCustInvoiceJourTable</c> table record.
    /// </returns>
    public RetailCustInvoiceJourTable retailCustInvoiceJourTable()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(RetailCustInvoiceJourTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnLinesExist_W</Name>
				<Source><![CDATA[
    public boolean returnLinesExist_W()
    {
        CustInvoiceTrans   invoiceTrans;
        CustInvoiceTrans_W invoiceTrans_W;
        
        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)) && CustInvoiceTrans_W::isLegalEntityInCountryRegion())
        {
            select firstonly RecId from invoiceTrans
                where invoiceTrans.InvoiceId           == this.InvoiceId &&
                      invoiceTrans.InvoiceDate         == this.InvoiceDate &&
                      invoiceTrans.SalesId             == this.SalesId &&
                      invoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup
                exists join invoiceTrans_W
                    where invoiceTrans_W.CustInvoiceTrans == invoiceTrans.RecId &&
                          invoiceTrans_W.RefReturnInvoiceTrans_W;
        }
        
        return invoiceTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBalanceEuro</Name>
				<Source><![CDATA[
    display AmountCur salesBalanceEuro()
    {
        return this.amountMST2Euro(this.SalesBalanceMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeAmountEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns tax amount in Euro currency to which reverse charge amount has been applied.
    /// </summary>
    /// <returns>
    ///   Tax amount in Euro currency.
    /// </returns>
    public AmountCur reverseChargeAmountEuro()
    {
        AmountCur ret;

        if (this.ReverseChargeAmount)
        {
            ret = this.amountCur2Euro(this.ReverseChargeAmount);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    SalesTable salesTable(boolean _update = false)
    {
        SalesTable salesTable = SalesTable::find(this.SalesId, _update);
        SalesTableDelete salesTableDelete;
        SalesTable_RU salesTableRU;
        
        if (!salesTable && this.SalesId && this.SalesType != SalesType::Journal)
        {
            salesTableDelete = SalesTableDelete::find(this.SalesId);
            if (salesTableDelete.SalesTable)
            {
                [salesTable] = salesTableDelete.SalesTable;
                salesTableRU = SalesTable_RU::findBySalesTable(salesTable.RecId);
                salesTable.packSalesTable_RU(salesTableRU);
            }
        }
        
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendElectronically</Name>
				<Source><![CDATA[
    public void sendElectronically(PrintCopyOriginal _printCopyOriginal, boolean _showWarning = true)
    {
        if (this.CustVendInvoiceJour::canXMLBeSent())
        {
            if (this.CustVendInvoiceJour::validateERParameters(this.InvoiceAmountMST, _showWarning))
            {
                Args args = new Args();
                args.parmEnumType(enumnum(PrintCopyOriginal));
                args.parmEnum(_printCopyOriginal);
                this.reread();
                args.record(this);
                
                new MenuFunction(menuitemOutputStr(EInvoiceGeneration), MenuItemType::Output).run(args);

                info("@SYS344889");
            }
        }
        else
        {
            if (_showWarning)
            {
                warning(strFmt("@SYS309594", this.invoiceIdDisplay()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFacturedFully_RU</Name>
				<Source><![CDATA[
    public void setFacturedFully_RU(FacturedFully_RU _factured)
    {
        CustInvoiceJour_RU custInvoiceJourRU;
        
        custInvoiceJourRU = this.custInvoiceJour_RU();
        custInvoiceJourRU.FacturedFully_RU = _factured;
        this.packCustInvoiceJour_RU(custInvoiceJourRU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAddress</Name>
				<Source><![CDATA[
    void setInvoiceAddress(Common _common = null)
    {
        LogisticsLocationEntity location;
        LogisticsLocationRecId locationRecId;
        CustTable custTableForInvoiceAccount;

        CustVendInvoiceOrderAccountMap invoiceOrderAccountMap;
        CustTable mapInvoiceAccount;
        CustTable mapOrderAccount;
        
        if (_common)
        {
            if (SysDictField::isFieldMapped(tableStr(CustVendInvoiceOrderAccountMap), tableId2Name(_common.TableId), fieldStr(CustVendInvoiceOrderAccountMap, InvoiceAccount)) &&
                SysDictField::isFieldMapped(tableStr(CustVendInvoiceOrderAccountMap), tableId2Name(_common.TableId), fieldStr(CustVendInvoiceOrderAccountMap, OrderAccount)))
            {
                // <GTH>
                if (_common.TableId == tableNum(SalesTable) && TaxThaiGovCertificationFeatureChecker::isCountryRegionTH())
                {
                    var salesTable = _common as SalesTable;
                    var salesTableExtensionTH = salesTable.salesTableExtensionTH();
                    
                    if (salesTableExtensionTH.InvoicePostalAddress)
                    {
                        this.InvoicePostalAddress = salesTableExtensionTH.InvoicePostalAddress;
                        locationRecId = LogisticsPostalAddress::locationRecIdFromAddressRecId(salesTableExtensionTH.InvoicePostalAddress);
                        location = LogisticsLocationEntity::constructFromLocationRecId(locationRecId);
                        this.InvoicingName = location.parmLocationDescription();
                        return;
                    }
                }
                // </GTH>
                
                invoiceOrderAccountMap = _common;
                mapOrderAccount = CustTable::find(invoiceOrderAccountMap.OrderAccount);
                mapInvoiceAccount = CustTable::find(invoiceOrderAccountMap.InvoiceAccount);

                custTableForInvoiceAccount = this.determineCustTableForInvoiceAccount(mapOrderAccount, mapInvoiceAccount);

                var defaults = LogisticsLocationDefault::construct(custTableForInvoiceAccount);

                var logisticsLocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice);
                
                locationRecId = LogisticsLocationDefault::findSimpleDefault(custTableForInvoiceAccount, logisticsLocationRole).RecId;
                
                if ((!locationRecId || _common.TableId == tableNum(CustInvoiceTable)) &&
                    this.DeliveryPostalAddress)
                {
                    locationRecId = LogisticsPostalAddress::locationRecIdFromAddressRecId(this.DeliveryPostalAddress);
                }

                DirPartyLocation partyLocation;
                DirPartyLocationRole partyLocationRole;
                select firstonly RecId from partyLocation
                   where partyLocation.Location == locationRecId
                       join LocationRole from partyLocationRole
                       where partyLocationRole.PartyLocation == partyLocation.RecId;
                
                if (_common.TableId == tableNum(SalesTable) &&
                    (partyLocationRole.LocationRole != logisticsLocationRole.RecId || _common.isInterCompanyOrder()))
                {
                    locationRecId = defaults.getDefaultActiveLocationRecId(
                        LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice));
                }
                
                if (partyLocation.RecId == 0)
                {
                    locationRecId = defaults.getDefaultLocationRecIdByType(
                        LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice));
                }
            }
            
            if (locationRecId)
            {
                location = LogisticsLocationEntity::constructFromLocationRecId(locationRecId);
            }
            else
            {
                if (invoiceOrderAccountMap)
                {
                    if (mapOrderAccount.InvoiceAddress == InvoiceOrderAccount::OrderAccount)
                    {
                        location = LogisticsLocationEntity::findLocation(_common, LogisticsLocationRoleType::Invoice);
                    }
                }
                else
                {
                    location = LogisticsLocationEntity::findLocation(_common, LogisticsLocationRoleType::Invoice);
                }
            }
        }
        
        CustTable custTable;

        if (!location || !location.parmLocationRecId())
        {
            select RecId, TableId, InvoiceAddress, Party from custTable
                index hint AccountIdx
                where custTable.AccountNum == this.OrderAccount;
            
            if (custTable.InvoiceAddress == InvoiceOrderAccount::InvoiceAccount)
                select RecId, TableId, InvoiceAddress, Party from custTable
                    index hint AccountIdx
                    where custTable.AccountNum == this.InvoiceAccount;
            
            location = LogisticsLocationEntity::findLocation(custTable, LogisticsLocationRoleType::Invoice);
        }
        
        if (location && location.parmLocationRecId())
        {
            if (locationRecId || !custTableForInvoiceAccount)
            {
                this.InvoicingName = location.parmLocationDescription();
            }
            else
            {
                var dirPartyLocation = DirPartyLocation::findByPartyLocation(custTableForInvoiceAccount.Party, LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress));
                if (dirPartyLocation)
                {
                    this.InvoicingName = DirPartyPostalAddressView::find(custTableForInvoiceAccount.Party, dirPartyLocation.Location).LocationName;
                }
                else
                {
                    location = DirParty::primaryPostalAddressLocation(custTableForInvoiceAccount.Party, DateTimeUtil::utcNow());
                    this.InvoicingName = custTableForInvoiceAccount.name();
                }
            }

            this.InvoicePostalAddress = location ? location.getPostalAddressOn(DateTimeUtil::utcNow()).RecId : 0;
        }
        else
        {
            if (invoiceOrderAccountMap)
            {
                if (mapInvoiceAccount.InvoiceAddress == InvoiceOrderAccount::OrderAccount)
                {
                    location = DirParty::primaryPostalAddressLocation(custTable.Party, DateTimeUtil::utcNow());
                    this.InvoicingName = custTable.name();
                }
                else
                {
                    location = DirParty::primaryPostalAddressLocation(custTableForInvoiceAccount.Party, DateTimeUtil::utcNow());
                    this.InvoicingName = custTableForInvoiceAccount.name();
                }
            }
            else
            {
                location = DirParty::primaryPostalAddressLocation(custTable.Party, DateTimeUtil::utcNow());
                this.InvoicingName = custTable.name();
            }
            
            this.InvoicePostalAddress = location ? location.getPostalAddress().RecId : 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCustTableForInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Chooses <c>CustTable</c> record for invoice account.
    /// </summary>
    /// <param name = "_orderCustomer">
    ///     A <c>CustTable</c> table buffer with order account.
    /// </param>
    /// <param name = "_invoiceCustomer">
    ///     A <c>CustTable</c> table buffer with invoice account.
    /// </param>
    /// <returns>
    ///     The chosen <c>CustTable</c> table buffer.
    /// </returns>
    protected CustTable determineCustTableForInvoiceAccount(CustTable _orderCustomer, CustTable _invoiceCustomer)
    {
        CustTable custTableForInvoiceAccount;

        if (_orderCustomer.InvoiceAddress == InvoiceOrderAccount::OrderAccount
            || !_invoiceCustomer.address())
        {
            custTableForInvoiceAccount = _orderCustomer;
        }
        else
        {
            custTableForInvoiceAccount = _invoiceCustomer;
        }

        return custTableForInvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceAddressFromProject</Name>
				<Source><![CDATA[
    void setInvoiceAddressFromProject(ProjId _projId)
    {
        ProjTable projTable;
        ProjFundingSource projFundingSource;
        
        if (_projId)
        {
            projTable = ProjTable::find(_projId);
            if (projTable.ProjInvoiceProjId)
            {
                // This code is only call from Sales orders - Single funded contract only allowed
                select firstonly InvoiceName, InvoiceLocation from projFundingSource
                    where projFundingSource.ContractId == projTable.ProjInvoiceProjId &&
                          projFundingSource.FundingType == ProjFundingType::Customer;
                
                this.InvoicingName = projFundingSource.InvoiceName;
                this.InvoicePostalAddress = LogisticsLocationEntity::constructFromLocationRecId(projFundingSource.InvoiceLocation).getPostalAddressOn(DateTimeUtil::utcNow()).RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExchRate</Name>
				<Source><![CDATA[
    display ExchRate showExchRate()
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), this.CurrencyCode);
        
        return exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumMarkupEuro</Name>
				<Source><![CDATA[
    display MarkupSumSales sumMarkupEuro()
    {
        return this.amountMST2Euro(this.SumMarkupMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxEuro</Name>
				<Source><![CDATA[
    display TaxAmountCur sumTaxEuro()
    {
        return this.amountMST2Euro(this.SumTaxMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function, taxableBalance, computes the taxable balance by iterating through tax transactions or temporary tax work transactions. It accumulates the taxable balance by considering
    /// non-exempt amounts and returns the negative of the total. The result is a real value representing the tax balance.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// A <c>TmpTaxWorkTrans</c> record that has the taxes information.
    /// </param>
    /// <returns>
    /// A real value representing the tax balance.
    /// </returns>
    display TaxTaxableAmountCur taxableBalance(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        TaxTrans taxTrans;
        TmpTaxWorkTrans tmpTaxWorkTrans;
        QueryRun queryRun;
        TaxBaseCur taxBaseCur;
        TaxBaseCur sourceBaseAmountCur;
        TaxExemptTax taxExemptTax;

        if (_tmpTaxWorkTrans)
        {
            queryRun = new QueryRun(this.queryTmpTaxWorkTrans());
            queryRun.setCursor(_tmpTaxWorkTrans);
        }
        else
        {
            queryRun = new QueryRun(this.queryTaxTrans());
        }
        while (queryRun.next())
        {
            if (_tmpTaxWorkTrans)
            {
                tmpTaxWorkTrans = queryRun.get(tableNum(TmpTaxWorkTrans));
                if (tmpTaxWorkTrans)
                {
                    taxExemptTax = tmpTaxWorkTrans.ExemptTax;
                    sourceBaseAmountCur = tmpTaxWorkTrans.SourceBaseAmountCur;
                }
            }
            else
            {
                taxTrans = queryRun.get(tableNum(TaxTrans));
                if (taxTrans)
                {
                    taxExemptTax = taxTrans.ExemptTax;
                    sourceBaseAmountCur = taxTrans.SourceBaseAmountCur;
                }
            }
            
            if (taxExemptTax == NoYes::No)
            {
                taxBaseCur += sourceBaseAmountCur;
            }
        }
        
        return -taxBaseCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates tax base for reverse charge in current invoice.
    /// </summary>
    /// <param name = "_tmpTaxWorkTrans">
    ///   <c>TmpTaxWorkTrans</c> buffer; Optional.
    /// </param>
    /// <returns>
    ///   Tax base amount for reverse charge.
    /// </returns>
    public TaxBaseCur reverseChargeBalance(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        TaxTrans taxTrans;
        TmpTaxWorkTrans tmpTaxWorkTrans;
        QueryRun queryRun;
        TaxBaseCur taxBaseCur;
        TaxBaseCur sourceBaseAmountCur;
        TaxReverseCharge taxReverseCharge;

        if (ReverseChargeParameters_W::find().Enabled == NoYes::No)
        {
            return 0;
        }

        if (_tmpTaxWorkTrans)
        {
            queryRun = new QueryRun(this.queryTmpTaxWorkTrans());
            queryRun.setCursor(_tmpTaxWorkTrans);
        }
        else
        {
            queryRun = new QueryRun(this.queryTaxTrans());
        }
        while (queryRun.next())
        {
            if (_tmpTaxWorkTrans)
            {
                tmpTaxWorkTrans = queryRun.get(tableNum(TmpTaxWorkTrans));
                if (tmpTaxWorkTrans)
                {
                    taxReverseCharge = tmpTaxWorkTrans.ReverseCharge_W;
                    sourceBaseAmountCur = tmpTaxWorkTrans.SourceBaseAmountCur;
                }
            }
            else
            {
                taxTrans = queryRun.get(tableNum(TaxTrans));
                if (taxTrans)
                {
                    taxReverseCharge = taxTrans.ReverseCharge_W;
                    sourceBaseAmountCur = taxTrans.SourceBaseAmountCur;
                }
            }

            if (taxReverseCharge == NoYes::Yes)
            {
                taxBaseCur += sourceBaseAmountCur;
            }
        }
        
        return -taxBaseCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxableAmountCur taxableBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.amountCur2Euro(this.taxableBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeBalanceEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Calculates tax base for reverse charge in current invoice in Euro currency.
    /// </summary>
    /// <param name = "_tmpTaxWorkTrans">
    ///   <c>TmpTaxWorkTrans</c> buffer; Optional.
    /// </param>
    /// <returns>
    ///   Tax base amount for reverse charge in Euro.
    /// </returns>
    public TaxBaseCur reverseChargeBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.amountCur2Euro(this.reverseChargeBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the taxable amount of the Sales invoice in the ledger's currency.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// A <c>TmpTaxWorkTrans</c> record that has the taxes information.
    /// </param>
    /// <returns>
    /// A real value representing the taxable amount in the ledger's currency.
    /// </returns>
    public display TaxTaxableAmountCur taxableBalanceMST(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.amountMST(this.taxableBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalance</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalance(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.netAmount() - this.taxableBalance(_tmpTaxWorkTrans) - this.reverseChargeBalance(_tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.amountCur2Euro(this.taxFreeBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalanceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the non-taxable amount of the Sales invoice in the ledger's currency.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// A <c>TmpTaxWorkTrans</c> record that has the taxes information.
    /// </param>
    /// <returns>
    /// A real value representing the non-taxable amount in the ledger's currency.
    /// </returns>
    public display TaxTaxFreeAmountCur taxFreeBalanceMST(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.amountMST(this.taxFreeBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxLicenseNum</Name>
				<Source><![CDATA[
    display TaxPackagingLicenseNum taxLicenseNum()
    {
        return this.custTable_InvoiceAccount().TaxLicenseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReimbursement_HU</Name>
				<Source><![CDATA[
    edit NoYes taxReimbursement_HU(boolean _set = false, NoYes _taxReimbursement = NoYes::No)
    {
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceTrans_W custInvoiceTrans_W_Update;
        CustInvoiceTrans_W custInvoiceTrans_W;
        
        if (_set)
        {
            ttsbegin;
            
            custInvoiceTrans_W_Update.skipDatabaseLog(true);
            custInvoiceTrans_W_Update.skipDataMethods(true);
            
            update_recordset custInvoiceTrans_W_Update
                setting TaxReimbursement_HU = _taxReimbursement
            exists join custInvoiceTrans
                where custInvoiceTrans.RecId == custInvoiceTrans_W_Update.CustInvoiceTrans &&
                    custInvoiceTrans.SalesId == this.SalesId &&
                    custInvoiceTrans.InvoiceId == this.InvoiceId &&
                    custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                    custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup;
            
            ttscommit;
        }
        
        select firstonly TaxReimbursement_HU from custInvoiceTrans_W
            where custInvoiceTrans_W.TaxReimbursement_HU
        exists join custInvoiceTrans
            where custInvoiceTrans.RecId == custInvoiceTrans_W.CustInvoiceTrans &&
                custInvoiceTrans.SalesId == this.SalesId &&
                custInvoiceTrans.InvoiceId == this.InvoiceId &&
                custInvoiceTrans.InvoiceDate == this.InvoiceDate &&
                custInvoiceTrans.NumberSequenceGroup == this.NumberSequenceGroup;
        
        return custInvoiceTrans_W.TaxReimbursement_HU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totaltaxAmountRetained_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the <c>SourceRegulateAmountCur</c> fields from Tax trans related to the customer journal.
    /// </summary>
    /// <returns>
    /// A real value with the total retained tax amount.
    /// </returns>
    /// <remarks>
    /// The original amount from the tax trans records has its sign inverted because the it is a customer journal.
    /// </remarks>
    public TaxAmountCur totaltaxAmountRetained_BR()
    {
        return this.CustVendInvoiceJour::totaltaxAmountRetained_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transList_W</Name>
				<Source><![CDATA[
    public RecordSortedList transList_W()
    {
        RecordSortedList ret;
        
        CustInvoiceTrans trans;
        CustAdvanceInvoiceSettlement_W settlement;
        AmountCur paymentAmount;
        
        int64 lineNum;
        Amount totalDeducted = 0, deductNow = 0;

        RoundOff roundOff = Currency::roundingPrecisionAdjusted(this.CurrencyCode);
        TaxGroup taxGroup;
        TaxItemGroup taxItemGroup;
        
        ret = new RecordSortedList(tableNum(CustInvoiceTrans));
        ret.sortOrder(fieldNum(CustInvoiceTrans, LineNum), fieldNum(CustInvoiceTrans, RecId));
        
        select firstonly sum(PaymentAmount) from settlement
            where settlement.InvoiceJourRecId == this.RecId;
        
        paymentAmount = settlement.PaymentAmount;
        
        select firstonly count(RecId) from trans
            where trans.InvoiceId == this.InvoiceId &&
                  trans.InvoiceDate == this.InvoiceDate &&
                  trans.NumberSequenceGroup == this.NumberSequenceGroup &&
                  trans.SalesId == this.SalesId;

        lineNum = trans.RecId;
        
        while select trans
            where trans.InvoiceId == this.InvoiceId &&
                  trans.InvoiceDate == this.InvoiceDate &&
                  trans.NumberSequenceGroup == this.NumberSequenceGroup &&
                  trans.SalesId == this.SalesId
        {
            lineNum --;
            
            trans.LineAmount = trans.lineAmountInclTax();
            trans.LineAmountTax = 0;
            trans.Qty = trans.Qty ? trans.Qty : 1;
            
            if (lineNum)
            {
                deductNow = trans.LineAmount * paymentAmount / this.InvoiceAmount;
            }
            else
            {
                deductNow = paymentAmount - totalDeducted;
                taxGroup = trans.TaxGroup;
                taxItemGroup = trans.TaxItemGroup;
            }
            trans.SalesPrice = roundDown((trans.LineAmount - deductNow) / trans.Qty, roundOff);
            trans.DiscAmount = 0;
            trans.DiscPercent = 0;
            
            totalDeducted += (trans.LineAmount - trans.SalesPrice * trans.Qty);
            
            trans.LineAmount = trans.SalesPrice * trans.Qty;
            
            ret.ins(trans);
        }
        
        // create fictive line number for rounding errors
        if (totalDeducted != paymentAmount)
        {
            select maxof(LineNum), maxof(RecId) from trans
                where trans.InvoiceId == this.InvoiceId &&
                      trans.InvoiceDate == this.InvoiceDate &&
                      trans.NumberSequenceGroup == this.NumberSequenceGroup &&
                      trans.SalesId == this.SalesId;
            
            trans.LineNum = trans.LineNum + 1;
            trans.RecId = trans.RecId + 1;
            trans.TaxGroup = taxGroup;
            trans.TaxItemGroup = taxItemGroup;
            trans.Qty = 1;
            
            trans.SalesPrice = totalDeducted - paymentAmount;
            trans.LineAmount = trans.SalesPrice;
            trans.Name = SysLabel::labelId2String(literalStr("@GLS105686"),
                                                          this.LanguageId ?
                                                          this.LanguageId :
                                                          CompanyInfo::languageId()) ;
            ret.ins(trans);
        }
        
        this.InvoiceAmount -= paymentAmount;
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableID_W</Name>
				<Source><![CDATA[
    public TableId transTableID_W()
    {
        return tableNum(CustInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.calcMSTAmounts();
        
        ttsbegin;
        
        super();
        
        this.SysExtensionSerializerMap::postUpdate();
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBillOfLadingId</Name>
				<Source><![CDATA[
    public void updateBillOfLadingId(WMSBillOfLadingId _billOfLadingId)
    {
        ttsbegin;
        this.selectForUpdate(true);
        this.BillOfLadingId = _billOfLadingId;
        this.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDue_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates due date and updates related trans and open trans accordingly.
    /// </summary>
    public void updateDue_JP()
    {
        this.CustVendInvoiceJour::updateDue_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePaymentSched</Name>
				<Source><![CDATA[
    boolean validatePaymentSched()
    {
        boolean ret = true;
        PaymTerm paymTerm;
        TransDate deliveryDate;
        TransDate lastValidDate;

        CustPaymSchedLine custPaymSchedLine;
        CustPaymSched custPaymSched = CustPaymSched::find(this.TableId, this.RecId);
        // <GIN>
        TaxAmount taxWithholdAmount_IN;
        // </GIN>
        AmountCur netInvoiceAmount;
        
        if (this.PaymentSched)
        {
            select sum(DueAmount) from custPaymSchedLine
                where custPaymSchedLine.ParentRecID == custPaymSched.RecId;

            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                taxWithholdAmount_IN = this.custInvoiceJour_W().TaxWithholdAmount_IN;

                AmountCur invoiceAmountInclWHT;
                if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::isFeatureEnabled())
                {
                    CustInvoiceTrans custInvoiceTrans;
                    CustInvoiceTrans_IN custInvoiceTrans_IN;
                    select firstonly RecId from custInvoiceTrans
                        where custInvoiceTrans.SalesId == this.SalesId
                            && custInvoiceTrans.InvoiceId == this.InvoiceId
                            && custInvoiceTrans.InvoiceDate == this.InvoiceDate
                            && custInvoiceTrans.numberSequenceGroup == this.numberSequenceGroup
                        exists join RecId from custInvoiceTrans_IN
                        where custInvoiceTrans_IN.CustInvoiceTrans == custInvoiceTrans.RecId
                            && custInvoiceTrans_IN.TCSGroup_IN != '';

                    if (custInvoiceTrans.RecId)
                    {
                        invoiceAmountInclWHT = this.InvoiceAmount + CurrencyExchange::roundWithRuleType(
                            taxWithholdAmount_IN,
                            this.CurrencyCode,
                            CurrencyRoundingRuleType::SalesOrder);
                    }
                    else
                    {
                        invoiceAmountInclWHT = this.InvoiceAmount + taxWithholdAmount_IN;
                    }
                }
                else
                {
                    invoiceAmountInclWHT = this.InvoiceAmount + taxWithholdAmount_IN;
                }

                if (custPaymSchedLine.DueAmount != invoiceAmountInclWHT)
                {
                    ret = checkFailed(strFmt("@SYS78948", custPaymSchedLine.DueAmount, invoiceAmountInclWHT));
                    ret = checkFailed("@AccountsPayable:WarningPaymSchedTotalDoesNotMatchInvoiceTotal");
                }
            }
            else
            {
                // </GIN>
                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    netInvoiceAmount = this.InvoiceAmount + this.totaltaxAmountRetained_BR();
                }
                else
                {
                    // </GBR>
                    netInvoiceAmount = this.InvoiceAmount;
                    // <GBR>
                }
                // </GBR>
                
                if (custPaymSchedLine.DueAmount != netInvoiceAmount)
                {
                    ret = checkFailed(strFmt("@SYS78948", custPaymSchedLine.DueAmount, netInvoiceAmount));
                    ret = checkFailed("@AccountsPayable:WarningPaymSchedTotalDoesNotMatchInvoiceTotal");
                }
                
                if (this.Payment && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
                {
                    paymTerm = PaymTerm::find(this.Payment);
                    deliveryDate = paymTerm.UseDeliveryDateForDueDate_ES ? this.ReceiptDateConfirmed_ES : this.InvoiceDate;
                    lastValidDate = PaymDueDateLimit_ES::getDueDateLimitSalesParm(
                        paymTerm.DueDateLimitGroupId_ES,
                        deliveryDate,
                        this.SalesId,
                        this.ParmId).getLastValidDate(deliveryDate);
                    
                    select firstonly RecId from custPaymSchedLine
                        where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                           && custPaymSchedLine.DueDate > lastValidDate;
                    
                    if (custPaymSchedLine.RecId)
                    {
                        ret = checkFailed("@SYS4001054");
                    }
                }
                // <GIN>
            }
            // </GIN>
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatDueDate_W</Name>
				<Source><![CDATA[
    display VatDueDate_W vatDueDate_W()
    {
        return this.CustVendInvoiceJour::vatDueDate_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateNum_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to check if a duplicate invoice number exists.
    /// </summary>
    /// <param name="_num">
    ///     InvoiceId of the unposted transaction that needs to be checked for duplicity.
    /// </param>
    /// <param name="_salesId">
    ///     SalesId of the unposted transaction.
    /// </param>
    /// <param name="_transDate">
    ///     InvoiceDate of the unposted transaction.
    /// </param>
    /// <returns>
    ///     False, if a a posted transcation exists with the same Invoice number.
    /// </returns>
    public static boolean checkDuplicateNum_W(Num _num, SalesIdBase _salesId, TransDate _transDate)
    {
        CustInvoiceJour custInvoiceJour;
        boolean ret = true;
        
        if (CustParameters::find().CheckInvoice_W)
        {
            select firstonly custInvoiceJour
                where custInvoiceJour.InvoiceId == _num;
            
            if (custInvoiceJour)
            {
                ret = checkFailed(strFmt("@GLS107437",
                                         custInvoiceJour.InvoiceId,
                                         '\n',
                                         custInvoiceJour.InvoiceAccount + ' ' +
                                         custInvoiceJour.invoiceName(),
                                         '\n',
                                         custInvoiceJour.InvoiceDate,
                                         '\n',
                                         custInvoiceJour.InvoiceAmount,
                                         custInvoiceJour.CurrencyCode));
            }
        }
        else
        {
            select firstonly custInvoiceJour
                where custInvoiceJour.InvoiceId == _num &&
                      custInvoiceJour.SalesId == _salesId &&
                      custInvoiceJour.InvoiceDate == _transDate;
            
            if (custInvoiceJour)
            {
                ret = checkFailed(strFmt("@GLS110643",
                                         custInvoiceJour.InvoiceId,
                                         custInvoiceJour.SalesId,
                                         custInvoiceJour.InvoiceDate));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExportInvoiceId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks export invoice id.
    /// </summary>
    /// <param name="_salesId">
    /// The sales id.
    /// </param>
    /// <param name="_exportInvoiceId">
    /// The export invoice id.
    /// </param>
    /// <returns>
    /// Returns true if the check succeed.
    /// </returns>
    public static boolean checkExportInvoiceId_IN(
        SalesId _salesId,
        ExportInvoiceId_IN _exportInvoiceId)
    {
        return _salesId && _exportInvoiceId &&
            (select firstonly RecId from custInvoiceJour
                where custInvoiceJour.InvoiceId == _exportInvoiceId &&
                        custInvoiceJour.SalesId == _salesId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBillOfLadingNumber_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display bill of lading number.
    /// </summary>
    /// <param name="_shippingBillTransRecId">
    /// The shipping bill transaction RecId.
    /// </param>
    /// <returns>
    /// The instance of the <c>WMSBillOfLadingId</c> class.
    /// </returns>
    public static WMSBillOfLadingId displayBillOfLadingNumber_IN(RefRecId _shippingBillTransRecId)
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceTrans custInvoiceTrans;
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        
        select firstonly InventTransId
            from customsShippingBillTrans
                where customsShippingBillTrans.RecId == _shippingBillTransRecId
            join SalesId, InvoiceId, InvoiceDate, NumberSequenceGroup
                from custInvoiceTrans
                    where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                       && custInvoiceTrans.InvoiceId == customsShippingBillTrans.InvoiceId
                       && custInvoiceTrans.InvoiceDate == customsShippingBillTrans.InvoiceDate
                join firstonly BillOfLadingId
                    from custInvoiceJour
                        where custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                           && custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                           && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup
                           && custInvoiceJour.SalesId == custInvoiceTrans.SalesId;
        
        return custInvoiceJour.BillOfLadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(SalesId salesId)
    {
        return salesId && (select custInvoiceJour
                where custInvoiceJour.SalesId == salesId
               ).SalesId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByInvoiceIdTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record exist for the given invoice id and invoice date.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <param name="_transDate">
    /// The invoice date.
    /// </param>
    /// <returns>
    /// Returns true if the check succeed.
    /// </returns>
    public static boolean existByInvoiceIdTransDate(InvoiceId _invoiceId, TransDate _transDate, RefNum _refNum = RefNum::SalesOrder)
    {
        return _invoiceId && _transDate &&
        (select firstonly custInvoiceJour
            where custInvoiceJour.InvoiceId == _invoiceId &&
                    custInvoiceJour.InvoiceDate == _transDate &&
                    custInvoiceJour.RefNum == _refNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomsExportInvoiceDate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds customs export invoice date.
    /// </summary>
    /// <param name="_salesId">
    /// The sales id.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public static TransDate findCustomsExportInvoiceDate_IN(
        SalesIdBase _salesId,
        InvoiceId _invoiceId)
    {
        CustInvoiceJour custInvoiceJour;
        
        if (_salesId && _invoiceId)
        {
            select firstonly InvoiceDate from custInvoiceJour
                where custInvoiceJour.SalesId == _salesId
                   && custInvoiceJour.InvoiceId == _invoiceId;
        }
        
        return custInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    static CustInvoiceJour findFromCustInvoiceTrans(SalesId salesId,
                                                    InvoiceId invoiceId,
                                                    TransDate invoiceDate,
                                                    NumberSequenceGroupId numberSequenceGroup,
                                                    boolean _update = false,
                                                    boolean _findProformaJour = false)
    {
        CustInvoiceJour custInvoiceJour;
        
        if ((invoiceId && invoiceDate)
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && _findProformaJour))
        {
            custInvoiceJour.selectForUpdate(_update);
            
            select firstonly custInvoiceJour
                index hint InvoiceNumIdx
                where custInvoiceJour.InvoiceId == invoiceId
                   && custInvoiceJour.InvoiceDate == invoiceDate
                   && custInvoiceJour.NumberSequenceGroup == numberSequenceGroup
                   && custInvoiceJour.SalesId == salesId;
        }
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromCustTrans</Name>
				<Source><![CDATA[
    static CustInvoiceJour findFromCustTrans(InvoiceId invoiceId,
                                             TransDate invoiceDate,
                                             CustInvoiceAccount invoiceAccount,
                                             boolean _update = false,
                                             Voucher _voucher = ""
                                             )
    {
        CustInvoiceJour custInvoiceJour;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
        if (invoiceId && invoiceDate && invoiceAccount)
        {
            custInvoiceJour.selectForUpdate(_update);
            
            if (countryRegion_RU
                && ! prmisDefault(_voucher))
            {
                select firstonly custInvoiceJour
                    where custInvoiceJour.InvoiceId == invoiceId &&
                          custInvoiceJour.InvoiceDate == invoiceDate &&
                          custInvoiceJour.InvoiceAccount == invoiceAccount &&
                          custInvoiceJour.LedgerVoucher == _voucher;
            }
            if ((countryRegion_RU && ! custInvoiceJour)
                 || !countryRegion_RU)
            {
                select firstonly custInvoiceJour
                    index hint InvoiceNumIdx
                    order by RecId desc
                    where custInvoiceJour.InvoiceId == invoiceId
                       && custInvoiceJour.InvoiceDate == invoiceDate
                       && custInvoiceJour.InvoiceAccount == invoiceAccount;
            }
        }
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromCustTransVoucher</Name>
				<Source><![CDATA[
    static CustInvoiceJour findFromCustTransVoucher(InvoiceId _invoiceId,
                                                    Voucher _voucher,
                                                    TransDate _invoiceDate,
                                                    CustInvoiceAccount _invoiceAccount,
                                                    boolean _update = false)
    {
        CustInvoiceJour custInvoiceJour;
        
        if (_invoiceId && _voucher && _invoiceDate && _invoiceAccount)
        {
            custInvoiceJour.selectForUpdate(_update);
            
            select firstonly custInvoiceJour
                where custInvoiceJour.InvoiceId == _invoiceId
                   && custInvoiceJour.LedgerVoucher == _voucher
                   && custInvoiceJour.InvoiceDate == _invoiceDate
                   && custInvoiceJour.InvoiceAccount == _invoiceAccount;
        }
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromSalesId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds cust invoice journal from sales id.
    /// </summary>
    /// <param name="_salesId">
    /// The sales id.
    /// </param>
    /// <returns>
    /// The instance of the <c>CustInvoiceJour</c> class.
    /// </returns>
    public static CustInvoiceJour findFromSalesId_IN(SalesId _salesId)
    {
        CustInvoiceJour custInvoiceJour;
        
        if (_salesId)
        {
            select firstonly custInvoiceJour
                where custInvoiceJour.SalesId == _salesId;
        }
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustInvoiceJour</c> record by sales id.
    /// </summary>
    /// <param name = "_salesId">The sales id.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>The <c>CustInvoiceJour</c> record.</returns>
    public static CustInvoiceJour findFromSalesId(SalesId _salesId, boolean _forUpdate = false)
    {
        CustInvoiceJour custInvoiceJour;
        custInvoiceJour.selectForUpdate(_forupdate);

        select firstonly custInvoiceJour
            where custInvoiceJour.SalesId == _salesId;

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustInvoiceJour</c> record by source document header record Id.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// A source document header record id.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>CustInvoiceJour</c> record.
    /// </returns>
    public static CustInvoiceJour findFromSourceDocumentHeader(
        SourceDocumentHeaderRecId _sourceDocumentHeaderRecId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInvoiceJour custInvoiceJour;
        
        custInvoiceJour.selectForUpdate(_forupdate);
        
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInvoiceJour.concurrencyModel(_concurrencyModel);
        }
        
        select firstonly custInvoiceJour
            where custInvoiceJour.SourceDocumentHeader == _sourceDocumentHeaderRecId;
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromTaxTrans</Name>
				<Source><![CDATA[
    static CustInvoiceJour findFromTaxTrans(Voucher _voucher,
                                            TransDate _invoiceDate)
    {
        CustInvoiceJour custInvoiceJour;
        
        if (_voucher && _invoiceDate)
        {
            select firstonly custInvoiceJour
                where custInvoiceJour.LedgerVoucher == _voucher &&
                      custInvoiceJour.InvoiceDate == _invoiceDate;
        }
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static CustInvoiceJour findRecId(RecId recId, boolean _update = false)
    {
        CustInvoiceJour custInvoiceJour;
        
        custInvoiceJour.selectForUpdate(_update);
        
        select firstonly custInvoiceJour
                index hint recid
            where custInvoiceJour.RecId == recId;
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsInvoiceID_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup customs invoice id.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    /// <param name="_salesId">
    /// The sales id.
    /// </param>
    public static void lookupCustomsInvoiceID_IN(
        FormControl _formControl,
        SalesIdBase _salesId)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustInvoiceJour), _formControl);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRange;
        
        queryBuildDataSource = query.addDataSource(tableNum(CustInvoiceJour));
        queryBuildRange = queryBuildDataSource.addRange(fieldNum(CustInvoiceJour, SalesId));
        queryBuildRange.value(queryValue(_salesId));
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceId));
        
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByInvoiceAccountSalesID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up invoices given the invoice account and sales order ID.
    /// </summary>
    /// <param name="_callingControl">
    /// A control for the call to look up.
    /// </param>
    /// <param name="_custInvoiceAccount">
    /// The Invoice account for which to look up the invoices.
    /// </param>
    /// <param name="_salesId">
    /// The sales ID for which to look up the invoices.
    /// </param>
    public static void mcrlookupByInvoiceAccountSalesID(
        FormControl _callingControl,
        CustInvoiceAccount _custInvoiceAccount,
        SalesId _salesId)
    {
        SysTableLookup sysTableLookup;
        Query query;
        QueryBuildDataSource qbdsCustInvoiceJour;
        QueryBuildDataSource qbdsSalesTable;
        
        sysTableLookup = SysTableLookup::newParameters(tableNum(CustInvoiceJour), _callingControl);
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceId));
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, SalesId));
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceAccount));
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, OrderAccount));
        sysTableLookup.addLookupfield(fieldNum(CustInvoiceJour, InvoiceDate));
        
        query = new Query();
        qbdsCustInvoiceJour = query.addDataSource(tableNum(CustInvoiceJour));
        
        if (_custInvoiceAccount)
        {
            qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceAccount))
                .value(SysQuery::value(_custInvoiceAccount));
        }
        
        // Sort by invoice ID descending
        qbdsCustInvoiceJour.addSortField(fieldNum(CustInvoiceJour, InvoiceId), SortOrder::Descending);
        
        if (_salesId)
        {
            qbdsSalesTable = qbdsCustInvoiceJour.addDataSource(tableNum(SalesTable));
            qbdsSalesTable.addLink(fieldNum(CustInvoiceJour, SalesId), fieldNum(SalesTable, SalesId));
            qbdsSalesTable.addRange(fieldNum(SalesTable, SalesId))
                .value(SysQuery::value(_salesId));
        }
        
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinted</Name>
				<Source><![CDATA[
    public static void updatePrinted(CustInvoiceJour _invoiceJour, PrintedOriginals _originalsIncrement)
    {
        CustInvoiceJour invoiceJour;
        
        ttsbegin;
        
        invoiceJour = CustInvoiceJour::findRecId(_invoiceJour.RecId, true);
        
        invoiceJour.PrintedOriginals += _originalsIncrement;
        invoiceJour.doUpdate();
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVirtualLine</Name>
				<Source><![CDATA[
    private void updateVirtualLine(Num _id, ItemId _itemId, TransDate _transDate = dateNull())
    {
        this.updateTMPVirtualLine(_id, _itemId, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTMPVirtualLine</Name>
				<Source><![CDATA[
    private TmpFrmVirtual updateTMPVirtualLine(Num _id, ItemId _itemId, TransDate _transDate = dateNull(), TmpFrmVirtual _tmpFrmVirtual = null)
    {
        TmpFrmVirtual tmpFrmVirtual;

        if (_tmpFrmVirtual)
        {
            tmpFrmVirtual = _tmpFrmVirtual;
        }

        select firstonly tmpFrmVirtual
            where tmpFrmVirtual.Id == _id
                && tmpFrmVirtual.ItemId == _itemId
                && (_transDate == dateNull() || tmpFrmVirtual.TransDate == _transDate);

        if (!tmpFrmVirtual)
        {
            tmpFrmVirtual.clear();
            tmpFrmVirtual.Id = _id;
            tmpFrmVirtual.ItemId = _itemId;

            if (_transDate != dateNull())
            {
                tmpFrmVirtual.TransDate = _transDate;
            }

            tmpFrmVirtual.insert();
        }

        return tmpFrmVirtual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST_EE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amountMst for vat tax declaration.
    /// </summary>
    /// <returns>The accounting currency amount.</returns>
    // Used in GER configuration.
    public Amount amountMST_EE()
    {
        Amount amountMST;

        if (isFlightEnabled(LocalizationFlights::EEVATDeclaration_UseSalesBalanceForSalesInvoiceInvoiceAmount))
        {
            amountMST = this.amountMST(this.SalesBalance);
        }
        else
        {
            amountMST = this.amountMST(this.InvoiceAmount - this.SumTax);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryRegistrationNumber_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get registration number for primary address.
    /// </summary>
    /// <returns>The registration number.</returns>
    // Used in GER configuration.
    public TaxRegistrationNumber getPrimaryRegistrationNumber_W()
    {
        TaxRegistrationNumber taxRegistrationNumber;

        CustTable custTable = CustTable::find(this.InvoiceAccount);

        if (custTable)
        {
            taxRegistrationNumber = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.InvoiceDate);
        }

        return taxRegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigInvoiceAmount</Name>
				<Source><![CDATA[
    public AmountCur getOrigInvoiceAmount()
    {
        Query query = new Query(queryStr(CustInvoiceOrig_W));
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CustInvoiceJour));

        qbds.addSelectionField(fieldNum(CustInvoiceJour, InvoiceAmount), SelectionField::Sum);

        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, InvoiceId), queryValue(this.InvoiceId));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, InvoiceDate), queryValue(this.InvoiceDate));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, SalesId), queryValue(this.SalesId));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, numberSequenceGroup), queryValue(this.numberSequenceGroup));
                       
        QueryRun queryRun = new QueryRun(query);
        queryRun.next();
        CustInvoiceJour custInvoiceJour = queryRun.get(tableNum(CustInvoiceJour));

        return custInvoiceJour.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigInvoiceId</Name>
				<Source><![CDATA[
    public CustInvoiceId getOrigInvoiceId()
    {
        Query query = new Query(queryStr(CustInvoiceOrig_W));

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(CustInvoiceJour));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, InvoiceId), queryValue(this.InvoiceId));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, InvoiceDate), queryValue(this.InvoiceDate));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, SalesId), queryValue(this.SalesId));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceJour, numberSequenceGroup), queryValue(this.numberSequenceGroup));
               
        QueryRun queryRun = new QueryRun(query);
        queryRun.next();
        CustInvoiceJour custInvoiceJour = queryRun.get(tableNum(CustInvoiceJour));

        return custInvoiceJour.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of original invoices associated with the invoice.
    /// </summary>
    /// <returns>Original invoices.</returns>
    [ERTableName(tableStr(CustInvoiceJour))]
    public Query getOriginalInvoices()
    {
        const str custInvoiceTransDSName = 'Trans';
        Query query = new Query(queryStr(CustInvoiceOrig_W));

        QueryBuildDataSource qbds = query.dataSourceName(custInvoiceTransDSName);
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceTrans, InvoiceId), queryValue(this.InvoiceId));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceTrans, InvoiceDate), queryValue(this.InvoiceDate));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceTrans, SalesId), queryValue(this.SalesId));
        findOrCreateRange_W(qbds,fieldNum(CustInvoiceTrans, numberSequenceGroup), queryValue(this.numberSequenceGroup));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegData_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax registration data for the specified element of the global address book.
    /// </summary>
    /// <returns>
    /// Class <c>SIIGetTaxRegData</c> with calculated tax regisration data.
    /// </returns>
    public SIIGetTaxRegData getTaxRegData_ES()
    {
        return SIIGetTaxRegData::findByCustVendInvoiceJour(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDescription_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets description of the assets acquired.
    /// </summary>
    /// <returns>
    /// Description of the assets acquired.
    /// </returns>
    public str getInvoiceDescription_ES()
    {
        return SIIGetInvoiceDescription::getInvoiceDescription(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByInvoiceIdTransDate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the record exist for the given invoice id and invoice date.
    /// </summary>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <param name="_transDate">
    /// The invoice date.
    /// </param>
    /// <param name="_custInvoiceAccount">
    /// The invoice account.
    /// </param>
    /// <returns>
    /// Returns true if the check succeed.
    /// </returns>
    //<GIN>
    public static boolean existByInvoiceIdTransDate_IN(InvoiceId _invoiceId, TransDate _transDate, CustInvoiceAccount _custInvoiceAccount)
    {
        return _invoiceId && _transDate &&
        (select firstonly custInvoiceJour
            where   custInvoiceJour.InvoiceId   == _invoiceId   &&
                    custInvoiceJour.InvoiceDate == _transDate   &&
                    custInvoiceJour.InvoiceAccount == _custInvoiceAccount).RecId != 0;

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChronologicalDates_FR</Name>
				<Source><![CDATA[
    //</GIN>

    /// <summary>
    /// Validates the invoice date of the document <paramref name="_header"/>.
    /// </summary>
    /// <param name="_header">
    /// The document to be validated.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public static boolean validateChronologicalDates_FR(Common _header)
    {
        boolean ret = true;
        TransDate invoiceDate;
        CustInvoiceAccount custInvoiceAccount;
        NumberSequenceReference referenceTable;
        boolean isAnyHeaderWithResonCode;
        NumberSequenceGroupId numberSeqGroupId;

        switch(_header.TableId)
        {
            case tableNum(CustInvoiceTable):
                CustInvoiceTable custInvoiceTable = _header;
                numberSeqGroupId = custInvoiceTable.NumberSequenceGroup;
                isAnyHeaderWithResonCode    = custInvoiceTable.CorrectionReasonCode != 0;
                invoiceDate                 = custInvoiceTable.InvoiceDate;
                custInvoiceAccount          = custInvoiceTable.InvoiceAccount;
                referenceTable              = NumberSeqReference::findReference(extendedTypeNum(CustInvoiceId));
                break;

            case tablenum(SalesParmTable):
                SalesParmTable salesParmTable = _header;
                SalesParmSubTable salesParmSubTable;
                SalesTable salesTable;

                numberSeqGroupId = salesParmTable.salesTable().NumberSequenceGroup;
                referenceTable = NumberSeqReference::findReference(extendedTypeNum(InvoiceId));

                select firstonly RecId from salesTable
                    where salesTable.CreditNoteReasonCode != 0
                exists join salesParmSubTable
                    where salesParmSubTable.OrigSalesId == salesTable.SalesId
                        && salesParmSubTable.ParmId == salesParmTable.ParmId
                        && salesParmSubTable.TableRefId == salesParmTable.TableRefId;

                isAnyHeaderWithResonCode = salesTable.RecId != 0;
                invoiceDate = salesParmTable.Transdate;
                custInvoiceAccount = salesParmTable.InvoiceAccount;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!isAnyHeaderWithResonCode)
        {
            boolean isAnyLineWithReasonCode;

            switch(_header.TableId)
            {
                case tableNum(CustInvoiceTable):
                    CustInvoiceTable custInvoiceTable = _header;
                    CustInvoiceLine custInvoiceLineLoc;

                    select firstonly RecId from custInvoiceLineLoc
                        where custInvoiceLineLoc.ParentRecId == custInvoiceTable.RecId
                            && custInvoiceLineLoc.ReasonRefRecId != 0;

                    isAnyLineWithReasonCode = custInvoiceLineLoc.RecId != 0;
                    break;

                case tableNum(SalesParmTable):
                    SalesParmTable salesParmTable = _header;
                    SalesParmLine salesParmLine;
                    SalesLine salesLine;

                    select firstonly RecId from salesParmLine
                        where salesParmLine.ParmId == salesParmTable.ParmId
                            && salesParmLine.TableRefId == salesParmTable.TableRefId
                    exists join salesLine
                        where salesLine.RecId == salesParmLine.SalesLineRecId
                            && salesLine.CreditNoteReasonCode != 0;

                    isAnyLineWithReasonCode = salesParmLine.RecId != 0;
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (!isAnyLineWithReasonCode)
            {
                NumberSequenceTable numSeqTab = CustInvoiceJour::getNumberSequenceTableForChronologicalDateValidation_W(
                    invoiceDate,
                    referenceTable,
                    numberSeqGroupId);

                ret = CustInvoiceJour::validateInvoiceDateByNumberSequence(
                    numSeqTab,
                    custInvoiceAccount,
                    invoiceDate);
            }
        }

        TransDate currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (invoiceDate > currentDate && _header.TableId == tableNum(CustInvoiceTable))
        {
            warning(strfmt("@ChronologicalNumbering:InvoiceDateLaterThanCurrentDate",
                    invoiceDate,
                    custInvoiceAccount,
                    currentDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintJournal</Name>
				<Source><![CDATA[
    //</GIN>

    /// <summary>
    /// Check whether journal should be printed.
    /// </summary>
    /// <returns>
    /// Returns true if the journal needs to be printed.
    /// </returns>
    protected boolean shouldPrintJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets PaymentId from CustInvoiceJour Table.
    /// </summary>
    /// <param name="_isoCountryCode">
    /// IsoCountryCode.
    /// </param>
    /// <returns>
    /// PaymentId of the current record.
    /// </returns>
    public PaymId getPaymentId(LogisticsAddressCountryRegionISOCode _isoCountryCode)
    {
        PaymId paymId;

        switch (_isoCountryCode)
        {
            case #isoNO:
                paymId = this.GiroType == PaymentStub::BBS && this.PaymId ? this.PaymId : this.ParmId;
                break;

            default:
                paymId = this.ParmId;
                break;
        }

        return paymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceJourInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendTransInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>The <c>CustVendTransInterface</c> object.</returns>
    public CustVendInvoiceJourInterface custVendInvoiceJourInterface()
    {
        return this.CustVendInvoiceJour::custVendInvoiceJourInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceDateByNumberSequence</Name>
				<Source><![CDATA[
    private static boolean validateInvoiceDateByNumberSequence(
        NumberSequenceTable _numSeqTab,
        CustInvoiceAccount _invoiceAccount,
        TransDate _invoiceDate)
    {
        boolean isValid;

        if (_numSeqTab)
        {
            isValid = CustInvoiceJour::validateInvoiceDate(
                _numSeqTab.RecId,
                _invoiceAccount,
                _invoiceDate);
        }
        else
        {
            isValid = checkFailed(strFmt("@ElectronicReporting:NumberSeqByRecIdNotFound", _numSeqTab.RecId));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean validateInvoiceDate(
        RecId _refRecId,
        CustInvoiceAccount _invoiceAccount,
        TransDate _invoiceDate,
        boolean infologMessage = true)
    {
        boolean isValid = true;

        FieldId locRelationField;
        FieldId locNumberSeqField;
        TableId locTableId;

        TaxBookContext context = TaxBookContext::current();

        switch (true)
        {
            case ((SysCountryRegionCode::countryInfo() == #isoIT
                    && !TaxIntegrationUtils::isMultipleTaxIdEnabled())
                || (context && context.parmIsLegalEntityOrTaxInIT())):
                if (!FeatureStateProvider::isFeatureEnabled(UnifiedPostingDateControlFeature_IT::instance()))
                {
                    locTableId = tableNum(CustInvoiceJour_W);
                    locRelationField = fieldNum(CustInvoiceJour_W, CustInvoiceJour);
                    locNumberSeqField = fieldNum(CustInvoiceJour_W, NumberSequenceId_IT);
                }
                break;

            case (SysCountryRegionCode::countryInfo() == #isoFR):
                locTableId = tableNum(CustInvoiceJour_FR);
                locRelationField = fieldNum(CustInvoiceJour_FR, CustInvoiceJour);
                locNumberSeqField = fieldNum(CustInvoiceJour_FR, NumberSequenceId);
                break;
        }

        if (locTableId)
        {
            Query query = new Query();
            QueryBuildDataSource qbdsCustInvoiceJour = query.addDataSource(tableNum(CustInvoiceJour));
            qbdsCustInvoiceJour.addSelectionField(fieldNum(CustInvoiceJour, InvoiceDate));
            qbdsCustInvoiceJour.addRange(fieldNum(CustInvoiceJour, InvoiceDate)).value(strFmt(' > %1', _invoiceDate));
            qbdsCustInvoiceJour.addSortField(fieldNum(CustInvoiceJour, InvoiceDate), SortOrder::Descending);

            QueryBuildDataSource qbdsLocalTable = qbdsCustInvoiceJour.addDataSource(locTableId);
            qbdsLocalTable.joinMode(JoinMode::ExistsJoin);
            qbdsLocalTable.addLink(fieldNum(CustInvoiceJour, RecId), locRelationField);
            qbdsLocalTable.addRange(locNumberSeqField).value(int642Str(_refRecId));

            QueryRun queryRun = new QueryRun(query);

            if (queryRun.next())
            {
                CustInvoiceJour custInvoiceJour = queryRun.get(tableNum(CustInvoiceJour));

                isValid = infologMessage && checkFailed(strfmt(
                    "@ChronologicalNumbering:InvoiceDateEarlierThanPostedInvoice",
                    _invoiceDate,
                    _invoiceAccount,
                    custInvoiceJour.InvoiceDate));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLanguageId</Name>
				<Source><![CDATA[
    private LanguageId getLanguageId(SalesTable salesTable)
    {
        LanguageId languageId;

        if (this.InvoiceAccount)
        {
            languageId = CustTable::find(this.InvoiceAccount).languageId();
        }

        if (!languageId)
        {
            languageId = salesTable.LanguageId;
        }
        
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets record count of <c>CustInvoiceJour</c>.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_invoiceCustomer">
    /// If Yes, calculate statistics based on customer's invoice account; otherwise, pull from the customer's order account number.
    /// </param>
    /// <returns>
    /// Count of <c>CustInvoiceJour</c> record.
    /// </returns>
    internal static int calcNumOfCustInvoiceJour(CustAccount _accountNum, NoYes _invoiceCustomer)
    {
        CustInvoiceJour custInvoiceJour;

        select count(RecId) from custInvoiceJour
            where (custInvoiceJour.InvoiceAccount == _accountNum && _invoiceCustomer)
                || (custInvoiceJour.OrderAccount == _accountNum && !_invoiceCustomer);

        return custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSumOfCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of <c>SalesBalanceMST</c> in table <c>CustInvoiceJour</c>.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_invoiceCustomer">
    /// If Yes, calculate statistics based on customer's invoice account; otherwise, pull from the customer's order account number.
    /// </param>
    /// <returns>
    /// Sum of <c>SalesBalanceMST</c> in table <c>CustInvoiceJour</c>.
    /// </returns>
    internal static Amount calcSumOfCustInvoiceJour(CustAccount _accountNum, NoYes _invoiceCustomer)
    {
        CustInvoiceJour custInvoiceJour;

        select sum(SalesBalanceMST) from custInvoiceJour
            where (custInvoiceJour.InvoiceAccount == _accountNum && _invoiceCustomer)
                || (custInvoiceJour.OrderAccount == _accountNum && !_invoiceCustomer);

        return custInvoiceJour.SalesBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceTableForChronologicalDateValidation_W</Name>
				<Source><![CDATA[
    private static NumberSequenceTable getNumberSequenceTableForChronologicalDateValidation_W(
        InvoiceDate _invoiceDate,
        NumberSequenceReference _numberSequenceReference,
        NumberSequenceGroupId _numberSeqGroupId)
    {
        NumberSequenceTable numSeqTab;

        TaxBookContext context = TaxBookContext::current();

        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
            && !TaxIntegrationUtils::isMultipleTaxIdEnabled())
            || (context && context.parmIsLegalEntityOrTaxInIT()))
        {
            numSeqTab = NumberSequenceTable::getNumberSequenceTable(_numberSequenceReference, _numberSeqGroupId);
        }
        else
        {
            RefTableId refTableId;
            RefRecId refRecId;

            if (_numberSeqGroupId != '')
            {
                NumberSequenceGroupRef numberSequenceGroupRef  = NumberSequenceGroupRef::findNaturalKey(
                    _numberSequenceReference.NumberSequenceDatatype,
                    NumberSeqScopeFactory::createDefaultScope().getId(),
                    _numberSeqGroupId);

                refTableId = numberSequenceGroupRef.TableId;
                refRecId = numberSequenceGroupRef.RecId;
            }
            else
            {
                refTableId = _numberSequenceReference.TableId;
                refRecId = _numberSequenceReference.RecId;
            }

            ChronologicalNumberingSetup_W chronologicalNumberingSetup;

            select firstonly validtimestate(_invoiceDate) chronologicalNumberingSetup
                where chronologicalNumberingSetup.RefTableId == refTableId
                    && chronologicalNumberingSetup.RefRecId == refRecId;

            numSeqTab = NumberSequenceTable::find(chronologicalNumberingSetup.NumberSequenceTable);
        }

        return numSeqTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustTransOpenMatchesInvoiceId</Name>
				<Source><![CDATA[
    static internal boolean isCustTransOpenMatchesInvoiceId(TAMDeduction _tamDeduction, RecId _custTransOpenRecId)
    {
        boolean ret = true;

        if (!_tamDeduction.CustInvoiceId)
        {
            return ret;
        }

        CustTransOpen custTransOpen;
        CustTrans custTrans;
        CustInvoiceJour custInvoiceJour;

        select firstonly InvoiceId from custInvoiceJour
            exists join custTrans
                where CustTrans.Voucher == custInvoiceJour.LedgerVoucher
            exists join custTransOpen
                where custTransOpen.RecId == _custTransOpenRecId
                && custTransOpen.RefRecId == custTrans.RecId;

        if (custInvoiceJour.InvoiceId != _tamDeduction.CustInvoiceId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQRCode_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the QR code is received from ZATCA.
    /// </summary>
    /// <returns> True, if the QR code is received.</returns>
    display IsQRCodeReceived_SA checkQRCode_SA()
    {
        return this.QRCode_SA != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if voucher is valid in CustInvoiceJour table
    /// </summary>
    /// <param name = "_voucher">Subledger voucher to validate</param>
    /// <param name = "_transDate">Transaction date to validate</param>
    /// <returns>True if voucher id is valid; otherwise false.</returns>
    internal static boolean validateVoucher(
        Voucher _voucher,
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CustInvoiceJour custInvoiceJour;

        boolean isValid = true;
        ReuseVoucher reuseVoucher = LedgerParameters::find().CheckVoucher;

        switch (reuseVoucher)
        {
            case ReuseVoucher::WarnDuplicate:
                custInvoiceJour = CustInvoiceJour::findOnMaxInvoiceDate(_voucher);

                if (custInvoiceJour)
                {
                    // log warning
                    warning(strFmt("@SYS573", _voucher, date2StrUsr(custInvoiceJour.InvoiceDate, DateFlags::FormatAll)));
                }
                break;
            case ReuseVoucher::NoDuplicate:
                custInvoiceJour = CustInvoiceJour::findOnMaxInvoiceDate(_voucher);

                if (custInvoiceJour)
                {
                    // log warning
                    isValid = checkFailed(strFmt("@SYS573", _voucher, date2StrUsr(custInvoiceJour.InvoiceDate, DateFlags::FormatAll)));
                }

                break;
            case ReuseVoucher::NoDuplicateInYear:
                // if there is record exists, that means voucher is duplicated in this fiscal year
                custInvoiceJour = CustInvoiceJour::findInFiscalYear(_voucher, _transDate);

                if (custInvoiceJour)
                {
                    // log warning
                    isValid = checkFailed(strFmt("@SYS573", _voucher, date2StrUsr(custInvoiceJour.InvoiceDate, DateFlags::FormatAll)));;
                }
                break;
            case ReuseVoucher::AcceptDuplicate:
                isValid = true;
                break;
            default:
                // make new enum values fail by default
                isValid = false;
                break;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record in the same fiscal year as _transDate
    /// </summary>
    /// <param name = "_voucher">Voucher id to find record</param>
    /// <param name = "_transDate">Transaction date of the voucher</param>
    /// <returns>The <c>CustInvoiceJour</c> record</returns>
    internal static CustInvoiceJour findInFiscalYear(Voucher _voucher, TransDate _transDate)
    {
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        TransDate fromDate = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, _transDate);
        TransDate toDate = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _transDate);
        CustInvoiceJour custInvoiceJour;

        select maxof(InvoiceDate) from custInvoiceJour
            where custInvoiceJour.LedgerVoucher == _voucher
            && (!calendarRecId ||
                (custInvoiceJour.InvoiceDate >= fromDate
                && custInvoiceJour.InvoiceDate <= toDate));

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOnMaxInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record based on max invoice date
    /// </summary>
    /// <param name = "_voucher">Voucher id to find record</param>
    /// <returns>The <c>CustInvoiceJour</c> record</returns>
    private static CustInvoiceJour findOnMaxInvoiceDate(Voucher _voucher)
    {
        CustInvoiceJour custInvoiceJour;

        select maxof(InvoiceDate) from custInvoiceJour
            where custInvoiceJour.LedgerVoucher == _voucher;

        return custInvoiceJour;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124456</DeveloperDocumentation>
	<FormRef>CustInvoiceJournal</FormRef>
	<Label>@SYS1557</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InvoiceId</TitleField1>
	<TitleField2>InvoiceAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InvoiceNumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInvoiceJour_Officials</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceJour_Officials</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceJour_Intrastat</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceJour_Intrastat</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceBackorderLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceBackorderLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceSalesLink</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceSalesLink</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustInvoiceTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInvoiceTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustVendCreditInvoicingJour</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustVendCreditInvoicingJour</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnAccountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountInDefaultCurrency</Name>
			<Label>@SYS84859</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceRoundOffMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumMarkupMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumLineDiscMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDiscMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesBalanceMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTaxMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Balance</Name>
			<Label>@SYS343995</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankLCExportGroup</Name>
			<Label>@SYS316286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCExportLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillOfLading</Name>
			<Label>@SYS50700</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillOfLadingId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CountryRegion</Name>
			<Label>@SYS7437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateSecondary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Triangulation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchangeRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportingCurrencyExchangeRateSecondary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeCustomer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Data</Name>
			<Label>@SYS7403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>@SYS101280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceLineSpecific</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInvoiceAddress_PL</Name>
			<Label>@GLS111658</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fiscalInvoiceAddressing_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInvoiceName_PL</Name>
			<Label>@SYS27874</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fiscalInvoiceName_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalOrderAddress_PL</Name>
			<Label>@SYS22223</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fiscalOrderAddressing_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalOrderName_PL</Name>
			<Label>@SYS27874</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>fiscalOrderName_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatDispatch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Listcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intercompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyCompanyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAddress</Name>
			<Label>@SYS58074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoicingName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoicePostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAmount</Name>
			<Label>@SYS9458</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Log</Name>
			<Label>@SYS2515</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OLAP</Name>
			<Label>@SYS25984</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OLAPCostValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS30289</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MCRDueAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCREmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MCRPaymAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FixedDueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectDebitMandate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentSchedule</Name>
			<Label>@SYS23027</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintingSpecifications</Name>
			<Label>@SYS28138</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Updated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSpecifyByLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPrintOnInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintManagement</Name>
			<Label>@SYS54502</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Proforma</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintedOriginals</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintSite</Name>
			<Label>@SYS110380</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintMgmtSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReasonCode_W</Name>
			<Label>@SYS114719</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonTableRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reversal</Name>
			<Label>@SYS8776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReversedRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReverseCharge</Name>
			<Label>@SYS118818</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RCSalesList_UK</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReverseChargeAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SAD_PL</Name>
			<Label>@GLS109193</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayDomesticSalesTaxVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesInvoices</Name>
			<Label>@SYS9954</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesOrder</Name>
			<Label>@SYS9694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Backorder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnItemNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EUSalesList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOriginId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxInvoiceSalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentHeader</Name>
			<Label>@SYS127863</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TermsOfDelivery</Name>
			<Label>@SYS6576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Warehouse</Name>
			<Label>@SYS6437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebOverviewLeft</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>billingClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebOverviewRight</Name>
			<Label>@SYS62786</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Return</Name>
			<Label>@SYS101133</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReturnReasonCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReturnStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDI</Name>
			<Label>@Mexico:EInvoice_CustInvoiceJour_CFDITableGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProvisionalAssessment_IN</Name>
			<Label>@TaxGST:ProvisionalAssessment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProvisionalAssessment_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostedState</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostedState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxRegistration</Name>
			<Label>@AccountsReceivable:TaxRegistrationNumberTab</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Backorder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS14224</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankLCExportLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankLCLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillOfLadingId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSBillOfLadingId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscAmount</ExtendedDataType>
			<Label>@SYS4376</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscBaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CashDiscBaseDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CovStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CovStatus</ExtendedDataType>
			<Label>@SYS5727</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustGroupId</ExtendedDataType>
			<Label>@SYS3815</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
			<Label>@SYS12056</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
			<Label>@SYS22058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirectDebitMandate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustDirectDebitMandateRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<GroupPrompt>@SYS8722</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvTermId</ExtendedDataType>
			<GroupPrompt>@SYS5280</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@SYS8434</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
			<Label>@SYS14021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EInvoiceLineSpecific</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceLineSpecific</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesEndDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndDiscMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesEndDiscAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EUSalesList</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListDispatchId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustExchRate</ExtendedDataType>
			<Label>@SYS4193</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRateSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FixedDueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesFixedDueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubInvoiceId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyCompanyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyCompanyId</ExtendedDataType>
			<Label>@SYS75317</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyPosted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterCompanyPurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPurchId</ExtendedDataType>
			<Label>@SYS75319</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatDispatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatDispatchId</ExtendedDataType>
			<FeatureClass>IntrastatDispatchIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesInventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmountMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS71013</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InvoicePostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceRoundOffMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOffMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoicingName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustName</ExtendedDataType>
			<Label>@SYS58518</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCorrection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6054</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Listcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MCRDueAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@MCR11275</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MCREmail</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MCRPaymAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS15658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>numberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OLAPCostValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesCostValue</ExtendedDataType>
			<SaveContents>No</SaveContents>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OnAccountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS7659</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeCustomer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OneTimeCustomer</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDayId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymDayId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Prepayment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendPrepayment</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PrintedOriginals</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PrintedOriginals</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrintMgmtSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Label>@SYS110380</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Proforma</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendProforma</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchaseOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
			<Label>@SYS9452</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RCSalesList_UK</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>GB</CountryRegionCodes>
			<ExtendedDataType>RCListDispatchId_UK</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonTableRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceiptDateConfirmed_ES</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES,HU</CountryRegionCodes>
			<ExtendedDataType>SalesReceiptDateConfirmed</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RefNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1201</Label>
			<EnumType>RefNum</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnItemNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnItemNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReturnReasonCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReturnReasonCodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReturnStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReturnStatusHeader</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReverseChargeAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@Tax:RCAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReversedRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS330317</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS464</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesBalanceMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS71021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesOriginId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SalesType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipCarrierBlindShipment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ShipCarrierBlindShipment</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS127863</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS319494</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSumLineDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumLineDiscMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesSumLineDiscAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSumSales</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumMarkupMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSumMSTSales</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@SYS5878</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTaxMST</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<Label>@SYS71022</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<GroupPrompt>@SYS3815</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInvoiceSalesId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxInvoiceSalesId</ExtendedDataType>
			<FeatureClass>TaxInvoiceSalesIdEnableToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxPrintOnInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPrintOnInvoice</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSpecifyByLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxSpecifyLine</ExtendedDataType>
			<Label>@SYS19934</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Triangulation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Updated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS439</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Volume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>Volume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<ExtendedDataType>Weight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerSalesTaker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTaker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SentElectronically</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4004070</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReverseCharge_UK</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProvisionalAssessment_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfProvisionalAssessment</HelpText>
			<Label>@TaxGST:ProvisionalAssessment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostedState</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>SalesFastPrintSalesOrderFeature</FeatureClass>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>JournalPostedState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PartyTaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchangeRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportingCurrencyExchRate</ExtendedDataType>
			<Label>@GeneralLedger:ReportingCurrencyFixedExchangeRate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReportingCurrencyExchangeRateSecondary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportingCurrencyExchRateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FinTag</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FinTagRecId</ExtendedDataType>
			<FeatureClass>SalesOrderFinTagFeature</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HeaderTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesIdDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceNumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DefaultDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VATNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VATNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkerSalesTakerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkerSalesTaker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceDateSalesIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustDirectDebitMandateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DirectDebitMandate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RefNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EndDisc</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceAmount</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesBalance</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SumMarkup</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SumTax</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoicePostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoicePostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceAddressMap_TH</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoicePostalAddress</MapField>
					<MapFieldTo>InvoicePostalAddress</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AttorneyDate_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyIssuedName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
					<MapFieldTo>CashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscBaseDate</MapField>
					<MapFieldTo>CashDiscBaseDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsigneeAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsignorAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsInvoice_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceDate_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Correct_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate_ES</MapField>
					<MapFieldTo>ReceiptDateConfirmed_ES</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName_RU</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress_RU</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc_RU</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
					<MapFieldTo>ExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedFully_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureModule_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
					<MapFieldTo>FixedDueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GroupId</MapField>
					<MapFieldTo>CustGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatFulfillmentDate_HU</MapField>
					<MapFieldTo>IntrastatFulfillmentDate_HU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_JP</MapField>
					<MapFieldTo>InvoiceAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_RU</MapField>
					<MapFieldTo>InvoiceAmountMST</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceNum</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRegister_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceStatus_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>LedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOrderID</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NonRealRevenue_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceCode_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroupId</MapField>
					<MapFieldTo>numberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OffSessionId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeAccount</MapField>
					<MapFieldTo>OneTimeCustomer</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
					<MapFieldTo>PartyTaxID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymDayId</MapField>
					<MapFieldTo>PaymDayId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
					<MapFieldTo>PaymId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Prepayment</MapField>
					<MapFieldTo>Prepayment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintCopies_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintOriginals_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintStandardCurrency_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Proforma</MapField>
					<MapFieldTo>Proforma</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchInternalInvoiceId_RU</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff_W</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesInvoicePostingType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOrderbalance</MapField>
					<MapFieldTo>SalesBalance</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SentElectronically</MapField>
					<MapFieldTo>SentElectronically</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader_RU</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SumTax</MapField>
					<MapFieldTo>SumTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
					<MapFieldTo>TaxId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
					<MapFieldTo>Triangulation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitedVATInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Updated</MapField>
					<MapFieldTo>Updated</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATOnPayment_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WhoIsAuthor_LT</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterJournal</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchrateSecondary</MapField>
					<MapFieldTo>ExchRateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>numberSequenceGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
					<MapFieldTo>Triangulation</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InterCompanyJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyCompanyId</MapField>
					<MapFieldTo>InterCompanyCompanyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InterCompanyId</MapField>
					<MapFieldTo>InterCompanyPurchId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventTrackingCustJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ContactPersonId</MapField>
					<MapFieldTo>ContactPersonId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomerRef</MapField>
					<MapFieldTo>CustomerRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PlFiscalDocument</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxIntgrExportDocumentSourceMap_CN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>InvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>LedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRelationType</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCurrencyAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
					<MapFieldTo>InclTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>Listcode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
					<MapFieldTo>PartyTaxID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
					<MapFieldTo>TaxID</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCExportLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankLCExportLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankLCExportLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankLCExportLine_CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankLCExportLine</Name>
					<Field>BankLCExportLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>CustCashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustDirectDebitMandate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustDirectDebitMandate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirectDebitMandate</Name>
					<Field>DirectDebitMandate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustGroup</Name>
					<SourceEDT>CustGroupId</SourceEDT>
					<Field>CustGroup</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceJour_Reversal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour_Reversal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReversedRecId</Name>
					<Field>ReversedRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustInvoiceTable</Name>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableRole>CustInvoiceTable_1</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceId</Name>
					<Field>InvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceDate</Name>
					<Field>InvoiceDate</Field>
					<RelatedField>InvoiceDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroup</Name>
					<Field>numberSequenceGroup</Field>
					<RelatedField>numberSequenceGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_CustInvoiceJour_InvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_CustInvoiceJour_InvoiceAccount</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterCompanyCompanyId</Name>
					<SourceEDT>InterCompanyCompanyId</SourceEDT>
					<Field>InterCompanyCompanyId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>InterCompanyCompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DeliveryPostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<SourceEDT>CustDlvModeId</SourceEDT>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>CustDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FreeTxtInvoice</Name>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableRole>FreeTxtInvoice</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationId</Name>
					<SourceEDT>SalesInventLocationId</SourceEDT>
					<Field>inventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrintMgmtSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>PrintMgmtSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoicePostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InvoicePostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoicePostalAddress</Name>
					<Field>InvoicePostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroup</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>numberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymDay</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymDay</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymDayId</Name>
					<SourceEDT>CustPaymDayId</SourceEDT>
					<Field>PaymDayId</Field>
					<RelatedField>PaymDayId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymDayIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>CustPaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReturnReasonCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReturnReasonCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReturnReasonCodeId</Name>
					<SourceEDT>ReturnReasonCodeId</SourceEDT>
					<Field>ReturnReasonCodeId</Field>
					<RelatedField>ReasonCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ReturnReasonCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesOriginId</Name>
					<SourceEDT>SalesOriginId</SourceEDT>
					<Field>SalesOriginId</Field>
					<RelatedField>OriginId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesOriginIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentHeader_CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SourceDocumentLine_CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSBillOfLading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WMSBillOfLading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BillOfLadingId</Name>
					<SourceEDT>WMSBillOfLadingId</SourceEDT>
					<Field>BillOfLadingId</Field>
					<RelatedField>billOfLadingId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkerSalesTaker_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkerSalesTaker_CustInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerSalesTaker</Name>
					<Field>WorkerSalesTaker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_CustInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PartyTaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PartyTaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_CustInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartyTaxId</Name>
					<Field>PartyTaxId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FinTag</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FinTag</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FinTag</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FinTag</Name>
					<Field>FinTag</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>