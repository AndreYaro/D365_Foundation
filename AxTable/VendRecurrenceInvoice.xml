<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRecurrenceInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRecurrenceInvoice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayIsActive</Name>
				<Source><![CDATA[
    public display VendRecurrenceIsActive displayIsActive(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        return _vendRecurrenceInvoice.IsStopped ? NoYesCombo::No : NoYesCombo::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editIsActive</Name>
				<Source><![CDATA[
    public edit VendRecurrenceIsActive editIsActive(boolean _set, VendRecurrenceIsActive _isStopped)
    {
        if (_set)
        {
            this.IsStopped = _isStopped ? NoYesCombo::No : NoYesCombo::Yes;
        }

        return this.displayIsActive(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLastGenerationDate</Name>
				<Source><![CDATA[
    public display TransDate displayLastGenerationDate(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        VendorRecurrenceInvoice recurrenceInvoice;
        TransDate maxRecurrenceInvoiceDate, maxLastGenerationDate;
        VendRecurrenceInvoiceGroup vendRecurrenceInvoiceGroup;

        maxLastGenerationDate = VendRecurrenceInvoice::recurrenceInvoiceLastGenerationDate(_vendRecurrenceInvoice);

        select RecId from recurrenceInvoice
            where recurrenceInvoice.VendRecurrenceInvoice == _vendRecurrenceInvoice.RecId &&
                  recurrenceInvoice.RecurrenceInvoiceDate == maxLastGenerationDate
        join InvoiceDate from vendRecurrenceInvoiceGroup
            where vendRecurrenceInvoiceGroup.RecId == recurrenceInvoice.VendRecurrenceInvoiceGroup &&
                  vendRecurrenceInvoiceGroup.GenerationDate == recurrenceInvoice.RecurrenceInvoiceDate;

        maxRecurrenceInvoiceDate = vendRecurrenceInvoiceGroup.InvoiceDate;

        return maxRecurrenceInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNextGenerationDate</Name>
				<Source><![CDATA[
    public display TransDate displayNextGenerationDate(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        return VendRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(_vendRecurrenceInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalNumberOfInvoice</Name>
				<Source><![CDATA[
    public display Counter displayTotalNumberOfInvoice(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        return VendRecurrenceInvoice::numOfRecurrenceInvoice(_vendRecurrenceInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean valid = super();

        if (valid && VendRecurrenceInvoice::numOfRecurrenceInvoice(this) > 0)
        {
            valid = checkFailed("@SYS318899");
        }
        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        AmountCur totalRecurrenceInvoiceAmount;
        AmountCur totalTemplateLineAmount;
        DialogButton dialogButton;

        boolean valid = super(_fieldIdToCheck);

        if (valid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendRecurrenceInvoice, StartDate):
                    if (VendRecurrenceInvoice::numOfRecurrenceInvoice(this) > 0)
                    {
                        valid = checkFailed("@SYS318898");
                    }
                    break;

                case fieldNum(VendRecurrenceInvoice, EndDate):
                    if (this.EndDate != dateNull() && this.EndDate <= VendRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(this))
                    {
                        valid = checkFailed("@SYS328739");
                    }
                    else if (this.EndDate != dateNull() && this.EndDate < VendRecurrenceInvoice::getNextGenerationDate(this.StartDate, this.Interval * 2, this.RecurrencePattern) && hasGUI())
                    {
                        dialogButton = Box::yesNo("@SYS318896", DialogButton::No);

                        valid = dialogButton == DialogButton::Yes;
                    }
                    else if (this.IsStopped == NoYesCombo::Yes && this.EndDate >= VendRecurrenceInvoice::recurrenceInvoiceNextGenerationDate(this))
                    {
                        this.IsStopped = NoYesCombo::No;
                    }
                    break;

                case fieldNum(VendRecurrenceInvoice, CeilingAmount):
                    totalRecurrenceInvoiceAmount = VendRecurrenceInvoice::sumRecurrenceInvoiceAmount(this, this.CurrencyCode);
                    totalTemplateLineAmount = VendInvoiceLineTemplate::totalTemplateAmountIncTax(this.vendInvoiceTemplate);

                    if (this.CeilingAmount && this.CeilingAmount < totalTemplateLineAmount)
                    {
                        valid = checkFailed("@SYS327568");
                    }
                    else if (this.CeilingAmount && totalRecurrenceInvoiceAmount && this.CeilingAmount <= totalRecurrenceInvoiceAmount)
                    {
                        valid = checkFailed(strFmt("@SYS327567", totalRecurrenceInvoiceAmount));
                    }
                    break;
            }
        }
        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RecId _vendRecurrenceInvoiceRecId)
    {
        boolean exist = true;

        if (!VendRecurrenceInvoice::exist(_vendRecurrenceInvoiceRecId))
        {
            exist = checkFailed(strFmt(VendRecurrenceInvoice::txtNotExist(), _vendRecurrenceInvoiceRecId));
        }

        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _vendRecurrenceInvoiceRecId)
    {
        return (select firstonly RecId from vendRecurrenceInvoice
                 where vendRecurrenceInvoice.RecId == _vendRecurrenceInvoiceRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendRecurrenceInvoice find(
            RecId _vendRecurrenceInvoiceRecId,
            boolean _forupdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendRecurrenceInvoice vendRecurrenceInvoice;

        vendRecurrenceInvoice.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendRecurrenceInvoice.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendRecurrenceInvoice
            where vendRecurrenceInvoice.RecId == _vendRecurrenceInvoiceRecId;

        return vendRecurrenceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntervalLabel</Name>
				<Source><![CDATA[
    public static LabelString getIntervalLabel(RecurrencePattern _recurrencePattern)
    {
        switch (_recurrencePattern)
        {
            case RecurrencePattern::Daily:
                return "@SYS314611";
            case RecurrencePattern::Weekly:
                return "@SYS314612";
            case RecurrencePattern::Monthly:
                return "@SYS314613";
            case RecurrencePattern::Yearly:
                return "@SYS314614";
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextGenerationDate</Name>
				<Source><![CDATA[
    public static TransDate getNextGenerationDate(TransDate _startDate,
                                                    Integer _interval,
                                                    RecurrencePattern _recurrencePattern)
    {
        utcdatetime generationDate = DateTimeUtil::newDateTime(_startDate, 0);
        utcdatetime nextGenerationDate;

        switch (_recurrencePattern)
        {
            case RecurrencePattern::Daily:
                nextGenerationDate = DateTimeUtil::addDays(generationDate, _interval);
                break;
            case RecurrencePattern::Weekly:
                nextGenerationDate = DateTimeUtil::addDays(generationDate, _interval * 7);
                break;
            case RecurrencePattern::Monthly:
                nextGenerationDate = DateTimeUtil::addMonths(generationDate, _interval);
                break;
            case RecurrencePattern::Yearly:
                nextGenerationDate = DateTimeUtil::addYears(generationDate, _interval);
                break;
        }

        return DateTimeUtil::date(nextGenerationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfRecurrenceInvoice</Name>
				<Source><![CDATA[
    public static Counter numOfRecurrenceInvoice(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        int result = 0;

        if (_vendRecurrenceInvoice)
        {
            result = any2int((select count(RecId) from vendorRecurrenceInvoice
                                where vendorRecurrenceInvoice.VendRecurrenceInvoice == _vendRecurrenceInvoice.RecId).RecId);
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrenceInvoiceLastGenerationDate</Name>
				<Source><![CDATA[
    public static TransDate recurrenceInvoiceLastGenerationDate(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        return VendorRecurrenceInvoice::maxVendRecurrenceInvoiceDate(_vendRecurrenceInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrenceInvoiceNextGenerationDate</Name>
				<Source><![CDATA[
    public static TransDate recurrenceInvoiceNextGenerationDate(VendRecurrenceInvoice _vendRecurrenceInvoice)
    {
        TransDate nextGenerationDate;
        TransDate maxRecurrenceInvoiceDate;

        maxRecurrenceInvoiceDate = VendorRecurrenceInvoice::maxVendRecurrenceInvoiceDate(_vendRecurrenceInvoice);

        if (maxRecurrenceInvoiceDate == dateNull())
        {
            nextGenerationDate = _vendRecurrenceInvoice.StartDate;
        }
        else
        {
            nextGenerationDate = VendRecurrenceInvoice::getNextGenerationDate(
                    maxRecurrenceInvoiceDate,
                    _vendRecurrenceInvoice.Interval,
                    _vendRecurrenceInvoice.RecurrencePattern);
        }

        return nextGenerationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRecurrenceInvoiceAmount</Name>
				<Source><![CDATA[
    public static AmountCur sumRecurrenceInvoiceAmount(
            VendRecurrenceInvoice _vendRecurrenceInvoice,
            CurrencyCode _currencyCode)
    {
        AmountCur totalRecurrenceInvoiceAmount;
        PurchTotals purchTotals;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendorRecurrenceInvoice recurrenceInvoice;
        VendTrans vendTrans;
        
        while select VendInvoiceInfoTable, VendRecurrenceInvoice
            from recurrenceInvoice
            join vendInvoiceInfoTable
                where recurrenceInvoice.VendRecurrenceInvoice == _vendRecurrenceInvoice.RecId &&
                        recurrenceInvoice.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId
            outer join AmountCur from vendTrans
            where vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed &&
                       vendInvoiceInfoTable.InvoiceAccount == vendTrans.AccountNum &&
                       vendInvoiceInfoTable.DocumentDate == vendTrans.TransDate &&
                       vendInvoiceInfoTable.Num == vendTrans.Invoice
        {
            if (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed)
            {
                totalRecurrenceInvoiceAmount +=
                    CurrencyExchangeHelper::curAmount2CurAmount(vendTrans.AmountCur, vendInvoiceInfoTable.CurrencyCode, _currencyCode);
            }
            else
            {
                purchTotals = PurchTotals::newParmTable(vendInvoiceInfoTable, PurchUpdate::All, vendInvoiceInfoTable.ParmId, '', vendInvoiceInfoTable.Ordering);
                purchTotals.calc();
                totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(purchTotals.purchTotalAmount(), vendInvoiceInfoTable.CurrencyCode, _currencyCode);
            }
        }

        return totalRecurrenceInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsPayable:VendRecurrenceInvoiceTableDevDoc</DeveloperDocumentation>
	<FormRef>VendRecurrenceInvoice</FormRef>
	<Label>@AccountsPayable:VendRecurrenceInvoice</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>VendTable</TitleField1>
	<TitleField2>VendInvoiceTemplate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CeilingAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrencePattern</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CeilingAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecurrencePattern</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseDefaultFromVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsStopped</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastRecurrenceGenerationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS314826</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CeilingAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS304585</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Pattern</Name>
			<Label>@SYS86395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecurrencePattern</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceDate</Name>
			<Label>@SYS80293</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastRecurrenceGenerationDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RecurrenceStartDate</Name>
			<Label>@SYS35856</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayNextGenerationDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CeilingAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCurPositive</ExtendedDataType>
			<Label>@SYS314826</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTemplate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS177200</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendTable</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@SYS80105</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS314181</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Interval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS41392</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsStopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRecurrenceIsActive</ExtendedDataType>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastRecurrenceGenerationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS314841</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecurrencePattern</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RecurrencePattern</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS314180</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseDefaultFromVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS314829</Label>
			<EnumType>VendRecurrenceInvoiceDefaultType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceTemplateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceTemplate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IsStoppedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>IsStopped</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceTemplate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceTemplate_VendRecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTemplate</Name>
					<Field>VendInvoiceTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable_VendRecurrenceInvoice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTable</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>VendTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>