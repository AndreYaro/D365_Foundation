<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetLineWeek</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TSTimesheetLineWeek extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCloseDateOnCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether the date in the calendar is closed or not
    /// </summary>
    /// <returns>
    /// returns false if the date is closed in the calendar
    /// </returns>
    public boolean checkCloseDateOnCalendar()
    {
        boolean             ret = true;
        WorkCalendarDate    workCalendarDate;
        ResourceSetup       resourceSetup;
        WorkCalendarTable   resourceSetupMaxHoursCalendar;
        Counter             i;
        TSTimesheetTable    timesheetTable      = this.timesheetTable();

        resourceSetup = ResourceSetup::find(timesheetTable.Resource);
        resourceSetupMaxHoursCalendar = WorkCalendarTable::findByRecId(resourceSetup.MaxHoursCalendar);

        while select TransDate, RecId from workCalendarDate
            where workCalendarDate.CalendarId == resourceSetupMaxHoursCalendar.CalendarId
                && workCalendarDate.TransDate >= this.DayFrom
                && workCalendarDate.TransDate <= this.DayTo
                && (workCalendarDate.WorkTimeControl == WorkTimeControl::Closed || workCalendarDate.WorkTimeControl == WorkTimeControl::Holiday)
        {
            i = this.dayOffset(workCalendarDate.TransDate);

            if (this.Hours[i] && workCalendarDate.RecId)
            {
                ret = checkFailed(strFmt("@Timesheet:Date1IsClosedInTheCalendar", workCalendarDate.TransDate));
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMinTimeIncrement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the timesheet line hour entered by the user is a valid increment of the value
    /// for minimum time increment settings.
    /// </summary>
    /// <param name="_qty">
    /// The hours entered by the user.
    /// </param>
    /// <returns>
    /// true if the hour is a valid increment value that is based on the minimum time increment settings;
    /// otherwise, false.
    /// </returns>
    public boolean checkMinTimeIncrement(real _qty)
    {
        TSTimesheetLine tsTimesheetLine = this.timesheetLine();
        boolean         result          = true;

        if (tsTimesheetLine.RecId != 0)
        {
            TSMinTimeIncrement minTimeIncrement = tsTimesheetLine.getMinTimeIncrement();

        if (minTimeIncrement)
        {
                if (frac(minTimeIncrement) != 0)
            {
            if (frac(frac(_qty) / frac(minTimeIncrement)))
            {
                //Minimum time increment is %1
                        result = checkFailed(strFmt("@SYS184029",minTimeIncrement));
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNegative</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the quantity is negative.
    /// </summary>
    /// <param name = "_qty">
    ///    The quantity.
    /// </param>
    /// <returns>
    ///    true if the quantity is not negative; otherwise, false.
    /// </returns>
public boolean checkNegative(ProjQtyEmpl _qty)
    {
        return _qty < 0 ? checkFailed("@SYS184110") : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the period of the timesheet week.
    /// </summary>
    /// <returns>
    ///    true if the period is valid; otherwise, false.
    /// </returns>
private boolean checkValidPeriod()
    {
        TSTimesheetTable    timesheetTable = TSTimesheetTable::find(this.TimesheetNbr);
        boolean             result         = true;

        if (!timesheetTable)
        {
            result = checkFailed(strFmt("@SYS190478", this.TimesheetNbr));
        }

        if (result)
        {
            if (   timesheetTable.ProjPeriodId != this.ProjPeriodId
                || timesheetTable.PeriodFrom   >  this.DayFrom
                || timesheetTable.PeriodTo     <  this.DayTo)
        {
                result = checkFailed("@SYS184130");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySalesPriceToTSTimesheetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the sales price to related time sheet transaction records.
    /// </summary>
    /// <remarks>
    ///    The scenario is that a time sheet approver manually changes the sales price.
    /// </remarks>
    private void copySalesPriceToTSTimesheetTrans()
    {
        TSTimesheetTrans    tsTimesheetTrans;

        ttsBegin;
        tsTimesheetTrans.skipDataMethods(true);

        update_recordset tsTimesheetTrans
            setting SalesPrice = this.SalesPrice
            where tsTimesheetTrans.TSTimesheetLineWeek == this.RecId
               && tsTimesheetTrans.SalesPrice          != this.SalesPrice;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the day offset for a given date.
    /// </summary>
    /// <param name = "_date">
    ///    The date.
    /// </param>
    /// <returns>
    ///    The offset.
    /// </returns>
    public int dayOffset(TransDate _date)
    {
        return TSPeriods::getDayOffset(ProjPeriodTable::find(this.ProjPeriodId).WeekStart, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any user editable fields have changed
    /// </summary>
    /// <param name="_ignoreToday">
    /// Set to true if you want to ignore fields that refer to todays date
    /// </param>
    /// <param name="_ignoreFuture">
    /// Set to true if you want to ignore fields that refer to days after todays date
    /// </param>
    /// <returns>
    /// True if a field was changed
    /// </returns>
    public boolean fieldsChanged(boolean _ignoreToday = false, boolean _ignoreFuture = false)
    {
        Common          orig            = this.orig();
        DictTable       dictTable       = new DictTable(this.TableId);
        IndexId         indexOfToday    = -1;
        boolean         ignoreDays      = _ignoreToday || _ignoreFuture;
        Date            systemDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (ignoreDays && this.DayFrom <= systemDate && this.DayTo >= systemDate)
        {
            // add 1 as the array is 1 based
            indexOfToday = systemDate - this.DayFrom + 1;
        }

        for (int i = 1; i <= dictTable.fieldCnt(); i++)
        {
            FieldId     fieldId   = dictTable.fieldCnt2Id(i);
            DictField   dictField = dictTable.fieldObject(fieldId);

            if (dictField.allowEdit())
            {
                if (dictField.arraySize() > 1)
                {
                    for (IndexId fieldArrayIndex = 1; fieldArrayIndex <= dictField.arraySize(); fieldArrayIndex++)
                    {
                        if (ignoreDays)
                        {
                            if (_ignoreFuture)
                            {
                                if ((indexOfToday < 0 && systemDate > this.DayTo)    ||
                                    (indexOfToday > 0 && fieldArrayIndex < indexOfToday))
                                {
                                    if (this.(fieldId2Ext(fieldId, fieldArrayIndex)) != orig.(fieldId2Ext(fieldId, fieldArrayIndex)))
                                    {
                                        return true;
                                    }
                                }
                            }
                            else
                            if (fieldArrayIndex != indexOfToday)
                            {
                                if (this.(fieldId2Ext(fieldId, fieldArrayIndex)) != orig.(fieldId2Ext(fieldId, fieldArrayIndex)))
                                {
                                    return true;
                                }
                            }
                        }
                        else
                        {
                            if (this.(fieldId2Ext(fieldId, fieldArrayIndex)) != orig.(fieldId2Ext(fieldId, fieldArrayIndex)))
                            {
                                return true;
                            }
                        }
                    }
                }
                else
                {
                    if (this.(fieldId) != orig.(fieldId))
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTSTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current record from a timesheet line record.
    /// </summary>
    /// <param name = "__tsTimesheetLine">
    ///    The timesheet line record.
    /// </param>
    public void initFromTSTimesheetLine(TSTimesheetLine _tsTimesheetLine)
    {
        this.TimesheetNbr = _tsTimesheetLine.TimesheetNbr;
        this.LineNum      = _tsTimesheetLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.PostStatus     = TSPostStatus::NotTransferred;
        this.ProjTransDate  = this.timesheetTable().PeriodFrom;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        boolean requireStartStopTime = TSResource::timesheetRequiresStartStopTime(this.timesheetTable().Resource);

        super();

        if (!requireStartStopTime)
        {
            TSTimesheetTrans::updateFromTimesheetLineWeek(this);
        }

        this.setTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the invoice that includes the transaction.
    /// </summary>
    /// <returns>
    ///    A <c>ProjInvoiceId</c> data type that represents the ID of the invoice for the transaction.
    /// </returns>
    /// <remarks>
    ///    If this transaction status is credit note proposal, an empty string is returned.
    /// </remarks>
    public display ProjInvoiceId invoiceId()
    {
        return ProjInvoiceEmpl::findTransId(this.TransId).ProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TSTimesheetLineWeek, DayFrom) :
                this.ProjTransDate = this.DayFrom;
                break;

            case fieldNum(TSTimesheetLineWeek, SalesPrice) :
                ttsbegin;
                TSTimesheetTrans tsTimesheetTrans;

                tsTimesheetTrans.skipDataMethods(true);

                update_recordset tsTimesheetTrans
                    setting SalesPrice = this.SalesPrice
                    where tsTimesheetTrans.tsTimesheetLineWeek == this.RecId;
                ttscommit;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves project ID from the timesheet line.
    /// </summary>
    /// <returns>
    ///   The project ID from the timesheet line.
    /// </returns>
    public ProjId projId()
    {
        TSTimesheetLine tsTimesheetLine;

        select ProjId from tsTimesheetLine
            where tsTimesheetLine.RecId == this.tsTimesheetLine;

        return tsTimesheetLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the invoice proposal for a transaction.
    /// </summary>
    /// <returns>
    ///    A <c>ProjProposalId</c> data type that represents the ID of the invoice proposal for the
    ///    transaction.
    /// </returns>
    public display ProjProposalId proposalId()
    {
        return ProjEmplTrans::find(this.TransId).proposalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction date of the journal line.
    /// </summary>
    /// <remarks>
    ///    The transaction date is set to the end date of the corresponding period line if the <c>TSVoucherDateChange</c> enumeration value is a <c>ProjPeriodEnd</c> data type. The transaction date is
    ///    set to the end date of the corresponding ledger period if <c>TSVoucherDateChange</c> enumeration value is a <c>LedgerPeriodEnd</c> data type. The transaction date is set to the project date
    ///    of the journal line if <c>TSVoucherDateChange</c> enumeration value is a <c>ProjTransDate</c> data type.
    /// </remarks>
    public void setTransDate()
    {
        // The parameter to set whether to use Period end date or Ledger end date is obsolete
        // The TransDate, which is used for setting both the Project transaction date in Project Actual table
        // and the Ledger Posting Date in Project sub ledger, should now be the same as the timesheet trans date (ProjTransDate)
        this.TransDate  = this.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetLine</Name>
				<Source><![CDATA[
    public TSTimesheetLine timesheetLine(boolean _forUpdate = false)
    {
        return TSTimesheetLine::findRecId(this.tsTimesheetLine, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetTable</Name>
				<Source><![CDATA[
    public TSTimesheetTable timesheetTable(boolean _forUpdate = false)
    {
        return TSTimesheetTable::find(this.TimesheetNbr, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the timesheet trans that is related to the current timesheet week
    /// </summary>
    /// <param name = "_forUpdate">Boolean value that indicates if the timesheet trans should be selected for update</param>
    /// <returns>Timesheet trans record that is related to the current timesheet week</returns>
    public TSTimesheetTrans timesheetTrans(boolean _forUpdate = false)
    {
        TSTimesheetTrans timesheetTrans;

        timesheetTrans.selectForUpdate(_forUpdate);

        select firstonly timesheetTrans
                where timesheetTrans.TSTimesheetLineWeek == this.RecId;

        return timesheetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalHours</Name>
				<Source><![CDATA[
    public display TSLineHoursTotal totalHours()
    {
        return  this.Hours[1] +
                this.Hours[2] +
                this.Hours[3] +
                this.Hours[4] +
                this.Hours[5] +
                this.Hours[6] +
                this.Hours[7];
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #TimeConstants
        boolean canUpdateHours                      = TSTimesheetHelper::isTimesheetEditable(this);
        TSTimesheetTable    tsTimesheetTable        = this.timesheetTable();
        boolean             requireStartStopTime    = TSResource::timesheetRequiresStartStopTime(tsTimesheetTable.Resource);
        TSTimesheetLineWeek origLineWeek            = this.orig();

        ttsBegin;

        if (this.SalesPrice != this.orig().SalesPrice)
        {
            this.copySalesPriceToTSTimesheetTrans();
        }

        if (requireStartStopTime && canUpdateHours)
        {
            TSTimesheetTrans::updateTimesheetLineWeekHours(this);
        }

        super();

        if (!requireStartStopTime && canUpdateHours)
        {
            TSTimesheetTrans::updateFromTimesheetLineWeek(this);

            for (int i = 1; i <= #daysPerWeek; i++)
            {
                if (origLineWeek.Hours[i] != this.Hours[i])
                {
                    TSTimesheetTable::checkHours(tsTimesheetTable.TimesheetNbr, true);
                    break;
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetLineWeekHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>Hours</c> field in the <c>TSTimesheetLineWeek</c> table from the start and stop time
    /// form entered by the user.
    /// </summary>
    public void updateTimesheetLineWeekHours()
    {
        #TimeConstants
        ProjTransDate       currDate    = this.DayFrom;
        int                 dayOffset   = TSPeriods::getDayOffset(ProjPeriodTable::find(this.timesheetTable().ProjPeriodId).WeekStart, currDate);

        for (int i = 1; i <= #daysPerWeek; i++)
        {
            this.Hours[i] = 0;
        }

        dayOffset = (this.DayTo - this.DayFrom == #daysPerWeek - 1) ? 1 : dayOffset;

        while (currDate <= this.DayTo)
        {
            this.Hours[dayOffset] = TSTimesheetTrans::totalHoursByDate(this.RecId, currDate);
            currDate++;
            dayOffset++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean result = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldNum(TSTimesheetLineWeek, Hours):

                result = result && this.checkMinTimeIncrement(this.Hours[fieldExt2Idx(_fieldIdToCheck)]);
                result = result && this.checkCloseDateOnCalendar();
            break;
        }

        switch (_fieldIdToCheck)
        {
            case fieldNum(TSTimesheetLineWeek, TransDate):
                if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(
                CompanyInfoHelper::fiscalCalendarRecId(),this.TransDate, SysModule::Project))
                {
                    checkFailed(strFmt("@SYS18414", this.TransDate));
                }
            break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the values in the fields of this record are set to valid values
    /// </summary>
    /// <param name="_lineProjId">
    /// the projId used on the timesheet line, if not set will lookup based on the tsTimesheetLine FK
    /// </param>
    /// <returns>
    /// true if values are valid
    /// </returns>
    public boolean validateRecord(ProjId _lineProjId = '')
    {
        #TimeConstants
        boolean         result = this.checkValidPeriod();
        int             idx    = 1;
        HcmWorkerRecId  hcmWorkerRecId;

        boolean transDateEmploymentValidity(TransDate _fieldDate)
        {
            HcmEmployment hcmEmployment;
            ValidFromDateTime dateFrom = DateTimeUtil::minValue();
            ValidToDateTime dateTo = DateTimeUtil::maxValue();

            Timezone usertimezone = DateTimeUtil::getUserPreferredTimeZone();
            utcdatetime utcFieldTimeBeginOfDay = DateTimeUtil::newDateTime(_fieldDate, 0, usertimezone);
            utcdatetime utcFieldTimeEndOfDay = DateTimeUtil::newDateTime(_fieldDate, #secondsPerDay - 1, usertimezone); // 23:59:59 of the day
            
            if (!hcmWorkerRecId)
            {
                hcmWorkerRecId = TSResource::workerRecId(this.timesheetTable().Resource);
            }
            
            // Check whether the time entered is matched with valid employment date record
            select validTimeState (dateFrom, dateTo) hcmEmployment
                where hcmEmployment.Worker == hcmWorkerRecId &&
                    hcmEmployment.LegalEntity == CompanyInfo::current() &&
                    hcmEmployment.ValidFrom <= utcFieldTimeEndOfDay &&
                    hcmEmployment.ValidTo >= utcFieldTimeBeginOfDay;
            
            if (!hcmEmployment)
            {
                result = checkFailed(strFmt("@Timesheet:NoTimesheetEntryBeforeOrAfterEmployment", _fieldDate));
            }

            return result;
        }

        while (result
               && idx <= #daysPerWeek)
        {
            result = this.checkMinTimeIncrement(this.Hours[idx]);
            idx++;
        }

        if (result)
        {
            // Validate that no non-allowed future entries was made
            ProjParameters projParameters = ProjParameters::find();

            // Cannot rely on systemDateGet() as server and local timezones can be different
            var userDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(),DateTimeUtil::getUserPreferredTimeZone()));

            TransDate       fieldDate;
            ProjPeriodTable projPeriodTable = ProjPeriodTable::find(this.ProjPeriodId);

            if (!projPeriodTable)
            {
                checkFailed(strFmt("@Timesheet:TimeSheetsNotCreated", curExt(), TSResource::worker(hcmWorkerRecId).name()));
            }

            if (!projPeriodTable.AutoSplitWeek)
            {
                fieldDate  = this.DayFrom;
            }
            else
            {
                fieldDate = TSPeriods::getStartOfWeekOffset(projPeriodTable.WeekStart, this.DayFrom);
            }
            
            // If the frequency of the timesheet is set to month/semi-month, the idx is set to the start day of the week in the month selected
            if (projPeriodTable.TimesheetFrequency == TSPeriodFrequency::Month ||
                projPeriodTable.TimesheetFrequency == TSPeriodFrequency::SemiMonthly)
            {
                idx = dayOfWk(fieldDate);            
            }
            else
            {
                idx = 1;
            }
            
            while (result
                       && idx <= #daysPerWeek)
            {
                //validates for future and present week timesheets
                if (projParameters.TimesheetBlockFutureEntries && this.DayFrom > userDate - #daysPerWeek)
                {
                    ProjId lineProjId = _lineProjId ? _lineProjId : this.timesheetLine().ProjId;

                    if (fieldDate > userDate && this.Hours[idx])
                    {
                        if (projParameters.TimesheetValidateAbsence && projParameters.TimesheetAbsenceProjId)
                        {
                            if (lineProjId != projParameters.TimesheetAbsenceProjId)
                            {
                                result = checkFailed(strFmt("@SYS4006044", projParameters.TimesheetAbsenceProjId));
                            }
                        }
                        else
                        {
                            result = checkFailed("@SYS4006045");
                        }
                    }
                }

				if (fieldDate && this.Hours[idx])
                {
                    result = transDateEmploymentValidity(fieldDate);
                }

                fieldDate++;
                idx++;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super() && this.validateRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        TSTimesheetNbr  _timesheetNbr,
        LineNum         _lineNum,
        TSPeriodFrom    _dayFrom)
    {
        return     _timesheetNbr
                && _lineNum
                && (select firstonly RecId from tsTimesheetLineWeek
                        where tsTimesheetLineWeek.TimesheetNbr == _timesheetNbr
                           && tsTimesheetLineWeek.LineNum      == _lineNum
                           && tsTimesheetLineWeek.DayFrom      == _dayFrom).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByTimesheetLineRecId</Name>
				<Source><![CDATA[
    public static boolean existByTimesheetLineRecId(RefRecId _line)
    {
        return (select firstonly RecId from tsTimesheetLineWeek
                    where tsTimesheetLineWeek.tsTimesheetLine == _line).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTimesheetLine</Name>
				<Source><![CDATA[
    static TSTimesheetLineWeek findByTimesheetLine(RecId _recId, boolean _forUpdate = false)
    {
        TSTimesheetLineWeek timesheetLineWeek;

        if (_recId)
        {
            timesheetLineWeek.selectForUpdate(_forUpdate);

            select firstonly timesheetLineWeek
                where timesheetLineWeek.tsTimesheetLine == _recId;
        }
        return timesheetLineWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromDate</Name>
				<Source><![CDATA[
    static TSTimesheetLineWeek findFromDate(
        TSTimesheetNbr _sTimesheetNbr,
                                            LineNum         _lineNum,
                                            ProjTransDate   _date,
        boolean        _forUpdate = false)
    {
        TSTimesheetLineWeek tTimesheetLineWeek;

        if (_sTimesheetNbr)
        {
            tTimesheetLineWeek.selectForUpdate(_forUpdate);

            select firstonly tTimesheetLineWeek
                where tTimesheetLineWeek.TimesheetNbr == _sTimesheetNbr
                   && tTimesheetLineWeek.LineNum      == _lineNum
                   && tTimesheetLineWeek.DayFrom      <= _date
                   && tTimesheetLineWeek.DayTo        >= _date;
        }

        return tTimesheetLineWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static TSTimesheetLineWeek findRecId(RecId _recId, boolean _forUpdate = false)
    {
        TSTimesheetLineWeek timesheetLineWeek;

        if (_recId)
        {
            timesheetLineWeek.selectForUpdate(_forUpdate);

            select firstonly timesheetLineWeek
                where timesheetLineWeek.RecId == _recId;
        }

        return timesheetLineWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromLine</Name>
				<Source><![CDATA[
    public static void loadFromLine(TSTimesheetLine _tsTimesheetLine, NoYes _updateHours = NoYes::No)
    {
        TSTimesheetLine timesheetLine = _tsTimesheetLine;
        ProjPeriodTimesheetWeek periodWeek;

        ttsbegin;

        TSTimesheetLineWeek lineWeek = TSTimesheetLineWeek::populateTSTimesheetLineWeek(timesheetLine);

        while select PeriodFrom, PeriodId, PeriodTo from periodWeek
            where periodWeek.RecId == timesheetLine.ProjPeriodTimesheetWeek
        {
            if (!TSTimesheetLineWeek::existByTimesheetLineRecId(timesheetLine.RecId))
            {
                lineWeek.initValue();
                lineWeek.ProjPeriodId   = periodWeek.PeriodId;
                lineWeek.DayFrom        = periodWeek.PeriodFrom;
                lineWeek.DayTo          = periodWeek.PeriodTo;

                if (_updateHours == NoYes::Yes)
                {
                    TSTimesheetTrans::updateTimesheetLineWeekHours(lineWeek);
                }

                lineWeek.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTSTimesheetLineWeek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>TSTimesheetLineWeek</c> table buffer.
    /// </summary>
    /// <param name = "_TSTimesheetLine">
    /// A <c>TSTimesheetLine</c> record.
    /// </param>
    /// <returns>
    /// A <c>TSTimesheetLineWeek</c> table buffer.
    /// </returns>
    protected static TSTimesheetLineWeek populateTSTimesheetLineWeek(TSTimesheetLine _TSTimesheetLine)
    {
        TSTimesheetLineWeek lineWeek;

        lineWeek.clear();
        lineWeek.TimesheetNbr = _TSTimesheetLine.TimesheetNbr;
        lineWeek.LineNum = _TSTimesheetLine.LineNum;
        lineWeek.tsTimesheetLine = _TSTimesheetLine.RecId;

        return lineWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalHoursDay</Name>
				<Source><![CDATA[
    public static ProjQtyEmpl totalHoursDay(TSTimesheetNbr _timesheetNbr, ProjTransDate _date )
    {
        TSTimesheetLineWeek lineWeek;

        TSWeeklyHours weeklyHours = (select sum(Hours) from tsTimesheetLineWeek
                                        where tsTimesheetLineWeek.TimesheetNbr == _timesheetNbr).Hours;

        return  weeklyHours[lineWeek.dayOffset(_date)];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@sys324250</DeveloperDocumentation>
	<Label>@sys190482</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TimesheetNbr</TitleField1>
	<TitleField2>DayFrom</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TSWeekIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalComments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalComments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPeriodId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TSTimesheetLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Prices</Name>
			<Label>@SYS12983</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WeekDays</Name>
			<Label>@SYS178609</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Hours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalComments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InternalComments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DayFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSPeriodFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DayTo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSPeriodTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalComments</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSExternalComments</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Hours</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSWeeklyHours</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InternalComments</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSInternalComments</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TSPostStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPeriodId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjSalesPriceEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TimesheetNbr</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSTimesheetNbr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JournalTransDate</ExtendedDataType>
			<Label>@SYS16658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TSTimesheetLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TSLineWeekIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DayFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TSTimesheetLineNbr</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TSWeekIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPeriodId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DayFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TSTimesheetLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TSTimesheetLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjJournalTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLineWeek</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>JournalId</Name>
					<SourceEDT>ProjJournalId</SourceEDT>
					<Field>JournalId</Field>
					<RelatedField>JournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjPeriodTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TSTimesheetLineWeek</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPeriodId</Name>
					<SourceEDT>ProjPeriodId</SourceEDT>
					<Field>ProjPeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TSTimesheetLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TSTimesheetLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TSTimesheetLine</Name>
					<Field>TSTimesheetLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TSTimesheetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TSTimesheetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TimesheetNbr</Name>
					<Field>TimesheetNbr</Field>
					<RelatedField>TimesheetNbr</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>