<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjOnAccTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjOnAccTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCurrency</Name>
				<Source><![CDATA[
    display AmountCur amountCurrency()
    {
        return (select sum(Amount) from projOnAccTransSale
                    where projOnAccTransSale.TransId == this.TransId).Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount posted to the general ledger account that is associated with the transaction if
    /// the transaction is invoiced and associated with an invoice project. Otherwise, returns the amount
    /// in the transaction as a negative value.
    /// </summary>
    /// <returns>
    /// The amount for the transaction.
    /// </returns>
    /// <remarks>
    /// The amount is returned in the default currency.
    /// </remarks>
    display AmountMST amountMst()
    {
        if (this.projInvoiceId())
        {
            return ProjTrans::newProjOnAccTrans(this).invoicedMST();
        }

        return ProjTrans::newProjOnAccTrans(this).amountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the amount of the transaction to the currency passed in as a parameter.
    /// </summary>
    /// <param name="currencyCode">
    ///    The currency code to convert the transaction amount to.
    /// </param>
    /// <remarks>
    ///    This method sets the amount of the transaction to the converted amount. It sets the currency of the transaction to the new currency code.
    /// </remarks>
    public void convertCurrencyCode(CurrencyCode currencyCode)
    {
        ttsbegin;

        this.CurrencyId = currencyCode;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjOnAccTransSale  projOnAccTransSale;

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        ttsbegin;

        delete_from projOnAccTransSale
            where projOnAccTransSale.TransId == this.TransId;

        this.reread();

        this.setContractValueForMilestoneBillingRule(true);
        super();
		
        if (this.TransactionOrigin == ProjOrigin::Milestone)
        {
            boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
            boolean isContractLineUsed = ProjWIPTable::find(ProjRevRecContractLine::findByContractLineNum(this.PSAContractLineNum).RevenueRecognitionId).IsContractLineUsed;
            if (contractLineBasedRevRecFeature && isContractLineUsed)
            {
                ProjRevRecHelper::removeFixedPriceRevRecProjectContractLine(this.PSAContractLineNum);
            }

            else if(ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                ProjRevRecHelper::removeFixedPriceRevRecProjectIfValid(ProjTable::find(this.ProjID));
            }
		}

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displaySalesAmount()
    {
        return this.salesAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editTransactionOrigin</Name>
				<Source><![CDATA[
    edit ProjOriginOnAcc editTransactionOrigin(boolean _set, ProjOriginOnAcc _origin)
    {
        return this.setProjOriginOnAcc(_set, _origin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBillingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes On account transaction based on billing rule
    /// </summary>
    /// <param name="_contractLineItem">
    /// Billing Rule Line
    /// </param>
    public void initFromBillingRule(PSAContractLineItems _contractLineItem)
    {
        List dimensionSources = new List(Types::Class);
        this.clear();
        this.initValue();
        this.PSAContractLineNum = _contractLineItem.ContractLineNum;
        this.initFromProjTable(_contractLineItem.FeeProjId);
        this.TaxGroupId         = _contractLineItem.SalesTaxGroup;
        this.Description        = _contractLineItem.ContractLineNum + '-' + enum2str(_contractLineItem.LineType);

        switch (_contractLineItem.LineType)
        {
            case PSAContractLineType::Progress:
            case PSAContractLineType::UOD:
                this.TransactionOrigin = (_contractLineItem.LineType == PSAContractLineType::Progress) ? ProjOrigin::ProgressBillingRule : ProjOrigin::UnitOfDeliveryBillingRule;
                dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_contractLineItem.DefaultDimension));
                dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(ProjTable::find(_contractLineItem.FeeProjId).DefaultDimension));
                LedgerDimensionDefaultingEngine::getDefaultDimension(dimensionSources);
                break;

            default:
                this.TransactionOrigin = ProjOrigin::Milestone;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjForecastOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the appropriate fields of an actual on-account transaction with the values of corresponding fields of the expected on-account transaction passed in as a parameter.
    /// </summary>
    /// <param name="_projForecastOnAcc">
    ///    The expected on-account transaction used to initialize the actual on-account transaction.
    /// </param>
    /// <remarks>
    ///    Fields initialized are TransDate, Description, Amount, CurrencyID, and Dimension. This method also calls ProjOnAccTrans to initialize project related fields that have the field value of the project
    ///    associated with the transaction.
    /// </remarks>
    public void initFromProjForecastOnAcc(ProjForecastOnAcc _projForecastOnAcc)
    {
        this.initFromProjTable(_projForecastOnAcc.ProjId);

        this.TransDate        = _projForecastOnAcc.TransDate;
        this.Description      = _projForecastOnAcc.Txt;
        this.CurrencyId       = _projForecastOnAcc.CurrencyId;
        this.DefaultDimension = _projForecastOnAcc.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the appropriate fields of an on-account transaction.
    /// </summary>
    /// <param name="projId">
    /// The project ID of the project with which to initialize the transaction.
    /// </param>
    /// <remarks>
    /// The fields are initialized with the values of the corresponding fields from the <c>ProjTable</c>,
    /// <c>ProjParameters</c>, and <c>ProjInvoiceTable</c> tables that are associated with the specified
    /// project ID. The fields that are initialized are <c>ProjId</c>, <c>CurrencyId</c>,
    /// <c>TaxGroupId</c>, and <c>Dimension</c> fields.
    /// </remarks>
    public void initFromProjTable(ProjId projId)
    {
        // <GIN>
        ProjOnAccTransTaxExtensionIN    projOnAccTransTaxExtensionIN    ;
        // </GIN>
        ProjTable   projTable = ProjTable::find(projId);

        this.ProjID     = projTable.ProjId;
        this.CurrencyId = ProjInvoiceTable::find(projTable.ProjInvoiceProjId).CurrencyId;

        if (!this.TaxGroupId)
        {
            this.TaxGroupId = ProjParameters::taxGroupInvoice(this.ProjID);
        }

        this.DefaultDimension  = projTable.DefaultDimension;

        if (projTable.Type == ProjType::FixedPrice || 
				(ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() 
					&& PSAContractLineItems::find(this.psaContractLineNum).BillingMethod == ProjContractBillingMethod::FixedPrice))
        {
            this.TransactionOrigin = ProjOrigin::Milestone;
        }
        else
        {
            this.TransactionOrigin = ProjOrigin::Prepayment;
        }
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            projOnAccTransTaxExtensionIN = this.projOnAccTransTaxExtensionIN();
            projOnAccTransTaxExtensionIN.initValue();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        NumberSeq   numberSeq;

        ttsbegin;

        super();

        if (ProjOnAccountCategoryToggle::instance().isEnabled())
        {
            this.CategoryId = ProjParameters::onAccountCategory();
        }

        this.TaxItemGroupId = ProjParameters::find().TaxItemGroupOnAcc;

        if (!this.TransId)
        {
            numberSeq       = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase());
            this.TransId    = numberSeq.num();
            this.TransIdRef = this.TransId;
        }

        this.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Qty = 1;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an on-account transaction is invoiced.
    /// </summary>
    /// <returns>
    ///    true if the transaction has been invoiced; otherwise, false.
    /// </returns>
    display ProjInvoiced invoiced()
    {
        return ProjTrans::newProjOnAccTrans(this).invoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the invoice associated with a transaction. If the transaction status is credit note proposal, an empty string is returned.
    /// </summary>
    /// <returns>
    ///    The ID of the invoice associated with the transaction.
    /// </returns>
    display ProjInvoiceId invoiceId()
    {
        return ProjTrans::newProjOnAccTrans(this).invoiceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    display ProjLedgerAccruedAmount ledgerSalesAmount()
    {
        DictTable dictTableProjOnAccTransSale;

        dictTableProjOnAccTransSale = new DictTable(tableNum(ProjOnAccTransSale));

        if (dictTableProjOnAccTransSale.rights() >= AccessType::View)
        {
            return (select sum(LedgerSalesAmount) from projOnAccTransSale
                    where projOnAccTransSale.TransId == this.TransId).LedgerSalesAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes project related and description fields when the <c>ProjID</c> field is modified
    /// </summary>
    /// <param name="_fieldId">
    ///    The ID for the field being modified in this transaction table.
    /// </param>
    /// <remarks>
    ///    This method is executed when any field in the table is modified. The project related fields are initialized by using the <c>ProjOnAccTrans</c> table. The <c>Description</c> field is initialized by
    ///    using the appropriate journal text setup in the <c>ProjJournalTxt</c> table.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        ProjJournalTxt  projJournalTxt;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjOnAccTrans, ProjID) :
                this.initFromProjTable(this.ProjID);
                break;

            case fieldNum(ProjOnAccTrans, Description) :
                projJournalTxt = ProjJournalTxt::findTxt(this.Description);
                if (projJournalTxt.Txt)
                {
                    this.Description = projJournalTxt.Txt;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjOnAccTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>ProjOnAccTransTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_projOnAccTransTaxExtensionIN">
    /// ProjOnAccTransTaxExtensionIN is packed.
    /// </param>
    public void packProjOnAccTrans_IN(ProjOnAccTransTaxExtensionIN _projOnAccTransTaxExtensionIN)
    {
        _projOnAccTransTaxExtensionIN.ProjOnAccTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_projOnAccTransTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID for the invoice associated with the on-account transaction.
    /// </summary>
    /// <returns>
    ///    The ID for the invoice associated with the transaction.
    /// </returns>
    display ProjInvoiceId projInvoiceId()
    {
        return this.projInvoiceOnAcc().ProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the on-account invoice line that is associated with an on-account transaction.
    /// </summary>
    /// <returns>
    /// The on-account invoice line for the transaction.
    /// </returns>
    public ProjInvoiceOnAcc projInvoiceOnAcc()
    {
        return ProjInvoiceOnAcc::findTransId(this.TransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays invoice status corresponding to the record.
    /// </summary>
    /// <returns>
    /// invoice status corresponding to the record.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ProjInvoiceStatus projInvoiceStatus()
    {
        ProjInvoiceStatus projInvoiceStatus = ProjInvoiceStatus::None;

        // Adjusted transactions
        ProjOnAccTransSale adjustedTransaction;
        select firstonly RecId from adjustedTransaction
                where adjustedTransaction.TransId == this.TransId &&
                        adjustedTransaction.TransStatus == ProjTransStatus::Adjusted;
        if (adjustedTransaction)
        {
            projInvoiceStatus = ProjInvoiceStatus::Adjusted;
        }
        else
        {
            ProjTable projTable = ProjTable::find(this.ProjID);
            if (!projTable)
            {
                projInvoiceStatus = ProjInvoiceStatus::None;
            }
            else
            {
                ProjFundingSource projFundingSource;

                ProjOnAccTransSale invoiced;
                select firstonly RecId from invoiced
                    where invoiced.TransId == this.TransId &&
                        (invoiced.TransStatus == ProjTransStatus::Invoiced ||
                        invoiced.TransStatus == ProjTransStatus::MarkedCreditnote ||
                        invoiced.TransStatus == ProjTransStatus::CreditnoteProposal ||
                        invoiced.TransStatus == ProjTransStatus::Estimated ||
                        invoiced.TransStatus == ProjTransStatus::Eliminated);

                // For performance, Only search for OnHold if some of the transaction has been invoice
                ProjOnAccTransSale onHoldFunding;
                if (invoiced)
                {
                    select firstonly RecId from onHoldFunding where
                            onHoldFunding.TransId == this.TransId
                        join RecId from projFundingSource
                            where projFundingSource.RecId == onHoldFunding.FundingSource &&
                                projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource;
                }

                ProjOnAccTransSale chargeable;
                select firstonly RecId from chargeable
                    where chargeable.TransId == this.TransId &&
                        (chargeable.TransStatus == ProjTransStatus::Registered ||
                        chargeable.TransStatus == ProjTransStatus::InvoiceProposal ||
                        chargeable.TransStatus == ProjTransStatus::Posted)
                    join RecId from projFundingSource
                        where projFundingSource.RecId == chargeable.FundingSource &&
                            (projFundingSource.FundingType == ProjFundingType::Customer ||
                            projFundingSource.FundingType == ProjFundingType::Grant);

                if (invoiced && chargeable)
                {
                    if (onHoldFunding)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoicedWithOnhold;
                    }
                    else
                    {
                        projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoiced;
                    }

                }
                else if (invoiced && !chargeable)
                {
                    if (onHoldFunding)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::FullyInvoicedWithOnhold;
                    }
                    else
                    {
                        projInvoiceStatus = ProjInvoiceStatus::FullyInvoiced;
                    }
                }
                else if (!invoiced && chargeable)
                {
                    projInvoiceStatus = ProjInvoiceStatus::Chargeable;
                }
                else if (!invoiced.RecId && !chargeable.RecId)
                {
                    projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                }
            }
        }

        return projInvoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOnAccTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProjOnAccTransTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProjOnAccTransTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public ProjOnAccTransTaxExtensionIN projOnAccTransTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjOnAccTransTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOnAccTransView_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a view associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>ProjOnAccTransView_IN</c>.
    /// </returns>
    public ProjOnAccTransView_IN projOnAccTransView_IN()
    {
        ProjOnAccTransView_IN projOnAccTransView_IN;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projOnAccTransView_IN.initProjOnAccTrans(this);

            // If the view doesn't have a RecId then it will assume
            // this is an insert scenario when it isn't.  So we will
            // let the view borrow the RecId from the projOnAccTrans.  Since
            // no writes are done using this view this will work okay.
            projOnAccTransView_IN.RecId = this.RecId;
            return projOnAccTransView_IN;
        }

        return projOnAccTransView_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the project that the on-account transaction was reported against.
    /// </summary>
    /// <returns>
    ///    The project that the on-account transaction was reported against.
    /// </returns>
    public ProjTable projTable()
    {
        return ProjTable::find(this.ProjID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a transaction is included in an invoice proposal.
    /// </summary>
    /// <returns>
    ///    true if the transaction is included in an invoice proposal; otherwise, false.
    /// </returns>
    display ProjProposal proposal()
    {
        return ProjTrans::newProjOnAccTrans(this).proposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the invoice proposal that this on-account transaction is included in.
    /// </summary>
    /// <returns>
    ///    The ID of the invoice proposal that includes this on-account transaction.
    /// </returns>
    display ProjProposalId proposalId()
    {
        return ProjTrans::newProjOnAccTrans(this).proposalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
            }
            else
            {
                if (this.ActivityNumber)
                {
                    smmActivities = smmActivities::find(this.ActivityNumber);
                    name = smmActivities.Purpose;
                }
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the total sales amount for an on-account transaction.
    /// </summary>
    /// <param name="projOnAccTrans">
    ///    The on-account transaction for which to calculate the sales amount.
    /// </param>
    /// <param name="ledgerFromDate">
    ///    The begin date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="ledgerToDate">
    ///    The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    ///    The sales amount for the transaction.
    /// </returns>
    /// <remarks>
    ///    This is the total revenue for this transaction including both invoiced and accrued revenue as calculated by the <c>ProjStatement.E100_Total_Revenue</c> method. The amount returned is in the default
    ///    currency.
    /// </remarks>
    SalesAmount salesAmount(
        ProjOnAccTrans    projOnAccTrans,
        TransDate         ledgerFromDate,
        TransDate         ledgerToDate
        )
    {
        return projStatement::newProjOnAccTrans(projOnAccTrans,ledgerFromDate,ledgerToDate).e100_Total_Revenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display SalesPrice salesPrice()
    {
        ProjOnAccTransSale    projOnAccTransSale;
        ProjTrans               projTransSale;
        AmountCur               transTurnover;
        ProjTrans               projTrans;

        while select projOnAccTransSale
            where projOnAccTransSale.TransId == this.TransId
        {
            projTransSale = ProjTrans::newProjOnAccTransSale(this, projOnAccTransSale);
            transTurnover += CurrencyExchangeHelper::amount((projTransSale.qty() ? projTransSale.qty() : 1) * projTransSale.salesPrice(), projTransSale.currencyIdSales());
        }

        projTrans = ProjTrans::newProjOnAccTrans(this);

        return CurrencyExchangeHelper::amount(transTurnover / (projTrans.qty() ? projTrans.qty() : 1), projTrans.currencyIdSales());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractValueForMilestoneBillingRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the contract value of the billing rule
    /// </summary>
    /// <param name="_deleteOnAccTrans">
    /// True if current on account transaction is being deleted, false otherwise
    /// </param>
    /// <remarks>
    /// Used to update contract value of the billing rule when the on account transaction is created, updated or deleted
    /// </remarks>
    public void setContractValueForMilestoneBillingRule(boolean _deleteOnAccTrans = false)
    {
        container                       onAccTransIdContainer;
        PSAContractLineItemsSetup       contractLineItemSetup;

        if (this.PSAContractLineNum != '' && this.TransactionOrigin == ProjOrigin::Milestone)
        {
            onAccTransIdContainer += this.TransId;

            if (!_deleteOnAccTrans)
            {
                select firstOnly RecId from contractLineItemSetup
                    where contractLineItemSetup.ContractLineNum  == this.PSAContractLineNum
                       && contractLineItemSetup.ProjOnAccTransId == this.TransId;

                if (!contractLineItemSetup)
                {
                    PSAContractLineItemsServer::addContractValueToContractLines(onAccTransIdContainer, this.PSAContractLineNum);
                }
            }

            PSAContractLineItemsServer::updateContractLineValue(this.PSAContractLineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjOriginOnAcc</Name>
				<Source><![CDATA[
    ProjOriginOnAcc setProjOriginOnAcc(boolean _set, ProjOriginOnAcc _originOnAcc)
    {
        ProjOriginOnAcc ret;

        if (_set)
        {
            switch (_originOnAcc)
            {
                case ProjOriginOnAcc::Prepayment:
                    this.TransactionOrigin = ProjOrigin::Prepayment;
                    break;

                case ProjOriginOnAcc::Deduction:
                    this.TransactionOrigin = ProjOrigin::Deduction;
                    break;

                case ProjOriginOnAcc::Milestone:
                    this.TransactionOrigin = ProjOrigin::Milestone;
                    break;

                case ProjOriginOnAcc::BeginningBalance:
                    this.TransactionOrigin = ProjOrigin::BeginningBalance;
                    break;

                default:
                    this.TransactionOrigin = ProjOrigin::Milestone;
            }
            this.modifiedField(fieldNum(ProjOnAccTrans, TransactionOrigin));

            return _originOnAcc;
        }
        else
        {
            switch (this.TransactionOrigin)
            {
                case ProjOrigin::Prepayment:
                    ret = ProjOriginOnAcc::Prepayment;
                    break;

                case ProjOrigin::Deduction:
                    ret = ProjOriginOnAcc::Deduction;
                    break;

                case ProjOrigin::BeginningBalance:
                    ret = ProjOriginOnAcc::BeginningBalance;
                    break;

                case ProjOrigin::UnitOfDeliveryBillingRule:
                    ret = ProjOriginOnAcc::UnitOfDeliveryBillingRule;
                    break;

                case ProjOrigin::ProgressBillingRule:
                    ret = ProjOriginOnAcc::ProgressBillingRule;
                    break;

                default:
                    ret = ProjOriginOnAcc::Milestone;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the revenue for the transaction.
    /// </summary>
    /// <returns>
    ///    The revenue for the transaction.
    /// </returns>
    /// <remarks>
    ///    The revenue is calculated as the amount on the transaction.
    /// </remarks>
    display ProjTurnover transTurnover()
    {
        return ProjTrans::newProjOnAccTrans(this).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean             ret;
        ProjOnAccTransSale  projOnAccTransSale;

        ret = super();

        if (ret)
        {
            if (ProjTable::find(this.ProjID).wipProject)
            {
                select projOnAccTransSale
                    where projOnAccTransSale.TransId == this.TransId &&
                        projOnAccTransSale.TransStatus == ProjTransStatus::Estimated;

                if (projOnAccTransSale)
                {
                    ret = checkFailed("@SYS107585");
                }

                select projOnAccTransSale
                    where projOnAccTransSale.TransId == this.TransId &&
                        projOnAccTransSale.TransStatus == ProjTransStatus::Eliminated;

                if (projOnAccTransSale)
                {
                    ret = checkFailed("@SYS107586");
                }
            }

            if (ret)
            {
                select projOnAccTransSale
                    where projOnAccTransSale.TransId == this.TransId &&
                        projOnAccTransSale.TransStatus == ProjTransStatus::InvoiceProposal;

                if (projOnAccTransSale)
                {
                    ret = checkFailed("@SYS107587");
                }

                select projOnAccTransSale
                    where projOnAccTransSale.TransId == this.TransId &&
                        projOnAccTransSale.TransStatus == ProjTransStatus::Invoiced;

                if (projOnAccTransSale)
                {
                    ret = checkFailed("@SYS107588");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the parameter "_fieldName" field is valid.
    /// </summary>
    /// <param name="_fieldName">
    ///     The field name of the field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    ///     The array index of the field to validate.
    /// </param>
    /// <returns>
    ///     true if the field is valid; otherwise, false.
    /// </returns>

    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case (fieldStr(ProjCategory, TaxServiceCodeId_BR)) :
                if (ret && this.TaxServiceCodeId_BR && !TaxServiceCode_BR::findCompanyServiceCode(this.TaxServiceCodeId_BR))
                {
                    ret = checkFailed(strFmt("@GLS180006", this.TaxServiceCodeId_BR, _fieldName, tableId2pname(tableNum(TaxServiceCode_BR))));
                }
                break;

            case (fieldStr(ProjCategory, CategoryId)):
                if (this.CategoryId)
                {
                    if (ProjCategory::find(this.CategoryId).CategoryType != ProjCategoryType::OnAccount)
                    {
                        return checkFailed(strFmt("@SYS56468", ProjCategoryType::OnAccount));
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = ProjTable::find(this.ProjID).status().validateWriteBudgetOnAccount();
        }

        if (ret && ! ProjTable::find(this.ProjID).status().ctrlInvoice())
        {
            ret = checkFailed(strFmt("@SYS62339",ProjTable::find(this.ProjID).Type));
        }

        if (ret & this.TransactionOrigin)
        {
            ProjTable projTable = ProjTable::find(this.ProjID);

            if (this.TransactionOrigin == ProjOrigin::Milestone && (ProjTable::find(this.ProjID).Type == ProjType::TimeMaterial ||
               (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
                PSAContractLineItems::find(this.psaContractLineNum).BillingMethod != ProjContractBillingMethod::FixedPrice)))
            {
                ret = checkFailed("@SYS110042");
            }
        }

        if (ret)
        {
            if (ProjTable::find(this.ProjID).wipProject)
            {
                if (ProjWIPTable::find(this.ProjID).wipEliminated)
                {
                    ret = checkFailed("@SYS106571");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the Work in Progress (WIP) for the specified project and period.
    /// </summary>
    /// <param name="projId">
    /// The project ID of the project for which to clear WIP.
    /// </param>
    /// <param name="projPeriodTo">
    /// The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    /// Transactions of type beginning balance.
    /// </param>
    public static void clearWIPPeriod(ProjId projId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSaleUpdate;
        ProjTable               projTable;
        ProjInvoiceOnAcc        locprojInvoiceOnAcc;
        ProjInvoiceOnAccDetail  locprojInvoiceOnAccDetail;
        ProjInvoiceOnAccDetail  locprojInvoiceOnAccDetailCheck;

        if ( beginningBalance == NoYes::No )
        {
            while select RecId from projTable
                where projTable.wipProject == projId
                join  RecId from locprojInvoiceOnAcc
                where locprojInvoiceOnAcc.ProjId == projTable.ProjId
                    join forupdate locprojInvoiceOnAccDetail
                       where locprojInvoiceOnAccDetail.InvoiceRefRecId == locprojInvoiceOnAcc.RecId &&
                            locprojInvoiceOnAccDetail.wipPeriod == projPeriodTo
            {
                projOnAccTransSaleUpdate = ProjOnAccTransSale::find(locprojInvoiceOnAccDetail.SaleRefRecId, true);
                projOnAccTrans = ProjOnAccTrans::find(projOnAccTransSaleUpdate.TransId);
                if ( projOnAccTrans.TransactionOrigin != ProjOrigin::BeginningBalance )
                {
                    locprojInvoiceOnAccDetail.wipPeriod = dateNull();
                    locprojInvoiceOnAccDetail.update();
                    if (projOnAccTransSaleUpdate)
                    {
                        select firstonly locprojInvoiceOnAccDetailCheck
                            order by wipPeriod desc
                            where locprojInvoiceOnAccDetailCheck.SaleRefRecId == projOnAccTransSaleUpdate.RecId
                            && locprojInvoiceOnAccDetailCheck.wipPeriod < projPeriodTo
                            && locprojInvoiceOnAccDetailCheck.wipPeriod;
                        if (!locprojInvoiceOnAccDetailCheck)
                        {
                            if (projOnAccTransSaleUpdate.TransStatus == ProjTransStatus::Estimated)
                            {
                                projOnAccTransSaleUpdate.wipPeriod = dateNull();
                                projOnAccTransSaleUpdate.TransStatus = ProjTransStatus::Invoiced;
                                projOnAccTransSaleUpdate.update();
                            }
                        }
                    }
                }
            }
        }
        else
        {
            while select RecId from projTable
                where projTable.wipProject == projId
                join  RecId from projOnAccTrans
                where projOnAccTrans.ProjID == projTable.ProjId
                    && projOnAccTrans.TransactionOrigin == ProjOrigin::BeginningBalance
                    join forupdate projOnAccTransSaleUpdate
                       where projOnAccTransSaleUpdate.TransId == projOnAccTrans.TransId &&
                            projOnAccTransSaleUpdate.wipPeriod == projPeriodTo
            {
                if (projOnAccTransSaleUpdate.TransStatus == ProjTransStatus::Estimated)
                {
                    projOnAccTransSaleUpdate.wipPeriod = dateNull();
                    projOnAccTransSaleUpdate.TransStatus = ProjTransStatus::Invoiced;
                    projOnAccTransSaleUpdate.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriodContractLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the Work in Progress (WIP) for the specified project and period.
    /// </summary>
    /// <param name="projWIPId">
    /// The project ID of the project for which to clear WIP.
    /// </param>
    /// <param name="projPeriodTo">
    /// The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    /// Transactions of type beginning balance.
    /// </param>
    public static void clearWIPPeriodContractLine(ProjWIPId projWIPId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSaleUpdate;
        ProjTable               projTable;
        ProjInvoiceOnAcc        locprojInvoiceOnAcc;
        ProjInvoiceOnAccDetail  locprojInvoiceOnAccDetail;
        ProjInvoiceOnAccDetail  locprojInvoiceOnAccDetailCheck;
        ProjRevRecContractLine projRevRecContractLine;
        PSAContractLineItemsSetup contractLineAssoc;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(projWIPId).IsContractLineUsed;

        if(!isContractLineUsed || !contractLineBasedRevRecFeature)
        {
            throw error(strFmt("@SYS22828",funcName()));
        }


        if ( beginningBalance == NoYes::No )
        {
            Set recIdInvOnAccDetail = new Set (Types::Int64);
            Set recIdOnAccTransSaleUpdate = new Set (Types::Int64);

            while select  RecId from projRevRecContractLine
                where projRevRecContractLine.RevenueRecognitionId == projWIPId
                join contractLineAssoc
                where contractLineAssoc.ContractLineNum == projRevRecContractLine.ContractLineNum
                join RecId from locprojInvoiceOnAcc
                    where locprojInvoiceOnAcc.PSAContractLineNum == contractLineAssoc.ContractLineNum
                join locprojInvoiceOnAccDetail
                    where locprojInvoiceOnAccDetail.InvoiceRefRecId == locprojInvoiceOnAcc.RecId &&
                        locprojInvoiceOnAccDetail.wipPeriod == projPeriodTo
                join projOnAccTransSaleUpdate
                    where projOnAccTransSaleUpdate.RecId == locprojInvoiceOnAccDetail.SaleRefRecId
                join projOnAccTrans
                    where projOnAccTrans.TransId == projOnAccTransSaleUpdate.TransId
                        && projOnAccTrans.TransactionOrigin != ProjOrigin::BeginningBalance
            {
                recIdInvOnAccDetail.add(locprojInvoiceOnAccDetail.RecId);

                if (projOnAccTransSaleUpdate && projOnAccTransSaleUpdate.TransStatus == ProjTransStatus::Estimated)
                {
                    select firstonly locprojInvoiceOnAccDetailCheck
                            order by wipPeriod desc
                            where locprojInvoiceOnAccDetailCheck.SaleRefRecId == projOnAccTransSaleUpdate.RecId
                            && locprojInvoiceOnAccDetailCheck.wipPeriod < projPeriodTo
                            && locprojInvoiceOnAccDetailCheck.wipPeriod;
                    if (!locprojInvoiceOnAccDetailCheck)
                    {
                        recIdOnAccTransSaleUpdate.add(projOnAccTransSaleUpdate.RecId);
                    }
                }
            }

            SetEnumerator iterator = recIdInvOnAccDetail.getEnumerator();
            RecId recId;
            while (iterator.moveNext())
            {
                recId = iterator.current();
                select forupdate locprojInvoiceOnAccDetail where locprojInvoiceOnAccDetail.RecId == recId;
                ttsbegin;
                locprojInvoiceOnAccDetail.wipPeriod = dateNull();
                locprojInvoiceOnAccDetail.update();
                ttscommit;
            }

            iterator = recIdOnAccTransSaleUpdate.getEnumerator();
            while (iterator.moveNext())
            {
                recId = iterator.current();
                select forupdate projOnAccTransSaleUpdate where projOnAccTransSaleUpdate.RecId == recId;
                ttsbegin;
                projOnAccTransSaleUpdate.wipPeriod = dateNull();
                projOnAccTransSaleUpdate.TransStatus = ProjTransStatus::Invoiced;
                projOnAccTransSaleUpdate.update();
                ttscommit;
            }
        }
        else
        {
            while select RecId from projRevRecContractLine
                where projRevRecContractLine.RevenueRecognitionId == projWIPId
                join contractLineAssoc
                where contractLineAssoc.ContractLineNum == projRevRecContractLine.ContractLineNum
                join  RecId from projOnAccTrans
                where projOnAccTrans.PSAContractLineNum == contractLineAssoc.ContractLineNum
                    && projOnAccTrans.TransactionOrigin == ProjOrigin::BeginningBalance
                    join forupdate projOnAccTransSaleUpdate
                       where projOnAccTransSaleUpdate.TransId == projOnAccTrans.TransId &&
                            projOnAccTransSaleUpdate.wipPeriod == projPeriodTo
            {
                if (projOnAccTransSaleUpdate.TransStatus == ProjTransStatus::Estimated)
                {
                    projOnAccTransSaleUpdate.wipPeriod = dateNull();
                    projOnAccTransSaleUpdate.TransStatus = ProjTransStatus::Invoiced;
                    projOnAccTransSaleUpdate.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractValue</Name>
				<Source><![CDATA[
    public static AmountMST contractValue(ProjId _projId)
    {
        ProjOnAccTrans      projOnAccTrans;
        ProjOnAccTransSale  projOnAccTransSale;

        select sum(Amount) from projOnAccTransSale 
            join projOnAccTrans where projOnAccTrans.ProjID == _projId
                && projOnAccTrans.CurrencyId == ProjTable::find(_projId).contractCurrCode()
                && ProjOnAccTransSale.TransStatus != ProjTransStatus::Adjusted;

        return projOnAccTransSale.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnAccTrans_ReturnTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logic to create a new record in ProjOnAccountTrans and related tables
    /// </summary>
    /// <param name = "_projOnAccTrans">Table buffer holding the data to create in <c>ProjOnAccTrans</c></param>
    /// <param name = "_amount">Sale amount</param>
    /// <param name = "_useFundingRules">Use funding rules - defaults to true if not provided</param>
    /// <param name = "_fundingRefId">Reference to <c>ProjFundingSource</c> - defaults to 0</param>
    /// <param name = "_posting">Defaults to true</param>
    /// <param name = "_useFundingLimits">True if its using Funding Limits</param>
    /// <returns></returns>
    public static ProjOnAccTransId createOnAccTrans_ReturnTransId(ProjOnAccTrans        _projOnAccTrans,
                                                               AmountCur                _amount,
                                                               boolean                  _useFundingRules = true,
                                                               ProjFundingSourceRefId   _fundingRefId = 0,
                                                               boolean                  _posting = true,
                                                               boolean                  _useFundingLimits = true)
    {
        ProjTrans           projTrans;
        ProjFundingEngine   projFundingEngine;
        ProjOnAccTransSale  projOnAccTransSale;
        Map                 newOnAccountLines;
        MapEnumerator       enumerateMap;
        ProjOnAccTrans      projOnAccTrans;

        ttsbegin;

        projOnAccTrans = _projOnAccTrans;
        if (!_useFundingRules)
        {
            if (projOnAccTrans.validateWrite())
            {
                projOnAccTrans.write();
            }
            else
            {
                throw Global::error(strFmt("@SYS67205", tablePName(ProjOnAccTrans)));
            }

            projOnAccTransSale.clear();
            projOnAccTransSale.initValue();
            projOnAccTransSale.TransId = projOnAccTrans.TransId;
            projOnAccTransSale.LedgerTransdate = projOnAccTrans.TransDate;
            projOnAccTransSale.FundingSource = _fundingRefId;
            projOnAccTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projOnAccTrans.DefaultDimension, ProjFundingSource::find(projOnAccTransSale.FundingSource).DefaultDimension);
            projOnAccTransSale.Amount = _amount;
            if (projOnAccTransSale.validateWrite())
            {
                projOnAccTransSale.write();
            }
            else
            {
                throw Global::error(strFmt("@SYS67205", tablePName(ProjOnAccTransSale)));
            }
        }
        else
        {
            if (!_projOnAccTrans.validateWrite())
            {
                throw Global::error(strFmt("@SYS67205", tablePName(ProjOnAccTrans)));
            }

            projTrans = ProjTrans::newProjOnAccTrans(_projOnAccTrans);

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                projFundingEngine = ProjFundingEngine::construct(projTrans, 0, _amount, _posting, _useFundingLimits);
            }
            else
            {
                projFundingEngine = ProjFundingEngine::construct(projTrans, 0 ,  _amount);
            }

            if (_fundingRefId != 0)
            {
                // Funding source specified. Use as singleton entry
                projFundingEngine.setSingleFundingSourceRefId(_fundingRefId);
                projFundingEngine.parmSingleFundingSourceRequired(true);
            }

            if (projFundingEngine.allocate())
            {
                if (projOnAccTrans.validateWrite())
                {
                    projOnAccTrans.write();
                }
                else
                {
                    throw Global::error(strFmt("@SYS67205", tablePName(ProjOnAccTrans)));
                }

                newOnAccountLines = projFundingEngine.parmSaleDistributions();
                enumerateMap = new MapEnumerator(newOnAccountLines);
                while (enumerateMap.moveNext())
                {
                    projOnAccTransSale.clear();
                    projOnAccTransSale.initValue();
                    projOnAccTransSale.TransId = projOnAccTrans.TransId;
                    projOnAccTransSale.LedgerTransdate = projOnAccTrans.TransDate;
                    projOnAccTransSale.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projOnAccTrans.DefaultDimension, ProjFundingSource::find(enumerateMap.currentKey()).DefaultDimension);
                    projOnAccTransSale.FundingSource = enumerateMap.currentKey();
                    projOnAccTransSale.Amount = enumerateMap.currentValue();
                    if (projOnAccTransSale.validateWrite())
                    {
                        projOnAccTransSale.write();
                    }
                    else
                    {
                        throw Global::error(strFmt("@SYS67205", tablePName(ProjOnAccTransSale)));
                    }
                }
            }
            else
            {
                throw Global::error("@SYS344241");
            }
        }

        projOnAccTrans.setContractValueForMilestoneBillingRule();

        ttscommit;

        return projOnAccTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnAccTrans</Name>
				<Source><![CDATA[
    public static boolean createOnAccTrans(ProjOnAccTrans    _projOnAccTrans,
                                           AmountCur                _amount,
                                           boolean                  _useFundingRules = true,
                                           ProjFundingSourceRefId   _fundingRefId = 0,
                                           boolean                  _posting = true,
                                           boolean                  _useFundingLimits = true)
    {
        boolean result = false;
        ProjOnAccTransId transId = ProjOnAccTrans::createOnAccTrans_ReturnTransId(_projonaccTrans,
                                                            _amount,
                                                            _usefundingRules,
                                                            _fundingRefId,
                                                            _posting,
                                                            _useFundingLimits);
        if (transId)
        {
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAndrecreateProjOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes and recreates on account transaction for a given billing rule
    /// </summary>
    /// <param name="_contractLineItem">
    /// Billing rule to be used to initialize on account transaction
    /// </param>
    /// <returns>
    /// True if sucessful, false otherwise
    /// </returns>
    /// <remarks>
    /// Used when contract value is updated on progress based or unit of delivery billing rule
    /// </remarks>
    public static boolean deleteAndrecreateProjOnAccTrans(PSAContractLineItems _contractLineItem)
    {
        boolean retVal;
        ProjOnAccTrans          projOnAccTrans;
        projOnAccTransSale      projOnAccTransSale;

        // Delete the initial proj on account Transaction
        select forupdate projOnAccTrans
            where projOnAccTrans.PSAContractLineNum == _contractLineItem.ContractLineNum
                exists join projOnAccTransSale
                    where projOnAccTransSale.TransId == projOnAccTrans.TransId
                        && projOnAccTransSale.TransStatus == ProjTransStatus::Registered;
        projOnAccTrans.delete();

        // Recreate the on account transaction based on billing rule
        projOnAccTrans.initFromBillingRule(_contractLineItem);
        retVal = ProjOnAccTrans::createOnAccTrans(projOnAccTrans, _contractLineItem.LineValue);
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the on-account transaction with the given transaction ID.
    /// </summary>
    /// <param name="_transId">
    ///    The transaction ID of the transaction.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the transaction should be updated; optional.
    /// </param>
    /// <returns>
    ///    The desired transaction.
    /// </returns>
    public static ProjOnAccTrans find(ProjOnAccTransId _transId, boolean _forUpdate = false)
    {
        ProjOnAccTrans    projOnAccTrans = null;

        projOnAccTrans.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select firstonly projOnAccTrans where projOnAccTrans.TransId == _transId;
        }

        return projOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOpenOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns all the on-account transactions entered against projects in the invoice project passed in as a parameter. Only returns transactions that have not yet been invoiced and use the currency code
    ///    passed in as a parameter.
    /// </summary>
    /// <param name="projInvoiceProjId">
    ///    The ID of the invoice project.
    /// </param>
    /// <param name="currencyCode">
    ///    The currency code that is used by the transactions to retrieve.
    /// </param>
    /// <param name="update">
    ///    A Boolean value that determines whether the transaction to receive will require updating; optional.
    /// </param>
    /// <returns>
    ///    A record set of on-account transactions.
    /// </returns>
    public static ProjOnAccTrans projOpenOnAcc(ProjInvoiceProjId   projInvoiceProjId,
                                        CurrencyCode        currencyCode,
                                        boolean             update = false)
    {
        ProjOnAccTrans      projOnAccTrans = null;
        ProjTable           projTable;
        ProjOnAccTransSale  projOnAccTransSale;

        projOnAccTrans.selectForUpdate(update);

        select projOnAccTrans
            where projOnAccTrans.CurrencyId == currencyCode
            join RecId from projTable
            where projTable.ProjInvoiceProjId == projInvoiceProjId  &&
                  projOnAccTrans.ProjID       == projTable.ProjId
                notexists join projOnAccTransSale
                    where projOnAccTransSale.TransId  == projOnAccTrans.TransId &&
                        projOnAccTransSale.TransStatus != ProjTransStatus::Registered;

        return projOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAmountDisplayCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sales amounts for multiple on-account transactions and returns a map of the
    /// transaction ID's to sales amounts in a container. ProjOnAccTrans is used to calculate the amounts.
    /// </summary>
    /// <param name="_conprojOnAccTrans">
    /// A packed set of transaction IDs.
    /// </param>
    /// <param name="_conprojOnAccTransSalesAmount">
    /// A packed Map of String to Real. It can be empty or can already contain elements.
    /// </param>
    /// <param name="_ledgerFromDate">
    /// The begin date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="_ledgerToDate">
    /// The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    /// A packed map of transaction IDs to sales amounts
    /// </returns>
    /// <remarks>
    /// If <paramref name="_conProjOnAccTrans" /> contains transaction IDs that are already in <paramref
    /// name="_conProjOnAccTransSalesAmount" />, the sales amount will be recalculated and updated in the
    /// map.
    /// </remarks>
    static container sumAmountDisplayCache(
        container   _conprojOnAccTrans,
        container   _conprojOnAccTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjOnAccTrans    projOnAccTrans;
        Set               setprojOnAccTrans;
        Map               mapprojOnAccTransSalesAmount;
        SetIterator       si;

        if (_conprojOnAccTrans)
        {
            setprojOnAccTrans = Set::create(_conprojOnAccTrans);
        }

        if (_conprojOnAccTransSalesAmount)
        {
            mapprojOnAccTransSalesAmount  = Map::create(_conprojOnAccTransSalesAmount);
        }

        si = new SetIterator(setprojOnAccTrans);
        si.begin();
        while (si.more())
        {
            projOnAccTrans = ProjOnAccTrans::find(si.value());
            mapprojOnAccTransSalesAmount.insert(si.value(), projOnAccTrans.salesAmount(projOnAccTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapprojOnAccTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        ProjPostedTransTable::initFromOnAccTrans(this);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            ProjOnAccTransTaxExtensionIN projOnAccTransTaxExtenisonIN = this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjOnAccTransTaxExtensionIN));

            this.packProjOnAccTrans_IN(projOnAccTransTaxExtenisonIN);

            this.SysExtensionSerializerMap::postInsert();
        }
        // </GIN>

        if (this.TransactionOrigin == ProjOrigin::Milestone)
        {
            boolean wipProjCreated = false;
           
            if (ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled())
            {
                ProjRevRecContractLine projRevRecContractLine = ProjRevRecContractLine::findByContractLineNum(this.PSAContractLineNum);
                ProjWIPTable projWIPTable = ProjWIPTable::find(projRevRecContractLine.RevenueRecognitionId);

                ProjWIPTable wipReturned = ProjRevRecHelper::createFixedPriceEstimateProjectForContractLine(this.PSAContractLineNum);
                wipProjCreated = (wipReturned.RecId != projWIPTable.RecId);
            }
            else  if( ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                wipProjCreated = ProjRevRecHelper::createDefaultFixedPriceRevRecProject(ProjTable::find(this.ProjID));
            }

            if (wipProjCreated)
            {
                if (FeatureStateProvider::isFeatureEnabled(ProjEstimatesToRevRecRenameFeature::instance()))
                {
                    info(strFmt("@Proj:EstimateProjectCreatedV2", this.ProjID));
                }
                else
                {
                    info(strFmt("@Proj:EstimateProjectCreated", this.ProjID));
                }
            }

        }

        this.addInstrumentation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInstrumentation</Name>
				<Source><![CDATA[
    private void addInstrumentation()
    {
        // This code block is adding telemetry to understand how many prepayments/cash advances are created and what is the source of these advances.
        if (this.TransactionOrigin == ProjOrigin::Prepayment)
        {
            ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(tableStr(ProjOnAccTrans));

            using (var activityContext = logger.projOpsFinActivity().activityContext(ProjOpsFinancialsInstrumentationActivites::CashAdvances))
            {
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::MultipleContractLineFeatureEnabled, any2Str(ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()));
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ProjOpsFeatureEnabled, any2Str(ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()));

                str cashAdvSource = ProjOpsFinancialsInstrumentationActivites::CashAdvSource_Unknown;
                if (this.PSAIsOnAccount)
                {
                    if (this.PSARefRecIdBudgetTrans)
                    {
                        cashAdvSource = ProjOpsFinancialsInstrumentationActivites::CashAdvSource_Budget;
                    }
                    else
                    {
                        cashAdvSource = ProjOpsFinancialsInstrumentationActivites::CashAdvSource_Lumpsum;
                    }
                }
                
                activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::CashAdvSource, cashAdvSource);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProjOnAccTrans orig = this.orig();

        super();

        ProjPostedTransTable::updateFromOnAccTrans(this);

        if (this.TotalSalesAmountCur != orig.TotalSalesAmountCur)
        {
            this.updateAssessableValue_IN();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sales purch journal table for tax model.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SalesPurchJournalTable</c> class.
    /// </returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        ProjProposalJour    projProposalJour;
        ProjProposalOnAcc   projProposalOnAcc;

        select firstOnly projProposalJour
            exists join projProposalOnAcc
                where projProposalOnAcc.ProposalId == projProposalJour.ProposalId
                    && projProposalOnAcc.TransId == this.TransId;

        return TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    private void updateAssessableValue_IN()
    {
        boolean isUpdateProjAVFlightEnable = TaxUpdateProjOnAccTransAV_INFlight::instance().isEnabled();
        if ((!isUpdateProjAVFlightEnable && TaxGSTProjAdvancedJournalUtils::isTaxEnabledForProjOps_IN())
            || (isUpdateProjAVFlightEnable && TaxParameters::checkTaxParameters_IN()))
        {
            ProjOnAccTransTaxExtensionIN projOnAccTransTaxExtIN = this.projOnAccTransTaxExtensionIN();

            if (!TaxSkipUpdateAssessableValueOfOnAccTransContext::current()
                || !TaxSkipUpdateAVWithContext_INFlight::instance().isEnabled())
            {
                projOnAccTransTaxExtIN.updateAssessableValueTransacationCurrency(this.TotalSalesAmountCur);
                this.packProjOnAccTrans_IN(projOnAccTransTaxExtIN);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124942</DeveloperDocumentation>
	<FormRef>projtransonAcc</FormRef>
	<Label>@SYS7659</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjID</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProjDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>TransIdx</PrimaryIndex>
	<ReplacementKey>TransIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceOnAcc</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceOnAcc</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalOnAcc</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalOnAcc</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>proposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>invoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MarkAsComplete</Name>
			<Label>@SYS4001371</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsMilestoneComplete</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>projInvoiceStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAProjProgressInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARefTableIdBudgetTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSARefRecIdBudgetTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAIsOnAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCodeId_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax_BR</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroupHeading_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMilestoneComplete</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4001371</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAIsOnAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PSA11026</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAProjProgressInvoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PSA1283</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PSARefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PSARefRecIdBudgetTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PSARefTableIdBudgetTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCodeId_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdItemGroupId_TH</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalSalesAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalSalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionOrigin</ExtendedDataType>
			<EnumType>ProjOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjOnAccTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdjRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ProjOnAccTransId</ExtendedDataType>
			<Label>@SYS115827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransIdRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ProjOnAccTransId</ExtendedDataType>
			<Label>@SYS71999</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<FeatureClass>ProjOnAccountCategoryToggle</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdjRefTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AdjRefTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdTransOriginPSAIsOnAccIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAIsOnAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjIdContractLineNumTransOrigin</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransactionOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransacctionOriginProjIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionOrigin</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjProposalTransMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTxt</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeId</MapField>
					<MapFieldTo>TaxServiceCodeId_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjID</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PSAProjTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyId</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsReleased</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsRetained</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionOrigin</MapField>
					<MapFieldTo>TransactionOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransStatus</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroupId</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroupId</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ForecastSales</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastSales</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ForecastSales</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSARefRecIdBudgetTrans</Name>
					<Field>PSARefRecIdBudgetTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjOnaccTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProjOnAccTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjOnAccTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSARefRecId</Name>
					<Field>PSARefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjID</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjID</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAContractLineItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PSAContractLineItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAContractLineNum</Name>
					<SourceEDT>PSAContractLineNum</SourceEDT>
					<Field>PSAContractLineNum</Field>
					<RelatedField>ContractLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractLineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdItemGroupHeading_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdItemGroupHeading_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdItemGroupHeading_TH</Name>
					<Field>TaxWithholdItemGroupHeading_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxServiceCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxServiceCode_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxServiceCodeId_BR</Name>
					<Field>TaxServiceCodeId_BR</Field>
					<RelatedField>ServiceCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjOnAccTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>