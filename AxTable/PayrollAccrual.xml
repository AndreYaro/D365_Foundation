<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollAccrual</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollAccrual extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.showWarningsOnImproperCarryFwdSetup();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningsOnImproperCarryFwdSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning message carry forward limit is set in the related accrual rate records and starting date is set to empty or can carry forward is set to false.
    /// </summary>
    private void showWarningsOnImproperCarryFwdSetup()
    {
        PayrollAccrualRate payrollAccrualRate;

        if (this.StartingDate == DateTimeUtil::date(DateTimeUtil::minValue()) || this.CanCarryForward == NoYes::No)
        {
            select firstonly RecId from payrollAccrualRate
                where payrollAccrualRate.Accrual == this.RecId
                    && payrollAccrualRate.CarryForwardLimit != 0;

            if (payrollAccrualRate.RecId != 0)
            {
                warning("@Payroll:ARuleForThisPlanIncludesACarryForwardLimitButTheCheckBoxToCa");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.showWarningsOnImproperCarryFwdSetup();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCarryForwardRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the logic for making an accrual plan a carry forward enabled.
    /// </summary>
    /// <returns>
    /// true if the value new value entered makes it eligible for carry forwarding; otherwise false.
    /// </returns>
    private boolean validateCarryForwardRequirement()
    {
        boolean isValid = true;

        if (this.CanCarryForward == NoYes::Yes && this.StartingDate == DateTimeUtil::date(DateTimeUtil::minValue()))
        {
            isValid = checkFailed("@SYS4090089");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PayrollAccrual, CanCarryForward):
                    ret = this.validateCarryForwardRequirement();
                    break;
                case fieldNum(PayrollAccrual, StartingDate):
                    if (ret)
                    {
                        if ((dayOfMth(this.StartingDate) == 29) && (mthOfYr(this.StartingDate) == 2))
                        {
                            ret = checkFailed("@SYS4090025");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrual</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollAccrualRecId _recId)
    {
        boolean ret = true;

        if (!PayrollAccrual::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollAccrual::txtNotExist(), tableId2name(tableNum(PayrollAccrual))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in <c>PayrollAccrual</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollAccrualRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollAccrual
                    where payrollAccrual.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrual</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrual</c> table.
    /// </returns>
    public static PayrollAccrual find(
    PayrollAccrualRecId         _recId,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollAccrual payrollAccrual;

        payrollAccrual.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrual.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrual
            where payrollAccrual.RecId == _recId;

        return payrollAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>PayrollAccrual</c> table based on supplied value of the <c>AccrualId</c> field.
    /// </summary>
    /// <param name="_accrualId">
    /// The value of the <c>accrualId</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollAccrual</c> table.
    /// </returns>
    public static PayrollAccrual findByAccrual(
    PayrollAccrualId    _accrualId,
    boolean             _forUpdate          = false,
    ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        PayrollAccrual payrollAccrual;

        payrollAccrual.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollAccrual.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollAccrual
            where payrollAccrual.AccrualId == _accrualId;

        return payrollAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkerEnrolled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a <c>PayrollAccrual</c> record is associated with an <c>HcmWorker</c> record.
    /// </summary>
    /// <param name="_payrollAccrualId">
    /// The value of the <c>PayrollAccrual</c> record ID to check.
    /// </param>
    /// <returns>
    /// true if the association exists; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method checks the association throughout legal entities.
    /// </remarks>
    public static boolean isWorkerEnrolled(PayrollAccrualId _payrollAccrualId)
    {
        PayrollWorkerEnrolledAccrual payrollWorkerEnrolledAccrual;

        select firstonly crossCompany RecId from payrollWorkerEnrolledAccrual
            where payrollWorkerEnrolledAccrual.Accrual == PayrollAccrual::findByAccrual(_payrollAccrualId).RecId;

        return payrollWorkerEnrolledAccrual.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the View Details option to RecId field of <c>PayrollAccrual</c> table.
    /// </summary>
    /// <param name="_payrollAccrualRecId">
    ///     The PayrollAccrual being looked up.
    /// </param>
    /// <param name="_caller">
    ///     The calling form.
    /// </param>
    /// <remarks>
    /// The method takes the RecId of <c>PayrollAccrual</c> table value as an input param and opens the <c>PayrollAccrual</c> form.
    /// </remarks>
    public static void jumpRef(PayrollAccrualRecId _payrollAccrualRecId, Object _caller)
    {
        PayrollAccrual payrollAccrual;
        Args args;
        MenuFunction menuFunction;
        FormRun formRun;

        payrollAccrual = PayrollAccrual::find(_payrollAccrualRecId);
        if (!payrollAccrual)
        {
            return;
        }

        args = new Args();
        args.caller(_caller);
        args.lookupRecord(payrollAccrual);
        args.openMode(OpenMode::Auto);
        menuFunction = new MenuFunction(menuitemDisplayStr(PayrollAccrual), MenuItemType::Display);
        formRun = menuFunction.create(args);
        formRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        PayrollAccrual payrollAccrual;

        ret = super();

        if (ret && payrollAccrual.WorkerAccrualDateMethod == PayrollWorkerAccrualDateMethod::Custom
            && this.CustomAccrualDate == dateNull())
        {
            ret = checkFailed("@Payroll:WhenTheAccrualRateBasisIsAFixedAmountByDateAndTheAccrualDate");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompensatoryAccuralBasisType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if <c>AccrualMethod</c> field value on <c>PayrollEarningCode</c> table
    /// is set to Compensatory.
    /// </summary>
    /// <param name="_payrollAccrualRecId">
    /// The accrual code to check.
    /// </param>
    /// <returns>
    /// true if the Accrual method is set to compensatory; otherwise, false.
    /// </returns>
    public static boolean isCompensatoryAccuralBasisType (PayrollAccrualRecId _payrollAccrualRecId)
    {
        boolean ret;

        ret = (select firstonly RecId from payrollAccrual
                where payrollAccrual.AccrualMethod == PayrollAccrualMethod::Compensatory
                && payrollAccrual.RecId == _payrollAccrualRecId).RecId != 0 ;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollaccrualTableStoresTheBenefitAccruals</DeveloperDocumentation>
	<FormRef>PayrollAccrual</FormRef>
	<Label>@Payroll:BenefitAccrualPlan1</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>AccrualId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>PayrollAccrualIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsIncludedInAccrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanCarryForward</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanCarryForward</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsIncludedInAccrual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@Payroll:Overview</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccrualMethod</Name>
			<Label>@Payroll:AccrualRateBasis</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccrualMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Frequency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkerAccrualDateMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomAccrualDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccrualId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanCarryForward</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Payroll:CarryForwardBalances</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsIncludedInAccrual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Payroll:AccrueOnUsage</Label>
			<Mandatory>Yes</Mandatory>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartingDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualStartingDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccrualMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PayrollAccrualMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CustomAccrualDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollAccrualCustomDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Frequency</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollCalculationFrequencyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkerAccrualDateMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PayrollWorkerAccrualDateMethod</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayrollAccrualIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccrualId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollCalculationFrequency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PayrollCalculationFrequency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Frequency</Name>
					<Field>Frequency</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>