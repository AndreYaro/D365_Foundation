<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryJournalEntryStagingToEntityMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryJournalEntryStagingToEntityMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an entity field mappings from source to staging area.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group for which to find the mappings.</param>
    /// <param name = "_entityFieldName">The name of the entity field for which to find the mappings.</param>
    /// <param name = "_xmlFieldName"The xml name of the entity field for which to find the mappings.></param>
    /// <param name = "_forupdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>An <c>InventInventoryJournalEntryStagingToEntityMap</c> record; otherwise, an empty record.</returns>
    public static InventInventoryJournalEntryStagingToEntityMap find(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        FieldName                   _entityFieldName,
        FieldName                   _xmlFieldName,
        boolean                     _forupdate = false)
    {
        InventInventoryJournalEntryStagingToEntityMap stagingToEntityMap;

        if (_dmfDefinitionGroupExecution.DefinitionGroup
            && _dmfDefinitionGroupExecution.Entity
            && _entityFieldName
            && _xmlFieldName)
        {
            if (_forupdate)
            {
                stagingToEntityMap.selectForUpdate(_forupdate);
            }

            select firstonly stagingToEntityMap
                where stagingToEntityMap.DefinitionGroup    == _dmfDefinitionGroupExecution.DefinitionGroup
                   && stagingToEntityMap.Entity             == _dmfDefinitionGroupExecution.Entity
                   && stagingToEntityMap.EntityField        == _entityFieldName
                   && stagingToEntityMap.XMLField           == _xmlFieldName;
        }

        return stagingToEntityMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMappedField</Name>
				<Source><![CDATA[
    private static DMFSourceXMLToEntityMap getMappedField(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        FieldName                   _entityFieldName)
    {
        DMFSourceXMLToEntityMap sourceXMLToEntityMap;

        if (_dmfDefinitionGroupExecution.DefinitionGroup
            && _dmfDefinitionGroupExecution.Entity
            && _entityFieldName)
        {
            select firstonly sourceXMLToEntityMap
                where sourceXMLToEntityMap.DefinitionGroup  == _dmfDefinitionGroupExecution.DefinitionGroup
                   && sourceXMLToEntityMap.Entity           == _dmfDefinitionGroupExecution.Entity
                   && sourceXMLToEntityMap.EntityField      == _entityFieldName;
        }

        return sourceXMLToEntityMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the entity field mappings from source to staging area.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group for which the mappings should be created.</param>
    /// <param name = "_entityFieldName">The name of the entity field for which the mappings should be created.</param>
    /// <param name = "_xmlFieldName"The xml name of the entity field for which the mappings should be created.></param>
    /// <returns>true if the mapping is created; otherwise, false.</returns>
    public static boolean createMapping(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        FieldName                   _entityFieldName,
        FieldName                   _xmlFieldName)
    {
        #OCCRetryCount

        if (!InventInventoryJournalEntryStagingToEntityMap::getMappedField(_dmfDefinitionGroupExecution, _entityFieldName).RecId)
        {
            try
            {
                InventInventoryJournalEntryStagingToEntityMap stagingToEntityMap = InventInventoryJournalEntryStagingToEntityMap::find(_dmfDefinitionGroupExecution, _entityFieldName, _xmlFieldName);

                if (!stagingToEntityMap.RecId)
                {
                    DMFEntity   entity = DMFEntity::find(_dmfDefinitionGroupExecution.Entity);
                    TableId     entityTableId = tablename2id(entity.EntityTable);
                    DictField   dictField = new DictField(entityTableId, fieldName2id(entityTableId, _entityFieldName));

                    ttsbegin;
                    DMFSourceXMLToEntityMap sourceXMLToEntityMap;

                    sourceXMLToEntityMap.DefinitionGroup = _dmfDefinitionGroupExecution.DefinitionGroup;
                    sourceXMLToEntityMap.Entity = _dmfDefinitionGroupExecution.Entity;
                    sourceXMLToEntityMap.EntityField = _entityFieldName;
                    sourceXMLToEntityMap.EntityFieldSQL = dictField.name(DbBackend::Sql);
                    sourceXMLToEntityMap.XMLField = _xmlFieldName;
                    sourceXMLToEntityMap.FieldType = enum2str(dictField.baseType());
                    sourceXMLToEntityMap.FieldSize = dictField.stringLen();
                    sourceXMLToEntityMap.insert(false);

                    stagingToEntityMap.initFromDMFSourceXMLToEntityMap(sourceXMLToEntityMap);
                    stagingToEntityMap.insert();
                    ttscommit;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDMFSourceXMLToEntityMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventInventoryJournalEntryStagingToEntityMap</c> buffer based on a <c>DMFSourceXMLToEntityMap</c> buffer.
    /// </summary>
    /// <param name = "_sourceXMLToEntityMap">The <c>DMFSourceXMLToEntityMap</c> buffer used for initialization.</param>
    public void initFromDMFSourceXMLToEntityMap(DMFSourceXMLToEntityMap _sourceXMLToEntityMap)
    {
        this.DefinitionGroup    = _sourceXMLToEntityMap.DefinitionGroup;
        this.Entity             = _sourceXMLToEntityMap.Entity;
        this.EntityField        = _sourceXMLToEntityMap.EntityField;
        this.XMLField           = _sourceXMLToEntityMap.XMLField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes entity field mappings.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group for which the mappings should be deleted.</param>
    public static void deleteMapping(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        InventInventoryJournalEntryStagingToEntityMap   stagingToEntityMap;
        DMFSourceXMLToEntityMap                         sourceXMLToEntityMap;

        delete_from sourceXMLToEntityMap
            exists join stagingToEntityMap
                where sourceXMLToEntityMap.DefinitionGroup  == stagingToEntityMap.DefinitionGroup
                   && sourceXMLToEntityMap.Entity           == stagingToEntityMap.Entity
                   && sourceXMLToEntityMap.EntityField      == stagingToEntityMap.EntityField
                   && sourceXMLToEntityMap.XMLField         == stagingToEntityMap.XMLField
                   && stagingToEntityMap.DefinitionGroup    == _dmfDefinitionGroupExecution.DefinitionGroup
                   && stagingToEntityMap.Entity             == _dmfDefinitionGroupExecution.Entity;

        delete_from stagingToEntityMap
            where stagingToEntityMap.DefinitionGroup    == _dmfDefinitionGroupExecution.DefinitionGroup
               && stagingToEntityMap.Entity             == _dmfDefinitionGroupExecution.Entity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>DMF</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventInventoryJournalEntryStagingToEntityMap_DevDoc</DeveloperDocumentation>
	<Label>@SCM:InventInventoryJournalEntryStagingToEntityMap_Label</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>DefinitionGroup</TitleField1>
	<TitleField2>Entity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SourceEntityIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>SourceEntityIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefinitionGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Entity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntityField</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>XMLField</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefinitionGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>DMFDefinitionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Entity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DMFEntityName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EntityField</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<Label>@DMF191</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>XMLField</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FieldName</ExtendedDataType>
			<Label>@DMF305</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceEntityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DefinitionGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Entity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EntityField</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>XMLField</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>