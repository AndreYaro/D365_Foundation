<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanHeader extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findJustificationAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the justification document associated with the current <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <returns>The <c>DocuRef</c> record of the justification attachment.</returns>
    public DocuRef findJustificationAttachment()
    {
        DocuRef docuRef;

        select firstOnly docuRef
            where docuRef.RefTableId == this.TableId
                && docuRef.RefRecId == this.RecId
                && docuRef.IsJustification == NoYes::Yes
                && docuRef.RefCompanyId == BudgetPlan::getDataAreaId(this.RecId);

        return docuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocuRefCompanyRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the query execution of document attachments on the <c>DocuAttachment</c> form.
    /// Modifies the query range to filter using the budget plans data area id.
    /// </summary>
    /// <param name = "_query"> The <c>Query</c> object that will be executed. </param>
    /// <param name = "_qbds"> The <c>QueryBuildDataSource</c> object of the executing datasource. </param>
    [SubscribesTo(classstr(DocuEvent), delegatestr(DocuEvent, onDocuViewDocuRefDataSourceExecuteQuery))]
    public static void addDocuRefCompanyRange(Query _query, QueryBuildDataSource _qbds)
    {
        TableId referenceTableId = str2Int(_qbds.findRange(fieldNum(DocuRef, RefTableId)).value());
        if (referenceTableId == tableNum(BudgetPlanHeader))
        {
            QueryBuildRange companyIdRange = _qbds.findRange(fieldNum(DocuRef, RefCompanyId));
            BudgetPlanHeaderRecId headerRecId = str2Int64(_qbds.findRange(fieldNum(DocuRef, RefRecId)).value());

            if (companyIdRange)
            {
                CompanyId planCompanyId = BudgetPlan::getDataAreaId(headerRecId);
                companyIdRange.value(planCompanyId);
            }

            container cache = BudgetPlanCache::getValue(BudgetPlanCacheScope::JustificationAttachment, [headerRecId, curUserId()]);
            if (conPeek(cache, 1))
            {
                QueryBuildRange isJustificationRange = SysQuery::findOrCreateRange(_qbds, fieldNum(DocuRef, IsJustification));
                isJustificationRange.value(SysQuery::value(NoYes::Yes));
                BudgetPlanCache::removeValue(BudgetPlanCacheScope::JustificationAttachment, [headerRecId, curUserId()]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCompanyRangeOnDocuRefInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to <c>DocuRef</c> insert events and ensures the correct company ID is used for
    /// <c>BudgetPlanHeader</c> records.
    /// </summary>
    /// <param name = "_docuRef"> The <c>DocuRef</c> record buffer. </param>
    /// <param name = "_interCompanyFromRecId"> The record ID to get the InterCompany from. </param>
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnInsert))]
    public static void assignCompanyRangeOnDocuRefInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(BudgetPlanHeader))
        {
            _docuRef.RefCompanyId = BudgetPlan::getDataAreaId(_docuRef.RefRecId);

            container cache = BudgetPlanCache::getValue(BudgetPlanCacheScope::JustificationAttachment, [_docuRef.RefRecId, curUserId()]);
            if (conPeek(cache, 1))
            {
                _docuRef.IsJustification = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJustificationAttachmentCacheFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to <c>DocuRef</c> post insert event and ensures the cached justification flag is removed.
    /// </summary>
    /// <param name = "_docuRef"> The <c>DocuRef</c> record buffer. </param>
    /// <param name = "_interCompanyFromRecId"> The record ID to get the InterCompany from. </param>
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnPostInsert))]
    public static void removeJustificationAttachmentCacheFlag(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(BudgetPlanHeader))
        {
            container cache = BudgetPlanCache::getValue(BudgetPlanCacheScope::JustificationAttachment, [_docuRef.RefRecId, curUserId()]);
            if (conPeek(cache, 1))
            {
                BudgetPlanCache::removeValue(BudgetPlanCacheScope::JustificationAttachment, [_docuRef.RefRecId, curUserId()]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInUseImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns display image when the <c>BudgetPlanHeader</c> is in use.
    /// </summary>
    /// <returns> A container with reference to display image when the budget plan is in use. </returns>
    public display container displayInUseImage()
    {
        SymbolFontGlyphName symbol;

        if (this.InUseBy != BudgetPlanningConstants::emptyString)
        {
            symbol = ImageReferenceSymbol::InUse;
        }

        ImageReference imageReference = ImageReference::constructForSymbol(symbol);

        return imageReference.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current <c>BudgetPlanHeader</c> record can be deleted.
    /// </summary>
    /// <param name="_reportErrors">
    /// Indicates whether to generate log entries stating the reasons why the record cannot be deleted.
    /// </param>
    /// <returns>
    /// true if the budget plan can be deleted; otherwise, false.
    /// </returns>
    public boolean canDelete(boolean _reportErrors = true)
    {
        BudgetPlanningWorkflow  budgetPlanningWorkflow;
        boolean                 canDelete;

        canDelete = this.DocumentStatus == BudgetPlanStatus::Draft;

        if (canDelete)
        {
            // check workflow status
            canDelete = BudgetPlan::checkWorkflowStatusForDelete(this.WorkflowStatus, this.Name, FormDataUtil::isFormDataSource(this), _reportErrors);
        }

        if (canDelete)
        {
            // check if delete is restricted by workflow configuration
            budgetPlanningWorkflow = BudgetPlanningWorkflow::find(
                BudgetPlanningProcessAdministration::findByProcessOrganization(
                    this.BudgetPlanningProcess,
                    this.BudgetingOrganization).BudgetPlanningWorkflow);

            canDelete = !budgetPlanningWorkflow.RestrictDeleteBudgetPlan;
        }

        if (canDelete)
        {
            // check if this budget plan is referenced as a parent budget plan
            canDelete = !BudgetPlan::doesBudgetPlanHaveChild(this.RecId);
        }

        if (canDelete && this.RecId && (this.InUseBy != BudgetPlanningConstants::emptyString))
        {
            canDelete = !BudgetPlan::isUserBlocked(this);
        }

        return canDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>BudgetPlanHeader</c> can be submitted.
    /// </summary>
    /// <param name="_workflowType">
    /// A workflow type.
    /// </param>
    /// <returns>
    /// true if a <c>BudgetPlanHeader</c> can be submitted; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = BudgetPlanningConstants::emptyString)
    {
        boolean canSubmit =
            !BudgetPlan::isUserBlocked(this, true) && BudgetPlan::isReadyForReview(this.RecId);

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults a value for a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that corresponds with the field that is being defaulted.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        BudgetPlan budgetPlan;

        super(_fieldId);

        budgetPlan = BudgetPlan::construct();

        budgetPlan.parmBudgetPlanHeader(this);

        budgetPlan.defaultField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for the field values in a <c>BudgetPlanHeader</c> record.
    /// </summary>
    public void defaultRow()
    {
        BudgetPlan budgetPlan;

        super();

        budgetPlan = BudgetPlan::construct();
        budgetPlan.parmBudgetPlanHeader(this);

        budgetPlan.defaultRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBudgetCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget cycle name to be displayed, associated with the budget planning process.
    /// </summary>
    /// <returns>
    /// The budget cycle name; otherwise a blank string.
    /// </returns>
    public display BudgetPlanBudgetCycleName displayBudgetCycle()
    {
        return BudgetPlanHeader::getBudgetCycleName(this.BudgetPlanningProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkflowStatusImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the the current record in the <c>BudgetPlanHeader</c> table needs user action for workflow.
    /// </summary>
    /// <returns>
    /// The budget workflow status icon; otherwise, a blank icon.
    /// </returns>
    public display ImageRes displayWorkflowStatusImage()
    {
        #resAppl

        ImageRes                imageRes = 0;
        ListEnumerator          workItemEnumerator;
        WorkflowWorkItemTable   workItemTable;

        if (this.WorkflowStatus == BudgetPlanWorkflowStatus::NotSubmitted)
        {
            // Indicate to the user that a workflow action is needed.
            imageRes = #Image_BudgetWorkflowStatus;
        }
        else if (this.WorkflowStatus == BudgetPlanWorkflowStatus::Rejected
            || this.WorkflowStatus == BudgetPlanWorkflowStatus::InReview)
        {
            if (hasTableAccess(tableNum(WorkflowWorkItemTable))
                && hasTableAccess(tableNum(WorkflowWorkItemQueueAssignee)))
            {
                // Get the work items for this record to determine if an action is needed.
                workItemEnumerator = Workflow::findWorkItemsForCurrentUser(this).getEnumerator();

                while (workItemEnumerator.moveNext())
                {
                    workItemTable = WorkflowWorkItemTable::find(workItemEnumerator.current());

                    if (workItemTable.Type == WorkflowWorkItemType::WorkItem
                        || workItemTable.Type == WorkflowWorkItemType::Return
                        || workItemTable.Type == WorkflowWorkItemType::RequestChange)
                    {
                        // Indicate to the user that a workflow action is needed.
                        imageRes = #Image_BudgetWorkflowStatus;
                        break;
                    }
                }
            }
        }

        return imageRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the Legal entity identifider associated with the current <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <returns>
    /// The Legal entity identifier.
    /// </returns>
    public SelectableDataArea getLegalEntity()
    {
        BudgetPlanningProcess   budgetPlanningProcess;
        Ledger                  ledger;
        CompanyInfo             companyInfo;

        select firstOnly RecId from budgetPlanningProcess
            where budgetPlanningProcess.RecId == this.BudgetPlanningProcess
        join RecId from ledger
            where ledger.RecId == budgetPlanningProcess.Ledger
        join DataArea from companyInfo
            where companyInfo.RecId == ledger.PrimaryForLegalEntity;

        return companyInfo.DataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetPlanHeader</c> buffer.
    /// </summary>
    public void initValue(boolean _callDefault = true)
    {
        super();

        if (_callDefault)
        {
            this.defaultRow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>RecVersion</c> of a given <c>BudgetPlanHeader</c> buffer is current with the record on the database.
    /// </summary>
    /// <returns> true, if the buffer is current with the database; otherwise, false. </returns>
    public boolean isCurrent()
    {
        return BudgetPlanHeader::find(this.RecId).RecVersion == this.RecVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies or sets additional field values based on the modified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field identifier of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        BudgetPlan  budgetPlan;

        super(_fieldId);

        budgetPlan = BudgetPlan::construct();
        budgetPlan.parmBudgetPlanHeader(this);

        budgetPlan.modifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the title in the preview pane.
    /// </summary>
    /// <returns>
    /// Title field of the preview pane.
    /// </returns>
    public display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.DocumentNumber, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priorityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized name of the <c>BudgetPlanPriorityTranslation</c>
    /// from <c>BudgetPlanPriority</c> referenced.
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanPriorityName</c> value.
    /// </returns>
    public display BudgetPlanPriorityName priorityName()
    {
        BudgetPlanPriorityName budgetPlanPriorityName;

        if (hasTableAccess(tableNum(BudgetPlanPriority))
            && hasTableAccess(tableNum(BudgetPlanPriorityTranslation)))
        {
            budgetPlanPriorityName = BudgetPlanPriorityTranslation::getLocalizedName(this.BudgetPlanPriority);
        }

        return budgetPlanPriorityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized name of the <c>BudgetPlanningProcessTranslation</c>
    /// from <c>BudgetPlanningProcess</c> referenced.
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanningProcessName</c> value.
    /// </returns>
    public display BudgetPlanningProcessName processName()
    {
        BudgetPlanningProcessName budgetPlanningProcessName;

        if (hasTableAccess(tableNum(BudgetPlanningProcess))
            && hasTableAccess(tableNum(BudgetPlanningProcessTranslation)))
        {
            budgetPlanningProcessName = BudgetPlanningProcessTranslation::getLocalizedName(this.BudgetPlanningProcess);
        }

        return budgetPlanningProcessName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the Budget plan preparere
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanPreparerName</c> value.
    /// </returns>
    public display BudgetPlanningProcessName preparerName()
    {
        Name budgetPlanPreparerName;

        if (hasTableAccess(tableNum(DirPartyTable))
            && hasTableAccess(tableNum(HcmWorker)))
        {
            budgetPlanPreparerName = DirPartyTable::findRec(HcmWorker::find(this.BudgetPlanPreparer).Person).Name;
        }

        return budgetPlanPreparerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stageName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized name of the <c>BudgetPlanningStageTranslation</c>
    /// from <c>BudgetPlanningStage</c> referenced.
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanningStageName</c> value.
    /// </returns>
    public display BudgetPlanningStageName stageName()
    {
        BudgetPlanningStageName budgetPlanningStageName;

        if (hasTableAccess(tableNum(BudgetPlanningStage))
            && hasTableAccess(tableNum(BudgetPlanningStageTranslation)))
        {
            budgetPlanningStageName = BudgetPlanningStageTranslation::getLocalizedName(this.BudgetPlanningStage);
        }

        return budgetPlanningStageName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        BudgetPlanHeaderRecId   originalParentBudgetPlanHeaderRecId = this.orig().ParentBudgetPlanHeader;
        BudgetPlanLine          targetBudgetPlanLine;
        BudgetPlanLine          sourceBudgetPlanLine;

        if (this.orig().ParentBudgetPlanHeader != this.ParentBudgetPlanHeader)
        {
            // update attachment status based on modified parent
            BudgetPlanLoadAttachment::parentBudgetPlanHeaderModified(this);
        }

        super();

        if (originalParentBudgetPlanHeaderRecId && originalParentBudgetPlanHeaderRecId != this.ParentBudgetPlanHeader)
        {
            // If the child plan is updated to no longer be associated with a parent, then delete all lines on the parent that were aggregated from the current child.
            delete_from targetBudgetPlanLine
                where targetBudgetPlanLine.BudgetPlanHeader == originalParentBudgetPlanHeaderRecId
                exists join sourceBudgetPlanLine
                    where sourceBudgetPlanLine.BudgetPlanHeader == this.RecId
                        && sourceBudgetPlanLine.RecId == targetBudgetPlanLine.SourceBudgetPlanLine;

            // Clear the relationship between target lines on child from source lines on parent when we have lines that were distributed from parent to child.
            update_recordSet targetBudgetPlanLine
                setting sourceBudgetPlanLine = 0
                where targetBudgetPlanLine.BudgetPlanHeader == this.RecId
                exists join sourceBudgetPlanLine
                    where sourceBudgetPlanLine.BudgetPlanHeader == originalParentBudgetPlanHeaderRecId
                        && sourceBudgetPlanLine.RecId == targetBudgetPlanLine.SourceBudgetPlanLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = super();

        if (!this.canDelete(true))
        {
            isValid = checkFailed(strfmt("@Budget:BudgetPlan_Validation_CannotDeletePlan", this.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean     isValid;
        BudgetPlan  budgetPlan;

        budgetPlan = BudgetPlan::construct();
        budgetPlan.parmBudgetPlanHeader(this);

        isValid = super(_fieldIdToCheck)
            && budgetPlan.validateField(_fieldIdToCheck);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLayoutName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a <c>BudgetPlanLayoutName</c> value can be resolved to a record ID valid for the current <c>BudgetPlanHeader</c> table buffer.
    /// </summary>
    /// <param name = "_layoutName"> The <c>BudgetPlanLayoutName</c> value to validate. </param>
    /// <returns> true if the <c>BudgetPlanLayoutName</c> value is valid; otherwise, false. </returns>
    public boolean validateLayoutName(BudgetPlanLayoutName _layoutName)
    {
        boolean     isValid;
        BudgetPlan  budgetPlan;

        budgetPlan = BudgetPlan::construct();
        budgetPlan.parmBudgetPlanHeader(this);

        isValid = budgetPlan.validateLayoutName(_layoutName);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        // Check if the budget plan header can be created/updated
        isValid = super()
            && BudgetPlan::checkBudgetPlanHeaderForWrite(
                this.BudgetPlanningProcess,
                this.BudgetingOrganization,
                this.BudgetPlanningStage,
                this.BudgetPlanPreparer,
                this.BudgetPlanPriority,
                this.RecId);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanHeader</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        boolean ret = true;

        if (!BudgetPlanHeader::exist(_budgetPlanHeaderRecId))
        {
            ret = checkFailed(strFmt(BudgetPlanHeader::txtNotExist(), _budgetPlanHeaderRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BudgetPlanHeader</c> table exists.
    /// </summary>
    /// <param name='_budgetPlanHeaderRecId'>
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean exist(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        return (BudgetPlanHeader::find(_budgetPlanHeaderRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a record for the specified <c>BudgetPlanningProcess</c> record ID
    /// exists in the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of <c>BudgetPlanningProcess</c> record to use to find
    /// the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the record was found; otherwise, false.
    /// </returns>
    public static boolean existsForProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (_budgetPlanningProcessRecId)
        {
            select firstonly RecId from budgetPlanHeader
                where budgetPlanHeader.BudgetPlanningProcess == _budgetPlanningProcessRecId;
        }

        return budgetPlanHeader.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name='_budgetPlanHeaderRecId'>
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param  name='_forUpdate'>
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param  name='_concurrencyModel'>
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanHeader find(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (_budgetPlanHeaderRecId)
        {
            budgetPlanHeader.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanHeader.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanHeader
                where budgetPlanHeader.RecId == _budgetPlanHeaderRecId;
        }

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name="_documentNumber">
    /// The budget plan document number of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanHeader findByDocumentNumber(
        BudgetPlanDocumentNumber    _documentNumber,
        boolean                     _forupdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (_documentNumber)
        {
            budgetPlanHeader.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanHeader.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPlanHeader
                where budgetPlanHeader.DocumentNumber == _documentNumber;
        }
        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstChildBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name='_parentBudgetPlanHeaderRecId'>
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanHeader</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanHeader findFirstChildBudgetPlan(BudgetPlanHeaderRecId _parentBudgetPlanHeaderRecId)
    {
        BudgetPlanHeader childBudgetPlanHeader;

        if (_parentBudgetPlanHeaderRecId)
        {
            select firstonly childBudgetPlanHeader
                where childBudgetPlanHeader.ParentBudgetPlanHeader == _parentBudgetPlanHeaderRecId;
        }

        return childBudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCycleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget cycle name for the <c>BudgetPlanningProcess</c> reference.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// The budget cycle name.
    /// </returns>
    public static BudgetPlanBudgetCycleName getBudgetCycleName(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetCycleRecId            budgetCycleRecId;
        BudgetPlanBudgetCycleName   displayBudgetCycleName;

        if (_budgetPlanningProcessRecId)
        {
            budgetCycleRecId = BudgetPlanningProcess::find(_budgetPlanningProcessRecId).BudgetCycle;

            if (budgetCycleRecId)
            {
                displayBudgetCycleName = BudgetCycle::find(budgetCycleRecId).Name;
            }
        }

        return displayBudgetCycleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowStatusCountByOrgAndProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the count of budget plan document group by workflow status.
    /// </summary>
    /// <param name="_budgetingOrganizationRecId">
    /// The record ID of organization unit.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of <c>BudgetPlanningProcess</c> table.
    /// </param>
    /// <returns>
    /// A map containing the workflow status and the respective count for the budget plan document.
    /// </returns>
    public static Map getWorkflowStatusCountByOrgAndProcess(
        BudgetingOrganizationRecId _budgetingOrganizationRecId,
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanHeader budgetPlanHeader;
        Map              mapWorkflowStatusCount = new Map(Types::Enum, Types::Integer);

        if (_budgetingOrganizationRecId && _budgetPlanningProcessRecId)
        {
            while select count(RecId), WorkflowStatus from budgetPlanHeader
                group budgetPlanHeader.WorkflowStatus
                where budgetPlanHeader.BudgetingOrganization == _budgetingOrganizationRecId
                   && budgetPlanHeader.BudgetPlanningProcess == _budgetPlanningProcessRecId
            {
                mapWorkflowStatusCount.insert(budgetPlanHeader.WorkflowStatus, budgetPlanHeader.RecId);
            }
        }

        return mapWorkflowStatusCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDepartmentNameForCurrentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a <c>BudgetingDepartmentRecId</c> record ID for display.
    /// </summary>
    /// <returns>
    /// The <c>DirPartyName</c> extended data type of the department name.
    /// </returns>
    [SysClientCacheDataMethod(true)]
    public display DirPartyName displayDepartmentNameForCurrentHeader()
    {
        OMInternalOrganization omInternalOrganization;

        select firstOnly Name from omInternalOrganization
            where omInternalOrganization.RecId == this.BudgetingOrganization;

        return omInternalOrganization.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPreparerNameForCurrentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a <c>BudgetPlanPreparerRecId</c> record ID for display.
    /// </summary>
    /// <returns>
    /// The <c>DirPartyName</c> extended data type of the preparer name.
    /// </returns>
    [SysClientCacheDataMethod(true)]
    public display DirPartyName displayPreparerNameForCurrentHeader()
    {
        return HcmWorker::worker2Name(this.BudgetPlanPreparer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBudgetPlanPriorityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves and updates the budget plan priority name.
    /// </summary>
    /// <param name = "_set">A boolean indicating if the <c>BudgetPlanPriorityName</c> is being set.</param>
    /// <param name = "_budgetPlanHeader">The <c>BudgetPlanHeader</c> record buffer.</param>
    /// <param name = "_budgetPlanPriorityName">The value of the <c>BudgetPlanPriorityName</c> if being set.</param>
    /// <returns>The <c>BudgetPlanPriorityName</c> for the <c>BudgetPlanHeader</c>.</returns>
    public edit BudgetPlanPriorityName editBudgetPlanPriorityName(boolean _set, BudgetPlanHeader _budgetPlanHeader, BudgetPlanPriorityName _budgetPlanPriorityName)
    {
        BudgetPlanPriorityName        budgetPlanPriorityName;
        BudgetPlanPriorityTranslation budgetPlanPriorityTranslation;
        boolean                       isValid;

        if (hasTableAccess(tableNum(BudgetPlanPriority))
                && hasTableAccess(tableNum(BudgetPlanPriorityTranslation)))
        {
            if (_set)
            {
                if (_budgetPlanPriorityName)
                {
                    budgetPlanPriorityTranslation = BudgetPlanPriorityTranslation::findByLocalizedName(_budgetPlanPriorityName);

                    if (!budgetPlanPriorityTranslation.BudgetPlanPriority)
                    {
                        warning(strFmt("@SYS316757", "@GLS70080"));
                    }
                    else
                    {
                        this.BudgetPlanPriority = budgetPlanPriorityTranslation.BudgetPlanPriority;

                        isValid = this.validateField(fieldNum(BudgetPlanHeader, BudgetPlanPriority));

                        if (!isValid)
                        {
                            this.BudgetPlanPriority = 0;
                        }
                        else
                        {
                            budgetPlanPriorityName = budgetPlanPriorityTranslation.Name;
                        }

                        this.modifiedField(fieldNum(BudgetPlanHeader, BudgetPlanPriority));
                    }
                }
                else
                {
                    this.BudgetPlanPriority = 0;
                    budgetPlanPriorityName = _budgetPlanPriorityName;
                    this.modifiedField(fieldNum(BudgetPlanHeader, BudgetPlanPriority));
                }
            }
            else
            {
                if (_budgetPlanHeader.BudgetPlanPriority)
                {
                    budgetPlanPriorityName = BudgetPlanPriorityTranslation::getLocalizedName(_budgetPlanHeader.BudgetPlanPriority);
                }
            }
        }

        return budgetPlanPriorityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAssignedWorkflowUserForCurrentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of a work flow approver for display.
    /// </summary>
    /// <returns>
    ///     1. The name of the approver in case of single approver.
    ///     2. "Multiple users" text in case of multiple approvers.
    ///     3. Empty string in case if none is assigned.
    /// </returns>
    public display DirPartyName displayAssignedWorkflowUserForCurrentHeader()
    {
        return BudgetWorkflowHelper::getAssignedUsersTextToDisplay(this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DocumentNumber</c> field of the current <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <remarks>
    /// Should only be used within the <c>BudgetPlanEntity</c> class as it is used as a workaround for
    /// generating number sequences for new records.
    /// </remarks>
    public void setDocumentNumberSequence()
    {
        if  (!this.BudgetPlanningProcess)
        {
            throw error("@Budget:BudgetPlanning_Entity_UnknownProcess");
        }

        Ledger ledger = Ledger::find(BudgetPlanningProcess::find(this.BudgetPlanningProcess).Ledger);
        changecompany (CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(ledger.RecId)))
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this,
                fieldNum(BudgetPlanHeader, DocumentNumber),
                BudgetParameters::numRefBudgetPlanDocumentNumber());

            // Calling initValue will initiate the generation of a new number sequence value.
            this.initValue(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseDocumentNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the <c>DocumentNumber</c> number sequence for the current <c>BudgetPlanHeader</c> record.
    /// </summary>
    public void releaseDocumentNumberSequence()
    {
        if (this.DocumentNumber)
        {
            Ledger ledger = Ledger::find(BudgetPlanningProcess::find(this.BudgetPlanningProcess).Ledger);
            changecompany (CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(ledger.RecId)))
            {
                NumberSeq::releaseNumber(BudgetParameters::numRefBudgetPlanDocumentNumber().NumberSequenceId, this.DocumentNumber);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70089</DeveloperDocumentation>
	<FormRef>BudgetPlanView</FormRef>
	<Label>@GLS70075</Label>
	<SingularLabel>@GLS70070</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>DocumentNumber</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>DocumentNumberIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>DocumentNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPreparer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetPlan</Name>
			<Label>@GLS70358</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPreparer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetingOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentBudgetPlanHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanningUserGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetPlanDetails</Name>
			<Label>@GLS70358</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS312922</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningStage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsHistorical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rank</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@GLS70050</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@GLS70099</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowPreview</Name>
			<Label>@SYS319145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetingOrganization</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPreparer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningStage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workspaces</Name>
			<Label>@Budget:BudgetPlanning_FieldGroupWorkspace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanPreparer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPlanningStage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetingOrganization</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetingOrganizationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningProcess</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningProcessRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanningStage</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningStageRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanPreparer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanPreparerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetPlanPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanPriorityRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanDocumentNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetPlanStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsHistorical</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS70083</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentBudgetPlanHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanHeaderRecId</ExtendedDataType>
			<Label>@GLS70085</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PlanningUserGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanningUserGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Rank</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanRank</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>BudgetPlanWorkflowStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Layout</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanLayoutRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InUseBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@SYS127774</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NeedsUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@Budget:DescriptionColumnHeading</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RevenueSummary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@Budget:BudgetPlanning_RevenueSummary</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDescriptionIncluded</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@Budget:BudgetPlanningNarrativeFieldsCopyingHelp</HelpText>
			<Label>@Budget:BudgetPlanningIncludeDescriptionEnum</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRevenueSummaryIncluded</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@Budget:BudgetPlanningNarrativeFieldsCopyingHelp</HelpText>
			<Label>@Budget:BudgetPlanningIncludeSummaryEnum</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DocumentNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetPlanProcessNameIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanningProcess</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetPlanPreparerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetPlanPreparer</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BudgetingOrganizationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BudgetingOrganization</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParentBudgetPlanHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentBudgetPlanHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DocumentStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetingOrganization</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMInternalOrganization</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>OrganizationTheBudgetPlanBelongsTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetHeaderBeingCreatedForTheCurrentOrg</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetingOrganization</Name>
					<Field>BudgetingOrganization</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningProcess</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>CascadeRestricted</OnDelete>
			<RelatedTable>BudgetPlanningProcess</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetPlanningProcess</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPlanHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningProcess</Name>
					<Field>BudgetPlanningProcess</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanningStage</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanningStage</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CurrentStageInTheBudgetPlan</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPlan</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanningStage</Name>
					<Field>BudgetPlanningStage</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanPreparer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetPlanCreatingWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPlanHeaderBeingCreated</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanPreparer</Name>
					<Field>BudgetPlanPreparer</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetPlanPriority</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanPriority</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetPlanningPriority</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetPlanHeader</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetPlanPriority</Name>
					<Field>BudgetPlanPriority</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ParentBudgetPlanHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BudgetPlanHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsParentOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsChildOf</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentBudgetPlanHeader</Name>
					<Field>ParentBudgetPlanHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserGroupInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanningUserGroup</Name>
					<SourceEDT>BudgetPlanningUserGroup</SourceEDT>
					<Field>PlanningUserGroup</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>UserIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Layout</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetPlanLayout</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Layout</Name>
					<Field>Layout</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>