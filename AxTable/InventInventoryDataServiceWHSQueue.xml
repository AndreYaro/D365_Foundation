<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceWHSQueue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryDataServiceWHSQueue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertAllRecordsFromWHSInventReserve</Name>
				<Source><![CDATA[
    public static void insertAllRecordsFromWHSInventReserve()
    {
        WHSInventReserve whsInventReserve;
        InventInventoryDataServiceWHSQueue whsInventReserveQueue;
        whsInventReserveQueue.skipDataMethods(true);
        whsInventReserveQueue.skipDatabaseLog(true);
        whsInventReserveQueue.skipEvents(true);

        insert_recordset whsInventReserveQueue (ItemId, InventDimId, Company)
            select crosscompany ItemId, InventDimId, DataAreaId
                from whsInventReserve
                group by ItemId, InventDimId, DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countOfRecords</Name>
				<Source><![CDATA[
    internal display int64 countOfRecords()
    {
        return InventInventoryDataServiceWHSQueue::countOfWHSInventReserveQueueRecords() +
               InventInventoryDataServiceWHSQueueBackup::countOfWHSInventReserveQueueBackupRecords() -
               InventInventoryDataServiceParameters::find().PostedCountWHS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countOfWHSInventReserveQueueRecords</Name>
				<Source><![CDATA[
    internal static int countOfWHSInventReserveQueueRecords()
    {
        InventInventoryDataServiceWHSQueue WHSInventReserveQueue;
        select count(RecId) from WHSInventReserveQueue;
        return WHSInventReserveQueue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncate</Name>
				<Source><![CDATA[
    internal static void truncate()
    {
        SQLDataDictionary sqlDict = new SQLDataDictionary();

        new SQLDataDictionaryPermission(methodstr(SQLDataDictionary, tableTruncate)).assert();
        sqlDict.tableTruncate(tableNum(InventInventoryDataServiceWHSQueue), false);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanProcessedQueueData</Name>
				<Source><![CDATA[
    internal static void cleanProcessedQueueData(boolean _skipQueueLock, boolean _lockExist)
    {
        if (!_skipQueueLock || !_lockExist)
        {
            InventInventoryDataServiceWHSQueue::truncate();
        }
        else
        {
            InventInventoryDataServiceQueueProcessHelper::deleteStatusReady("InventInventoryDataServiceWHSQueue");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordsIntoTempTable</Name>
				<Source><![CDATA[
    internal static void insertRecordsIntoTempTable(boolean _skipQueueLock, boolean _lockExist)
    {
        InventInventoryDataServiceWHSQueueTemp    WHSInventReserveQueueTemp;
        InventInventoryDataServiceWHSQueue        WHSInventReserveQueue;

        if (_skipQueueLock)
        {
            if (_lockExist)
            {
                InventInventoryDataServiceQueueProcessHelper::updateStatusToReady("InventInventoryDataServiceWHSQueue");
            }
            else
            {
                update_recordset WHSInventReserveQueue setting ProcessStatus = InventInventoryDataServiceQueueRecordStatus::Ready
                    where WHSInventReserveQueue.ProcessStatus == InventInventoryDataServiceQueueRecordStatus::New;
            }

            insert_recordset whsInventReserveQueueTemp (ItemId, InventDimID, Company)
                select ItemId, InventDimId, Company
                    from WHSInventReserveQueue
                    group by ItemId, InventDimId, Company
                    where WHSInventReserveQueue.ProcessStatus == InventInventoryDataServiceQueueRecordStatus::Ready;
        }
        else
        {
            insert_recordset WHSInventReserveQueueTemp (ItemId, InventDimID, Company)
                select ItemId, InventDimId, Company
                    from WHSInventReserveQueue
                    group by ItemId, InventDimId, Company;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<ClusteredIndex></ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<PrimaryIndex></PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>LegalEntityDataAreaId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessStatus</Name>
			<EnumType>InventInventoryDataServiceQueueRecordStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OperationType</Name>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>InventInventoryDataServiceQueueOperationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>