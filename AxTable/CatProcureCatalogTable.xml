<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatProcureCatalogTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatProcureCatalogTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSetPublishingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is ok to set the PublishingStatus of this record to the given value.
    /// </summary>
    /// <param  name='_newStatus'>
    /// The new status to set this record to.
    /// </param>
    /// <returns>
    /// <c>true</c> if it is ok to set the PublishingStatus of this record to the given value; otherwise, <c>false</c>.
    /// </returns>
    boolean canSetPublishingStatus(ProcureCatalogPublishingStatus _newStatus)
    {
        // always allowed now that approval workflow is gone:
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneAndInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates this record, its navigation hierarchy, and all of the catalog customizations, to create
    ///    a new procurement catalog.
    /// </summary>
    /// <returns>
    ///    The duplicated instance of the <c>CatProcureCatalogTable</c> table data type.
    /// </returns>
    public CatProcureCatalogTable cloneAndInsert()
    {
        CatDisplayCategoryTable         tblDisplayCategoryOrig, tblDisplayCategoryDup;
        CatDisplayCategorySharedInfo    tblSharedDataOrig,      tblSharedDataDup;
        CatCatalogProductRelationType   tblCPRTorig,            tblCPRTdup;
        CatProcureCatalogPriceRange     tblCPRorig,             tblCPRdup;
        CatProcureCatalogTable          tblCatalogDup,          tmpCatalog;
        CatProcureCatalogTranslation    catalogTranslationOrig, catalogTranslationDup;
        CatDisplayCategoryTranslation   tblDisplayCategoryTranslationOrig;

        Map dcOrig_parentRecIdOrig  = new Map(Types::Record, Types::Int64); // alias included
        Map dcRecIdOrig_dcRecIdDup  = new Map(Types::Int64, Types::Int64); // alias included
        Map sdOrig_siDup            = new Map(Types::Record, Types::Record); // for non-alias nodes only
        Map aliasDCOrig_siOrig      = new Map(Types::Record, Types::Record);

        SetEnumerator setor;
        str     tmpName;
        int     baseIdx = 2;
        str     baseName;
        int     edtNameLen = new DictType(extendedTypeNum(Name)).stringLen();
        int     copyIdx;
        RecId   rid;

        ttsbegin;
            select forupdate RecId from tmpCatalog where tmpCatalog.RecId == this.RecId;

            // Clone catalog, set temporary name and insert
            // The inserted catalog record will be used as a reference in later logic
            tblCatalogDup = this.cloneRecord();
            for (copyIdx=baseIdx; copyIdx<Global::intMax(); copyIdx++)
            {
                tmpName = CatProcureCatalogTable::buildLimitedLenStrByTrimmingParam1(edtNameLen, "@SYS190950", tblCatalogDup.Name, int2str(copyIdx));
                if ( ! CatProcureCatalogTable::exist(tmpName))
                {
                    break;
                }
                else
                {
                    if (copyIdx == baseIdx)
                    {
                        baseName = tmpName;
                    }
                    else if (baseName == tmpName)
                    {
                        throw error(strFmt("@SYS190951",
                            tableId2name(tableNum(CatProcureCatalogTable)),
                            fieldId2name(tableNum(CatProcureCatalogTable), fieldNum(CatProcureCatalogTable, Name)),
                            tmpName,
                            copyIdx
                            ));
                    }
                }
            }
            tblCatalogDup.Name = tmpName;
            // insert would create DisplayCategory from ProcureCategory,
            // but we want to create DisplayCategory from the original Catalog's DisplayCategory
            tblCatalogDup.doInsert();

            // process CatProcureCatalogTranslation - including the one for SysTranslationHelper::getPrimaryLanguage() since we used doInsert() above
            while select LanguageId, WelcomeText
                from catalogTranslationOrig
                where catalogTranslationOrig.Catalog == this.RecId
            {
                catalogTranslationDup = CatProcureCatalogTranslation::createCatProcureCatalogTranslation(
                    tblCatalogDup.RecId,
                    catalogTranslationOrig.LanguageId,
                    catalogTranslationOrig.WelcomeText
                );
            }

            // NOTE: using "forupdate" even though we're not updating the "orig" nodes
            //     - we don't want some of the nodes updated while we're in the middle of cloning the tree.
            // NOTE: must order by TreeLevel so we call insert in top-down (ie, root first) fashion;
            //     otherwise we might insert child node before parent, causing failure in insert.
            while select forupdate * from tblDisplayCategoryOrig
                order by tblDisplayCategoryOrig.TreeLevel
                where tblDisplayCategoryOrig.Catalog == this.RecId
                join tblSharedDataOrig
                    where tblDisplayCategoryOrig.SharedData == tblSharedDataOrig.RecId
            {
                dcOrig_parentRecIdOrig.insert(tblDisplayCategoryOrig, tblDisplayCategoryOrig.ParentCategory);

                // we'll process the alias nodes after the WHILE loop above completes
                if (tblDisplayCategoryOrig.TargetCategory != 0)
                {
                    aliasDCOrig_siOrig.insert(tblDisplayCategoryOrig, tblSharedDataOrig);
                }
                else
                {
                    tblSharedDataDup = tblSharedDataOrig.cloneAndInsert(tblDisplayCategoryOrig.UpdateType, tblSharedDataOrig.Category);
                    sdOrig_siDup.insert(tblSharedDataOrig, tblSharedDataDup);

                    tblDisplayCategoryDup = tblDisplayCategoryOrig.cloneRecord(tblSharedDataDup);
                    tblDisplayCategoryDup.Catalog = tblCatalogDup.RecId;
                    if (tblDisplayCategoryDup.TreeLevel > CatDisplayCategoryTable::treeLevelForRoot())
                    {
                        tblDisplayCategoryDup.ParentCategory = dcRecIdOrig_dcRecIdDup.lookup(dcOrig_parentRecIdOrig.lookup(tblDisplayCategoryOrig));
                    }
                    tblDisplayCategoryDup.insert();
                    //clone translated data for the DC in all languages
                    tblDisplayCategoryTranslationOrig.cloneTranslationRecords(tblDisplayCategoryOrig.RecId,tblDisplayCategoryDup.RecId);
                    dcRecIdOrig_dcRecIdDup.insert(tblDisplayCategoryOrig.RecId, tblDisplayCategoryDup.RecId);
                }
            }

            // Clone catalog product relation types
            while select * from tblCPRTorig
                where tblCPRTorig.Catalog == this.RecId
            {
                tblCPRTdup = tblCPRTorig.cloneRecord(tblCatalogDup);
                tblCPRTdup.insert();
            }

            // Clone catalog price ranges
            while select * from tblCPRorig
                where tblCPRorig.ProcureCatalog == this.RecId
            {
                tblCPRdup = tblCPRorig.cloneRecord(tblCatalogDup);
                tblCPRdup.insert();
            }

            // process the alias nodes after the WHILE loop above completes
            setor = aliasDCOrig_siOrig.keySet().getEnumerator();
            while (setor.moveNext())
            {
                tblDisplayCategoryOrig = setor.current();
                Debug::assert(tblDisplayCategoryOrig.TargetCategory); // alias must have non-0 TargetCategory
                rid = dcRecIdOrig_dcRecIdDup.lookup(tblDisplayCategoryOrig.TargetCategory);
                Debug::assert(rid); // new TargetCategory must be non-0
                tblDisplayCategoryDup = tblDisplayCategoryOrig.cloneRecord(sdOrig_siDup.lookup(aliasDCOrig_siOrig.lookup(tblDisplayCategoryOrig)), rid);
                tblDisplayCategoryDup.Catalog = tblCatalogDup.RecId;
                tblDisplayCategoryDup.ParentCategory = dcRecIdOrig_dcRecIdDup.lookup(dcOrig_parentRecIdOrig.lookup(tblDisplayCategoryOrig));
                tblDisplayCategoryDup.insert();
                //clone translated data for the DC in all languages
                tblDisplayCategoryTranslationOrig.cloneTranslationRecords(tblDisplayCategoryOrig.RecId,tblDisplayCategoryDup.RecId);
            }
        ttscommit;

        return tblCatalogDup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new record in the <c>CatProcureCatalogTable</c> table by duplicating this record.
    /// </summary>
    /// <returns>
    ///    The new instance of the <c>CatProcureCatalogTable</c> data type.
    /// </returns>
    /// <remarks>
    ///    The cloned record is not inserted into the database.
    /// </remarks>
    public CatProcureCatalogTable cloneRecord()
    {
        CatProcureCatalogTable tblCatalogDup;

        tblCatalogDup.clear();
        tblCatalogDup.ProcurementHierarchy = this.ProcurementHierarchy;
        tblCatalogDup.Description = this.Description;
        tblCatalogDup.Name = this.Name; // don't clone
        tblCatalogDup.Owner = this.Owner;
        tblCatalogDup.PublishDateTime = DateTimeUtil::minValue(); // don't clone
        tblCatalogDup.PublishingStatus = ProcureCatalogPublishingStatus::Inactive; // don't clone
        tblCatalogDup.UpdateType = this.UpdateType;
        tblCatalogDup.SingleGridPageSize = this.SingleGridPageSize;
        tblCatalogDup.MultipleGridPageSize = this.MultipleGridPageSize;

        return tblCatalogDup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatalogNameTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the selected catalog.
    /// </summary>
    /// <returns>
    /// The <c>Name</c> value of the catalog.
    /// </returns>
    display Name getCatalogNameTitle()
    {
        Name catalogName = strFmt("@SYS327590", "@SYS89156", this.Name);

        return catalogName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        #CatDisplayCategory
        super();

        this.UpdateType = CatProcureCatalogUpdateType::Both;
        this.SingleGridPageSize = #CatDisplayCategory_SingleGridPageSize;
        this.MultipleGridPageSize = #CatDisplayCategory_MultipleGridPageSize;
        this.initFromProcurementHierarchy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        super();

        if (this.ProcurementHierarchy)
        {
            CatDisplayCategoryTable::createDisplayCategoryTree(this, EcoResCategoryHierarchy::find(this.ProcurementHierarchy));
        }
        else
        {
            var displayCategoryUpdateType = CatProcureCatalogTable::catalogToDisplayCategoryUpdateType(this.UpdateType);

            CatDisplayCategorySharedInfo tblSharedData;
            tblSharedData.clear();
            tblSharedData.initValue();
            tblSharedData.initMore(displayCategoryUpdateType, null);
            tblSharedData.insert();

            var tblDCategory = CatDisplayCategoryTable::initDisplayCategory(this, strFmt("@SYS137284", this.Name), null, tblSharedData, displayCategoryUpdateType);
            // insert method will take care of setting NestedSet values and TreeLevel
            tblDCategory.insert();
        }

        CatProcureCatalogTranslation::createCatProcureCatalogTranslation(this.RecId, SysTranslationHelper::getPrimaryLanguage());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPublishingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PublishingStatus</c> and <c>PublishDateTime</c> of this record.
    /// </summary>
    /// <param  name='_status'>
    /// The new status to set this record to.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was actually updated; otherwise, <c>false</c>.
    /// </returns>
    boolean setPublishingStatus(ProcureCatalogPublishingStatus _status)
    {
        boolean updateOccurred = false;
        CatProcureCatalogTable tmpCatalog;

        ttsbegin;
            // select forupdate now so we can still enforce the business rules.
            // NOTE:
            // 	"this.selectForUpdate(true)" will have locking effect ONLY after this record has been queried again next time (ie, not after the call)
            // 	"select forupdate this" WILL change this to the first record in the table - do NOT call it!
            select forupdate * from tmpCatalog where tmpCatalog.RecId == this.RecId;

            if (this.PublishingStatus!=_status)
            {
                if (this.canSetPublishingStatus(_status))
                {
                    updateOccurred = true;
                    this.PublishingStatus = _status;
                    if (_status == ProcureCatalogPublishingStatus::Active)
                    {
                        this.PublishDateTime = DateTimeUtil::utcNow();
                    }
                    else
                    {
                        this.PublishDateTime = DateTimeUtil::minValue();
                    }
                }
            }

            if (updateOccurred)
            {
                this.update();
            }
        ttscommit;

        return updateOccurred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDisplayCategoryUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>CatProcureCatalogUpdateType</c> enumeration type to the <c>UpdateType</c>
    /// enumeration type.
    /// </summary>
    /// <returns>
    /// The <c>UpdateType</c> enumeration type that matches the update type of the catalog.
    /// </returns>
    public UpdateType toDisplayCategoryUpdateType()
    {
        return CatProcureCatalogTable::catalogToDisplayCategoryUpdateType(this.UpdateType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trySetPublishingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the publishing status to the specified value.
    /// </summary>
    /// <param name="_newStatus">
    /// The new status.
    /// </param>
    /// <returns>
    /// true if new status was set and persisted to database successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method calls the <c>canSetPublishingStatus</c> method first, and, if true, calls the
    /// <c>setPublishingStatus</c> method.An informational message will be shown if true is to be returned;
    /// otherwise, a warning message will be shown.
    /// </remarks>
    public boolean trySetPublishingStatus(ProcureCatalogPublishingStatus _newStatus)
    {
        boolean canSetPublishingStatus = this.canSetPublishingStatus(_newStatus);
        boolean updateOccurred = false;

        if (canSetPublishingStatus)
        {
            updateOccurred = this.setPublishingStatus(_newStatus);
            if (updateOccurred)
            {
                info(strFmt("@SCM:ProcurementCatalogPublishMessage", this.Name, (_newStatus == ProcureCatalogPublishingStatus::Active ? "@SYS190971" : "@SYS190972")));
            }
        }
        else
        {
            warning("@SYS133624");
        }

        return updateOccurred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CatDisplayCategoryTable tblDCategory;
        UpdateType              newDisplayCategoryUpdateType;

        ttsbegin;
            // ------------------------------------------------------------
            // |O \ N|  S  |  D  |  M  |
            // O=Old, N=New, S=Static, D=Dynamic, M=Both/Mixed
            // ------------------------------------------------------------
            // |  S  |  -  | S2D | S2M |
            // |  D  | D2S |  -  | D2M |
            // |  M  | M2S | M2D |  -  |
            // ------------------------------------------------------------

            // if UpdateType changed, and not changed to Both...
            if (    (this.UpdateType != this.orig().UpdateType)
                && (this.UpdateType != CatProcureCatalogUpdateType::Both)
            )
            {
                newDisplayCategoryUpdateType = CatProcureCatalogTable::catalogToDisplayCategoryUpdateType(this.UpdateType);

                // if CatDisplayCategoryTable.UpdateType changed from Static to Dynamic, update
                //   CatDisplayCategorySharedInfo.LastSyncTime
                //   CatDisplayCategoryTable.UpdateType
                // NOTE: CatDisplayCategoryTable.update() internally will update the corresponding CatDisplayCategorySharedInfo records.
                //  Thus we must not call CatDisplayCategorySharedInfo.update
                //  - this would cause this error:
                //      An update conflict occurred due to another user process deleting the record or changing one or more fields in the record.
                while select forupdate * from tblDCategory
                    where tblDCategory.Catalog == this.RecId
                         && tblDCategory.UpdateType != newDisplayCategoryUpdateType

                {
                    tblDCategory.UpdateType = newDisplayCategoryUpdateType;
                    tblDCategory.update();
                }
            }

            super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        CatProcureCatalogTable tblCatalogFromDB;

        ret = super();

        select forupdate firstonly PublishingStatus from tblCatalogFromDB where tblCatalogFromDB.RecId == this.RecId;
        if (tblCatalogFromDB.PublishingStatus == ProcureCatalogPublishingStatus::Active)
        {
            error("@SYS136857");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        #CatDisplayCategory

        boolean ret;
        utcdatetime now = DateTimeUtil::utcNow();

        ret = super();

        //Validate the page size before saving. Valid page size is 2+.
        if (this.SingleGridPageSize < #CatDisplayCategory_MinimumGridPageSize)
        {
            error(strFmt("@SYS310118", #CatDisplayCategory_MinimumGridPageSize));
            ret = false;
        }

        if (!this.ProcurementHierarchy)
        {
            ret = checkFailed("@SYS136033");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLimitedLenStrByTrimmingParam1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a string using the given formatter and given parameters,
    /// with length possibly, but not guaranteed, to be no more than given limit.
    /// </summary>
    /// <param  name='_lenLimit'>
    /// The soft length limit.
    /// </param>
    /// <param  name='_formatter'>
    /// The formatter for the resulting string.
    /// </param>
    /// <param  name='_param1'>
    /// The first parameter to feed to the formatter for the resulting string.
    /// </param>
    /// <param  name='_param2'>
    /// The second parameter to feed to the formatter for the resulting string.
    /// </param>
    /// <returns>
    /// A string generated using the given formatter and given parameters.
    /// </returns>
    public static str buildLimitedLenStrByTrimmingParam1(int _lenLimit, str _formatter, str _param1, anytype _param2)
    {
        str result = strFmt(_formatter, _param1, _param2);
        int tooLongBy;
        str shortParam1;

        // if too long, we'll trim from the end of _param1
        if (strLen(result) > _lenLimit)
        {
            tooLongBy = (strLen(result) - _lenLimit);
            shortParam1 = subStr(_param1, 1, ((strLen(_param1) >= tooLongBy) ? (strLen(_param1) - tooLongBy) : 0));
            result = strFmt(_formatter, shortParam1, _param2);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPreview</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if preview of the given catalog is OK.
    /// </summary>
    /// <param  name='_catProcureCatalogTableRecId'>
    ///   The record ID of the catalog to check.
    /// </param>
    /// <param  name='_catProcureCatalogTableOwner'>
    ///   The owner of the catalog to check.
    /// </param>
    /// <param  name='_isEPinstalled'>
    ///   A boolean indicating if EP is installed.
    /// </param>
    /// <returns>
    ///   True if EP is enabled on the client, and the current user is the owner.
    /// </returns>
    /// <remarks>
    ///   If this method is called repeatedly, user can improve perforance by
    ///   caching the result for the <c>_isEPinstalled</c> parameter
    ///   and passing the value.
    /// </remarks>
    //    This method does not take a CatProcureCatalogTable so caller does not
    //    have to select all fields.
    public static boolean canPreview(
        RecId   _catProcureCatalogTableRecId,
        RecId   _catProcureCatalogTableOwner,
        boolean _isEPinstalled = false
    )
    {
        DirPersonUser personUser = DirPersonUser::find(curUserId());
        // enabled iff
        // - EP is installed
        // - curuser is Owner
        boolean result = (
                _catProcureCatalogTableRecId
            &&  _isEPinstalled
            &&  personUser.RecId
            &&  _catProcureCatalogTableOwner   // in case both PersonParty & Owner are 0
            &&  (personUser.PersonParty == _catProcureCatalogTableOwner)
        );
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catalogToDisplayCategoryUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Converts a value of <c>CatProcureCatalogUpdateType</c> type to that of <c>UpdateType</c> type.
    /// </summary>
    /// <param  name='_catalogUpdateType'>
    ///   An instance of the <c>CatProcureCatalogUpdateType</c> data type.
    /// </param>
    /// <param  name='_defaultDisplayCategoryUpdateType'>
    ///   The value to use when <paramref>_catalogUpdateType</paramref> is not convertible to a <c>UpdateType</c> value.
    /// </param>
    /// <returns>
    ///   An instance of the <c>UpdateType</c> data type matching the input.
    /// </returns>
    /// <remarks>
    ///    If no match is found for the catalog's update type, we favor the given _defaultDisplayCategoryUpdateType which defaults to Static.
    /// </remarks>
    public static UpdateType catalogToDisplayCategoryUpdateType(
        CatProcureCatalogUpdateType    _catalogUpdateType,
        UpdateType                     _defaultDisplayCategoryUpdateType = UpdateType::Static
    )
    {
        UpdateType result;

        switch (_catalogUpdateType)
        {
            case CatProcureCatalogUpdateType::Static:
                result = UpdateType::Static;
                break;
            case CatProcureCatalogUpdateType::Dynamic:
                result = UpdateType::Dynamic;
                break;
            default:
                result = _defaultDisplayCategoryUpdateType;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given <c>_name</c> of type <c>Name</c> exists.
    /// </summary>
    /// <param  name='_name'>
    /// An instance of the <c>Name</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean checkExist(Name _name)
    {
        if (!CatProcureCatalogTable::exist(_name))
        {
            return checkFailed(strFmt(CatProcureCatalogTable::txtNotExist(), _name));
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given <c>_name</c> of type <c>Name</c> exists.
    /// </summary>
    /// <param  name='_name'>
    /// An instance of the <c>Name</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    public static boolean exist(Name _name)
    {
        return (CatProcureCatalogTable::find(_name).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record that matches the given <c>Name</c> of type <c>_name</c>.
    /// </summary>
    /// <param  name='_name'>
    /// An instance of the <c>Name</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatProcureCatalogTable</c> data type.
    /// </returns>
    public static CatProcureCatalogTable find(Name _name, boolean _forUpdate = false)
    {
        CatProcureCatalogTable tblCatProcureCatalogTable;

        if (_name)
        {
            tblCatProcureCatalogTable.selectForUpdate(_forUpdate);

            select firstonly * from tblCatProcureCatalogTable
                where tblCatProcureCatalogTable.Name == _name;
        }

        return tblCatProcureCatalogTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record that matches the given <c>RecId</c>.
    /// </summary>
    /// <param  name='_recId'>
    /// An instance of the <c>RecId</c> data type.
    /// </param>
    /// <param  name='_forUpdate'>
    /// An instance of the boolean data type.
    /// </param>
    /// <returns>
    /// An instance of the <c>CatProcureCatalogTable</c> data type.
    /// </returns>
    public static CatProcureCatalogTable findByRecId( RecId _recId,
        boolean _forUpdate = false )
    {
        CatProcureCatalogTable catProcureCatalogTable;

        catProcureCatalogTable.selectForUpdate(_forUpdate);

        select catProcureCatalogTable
            where catProcureCatalogTable.RecId == _recId;

        return catProcureCatalogTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPersonForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in <c>DirPerson</c> for the current user.
    /// </summary>
    /// <param  name='_showMsgIfNotFound'>
    /// A boolean value that indicates if an AX infomational message should be shown when a record is not found.
    /// </param>
    /// <returns>
    /// An instance of the <c>DirPerson</c> data type for the current user.
    /// </returns>
    /// <remarks>
    /// An info message is shown if no record is found.
    /// </remarks>
    public static DirPerson findPersonForCurrentUser(boolean _showMsgIfNotFound = true)
    {
        DirPersonUser dirPersonUser = DirPersonUser::current();
        DirPerson dirPerson = DirPerson::find(dirPersonUser.PersonParty);
        if (( ! dirPerson.RecId) && (_showMsgIfNotFound))
        {
            info(strFmt("@SYS137282", curUserId(), curext()));
        }
        return dirPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProcurementHierarchy</Name>
				<Source><![CDATA[
    public static EcoResCategoryHierarchy findProcurementHierarchy(boolean _forUpdate = false)
    {
        EcoResCategoryHierarchy procureHierarchy = CatProcureCatalogTable::findProcurementHierarchyNoWarning(_forUpdate);

        if (!procureHierarchy.RecId)
        {
            warning("@SYS136033");
        }

        return procureHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProcurementHierarchyNoWarning</Name>
				<Source><![CDATA[
    private static EcoResCategoryHierarchy findProcurementHierarchyNoWarning(boolean _forUpdate = false)
    {
        EcoResCategoryHierarchy procureHierarchy;
        EcoResCategoryHierarchyRole role;

        procureHierarchy.selectForUpdate(_forUpdate);

        select * from procureHierarchy
            join RecId from role
                where role.CategoryHierarchy == procureHierarchy.RecId
                    && role.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement;

        return procureHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static str txtNotExist()
    {
        return "@SYS131159";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastSyncTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LastSyncTime</c> value to todays date.
    /// </summary>
    /// <param name="_catalogRecid">
    /// The record ID of the catalog.
    /// </param>
    /// <remarks>
    /// By using this value it will populate the values in EP procurement site. It will update the
    /// <c>LastSyncTime</c> value for the complete catalog.
    /// </remarks>
    public static void updateLastSyncTime(RefRecId _catalogRecid)
    {
        CatDisplayCategoryTable         catDisplayCategoryTable;
        CatDisplayCategorySharedInfo    catDisplayCategorySharedInfo;

        ttsbegin;
        // Update the LastSyncTime value to now, based upon this value it will populate the values in EP Procurement site.
        while select UpdateType, SharedData from catDisplayCategoryTable where catDisplayCategoryTable.UpdateType == UpdateType::Static
            join forupdate catDisplayCategorySharedInfo
            where catDisplayCategorySharedInfo.RecId == catDisplayCategoryTable.SharedData && catDisplayCategoryTable.Catalog == _catalogRecid
        {
            catDisplayCategorySharedInfo.LastSyncTime = DateTimeUtil::utcNow();
            catDisplayCategorySharedInfo.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePublishDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PublishDateTime</c> field on passed <c>CatProcureCatalogTable</c> record by ID.
    /// </summary>
    /// <param name="_catalogRecId">
    /// The record ID of the catalog.
    /// </param>
    public static void updatePublishDateTime(RefRecId _catalogRecId)
    {
        CatProcureCatalogTable      catalog;

        ttsbegin;
        catalog = CatProcureCatalogTable::findByRecId(_catalogRecId, true);

        if (catalog.RecId)
        {
            catalog.PublishDateTime = DateTimeUtil::utcNow();
            catalog.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProcurementHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the catalog record from the procurement hierarchy.
    /// </summary>
    public void initFromProcurementHierarchy()
    {
        this.ProcurementHierarchy = CatProcureCatalogTable::findProcurementHierarchyNoWarning().RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS130983</DeveloperDocumentation>
	<Label>@SYS130982</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>PublishingStatus</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatDisplayCategoryTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatDisplayCategoryTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishingStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpdateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishingStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpdateType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementHierarchy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UpdateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PageSize</Name>
			<Label>@SYS76593</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MultipleGridPageSize</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SingleGridPageSize</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PublishingStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PublishDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AttributeDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MultipleGridPageSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS191025</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Owner</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS77709</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>PublishDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatalogPublishDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PublishingStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProcureCatalogPublishingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SingleGridPageSize</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
			<Label>@SYS191023</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpdateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CatProcureCatalogUpdateType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProcurementHierarchyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProcurementHierarchy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPerson_Owner</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DirPerson</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>DirPerson_CatProcureCatalogTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Owner</Name>
					<Field>Owner</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcurementHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategoryHierarchy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategoryHierarchy_CatProcureCatalogTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementHierarchy</Name>
					<Field>ProcurementHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HcmWorker_Owner</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Owner</Name>
					<Field>Owner</Field>
					<RelatedField>Person</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>