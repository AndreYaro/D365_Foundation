<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUOMSeqGroupTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSUOMSeqGroupTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds next line number.
	/// </summary>
	/// <returns>
	/// The next line number.
	/// </returns>
    public LineNum nextLineNum()
    {
        return (select firstonly maxof(LineNum) from whsuomSeqGroupLine
                        where whsuomSeqGroupLine.uomSeqGroupId == this.uomSeqGroupId).LineNum + 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>whsuomSeqGroupTable</c> record exists.
	/// </summary>
	/// <param name="_seqGroupId">
	/// Sequence group id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    static boolean exist(WHSUOMSeqGroupId _seqGroupId)
    {
        return _seqGroupId && (select firstonly RecId from whsuomSeqGroupTable
             where whsuomSeqGroupTable.uomSeqGroupId == _seqGroupId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relevant sequence group form for the specified sequence group ID.
    /// </summary>
    /// <param name="_seqGroupId">
    /// The sequence group ID for which the form is opened.
    /// </param>
    [Hookable(false)]
    public static void jumpRef(WHSUOMSeqGroupId _seqGroupId)
    {
        Args                            args            = new Args();
        MenuFunction                    menuFunction;
        menuFunction = new MenuFunction(menuitemDisplayStr(WHSUOMSeqGroupTable), MenuItemType::Display);
        args.lookupRecord(WHSUOMSeqGroupTable::find(_seqGroupId));
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSUOMSeqGroupTable</c> record with given parameters.
	/// </summary>
	/// <param name="_seqGroupId">
	/// Sequence group id of the record.
	/// </param>
	/// <param name="_update">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    static WHSUOMSeqGroupTable find(WHSUOMSeqGroupId _seqGroupId, boolean _update = false)
    {
        WHSUOMSeqGroupTable seqGroupTable;

        if (_seqGroupId)
        {
            seqGroupTable.selectForUpdate(_update);

            select firstonly seqGroupTable
                where seqGroupTable.uomSeqGroupId == _seqGroupId;
        }

        return seqGroupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultProdUOM</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds default UOM to be used for the production order.
	/// </summary>
	/// <param name="_itemId">
	/// Id of the production order.
	/// </param>
	/// <returns>
	/// The default UOM to be used for the production order.
	/// </returns>
    static UnitOfMeasureSymbol getDefaultProdUOM(ItemId  _itemId)
    {
        WHSUOMSeqGroupLine  seqGroupLine;

        select firstonly UnitId from seqGroupLine
            where seqGroupLine.uomSeqGroupId     == WHSInventTable::find(_itemId).uomSeqGroupId   &&
                  seqGroupLine.DefaultProdUnitId == NoYes::Yes;

        return seqGroupLine.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPurchUOM</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the default UOM to be used for the purchase order.
	/// </summary>
	/// <param name="_itemId">
	/// Id of the purchase order.
	/// </param>
	/// <returns>
	/// The default UOM to be used.
	/// </returns>
    static UnitOfMeasureSymbol getDefaultPurchUOM(ItemId  _itemId)
    {
        WHSUOMSeqGroupLine  seqGroupLine;

        if (_itemId)
        {
            select firstonly UnitId from seqGroupLine
                where seqGroupLine.uomSeqGroupId         == WHSInventTable::find(_itemId).uomSeqGroupId   &&
                      seqGroupLine.DefaultPurchUnitId    == NoYes::Yes;
        }

        return seqGroupLine.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxUOM</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds largest UOM to be used for an item.
	/// </summary>
	/// <param name="_itemId">
	/// Id of the item.
	/// </param>
	/// <returns>
	/// Largest UOM to be used.
	/// </returns>
    public static WHSUOMSeqGroupLine getMaxUOM(ItemId _itemId)
    {
        WHSUOMSeqGroupId    uomSeqGroupId;
        WHSUOMSeqGroupLine  seqGroupLine;

        uomSeqGroupId = WHSInventTable::find(_itemId).uomSeqGroupId;

        select seqGroupLine order by LineNum desc
            where seqGroupLine.uomSeqGroupId == uomSeqGroupId;

        return seqGroupLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCycleCountUOM</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checjs whether a sequence group has a cycle count UOM.
	/// </summary>
	/// <param name="_seqGroupId">
	/// Sequence group id of the record.
	/// </param>
	/// <returns>
	/// True if the sequence group has cycle count UOM.
	/// </returns>
    static boolean hasCycleCountUOM(WHSUOMSeqGroupId    _seqGroupId)
    {
        return (select firstonly RecId from whsuomSeqGroupLine
                    where whsuomSeqGroupLine.uomSeqGroupId == _seqGroupId &&
                          whsuomSeqGroupLine.CycleCountUOM == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultMaterialConsumpUOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves a default unit id to be used during registering consumption.
    /// </summary>
    /// <param name="_itemId">
    ///  The item id.
    /// </param>
    /// <returns>
    ///  Returns the default unit id.
    /// </returns>
    public static UnitOfMeasureSymbol getDefaultMaterialConsumpUOM(ItemId _itemId)
    {
        WHSUOMSeqGroupLine  seqGroupLine;
        WHSUOMSeqGroupId    uomSeqGroupId;

        uomSeqGroupId = WHSInventTable::find(_itemId).uomSeqGroupId;

        select firstonly UnitId from seqGroupLine
            where seqGroupLine.uomSeqGroupId                == uomSeqGroupId
            &&    seqGroupLine.DefaultMaterialConsumpUnitId == NoYes::Yes;

        return seqGroupLine.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCycleCountUOMExistsForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether item's sequence group has a cycle count UOM.
    /// </summary>
    /// <param name="_itemId">
    /// The item being checked.
    /// </param>
    public static void validateCycleCountUOMExistsForItem(ItemId _itemId)
    {
        if (!WHSUOMSeqGroupTable::hasCycleCountUOM(WHSInventTable::find(_itemId).uomSeqGroupId))
        {
            throw error("@WAX:InvalidUOMForCycleCount");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestUnitSequenceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds lowest <c>WHSUOMSeqGroupLine</c> line of the sequence group.
    /// </summary>
    /// <param name="_sequenceGroupId">
    /// Id of the sequence group.
    /// </param>
    /// <returns>
    /// The lowest <c>WHSUOMSeqGroupLine</c> line of the sequence group.
    /// </returns>
    public static WHSUOMSeqGroupLine lowestUnitSequenceLine(WHSUOMSeqGroupId _sequenceGroupId)
    {
        WHSUOMSeqGroupLine  seqGroupLine;
        select firstonly seqGroupLine
            order by LineNum asc
            where seqGroupLine.uomSeqGroupId == _sequenceGroupId;

        return seqGroupLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceGroupForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a unit of measure sequence group is valid for an item.
    /// </summary>
    /// <param name = "_itemId">Item ID to validate.</param>
    /// <param name = "_sequenceGroupId">Unit of measure sequence group ID to check.</param>
    /// <returns>true if the unit of measure sequence group is valid for the item; otherwise, false.</returns>
    public static boolean validateSequenceGroupForItem(ItemId _itemId, WHSUOMSeqGroupId _sequenceGroupId)
    {
        return WHSUOMSeqGroupTable::validateSequenceGroupForParameters(_itemId, _sequenceGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSequenceGroupForParameters</Name>
				<Source><![CDATA[
    internal static boolean validateSequenceGroupForParameters(
        ItemId              _itemId,
        WHSUOMSeqGroupId    _sequenceGroupId,
        UnitOfMeasureSymbol _inventoryUnitSymbol = '')
    {
        boolean ret = true;

        WHSUOMSeqGroupLine seqGroupLine = WHSUOMSeqGroupTable::lowestUnitSequenceLine(_sequenceGroupId);
        
        if (!seqGroupLine)
        {
            ret = checkFailed("@WAX351");
        }
        else
        {
            if (WHSCatchWeightHelper::isCatchWeightProduct(InventTable::find(_itemId).Product))
            {
                PdsCatchWeightItem pdsCatchWeightItem = PdsCatchWeightItem::find(_itemId);
                PdsCWUnitId cwUnitId = pdsCatchWeightItem.PdsCWUnitId;
                const int minWeight = 1; // represents the minimum allowed weight of a warehouse enabled catch weight item

                if (cwUnitId != seqGroupLine.UnitId)
                {
                    ret = checkFailed(strFmt("@WAX:Error_SeqGroupUnitDoesNotMatchCWItemUnit", _itemId));
                }
                else
                {
                    UnitOfMeasure cwUOM = UnitOfMeasure::findBySymbol(cwUnitId);

                    if (!WHSUOMSeqGroupTable::isWholeUOMSequenceInCWUnitConversionClass(_sequenceGroupId, cwUOM.UnitOfMeasureClass))
                    {
                        ret = checkFailed(strFmt("@WAX:UOMSeqAssignment_DoesNotMatchCatchWeightUnitOfMeasureClass", cwUOM.UnitOfMeasureClass, cwUnitId));
                    }
                }
            }
            else if (!_inventoryUnitSymbol)
            {
                InventTableModule inventTableModule;
                select firstonly inventTableModule
                    where inventTableModule.ModuleType  == ModuleInventPurchSales::Invent &&
                          inventTableModule.ItemId      == _itemId &&
                          inventTableModule.UnitId      == seqGroupLine.UnitId;

                if (!inventTableModule)
                {
                    ret = checkFailed("@WAX352");
                }
            }
            else if (_inventoryUnitSymbol != seqGroupLine.UnitId)
            {
                ret = checkFailed("@WAX352");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWholeUOMSequenceInCWUnitConversionClass</Name>
				<Source><![CDATA[
    private static boolean isWholeUOMSequenceInCWUnitConversionClass(WHSUOMSeqGroupId _seqGroupId, UnitOfMeasureClass _cwUnitOfMeasureClass)
    {
        WHSUOMSeqGroupLine uomSeqGroupLine;
        UnitOfMeasure unitofMeasure;

        select firstonly RecId from unitofMeasure
            where unitofMeasure.UnitOfMeasureClass != _cwUnitOfMeasureClass
            exists join uomSeqGroupLine
                where uomSeqGroupLine.UnitId            == unitofMeasure.Symbol
                    && uomSeqGroupLine.UOMSeqGroupId    == _seqGroupId;

        return (unitofMeasure.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();

        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where retailAttributesLegalEntityLookup.UOMSeqGroupId == this.UOMSeqGroupId
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.UOMSeqGroupId, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4472</DeveloperDocumentation>
	<Label>@WAX324</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>UOMSeqGroupId</TitleField1>
	<TitleField2>UOMSeqGroupName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>UOMSeqGroupId</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>UOMSeqGroupId</PrimaryIndex>
	<ReplacementKey>UOMSeqGroupId</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMSeqGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOMSeqGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOMSeqGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOMSeqGroupName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOMSeqGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UOMSeqGroupId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>UOMSeqGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>