<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResComponentControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResComponentControl extends EcoResApplicationControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        PCApplicationControlConstraint  applicationControlConstraint;
        PCExpressionConstraint          expressionConstraint;

        _visitor.visitStart(this);

        select firstonly expressionConstraint
        join RecId from applicationControlConstraint
        where applicationControlConstraint.ComponentControl                 == this.RecId
        &&    applicationControlConstraint.ConditionExpressionConstraint    == expressionConstraint.RecId;

        if ( expressionConstraint.RecId != 0 )
        {
            expressionConstraint.accept(_visitor);
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConstraint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated constraint.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value indicates whether to select for update; optional.
    /// </param>
    /// <returns>
    /// An expression constraint.
    /// </returns>
    public PCExpressionConstraint getConstraint(boolean _forUpdate = false)
    {
        PCApplicationControlConstraint applicationControlConstraint;
        PCExpressionConstraint         expressionConstraint;

        expressionConstraint.selectForUpdate(_forUpdate);

        select firstonly expressionConstraint
            join TableId from applicationControlConstraint
                where   applicationControlConstraint.ConditionExpressionConstraint  == expressionConstraint.RecId
                &&      applicationControlConstraint.ComponentControl               == this.RecId;

        return expressionConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates the specified record.
    /// </summary>
    /// <param name="_duplicatedCategoryAttribute">
    ///    A reference to a duplicated category attribute.
    /// </param>
    public void pcDuplicate(RefRecId _duplicatedCategoryAttribute)
    {
        EcoResComponentControl          duplicate;
        PCApplicationControlConstraint  controlConstraint;

        duplicate.data(this);

        duplicate.CategoryAttribute = _duplicatedCategoryAttribute;

        duplicate.insert();

        select firstonly controlConstraint
            where controlConstraint.ComponentControl == this.RecId;

        if (controlConstraint.RecId != 0)
        {
            controlConstraint.duplicate(duplicate.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcToXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_xmlWriter">
    ///    The XML writer to use to store the XML representation of this record.
    /// </param>
    public void pcToXML(PCXmlWriter _xmlWriter)
    {
        #PC
        PCApplicationControlConstraint  condition;
        PCExpressionConstraint          constraint;
        str 1   emptyString = '';

        switch (this.Modifier)
        {
            case EcoResModifierType::Hidden:
                _xmlWriter.writeStartElement(#HiddenModifierElement);
                break;
            case EcoResModifierType::Mandatory:
                _xmlWriter.writeStartElement(#MandatoryModifierElement);
                break;
            case EcoResModifierType::ReadOnly:
                _xmlWriter.writeStartElement(#ReadOnlyModifierElement);
                break;
        }

        select  firstonly condition
        where   condition.ComponentControl == this.RecId
        join    firstonly constraint
        where   condition.ConditionExpressionConstraint == constraint.RecId;

        if ((constraint) && (constraint.Expression))
        {
            condition.toXML(_xmlWriter);
        }

        _xmlWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>EcoResComponentControl</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if a record with the specified ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (EcoResComponentControl::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResComponentControl</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResComponentControl</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResComponentControl find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResComponentControl record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAttributeAndModifierType</Name>
				<Source><![CDATA[
    public static EcoResComponentControl findByAttributeAndModifierType(
        RefRecId _attribute,
        EcoResModifierType _type,
        boolean _forupdate = false)
    {
        EcoResComponentControl record;

        record.selectForUpdate(_forupdate);
        select firstonly record
            where   record.CategoryAttribute    == _attribute    &&
                    record.Modifier             == _type;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS152856</DeveloperDocumentation>
	<Label>@SYS152855</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Modifier</TitleField1>
    <AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Extends>EcoResApplicationControl</Extends>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCApplicationControlConstraint</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCApplicationControlConstraint</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Modifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EcoResModifierType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResApplicationControlComponent</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResApplicationControl</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>