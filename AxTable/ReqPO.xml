<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPO</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqPO extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowsSchedulingStartDateBeforeToday</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the scheduling start date can be set before today based on futures date settings.
    /// </summary>
    /// <param name="_reqPlanData">
    ///     The plan data to use.
    /// </param>
    /// <param name="_reqSetupDim">
    ///     The dimension setup to use.
    /// </param>
    /// <returns>
    ///     true if the settings allow for a scheduled start date before current date; otherwise, false.
    /// </returns>
    public boolean allowsSchedulingStartDateBeforeToday(
        ReqPlanData _reqPlanData,
        ReqSetupDim _reqSetupDim = null)
    {
        ReqSetupDim reqSetupDim = _reqSetupDim;
        boolean     ret;

        if (this.ReqPOStatus == ReqPOStatus::Approved || _reqPlanData.isSchedulingInPastPrevented())
        {
            return false;
        }

        if (!reqSetupDim)
        {
            reqSetupDim = this.reqTrans().reqSetupDim(_reqPlanData);
        }

        if (this.isInFreezingFence(_reqPlanData, reqSetupDim))
        {
            return false;
        }

        return this.allowsSchedulingStartDateBeforeTodayForReferenceType(_reqPlanData, _reqSetupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowsSchedulingStartDateBeforeTodayForReferenceType</Name>
				<Source><![CDATA[
    private boolean allowsSchedulingStartDateBeforeTodayForReferenceType(
        ReqPlanData _reqPlanData,
        ReqSetupDim _reqSetupDim)
    {
        boolean ret;
        
        switch (this.RefType)
        {
            case ReqRefType::PmfPlannedProdBatch:
            case ReqRefType::BOMPlannedOrder:
            case ReqRefType::TransferPlannedOrder:
            case ReqRefType::PlannedKanban:
            case ReqRefType::ItemPlannedOrder:
                ret = !this.postponeToFuturesDate(_reqPlanData, _reqSetupDim);
                break;
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.allowsSchedulingStartDateBeforeTodayForReferenceTypeDelegate(_reqPlanData, _reqSetupDim, result);
                if (result.hasResult())
                {
                    ret = result.result();
                }
                else
                {
                    ret = false;
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowsSchedulingStartDateBeforeTodayForReferenceTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to determine if the reference type allows for scheduling start before today.
    /// </summary>
    /// <param name = "_reqPlanData">A <c>ReqPlanData</c> instance.</param>
    /// <param name = "_reqSetupDim">A <c>ReqSetupDim</c> instance.</param>
    /// <param name = "_result">Subscribers can use this to provide the result.</param>
    delegate void allowsSchedulingStartDateBeforeTodayForReferenceTypeDelegate(
        ReqPlanData _reqPlanData,
        ReqSetupDim _reqSetupDim,
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateInsert</Name>
				<Source><![CDATA[
    public boolean aosValidateInsert()
    {
        boolean ret;

        ret = super();
        ret = ret && this.inventDim().checkMandatoryCovPrDim(this.ItemId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeFirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the planned order can be firmed.
    /// </summary>
    /// <returns>
    /// true if the planned order can be firmed; otherwise, false.
    /// </returns>
    public boolean canBeFirmed()
    {
        return this.IsDerivedDirectly == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChangeBomId</Name>
				<Source><![CDATA[
    public void checkChangeBomId(FieldName _fieldName)
    {
        BOMId           newBOMId;
        DialogButton    returnVal;
        str             msg;

        if (!this.isFormDataSource())
        {
            return;
        }

        newBOMId = InventTable::find(this.ItemId).bomId(this.ReqDateDlv, this.Qty, this.inventDim());

        if (newBOMId != this.ItemBomId)
        {
            switch (_fieldName)
            {
                case fieldStr(ReqPO,ReqDateDlv):
                    if (InventTable::find(this.ItemId).isFormulaAllowed())
                    {
                        msg = strFmtLB("@PRO2595");
                        msg = strFmt(msg, this.ItemBomId, newBOMId);
                        returnVal = Box::yesNo(msg, 2, "@PRO2366", "");
                    }
                    else
                    {
                        msg = strFmtLB("@SYS86430");
                        msg = strFmt(msg, this.ItemBomId, newBOMId);
                        returnVal = Box::yesNo(msg, 2, "@SYS86431", "");
                    }

                    break;

                case fieldStr(ReqPO, Qty):
                    if (InventTable::find(this.ItemId).isFormulaAllowed())
                    {
                        msg = strFmtLB("@PRO2594");
                        msg = strFmt(msg, this.ItemBomId, newBOMId);
                        returnVal = Box::yesNo(msg, 2, "@PRO2366", "");
                    }
                    else
                    {
                        msg = strFmtLB("@SYS86432");
                        msg = strFmt(msg, this.ItemBomId, newBOMId);
                        returnVal = Box::yesNo(msg, 2, "@SYS86431", "");
                    }

                    break;
            }

            if (returnVal == DialogButton::Yes)
            {
                this.ItemBomId = newBOMId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChangeRouteId</Name>
				<Source><![CDATA[
    public void checkChangeRouteId (FieldName _fieldName)
    {
        DialogButton    returnVal;
        str             msg;

        if (!this.isFormDataSource()) 
        {
            return;
        }

        RouteId newRouteId = InventTable::find(this.ItemId).routeId(this.ReqDateDlv, this.Qty, this.inventDim());

        if (newRouteId != this.ItemRouteId)
        {
            switch (_fieldName)
            {
                case fieldStr(ReqPO, ReqDateDlv):
                    msg = strFmtLB("@SYS86433");
                    msg = strFmt(msg, this.ItemRouteId, newRouteId);
                    returnVal = Box::yesNo(msg, 2, "@SYS86434", "");
                    break;

                case fieldStr(ReqPO, Qty):
                    msg = strFmtLB("@SYS86435");
                    msg = strFmt(msg, this.ItemRouteId, newRouteId);
                    returnVal = Box::yesNo(msg, 2, "@SYS86434", "");
                    break;
            }

            if (returnVal ==  DialogButton::Yes)
            {
                this.ItemRouteId = newRouteId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreatedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the created order is consistent with the planned order.
    /// </summary>
    /// <param name="_createdOrder">
    /// A record that is created by firming the planned order.
    /// </param>
    /// <param name="_inventDimIdCreatedOrder">
    /// A string that holds the inventory dimension ID that is related to the created order.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class to provide information about the dimension
    /// setup; optional.
    /// </param>
    /// <returns>
    /// true if the created order is consistent with the planned order; otherwise, false.
    /// </returns>
    public boolean checkCreatedOrder(
        Common                              _createdOrder,
        InventDimId                         _inventDimIdCreatedOrder,
        InventDimGroupSetup                 _inventDimGroupSetup = InventDimGroupSetup::newItemId(this.ItemId))
    {
        InventDim           inventDimReqPO;
        InventDim           inventDimCreatedOrder;
        str                 nameCreatedOrder;

        if (_inventDimIdCreatedOrder != this.CovInventDimId)
        {
            inventDimReqPO         = this.inventDim();
            inventDimCreatedOrder   = InventDim::find(_inventDimIdCreatedOrder);

            setPrefix(strFmt("@SYS76498","@SYS8597",inventDimReqPO.preFix()));

            if (! InventDim::isInventDimEqualCovDim(_inventDimGroupSetup, inventDimReqPO, inventDimCreatedOrder))
            {
                nameCreatedOrder = SysLabel::labelId2String(new SysDictTable(_createdOrder.TableId).singularLabel());
                nameCreatedOrder = nameCreatedOrder ? nameCreatedOrder : tableId2pname(_createdOrder.TableId);

                setPrefix(strFmt("@SYS76498",nameCreatedOrder,inventDimCreatedOrder.preFix()));
                return checkFailed("@SYS79198");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyScheduling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates scheduling records as if the planned order was scheduled.
    /// </summary>
    /// <param name="_reqPOSource">
    /// A <c>ReqPO</c> record from which the scheduling should be copied.
    /// </param>
    /// <remarks>
    /// Instead of doing a job scheduling, a previous scheduling is copied. Creation of scheduling records
    /// is accomplished by copying the records from another planned order record.
    /// </remarks>
    public void copyScheduling(ReqPO _reqPOSource)
    {
        ReqRoute        reqRouteSource;
        ReqRoute        reqRouteThis;

        if (! this.PlanVersion
         || ! this.RefId
         || ! _reqPOSource.RecId)
        {
            return;
        }

        ttsbegin;

        WrkCtrCapRes::copyRef(
            this.PlanVersion,
            WrkCtrCapRefType::PlannedOrder,
            _reqPOSource.RefId,
            this.PlanVersion,
            WrkCtrCapRefType::PlannedOrder,this.RefId);

        ReqRouteJob::copyReqPOId(this.PlanVersion,_reqPOSource.RefId,this.PlanVersion,this.RefId);

        reqRouteThis.skipDataMethods(true);

        update_recordset reqRouteThis
            setting FromDate    = reqRouteSource.FromDate,
                    FromTime    = reqRouteSource.FromTime,
                    ToDate      = reqRouteSource.ToDate,
                    ToTime      = reqRouteSource.ToTime
            where reqRouteThis.PlanVersion            == this.PlanVersion
               && reqRouteThis.RefId                  == this.RefId
            join reqRouteSource
                where reqRouteSource.PlanVersion            == _reqPOSource.PlanVersion
                    && reqRouteSource.RefId                 == _reqPOSource.RefId
                    && reqRouteSource.OprNum                == reqRouteThis.OprNum
                    && reqRouteSource.OprPriority           == reqRouteThis.OprPriority;

        if (this.selectForUpdate())
        {
            this.ReqDateOrder = _reqPOSource.ReqDateOrder;
            this.ReqTimeOrder = _reqPOSource.ReqTimeOrder;
            this.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete(boolean _fromReqTrans = false)
    {
        ReqTrans    reqTrans;
        ReqPO       reqPO;

        ttsbegin;

        if (!FormDataUtil::isFormDataSource(this))
        {
            super();
        }
        else
        {
            select firstonly RecId from reqPO
                where reqPO.RecId == this.RecId;

            if (reqPO.RecId)
            {
                super();
            }
        }

        if (! _fromReqTrans)
        {
            reqTrans = this.reqTrans(true);
            if (reqTrans.RecId)
            {
                reqTrans.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDelay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the difference between the scheduled delivery date of the planned order and the required
    /// delivery day.
    /// </summary>
    /// <returns>
    /// The difference between the scheduled delivery date of the planned order and required delivery day
    /// in days.
    /// </returns>
    public display DelayInDays deliveryDelay()
    {
        int delay = this.SchedToDate - this.ReqDateDlv;

        return delay > 0 ? strFmt('%1', delay) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceDiscTable</Name>
				<Source><![CDATA[
    public PriceDiscTable findPriceDiscTable(
        ReqSetup _setup,
        ReqPlanData _reqPlanData = null
        )
    {
        boolean useReqDateDlvForPriceDiscTableLookup = ReqPOUseReqDateDlvForPriceDiscTableLookup::instance().isEnabled();
        PriceDiscTable  priceDiscTable;

        if (! _reqPlanData)
        {
            _reqPlanData = ReqPlanData::newReqPlanVersion(this.PlanVersion);
        }

        if (_reqPlanData.searchTradeAgreement())
        {
            if (!useReqDateDlvForPriceDiscTableLookup)
            {
                priceDiscTable = ReqTrans::findPriceDiscTable(this.ItemId, this.CovInventDimId, this.Qty, this.ReqDate, _reqPlanData.searchTradeMethod(), _setup);
            }
            else
            {
                priceDiscTable = ReqTrans::findPriceDiscTable(this.ItemId, this.CovInventDimId, this.Qty,this.ReqDateDlv, _reqPlanData.searchTradeMethod(), _setup);
            }
            
        }

        return priceDiscTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromInventDimWithDefaultLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimension of the derived requirement.If the warehouse field is not set in the
    /// dimension, the field is populated with the default warehouse.
    /// </summary>
    /// <returns>
    /// The inventory dimension of the derived requirement.
    /// </returns>
    public InventDim fromInventDimWithDefaultLocation()
    {
        InventDim inventDim;

        inventDim = this.reqTransDerived().inventDim();

        if (!inventDim.InventLocationId && this.supplyPrinciple() == ReqSupplyPrinciple::Transfer)
        {
            inventDim.InventLocationId = this.reqTrans().reqSetupDim().mainInventLocationId();
            inventDim = InventDim::findOrCreate(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the from warehouse if the current record is a transfer.
    /// </summary>
    /// <returns>
    /// A string that holds a warehouse ID.
    /// </returns>
    public display InventLocationIdFrom fromInventLocationId()
    {
        InventLocationId fromLocationId;

        if (this.supplyPrinciple() == ReqSupplyPrinciple::Transfer)
        {
            fromLocationId = this.fromInventDimWithDefaultLocation().InventLocationId;
        }

        return fromLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqDateFromDlvDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates the requirement date based on the delivery date.
    /// </summary>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that holds the item coverage per dimension information.
    /// </param>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that holds the planning data; optional.
    /// </param>
    public void updateReqDateFromDlvDate(ReqSetupDim _setupDim, ReqPlanData _reqPlanData)
    {
        if (_reqPlanData.marginReceipt(_setupDim))
        {
            this.ReqDate = _reqPlanData.schedMarginForward(this.ReqDateDlv,_reqPlanData.marginReceipt(_setupDim),_setupDim);
        }
        else
        {
            this.ReqDate = this.ReqDateDlv;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current <c>ReqPO</c> record from a <c>ReqTrans</c> record.
    /// </summary>
    /// <param name="_issueReqTrans">
    /// A <c>ReqTrans</c> record that represents an issue requirement transaction.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    public void initFromIssue(
        ReqTrans        _issueReqTrans,
        ReqSetupDim     _setupDim)
    {
        this.PlanVersion        = _issueReqTrans.PlanVersion;

        this.ItemId             = _issueReqTrans.ItemId;
        this.CovInventDimId     = _issueReqTrans.CovInventDimId;

        this.RefType            = _setupDim.plannedOrderTypeReq(_issueReqTrans.IsDerivedDirectly);

        this.ItemRouteId        = _issueReqTrans.ItemRouteId;
        this.ItemBomId          = _issueReqTrans.ItemBomId;

        this.ReqDate            = _issueReqTrans.ReqDate;
        this.ReqTime            = _issueReqTrans.ReqTime;

        if (_issueReqTrans.IsDerivedDirectly)
        {
            this.Qty            = - _issueReqTrans.openQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemId</Name>
				<Source><![CDATA[
    public void initFromItemId(ItemId _itemId
                                      , ReqTraceLogger _reqTraceLogger = null
                                      )
    {
        this.initReleasedProductSpecificDefaulting(_itemId);
        this.initDimensionsSpecificDefaulting(_reqTraceLogger, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_itemId">The item to initialize from.</param>
    public void initReleasedProductSpecificDefaulting(ItemId _itemId)
    {
        this.ItemId         = _itemId;
        this.ItemBomId      = '';
        this.ItemRouteId    = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes dimension and dependent fields.
    /// </summary>
    /// <param name = "_reqTraceLogger">The logger to output to; optional.</param>
    /// <param name = "_forceQtyUpdate">Determines if the quantity field must be updated; optional.</param>
    private void initDimensionsSpecificDefaulting(ReqTraceLogger _reqTraceLogger = null, boolean _forceQtyUpdate = false)
    {
        InventDim   inventDim = this.inventDim();
        ReqSetup    setup = ReqSetup::newItemId(this.ItemId);
        InventTable inventTable = setup.inventTable();

        this.initInventDim(inventDim, inventTable);

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(this.ItemId, inventDim))
        {
            return;
        }

        ReqSetupDim setupDim = ReqSetupDim::newCovInventDimId(setup, inventDim.reqCovDimId(InventDimGroupSetup::newInventTable(inventTable)));
        ReqPlanData reqPlanData = ReqPlanData::newReqPlanVersion(this.PlanVersion);

        ReqTransPoCreateContext context = ReqTransPoCreateContext::current();
        InventLocationId fromInventLocationId = ReqTransPoCreateApplyTransportDaysToggle::instance().isEnabled() && context ? context.parmFromInventLocationId() : '';

        this.initLeadTime(setupDim, fromInventLocationId);
        this.initVendId(setupDim, reqPlanData);

        if (!this.ReqDateDlv)
        {
            this.ReqDateDlv = reqPlanData.todaysdate();
        }

        this.initFromReqDateDlv(setupDim);

        if (!this.Qty || _forceQtyUpdate)
        {
            this.Qty = this.RefType == ReqRefType::ItemPlannedOrder ? setupDim.standardQtyPurch() : setupDim.standardQtyInvent();

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                this.PdsCWReqQty = PdsCatchWeight::cwQty(this.ItemId, this.Qty);
            }
        }

        this.initFromSetupDim(setupDim);
        this.initFromSetup(setup, _reqTraceLogger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    private void initInventDim(InventDim _inventDim, InventTable _inventTable)
    {
        switch (this.RefType)
        {
            case ReqRefType::ItemPlannedOrder:
                _inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Purch, _inventDim);
                break;

            case ReqRefType::PmfPlannedProdBatch:
            case ReqRefType::BOMPlannedOrder,
                ReqRefType::TransferPlannedOrder,
                ReqRefType::PlannedKanban:
                    _inventDim.initFromInventTable(_inventTable, InventItemOrderSetupType::Invent, _inventDim);
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.initInventDimDelegate(_inventDim, _inventTable, result);
                if (result.hasResult())
                {
                    _inventDim.data(result.result());
                }
                else
                {
                    throw error("@SYS6144");
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the <c>InventDim</c>.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record.</param>
    /// <param name = "_inventTable">An <c>InventTable</c> record.</param>
    /// <param name = "_result">Subscribers can use this to provide the initialized dimension.</param>
    delegate void initInventDimDelegate(InventDim _inventDim, InventTable _inventTable, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles reinitialization if needed when an associated <c>InventDim</c> buffer is changed.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> buffer.</param>
    /// <param name = "_inventDimFieldId">The field that was changed.</param>
    public void modifiedInventDim(InventDim _inventDim, FieldId _inventDimFieldId)
    {
        boolean shouldDoDimensionSpecificDefaulting = _inventDim.siteOrProductDimFieldModified(_inventDimFieldId) || InventDim::isFieldIdItemCovDim(_inventDimFieldId);

        this.CovInventDimId = _inventDim.inventDimId;

        if (shouldDoDimensionSpecificDefaulting)
        {
            this.initDimensionsSpecificDefaulting();
        }

        _inventDim.refreshFormDataSource(this.CovInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data on the planned order record that is based on the order date.
    /// </summary>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that holds the item coverage per dimension information.
    /// </param>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that holds the planning data.
    /// </param>
    /// <param name="_adjustDateWithLockingFence">
    /// A Boolean value that indicates whether the freezing time fence is considered when adjusting the
    /// order date; optional.
    /// </param>
    /// <param name="_scheduleOrder">
    /// A Boolean value that indicates whether to reschedule the delivery date; optional.
    /// </param>
    void initFromReqDate(
        ReqSetupDim     _setupDim,
        ReqPlanData     _reqPlanData,
        boolean         _adjustDateWithLockingFence = true,
        boolean         _scheduleOrder = true
        )
    {
        this.setReqDateFields(_setupDim, _reqPlanData, _adjustDateWithLockingFence);
        if (_scheduleOrder)
        {
            this.setSchedFromDate(_setupDim, _reqPlanData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqDateDlv</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data on the planned order record based on the order delivery date.
    /// </summary>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that holds the item coverage per dimension information.
    /// </param>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that holds the planning data; optional.
    /// </param>
    /// <param name="_adjustDateWithLockingFence">
    /// A Boolean value that indicates whether the freezing time fence is considered when adjusting the
    /// order date; optional.
    /// </param>
    /// <param name="_scheduleOrder">
    /// A Boolean value that indicates whether to reschedule the delivery date; optional.
    /// </param>
    void initFromReqDateDlv(
        ReqSetupDim     _setupDim,
        ReqPlanData     _reqPlanData = null,
        boolean         _adjustDateWithLockingFence = true,
        boolean         _scheduleOrder = true)
    {
        if (! _reqPlanData)
        {
            _reqPlanData = ReqPlanData::newReqPlanVersion(this.PlanVersion);
        }

        if (! this.ReqDateDlv)
        {
            this.ReqDate = _reqPlanData.todaysdate();
        }

        this.updateReqDateFromDlvDate(_setupDim, _reqPlanData);

        this.initFromReqDate(_setupDim, _reqPlanData, _adjustDateWithLockingFence, _scheduleOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqTrans</Name>
				<Source><![CDATA[
    public void initFromReqTrans(ReqTrans _reqTrans)
    {
        this.PlanVersion            = _reqTrans.PlanVersion;

        this.ItemId             = _reqTrans.ItemId;
        this.CovInventDimId     = _reqTrans.CovInventDimId;

        this.RefType            = _reqTrans.RefType;
        this.RefId              = _reqTrans.RefId;

        this.ItemBomId          = _reqTrans.ItemBomId;
        this.ItemRouteId        = _reqTrans.ItemRouteId;

        this.ReqDate            = _reqTrans.ReqDate;
        this.ReqTime            = _reqTrans.ReqTime;

        this.Qty                = _reqTrans.Qty;

        this.IsDerivedDirectly  = _reqTrans.IsDerivedDirectly;
        this.IsForecastPurch    = _reqTrans.IsForecastPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSetup</Name>
				<Source><![CDATA[
    public void initFromSetup(
        ReqSetup          _setup,
        ReqTraceLogger    _reqTraceLogger   = null,
        ReqPlanData       _reqPlanData      = null)
    {
        this.ItemGroupId            = _setup.itemGroupId();
        this.ItemBuyerGroupId       = _setup.itemBuyerGroupId(this.VendId);

        if (this.supplyPrinciple(_reqPlanData) == ReqSupplyPrinciple::Conversion)
        {
            if (ReqTrans::refTypeCanHaveBOM(this.RefType))
            {
                this.ItemBomId          = _setup.bomId(this);
                this.initYield();

                if (_reqTraceLogger && _reqTraceLogger.loggingEnabled())
                {
                    if (this.ItemBomId)
                    {
                        _reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::BOMFound, [this.ItemBomId]));
                    }
                    else
                    {
                        _reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::BOMNotFound, conNull()));
                    }
                }
            }

            if (ReqTrans::refTypeCanHaveRoute(this.RefType))
            {
                this.ItemRouteId        = _setup.routeId(this);

                if (_reqTraceLogger && _reqTraceLogger.loggingEnabled())
                {
                    if (this.ItemRouteId)
                    {
                        _reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::RouteFound, [this.ItemRouteId]));
                    }
                    else
                    {
                        _reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::RouteNotFound, conNull()));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSetupDim</Name>
				<Source><![CDATA[
    public void initFromSetupDim(ReqSetupDim    _setupDim)
    {
        this.CovInventDimId         = _setupDim.parmCovInventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntvFields</Name>
				<Source><![CDATA[
    public void initIntvFields()
    {
        this.IntvQr     = intvNo(this.ReqDate,ReqPO::intvRefDate(),IntvScale::YearQuarter)+1;
        this.IntvMth    = intvNo(this.ReqDate,ReqPO::intvRefDate(),IntvScale::YearMonth)+1;
        this.IntvWk     = intvNo(this.ReqDate,ReqPO::intvRefDate(),IntvScale::YearWeek)+1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes lead time on the planned order record.
    /// </summary>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that holds the item coverage per dimension information.
    /// </param>
    /// <param name="_fromInventLocationId">
    /// The ID of the source warehouse, to be used in planned transfer orders;
    /// optional if the current record is not a planned transfer.
    /// </param>
    public void initLeadTime(ReqSetupDim _setupDim, InventLocationId _fromInventLocationId = '')
    {
        this.LeadTime    = _setupDim.leadTimeForOrder(this.ReqDate, this.Qty, this.RefType, _fromInventLocationId);
        this.CalendarDays= _setupDim.leadTimeCalendarDaysForOrder(this.ReqDate, this.Qty, this.RefType, _fromInventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchQty</Name>
				<Source><![CDATA[
    public void initPurchQty(
        ReqSetup    _setup = this.reqSetup()
        )
    {
        InventQty   inventQty;

        if (this.RefType   == ReqRefType::ItemPlannedOrder)
        {
            this.PurchUnit  = this.PurchUnit ? this.PurchUnit : _setup.purchUnitId();

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                this.Qty = PdsCatchWeight::cwRoundUpInventQty(this.ItemId, this.Qty);
            }

            this.PurchQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																								  this.CovInventDimId,
																								  this.Qty,
																								  _setup.inventUnitId(),
																								  this.PurchUnit,
																								  NoYes::Yes);

            if (this.PurchUnit != _setup.inventUnitId())
            {
                inventQty = this.Qty;

                this.initQtyFromPurchQty();

                if (inventQty > this.Qty)
                {
                    this.Qty = inventQty;

                    if (PdsGlobal::pdsIsCWItem(this.ItemId))
                    {
                        this.PdsCWReqQty = PdsCatchWeight::cwQty(
                                            this.ItemId,
                                            inventQty);
                    }
                }
            }
        }
        else
        {
            this.PurchUnit  = '';
            this.PurchQty   = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQtyFromFormulaQty</Name>
				<Source><![CDATA[
    public void initQtyFromFormulaQty()
    {
        BOMVersion      bomVersion = BOMVersion::find(
                                        this.ItemId,
                                        this.ItemBomId,
                                        true,
                                        this.ReqDateDlv);

        if (#PmfEnabled)
        {
            //Reset Qty Fields
            this.Qty        = 0;
            this.PurchQty   = 0;

            this.Qty = bomVersion.PmfBatchSize;

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                this.Qty =
                    PdsCatchWeight::cwRoundUpInventQty(this.ItemId, this.Qty);
                this.PdsCWReqQty = PdsCatchWeight::cwQty(this.ItemId, this.Qty);
            }
            else
            {
                this.PdsCWReqQty = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQtyFromPurchQty</Name>
				<Source><![CDATA[
    public void initQtyFromPurchQty()
    {
        if (this.RefType == ReqRefType::ItemPlannedOrder)
        {
            this.Qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																							 this.CovInventDimId,
																							 this.PurchQty,
																							 this.PurchUnit,
																							 InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId,
																							 NoYes::Yes);
        }
        else
        {
            this.Qty = this.PurchQty;

            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                this.Qty = PdsCatchWeight::cwRoundUpInventQty(this.ItemId, this.Qty);
                this.PdsCWReqQty = PdsCatchWeight::cwQty(this.ItemId, this.Qty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqPOType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record by using the planned order type and plan version.
    /// </summary>
    /// <param name="_planVersion">
    /// The master plan version.
    /// </param>
    /// <param name="_reqPOType">
    /// A planned order type.
    /// </param>
    public void initReqPOType(  RefRecId    _planVersion,
                                ReqPOType   _reqPOType
                                )
    {
        this.PlanVersion = _planVersion;

        if (#PmfEnabled
            && (InventTable::find(this.ItemId).isFormulaAllowed()
                || InventTable::find(this.ItemId).PmfProductType == PmfProductType::Co_Product)
            && _reqPOType == ReqPOType::Production)
        {
            this.RefType = ReqRefType::PmfPlannedProdBatch;
        }
        else
        {
            this.RefType = ReqPO::reqPoType2ReqRefType(_reqPOType);
        }

        //When launched from the ReqTransPoCreate form during an item selection with the 'IsSupplierShipmentDatesEnabled' parameter enabled, 
        //the value for ReqDateDlv is calculated earlier in the setSchedFromDateItemPlannedOrder method and does not require rewriting.
        if (this.ReqDateDlv && ReqTransPoCreateContext::current() && ReqTransPoCreateDispatchDatesFlight::instance().isEnabled() 
            && PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            return;
        }

        if (!ReqPOTransferLeadTimeFeature::isEnabled() || !this.ReqDateDlv)
        {
            this.ReqDateDlv = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendId</Name>
				<Source><![CDATA[
    public void initVendId(
        ReqSetupDim     _setupDim,
        ReqPlanData     _reqPlanData = null
        )
    {
        PriceDiscTable  priceDiscTable;

        if (this.RefType == ReqRefType::ItemPlannedOrder)
        {
            if (! _setupDim.primaryVendId())
            {
                priceDiscTable = this.findPriceDiscTable(_setupDim.setup(),_reqPlanData);
            }

            if (priceDiscTable.RecId)
            {
                this.VendId         = priceDiscTable.AccountRelation;

                if (!ReqCalcTradeAgreementDisregardLeadTimeRespectedFlight::instance().isEnabled())
                {
                    this.LeadTime       = priceDiscTable.DeliveryTime;
                }

                this.CalendarDays   = priceDiscTable.CalendarDays;
            }
            else
            {
                this.VendId         = _setupDim.primaryVendId();
            }

            this.VendGroupId    = _setupDim.setup().vendGroupId(this.VendId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initYield</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the yield based on the current BOM id.
    /// </summary>
    public void initYield()
    {
        BOMVersion bomVersion;

        if (this.RefType == ReqRefType::PmfPlannedProdBatch && !this.PmfYieldPct)
        {
            bomVersion = BOMVersion::findApproved(
                            this.ItemId,
                            this.ItemBomId,
                            true,
                            this.ReqDateDlv,
                            this.ReqDateDlv,
                            this.Qty);
            this.PmfYieldPct = bomVersion.PmfYieldPct;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills in the ID of the order and updates various fields on the planned order when the planned order
    /// record is created.
    /// </summary>
    /// <param name="_reqPlanData">
    /// A <c>ReqPLanData</c> object that is used for caching in master planning runs.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The order type field value is incorrect.
    /// </exception>
    public void insert(ReqPlanData _reqPlanData = null)
    {
        if (! ReqTrans::refTypeIsPlannedOrder(this.RefType))
        {
            throw error("@SYS69860");
        }

        ttsbegin;

        if (! _reqPlanData)
        {
            _reqPlanData = ReqPlanData::newReqPlanVersion(this.PlanVersion);
        }

        if (! this.ReqDate)
        {
            this.ReqDate        = _reqPlanData.todaysdate();
        }

        if (! this.ReqDateDlv)
        {
            this.ReqDateDlv     = this.ReqDate;
        }

        if (! this.SchedFromDate && !ReqTrans::refTypeCanReserveWorkCenter(this.RefType))
        {
            this.SchedFromDate  = this.ReqDate;
        }

        if (! this.SchedToDate && !ReqTrans::refTypeCanReserveWorkCenter(this.RefType))
        {
            this.SchedToDate    = this.ReqDate;
        }

        if (! this.ReqDateOrder)
        {
            this.ReqDateOrder   = this.ReqDate;
        }

        if (! this.RefId)
        {
            this.RefId  = NumberSeq::newGetNumFromId(_reqPlanData.sequencePlannedOrder()).num();
        }

        if ( PdsGlobal::pdsIsCWItem(this.ItemId) && !this.PdsCWReqQty)
        {
            this.Qty = PdsCatchWeight::cwRoundUpInventQty(this.ItemId, this.Qty);
            this.PdsCWReqQty = PdsCatchWeight::cwQty(this.ItemId, this.Qty);
        }

        if (#PmfEnabled && !this.PmfPlanningItemId)
        {
            this.PmfPlanningItemId = InventTable::find(
                                        this.ItemId).PmfPlanningItemId;
        }

        if (!this.Product)
        {
            this.setProductReference();
        }

        this.initIntvFields();
        this.initializeReceiptTime();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReceiptTime</Name>
				<Source><![CDATA[
    private void initializeReceiptTime()
    {
        boolean newRecord = !this.orig().RecId;
        // the default receipt time should be initialized upon:
        // - insertion of new records and
        //      - the field is not set explicitly (can be set explicitly to 0 = 00:00 = "MidNight") and the value is empty
        if (newRecord)
        {
            if ((this.fieldState(fieldNum(ReqPO, ReqTime)) == FieldState::NotSet)
        &&  !this.ReqTime)
            {
                this.ReqTime = ReqParameters::find().ReqTimePoDefault;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromReqTrans</Name>
				<Source><![CDATA[
    public void insertFromReqTrans(
        ReqTrans    _reqTrans,
        ReqSetup    _reqSetup       = _reqTrans.reqSetup(),
        ReqSetupDim _reqSetupDim    = _reqTrans.reqSetupDim()
        , ReqTraceLogger _reqTraceLogger            = null
        )
    {
        this.initFromReqTrans(_reqTrans);
        this.initFromSetup(_reqSetup, _reqTraceLogger);
        this.initFromSetupDim(_reqSetupDim);
        this.initLeadTime(_reqSetupDim);
        this.initPurchQty(_reqSetup);
        this.initVendId(_reqSetupDim);

        this.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyConvertedItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID used in the upstream vendor company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// The instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The item ID used in the upstream vendor company.
    /// </returns>
    public display ItemId intercompanyConvertedItemId(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.convertItemId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyConvertedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity converted according the unit of measure conversion.
    /// </summary>
    /// <param name="_conversionUtil">
    /// An instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The converted quantity.
    /// </returns>
    public display ReqQty intercompanyConvertedQty(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.convertQty(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyConvertedReqDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the requirement date depending on the lead time in the upstream vendor company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// The instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The converted requirement date.
    /// </returns>
    public display ReqDate intercompanyConvertedReqDate(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.convertReqDate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyConvertedReqTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a requirement time.
    /// </summary>
    /// <returns>
    /// The value from the <c>ReqTimePoDefault</c> field in the <c>ReqParameters</c> table.
    /// </returns>
    public display ReqTimePoDefault intercompanyConvertedReqTime()
    {
        return ReqParameters::find().ReqTimePoDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the unit of measure catch weight symbol in the customer company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// An instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The unit of measure symbol.
    /// </returns>
    public display UnitOfMeasureSymbol intercompanyCWUnitId(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.getCustomerCWUnitOfMeasure(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the warehouse ID in the downstream customer company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// An instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The warehouse ID.
    /// </returns>
    public display InventLocationId intercompanyInventLocationId(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.getCustomerWarehouseId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyInventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the unit of measure symbol in the downstream customer company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// An instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The unit of measure symbol.
    /// </returns>
    public display UnitOfMeasureSymbol intercompanyInventUnitId(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.getCustomerInventUnitOfMeasure(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyLegalEntityDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the description of the downstream customer company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// An instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The company description.
    /// </returns>
    public display DataAreaName intercompanyLegalEntityDescription(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.getCustomerLegalEntityDescription(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanyReqPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the master plan ID in the downstream customer company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// An instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The master plan ID.
    /// </returns>
    public display ReqPlanId intercompanyReqPlanId(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.getCustomerReqPlanId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intercompanySiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the site ID in the downstream customer company.
    /// </summary>
    /// <param name="_conversionUtil">
    /// An instance of the <c>ReqIntercompanyConversionUtil</c> class.
    /// </param>
    /// <returns>
    /// The site ID.
    /// </returns>
    public display InventSiteId intercompanySiteId(ReqIntercompanyConversionUtil _conversionUtil = ReqIntercompanyConversionUtil::construct())
    {
        return _conversionUtil.getCustomerSiteId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intvMthName</Name>
				<Source><![CDATA[
    public display ReqPeriodStr intvMthName()
    {
        return intvName(ReqPO::intvRefDate(),this.IntvMth-1,IntvScale::YearMonth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intvQrName</Name>
				<Source><![CDATA[
    public display ReqPeriodStr intvQrName()
    {
        return intvName(ReqPO::intvRefDate(),this.IntvQr-1,IntvScale::YearQuarter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>intvWkName</Name>
				<Source><![CDATA[
    public display ReqPeriodStr intvWkName()
    {
        return intvName(ReqPO::intvRefDate(),this.IntvWk-1,IntvScale::YearWeek);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.CovInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimAndDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds default values to the current <c>InventDim</c> record.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    public InventDim inventDimAndDefault()
    {
        InventDim           inventDim;
        InventDimParm       inventDimParm;

        inventDim.data(this.inventDim());

        switch (this.RefType)
        {
            case ReqRefType::TransferPlannedOrder:
                if (! inventDim.InventLocationId)
                {
                    InventDimGroupSetup::newItemId(this.ItemId).inventDimParmActive(inventDimParm);
                    // find default inventory warehouse
                    inventDim.InventLocationId =  InventItemInventSetup::find(this.ItemId, inventDim.InventDimId).inventLocationId();
                    inventDim.initFromInventLocationAndDefault(inventDim.inventLocation(), this.ItemId, InventDirection::Receipt, inventDimParm);
                    inventDim = InventDim::findOrCreate(inventDim);
                }
                break;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMCreated</Name>
				<Source><![CDATA[
    public boolean isBOMCreated()
    {
        return this.bomRouteCreated == ReqBOMRouteCreated::BOM || this.bomRouteCreated == ReqBOMRouteCreated::BOMRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInFreezingFence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current <c>ReqPO</c> record is inside the freeze time fence.
    /// </summary>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that contains the master planning settings.
    /// </param>
    /// <param name="_reqSetupDim">
    /// A <c>ReqSetupDim</c> object that contains the coverage settings for a specific item ID and
    /// inventory dimension.
    /// </param>
    /// <returns>
    /// true if the current planned order is inside the freeze time fence; otherwise, false.
    /// </returns>
    public boolean isInFreezingFence(
        ReqPlanData     _reqPlanData,
        ReqSetupDim     _reqSetupDim)
    {
        TimeFenceLocking    timeFenceLocking;

        timeFenceLocking = _reqPlanData.timeFenceLocking(_reqSetupDim);

        return timeFenceLocking
            && this.ReqDate <= (_reqPlanData.todaysdate() + timeFenceLocking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRouteCreated</Name>
				<Source><![CDATA[
    public boolean isRouteCreated()
    {
        return this.bomRouteCreated == ReqBOMRouteCreated::Route || this.bomRouteCreated == ReqBOMRouteCreated::BOMRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemGroupName</Name>
				<Source><![CDATA[
    public display Name itemGroupName()
    {
        return InventItemGroup::name(this.ItemGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ReqPO,PdsCWReqQty):
                ReqPO::pdsModifyQty(this, _fieldId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(
        FieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean validateOnTheServer;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(ReqPO, ItemId):
            case fieldStr(ReqPO, VendId):
            case fieldStr(ReqPO, Qty):
            case fieldStr(ReqPO, ReqDateDlv):
                validateOnTheServer = true;
                break;
            case fieldStr(ReqPO, RefType):
                if (this.ItemId)
                {
                    validateOnTheServer = true;
                }
                break;
        }

        if (validateOnTheServer)
        {
            this.modifiedFieldValueOnTheServer(_fieldName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
                    [fieldNum(ReqPO, PlanningPriority),
                        [
                            fieldNum(ReqPO, RefType),
                            fieldNum(ReqPO, ItemId),
                            fieldNum(ReqPO, CovInventDimId)
                        ]
                    ]
                ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValueOnTheServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the <c>modifiedField</c> method logic on the server.
    /// </summary>
    /// <param name="_fieldName">
    ///     The name of the field that was modified.
    /// </param>
    /// <remarks>
    ///     This method runs exclusively on the server tier.
    /// </remarks>
    private void modifiedFieldValueOnTheServer(FieldName _fieldName)
    {
        switch (_fieldName)
        {
            case fieldStr(ReqPO, RefType):
                if (this.ItemId)
                {
                    this.CovInventDimId = InventDim::inventDimIdBlank();
                    this.initFromSetup(ReqSetup::newItemId(this.ItemId));
                    this.initFromItemId(this.ItemId);
                }
                break;

            case fieldStr(ReqPO, ItemId):
                this.CovInventDimId = InventDim::inventDimIdBlank();
                this.initFromItemId(this.ItemId);
                break;

            case fieldStr(ReqPO, VendId):
                this.VendGroupId = VendTable::find(this.VendId).VendGroup;

                if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
                {
                    this.initFromReqDateDlv(this.reqSetupDim());
                }
                
                break;

            case fieldStr(ReqPO, Qty):
                this.Qty = decRound(this.Qty,UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent).UnitId)));
                if (! this.RecId)
                {
                    if (! this.VendId)
                    {
                        if (ReqCalcTradeAgreementDisregardLeadTimeRespectedFlight::instance().isEnabled())
                        {
                            this.initLeadTime(this.reqSetupDim());
                        }

                        this.initVendId(this.reqSetupDim());
                    }

                    this.initFromReqDateDlv(this.reqSetupDim());
                }

                this.updateBOMRoute(_fieldName);
                break;

            case fieldStr(ReqPO, ReqDateDlv):
                this.initFromReqDateDlv(this.reqSetupDim(), null, false, true);
                this.updateBOMRoute(_fieldName);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTransferJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a planned transfer journal should be created when firming the planned order.
    /// </summary>
    /// <returns>
    /// true if a planned transfer journal should be created; otherwise, false.
    /// </returns>
    public boolean mustCreateTransferJournal()
    {
        var inventDimFrom = this.fromInventDimWithDefaultLocation();
        var inventDimTo = this.inventDimAndDefault();

        return inventDimFrom.InventSiteId == inventDimTo.InventSiteId && ReqSitePolicy::find(inventDimFrom.InventSiteId).UseTransferJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExpandPhantom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the bill of materials lines of type phantom must be expanded.
    /// </summary>
    /// <returns>
    /// true if phantom lines must be expanded; otherwise, false.
    /// </returns>
    public boolean mustExpandPhantom()
    {
        if (this.RefType == ReqRefType::PlannedKanban)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the item has valid approved vendor list entry if controlled by the approved vendor
    /// list functionality.
    /// </summary>
    /// <returns>
    /// true if the item is valid; otherwise, false
    /// </returns>
    private boolean pdsCheckApprovedVendorList()
    {
        return PdsApprovedVendorListCheck::newFromTable(this).validateCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the catch weight quantity entered is valid.
    /// </summary>
    /// <returns>
    /// true if catch weight quantity is valid; otherwise, false .
    /// </returns>
    /// <remarks>
    /// Checks that catch weight quantity is not negative, and that it is in the range set up for the item.
    /// </remarks>
    public boolean pdsCWQtyValidation()
    {
        boolean ret = true;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            if (!this.PdsCWReqQty)
            {
                ret = checkFailed("@PDS113");
            }

            if (ret
                && this.PdsCWReqQty
                && !PdsCatchWeightItem::pdsCWIsValidQty(this.ItemId,
                                                        this.Qty,
                                                        this.PdsCWReqQty))
            {
                ret = checkFailed(PdsCatchWeightItem::pdsCWErrorMsgForUnit(
                                    this.ItemId,
                                    this.PdsCWReqQty,
                                    this.reqTrans().inventUnitId()));
            }

            if (ret
                && !PdsCatchWeightItem::pdsCWIsValidQty(this.ItemId,
                                                    this.Qty,
                                                    this.PdsCWReqQty))
            {
                ret = checkFailed(PdsCatchWeightItem::pdsCWErrorMsgForUnit(
                        this.ItemId,
                        this.PdsCWReqQty,
                        this.reqTrans().inventUnitId()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    public display PdsCWUnitId pdsCWUnitId()
    {
        PdsCWUnitId unitId = '';

        if (hasTableAccess(tableNum(ReqPO),AccessType::View))
        {
            unitId = PdsCatchWeight::cwUnitId(this.ItemId);
        }

        return unitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfSetMinMaxQty</Name>
				<Source><![CDATA[
    public Qty pmfSetMinMaxQty(
        InventDimId _inventDimId = InventDim::inventDimIdBlank(),
        boolean     _showUsrDialog = true)
    {
        ProdTable       localProdTable;
        InventMovement  movement;

        localProdTable.initFromReqPo(this);
        localProdTable.ProdType = ProdType::Process;

        movement = InventMovement::construct(localProdTable);
        movement.inventdim(InventDim::find(_inventDimId));
        return movement.pmfSetMinMaxQty(_showUsrDialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postponeToFuturesDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current planned order should be postponed to the futures date.
    /// </summary>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that holds master planning settings.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that holds coverage settings for a specific item ID and inventory
    /// dimensions.
    /// </param>
    /// <returns>
    /// true if the current planned order should be postponed to the futures date; otherwise, false.
    /// </returns>
    public boolean postponeToFuturesDate(
        ReqPlanData     _reqPlanData,
        ReqSetupDim     _setupDim)
    {
        if (this.ReqPOStatus == ReqPOStatus::Approved)
        {
            return false;
        }

        if (this.isInFreezingFence(_reqPlanData,_setupDim))
        {
            return false;
        }

        switch (this.RefType)
        {
            case ReqRefType::PmfPlannedProdBatch:
            //fallthrough to BOMPlannedOrder
            case ReqRefType::BOMPlannedOrder:
                return _reqPlanData.futuresSched();

            case ReqRefType::ItemPlannedOrder:
                return _reqPlanData.futuresUpdReqDatePurch();

            case ReqRefType::TransferPlannedOrder:
                return _reqPlanData.futuresUpdReqDateTransfer();

            case ReqRefType::PlannedKanban:
                return _reqPlanData.futuresUpdReqDateKanban();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshYield</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes the yield percentage based on the selected formula number or based on the issue record, if the order is directly derived.
    /// </summary>
    /// <param name="_reqTrans">
    ///     The related requirement transaction;
    /// </param>
    private void refreshYield(ReqTrans _reqTrans)
    {
        ReqTrans    reqTransIssue;
        ReqPO       reqPOIssue;
        boolean     updatedYield;

        if (this.IsDerivedDirectly)
        {
            //default it from the issue
            reqTransIssue = _reqTrans.reqTransDirectlyDerived();
            if (reqTransIssue && (reqTransIssue.RefType == ReqRefType::PmfFormulaLine))
            {
                reqPOIssue       = ReqPO::find(reqTransIssue.PlanVersion, reqTransIssue.RefId);
                if (this.RefType == ReqRefType::PmfPlannedProdBatch)
                {
                    this.PmfYieldPct = reqPOIssue.PmfYieldPct;
                    updatedYield     = true;
                }
            }
        }

        if (!updatedYield && (this.RefType == ReqRefType::PmfPlannedProdBatch))
        {
            this.PmfYieldPct = BomVersion::findApproved(this.ItemId, this.ItemBomId, true, this.ReqDateDlv, this.ReqDateDlv, this.Qty).PmfYieldPct;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the requirement date and time in the UTC timezone.
    /// </summary>
    /// <returns>
    /// A date and time value that holds the requirement date and time in the UTC time zone.
    /// </returns>
    public utcdatetime reqDateTime()
    {
        return DateTimeUtil::newDateTime(this.ReqDate,this.ReqTime,DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPOPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the same <c>ReqPO</c> record in another master plan.
    /// </summary>
    /// <param name="_reqPlanId">
    /// A string value that holds a master plan ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>ReqPO</c> record that represents a planned order.
    /// </returns>
    public ReqPO reqPOPlanId(
        ReqPlanId   _reqPlanId,
        boolean     _forUpdate = false)
    {
        ReqPO       reqPO;

        reqPO.selectForUpdate(_forUpdate);

        select reqPO
            where  reqPO.PlanVersion    == ReqPlan::findReqPlanId(_reqPlanId).findActiveVersion().RecId
                && reqPO.RefType        == this.RefType
                && reqPO.RefId          == this.RefId
                && reqPO.ItemId         == this.ItemId
                && reqPO.CovInventDimId == this.CovInventDimId;

        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqSetup</Name>
				<Source><![CDATA[
    public ReqSetup reqSetup()
    {
        return ReqSetup::newItemId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqSetupDim</Name>
				<Source><![CDATA[
    public ReqSetupDim reqSetupDim()
    {
        return ReqSetupDim::newCovInventDimId(ReqSetup::newItemId(this.ItemId),this.CovInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the corresponding <c>ReqTrans</c> record for the current <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>ReqTrans</c> record.
    /// </returns>
    public ReqTrans reqTrans(boolean _forUpdate = false)
    {
        ReqTrans reqTrans;

        reqTrans.selectForUpdate(_forUpdate);

        if (this.RecId || this.ItemId || this.PlanVersion)
        {
            select firstonly reqTrans
                where reqTrans.PlanVersion          == this.PlanVersion
                   && reqTrans.RefType              == this.RefType
                   && reqTrans.RefId                == this.RefId
                   && reqTrans.InventTransOrigin    == 0
                   && reqTrans.ItemId               == this.ItemId
                   && reqTrans.CovInventDimId       == this.CovInventDimId;
        }

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDerived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ReqTrans</c> records derived for the current <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the <c>ReqTrans</c> records must be selected for update.
    /// </param>
    /// <returns>
    /// The <c>ReqTrans</c> records.
    /// </returns>
    public ReqTrans reqTransDerived(boolean _forUpdate = false)
    {
        ReqTrans reqTrans;

        reqTrans.selectForUpdate(_forUpdate);

        select reqTrans
            where reqTrans.PlanVersion == this.PlanVersion
               && reqTrans.RefType     == ReqTrans::derivedRefType(this.RefType)
               && reqTrans.RefId       == this.RefId;

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransTransferDemand</Name>
				<Source><![CDATA[
    public ReqTrans reqTransTransferDemand(boolean _forUpdate = false)
    {
        ReqTrans reqTrans;

        reqTrans.selectForUpdate(_forUpdate);

        if (this.RefType == ReqRefType::TransferPlannedOrder)
        {
            select reqTrans
                where reqTrans.PlanVersion              == this.PlanVersion             &&
                      reqTrans.RefType                  == ReqRefType::TransferDemand   &&
                      reqTrans.RefId                    == this.RefId;
        }

        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMCreated</Name>
				<Source><![CDATA[
    public void setBOMCreated(boolean _set = true)
    {
        if (_set)
        {
            if (! this.isBOMCreated())
            {
                if (this.isRouteCreated())
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::BOMRoute;
                }
                else
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::BOM;
                }
            }
        }
        else
        {
            if (this.isBOMCreated())
            {
                if (this.isRouteCreated())
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::Route;
                }
                else
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::None;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsDerivedDirectly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>IsDerivedDirectly</c> field of the current <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_setupDim">
    /// An instance of the <c>ReqSetupDim</c> class that holds the master planning settings for an item and
    /// coverage dimensions.
    /// </param>
    /// <param name="_issue">
    /// A <c>ReqPO</c> record that represents an issue transaction.
    /// </param>
    public void setIsDerivedDirectly(
        ReqSetupDim     _setupDim,
        ReqTrans        _issue = null)
    {
        LeanRuleData    leanRuleData;
        ReqTrans        reqTrans;

        switch (true)
        {
            case   _issue
                && _issue.IsDerivedDirectly:

                this.IsDerivedDirectly = NoYes::Yes;
                break;

            case this.RefType == ReqRefType::PlannedKanban:
                leanRuleData = _setupDim.leanRuleData(this.reqDateTime(), this.RefType, this.Qty);

                if (   leanRuleData
                    && leanRuleData.replenishmentStrategy() == LeanReplenishmentStrategy::Fixed)
                {
                    this.IsDerivedDirectly = NoYes::Yes;
                }
                break;

            case this.IsDerivedDirectly
                 && ! _issue:

                reqTrans = this.reqTrans();
                if (   ! reqTrans
                    || reqTrans.CovQty == 0
                    || (reqTrans.IsDerivedDirectly && ! reqTrans.reqTransDirectlyDerived().RecId))
                {
                    this.IsDerivedDirectly = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMinMaxQty</Name>
				<Source><![CDATA[
    public void setMinMaxQty(InventDimId _inventDimId = InventDim::inventDimIdBlank())
    {
        this.Qty = this.retrieveMinMaxQty(this, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveMinMaxQty</Name>
				<Source><![CDATA[
    [Hookable]
    private ReqQty retrieveMinMaxQty(ReqPO _reqPO, InventDimId _inventDimId)
    {
        ReqQty qty = 0;
        InventItemOrderSetupMap inventItemOrderSetupMap;

        switch (_reqPO.RefType)
        {
            case ReqRefType::ItemPlannedOrder:
                inventItemOrderSetupMap = InventItemPurchSetup::find(_reqPO.ItemId, _inventDimId);
                if (inventItemOrderSetupMap)
                { 
                    qty = InventTable::calculateOrderQuantity(inventItemOrderSetupMap,
															  this.CovInventDimId,
															  this.Qty,
															  InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId, 
															  ReqPORetrieveMinMaxQtyContext::mustShowDialog());
                }
                break;

            case ReqRefType::PmfPlannedProdBatch:
                qty = this.pmfSetMinMaxQty(_inventDimId, ReqPORetrieveMinMaxQtyContext::mustShowDialog());
                break;

            case ReqRefType::BOMPlannedOrder,
                ReqRefType::TransferPlannedOrder,
                ReqRefType::PlannedKanban:
                    inventItemOrderSetupMap = InventItemInventSetup::find(this.ItemId, _inventDimId);
                    if (inventItemOrderSetupMap)
                    {
                        qty = InventTable::calculateOrderQuantity(inventItemOrderSetupMap,
																  this.CovInventDimId,
															   	  this.Qty, 
															  	  InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId, 
																  ReqPORetrieveMinMaxQtyContext::mustShowDialog());
                    }
                break;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the value of the <c>Product</c> field based on the values in the <c>ItemId</c> and the <c>CovInventDimId</c> fields.
    /// </summary>
    private void setProductReference()
    {
        this.Product = InventTable::getDistinctProductRecId(this.ItemId, this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchIdFields</Name>
				<Source><![CDATA[
    void setPurchIdFields(
        PurchId     _purchId
        )
    {
        PurchTable purchTable = PurchTable::find(_purchId);
        if (purchTable.RecId)
        {
            this.VendId              = purchTable.OrderAccount;
            this.VendGroupId         = purchTable.VendGroup;

            this.ItemBuyerGroupId    = purchTable.ItemBuyerGroupId ? purchTable.ItemBuyerGroupId : this.ItemBuyerGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqDateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the order date and order delivery date fields.
    /// </summary>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that has the item coverage per dimension information.
    /// </param>
    /// <param name="_reqPlanData">
    /// A <c>ReqPlanData</c> object that holds all the plan data.
    /// </param>
    /// <param name="_adjustDateWithLockingFence">
    /// A Boolean that indicates whether the locking fence is considered when you set the order date;
    /// optional.
    /// </param>
    /// <remarks>
    /// In case the date is not adjusted with the locking fence a warning is produced in order to inform
    /// the user who the order was kept in the freezing time fence.
    /// </remarks>
    public void setReqDateFields(
        ReqSetupDim     _setupDim,
        ReqPlanData     _reqPlanData,
        boolean         _adjustDateWithLockingFence = true)
    {
        date            lockingFence;
        ReqTraceLogger  reqTraceLogger = _reqPlanData.reqTraceLogger();
        TimeFenceLocking timeFenceLocking;
        boolean allowsSchedulingStartDateBeforeToday = this.allowsSchedulingStartDateBeforeToday(_reqPlanData, _setupDim);

        #TimeConstants

        if (! _reqPlanData)
        {
            _reqPlanData = ReqPlanData::newReqPlanVersion(this.PlanVersion);
        }

        if (! this.ReqDate)
        {
            this.ReqDate = _reqPlanData.todaysdate();
        }

        this.ReqDate = _reqPlanData.schedMarginBackward(this.ReqDate, 0, _setupDim);

        if (this.ReqDate < _reqPlanData.todaysdate() && !allowsSchedulingStartDateBeforeToday)
        {
            this.ReqDate = _reqPlanData.todaysdate();
        }

        if (_reqPlanData.marginReceipt(_setupDim))
        {
            if (reqTraceLogger.loggingEnabled())
            {
                reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::ApplyReceiptMargin, [_reqPlanData.marginReceipt(_setupDim), this.ReqDate]));
            }

            if (this.RefType != ReqRefType::ItemPlannedOrder
                || !this.VendId
                || !this.ReqDateDlv
                || !_setupDim.parmReqSetup().vendTableCache(this.VendId).PurchCalendarId
                || !WorkCalendarDate::isDateOpen(_setupDim.purchCalendarId(this.VendId), this.ReqDateDlv))

            {
                this.ReqDateDlv  = _reqPlanData.schedMarginBackward(this.ReqDate,_reqPlanData.marginReceipt(_setupDim),_setupDim);
            }
        }
        else
        {
            this.ReqDateDlv  = this.ReqDate;
        }

        timeFenceLocking = _reqPlanData.timeFenceLocking(_setupDim);
        
        if (timeFenceLocking || !allowsSchedulingStartDateBeforeToday)
        {
            lockingFence = _reqPlanData.todaysdate() + timeFenceLocking;
        }

        if (this.ReqDateDlv < lockingFence)
        {
            if (_adjustDateWithLockingFence)
            {
                if (reqTraceLogger.loggingEnabled())
                {
                    reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::DeliveryDateAfterLocking, [_reqPlanData.timeFenceLocking(_setupDim)]));
                }

                this.ReqDateDlv  = _reqPlanData.schedMarginForward(_reqPlanData.todaysdate() + _reqPlanData.timeFenceLocking(_setupDim),0,_setupDim);

                if (_reqPlanData.marginReceipt(_setupDim))
                {
                    this.ReqDate = _reqPlanData.schedMarginForward(this.ReqDateDlv,_reqPlanData.marginReceipt(_setupDim),_setupDim);
                }
                else
                {
                    this.ReqDate = this.ReqDateDlv;
                }
            }
            else
            {
                warning(strFmt("@SYS338582", lockingFence));
            }
        }

        if (!ReqTrans::refTypeCanReserveWorkCenter(this.RefType))
        {
            this.SchedToDate = this.ReqDateDlv;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRouteCreated</Name>
				<Source><![CDATA[
    public void setRouteCreated(boolean _set = true)
    {
        if (_set)
        {
            if (! this.isRouteCreated())
            {
                if (this.isBOMCreated())
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::BOMRoute;
                }
                else
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::Route;
                }
            }
        }
        else
        {
            if (this.isRouteCreated())
            {
                if (this.isBOMCreated())
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::BOM;
                }
                else
                {
                    this.bomRouteCreated = ReqBOMRouteCreated::None;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSchedFromDate</Name>
				<Source><![CDATA[
    // <remarks>
    // Note! If you are changing this method then check if you also need to modify ReqSetupDim.calcPlannedReceiptDate accordingly
    // </remarks>
    public void setSchedFromDate(
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData
        )
    {
        boolean allowsSchedulingStartDateBeforeToday = this.allowsSchedulingStartDateBeforeToday(_reqPlanData, _setupDim);
        ReqDateDlv reqDateDlvOrig = this.ReqDateDlv;

        if (this.RefType == ReqRefType::ItemPlannedOrder)
        {
            this.setSchedFromDateItemPlannedOrder(_setupDim, _reqPlanData, allowsSchedulingStartDateBeforeToday);            
        }
        else if (this.RefType == ReqRefType::TransferPlannedOrder)
        {
            this.setSchedFromDateTransferPlannedOrder(_setupDim, _reqPlanData, allowsSchedulingStartDateBeforeToday);
        }        
        else
        {
            this.setSchedFromDateDefault(_setupDim, _reqPlanData, allowsSchedulingStartDateBeforeToday);            
        }

        if (this.ReqDateDlv != reqDateDlvOrig)
        {
           this.updateReqDateFromDlvDate(_setupDim, _reqPlanData);
        }

        this.ReqTimeOrder = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSchedFromDateItemPlannedOrder</Name>
				<Source><![CDATA[
    protected void setSchedFromDateItemPlannedOrder(
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData,
        boolean     _allowsSchedulingStartDateBeforeToday
        )
    {
        Days shipLeadDays = 0;

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            shipLeadDays = VendCustTransportPointLine::defaultTransportDaysByPostalAddress(_setupDim.vendorPostalAddress(this.VendId), _setupDim.deliveryPostalAddress(), _setupDim.vendorDlvMode(this.VendId));
            date shipDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Backward, this.SchedToDate, shipLeadDays, NoYes::No, _setupDim.purchaseVendorShipCalendar(this.VendId));
            // If the shipping date lands on a day where the vendor is not able to process purchases, work backwards to a date where the vendor is open for processing purchases.
            // This is because the lead time calculation must start on a valid vendor purchase calendar date.
            this.SchedFromDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Backward, shipDate, 0, 0, _setupDim.purchCalendarId(this.VendId));
        }
        else
        {
            this.SchedToDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Backward, this.SchedToDate, 0, 0, _setupDim.purchCalendarId(this.VendId));
            this.SchedFromDate = this.SchedToDate;
        }

        this.SchedFromDate = _reqPlanData.schedReqPoBackward(this.SchedFromDate,this,_setupDim.purchCalendarId(this.VendId));

        if (this.SchedFromDate < _reqPlanData.todaysdate() && !_allowsSchedulingStartDateBeforeToday)
        {
            this.SchedFromDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Forward, _reqPlanData.todaysdate(), 0, 0, _setupDim.purchCalendarId(this.VendId));
            this.SchedToDate   = _reqPlanData.schedReqPoForward(this.SchedFromDate,this,_setupDim.purchCalendarId(this.VendId));
            // If the use calendar days parameter is not activated for the purchase order lead time, this means that the delivery date can only fall on an open day, but the lead time can make use of the weekends
            // this is why we need to recalculate the order date backwards from the new delivery date.
            if (!this.CalendarDays)
            {                
                this.SchedFromDate = _reqPlanData.schedReqPoBackward(this.SchedToDate,this,_setupDim.purchCalendarId(this.VendId));
            }
            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                // If the vendor finishes processing a purchase order on a day where the vendor is not able to ship the product, work forwards to a date where the vendor is open for shipping.
                // This is because the shipping time calculation must start on a valid vendor shipping calendar date.
                this.SchedToDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Forward, this.SchedToDate, 0, NoYes::No, _setupDim.purchaseVendorShipCalendar(this.VendId));
                this.SchedToDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Forward, this.SchedToDate, shipLeadDays, NoYes::No, _setupDim.reqCalendarId());
            }

            this.ReqDateOrder  = _reqPlanData.schedMarginBackward(this.SchedFromDate,_reqPlanData.marginOrder(_setupDim),_setupDim,_setupDim.purchCalendarId(this.VendId));
        }
        else
        {
            this.ReqDateOrder = _reqPlanData.schedMarginBackward(this.SchedFromDate,_reqPlanData.marginOrder(_setupDim),_setupDim,_setupDim.purchCalendarId(this.VendId));
        }

        if (this.ReqDateOrder < _reqPlanData.todaysdate() && !_allowsSchedulingStartDateBeforeToday)
        {
            this.ReqDateOrder = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Forward, _reqPlanData.todaysdate(), 0, 0, _setupDim.purchCalendarId(this.VendId));
            this.SchedFromDate = _reqPlanData.schedMarginForward(this.ReqDateOrder,_reqPlanData.marginOrder(_setupDim),_setupDim,_setupDim.purchCalendarId(this.VendId));
            this.SchedToDate = _reqPlanData.schedReqPoForward(this.SchedFromDate,this,_setupDim.purchCalendarId(this.VendId));

            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                // If the vendor finishes processing a purchase order on a day where the vendor is not able to ship the product, work forwards to a date where the vendor is open for shipping.
                // This is because the shipping time calculation must start on a valid vendor shipping calendar date.
                this.SchedToDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Forward, this.SchedToDate, 0, NoYes::No, _setupDim.purchaseVendorShipCalendar(this.VendId));
                this.SchedToDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Forward, this.SchedToDate, shipLeadDays, NoYes::No, _setupDim.reqCalendarId());
            }
        }

        this.ReqDateDlv = this.SchedToDate;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSchedFromDateTransferPlannedOrder</Name>
				<Source><![CDATA[
    protected void setSchedFromDateTransferPlannedOrder(
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData,
        boolean     _allowsSchedulingStartDateBeforeToday
        )
    {
        CalendarId shippingCalendarId = _setupDim.shippingCalendarId();
        CalendarId transportCalendarId = _setupDim.transportCalendarId();
        CalendarId receivingCalendarId = _setupDim.reqCalendarId();

        if (ReqPOTransferLeadTimeFeature::isEnabled())
        {
            this.SchedFromDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Forward, _reqPlanData.todaysdate(), this.getTransferLeadTime(_setupDim), false, shippingCalendarId);
            this.SchedToDate = _reqPlanData.schedReqPoForward(this.SchedFromDate, this, transportCalendarId, receivingCalendarId);
            this.ReqDateOrder = _reqPlanData.schedMarginForwardWithCalendar(this.SchedFromDate, _reqPlanData.marginOrder(_setupDim), _setupDim, shippingCalendarId);

            if (ReqPOSetSchedFromDateTransferPlannedOrderFlight::instance().isEnabled() && this.ReqDateDlv > this.SchedToDate)
            {
                this.SchedToDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Backward, this.ReqDateDlv, this.getTransferLeadTime(_setupDim), false, receivingCalendarId);
                this.SchedFromDate = _reqPlanData.schedReqPoBackward(this.SchedToDate, this, transportCalendarId, shippingCalendarId);
                this.ReqDateOrder = _reqPlanData.schedMarginBackwardWithCalendar(this.SchedFromDate, _reqPlanData.marginOrder(_setupDim), _setupDim, shippingCalendarId);
            }
        }
        else
        {
            this.SchedToDate = _reqPlanData.workCalendarSched().schedDate(SchedDirection::Backward, this.ReqDateDlv, 0, false, receivingCalendarId);
            this.SchedFromDate = _reqPlanData.schedReqPoBackward(this.SchedToDate, this, transportCalendarId, shippingCalendarId);
            this.ReqDateOrder = _reqPlanData.schedMarginBackwardWithCalendar(this.SchedFromDate, _reqPlanData.marginOrder(_setupDim), _setupDim, shippingCalendarId);
        }

        boolean directionReversed = false;
        if (!_allowsSchedulingStartDateBeforeToday && this.ReqDateOrder < _reqPlanData.todaysdate())
        {
            directionReversed = true;
            this.ReqDateOrder = _reqPlanData.todaysdate();
            this.SchedFromDate = _reqPlanData.schedMarginForwardWithCalendar(this.ReqDateOrder, _reqPlanData.marginOrder(_setupDim), _setupDim, shippingCalendarId, '', SalesCheckForPickup::PrimaryCalendar);
        }

        // Always schedule forward again in case the shippingCalendar has caused the SchedFromDate to have a greater timespan than the transfer days
        this.SchedToDate   = _reqPlanData.schedReqPoForward(this.SchedFromDate, this, transportCalendarId, receivingCalendarId);
            
        if (directionReversed && (receivingCalendarId != shippingCalendarId || receivingCalendarId != transportCalendarId))
        {
            // The receiving calendar could have less opening days than the shipping/transport calendar so the timespan of the transfer can potentially be optimized
            date optimalSchedFromDate = _reqPlanData.schedReqPoBackward(this.SchedToDate, this, transportCalendarId, shippingCalendarId);
            if (optimalSchedFromDate > this.SchedFromDate)
            {
                this.SchedFromDate = optimalSchedFromDate;
                date optimalOrderDate = _reqPlanData.schedMarginBackwardWithCalendar(this.SchedFromDate, _reqPlanData.marginOrder(_setupDim), _setupDim, shippingCalendarId);
                if (optimalOrderDate > this.ReqDateOrder)
                {
                    this.ReqDateOrder = optimalOrderDate;
                }
            }
        }
            
        this.ReqDateDlv = this.SchedToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferLeadTime</Name>
				<Source><![CDATA[
    private LeadTime getTransferLeadTime(ReqSetupDim _setupDim)
    {
        LeadTime leadTime;
        InventItemInventSetup inventItemInventSetup = InventItemInventSetup::find(this.Itemid, this.CovInventDimId);

        switch (inventItemInventSetup.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::None:
            case SalesDeliveryDateControlType::SalesLeadTime:
                leadTime = inventItemInventSetup.LeadTime;
                break;
            default:
                leadTime = 0;
        }

        return leadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSchedFromDateDefault</Name>
				<Source><![CDATA[
    protected void setSchedFromDateDefault(
        ReqSetupDim _setupDim,
        ReqPlanData _reqPlanData,
        boolean     _allowsSchedulingStartDateBeforeToday
        )
    {
        date leadTimeFromDate  = _reqPlanData.schedReqPoBackward(this.ReqDateDlv,this,_setupDim.reqCalendarId());
        this.ReqDateOrder = _reqPlanData.schedMarginBackward(leadTimeFromDate,_reqPlanData.marginOrder(_setupDim),_setupDim);

        if (!_allowsSchedulingStartDateBeforeToday)
        {
            leadTimeFromDate  = max(_reqPlanData.todaysdate(), leadTimeFromDate);
            this.ReqDateOrder = max(_reqPlanData.todaysdate(), this.ReqDateOrder);
        }

        if (!ReqTrans::refTypeCanReserveWorkCenter(this.RefType))
        {
            this.SchedFromDate = _reqPlanData.schedMarginForward(this.ReqDateOrder,_reqPlanData.marginOrder(_setupDim),_setupDim);
            this.SchedToDate   = _reqPlanData.schedReqPoForward(this.SchedFromDate,this,_setupDim.reqCalendarId());
            this.ReqDateDlv    = this.SchedToDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendIdFields</Name>
				<Source><![CDATA[
    public void setVendIdFields(VendAccount _vendId, ReqSetup _reqSetup)
    {
        VendTable vendTable = VendTable::find(_vendId);
        if (vendTable.RecId)
        {
            this.VendId             = vendTable.AccountNum;
            this.VendGroupId        = vendTable.VendGroup;
            this.ItemBuyerGroupId   = _reqSetup.itemBuyerGroupId(_vendId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the lead time when the vendor is changed.
    /// </summary>
    /// <param name = "_setupDim">The <c>ReqSetupDim</c> object.</param>
    [Replaceable]
    protected void setLeadTime(ReqSetupDim _setupDim)
    {
        this.LeadTime     = _setupDim.leadTime();
        this.CalendarDays = _setupDim.leadTimeCalendarDays();
    }

]]></Source>
			</Method>
			<Method>
				<Name>supplyPrinciple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the supply principle of the current <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_reqPlanData">
    /// An <c>ReqPlanData</c> object that holds master planning settings.
    /// </param>
    /// <returns>
    /// An <c>ReqSupplyPrinciple</c> enumeration value that holds the supply principle.
    /// </returns>
    public ReqSupplyPrinciple supplyPrinciple(
        ReqPlanData             _reqPlanData        = null)
    {
        ReqSetupDim     reqSetupDim;
        LeanRuleData    leanRuleData;

        switch (this.RefType)
        {
            case ReqRefType::ItemPlannedOrder:
                return ReqSupplyPrinciple::Receipt;

            case ReqRefType::PmfPlannedProdBatch:
                //fallthrough to BOMPlannedOrder
            case ReqRefType::BOMPlannedOrder:
                return ReqSupplyPrinciple::Conversion;

            case ReqRefType::TransferPlannedOrder:
                return ReqSupplyPrinciple::Transfer;

            case ReqRefType::PlannedKanban:
                reqSetupDim = _reqPlanData ? _reqPlanData.newReqSetupDimReqPo(this) : this.reqSetupDim();
                if (_reqPlanData)
                {
                    reqSetupDim.parmLeanLocationCache(_reqPlanData.parmLeanLocationCache());
                }
                leanRuleData = reqSetupDim.leanRuleData(this.reqDateTime(),this.RefType,this.Qty);

                switch (true)
                {
                    case leanRuleData && leanRuleData.leanKanbanType() == LeanKanbanType::Manufacturing:
                        return ReqSupplyPrinciple::Conversion;

                    case leanRuleData && leanRuleData.leanKanbanType() == LeanKanbanType::Withdrawal:
                        return ReqSupplyPrinciple::Transfer;

                    default:
                        return ReqSupplyPrinciple::Conversion;
                }
        }

        return ReqSupplyPrinciple::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates this record and related data.
    /// </summary>
    /// <param name="_reqPlanData">
    /// A ReqPlanData instance to use;
    /// optional, if one is not specified or null is passed, a suitable one will be used.
    /// </param>
    /// <param name="_reqTrans">
    /// The related requirement transaction to update;
    /// optional, if one is not specified or null is passed, a suitable one will be used.
    /// </param>
    /// <param name="_fromInventLocationId">
    /// The ID of the source warehouse, to be used in planned transfer orders;
    /// optional if the current record is not a planned transfer.
    /// </param>
    /// <param name="_noExplosion">
    /// A Boolean value indication whether to skip the explosion;
    /// optional, the explosion will not be skipped if this parameter is not specified.
    /// </param>
    /// <param name="_reqTraceLogger">
    /// An instance of ReqTraceLogger to use; optional.
    /// </param>
    /// <param name="_scheduleOrder">
    /// A Boolean value that indicates whether to reschedule the delivery date;
    /// optional, the delivery date will be re-scheduled if not specified.
    /// </param>
    public void update(
        ReqPlanData         _reqPlanData            = null,
        ReqTrans            _reqTrans               = null,
        InventLocationId    _fromInventLocationId   = '',
        boolean             _noExplosion            = false,
        ReqTraceLogger      _reqTraceLogger         = null,
        boolean             _scheduleOrder          = true)
    {
        ReqPO                   reqPo_orig;

        ReqSetupDim             setupDim;

        WrkCtrScheduler_Req     scheduleReq;
        WrkCtrParmSchedule      parmSchedule;

        ReqCalcExplodePo        reqCalcExplodePo;

        boolean                 doScheduling;
        boolean                 doExplosion;

        ReqTrans                reqTransDerived;
        ReqTrans                reqTrans_orig;

        if (!_reqPlanData)
        {
            _reqPlanData = ReqPlanData::newReqPlanVersion(this.PlanVersion);
        }

        ttsbegin;

        reqPo_orig      = this.orig();

        if (! _reqTrans)
        {
            _reqTrans = this.reqTrans(true);
        }

        if (! _reqTrans.RecId)
        {
            ReqTransPOCreate::construct().insertFromReqPo(_reqTrans, reqPo_orig, false, _reqPlanData);
        }

        reqTrans_orig.data(_reqTrans);

        _reqTrans.initFromReqPo(this);

        setupDim = _reqPlanData.newReqSetupDim(_reqPlanData.newReqSetup(this.ItemId),this.CovInventDimId);
        this.setIsDerivedDirectly(setupDim);

        if (this.PurchId != reqPo_orig.PurchId)
        {
            this.setPurchIdFields(this.PurchId);
        }
        else if (this.VendId != reqPo_orig.VendId)
        {
            this.setVendIdFields(this.VendId, setupDim.setup());
            this.setLeadTime(setupDim);
        }

        if (this.Qty != reqPo_orig.Qty)
        {
            if (this.PurchQty == reqPo_orig.PurchQty)
            {
                this.initPurchQty();
            }
        }
        else
        if (this.PurchQty   != reqPo_orig.PurchQty   || this.PurchUnit  != reqPo_orig.PurchUnit)
        {
            this.initQtyFromPurchQty();
        }

        if (this.Qty        != reqPo_orig.Qty)
        {
            if (PdsGlobal::pdsIsCWItem(this.ItemId))
            {
                this.Qty =
                    PdsCatchWeight::cwRoundUpInventQty(this.ItemId, this.Qty);
                this.PdsCWReqQty = PdsCatchWeight::cwQty(this.ItemId, this.Qty);
            }

            this.CostAmount = 0;
        }

        // Change RefType
        if (reqPo_orig.RefType != this.RefType)
        {
            doExplosion = true;
            switch (reqPo_orig.supplyPrinciple())
            {
                case ReqSupplyPrinciple::Receipt:
                    this.VendId         = '';
                    this.VendGroupId    = '';
                    break;

                case ReqSupplyPrinciple::Conversion:
                    if (reqPo_orig.isBOMCreated())
                    {
                        this.ItemBomId          = '';
                        reqTrans_orig.deleteDerivedReqTrans(_reqPlanData);
                        this.setBOMCreated(false);
                    }
                    if (reqPo_orig.isRouteCreated())
                    {
                        this.ItemRouteId        = '';
                        reqTrans_orig.deleteRoute();
                        this.RouteJobsUpdated = NoYes::No;
                        this.setRouteCreated(false);
                    }
                    this.ReqTime            = 0;
                    break;

                case ReqSupplyPrinciple::Transfer:
                    reqTransDerived = reqPo_orig.reqTransDerived(true);
                    if (reqTransDerived.RecId)
                    {
                        reqTransDerived.deleteExplosionCoverage();
                        reqTransDerived.delete();
                    }
                    break;
            }

            this.initLeadTime(setupDim, _fromInventLocationId);

            switch (this.supplyPrinciple())
            {
                case ReqSupplyPrinciple::Receipt:
                    this.initVendId(setupDim,_reqPlanData);
                    break;

                case ReqSupplyPrinciple::Conversion:
                    this.initFromSetup(setupDim.setup(), _reqTraceLogger);
                    break;

                case ReqSupplyPrinciple::Transfer:
                    _reqTrans.initFromReqPo(this);
                    _reqTrans.createTransferDemand(this,_reqPlanData,_fromInventLocationId);
                    break;
            }

            this.initFromReqDate(setupDim, _reqPlanData, true, _scheduleOrder);
            this.initPurchQty(setupDim.setup());
        }

        if (reqPo_orig.ReqDateDlv != this.ReqDateDlv)
        {
            this.initFromReqDateDlv(setupDim, _reqPlanData, true, _scheduleOrder);

            if (ReqTrans::refTypeCanReserveWorkCenter(this.RefType))
            {
                doScheduling = true;
            }
        }

        if (reqPo_orig.ItemRouteId != this.ItemRouteId)
        {
            if (this.isRouteCreated())
            {
                reqTrans_orig.deleteRoute();
                this.RouteJobsUpdated = NoYes::No;
                this.setRouteCreated(false);
            }
        }

        if (reqPo_orig.ItemBomId != this.ItemBomId)
        {
            this.refreshYield(_reqTrans);
            if (this.isBOMCreated())
            {
                reqTrans_orig.deleteDerivedReqTrans(_reqPlanData);
                this.setBOMCreated(false);
            }
        }

        this.updateReqTrans(_reqTrans, _reqPlanData);

        boolean plannedBatchOrderPmfYieldChanged = ReqPoFirmSetYeildFromPlannedOrderFlight::instance().isEnabled() 
            && reqPo_orig.PmfYieldPct != this.PmfYieldPct
            && reqPo_orig.RefType == ReqRefType::PmfPlannedProdBatch;
        
        if (reqPo_orig.Qty != this.Qty || plannedBatchOrderPmfYieldChanged)
        {
            switch (this.supplyPrinciple())
            {
                case ReqSupplyPrinciple::Conversion :
                    _reqTrans.updateBOMQty(this,_reqPlanData);

                    _reqTrans.pmfUpdateCoProductsQty(_reqPlanData);

                    doScheduling = true;

                    if (abs(this.Qty) > abs(this.orig().Qty))
                    {
                        doExplosion = true;
                    }

                    break;

                case ReqSupplyPrinciple::Transfer  :
                    _reqTrans.updateTransferDemandQty(_reqPlanData);

                    if (abs(this.Qty) > abs(this.orig().Qty))
                    {
                        doExplosion = true;
                    }

                    break;
            }
        }

        if (reqPo_orig.ReqDateDlv != this.ReqDateDlv
            && this.supplyPrinciple() == ReqSupplyPrinciple::Transfer)
        {
            _reqTrans.updateTransferReqDate(this, _reqPlanData);
        }

        if ((reqPo_orig.ItemRouteId != this.ItemRouteId || !this.isRouteCreated())
            && _reqPlanData.mustTransBeScheduled(setupDim,this))
        {
            if (   this.ItemRouteId
                && ReqTrans::refTypeCanHaveRoute(this.RefType))
            {
                this.setRouteCreated(true);
                _reqTrans.createRoute(_reqPlanData);

                doScheduling     = true;
                doExplosion      = true;
            }
        }

        if ((reqPo_orig.ItemBomId != this.ItemBomId || !this.isBOMCreated())
            && _reqPlanData.mustTransBeExploded(setupDim,this))
        {
            if (   this.ItemBomId
                && ReqTrans::refTypeCanHaveBOM(this.RefType))
            {
                this.setBOMCreated(true);
                ReqBOMCreate::newReqTrans(_reqTrans, this,_reqPlanData).createBOM();

                _reqTrans.pmfCreateCoProducts(this, _reqPlanData);

                doExplosion = true;
            }
        }

        if (reqPo_orig.CovInventDimId != this.CovInventDimId)
        {
            this.setProductReference();

            _reqTrans.deleteCov(_reqPlanData);

            if (this.isBOMCreated())
            {
                _reqTrans.deleteDerivedReqTrans(_reqPlanData);
                ReqBOMCreate::newReqTrans(_reqTrans, this,_reqPlanData).createBOM();

                _reqTrans.pmfCreateCoProducts(this, _reqPlanData);

                doExplosion = true;
            }
        }

        super();

        if (    doScheduling
            && ReqTrans::refTypeCanReserveWorkCenter(this.RefType)
            && (! this.IsDerivedDirectly
            || ( _reqTrans.IsDerivedDirectly && ! _reqTrans.reqTransDirectlyDerived().RecId)) )

        {
            scheduleReq = WrkCtrScheduler_Req::newCheckLockingTTSLevel(false);

            parmSchedule = WrkCtrParmSchedule::newReqTransCoverage(_reqTrans,this,_reqPlanData,true, false, dateNull(), setupDim);
            scheduleReq.addWrkCtrParmSchedule(parmSchedule);

            // schedule
            scheduleReq.run();

            scheduleReq.dispose();
        }

        if (doExplosion
            && (! this.IsDerivedDirectly
            || ( _reqTrans.IsDerivedDirectly && ! _reqTrans.reqTransDirectlyDerived().RecId))
            && !_noExplosion
            && this.canRunExplosion()
            )
        {
            reqCalcExplodePo = ReqCalcExplode::newReqTrans(_reqTrans,_reqPlanData);
            reqCalcExplodePo.runOperation();

            reqCalcExplodePo.refreshUpdatedReqTrans(_reqTrans);
            reqCalcExplodePo.refreshUpdatedReqPo(this);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunExplosion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if explosion logic can run during update of planned order.
    /// </summary>
    /// <returns>True if explosion logic can run during the planned order update; otherwise, false.</returns>
    [Wrappable(true)]
    internal boolean canRunExplosion()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the requirement transaction.
    /// </summary>
    /// <param name="_reqTrans">The requirement transaction to update.</param>
    /// <param name="_reqPlanData">A ReqPlanData instance to use.</param>
    protected void updateReqTrans(ReqTrans _reqTrans, ReqPlanData _reqPlanData)
    {
        _reqTrans.initFromReqPo(this);
        _reqTrans.update(_reqPlanData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ItemBOMId</c> and <c>ItemRouteId</c> fields of the current <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_fieldName">
    /// A string value that holds name of the field to update.
    /// </param>
    /// <remarks>
    /// If, for example, the planned order quantity has changed, this logic makes sure that the
    /// <c>ItemBOMId</c> and <c>ItemRouteId</c> fields are updated.
    /// </remarks>
    public void updateBOMRoute(FieldName _fieldName)
    {
        ReqSetup    setup;

        if (this.supplyPrinciple() == ReqSupplyPrinciple::Conversion)
        {
            if (ReqTrans::refTypeCanHaveBOM(this.RefType))
            {
                if (!this.RecId && (!this.ItemBomId || this.RefType != ReqRefType::PmfPlannedProdBatch))
                {
                    setup = ReqSetup::newItemId(this.ItemId);

                    this.updateItemBOMId(setup);
                }
                else
                {
                    this.checkChangeBomId(_fieldName);
                }
            }

            if (ReqTrans::refTypeCanHaveRoute(this.RefType))
            {
                if (!this.RecId && (!this.ItemRouteId || this.RefType != ReqRefType::PmfPlannedProdBatch))
                {
                    setup = setup ? setup : ReqSetup::newItemId(this.ItemId);

                    this.updateItemRouteId(setup);
                }
                else
                {
                    this.checkChangeRouteId(_fieldName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ItemBOMId</c> field of the current <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_setup">
    /// A <c>ReqSetup</c> object that is used to update the <c>ItemBOMId</c> field.
    /// </param>
    protected void updateItemBOMId(ReqSetup _setup)
    {
        this.ItemBomId = '';
        this.ItemBomId = _setup.bomId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ItemRouteId</c> field of the current <c>ReqPO</c> record.
    /// </summary>
    /// <param name="_setup">
    /// A <c>ReqSetup</c> object that is used to update the <c>ItemRouteId</c> field.
    /// </param>
    protected void updateItemRouteId(ReqSetup _setup)
    {
        this.ItemRouteId = '';
        this.ItemRouteId = _setup.routeId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqDateOnTheServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the <c>ReqDateDlv</c> field and initializes related data.
    /// </summary>
    /// <param name="_reqDateDlv">
    ///     The date to set as delivery date.
    /// </param>
    public void updateReqDateOnTheServer(ReqDateDlv _reqDateDlv)
    {
        ReqPO thisPO;

        ttsBegin;
        thisPO = ReqPO::findRecId(this.RecId, true);
        thisPO.ReqDateDlv = _reqDateDlv;
        thisPO.initFromReqDateDlv(thisPO.reqSetupDim(), null, false, false);
        thisPO.update(null, null, '', false, null, false);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCovInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the coverage dimension for the planned order.
    /// </summary>
    /// <returns>
    ///    true if the coverage dimension is valid; otherwise, false.
    /// </returns>
    public boolean validateCovInventDim()
    {
        InventDim   inventDim = this.inventDim();
        boolean     result    = WHSInventStatus::allowCreatePlannedOrder(inventDim.InventStatusId);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean ret;

        ret = super(_p1);

        if (ret && #PdsApprovedVendorListEnabled)
        {
            if (_p1 == fieldNum(ReqPO, ItemId) || _p1 == fieldNum(ReqPO, VendId))
            {
                ret = ret && this.pdsCheckApprovedVendorList();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(
        FieldName _fieldName,
        int       _arrayIndex = 1)
    {
        boolean ret;

        PmfFormulaCoBy  pmfFormulaCoBy;
        BOMVersion      bomVersion;
        InventTable     inventTable = InventTable::find(this.ItemId);

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case (fieldStr(ReqPO, Qty)) :
                if (this.Qty <= 0)
                {
                    ret = checkFailed("@SYS50502");
                }
                break;

            case (fieldStr(ReqPO, TransferId)) :
                {
                    ret = this.validateTransferOrder();
                }
                break;

            case (fieldStr(ReqPO, PurchQty)) :
                if (this.RefType == ReqRefType::ItemPlannedOrder && this.PurchQty <= 0)
                {
                    ret = checkFailed("@SYS50502");
                }

                break;

            case (fieldStr(ReqPO, VendId)) :

                if (this.PurchId)
                {
                    if (PurchTable::find(this.PurchId).OrderAccount != this.VendId)
                    {
                        ret = checkFailed("@SYS70025");
                    }
                }
                break;

            case (fieldStr(ReqPO, ItemId)) :

                if (this.RefType == ReqRefType::BOMPlannedOrder)
                {
                    if (! InventTable::find(this.ItemId).inventItemType().canBeProduced())
                    {
                        ret = checkFailed(strFmt("@SYS78161",InventTable::find(this.ItemId).ItemType));
                    }
                }

                if (this.RefType == ReqRefType::TransferPlannedOrder)
                {
                    if (!EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventLocationId)))
                    {
                        ret = checkFailed("@SYS70037");
                    }
                }

                if (this.RefType == ReqRefType::PmfPlannedProdBatch)
                {
                    if (!inventTable.isFormulaAllowed() && inventTable.PmfProductType == PmfProductType::None)
                    {
                        ret = checkFailed(strFmt("@PRO2374", InventTable::find(this.ItemId).ItemType));
                    }
                }

                if (! InventTable::find(this.ItemId).isStocked())
                {
                    ret = checkFailed("@SYS190615");
                }

                break;

            case (fieldStr(ReqTrans, ItemRouteId)):
                if (   this.RecId
                    && this.ItemRouteId)
                {
                    ret = ProdTable::validateRouteId(this.ItemRouteId,this.ItemId,this.inventDim());
                }
                break;

            case (fieldStr(ReqTrans, ItemBomId)):
                if (   this.RecId
                    && this.ItemBomId)
                {
                    ret = ProdTable::validateBOMId(this.ItemBomId,this.ItemId,this.inventDim());
                }
                break;
            case (fieldStr(ReqPO, PdsCWReqQty)) :
                if (PdsGlobal::pdsIsCWItem(this.ItemId) && this.PdsCWReqQty <= 0)
                {
                    ret = checkFailed("@SYS50502");
                }
                break;

            case fieldStr(ReqPO, PmfPlanningItemId) :
                if (InventTable::find(this.ItemId).PmfProductType == PmfProductType::Co_Product
                    && this.PmfPlanningItemId != "")
                {
                    select firstonly RecId from pmfFormulaCoBy where
                        pmfFormulaCoBy.ItemId == this.ItemId
                        join RecId, ItemId
                        from bomVersion
                        where bomVersion.RecId      == pmfFormulaCoBy.bomVersionRefRecId
                            && bomVersion.ItemId    == this.PmfPlanningItemId;

                    if (pmfFormulaCoBy.RecId == 0)
                    {
                        ret = checkFailed(strFmt("@PRO2636", this.ItemId, this.PmfPlanningItemId));
                    }
                }

                break;

            default:
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransferOrder</Name>
				<Source><![CDATA[
    public boolean validateTransferOrder(
        InventLocationId _fromInventLocationId = '',
        InventLocationId _toInventLocationId = '')
    {
        boolean             ret = true;
        InventTransferTable inventTransferTable;
        InventLocationId    fromInventLocationId = _fromInventLocationId;
        InventLocationId    toInventLocationId = _toInventLocationId;

        if (this.TransferId)
        {
            if (!fromInventLocationId)
            {
                fromInventLocationId = this.reqTransDerived().inventDim().InventLocationId;
            }
            if (!toInventLocationId)
            {
                toInventLocationId = this.inventDim().InventLocationId;
            }

            inventTransferTable = InventTransferTable::find(this.TransferId);

            if (toInventLocationId != inventTransferTable.InventLocationIdTo)
            {
                ret = checkFailed(strFmt("@SYS101203",
                      toInventLocationId, inventTransferTable.InventLocationIdTo));
            }
            if (fromInventLocationId != inventTransferTable.InventLocationIdFrom)
            {
                ret = checkFailed(strFmt("@SYS101204",
                      fromInventLocationId, inventTransferTable.InventLocationIdFrom));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        InventTable inventTable;

        if (!this.validateQuantity())
        {
            return checkFailed("@SYS50502");
        }

        ret = super();

        if (#PmfEnabled
            && ret
            && this.RefType != ReqRefType::PmfPlannedProdBatch)
        {
            inventTable = InventTable::find(this.ItemId);

            if (inventTable.PmfProductType == PmfProductType::MainItem)
            {
                ret = checkFailed("@PRO2425");
            }
        }

        if (ret)
        {
            ret = this.validateTransferOrder();
        }

        if (ret)
        {
            ret = this.pdsCWQtyValidation();
        }

        if (ret)
        {
            ret = this.validateCovInventDim();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity.
    /// </summary>
    /// <returns>true if planned order quantity is valid; otherwise, false.</returns>
    protected boolean validateQuantity()
    {
        return this.Qty > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendGroupName</Name>
				<Source><![CDATA[
    public display Description vendGroupName()
    {
        return VendGroup::name(this.VendGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    public display VendName vendName()
    {
        return VendTable::find(this.VendId).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ReqPO</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record for which to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from reqPO
                    where reqPO.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ReqPO find(
        RefRecId         _reqPlanVersionRefRecId,
        InventTransRefId _refId,
        boolean          _forupdate = false)
    {
        ReqPO   reqPO;

        if (_refId)
        {
            reqPO.selectForUpdate(_forupdate);

            select firstonly reqPO
                where reqPO.PlanVersion             == _reqPlanVersionRefRecId   &&
                      reqPO.RefId                   == _refId;
        }

        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ReqPO</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    public static ReqPO findRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        ReqPO reqPO;

        if (_recId)
        {
            reqPO.selectForUpdate(_forUpdate);

            select firstonly reqPO
                where reqPO.RecId == _recId;
        }

        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasApprovedOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there are approved planned orders in the <c>ReqPO</c> table.
    /// </summary>
    /// <param name="_reqPlanVersionRefRecId">
    /// The ID of the master plan version.
    /// </param>
    /// <returns>
    /// true if there are approved orders in the <c>ReqPO</c> table; otherwise, false.
    /// </returns>
    public static boolean hasApprovedOrders(RefRecId _reqPlanVersionRefRecId)
    {
        ReqPO   reqPO;

        return
        (
            select firstonly RecId
            from             reqPO
            where            reqPO.PlanVersion             == _reqPlanVersionRefRecId
                             && reqPO.ReqPOStatus          == ReqPOStatus::Approved
        ).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intvRefDate</Name>
				<Source><![CDATA[
    public static TransDate intvRefDate()
    {
        return 01\01\2002;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlannedOrder</Name>
				<Source><![CDATA[
    public static boolean isPlannedOrder(ReqRefType _refType)
    {
        return _refType == ReqRefType::BOMPlannedOrder  ||
               _refType == ReqRefType::ItemPlannedOrder ||
               _refType == ReqRefType::TransferPlannedOrder
                    || _refType == ReqRefType::PmfPlannedProdBatch

                ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>ReqPO</c> entity referenced by the <c>InventTransRefId</c> reference.
    /// </summary>
    /// <param name="_caller">The caller of the method.</param>
    /// <param name="_refId">The reference for the entity.</param>
    /// <param name="_planVersion">The plan version.</param>
    /// <param name="_openMode">The mode to open the form in.</param>
    /// <returns>true if the <c>jumpRef</c> was successful; otherwise, false.</returns>
    public static boolean jumpRefRefId(Object _caller, InventTransRefId _refId, RefRecId _planVersion, OpenMode _openMode = OpenMode::Auto)
    {
        ReqPO               reqPO;

        void jumpRef(Common jumpToTable, str jumpToMenuItem)
        {
            Args                args;
            MenuFunction        menuFunction;
            args = new Args();

            args.record(jumpToTable);
            args.caller(_caller);
            args.lookupRecord(jumpToTable);
            args.openMode(_openMode);
            menuFunction = new MenuFunction(jumpToMenuItem, MenuItemType::Display);
            menuFunction.run(args);
        }

        reqPO = ReqPO::find(_planVersion,_refId);
        if (reqPO)
        {
            jumpRef(reqPO,menuitemDisplayStr(ReqPO));
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsModifyQty</Name>
				<Source><![CDATA[
    public static void pdsModifyQty(ReqPO _reqPO, FieldId _fieldId)
    {
        ReqSetup    setup;

        if (PdsGlobal::pdsIsCWItem(_reqPO.ItemId))
        {
            _reqPO.Qty = PdsCatchWeight::inventQty(
                            _reqPO.ItemId,
                            _reqPO.PdsCWReqQty);
        }

        _reqPO.Qty = decRound(
                        _reqPO.Qty,
                        UnitOfMeasure::findBySymbol(
                            InventTableModule::find(
                             _reqPO.ItemId,
                             ModuleInventPurchSales::Invent).UnitId).DecimalPrecision);

        if (! _reqPO.RecId)
        {
            if (ReqCalcTradeAgreementDisregardLeadTimeRespectedFlight::instance().isEnabled())
            {
                _reqPO.initLeadTime(_reqPO.reqSetupDim());
            }

            _reqPO.initVendId(_reqPO.reqSetupDim());
            _reqPO.initFromReqDateDlv(_reqPO.reqSetupDim());

            if (_reqPO.RefType == ReqRefType::BOMPlannedOrder)
            {
                setup = ReqSetup::newItemId(_reqPO.ItemId);

                _reqPO.ItemBomId      = '';
                _reqPO.ItemRouteId    = '';

                _reqPO.ItemBomId      = setup.bomId(_reqPO);
                _reqPO.ItemRouteId    = setup.routeId(_reqPO);
            }
        }
        else if (_reqPO.RefType == ReqRefType::BOMPlannedOrder || _reqPO.RefType == ReqRefType::PmfPlannedProdBatch)
        {
            _reqPO.checkChangeBomId(fieldId2name(tableNum(ReqPO), _fieldId));
            _reqPO.checkChangeRouteId(fieldId2name(tableNum(ReqPO), _fieldId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBomFormulaReqRefType</Name>
				<Source><![CDATA[
    public static ReqRefType pmfBomFormulaReqRefType(
        PmfBOMFormula _pmfBOMFormula)
    {
        ReqRefType  reqRefType = ReqRefType::BOMPlannedOrder;

        switch (_pmfBOMFormula)
        {
            case PmfBOMFormula::BOM         :
                reqRefType = ReqRefType::BOMPlannedOrder;
            case PmfBOMFormula::Formula     :
                reqRefType = ReqRefType::PmfPlannedProdBatch;
        }

        return reqRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoType2ReqRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a master planning reference type based on an order type.
    /// </summary>
    /// <param name="_reqPOType">
    /// The order type.
    /// </param>
    /// <param name="_isFormulaItem">
    /// A Boolean value that indicates whether the item for which to get the order type is a formula item;
    /// optional.
    /// </param>
    /// <returns>
    /// A master planning reference type.
    /// </returns>
    public static ReqRefType reqPoType2ReqRefType(ReqPOType _reqPOType
                                                                , boolean _isFormulaItem = false
    )
    {
        switch (_reqPOType)
        {
            case ReqPOType::Production  :
                return _isFormulaItem ? ReqRefType::PmfPlannedProdBatch : ReqRefType::BOMPlannedOrder;
            case ReqPOType::Purch       :
                return ReqRefType::ItemPlannedOrder;
            case ReqPOType::Transfer    :
                return ReqRefType::TransferPlannedOrder;
            case ReqPOType::Kanban      :
                return ReqRefType::PlannedKanban;
        }
        return ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqRefType2ReqPoType</Name>
				<Source><![CDATA[
    public static ReqPOType reqRefType2ReqPoType(ReqRefType _reqRefType)
    {
        return ReqRefTypeDescriptor::newFromReqRefType(_reqRefType).reqPOType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReqPOType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the type of the planned order.
    /// </summary>
    /// <returns>
    ///     A value of the <c>ReqPOType</c> enumeration.
    /// </returns>
    public display ReqPOType displayReqPOType()
    {
        return ReqPO::reqRefType2ReqPoType(this.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toolTipRecord</Name>
				<Source><![CDATA[
    public str toolTipRecord()
    {
        return strfmt('%1, %2, %3', enum2str(ReqPO::reqRefType2ReqPoType(this.RefType)), this.refid, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderQuantityPerCoverageSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the quantity field of this record based on the coverage settings of the related product.
    /// </summary>
    /// <param name="_setupDim">
    ///    A <c>reqSetupDim</c> object which holds master planning setting for a specific item and coverage dimensions.
    /// </param>
    /// <param name="_reqTraceLogger">
    ///     The active instance of the master planning trace logger.
    /// </param>
    public void adjustOrderQuantityPerCoverageSettings(
        ReqSetupDim     _setupDim,
        ReqTraceLogger  _reqTraceLogger)
    {
        boolean     traceLoggingEnabled = (_reqTraceLogger && _reqTraceLogger.loggingEnabled());
        ReqSetup    setup = _setupDim.setup();
        InventQty   qty;
        InventQty   qtyMultiple = decRound(_setupDim.quantity(this.RefType), setup.inventDecimals());
        InventQty   requestedOrderQty = this.Qty;
        InventQty   highestQty = _setupDim.highestQty();

        if ((highestQty < qtyMultiple))
        {
            highestQty = qtyMultiple;
        }

        if (this.Qty < _setupDim.lowestQty())
        {
            if (traceLoggingEnabled)
            {
                _reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::OrderSizeLessThanMinSize, [this.Qty, _setupDim.lowestQty()]));
            }

            this.Qty = _setupDim.lowestQty();
        }

        if (this.Qty > highestQty && highestQty >= _setupDim.lowestQty() && highestQty >  0)
        {
            if (traceLoggingEnabled)
            {
                _reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::OrderSizeHigherThanMaxSize, [this.Qty, highestQty]));
            }

            this.Qty = highestQty;
        }

        this.Qty = roundUpDec(this.Qty, setup.inventDecimals());

        if (this.RefType == ReqRefType::PmfPlannedProdBatch)
        {
            this.Qty = this.pmfSetMinMaxQty(this.CovInventDimId, false);
        }
        else if (_setupDim.quantity(this.RefType)) // Rounding regarding to inventory quantity.
        {
            if (traceLoggingEnabled)
            {
                _reqTraceLogger.writeLog(ReqTraceLogMessageDetail::newDetail(ReqTraceMessageDetailType::OrderSizeRoundedToInventSize, [this.Qty, qtyMultiple]));
            }

            qty = round(this.Qty, qtyMultiple);

            if (qty < this.Qty)
            {
                qty = qty + qtyMultiple;
            }
                
            InventQty origQty = qty;

            if (qty > highestQty && highestQty >  0)
            {
                qty = qty - qtyMultiple;

                // The resulting count must be greater than 0 to avoid posting errors.
                // qty <= 0 occurs in certain situations when qtyMultiple is greater than the highest Qty.
                if (qty <= 0)
                {
                    qty = origQty;
                }
            }
                
            this.Qty = qty;
        }

        // Ensure that not too many orders are created for a single demand
        // to prevent performance problems due to incorrect setup.
        if (this.Qty > 0 && (requestedOrderQty / this.Qty) > ReqPO::getMaximumNumberOfPlannedOrdersForSingleDemand())
        {
            warning(strFmt("@SCMPlanning:ReqMaxNumberOfPlannedOrdersForSingleIssueExceeded",
                this.Qty,
                requestedOrderQty,
                ReqPO::getMaximumNumberOfPlannedOrdersForSingleDemand()));

            this.Qty = requestedOrderQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumNumberOfPlannedOrdersForSingleDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum number of planned orders to be created for a single demand.
    /// </summary>
    /// <returns>The maximum number of planned order.</returns>
    /// <remarks>
    /// This method is replaceable and default value is 500. The maximum number can be modified by request.
    /// </remarks>
    [Replaceable]
    public static int getMaximumNumberOfPlannedOrdersForSingleDemand()
    {
        return 500;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory unit of the associated item.
    /// </summary>
    /// <returns>The inventory unit id.</returns>
    public display UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the product.
    /// </summary>
    /// <returns>The name of the product.</returns>
    [SysClientCacheDataMethod]
    public display EcoResProductName productName()
    {
        return EcoResProductTranslation::findByProductLanguage(this.Product, SystemParameters::getSystemLanguageId()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAnySalesLineForReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a sales line corresponding to the given planned order.
    /// </summary>
    /// <param name = "_reqPO">A planned order.</param>
    /// <returns>A <c>SalesLine</c> record corresponding to the given planned order.</returns>
    /// <remarks>
    /// Even if the planned purchase order covers multiple sales lines the method will return only one of them.
    /// </remarks>
    public static SalesLine findAnySalesLineForReqPO(ReqPO _reqPO)
    {
        InventTransOrigin inventTransOrigin;
        ReqTrans    reqTransSettled;
        ReqTransCov reqTransCov;
        ReqTrans    reqTrans;
        SalesLine   salesLine;

        select forceselectorder firstonly RecId from reqTrans
            where reqTrans.RefType            == _reqPO.RefType
                && reqTrans.RefId             == _reqPO.RefId
                && reqTrans.PlanVersion       == _reqPO.PlanVersion
                && reqTrans.InventTransOrigin == 0
                && reqTrans.ItemId            == _reqPO.ItemId
                && reqTrans.CovInventDimId    == _reqPO.CovInventDimId
            join RecId from reqTransCov
                where reqTransCov.ReceiptRecId == reqTrans.RecId
            join RecId from reqTransSettled
                where reqTransSettled.RecId    == reqTransCov.IssueRecId
                    && reqTransSettled.RefType == ReqRefType::Sales
            join RecId from inventTransOrigin
                where inventTransOrigin.RecId == reqTransSettled.InventTransOrigin
            join RecId, ProjId, DefaultDimension, ActivityNumber, SalesId, InventTransId, ProjCategoryId, ProjLinePropertyId from salesLine
                where salesLine.InventTransId == inventTransOrigin.InventTransId
                    && salesLine.QtyOrdered   >= _reqPO.Qty
                    && salesLine.ProjId; // Planned order not split

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAgreementLineForAutoMatchFromReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the best agreement line to associate with the given planned order.
    /// </summary>
    /// <param name="_reqPO">A planned order.</param>
    /// <param name="_checkLimits">A Boolean value that indicates whether to check the agreed maximum and minimum amounts and remaining quantity or amount; optional.</param>
    /// <param name="_warningReportList">A List containing value that indicates whether to report warning that agreementLine exceeds the maximum limits; optional.</param>
    /// <returns>The best agreement line to associate with the given planned order.</returns>
    internal static AgreementLine findAgreementLineForAutoMatchFromReqPO(ReqPo _reqPO, boolean _checkLimits = false, List _warningReportList = null, ProjId _projId = '')
    {
        PurchLine purchLine;
        purchLine.ProjId = _projId;
        purchLine.initFromReqPO(_reqPO);
        purchLine.VendAccount  = _reqPO.VendId;
        purchLine.DeliveryDate = _reqPO.ReqDateDlv;
        purchLine.CurrencyCode = VendTable::find(purchLine.VendAccount).Currency;

        AgreementHeaderRecId matchingAgreement;
        
        if (ReqPOFirmSetPurchaseAgreementFromPurchaseOrderLinkFlight::instance().isEnabled())
        {
            PurchTable purchOrder = PurchTable::find(_reqPO.PurchId);

            if (purchOrder)
            {
                matchingAgreement = purchOrder.MatchingAgreement;
            }
        }
        
        return AgreementLine::findLineForAutoMatch(purchLine, matchingAgreement, _checkLimits, _warningReportList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the source warehouse if the current <c>ReqTrans</c> is a planned transfer order receipt.
    /// Otherwise, does nothing.
    /// </summary>
    /// <param name = "_fromInventLocationId">The id of the source warehouse.</param>
    /// <remarks>The source warehouse is updated on the derived planned transfer shipment <c>ReqTrans</c>.</remarks>
    internal void setFromInventLocationId(InventLocationId _fromInventLocationId)
    {
        if (this.RefType == ReqRefType::TransferPlannedOrder)
        {
            this.reqTrans().setFromInventLocationId(_fromInventLocationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get BOM date used by the order.
    /// </summary>
    /// <returns>
    ///    The BOM date used by the order.
    /// </returns>
    internal TransDate getBOMDate()
    {
        return ReqSetup::getBomDate(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124124</DeveloperDocumentation>
	<FormRef>ReqPo</FormRef>
	<Label>@SYS25536</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>RefType</TitleField1>
	<TitleField2>RefId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RefIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>RefIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ReqRoute</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ReqRoute</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DELETED</Name>
			<Label>@SYS26528</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Groups</Name>
			<Label>@SYS1177</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CovInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsForecastPurch</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeadTime</Name>
			<Label>@SYS14679</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeadTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderGroup</Name>
			<Label>@SYS69861</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDateOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqTimeOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWMain</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWReqQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PDSPegging</Name>
			<Label>@PSC355</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntvQr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntvMth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntvWk</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedProductionOrders</Name>
			<Label>@SYS12742</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBomId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedPurchaseOrders</Name>
			<Label>@SYS5151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedTransferOrder</Name>
			<Label>@SYS58078</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PmfPlanning</Name>
			<Label>@PRO413</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PmfPlanningItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfYieldPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PmfBulkOrd</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSC</Name>
			<Label>@PSC78</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PMFSequenced</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Requirement</Name>
			<Label>@SYS11370</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanningPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Scheduled</Name>
			<Label>@SYS11771</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchedFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPOStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Various</Name>
			<Label>@SYS28008</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMRouteCreated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteJobsUpdated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsDerivedDirectly</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PlanVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchedMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedProductionOrdersAll</Name>
			<Label>@SYS12742</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBomId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRouteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReqQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedPurchaseOrdersAll</Name>
			<Label>@SYS5151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReqQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedTransferOrderAll</Name>
			<Label>@SYS58078</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReqQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMRouteCreated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqBOMRouteCreated</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalendarDays</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CovInventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCovInventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntvMth</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntvMth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntvQr</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntvQr</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>IntvWk</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntvWk</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDerivedDirectly</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqIsDerivedDirectly</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsForecastPurch</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqIsForecastPurch</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBomId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS22298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBuyerGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBuyerGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRouteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RouteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeadTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeadTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWReqQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWReqQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PmfBulkOrd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfBulkOrd</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PmfPlanningItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfPlanningItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PMFSequenced</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PMFSequenced</ExtendedDataType>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PmfYieldPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfYieldPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS23482</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchUnit</ExtendedDataType>
			<Label>@SYS22997</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReqDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReqDateDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDateDlv</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReqDateOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDateOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqPOStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ReqPOStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ReqTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqTime</ExtendedDataType>
			<Label>@SYS8758</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ReqTimeOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqTimeOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RouteJobsUpdated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS10162</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SchedFromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SchedMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>SchedMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SchedToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SchedToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferIdRequested</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemPrimaryVendId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlanningPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanningPriority</ExtendedDataType>
			<FeatureClass>ReqPriorityBasedPlanningFeature</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReqDateOrder</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BuyerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReqPOStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReqDateOrder</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CovInventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IsForecastPurch</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlanVersionRecIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanVersion</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBomId</Name>
					<Field>ItemBomId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBuyerGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBuyerGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBuyerGroupId</Name>
					<Field>ItemBuyerGroupId</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CovInventDimId</Name>
					<Field>CovInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemGroupId</Name>
					<Field>ItemGroupId</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfPlanningItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PmfPlanningItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReqPO</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PmfPlanningItemId</Name>
					<SourceEDT>PmfPlanningItemId</SourceEDT>
					<Field>PmfPlanningItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Unit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlannedOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchUnit</Name>
					<Field>PurchUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqPlanVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PlanVersion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlannedOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanVersion</Name>
					<Field>PlanVersion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqRoute</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS124125</EntityRelationshipRole>
			<RelatedTable>ReqRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RequirementRoute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlannedOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanVersion</Name>
					<Field>PlanVersion</Field>
					<RelatedField>PlanVersion</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>RefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EntityRelationshipRole>@SYS124126</EntityRelationshipRole>
			<RelatedTable>ReqTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NetRequirement</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>PlannedOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>RefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefType</Name>
					<Field>RefType</Field>
					<RelatedField>RefType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanVersion</Name>
					<Field>PlanVersion</Field>
					<RelatedField>PlanVersion</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RequestedInventTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RequestedInventTransferTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ReqPO</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferId</Name>
					<Field>TransferId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TransferStatus_Extern</Name>
					<RelatedField>TransferStatus</RelatedField>
					<ValueStr>InventTransferStatus::Created</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransferIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RouteTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RouteTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRouteId</Name>
					<Field>ItemRouteId</Field>
					<RelatedField>RouteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendGroupId</Name>
					<Field>VendGroupId</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendId</Name>
					<Field>VendId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>