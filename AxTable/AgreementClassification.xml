<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementClassification</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementClassification extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>AgreementClassification</c> record can be deleted.
    /// </summary>
    /// <returns>
    /// true if the <c>AgreementClassification</c> record can be deleted; otherwise, false.
    /// </returns>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && this.IsImmutable == NoYes::Yes)
        {
            ret = checkFailed("@SYS301388");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(AgreementClassification, Subcontractor_PSN):
                    if (this.Subcontractor_PSN == NoYes::No && PurchAgreementHeader::existByAgreementClassification(this.RecId))
                    {
                        ret = checkFailed(strFmt("@SPS1369",
                                fieldid2pname(this.TableId, _fieldIdToCheck), tableid2pname(tableNum(PurchAgreementHeader))));
                    }
                    break;

                case fieldNum(AgreementClassification, Certification_PSN):
                    if (this.Certification_PSN == NoYes::No && PurchAgreementHeader::existByAgreementClassification(this.RecId))
                    {
                        ret = checkFailed(strFmt("@SPS1369",
                                fieldid2pname(this.TableId, _fieldIdToCheck), tableid2pname(tableNum(PurchAgreementHeader))));
                    }
                    break;

                case fieldNum(AgreementClassification, Activity_PSN):
                    if (this.Activity_PSN == NoYes::No && PurchAgreementHeader::existByAgreementClassification(this.RecId))
                    {
                        ret = checkFailed(strFmt("@SPS1369",
                                fieldid2pname(this.TableId, _fieldIdToCheck), tableid2pname(tableNum(PurchAgreementHeader))));
                    }
                    break;
                case fieldNum(AgreementClassification, DirectInvoiceEnable_PSN):
                    if (AgreementClassificationDirectInvoiceEnableValidateFlight::instance().isEnabled()
                        && PurchAgreementHeader::existByAgreementClassification(this.RecId))
                    {
                        ret = checkFailed(strFmt("@SCM:AgreementClassificationValidateField",
                                fieldid2pname(this.TableId, _fieldIdToCheck), tableid2pname(tableNum(PurchAgreementHeader))));
                    }
                    break;
            }
        }

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(AgreementClassification, PrimaryResponsibleWorker):
                case fieldNum(AgreementClassification, SecondaryResponsibleWorker):
                    if (this.PrimaryResponsibleWorker
                        && (this.PrimaryResponsibleWorker == this.SecondaryResponsibleWorker))
                    {
                        ret = checkFailed(strFmt("@SCM:ErrorSecondaryResponsibleWorkerSameAsThePrimary"));
                    }
                    else if (!this.PrimaryResponsibleWorker && this.SecondaryResponsibleWorker)
                    {
                        ret = checkFailed(strFmt("@SCM:ErrorSecondaryResponsibleWorkerWithoutAPrimary"));
                    }

                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>AgreementClassification</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementClassification</c> table; otherwise, an empty record.
    /// </returns>
    static public AgreementClassification find( recId   _recId,
                                                boolean _forUpdate = false)
    {
        AgreementClassification agreementClassification;

        if (_recId)
        {
            if (_forUpdate)
            {
                agreementClassification.selectForUpdate(_forUpdate);
            }

            select agreementClassification
            where agreementClassification.RecId == _recId;
        }

        return agreementClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateAgreementClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a default instance of the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name="_agreementRelationType">
    /// The input parameter that defines the relation type for the <c>AgreementClassification</c> table to
    /// find or create.
    /// </param>
    /// <returns>
    /// An <c>AgreementClassification</c> buffer that contains the instance data that was found or created.
    /// </returns>
    /// <remarks>
    /// The supported entities for the <paramref name="_agreementRelationType" /> parameter are the
    /// <c>SalesAgreementHeader</c> table, which is the default, and the <c>PurchAgreementHeader</c> table.
    /// </remarks>
    public static AgreementClassification findOrCreateAgreementClassification(relationType _agreementRelationType)
    {
        relationType                agreementRelationType = tablenum(SalesAgreementHeader);
        str                         agreementClassificationName;

        // _agreementRelationType evaluation: SalesAgreementHeader is default.
        switch (_agreementRelationType)
        {
            case tablenum(PurchAgreementHeader):
                agreementRelationType = tablenum(PurchAgreementHeader);
                agreementClassificationName = "@SYS301169";
                break;
            default:
                agreementRelationType = tablenum(SalesAgreementHeader);
                agreementClassificationName = "@SYS301170";
        }

        return AgreementClassification::findOrCreateAgreementClassificationByName(agreementClassificationName, agreementRelationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateAgreementClassificationByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a named instance of the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name = "_classificationName">
    /// A classification name to find.
    /// </param>
    /// <param name = "_agreementRelationType">
    /// The input parameter that defines the relation type for the <c>AgreementClassification</c> table to
    /// find or create.
    /// </param>
    /// <returns>
    /// An <c>AgreementClassification</c> buffer that contains the instance data that was found or created.
    /// </returns>
    public static AgreementClassification findOrCreateAgreementClassificationByName(Name _classificationName,
                                                                                    RelationType _agreementRelationType)
    {
        AgreementClassification agreementClassification = AgreementClassification::findAgreementClassificationByName(_classificationName, _agreementRelationType);

        if (!agreementClassification)
        {
            agreementClassification.IsImmutable = NoYes::Yes;
            agreementClassification.Name = _classificationName;
            agreementClassification.AgreementRelationType = _agreementRelationType;

            agreementClassification.doInsert();
        }
        return agreementClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAgreementClassificationByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a named instance of the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name = "_classificationName">
    /// A classification name to find.
    /// </param>
    /// <param name = "_agreementRelationType">
    /// The input parameter that defines the relation type for the <c>AgreementClassification</c> table to
    /// find.
    /// </param>
    /// <returns>
    /// An <c>AgreementClassification</c> buffer that contains the instance data that was found; null otherwise.
    /// </returns>
    public static AgreementClassification findAgreementClassificationByName(Name _classificationName,
                                                                            RelationType _agreementRelationType)
    {
        AgreementClassification agreementClassification;

        select firstonly agreementClassification
            where agreementClassification.AgreementRelationType == _agreementRelationType
               && agreementClassification.Name == _classificationName;

        return agreementClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the purchase classification in the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name="_classificationName">
    ///    A classification name to find; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementClassification</c> table.
    /// </returns>
    /// <remarks>
    ///    The method first finds the record. Causes the exception only when no record is found.
    /// </remarks>
    static public AgreementClassification findPurchClassification(Name    _classificationName = "",
                                                                  boolean _forUpdate = false)
    {
        AgreementClassification agreementClassification;

        if (_forUpdate)
        {
            agreementClassification.selectForUpdate(_forUpdate);
        }

        select firstonly agreementClassification
        where agreementClassification.AgreementRelationType == tablenum(PurchAgreementHeader)
           && (!_classificationName || agreementClassification.Name == _classificationName);

        if (!agreementClassification.RecId)
        {
            throw error("@SYS301832");
        }

        return agreementClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSalesClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the sales classification in the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name="_classificationName">
    ///    A classification name to find; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>AgreementClassification</c> table.
    /// </returns>
    /// <remarks>
    ///    This method first finds the record. Causes the exception only when no record is found.
    /// </remarks>
    static public AgreementClassification findSalesClassification(Name    _classificationName = "",
                                                                  boolean _forUpdate = false)
    {
        AgreementClassification agreementClassification;

        if (_forUpdate)
        {
            agreementClassification.selectForUpdate(_forUpdate);
        }

        select firstonly agreementClassification
        where agreementClassification.AgreementRelationType == tablenum(SalesAgreementHeader)
           && (!_classificationName || agreementClassification.Name == _classificationName);

        if (!agreementClassification.RecId)
        {
            throw error("@SYS301833");
        }

        return agreementClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>AgreementClassification</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object in which to perform the lookup.
    /// </param>
    /// <param name="_relationType">
    /// The table ID of <c>PurchAgreementHeader</c> or <c>SalesAgreementHeader</c> table.
    /// </param>
    public static void lookupClassification(FormStringControl _ctrl, relationType _relationType)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(AgreementClassification),_ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(AgreementClassification));

        sysTableLookup.addLookupfield(fieldnum(AgreementClassification, Name));

        queryBuildDataSource.addRange(fieldnum(AgreementClassification, AgreementRelationType)).value(queryValue(_relationType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>AgreementClassification</c> table does not
    /// exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exist.
    /// </returns>
    public static str txtNotExist()
    {
        return "@SYS332522";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TradeBlanketOrder</ConfigurationKey>
	<DeveloperDocumentation>@SYS325287</DeveloperDocumentation>
	<Label>@SYS190136</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>AgreementRelationType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AgreementClassificationTranslation</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AgreementClassificationTranslation</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AgreementHeader</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AgreementHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AgreementHeaderHistory</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AgreementHeaderHistory</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsImmutable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Subcontractor_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Certification_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Activity_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectInvoiceEnable_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Classification</Name>
			<Label>@SYS81508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsImmutable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Activity_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@SYS38378</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Certification_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@SYS184348</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectInvoiceEnable_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DirectInvoiceEnable_PSN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsImmutable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AgreementClassificationImmutable</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Subcontractor_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Label>@SPS1366</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ClassificationCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AgreementClassificationCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrimaryResponsibleWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Label>@SCM:PrimaryResponsibleWorker</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SecondaryResponsibleWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Label>@SCM:SecondaryResponsibleWorker</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementRelationType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PrimaryResponsibleWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PrimaryResponsibleWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PrimaryResponsibilityAgreementClassifications</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrimaryResponsibleWorker</Name>
					<Field>PrimaryResponsibleWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SecondaryResponsibleWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SecondaryResponsibleWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>SecondaryResponsibilityAgreementClassifications</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SecondaryResponsibleWorker</Name>
					<Field>SecondaryResponsibleWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>