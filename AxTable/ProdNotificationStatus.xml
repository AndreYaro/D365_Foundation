<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdNotificationStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdNotificationStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks for a <c>ProdNotificationStatus</c> record with a given Notification and user combination.
    /// </summary>
    /// <param name="_notification">
    ///    The <c>ProdNotificationRefRecId</c> of the notification for which <c>ProdNotificationStatus</c> record is being searched.
    /// </param>
    /// <param name="_userId">
    ///    The <c>UserId</c> of user for which <c>ProdNotificationStatus</c> record is being searched.
    /// </param>
    /// <returns>
    ///  The <c>ProdNotificationStatus</c> record if found else created.
    /// </returns>
    public static ProdNotificationStatus findOrCreate(ProdNotificationRefRecId _notification, UserId _userId)
    {
        ProdNotificationStatus notificationStatus = ProdNotificationStatus::find(_notification, _userId);

        if (!notificationStatus.RecId)
        {
            notificationStatus.ProdNotification = _notification;
            notificationStatus.UserId = _userId;
            notificationStatus.IsRead = NoYes::No;

            notificationStatus.insert();
        }

        return notificationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>ProdNotificationStatus</c> record with a given Notification and user combination.
    /// </summary>
    /// <param name="_notification">
    ///    The <c>ProdNotificationRefRecId</c> of the notification for which <c>ProdNotificationStatus</c> record is being searched.
    /// </param>
    /// <param name="_userId">
    ///    The <c>UserId</c> of user for which <c>ProdNotificationStatus</c> record is being searched.
    /// </param>
    /// <returns>
    ///  The <c>ProdNotificationStatus</c> record if found else null buffer.
    /// </returns>
    public static ProdNotificationStatus find(ProdNotificationRefRecId _notification, UserId _userId)
    {
        ProdNotificationStatus notificationStatus;

        if (_notification && _userId)
        {
            select firstonly notificationStatus
                where notificationStatus.ProdNotification  == _notification
                   && notificationStatus.UserId            == _userId;
        }

        return notificationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<TitleField1>UserId</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductionControl</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsRead</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProdNotification</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdNotificationRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsRead</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS11559</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProdNotificationIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdNotification</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UserId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProdNotification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdNotification</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdNotification</Name>
					<Field>ProdNotification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>