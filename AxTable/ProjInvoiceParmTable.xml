<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceParmTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceParmTable extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a project proposal invoice is a credit note proposal
    /// </summary>
    /// <param name="_projProposalId">
    /// Project proposal Id.
    /// </param>
    /// <returns>
    /// true if it is a credit note proposal; otherwise, false.
    /// </returns>
    public boolean checkCreditNote(ProjProposalId _projProposalId)
    {
        if (ProjInvPropCheckCreditNoteFlight::instance().isEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ProjProposalTotals projProposalTotals;
            projProposalTotals = new ProjProposalTotals(ProjProposalJour::find(this.ProposalId), this.ParmId);
            projProposalTotals.calc();

            return projProposalTotals.isCreditNote();
        }
        else
        {
            ProjProposalEmpl        projProposalEmpl;
            ProjProposalOnAcc       projProposalOnAcc;
            ProjProposalCost        projProposalCost;
            ProjProposalItem        projProposalItem;
            ProjProposalRevenue     projProposalRevenue;
            ProjEmplTransSale       projEmplTransSale;
            ProjCostTransSale       projCostTransSale;
            ProjOnAccTransSale      projOnAccTransSale;
            ProjRevenueTransSale    projRevenueTransSale;
            ProjItemTransSale       projItemTransSale;

            select firstonly RecId from projEmplTransSale
            where projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
            exists join projProposalEmpl
                where projEmplTransSale.TransId == projProposalEmpl.TransId   &&
                    projProposalEmpl.ProposalId == _projProposalId;

            if (projEmplTransSale)
            {
                return true;
            }

            select firstonly RecId from projOnAccTransSale
            where projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
            exists join projProposalOnAcc
                where projOnAccTransSale.TransId == projProposalOnAcc.TransId   &&
                    projProposalOnAcc.ProposalId == _projProposalId;

            if (projOnAccTransSale)
            {
                return true;
            }

            select firstonly RecId from projCostTransSale
            where projCostTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
            exists join projProposalCost
                where projCostTransSale.TransId == projProposalCost.TransId   &&
                    projProposalCost.ProposalId == _projProposalId;

            if (projCostTransSale)
            {
                return true;
            }

            select firstonly RecId from projItemTransSale
            where projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
            exists join projProposalItem
                where   projItemTransSale.ProjTransId == projProposalItem.ProjTransId   &&
                        projProposalItem.ProposalId == _projProposalId;

            if (projItemTransSale)
            {
                return true;
            }

            select firstonly RecId from projRevenueTransSale
            where projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal
            exists join projProposalRevenue
                where   projRevenueTransSale.TransId == projProposalRevenue.TransId   &&
                        projProposalRevenue.ProposalId == _projProposalId;

            if (projRevenueTransSale)
            {
                return true;
            }

            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    public void  copyPaymentSched(ProjInvoiceJour projInvoiceJour)
    {
        CustPaymSched       custPaymSched;
        CustVendPaymSched   custVendPaymSched;

        ttsbegin;

        select firstonly custPaymSched
            where custPaymSched.ExtTableId   == this.TableId &&
                  custPaymSched.ExtRecId     == this.RecId;

        if (custPaymSched)
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Project, projInvoiceJour);
            custVendPaymSched.copyCustVendPaymSched(custPaymSched);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposalJour</Name>
				<Source><![CDATA[
    public void initFromProjProposalJour(ProjProposalJour projProposalJour)
    {
        this.InvoiceAccount     = projProposalJour.InvoiceAccount;
        this.ProjInvoiceProjId  = projProposalJour.ProjInvoiceProjId;
        this.ProposalId         = projProposalJour.ProposalId;

        if (ProjParameters::find().IsAccountingDateUpdateAllowed)
        {
            RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

            // Validate dates fall in an open fiscal period when automatically set accounting date to open ledger period is enabled in project parameters.
            boolean validDate = LedgerFiscalCalendar::checkDateIsValid(calendarRecId, projProposalJour.InvoiceDate, FiscalPeriodType::Operating, false);

            if (validDate)
            {
                this.InvoiceDate = projProposalJour.InvoiceDate;
            }
            else
            {
                this.InvoiceDate = LedgerFiscalCalendar::findFirstOpenStartDateInYear(Ledger::fiscalCalendar(CompanyInfo::current()),projProposalJour.InvoiceDate);
            }
        }
        else
        {
            this.InvoiceDate = projProposalJour.InvoiceDate;
        }

        // <GEEU>
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            this.VatDueDate_W = TaxSpecificExchangeRate::getDateOfVATRegister(projProposalJour.TableId, projProposalJour.RecId);
        }
        else if (TaxParameters::isBankExchRateEnabled_W()
            && projProposalJour.CurrencyId != Ledger::accountingCurrency())
        {
            this.VatDueDate_W = SalesTaxTransactionExchangeRate::findBySourceRecord(projProposalJour.TableId, projProposalJour.RecId).DateOfVATRegister;
        }
        // </GEEU>

        // <GEEU>
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            if (! isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)))
            {
                this.VatDueDate_W  = projProposalJour.InvoiceDate;
            }
            this.TaxPeriodPaymentCode_PL = projProposalJour.TaxPeriodPaymentCode_PL;
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountName</Name>
				<Source><![CDATA[
    display CustName invoiceAccountName()
    {
        return CustTable::find(this.InvoiceAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDocumentDate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>ProjInvoiceParmTable</c> when <c>DocumentDate</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    public void modifiedDocumentDate_CZ(boolean _triggerDateChange = true)
    {
        ProjProposalJour    tmpProjProposalJour;
        TaxGroupHeading     tmpTaxGroupHeading;

        tmpProjProposalJour = this.projProposalJour_CZ();
        tmpTaxGroupHeading  = TaxGroupHeading::find(tmpProjProposalJour.TaxGroupId);

        if ((!this.VatDueDate_W || VatDueDateFeature::isEnabled())
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            boolean isVATDueDateOk = this.modifiedDocumentDate_VATDueDate(tmpTaxGroupHeading.FillVATDueDate_W);

            if (!isVATDueDateOk)
            {
                throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillVATDueDate_W));
            }
        }

        if (! this.SalesDate_CZ)
        {
            boolean isSalesDateOk = this.modifiedDocumentDate_SalesDate(tmpTaxGroupHeading.FillSalesDate_W);

            if (!isSalesDateOk)
            {
                throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillSalesDate_W));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDocumentDate_VATDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is type supported.
    /// </summary>
    /// <param name = "_fillVATDueDate_W">VAT date type.</param>
    /// <returns>true if type is supported othervise false.</returns>
    protected boolean modifiedDocumentDate_VATDueDate(FillVATDueDate_W _fillVATDueDate_W)
    {
        boolean isDateOk = true;

        switch (_fillVATDueDate_W)
        {
            case FillVATDueDate_W::Manually:
            case FillVATDueDate_W::SalesDate:
            case FillVATDueDate_W::PostingDate:
            case FillVATDueDate_W::LastDeliveryDate:
            case FillVATDueDate_W::DocumentDate:
            case FillVATDueDate_W::Customized:
                // do nothing
                break;
            default:
                isDateOk = false;
                break;
        }
        return isDateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDocumentDate_SalesDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is type supported.
    /// </summary>
    /// <param name = "_fillSalesDate_W">Sales Date type.</param>
    /// <returns>true if type is supported othervise false.</returns>
    protected boolean modifiedDocumentDate_SalesDate(FillSalesDate_W _fillSalesDate_W)
    {
        boolean isDateOk = true;
        
        switch (_fillSalesDate_W)
        {
            case FillSalesDate_W::Manually:
            case FillSalesDate_W::VATDueDate:
            case FillSalesDate_W::PostingDate:
            case FillSalesDate_W::LastDeliveryDate:
            case FillSalesDate_W::DocumentDate:
                // do nothing
                break;
            default:
                isDateOk = false;
                break;
        }
        return isDateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        // <GEEU>
        #EECountryRegionCodes

        ProjInvoiceJour  projInvoiceJour;
        ProjProposalJour projProposalJour;
        // </GEEU>

        super(_fieldId);

        // <GEEU>
        switch (_fieldId)
        {
            case fieldNum(ProjInvoiceParmTable, ProjInvoiceId_LT):

                select firstonly ProjInvoiceId, RecId from projInvoiceJour
                    where projInvoiceJour.ProjInvoiceId
                        && projInvoiceJour.ProjInvoiceId == this.ProjInvoiceId_LT;
                if (projInvoiceJour.RecId)
                {
                    this.ProjInvoiceId_LT = '';
                    throw error(strFmt("@GLS113293", projInvoiceJour.ProjInvoiceId));
                }

            case fieldNum(ProjInvoiceParmTable, VatDueDate_W):
                this.modifiedVATDueDate_CZ();

                this.updateTaxSpecificExchangeRate();
                if (!TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project)
                    && TaxParameters::isBankExchRateEnabled_W())
                {
                    projProposalJour = ProjProposalJour::find(this.ProposalId);

                    if (projProposalJour.CurrencyId != Ledger::accountingCurrency())
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00009, funcName());
                        SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(projProposalJour,
                            projProposalJour.CurrencyId, TransactionType::Sales, this.VatDueDate_W);
                    }
                }
                break;

            case fieldNum(ProjInvoiceParmTable, InvoiceDate):
                if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
                {
                    this.modifiedInvoiceDate_CZ();
                }
                break;

            case fieldNum(ProjInvoiceParmTable, SalesDate_CZ):
                this.modifiedSalesDate_CZ();
                break;

            case fieldNum(ProjInvoiceParmTable, DocumentDate_W):
                this.modifiedDocumentDate_CZ();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedInvoiceDate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>ProjInvoiceParmTable</c> when <c>InvoiceDate</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    private void modifiedInvoiceDate_CZ(boolean _triggerDateChange = true)
    {
        ProjProposalJour    tmpProjProposalJour;
        TaxGroupHeading     tmpTaxGroupHeading;
        boolean         triggerDateChange  = _triggerDateChange && ! this.VatDueDate_W;

        tmpProjProposalJour      = this.projProposalJour_CZ();
        tmpTaxGroupHeading = TaxGroupHeading::find(tmpProjProposalJour.TaxGroupId);

        if (TaxVATDueDateUtility::isVATDueDateBasedOnPostingDate(tmpTaxGroupHeading)
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            this.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateBasedOnPostingDate(tmpTaxGroupHeading, this.InvoiceDate);
            if (triggerDateChange)
            {
                this.modifiedVATDueDate_CZ(false);
            }
        }

        if (! this.SalesDate_CZ && tmpTaxGroupHeading.FillSalesDate_W == FillSalesDate_W::PostingDate)
        {
            this.SalesDate_CZ = this.InvoiceDate;
            if (_triggerDateChange)
            {
                this.modifiedSalesDate_CZ(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSalesDate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>ProjInvoiceParmTable</c> when <c>SalesDate_CZ</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    /// <remarks>
    /// Modifies various field in table <c>ProjInvoiceParmTable</c> when <c>SalesDate_CZ</c> is modified.
    /// </remarks>
    public void modifiedSalesDate_CZ(boolean _triggerDateChange = true)
    {
        ProjProposalJour    tmpProjProposalJour;
        TaxGroupHeading     tmpTaxGroupHeading;

        tmpProjProposalJour      = this.projProposalJour_CZ();
        tmpTaxGroupHeading = TaxGroupHeading::find(tmpProjProposalJour.TaxGroupId);

        if (! this.SalesDate_CZ && ! this.orig().SalesDate_CZ)
        {
            boolean salesDateCanBeSet = this.modifiedSalesDate_SalesDate(tmpTaxGroupHeading.FillSalesDate_W);

            if (!salesDateCanBeSet)
            {
                throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillSalesDate_W));
            }
        }

        if ((!this.VatDueDate_W || VatDueDateFeature::isEnabled())
            && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            boolean isModifiedVATDueDateCanBeChanged = this.modifiedSalesDate_VATDueDate(tmpTaxGroupHeading.FillVATDueDate_W, _triggerDateChange);
            
            if (!isModifiedVATDueDateCanBeChanged)
            {
                throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillVATDueDate_W));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSalesDate_SalesDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value of SalesDate_CZ.
    /// </summary>
    /// <param name = "_fillSalesDate_W">SalesDate type.</param>
    /// <returns>true if value can be set; false if type is unsupported.</returns>
    protected boolean modifiedSalesDate_SalesDate(FillSalesDate_W _fillSalesDate_W)
    {
        boolean canBeSet = true;
        
        switch (_fillSalesDate_W)
        {
            case FillSalesDate_W::Manually:
                // do nothing
                break;
            case FillSalesDate_W::DocumentDate:
                this.SalesDate_CZ = this.DocumentDate_W;
                break;
            case FillSalesDate_W::PostingDate:
                this.SalesDate_CZ = this.InvoiceDate;
                break;
            case FillSalesDate_W::VATDueDate:
                this.SalesDate_CZ = this.VatDueDate_W;
                break;
            case FillSalesDate_W::LastDeliveryDate:
                this.SalesDate_CZ = this.getLastDeliveryDate();
                break;
            default:
                canBeSet = false;
                break;
        }

        return canBeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSalesDate_VATDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes VATDueDate if needed.
    /// </summary>
    /// <param name = "_fillVATDueDate_W">VAT date type.</param>
    /// <param name = "_triggerDateChange">Is changes needed.</param>
    /// <returns>true if type is supported othervise false.</returns>
    protected boolean modifiedSalesDate_VATDueDate(FillVATDueDate_W _fillVATDueDate_W, boolean _triggerDateChange)
    {
        boolean canBeChanged = true;

        if (ProjInvPropVatDueDate_W_WhenCreditNoteOnSalesDateChange_PLFlight::instance().isEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && this.checkCreditNote(this.ProposalId))
        {
            // Don't default VatDueDate_W for POL legal entities when doing a credit note.
        }
        else
        {
            switch (_fillVATDueDate_W)
            {
                case FillVATDueDate_W::Manually:
                case FillVATDueDate_W::DocumentDate:
                case FillVATDueDate_W::PostingDate:
                case FillVATDueDate_W::Customized:
                    // do nothing
                    break;
                case FillVATDueDate_W::SalesDate:
                    this.VatDueDate_W = this.SalesDate_CZ;
                    if (_triggerDateChange)
                    {
                        this.modifiedVATDueDate_CZ(false);
                    }
                    break;
                case FillVATDueDate_W::LastDeliveryDate:
                    this.VatDueDate_W = this.getLastDeliveryDate(true);
                    if (_triggerDateChange)
                    {
                        this.modifiedVATDueDate_CZ(false);
                    }
                    break;
                default:
                    canBeChanged = false;
                    break;
            }
        }

        return canBeChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVATDueDate_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies various field in table <c>ProjInvoiceParmTable</c> when <c>SalesDate_CZ</c> is modified.
    /// </summary>
    /// <param name="_triggerDateChange">
    /// True if dependent fields are to be updated, optional.
    /// </param>
    public void modifiedVATDueDate_CZ(boolean _triggerDateChange = true)
    {
        ProjProposalJour    tmpProjProposalJour;
        TaxGroupHeading     tmpTaxGroupHeading;

        tmpProjProposalJour      = this.projProposalJour_CZ();
        tmpTaxGroupHeading = TaxGroupHeading::find(tmpProjProposalJour.TaxGroupId);

        if (! this.VatDueDate_W && ! this.orig().VatDueDate_W && TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            boolean isVatDueDateSet = this.modifiedVATDueDate_VatDueDate(tmpTaxGroupHeading);

            if(!isVatDueDateSet)
            {
                throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillVATDueDate_W));
            }
        }

        if (! this.SalesDate_CZ)
        {
            boolean isSalesDateCanBeChanged = this.modifiedVATDueDate_SalesDate(tmpTaxGroupHeading.FillSalesDate_W, _triggerDateChange);

            if (!isSalesDateCanBeChanged)
            {
                throw error(strFmt("@SYS73815", tmpTaxGroupHeading.FillSalesDate_W));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVATDueDate_VatDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value of VatDueDate_W in tmpTaxGroupHeading.
    /// </summary>
    /// <param name = "_taxGroupHeading">Tax group heading.</param>
    /// <returns>true if value can be set; false if type is unsupported.</returns>
    protected boolean modifiedVATDueDate_VatDueDate(TaxGroupHeading _taxGroupHeading)
    {
        boolean canBeSet = true;

        if (ProjInvPropVatDueDate_W_WhenCreditNoteOnVatDueDateChange_PLFlight::instance().isEnabled() && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && this.checkCreditNote(this.ProposalId))
        {
            // Don't default VatDueDate_W for POL legal entities when doing a credit note.
        }
        else
        {
            switch (_taxGroupHeading.FillVATDueDate_W)
            {
                case FillVATDueDate_W::Manually:
                    // do nothing
                    break;
                case FillVATDueDate_W::SalesDate:
                    this.VatDueDate_W = this.SalesDate_CZ;
                    break;
                case FillVATDueDate_W::DocumentDate:
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
                    this.VatDueDate_W = this.DocumentDate_W;
                    break;
                case FillVATDueDate_W::PostingDate:
                    this.VatDueDate_W = this.InvoiceDate;
                    break;
                case FillVATDueDate_W::LastDeliveryDate:
                    this.VatDueDate_W = this.getLastDeliveryDate(true);
                    break;
                case FillVATDueDate_W::Customized:
                    this.VatDueDate_W = TaxVATDueDateUtility::calculateVATDueDateCustomized(
                        _taxGroupHeading,
                        this.InvoiceDate,
                        this.DocumentDate_W);
                    break;
                default:
                    canBeSet = false;
                    break;
            }
        }

        if (canBeSet)
        {
            this.updateTaxSpecificExchangeRate();
        }

        return canBeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVATDueDate_SalesDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes SalesDate if needed.
    /// </summary>
    /// <param name = "_fillSalesDate_W">Sales Date type.</param>
    /// <param name = "_triggerDateChange">Is changes needed.</param>
    /// <returns>true if type is supported othervise false.</returns>
    protected boolean modifiedVATDueDate_SalesDate(FillSalesDate_W _fillSalesDate_W, boolean _triggerDateChange)
    {
        boolean canBeChanged = true;
        
        switch (_fillSalesDate_W)
        {
            case FillSalesDate_W::Manually:
            case FillSalesDate_W::DocumentDate:
            case FillSalesDate_W::PostingDate:
            case FillSalesDate_W::LastDeliveryDate:
                // do nothing
                break;
            case FillSalesDate_W::VATDueDate:
                this.SalesDate_CZ = this.VatDueDate_W;
                if (_triggerDateChange)
                {
                    this.modifiedSalesDate_CZ(false);
                }
                break;
            default:
                canBeChanged = false;
                break;
        }

        return canBeChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalJour_CZ</Name>
				<Source><![CDATA[
    ProjProposalJour  projProposalJour_CZ(boolean  _forUpdate = false)
    {
        return ProjProposalJour::find(this.ProposalId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    public void updateParmJobStatusContainErrors()
    {
        this.ParmJobStatus = ParmJobStatus::ContainErrors;

        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWithoutUpdate</Name>
				<Source><![CDATA[
    public static void deleteWithoutUpdate(Num parmId)
    {
        ProjInvoiceParmTable  projInvoiceParmTable;

        ttsbegin;

        delete_from projInvoiceParmTable where projInvoiceParmTable.ParmId == parmId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(Num parmId, InvoiceId proposalId)
    {
        return parmId && (select projInvoiceParmTable where projInvoiceParmTable.ParmId == parmId && projInvoiceParmTable.ProposalId == proposalId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static ProjInvoiceParmTable find(Num _parmId, boolean _forUpdate = false)
    {
        ProjInvoiceParmTable projInvoiceParmTable = null;

        projInvoiceParmTable.selectForUpdate(_forUpdate);

        if (_parmId)
        {
            select projInvoiceParmTable where projInvoiceParmTable.ParmId == _parmId;
        }

        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDeliveryDate</Name>
				<Source><![CDATA[
    private TransDate getLastDeliveryDate(boolean _isVatDueDate = false)
    {
        TransDate lastDeliveryDate;
        InventTrans tmpInventTrans;
        InventTransOrigin tmpInventTransOrigin;
        ProjProposalItem tmpProjProposalItem;

        select maxof(DatePhysical) from tmpInventTrans
            where !tmpInventTrans.DateFinancial
        exists join tmpInventTransOrigin
            where tmpInventTransOrigin.RecId == tmpInventTrans.InventTransOrigin
        exists join tmpProjProposalItem
            where tmpProjProposalItem.InventTransId == tmpInventTransOrigin.InventTransId
                && tmpProjProposalItem.ProposalId == this.ProposalId;

        lastDeliveryDate = tmpInventTrans.DatePhysical;

        if (_isVatDueDate)
        {
            CustPackingSlipJour tmpCustPackingSlipJour;
            CustPackingSlipTrans tmpCustPackingSlipTrans;

            select InventTransId, ItemType from tmpProjProposalItem
                where tmpProjProposalItem.ItemType == ProjItemType::Project
                    && tmpProjProposalItem.ProposalId == this.ProposalId
            outer join InventTransId, RecId from tmpInventTransOrigin
                where tmpInventTransOrigin.InventTransId == tmpProjProposalItem.InventTransId
            outer join DeliveryDate, InventTransId, PackingSlipId, SalesId from tmpCustPackingSlipTrans
                where tmpCustPackingSlipTrans.InventTransId == tmpInventTransOrigin.InventTransId
            outer join maxof(DeliveryDate), PackingSlipId, SalesId from tmpCustPackingSlipJour
                where tmpCustPackingSlipJour.SalesId == tmpCustPackingSlipTrans.SalesId
                    && tmpCustPackingSlipJour.PackingSlipId == tmpCustPackingSlipTrans.PackingSlipId
                    && tmpCustPackingSlipJour.DeliveryDate == tmpCustPackingSlipTrans.DeliveryDate;

            lastDeliveryDate = max(lastDeliveryDate, tmpCustPackingSlipJour.DeliveryDate);
        }

        return lastDeliveryDate ? lastDeliveryDate : this.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxSpecificExchangeRate</Name>
				<Source><![CDATA[
    private void updateTaxSpecificExchangeRate()
    {
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            ProjProposalJour projProposalJour = ProjProposalJour::find(this.ProposalId);
            if (this.VatDueDate_W)
            {
                TaxSpecificExchangeRate::updateOrDeleteByVATDueDate(projProposalJour.TableId, projProposalJour.RecId, this.VatDueDate_W);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124912</DeveloperDocumentation>
	<Label>@SYS522</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjInvoiceProjId</TitleField1>
	<TitleField2>InvoiceAccount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ParmIdIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VatDueDate_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceNumberingCode_LT</Name>
			<Label>@GLS113288</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoNumbering_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Narration_BR</Name>
			<Label>@GLS510023</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Narration_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PostponeVAT</Name>
			<Label>@GLS111972</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostponeVAT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax_PL</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BatchAdministration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Storno</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmJobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>errorText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATExchRateDates_CZ</Name>
			<Label>@GLS114425</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesDate_CZ</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoNumbering_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>LtDocRegister</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BatchAdministration</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BatchAdministration</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,DE</CountryRegionCodes>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>errorText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS21836</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Narration_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@GLS510023</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ParmJobStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ParmJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostponeVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicVatDueDate_W</ConfigurationKey>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>CzPostponeVAT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceId_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProposalId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjProposalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesDate_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzSalesDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Storno</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6054</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VatDueDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VatDueDate_W</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ParmIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>FormletterParmTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>ProposalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmJobStatus</MapField>
					<MapFieldTo>ParmJobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Log</MapField>
					<MapFieldTo>errorText</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>ProposalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StartDateTime</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDateTime</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Hold</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankLCLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate_W</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate_W</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPackingBoxName</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjInvoiceParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceParmTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjInvoiceParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjProposalJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjProposalJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjProposalJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceParmTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalId</Name>
					<SourceEDT>ProjProposalId</SourceEDT>
					<Field>ProposalId</Field>
					<RelatedField>ProposalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProposalNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>