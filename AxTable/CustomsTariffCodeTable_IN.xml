<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsTariffCodeTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsTariffCodeTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean     ret;
        InventTable inventTable;
        InventTable inventTableCopy;

        ret = super();

        select firstonly RecId from inventTable
            where this.RecId == inventTable.CustomsImportTariffCodeTable_IN
               && this.Direction  == Direction_IN::Import;

        select firstonly RecId from inventTableCopy
            where this.RecId == inventTableCopy.CustomsExportTariffCodeTable_IN
               && this.Direction  == Direction_IN::Export;

        if (inventTable.RecId)
        {
            ret = checkFailed(strFmt("@GLS5078", tablePName(InventTable)));
        }
        else if (inventTableCopy.RecId)
        {
            ret = checkFailed(strFmt("@GLS5078", tablePName(InventTable)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            ret = TaxParameters::checkParameter_IN(TaxType_IN::Customs);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if CustomsTariffCodeTable_IN record exists for specified CustomsTariffCode_IN and Direction_IN.
    /// </summary>
    /// <param name="_tariffCode">
    /// The CustomsTariffCode_IN to find CustomsTariffCodeTable_IN record.
    /// </param>
    /// <param name="_direction">
    /// The Direction_IN to find CustomsTariffCodeTable_IN record.
    /// </param>
    /// <returns>
    /// True if CustomsTariffCodeTable_IN table record found otherwise false.
    /// </returns>
    public static boolean exist(
        CustomsTariffCode_IN    _tariffCode,
        Direction_IN            _direction)
    {
        return _tariffCode && (select firstonly RecId from customsTariffCodeTable_IN
                               index hint CodeDirectionIdx
                                    where customsTariffCodeTable_IN.TariffCode  == _tariffCode
                                        &&    customsTariffCodeTable_IN.Direction   == _direction).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if CustomsTariffCodeTable_IN record exists for specified CustomsTariffCode_IN.
    /// </summary>
    /// <param name="_tariffCode">
    /// The CustomsTariffCode_IN to find CustomsTariffCodeTable_IN record.
    /// </param>
    /// <returns>
    /// True if CustomsTariffCodeTable_IN table record found otherwise false.
    /// </returns>
    public static boolean existTariffCode(CustomsTariffCode_IN    _tariffCode)
    {
        return _tariffCode && ( select firstonly RecId from customsTariffCodeTable_IN
                                index hint CodeDirectionIdx
                                    where customsTariffCodeTable_IN.TariffCode  == _tariffCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsTariffCodeTable_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsTariffCodeTable_IN table.
    /// </returns>
    public static CustomsTariffCodeTable_IN find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustomsTariffCodeTable_IN customsTariffCodeTable;

        customsTariffCodeTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsTariffCodeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsTariffCodeTable
            where customsTariffCodeTable.RecId == _recId;

        return customsTariffCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTariffCodeAndDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsTariffCodeTable_IN table for the specified CustomsTariffCode_IN and direction.
    /// </summary>
    /// <param name="_tariffCode">
    /// The CustomsTariffCode_IN to find CustomsTariffCodeTable_IN record.
    /// </param>
    /// <param name="_direction">
    /// The Direction_IN to find CustomsTariffCodeTable_IN record.
    /// </param>
    /// <param name="_forUpdate">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected CustomsTariffCodeTable_IN record.
    /// </returns>
    public static CustomsTariffCodeTable_IN findByTariffCodeAndDirection(
        CustomsTariffCode_IN    _tariffCode,
        Direction_IN            _direction,
        boolean                 _forUpdate = false)
    {
        CustomsTariffCodeTable_IN customsTariffCode_IN;

        if (_tariffCode)
        {
            customsTariffCode_IN.selectForUpdate(_forUpdate);
            select firstonly customsTariffCode_IN
                index hint CodeDirectionIdx
                where customsTariffCode_IN.TariffCode == _tariffCode
                   && customsTariffCode_IN.Direction  == _direction;
        }

        return customsTariffCode_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsTariffCodeTable_IN table for the specified CustomsTariffCode_IN and direction.
    /// </summary>
    /// <param name="_tariffCode">
    /// The CustomsTariffCode_IN to find CustomsTariffCodeTable_IN record.
    /// </param>
    /// <param name="_direction">
    /// The Direction_IN to find CustomsTariffCodeTable_IN record.
    /// </param>
    /// <param name="_isModified">
    /// if Modified true, find _direction to find CustomsTariffCodeTable_IN.
    /// </param>
    /// <returns>
    /// The selected CustomsTariffCodeTable_IN record.
    /// </returns>
    public static CustomsTariffCodeTable_IN findDirection(
        CustomsTariffCode_IN  _tariffCode,
        Direction_IN          _direction,
        boolean               _isModified = false)
    {
        CustomsTariffCodeTable_IN   customsTariffCode;

        if (!_isModified)
        {
            select firstonly Direction from customsTariffCode
                where customsTariffCode.TariffCode  == _tariffCode
                   && customsTariffCode.Direction   == _direction;
        }
        else
        {
            select firstonly Direction from customsTariffCode
                where customsTariffCode.TariffCode == _tariffCode;
        }
        return customsTariffCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the Go To Main Table functionality for the <c>CustomsTariffCode_IN</c> table.
    /// </summary>
    /// <param name="_customsTariffCode">
    /// The customer tariff code of the <c>CustomsTariffCode_IN</c> record.
    /// </param>
    /// <param name="_record">
    /// The common record.
    /// </param>
    public static void jumpRef(CustomsTariffCode_IN    _customsTariffCode,
                               Common                  _record)
    {
        Args    args = new Args();
        args.record(_record);
        args.parm(_customsTariffCode);
        new MenuFunction(menuitemDisplayStr(CustomsTariffCodeTable_IN), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsTariffCodeForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>CustomsTariffCodeTable_IN</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form reference control object with which to perform the lookup.
    /// </param>
    /// <param name="_taxData">
    /// The taxData buffer to filter the CustomsTariffCodeTable_IN records.
    /// </param>
    public static void lookupCustomsTariffCodeForm(
        FormReferenceControl  _ctrl,
        TaxData               _taxData)
    {
        Args                args;
        FormRun             formRun;

        args = new Args();
        args.name(formStr(CustomstariffCodeLookup_IN));
        args.record(_taxData);
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);

        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDirectionImportExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>CustomsTariffCodeTable_IN</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control object with which to perform the lookup.
    /// </param>
    /// <param name="_direction">
    /// The Direction_IN string to filter Export/Import tariffCodes.
    /// </param>
    /// <param name="_companyId">
    /// The CompanyId to filter CustomsTariffCodeTable_IN records.
    /// </param>
    /// <returns>
    /// The selected <c>CustomsTariffCodeTable_IN</c> records.
    /// </returns>
    public static Common lookupDirectionImportExport(
        FormReferenceControl _formReferenceControl,
        str                  _direction,
        CompanyId            _companyId = curext())
    {
        Query                   query          = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(CustomsTariffCodeTable_IN), _formReferenceControl);
        CustomsTariffCodeTable_IN   customsTariffCodeTable;

        query.allowCrossCompany(true);
        query.addCompanyRange(_companyId);
        sysTableLookup.addLookupfield(fieldNum(CustomsTariffCodeTable_IN, TariffCode));
        sysTableLookup.addLookupfield(fieldNum(CustomsTariffCodeTable_IN, Name));
        queryBuildDataSource = query.addDataSource(tableNum(CustomsTariffCodeTable_IN));
        queryBuildRange      = queryBuildDataSource.addRange(fieldNum(CustomsTariffCodeTable_IN, Direction));
        queryBuildRange.value(queryValue(_direction));
        sysTableLookup.parmQuery(query);
        customsTariffCodeTable = sysTableLookup.performFormLookup();

        return customsTariffCodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCustomsTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve customs tariff code.
    /// </summary>
    /// <param name="_callingControl">
    /// The calling control.
    /// </param>
    /// <param name="_direction">
    /// The direction.
    /// </param>
    /// <returns>
    /// The instance of the <c>Common</c> class.
    /// </returns>
    public static Common resolveCustomsTariffCode(FormReferenceControl _callingControl,
                                                         Direction_IN         _direction)
    {
        CustomsTariffCodeTable_IN customsTariffCodeTable = null;

        if (!_callingControl)
        {
            throw(error(strFmt("@SYS137393", Error::wrongUseOfFunction(funcName())) ));
        }

        customsTariffCodeTable = CustomsTariffCodeTable_IN::findByTariffCodeAndDirection(
                                                            _callingControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(CustomsTariffCodeTable_IN, TariffCode), tableStr(CustomsTariffCodeTable_IN))).value(),
                                                            _direction);

        return customsTariffCodeTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64143</DeveloperDocumentation>
	<FormRef>CustomsTariffCodeTable_IN</FormRef>
	<Label>@GLS5192</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TariffCode</TitleField1>
	<TitleField2>Direction</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CodeDirectionIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TariffCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TariffCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Direction</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TariffCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Direction</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>Direction_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TariffCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsTariffCode_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeDirectionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TariffCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Direction</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>