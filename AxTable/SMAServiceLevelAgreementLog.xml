<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMAServiceLevelAgreementLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMAServiceLevelAgreementLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>duration</Name>
				<Source><![CDATA[
    display public Seconds duration()
    {
        Seconds duration = 0;

        if (this.Status == SMALogStatus::Closed)
        {
            // Days in seconds, throw error on overflow
            duration = int642int(DateTimeUtil::getDifference(this.EndDateTime, this.StartDateTime),true);
        }

        return duration;
    }
]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        SMAServiceOrderTable    serviceOrderTable;
        boolean                 updateCompliance;

        updateCompliance = (this.StartDateTime != this.orig().StartDateTime || this.EndDateTime != this.orig().EndDateTime);

        ttsbegin;

        super();

        if (updateCompliance)
        {
            serviceOrderTable = SMAServiceOrderTable::find(this.ServiceOrderId, true);
            serviceOrderTable.calcServiceLevelAgreementCompliance();
            serviceOrderTable.update();
        }

        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.Status == SMALogStatus::Closed && ((this.EndDateTime) && this.StartDateTime > this.EndDateTime ))
        {
            // End date and time must be after start date and time
            ret = checkFailed("@SYS105059");
        }

        if (ret &&
              ((this.Status == SMALogStatus::Closed &&
               (select RecId from   smaServiceLevelAgreementLog
                             where (smaServiceLevelAgreementLog.ServiceOrderId  == this.ServiceOrderId)
                               &&  (smaServiceLevelAgreementLog.RecId           != this.RecId)
                               &&  (smaServiceLevelAgreementLog.StartDateTime   != smaServiceLevelAgreementLog.EndDateTime)
                               && ((smaServiceLevelAgreementLog.StartDateTime   <= this.StartDateTime
                                 && smaServiceLevelAgreementLog.EndDateTime     >= this.EndDateTime)
                                || (smaServiceLevelAgreementLog.StartDateTime   >= this.StartDateTime
                                 && smaServiceLevelAgreementLog.StartDateTime   <  this.EndDateTime)
                                || (smaServiceLevelAgreementLog.EndDateTime     >  this.StartDateTime
                                 && smaServiceLevelAgreementLog.EndDateTime     <= this.EndDateTime))).RecId != 0)
            || (this.Status == SMALogStatus::Open &&
               (select RecId from   smaServiceLevelAgreementLog
                             where smaServiceLevelAgreementLog.ServiceOrderId  == this.ServiceOrderId
                                && smaServiceLevelAgreementLog.RecId           != this.RecId
                                && smaServiceLevelAgreementLog.StartDateTime   <= this.StartDateTime
                                && smaServiceLevelAgreementLog.EndDateTime     >  this.StartDateTime).RecId != 0)))
        {
            // Time log intervals should not overlap
            ret = checkFailed("@SYS111772");
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static SMAServiceLevelAgreementLog find(SMAServiceOrderId _serviceId, boolean _forupdate = false)
    {
        SMAServiceLevelAgreementLog serviceLevelAgreementLog = null;

        if (_serviceId)
        {
            serviceLevelAgreementLog.selectForUpdate(_forupdate);

            select firstonly serviceLevelAgreementLog where serviceLevelAgreementLog.ServiceOrderId == _serviceId;
        }

        return serviceLevelAgreementLog;
    }
]]></Source>
			</Method>
			<Method>
				<Name>firstStartDateTime</Name>
				<Source><![CDATA[
        public static SMASLAStartDateTime firstStartDateTime(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceLevelAgreementLog     serviceLevelAgreementLog;
        SMASLAStartDateTime             ret = DateTimeUtil::newDateTime(dateNull(),0);

        // Find the original start date
        select firstonly serviceLevelAgreementLog
            order by StartDateTime asc
            where serviceLevelAgreementLog.ServiceOrderId == _serviceOrderId;

        if (serviceLevelAgreementLog)
        {
            ret = serviceLevelAgreementLog.StartDateTime;
        }
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>lastStartDateTime</Name>
				<Source><![CDATA[
        public static SMASLAStartDateTime lastStartDateTime(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceLevelAgreementLog     serviceLevelAgreementLog;
        SMASLAStartDateTime             ret = DateTimeUtil::newDateTime(dateNull(),0);

        // Find the original start date
        select firstonly serviceLevelAgreementLog
            order by StartDateTime desc
            where serviceLevelAgreementLog.ServiceOrderId == _serviceOrderId
            && serviceLevelAgreementLog.Status == SMALogStatus::Open;

        if (serviceLevelAgreementLog)
        {
            ret = serviceLevelAgreementLog.StartDateTime;
        }
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>totalInProgress</Name>
				<Source><![CDATA[
        public static Seconds totalInProgress(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceLevelAgreementLog closedLogEntry;
        Seconds                     ret             = 0;
        int64                       secInProgress   = 0;

        if (!_serviceOrderId)
        {
            return ret;
        }

        // Has the time log been stopped at some point

        while select closedLogEntry
            where closedLogEntry.ServiceOrderId == _serviceOrderId
                && closedLogEntry.Status        == SMALogStatus::Closed
        {
            secInProgress = secInProgress + closedLogEntry.duration();
        }

        ret = int642int(secInProgress,true);
        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMAManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS122710</DeveloperDocumentation>
	<FormRef>SMAServiceLevelAgreementLog</FormRef>
	<Label>@SYS113148</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ServiceOrderId</TitleField1>
	<TitleField2>Status</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ServiceOrderId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>ServiceManagement</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EndDateTime</Name>
			<Label>@SYS34406</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceOrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modifiedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>duration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StartDateTime</Name>
			<Label>@SYS34405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>EndDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASLAEndDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAServiceOrderId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>StartDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASLAStartDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>SMALogStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ServiceOrderId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ServiceOrderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMAServiceOrderTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMAServiceOrderTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ServiceOrderId</Name>
					<Field>ServiceOrderId</Field>
					<RelatedField>ServiceOrderId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ServiceOrderIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>