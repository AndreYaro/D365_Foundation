<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResStorageDimensionGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResStorageDimensionGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditPrimaryStockingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>IsWarehousePrimaryStockingEnabled</c> field can be edited for a dimension group.
    /// </summary>
    /// <returns>
    ///    true if the field can be edited; otherwise, false.
    /// </returns>
    public boolean allowEditPrimaryStockingEnabled()
    {
        if (this.IsWarehouseWHSEnabled)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks and fixes records in the <c>EcoResStorageDimensionGroupFldSetup</c> table.
    /// </summary>
    /// <remarks>
    ///    If a record for a dimension does not exist in the <c>EcoResStorageDimensionGroupFldSetup</c> table
    ///    it is created. If a record exists, the line number of the record is checked and fixed if it does
    ///    not match the position of a corresponding field in the <c>InventoryDimensions</c> field group of
    ///    the <c>InventDim</c> table.
    /// </remarks>
    public void checkFixReference()
    {
        EcoResStorageDimensionGroupFldSetup storageDimensionGroupFldSetup;
        ListEnumerator                      enumerator  = EcoResStorageDimensionGroup::dimEnabledFieldList().getEnumerator();
        FieldId                             dimFieldId;
        int                                 fieldNo;

        ttsbegin;

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            fieldNo++;
            storageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, dimFieldId);

            if (storageDimensionGroupFldSetup.RecId)
            {
                if (storageDimensionGroupFldSetup.LineNumber != fieldNo)
                {
                    update_recordset storageDimensionGroupFldSetup
                        setting LineNumber = fieldNo
                        where storageDimensionGroupFldSetup.StorageDimensionGroup == this.RecId
                           && storageDimensionGroupFldSetup.DimensionFieldId      == dimFieldId;
                }
            }
            else
            {
                storageDimensionGroupFldSetup.clear();
                storageDimensionGroupFldSetup.initFromStorageDimensionGroup(this);
                storageDimensionGroupFldSetup.DimensionFieldId    = dimFieldId;
                storageDimensionGroupFldSetup.initValue();
                storageDimensionGroupFldSetup.LineNumber          = fieldNo;
                storageDimensionGroupFldSetup.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>EcoResStorageDimensionGroup</c> table and creates related records in the <c>EcoResStorageDimensionGroupFldSetup</c> table.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        this.setWHSDefaultFields();

        super();

        this.checkFixReference();

        ttscommit;
        EcoResStorageDimGroupSetupCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByAnyItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether this storage dimension group is used by any item
    /// </summary>
    /// <returns>
    ///    true if this storage dimension group is used by any item; otherwise, false.
    /// </returns>
    public boolean isUsedByAnyItem()
    {
        EcoResStorageDimensionGroupItem         ecoResStorageDimensionGroupItem;

        select firstonly crosscompany RecId
            from ecoResStorageDimensionGroupItem
                where ecoResStorageDimensionGroupItem.StorageDimensionGroup == this.RecId;

        return ecoResStorageDimensionGroupItem.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUsedByItemWithTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether this storage dimension group is used by any item which has created inventory
    ///    transactions.
    /// </summary>
    /// <returns>
    ///    true if inventory transactions exist; otherwise, false.
    /// </returns>
    public boolean isUsedByItemWithTransactions()
    {
        EcoResStorageDimensionGroupItem         ecoResStorageDimensionGroupItem;
        InventTable                             inventTable;
        InventTrans                             inventTrans;

        select firstonly crosscompany RecId
            from ecoResStorageDimensionGroupItem
                where ecoResStorageDimensionGroupItem.StorageDimensionGroup == this.RecId
            exists join inventTable
                where inventTable.DataAreaId        == ecoResStorageDimensionGroupItem.ItemDataAreaId
                  &&  inventTable.ItemId            == ecoResStorageDimensionGroupItem.ItemId
                exists join inventTrans
                    where inventTrans.ItemId        == inventTable.ItemId;

        if (   !ecoResStorageDimensionGroupItem.RecId
            && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            WHSInventReserve inventReserve;

            select firstonly crosscompany RecId
                from ecoResStorageDimensionGroupItem
                    where ecoResStorageDimensionGroupItem.StorageDimensionGroup == this.RecId
                exists join inventTable
                    where inventTable.DataAreaId    == ecoResStorageDimensionGroupItem.ItemDataAreaId
                      &&  inventTable.ItemId        == ecoResStorageDimensionGroupItem.ItemId
                    exists join inventReserve
                        where  inventReserve.ItemId         == inventTable.ItemId
                            && inventReserve.AvailPhysical  != 0;
        }

        return ecoResStorageDimensionGroupItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets storage dimension group fields according to the requirements of WHS warehouse
    /// </summary>
    public void setWHSDefaultFields()
    {
        if (this.IsWarehouseWHSEnabled)
        {
            this.IsWarehousePrimaryStockingEnabled  = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSSetupDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets storage dimension group field setup fields according to the requirements of WHS warehouse
    /// </summary>
    public void setWHSSetupDefaultFields()
    {
        EcoResStorageDimensionGroupFldSetup setup;

        ttsbegin;
        while select forupdate setup
            where setup.StorageDimensionGroup == this.RecId
        {
            if (setup.setWHSDefaultFields())
            {
                setup.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in <c>EcoResStorageDimensionGroup</c> table. If storage dimension group is WHS enabled the required fields are set
    /// </summary>
    public void update()
    {
        ttsbegin;
        this.setWHSDefaultFields();

        super();

        this.setWHSSetupDefaultFields();
        ttscommit;

        EcoResStorageDimGroupSetupCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWHSDefaultFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that storage dimension group fields are set according to the requirements of WHS warehouse
    /// </summary>
    /// <returns>
    ///    true if the record can be saved: otherwise, false.
    /// </returns>
    public boolean validateWHSDefaultFields()
    {
        boolean  ret = true;

        if (!this.IsWarehouseWHSEnabled)
        {
            return true;
        }

        if (this.IsWarehousePrimaryStockingEnabled != NoYes::Yes)
        {
            ret = checkFailed("@WAX4846");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>EcoResStorageDimensionGroup</c> record can be saved.
    /// </summary>
    /// <returns>
    ///    true if the record can be saved: otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        EcoResStorageDimensionGroup     origDimGroup = this.orig();
        boolean                         ret = true;

        if (this.RecId
            && this.IsWarehouseWHSEnabled != origDimGroup.IsWarehouseWHSEnabled
            && this.isUsedByAnyItem())
        {
            return checkFailed("@WAX4527");
        }

        ret = ret && this.validateWHSDefaultFields();

        if (this.RecId
            && (   this.IsWarehouseMandatoryEnabled         != origDimGroup.IsWarehouseMandatoryEnabled
                || this.IsWarehousePrimaryStockingEnabled   != origDimGroup.IsWarehousePrimaryStockingEnabled))
        {
            if ((this.IsWarehouseMandatoryEnabled) && !EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(this.RecId, fieldNum(InventDim, InventLocationId)).IsCoveragePlanByDimensionEnabled)
            {
                return checkFailed("@SYS128761");
            }

            // record changed -> consistency check is not entering
            if (this.isUsedByItemWithTransactions())
            {
                this.data(origDimGroup);
                return checkFailed("@SYS97796");
            }
        }

        return ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixReferenceAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and fixes records in the <c>EcoResStorageDimensionGroupFldSetup</c> table across all storage
    /// dimension groups.
    /// </summary>
    /// <remarks>
    /// See description of the <see cref="M:EcoResStorageDimensionGroup.checkFixReference" /> for more
    /// information.
    /// </remarks>
    static public void checkFixReferenceAll()
    {
        EcoResStorageDimensionGroup             storageDimensionGroup;
        EcoResStorageDimensionGroupFldSetup     storageDimensionGroupFieldSetup;
        EcoResStorageDimensionGroupFldSetup     storageDimensionGroupFieldSetupDelete;
        Set                                     dimFields = InventDim::dimFieldList2Set(EcoResStorageDimensionGroup::dimEnabledFieldList());

        ttsbegin;

        while select DimensionFieldId from storageDimensionGroupFieldSetup
            group by DimensionFieldId
        {
            if (!dimFields.in(storageDimensionGroupFieldSetup.DimensionFieldId))
            { // delete from all groups
                delete_from storageDimensionGroupFieldSetupDelete
                    where storageDimensionGroupFieldSetupDelete.DimensionFieldId == storageDimensionGroupFieldSetup.DimensionFieldId;
            }
        }

        while select storageDimensionGroup
        {
            storageDimensionGroup.checkFixReference();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of IDs of fields from the <c>InventDim</c> table that are enabled to be storage
    ///    dimension fields.
    /// </summary>
    /// <returns>
    ///    A list of field IDs.
    /// </returns>
    static public List dimEnabledFieldList()
    {
        return InventDim::dimStorageDimEnabledFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResStorageDimensionGroup</c> table.
    /// </summary>
    /// <param name="_storageDimensionGroup">
    ///    The ID of the <c>EcoResStorageDimensionGroup</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResStorageDimensionGroup</c> table; otherwise, an empty record.
    /// </returns>
    static public EcoResStorageDimensionGroup find(
        EcoResStorageDimensionGroupRecId    _storageDimensionGroup,
        boolean                             _forUpdate = false)
    {
        EcoResStorageDimensionGroup  ecoResStorageDimensionGroup;

        ecoResStorageDimensionGroup.selectForUpdate(_forUpdate);
        if (_storageDimensionGroup)
        {
            select firstonly ecoResStorageDimensionGroup
                where ecoResStorageDimensionGroup.RecId == _storageDimensionGroup;
        }
        return ecoResStorageDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensionGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>EcoResStorageDimensionGroup</c> table.
    /// </summary>
    /// <param name="_dimensionGroupName">
    ///    A dimension group name that will be used as a filter in the search.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean that indicates whether a buffer is to be selected for update.
    /// </param>
    /// <returns>
    ///    An <c>EcoResStorageDimensionGroup</c> table buffer.
    /// </returns>
    static public EcoResStorageDimensionGroup findByDimensionGroupName(
        EcoResStorageDimensionGroupName     _dimensionGroupName,
        boolean                             _forUpdate = false)
    {
        EcoResStorageDimensionGroup  ecoResStorageDimensionGroup;

        ecoResStorageDimensionGroup.selectForUpdate(_forUpdate);
        if (_dimensionGroupName)
        {
            select firstonly ecoResStorageDimensionGroup
                where ecoResStorageDimensionGroup.Name == _dimensionGroupName;
        }
        return ecoResStorageDimensionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the relevant maintenance form for the specified storage dimension group.
    /// </summary>
    /// <param name="_storageDimensionGroup">
    /// The storage dimension group for which the form is opened.
    /// </param>
    static public void jumpRef(EcoResStorageDimensionGroupRecId _storageDimensionGroup)
    {
        Args                            args            = new Args();
        MenuFunction                    menuFunction;

        menuFunction = new MenuFunction(menuitemDisplayStr(EcoResStorageDimensionGroup), MenuItemType::Display);
        args.lookupRecord(EcoResStorageDimensionGroup::find(_storageDimensionGroup));
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(EcoResStorageDimensionGroup, IsWarehousePrimaryStockingEnabled),
                [fieldNum(EcoResStorageDimensionGroup, IsWarehouseWHSEnabled)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResStorageDimensionGroup, IsWarehousePrimaryStockingEnabled): this.setWHSDefaultFields(); break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS312269</DeveloperDocumentation>
	<FormRef>EcoResStorageDimensionGroup</FormRef>
	<Label>@SYS312259</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResStorageDimensionGroupFldSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResStorageDimensionGroupFldSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResStorageDimensionGroupItem</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResStorageDimensionGroupItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EcoResStorageDimensionGroupProduct</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>EcoResStorageDimensionGroupProduct</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseSpecificSetup</Name>
			<Label>@SYS312239</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsWarehouseMandatoryEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsWarehousePrimaryStockingEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHSEnabled</Name>
			<Label>@WAX4878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsWarehouseWHSEnabled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWarehouseMandatoryEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22073</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWarehousePrimaryStockingEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS54751</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWarehouseWHSEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDimGroupUsesWHS</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResStorageDimensionGroupName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>