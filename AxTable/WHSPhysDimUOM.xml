<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPhysDimUOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSPhysDimUOM extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the volume from the physical dimensions.
    /// </summary>
    /// <returns>
    /// The volume calculated from physical dimensions.
    /// </returns>
    public display Volume displayVolume()
    {
        return this.Depth * this.Height * this.Width;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.fixLoadForLocations();

        super();

        this.updateInventTablePhysicalDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSPhysDimUOM, Depth):
                if (this.Depth < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;

            case fieldNum(WHSPhysDimUOM, Height):
                if (this.Height < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;

            case fieldNum(WHSPhysDimUOM, Width):
                if (this.Width < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;

            case fieldNum(WHSPhysDimUOM, Weight):
                if (this.Weight < 0)
                {
                    ret = checkFailed("@WAX2925");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPhysicalDimensionsFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the physical dimensions from a released product to the physical dimensions.
    /// </summary>
    /// <remarks>
    /// This method should be called to avoid a circular depenency when updating the released product table.
    /// </remarks>
    [Hookable(false)]
    final internal void syncPhysicalDimensionsFromInventTable()
    {
        try
        {
            this.PreventPhysicalDimensionSync = NoYes::Yes;

            this.write();
        }
        finally
        {
            this.PreventPhysicalDimensionSync = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        this.fixLoadForLocations();

        super();

        this.updateInventTablePhysicalDimensions();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        // Check to see that either the item id or the group is filled in
        if ((this.ItemId  && this.PhysDimId) || (!this.ItemId && !this.PhysDimId))
        {
            throw error("@WAX2924");
        }

        if (!this.isItemHandlingUnitDimensionsEditable() && this.isAnyPhysicalDimensionDifferentThanItemInventoryPhysicalDimension())
        {
            throw error(strfmt("@WAX:ErrorMessageUpdateCancelledPhysicalDimensionUOMCorrespondsToItemInventoryUOM", this.ItemId));
        }

        if (this.isWeightLessThanConvertedItemGrossWeight())
        {
            warning(strFmt("@WAX:GrossWeightShouldBeMoreThanOrEqualToTheMultiplicationOfUOMConversion", this.ItemId));
        }

        if (!this.validateInventTablePhysicalDimensions())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific <c>whsPhysDimUOM</c> record exists.
    /// </summary>
    /// <param name="_recId">
    /// The parameter of type <c>RecId</c>.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
               (select firstonly whsPhysDimUOM
                where whsPhysDimUOM.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSPhysDimUOM</c> with given parameters.
    /// </summary>
    /// <param name="_recId">
    /// Id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSPhysDimUOM find(RefRecId _recId, boolean _forupdate = false)
    {
        WHSPhysDimUOM whsPhysDimUOM;

        if (_recId)
        {
            whsPhysDimUOM.selectForUpdate(_forupdate);

            select firstonly whsPhysDimUOM
                where whsPhysDimUOM.RecId == _recId;
        }

        return whsPhysDimUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhysDimUOMByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the physical dimensions for the specified unit defined on the item
    /// </summary>
    /// <param name="_itemId">
    /// The item ID
    /// </param>
    /// <param name="_unitId">
    /// The unit
    /// </param>
    /// <returns>
    /// The <c>WHSPhysDimUOM</c> for the unit on the item or null if not found
    /// </returns>
    public static WHSPhysDimUOM getPhysDimUOMByItem(ItemId _itemId, UnitOfMeasureSymbol _unitId)
    {
        WHSPhysDimUOM physDimUOMNull;

        if (!_unitId || !_itemId)
        {
            return physDimUOMNull;
        }

        // Include blank value in the select in order to hit index ItemIdPhysDimGroupUOMIdx
        WHSPhysDimUOM physDimUOM = WHSPhysDimUOM::findByItemIdAndUnitOfMeasure(_itemId, _unitId);

        if (physDimUOM.RecId == 0)
        {
            WHSPhysDimId physDimId = WHSInventTable::find(_itemId).PhysDimId;

            if (!physDimId)
            {
                return physDimUOMNull;
            }

            // Include blank value in the select in order to hit index ItemIdPhysDimGroupUOMIdx
            select firstonly physDimUOM
                where physDimUOM.ItemId     == ''
                &&    physDimUOM.PhysDimId  == physDimId
                &&    physDimUOM.uom        == _unitId;
        }

        return physDimUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItemUOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the itemId and UOM on the table.
    /// </summary>
    /// <param name="_itemId">
    ///     The item ID.
    /// </param>
    public static void updateItemUOM(ItemId _itemId)
    {
        WHSUOMSeqGroupLine  uomSeqGroupLine;
        WHSUOMSeqGroupId    seqGroupId;
        WHSPhysDimUOM       physDimUOMUpdate;

        seqGroupId = WHSInventTable::find(_itemId).uomSeqGroupId;

        while select UnitId from uomSeqGroupLine
            where uomSeqGroupLine.uomSeqGroupId == seqGroupId
        {
            select firstonly physDimUOMUpdate
                where physDimUOMUpdate.ItemId   == _itemId &&
                      physDimUOMUpdate.uom      == uomSeqGroupLine.UnitId;

            if (physDimUOMUpdate.RecId == 0)
            {
                ttsbegin;

                InventTable inventTable = InventTable::find(_itemId);
                physDimUOMUpdate.ItemId = _itemId;
                physDimUOMUpdate.uom    = uomSeqGroupLine.UnitId;
                physDimUOMUpdate.Weight = inventTable.grossWeight();
                physDimUOMUpdate.Depth  = inventTable.grossDepth;
                physDimUOMUpdate.Height = inventTable.grossHeight;
                physDimUOMUpdate.Width  = inventTable.grossWidth;
                physDimUOMUpdate.syncPhysicalDimensionsFromInventTable();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTablePhysicalDimensions</Name>
				<Source><![CDATA[
    private void updateInventTablePhysicalDimensions()
    {
        if (!this.PreventPhysicalDimensionSync              &&
            this.canUpdateInventTablePhysicalDimensions())
        {
            ttsbegin;

            InventTable inventTable = InventTable::find(this.ItemId, true);

            if (inventTable.RecId != 0)
            {
                inventTable.initFromPhysicalDimensions(this);
                inventTable.syncPhysicalDimensionsFromWHSPhysDimUOM();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTablePhysicalDimensions</Name>
				<Source><![CDATA[
    private boolean validateInventTablePhysicalDimensions()
    {
        boolean ret = true;

        if (this.canUpdateInventTablePhysicalDimensions())
        {
            InventTable inventTable = InventTable::find(this.ItemId);
            if (inventTable.RecId != 0)
            {
                inventTable.initFromPhysicalDimensions(this);
                ret = InventTable.validateWrite();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventTablePhysicalDimensions</Name>
				<Source><![CDATA[
    private boolean canUpdateInventTablePhysicalDimensions()
    {
        return (this.isItemHandlingUnitDimensionsEditable()    &&
                this.ItemId                                    &&
                this.uom == WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        this.fixLoadForLocations();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixLoadForLocations</Name>
				<Source><![CDATA[
    private void fixLoadForLocations()
    {
        WHSLocationLoad::fixLoadForLocations(
            WHSLocationLoad::locationsToFixOnPhysDimWriteDelete(this));

        this.fixLoadForLocationsCrossCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixLoadForLocationsCrossCompany</Name>
				<Source><![CDATA[
    private void fixLoadForLocationsCrossCompany()
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                WHSPhysDimUOM companyPhysDimUOM = queryRun.get(this.TableId);
                DataAreaId company = companyPhysDimUOM.DataAreaId;
                    
                if (companyPhysDimUOM && company && company != curExt())
                {
                    changecompany(company)
                    {
                        WHSPhysDimUOM physDimUOM;
                        select firstonly physDimUOM
                            where physDimUOM.ItemId == companyPhysDimUOM.ItemId
                                && physDimUOM.PhysDimId == companyPhysDimUOM.PhysDimId
                                && physDimUOM.UOM == companyPhysDimUOM.UOM;
                    
                        if (physDimUOM.RecId)
                        {
                            buf2Buf(this, physDimUOM);
                            WHSLocationLoad::fixLoadForLocations(WHSLocationLoad::locationsToFixOnPhysDimWriteDelete(physDimUOM));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWeightLessThanConvertedItemGrossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the weight for the current non-inventory unit of measure is less than the converted gross weight of the item.
    /// The converted gross weight of the item is calculated based on the item's gross weight and the unit of measure conversion
    /// between the current unit and the inventory unit of measure for the item.
    /// </summary>
    /// <returns>true, if the inventory weight is less than the converted item gross weight; otherwise false.</returns>
    public boolean isWeightLessThanConvertedItemGrossWeight()
    {
        UnitOfMeasureSymbol itemInventoryUOM = WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId);

        if (itemInventoryUOM
            && this.UOM != itemInventoryUOM)
        {
            EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                    this.ItemId,
                                                                    '',
                                                                    this.UOM,
                                                                    itemInventoryUOM);

            if (productUnitConverter.canValueBeConverted())
            {
                Qty convertedQuantity = productUnitConverter.convertValue(1);

                if (this.Weight < InventTable::find(this.ItemId).grossWeight() * convertedQuantity)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemHandlingUnitDimensionsEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the physical dimensions for an item in its handling unit can be edited.
    /// </summary>
    /// <returns>
    /// true if the physical dimensions are editable; otherwise, false.
    /// </returns>
    final public boolean isItemHandlingUnitDimensionsEditable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnitSameAsItemInventoryUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the unit is the same as the item's inventory handling unit, if the item is set.
    /// </summary>
    /// <returns>true, if the unit is the same as the item's inventory handling unit and the item is set; otherwise false.</returns>
    public boolean isUnitSameAsItemInventoryUnit()
    {
        return (this.ItemId
                && this.UOM == this.inventHandlingUnit());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventHandlingUnit</Name>
				<Source><![CDATA[
    private UnitOfMeasureSymbol inventHandlingUnit()
    {
        return WHSCatchWeightHelper::inventHandlingUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyPhysicalDimensionDifferentThanItemInventoryPhysicalDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks any of the physical dimensions is different than the inventory physical dimensions for the item,
    /// if the unit is the same as the inventory handling unit of measurement for the item.
    /// </summary>
    /// <returns>true, if any of the physical dimensions is different than the inventory physical dimensions for the item; otherwise, false.</returns>
    public boolean isAnyPhysicalDimensionDifferentThanItemInventoryPhysicalDimension()
    {
        if (this.ItemId)
        {
            InventTable inventTable = InventTable::find(this.ItemId);

            if (inventTable)
            {
                return ((this.Width != inventTable.grossWidth
                            || this.Depth != inventTable.grossDepth
                            || this.Height != inventTable.grossHeight
                            || this.Weight != inventTable.grossWeight())
                        && this.UOM == this.inventHandlingUnit());
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemIdAndUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSPhysDimUOM</c> with given parameters.
    /// </summary>
    /// <param name="_itemId">
    /// Item Id of the record.
    /// </param>
    /// <param name="_unitId">
    /// Unit of measure of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for based on the parameters provided.
    /// </returns>
    /// <remarks>
    /// The method searches only for records in which field PhysDimId is an empty string.
    /// </remarks>
    public static WHSPhysDimUOM findByItemIdAndUnitOfMeasure(
        ItemId				_itemId,
        UnitOfMeasureSymbol	_unitId,
        boolean             _forupdate	= false)
    {
        WHSPhysDimUOM physicalDimensionUOM;

        if (_itemId && _unitId)
        {
            physicalDimensionUOM.selectForUpdate(_forupdate);

            select firstonly physicalDimensionUOM
                where physicalDimensionUOM.ItemId == _itemId
                    && physicalDimensionUOM.PhysDimId == ''
                    && physicalDimensionUOM.UOM == _unitId;
        }

        return physicalDimensionUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum(WHSPhysDimUOM, Depth),
                [fieldnum(WHSPhysDimUOM, UOM)]],
            [fieldnum(WHSPhysDimUOM, Width),
                [fieldnum(WHSPhysDimUOM, UOM)]],
            [fieldnum(WHSPhysDimUOM, Height),
                [fieldnum(WHSPhysDimUOM, UOM)]],
            [fieldnum(WHSPhysDimUOM, Weight),
                [fieldnum(WHSPhysDimUOM, UOM)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(WHSPhysDimUOM, Depth):
                this.initDepth();
                break;
            case fieldnum(WHSPhysDimUOM, Width):
                this.initWidth();
                break;
            case fieldnum(WHSPhysDimUOM, Height):
                this.initHeight();
                break;
            case fieldnum(WHSPhysDimUOM, Weight):
                this.initWeight();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepth</Name>
				<Source><![CDATA[
    private void initDepth()
    {
        if (this.isUnitSameAsItemInventoryUnit())
        {
            this.Depth = InventTable::find(this.ItemId).grossDepth;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWidth</Name>
				<Source><![CDATA[
    private void initWidth()
    {
        if (this.isUnitSameAsItemInventoryUnit())
        {
            this.Width = InventTable::find(this.ItemId).grossWidth;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeight</Name>
				<Source><![CDATA[
    private void initHeight()
    {
        if (this.isUnitSameAsItemInventoryUnit())
        {
            this.Height = InventTable::find(this.ItemId).grossHeight;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWeight</Name>
				<Source><![CDATA[
    private void initWeight()
    {
        if (this.isUnitSameAsItemInventoryUnit())
        {
            this.Weight = InventTable::find(this.ItemId).grossWeight();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4413</DeveloperDocumentation>
	<Label>@WAX2911</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>PhysDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdPhysDimGroupUOMIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ItemIdPhysDimGroupUOMIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Depth</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Height</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Width</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Depth</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDepth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSHeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhysDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPhysDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Width</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWidth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreventPhysicalDimensionSync</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSPreventPhysicalDimensionSync</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdPhysDimGroupUOMIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PhysDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UOM</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOM</Name>
					<Field>UOM</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSPhysDimGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSPhysDimGroupTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PhysDimId</Name>
					<SourceEDT>WHSPhysDimId</SourceEDT>
					<Field>PhysDimId</Field>
					<RelatedField>PhysDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>