<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UpdatePLA_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class UpdatePLA_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>challanNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets challan number.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction.
    /// </param>
    /// <returns>
    /// The challan number.
    /// </returns>
    public Name challanNumber(LedgerJournalTrans  _ledgerJournalTrans)
    {
        ChallanInformation_IN      challanInformation;

        select ChallanNumber from challanInformation
            where challanInformation.SourceRecID == _ledgerJournalTrans.RecId;

        return challanInformation.ChallanNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether record can be posted.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A instance of <c>LedgerJournalTrans</c> table is used to find record.
    /// </param>
    /// <returns>
    /// Returns true if check is valid.
    /// </returns>
    public boolean checkPosted(LedgerJournalTrans  _ledgerJournalTrans)
    {
        UpdatePLA_IN    updatePLA;
        boolean         check;

        select Posted from updatePLA
            where updatePLA.SourceRecID == _ledgerJournalTrans.RecId;

        if (updatePLA.Posted)
        {
            check = true;
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>componentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sumarized amount in the <c>UpdatePLAEnquiry_IN</c> tabel for geiven parameter.
    /// </summary>
    /// <param name="_updatePLA">
    /// A instance of <c>UpdatePLA_IN</c> table is used to find record.
    /// </param>
    /// <returns>
    /// Returns the sumarized amount.
    /// </returns>
    public AmountCur componentAmount(UpdatePLA_IN _updatePLA)
    {
        UpdatePLAEnquiry_IN    updateEnquiryPLA;

        select sum(Amount)
            from updateEnquiryPLA
                where updateEnquiryPLA.TransRecId == _updatePLA.RecId;

        return updateEnquiryPLA.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>UpdatePLA_IN</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Buffer of <c>LedgerJournalTrans</c> table.
    /// </param>
    public void initFromLedgerJournalTrans(LedgerJournalTrans  _ledgerJournalTrans)
    {
        this.SourceRecID     = _ledgerJournalTrans.RecId;
        if (_ledgerJournalTrans.amount() < 0)
        {
            this.JournalAmount = _ledgerJournalTrans.amount() * -1;
        }
        else
        {
            this.JournalAmount = _ledgerJournalTrans.amount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                         ret;
        TaxLedgerAccountGroup_IN        taxLedgerAccountGroup;
        TaxRegistrationNumbers_IN       taxRegistrationNumberTable;
        TaxRegistrationNumber_IN        eccNumber;
        TaxLedgerAccountSetup_IN        taxLedgerAccountSetup;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            select taxLedgerAccountGroup
                where taxLedgerAccountGroup.TaxAccountGroup  == TaxLedgerAccountGroup_IN::find(this.TaxLedgerAccountGroup).TaxAccountGroup
                    &&   taxLedgerAccountGroup.TaxType        == TaxTypeComponent_IN::Excise;

            switch (_fieldIdToCheck)
            {
                case fieldnum (UpdatePLA_IN , TaxLedgerAccountGroup):

                    if (!taxLedgerAccountGroup)
                    {
                          throw error(strfmt("@GLS5074", taxLedgerAccountGroup.TaxAccountGroup, TaxType_IN::Excise));
                    }
                    break;

                case fieldnum (UpdatePLA_IN, eccTaxRegistrationNumberTable):
                    // Checking whether any registration numbers are defined for Tax Ledger account group
                    // If it all, will validate registration number  is defined in TaxRegistrationNumbers_IN table and of type excise
                    // If it table, then will validate registration number is available in TaxLedgerSetup_IN table
                    eccNumber = TaxRegistrationNumbers_IN::find(this.ECCTaxRegistrationNumberTable).RegistrationNumber;
                    select firstOnly taxLedgerAccountSetup
                        where taxLedgerAccountSetup.AccountCode           == TaxAccountCode_IN::Table
                           && taxLedgerAccountSetup.TaxLedgerAccountGroup == this.TaxLedgerAccountGroup;
                    // Checking whether any registration numbers are defined for Tax Ledger account group
                    if (taxLedgerAccountSetup)
                    {
                        taxLedgerAccountSetup = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(this.TaxLedgerAccountGroup, TaxAccountCode_IN::Table, this.ECCTaxRegistrationNumberTable);
                        if (!taxLedgerAccountSetup)
                        {
                            throw error(strfmt("@GLS6113", eccNumber, taxLedgerAccountGroup.TaxAccountGroup));
                        }
                    }
                    else
                    {
                        // If it all, will validate registration number  is defined in TaxRegistrationNumbers_IN table and of type excise
                        taxRegistrationNumberTable = TaxRegistrationNumbers_IN::findByTaxType(eccNumber, TaxType_IN::Excise);

                        if (!taxRegistrationNumberTable)
                        {
                            throw error(strfmt("@GLS6113", eccNumber, taxLedgerAccountGroup.TaxAccountGroup));
                        }
                    }
                 break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the UpdatePLA_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing UpdatePLA_IN table.
    /// </returns>
    public static UpdatePLA_IN find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        UpdatePLA_IN updatePLA;

        updatePLA.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            updatePLA.concurrencyModel(_concurrencyModel);
        }

        select firstonly updatePLA
            where updatePLA.RecId == _recId;

        return updatePLA;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64114</DeveloperDocumentation>
	<FormRef>updatePLA_IN</FormRef>
	<Label>@GLS6225</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxLedgerAccountGroup</TitleField1>
	<TitleField2>ECCTaxRegistrationNumberTable</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>UpdatePLAEnquiry_IN</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>UpdatePLAEnquiry_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxLedgerAccountGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ECCTaxRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UpdatePLA</Name>
			<Label>@GLS6225</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxLedgerAccountGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ECCTaxRegistrationNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Posted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SettleInterimPLA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ECCTaxRegistrationNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5102</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>JournalAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS6232</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Posted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS22361</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SettleInterimPLA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS6234</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxLedgerAccountGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5094</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxLedgerAccountGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxLedgerAccountGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ECCTaxRegistrationNumberTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ECCTaxRegistrationNumberTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceRecID</Name>
					<Field>SourceRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxLedgerAccountGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>TaxLedgerAccountGroup_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxLedgerAccountGroup_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxLedgerAccountGroup_IN_UpdatePLA_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxLedgerAccountGroup</Name>
					<Field>TaxLedgerAccountGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistrationNumberTable</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_UpdatePLA_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ECCTaxRegistrationNumberTable</Name>
					<Field>ECCTaxRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>