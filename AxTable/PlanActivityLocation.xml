<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PlanActivityLocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWMSLocation</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean checkWMSLocation(
        RefRecId         _planActivityRecId = this.PlanActivity,
        InventLocationId _inventLocationId  = this.InventLocationId,
        WMSLocationId    _wmsLocationId     = this.wmsLocationId,
        NoYes            _updateOnHandPick  = NoYes::Yes)
    {
        boolean         result = true;

        if (_inventLocationId)
        {
            result = InventLocation::checkExist(_inventLocationId);
        }

        if (   result
            && _inventLocationId
            && _wmsLocationId)
        {
            WMSLocation wmsLocation = WMSLocation::find(_wmsLocationId,_inventLocationId);

            if (!wmsLocation)
            {
                result = result && checkFailed(strFmt("@SYS307493",_inventLocationId,_wmsLocationId));
            }

            if (wmsLocation
                    && !wmsLocation.canBeUsedWithPickingActivityUpdatingOnhandInventory())
            {
                if (_planActivityRecId)
                {
                    PlanActivity planActivity = PlanActivity::find(_planActivityRecId);
                    if (planActivity
                            && planActivity.PlanActivityType == PlanActivityType::Pick
                            && planActivity.OnHandUpdate)
                    {
                        result = result && checkFailed(strFmt("@SYS307492",wmsLocation.InventLocationId,wmsLocation.wmsLocationId));
                    }
                }
                else
                {
                    if (_updateOnHandPick)
                    {
                        result = result && checkFailed(strFmt("@SYS307492",wmsLocation.InventLocationId,wmsLocation.wmsLocationId));
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares a <c>PlanActivityLocation</c> record with the current instance.
    /// </summary>
    /// <param name="_planActivityLocation">
    /// The record to which to compare.
    /// </param>
    /// <returns>
    /// true if the records hold the same values; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean compare(PlanActivityLocation _planActivityLocation)
    {
        return    this.InventLocationId         == _planActivityLocation.InventLocationId
               && this.wmsLocationId            == _planActivityLocation.wmsLocationId
               && this.InventLocationDataAreaId == _planActivityLocation.InventLocationDataAreaId
               && this.wmsLocationDataAreaId    == _planActivityLocation.wmsLocationDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills an <c>InventDim</c> buffer with a warehouse, location, and site identification.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The returned buffer does not exist in the database. The <c>InventDimId</c> field will not be set.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim inventDim()
    {
        InventDim       inventDim;

        inventDim.InventLocationId = this.InventLocationId;
        inventDim.wmsLocationId    = this.wmsLocationId;
        inventDim.InventSiteId     = InventLocation::find(this.InventLocationId).InventSiteId;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventLocation</c> record that is referenced in the <c>InventLocationId</c> table
    ///    field.
    /// </summary>
    /// <returns>
    ///    An <c>InventLocation</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventLocation inventLocation()
    {
        return InventLocation::find(this.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the level of inventory control at the location.
    /// </summary>
    /// <returns>
    /// The level of inventory control.
    /// </returns>
    /// <remarks>
    /// The level can be full or restricted.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanInventoryControl inventoryControl()
    {
        LeanInventoryControl    leanInventoryControl = LeanInventoryControl::Full;

        if (   this.InventLocationId
            && this.wmsLocationId
            && this.wmsLocationDataAreaId
            && WMSLocation::find(this.wmsLocationId,this.InventLocationId).isLevelOfInventoryControlRestricted())
        {
            leanInventoryControl = LeanInventoryControl::Restricted;
        }

        return leanInventoryControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventSite</c> record that is referenced in the <c>InventSiteId</c> table field.
    /// </summary>
    /// <returns>
    ///    An <c>InventSite</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventSite inventSite()
    {
        InventSite      inventSite;

        inventSite = InventSite::find(this.inventLocation().InventSiteId);

        return inventSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>WMSLocation</c> record that is referenced in the <c>WMSLocationId</c> field.
    /// </summary>
    /// <returns>
    ///    A <c>WMSLocation</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public WMSLocation inventWMSLocation()
    {
        return WMSLocation::find(this.wmsLocationId,this.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
        public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PlanActivityLocation,InventLocationId):
                this.InventLocationDataAreaId = this.InventLocationId ? appl.company().dataArea(tableNum(InventLocation)) : '';
                break;
            case fieldNum(PlanActivityLocation,wmsLocationId):
                this.wmsLocationDataAreaId = this.wmsLocationId ? appl.company().dataArea(tableNum(WMSLocation)) : '';
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean result;

        result = super();
        result = result && this.checkWMSLocation();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PlanActivityLocation</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record in the <c>PlanActivityLocation</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from planActivityLocation
                    where planActivityLocation.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanActivityLocation</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PlanActivityLocation</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanActivityLocation</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityLocation find(recId _recId, boolean _forUpdate = false)
    {
        PlanActivityLocation    planActivityLocation;

        if (_recId)
        {
            planActivityLocation.selectForUpdate(_forUpdate);

            select firstonly planActivityLocation
                where planActivityLocation.RecId == _recId;
        }

        return planActivityLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PlanActivityLocation</c> table.
    /// </summary>
    /// <param name="_planActivity">
    /// The planned activity of the <c>PlanActivityLocation</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PlanActivityLocation</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityLocation findPlanActivity(RefRecId _planActivity, boolean _forUpdate = false)
    {
        PlanActivityLocation    planActivityLocation;

        if (_planActivity)
        {
            planActivityLocation.selectForUpdate(_forUpdate);

            select firstonly planActivityLocation
                where planActivityLocation.PlanActivity == _planActivity;
        }

        return planActivityLocation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS332818</DeveloperDocumentation>
	<FormRef>PlanActivity</FormRef>
	<Label>@SYS152586</Label>
	<SingularLabel>@SYS152585</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanActivity</TitleField1>
	<TitleField2>InventLocationId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<ReplacementKey>PlanActivityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventLocation</Name>
			<Label>@SYS152623</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanActivity</Name>
			<Label>@SYS152578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanActivity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanActivityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlanActivityLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationDataAreaId</Name>
					<Field>InventLocationDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanActivity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PlanActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlanActivityLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanActivity</Name>
					<Field>PlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PlanActivityLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationDataAreaId</Name>
					<Field>WMSLocationDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>