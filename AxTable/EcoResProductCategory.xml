<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductCategory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductCategory extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanProductCategoryAttributeValues</Name>
				<Source><![CDATA[
    private void cleanProductCategoryAttributeValues()
    {
        EcoResCategoryAttributeLookup ecoResCategoryAttributeLookup;
        EcoResCategoryAttributeLookup ecoResCategoryAttributeLookupDup;
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResProductCategory otherProductCategory;

        // for every attribute of this category
        while select Attribute from ecoResCategoryAttributeLookup
        where ecoResCategoryAttributeLookup.Category == this.orig().Category
        {
            // select other category attributes that the product may inherit due to inclusion in those categories
            select firstonly Category from ecoResCategoryAttributeLookupDup
            where ecoResCategoryAttributeLookupDup.Category != this.orig().Category &&
                    ecoResCategoryAttributeLookupDup.Attribute == ecoResCategoryAttributeLookup.Attribute
            exists join otherProductCategory
                where otherProductCategory.Product == this.orig().Product &&
                    ecoResCategoryAttributeLookupDup.Category == otherProductCategory.Category;

            // if the product is in no other category that have this attribute
            // (the orig category is the sole source of this attribute for the product).
            if (!ecoResCategoryAttributeLookupDup)
            {
                if (RetailProductKeepAttributeValuesWhenProductCategoryChangedFlight::instance().isEnabled())
                {
                    boolean isCategoryUpdated = this.Category != this.orig().Category;

                    if (isCategoryUpdated)
                    {
                        select firstonly RecId from categoryAttributeLookup
                        where categoryAttributeLookup.Category == this.Category
                        && categoryAttributeLookup.Attribute == ecoResCategoryAttributeLookup.Attribute;

                        if (!categoryAttributeLookup.RecId)
                        {
                            this.deleteAttributeValue(this.orig().Product, ecoResCategoryAttributeLookup.Attribute);
                        }
                    }
                }
                else
                {
                    this.deleteAttributeValue(this.orig().Product, ecoResCategoryAttributeLookup.Attribute);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the value of the attribute.
    /// </summary>
    /// <param name = "_product"> The product value of the attribute to be deleted. </param>
    /// <param name = "_attribute"> The attribute to be deleted. </param>
    protected void deleteAttributeValue(EcoResProductRecId _product, RefRecId _attribute)
    {
        EcoResAttributeValue ecoResAttributeValue;
        EcoResProductInstanceValue ecoResProductInstanceValue;

        delete_from ecoResAttributeValue
                        where ecoResAttributeValue.Attribute == _attribute
                        exists join ecoResProductInstanceValue
                            where ecoResProductInstanceValue.Product == _product &&
                                ecoResProductInstanceValue.RecId == ecoResAttributeValue.InstanceValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.cleanProductCategoryAttributeValues();

        this.cleanCatalogProductCategoryExclusions();

        this.cleanSpecialCategoryMembers();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean isCategoryUpdated = this.Category != this.orig().Category;
        boolean isProductUpdated = this.Product != this.orig().Product;

        if (isCategoryUpdated
             || isProductUpdated)
        {
            if (this.validateDelete())
            {
                // Create a new record based on the current record
                EcoResProductCategory newProductCategoryRecord;
                newProductCategoryRecord.data(this);

                // Delete the current record and insert a new one
                this.delete();
                newProductCategoryRecord.insert();

                this.RecId = newProductCategoryRecord.RecId;
            }
            else
            {
                error("@SCM:Error_ProductCategoryAssignmentCannotBeDeletedAfterKeyFieldUpdate");
            }
        }
        else
        {
            if (isCategoryUpdated)
            {
                ttsbegin;

                this.cleanProductCategoryAttributeValues();

                this.cleanCatalogProductCategoryExclusions();

                this.cleanSpecialCategoryMembers();

                ttscommit;
            }

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>Category</c> value is in the correct <c>CategoryHierarchy</c> object and
    ///    has only one procurement category hierarchy.
    /// </summary>
    /// <returns>
    ///    true if the <c>Category</c> value is in the correct <c>CategoryHierarchy</c> object and has only
    ///    one procurement category hierarchy; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean                     ret;
        EcoResCategory              ecoResCategory;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;
        EcoResProductCategory       ecoResProductCategory;

        ret = super();

        if (ret)
        {
            // Verify if category is in the right category hierarchy
            ecoResCategory = EcoResCategory::find(this.Category);
            if (ecoResCategory.CategoryHierarchy != this.CategoryHierarchy)
            {
                error("@SYS136199");
                ret = false;
            }

            // Verify if not the same category hierarchy and category entered
            select count(Product)
            from ecoResProductCategory
            where ecoResProductCategory.Product == this.Product
                && ecoResProductCategory.CategoryHierarchy == this.CategoryHierarchy
                && ecoResProductCategory.Category == this.Category
                && ecoResProductCategory.RecId != this.RecId;

            if (int642int(ecoResProductCategory.Product) > 0)
            {
                error("@SYS136200");
                ret = false;
            }

            ret = this.checkRoleSpecificRestrictions()
                && this.validateProductIsNotVariant()
                && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRoleSpecificRestrictions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the write of the record would invalidate any role specific restrictions.
    /// </summary>
    /// <param name = "_raiseError">Determines if an error message should be inserted in case a violation is found; optional.</param>
    /// <returns>true of there are no role specific restrictions violated; otherwise, false.</returns>
    public boolean checkRoleSpecificRestrictions(boolean _raiseError = true)
    {
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

        // All Category Hierarchy Roles have to be checked as a Category Hierarchy can be assigned multiple
        // Category Hierarchy Roles.
        while select NamedCategoryHierarchyRole
                from ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == this.CategoryHierarchy
        {
            switch(ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole)
            {
                case EcoResCategoryNamedHierarchyRole::Procurement:
                    if(!this.checkOneRoleHierarchy(EcoResCategoryNamedHierarchyRole::Procurement, "@SYS136201", _raiseError))
                    {
                        return false;
                    }
                    break;
                case EcoResCategoryNamedHierarchyRole::PackingMaterials_W:
                    if(!this.checkOneRoleHierarchy(EcoResCategoryNamedHierarchyRole::PackingMaterials_W, "@PackingMaterial:InventOnePackingMaterialCate", _raiseError))
                    {
                        return false;
                    }
                    break;
                case EcoResCategoryNamedHierarchyRole::CostManagement:
                    if(!this.checkOneCategoryFromOneRoleHierarchy(EcoResCategoryNamedHierarchyRole::CostManagement, "@CostManagement:EcoResProductCategory_OnlyOneCostManagementPerHierarchyAllowed_Error", _raiseError))
                    {
                        return false;
                    }
                    break;
                case EcoResCategoryNamedHierarchyRole::Retail:
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && !this.checkOneRoleHierarchy(EcoResCategoryNamedHierarchyRole::Retail, "@RET260759", _raiseError))
                    {
                        return false;
                    }
                    break;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOneRoleHierarchy</Name>
				<Source><![CDATA[
    private boolean checkOneRoleHierarchy(EcoResCategoryNamedHierarchyRole _role, str _errorMsg, boolean _raiseError)
    {
        EcoResProductCategory ecoResProductCategory;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

        boolean ret = true;

        select count(CategoryHierarchy)
                from ecoResProductCategory
                join ecoResCategoryHierarchyRole
                    where ecoResProductCategory.CategoryHierarchy == this.CategoryHierarchy
                        && ecoResProductCategory.RecId != this.RecId
                        && ecoResProductCategory.Product == this.Product
                        && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == _role;

        if (ecoResProductCategory.CategoryHierarchy > 0)
        {
            if (_raiseError)
            {
                error(_errorMsg);
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOneCategoryFromOneRoleHierarchy</Name>
				<Source><![CDATA[
    private boolean checkOneCategoryFromOneRoleHierarchy(EcoResCategoryNamedHierarchyRole _role, str _errorMsg, boolean _raiseError)
    {
        EcoResProductCategory ecoResProductCategory;

        boolean ret = true;

        select count(CategoryHierarchy)
                from ecoResProductCategory
                where ecoResProductCategory.CategoryHierarchy == this.CategoryHierarchy
                    && ecoResProductCategory.RecId != this.RecId
                    && ecoResProductCategory.Product == this.Product;

        if (ecoResProductCategory.CategoryHierarchy > 0)
        {
            if (_raiseError)
            {
                error(_errorMsg);
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductAndCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResCategoryHierarchy</c> table.
    /// </summary>
    /// <param name="_productRecId">
    /// RecId of the product.
    /// </param>
    /// <param name="_ecoResCategoryHierarchy">
    /// RecId of a category hierarchy.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines if the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResProductCategory</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResProductCategory findByProductAndCategoryHierarchy(RefRecId _productRecId,
                                                                          RefRecId _ecoResCategoryHierarchy,
                                                                          boolean _forUpdate = false)
    {
        EcoResProductCategory ecoResProductCategory;
        
        ecoResProductCategory.selectForUpdate(_forUpdate);

        select firstonly ecoResProductCategory
            where ecoResProductCategory.CategoryHierarchy == _ecoResCategoryHierarchy
               && ecoResProductCategory.Product == _productRecId;

        return ecoResProductCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTmpProductTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>EcoResProductCategory</c> table.
    /// </summary>
    /// <param name="_tmpProductTable">
    /// A <c>TmpInventTable</c> record.
    /// </param>
    /// <param name="_ecoResCategory">
    /// A <c>EcoResCategory</c> record.
    /// </param>
    /// <returns>
    /// true if any rows were created; otherwise, false.
    /// </returns>
    public static boolean createFromTmpProductTable(
        TmpRetailProductsToAdd _tmpProductTable,
        EcoResCategory _ecoResCategory)
    {
        EcoResProductCategory insertedRow;
        int numberOfRows;
        ttsbegin;

        while select * from _tmpProductTable
        {
            // If it is master product, it takes varaint Id as product Id.
            if (_tmpProductTable.EcoResDistinctProductVariant)
            {
                insertedRow = EcoResProductCategory::insertEcoResProductCategory(
                                    _ecoResCategory,
                                    EcoResProduct::find(_tmpProductTable.EcoResDistinctProductVariant));
            }
            // Else it is standard product, then it should takes only product Id.
            else
            {
                insertedRow = EcoResProductCategory::insertEcoResProductCategory(
                                    _ecoResCategory,
                                    EcoResProduct::find(_tmpProductTable.EcoResProduct));
            }

            if (insertedRow)
            {
                numberOfRows ++;
            }
        }

        ttscommit;

        if (numberOfRows)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByItemIdCategoryHierarchyRole</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProductCategory</c> table.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> field of the record to find.
    /// </param>
    /// <param name="_ecoResCategoryNamedHierarchyRole">
    ///    A <c>EcoResCategoryNamedHierarchyRole</c> enumeration value that indicates the Category Hierarchy
    ///    to use as filter.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResProductCategory</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResProductCategory findByItemIdCategoryHierarchyRole(
        ItemId _itemId,
        EcoResCategoryNamedHierarchyRole _ecoResCategoryNamedHierarchyRole,
        boolean _forUpdate = false)
    {
        EcoResProductCategory ecoResProductCategory;
        InventTable inventTable;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

        ecoResProductCategory.selectForUpdate(_forUpdate);

        select firstonly ecoResProductCategory
            exists join ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                    && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == _ecoResCategoryNamedHierarchyRole
            exists join inventTable
                where inventTable.Product == ecoResProductCategory.Product
                    && inventTable.ItemId == _itemId;

        return ecoResProductCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductIdAndCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResProductCategory</c> table using product and category Id.
    /// </summary>
    /// <param name="_productRecId">
    /// RecId of the product.
    /// </param>
    /// <param name="_categoryId">
    /// CategoryId of the product.
    /// </param>
    /// <param name="_forUpdate">
    /// Checks whether the update is enabled.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResProductCategory</c> table; otherwise, an empty record.
    /// </returns>
    static EcoResProductCategory findByProductIdAndCategoryId(RefRecId _productRecId, EcoResCategoryId _categoryId, boolean _forUpdate = false)
    {
        EcoResProductCategory ecoResProductCategory;

        ecoResProductCategory.selectForUpdate(_forUpdate);

        select firstonly ecoResProductCategory
        where ecoResProductCategory.Product == _productRecId &&
              ecoResProductCategory.Category == _categoryId;

        return ecoResProductCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductIdCategoryHierarchyRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResCategoryHierarchyRole</c> table.
    /// </summary>
    /// <param name="_productRecId">
    /// RecId of the product.
    /// </param>
    /// <param name="_ecoResCategoryNamedHierarchyRole">
    /// A record buffer of <c>EcoResCategoryNamedHierarchyRole</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// Checks whether the update is enabled.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResProductCategory</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResProductCategory findByProductIdCategoryHierarchyRole(RefRecId _productRecId,
        EcoResCategoryNamedHierarchyRole _ecoResCategoryNamedHierarchyRole,
        boolean _forUpdate = false)
    {
        EcoResProductCategory ecoResProductCategory;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRole;

        ecoResProductCategory.selectForUpdate(_forUpdate);

        select firstonly ecoResProductCategory
            exists join ecoResCategoryHierarchyRole
                where ecoResCategoryHierarchyRole.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                    && ecoResCategoryHierarchyRole.NamedCategoryHierarchyRole == _ecoResCategoryNamedHierarchyRole
                    && ecoResProductCategory.Product == _productRecId;

        return ecoResProductCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategoryByProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>EcoResProductCategory</c> table.
    /// </summary>
    /// <param name="_product">
    ///    The <c>ProductId</c> to find the category for.
    /// </param>
    /// <param name="_hierarchyId">
    ///    The ID of a record in the <c>EcoResCategoryHierarchy</c> table.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResCategory</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResCategory findCategoryByProduct(int64 _product, EcoResCategoryHierarchyId _hierarchyId = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Procurement).CategoryHierarchy)
    {
        EcoResProductCategory   ecoResProductCategory;
        EcoResCategory          ecoResCategory;

        select firstonly ecoResCategory
            join TableId
            from ecoResProductCategory
            where ecoResProductCategory.Category            == ecoResCategory.RecId
               && ecoResProductCategory.CategoryHierarchy   == _hierarchyId
               && ecoResProductCategory.Product             == _product;

        return ecoResCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRetailCategoryByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the retail category id for an item
    /// </summary>
    /// <param name="_itemId">
    /// An item ID
    /// </param>
    /// <returns>
    /// A RetailCategory ID
    /// </returns>
    /// <remarks>
    /// Return a RetailCategory ID if found.
    /// </remarks>
    public static RetailCategory findRetailCategoryByItem(ItemId  _itemId)
    {
        EcoResProductCategory   ecoResProductCategory;

        ecoResProductCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(_itemId, EcoResCategoryNamedHierarchyRole::Retail);

        return ecoResProductCategory.Category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEcoResProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates record into table <c>EcoResProductCategory</c>.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// A record buffer of table <c>EcoResCategory</c> to find existing
    /// record in table <c>EcoResProductCategory</c> for a selected category hierarchy.
    /// </param>
    /// <param name="_ecoResProduct">
    /// A record buffer of table <c>EcoResProduct</c> to find existing
    /// record in table <c>EcoResProductCategory</c> for selected product.
    /// </param>
    /// <returns>
    ///  A record in the <c>EcoResProductCategory</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResProductCategory insertEcoResProductCategory(EcoResCategory _ecoResCategory,
                                            EcoResProduct _ecoResProduct)
    {
        EcoResProductCategory   newEcoResProductCategory;
        EcoResProductCategory   selectedEcoResProductCategory;
        boolean                 isRetailProductHierarchyRole;

        isRetailProductHierarchyRole = EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::Retail, _ecoResCategory.CategoryHierarchy);

        if (isRetailProductHierarchyRole)
        {
            // When the hierarchy role is Retail product categories, then one product cannot be associated to more than one category in the same hierarchy
            select firstonly RecId from selectedEcoResProductCategory
                where   selectedEcoResProductCategory.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                    &&  selectedEcoResProductCategory.Product           == _ecoResProduct.RecId;
        }
        else
        {
            // When the hierarchy role is not Retail product categories, then one product may be associated to more than one category in the same hierarchy
            select firstonly RecId from selectedEcoResProductCategory
                where   selectedEcoResProductCategory.CategoryHierarchy == _ecoResCategory.CategoryHierarchy
                    &&  selectedEcoResProductCategory.Product           == _ecoResProduct.RecId
                    &&  selectedEcoResProductCategory.Category          == _ecoResCategory.RecId;
        }

        if (selectedEcoResProductCategory.RecId == 0)
        {
            newEcoResProductCategory = null;
            newEcoResProductCategory.initValue();
            newEcoResProductCategory.Category           = _ecoResCategory.RecId;
            newEcoResProductCategory.CategoryHierarchy  = _ecoResCategory.CategoryHierarchy;
            newEcoResProductCategory.Product            = _ecoResProduct.RecId;

            // Find existing record with same Product and CategoryHierarchy, and set the DisplayOrder to keep consistent if found.
            EcoResProductCategory existingEcoResProductCategory = EcoResProductCategory::findByProductAndCategoryHierarchy(_ecoResProduct.RecId, _ecoResCategory.CategoryHierarchy);

            if (existingEcoResProductCategory)
            {
                newEcoResProductCategory.DisplayOrder = existingEcoResProductCategory.DisplayOrder;
            }

            if (newEcoResProductCategory.checkRoleSpecificRestrictions())
            {
                newEcoResProductCategory.insert();
            }
            else
            {
                error(strFmt("@SCM:Error_EcoResProductCategory_ValidationErrorWhenInserting",
                        EcoResProduct::find(_ecoResProduct.RecId).productName(),
                        EcoResCategoryHierarchy::find(_ecoResCategory.CategoryHierarchy).Name));
            }
        }
        else
        {
            error (strFmt("@RET260198",
                        EcoResProduct::find(_ecoResProduct.RecId).productName(),
                        EcoResCategoryHierarchy::find(_ecoResCategory.CategoryHierarchy).Name));
        }

        return newEcoResProductCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanCatalogProductCategoryExclusions</Name>
				<Source><![CDATA[
    private void cleanCatalogProductCategoryExclusions()
    {
        CatalogProductCategory catalogProductCategory;
        CatalogProduct catalogProduct;
        EcoResProductCategory originalProductCategory;

        originalProductCategory = this.orig();

        delete_from catalogProductCategory
            where catalogProductCategory.Category == originalProductCategory.Category
                && catalogProductCategory.IncludeExcludeType == CatalogProductExcludeIncludeType::Exclude
            exists join catalogProduct
                where catalogProduct.Product == originalProductCategory.Product
                    && catalogProduct.RecId == catalogProductCategory.CatalogProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanSpecialCategoryMembers</Name>
				<Source><![CDATA[
    private void cleanSpecialCategoryMembers()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailSpecialCategoryMember retailSpecialCategoryMember;
            RetailGroupMemberLine retailGroupMemberLine;
            EcoResProductCategory originalProductCategory;

            originalProductCategory = this.orig();

            RetailTmpRecId tmpRecIdGroupMemberLine;

            //Check whether product is master or variant.
            if (RetailGroupMemberLine::findByProduct(originalProductCategory.Product).RecId != 0)
            {
                //If product is master then variant must be 0.
                // Impacted retail group member lines
                insert_recordset tmpRecIdGroupMemberLine(ReferenceRecId)
                select RecId from retailGroupMemberLine
                    where retailGroupMemberLine.Product == originalProductCategory.Product
                    &&    retailGroupMemberLine.Variant == 0
                join retailSpecialCategoryMember
                    where retailSpecialCategoryMember.Category == originalProductCategory.Category
                        && retailSpecialCategoryMember.RetailGroupMember == retailGroupMemberLine.RecId;
            }
            else
            {
                //If product is variant then we must validate product with Variant field of <c>RetailGroupMemberLine</c> table
                // Impacted retail group member lines
                insert_recordset tmpRecIdGroupMemberLine(ReferenceRecId)
                select RecId from retailGroupMemberLine
                    where retailGroupMemberLine.Variant == originalProductCategory.Product
                join retailSpecialCategoryMember
                    where retailSpecialCategoryMember.Category == originalProductCategory.Category
                        && retailSpecialCategoryMember.RetailGroupMember == retailGroupMemberLine.RecId;
            }

            ttsbegin;

            this.deleteRetailGroupMemberLine(retailGroupMemberLine, tmpRecIdGroupMemberLine);

            // Skip delete method to avoid circular deletion (infinite loop) and downgrade to record by record operation
            retailSpecialCategoryMember.skipDataMethods(true);
            retailSpecialCategoryMember.skipDeleteActions(true);
            retailSpecialCategoryMember.skipDeleteMethod(true);

            delete_from retailSpecialCategoryMember
                where retailSpecialCategoryMember.Category == originalProductCategory.Category
            exists join tmpRecIdGroupMemberLine
                where tmpRecIdGroupMemberLine.ReferenceRecId == retailSpecialCategoryMember.RetailGroupMember;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRetailGroupMemberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Simulate cascade delete from RetailSpecialCategoryMember.
    /// </summary>
    /// <param name="retailGroupMemberLine">
    /// A record buffer of table <c>retailGroupMemberLine</c> to find existing
    /// record in table.
    /// </param>
    /// <param name="tmpRecIdGroupMemberLine">
    /// A record buffer of table <c>tmpRecIdGroupMemberLine</c> to find existing
    /// record in table.
    /// </param>
    private void deleteRetailGroupMemberLine(RetailGroupMemberLine retailGroupMemberLine, RetailTmpRecId tmpRecIdGroupMemberLine)
    {
        if (retailGroupMemberLine)
        {
            delete_from retailGroupMemberLine
            exists join tmpRecIdGroupMemberLine
                where tmpRecIdGroupMemberLine.ReferenceRecId == retailGroupMemberLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductIsNotVariant</Name>
				<Source><![CDATA[
    private boolean validateProductIsNotVariant()
    {
        boolean ret = true;
        EcoResProduct ecoResProduct = EcoResProduct::find(this.Product);
        if (ecoResProduct.isDistinctProductVariant())
        {
            ret = checkFailed("@SCM:ErrorProductCategoryAssignmentNotAllowedForVariants");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayOrderUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the DisplayOrder value is updated.
    /// Do this check as we need to keep its value consist across all instances of given product in a category hierarchy.
    /// </summary>
    /// <returns>Return true if the DisplayOrder value is updated; otherwise, return false.</returns>
    public boolean isDisplayOrderUpdated()
    {
        if (this.orig() && this.orig().DisplayOrder != this.DisplayOrder)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductAddedToHierarchyMutipleTimes</Name>
				<Source><![CDATA[
    /// <summary>
    /// etermines if a Product is added to the Hierarchy multiple times.
    /// </summary>
    /// <returns>True if the Product is added to the Category Hierarchy multiple times; otherwise, return false.</returns>
    public boolean isProductAddedToHierarchyMutipleTimes()
    {
        EcoResProductCategory productCategory;

        select count(RecId) from productCategory
            where productCategory.Product == this.Product
                && productCategory.CategoryHierarchy == this.CategoryHierarchy;

        if (productCategory.RecId > 1)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisplayOrderForAllInstances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update DisplayOrder value of all the instances of the product in the category hierarchy if current DisplayOrder value is changed.
    /// </summary>
    public void updateDisplayOrderForAllInstances()
    {
        ttsbegin;

        EcoResProductCategory productCategory;

        update_recordset productCategory
            setting DisplayOrder = this.DisplayOrder
            where productCategory.Product == this.Product
                && productCategory.CategoryHierarchy == this.CategoryHierarchy;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanProductAttributesInACategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete product attributes if they were only associated with products based on their association to the category in specified category hierarchy
    /// </summary>
    /// <param name="_categoryHierarchy">
    /// The category hierarchy in which the associated product attributes should be deleted.
    /// </param>
    internal static void cleanProductAttributesInACategoryHierarchy(EcoResCategoryHierarchyId _categoryHierarchy)
    {
        EcoResAttributeValue ecoResAttributeValue;
        EcoResAttributeValue ecoResAttributeValueExclude;
        EcoResProductInstanceValue ecoResProductInstanceValue;
        EcoResProductInstanceValue ecoResProductInstanceValueExclude;
        EcoResProductCategory ecoResProductCategory;
        EcoResProductCategory ecoResProductCategoryExclude;
        EcoResCategoryAttributeLookup ecoResCategoryAttributeLookup;
        EcoResCategoryAttributeLookup ecoResCategoryAttributeLookupExclude;
        EcoResCategoryHierarchyRole ecoResCategoryHierarchyRoleExclude;

        ttsbegin;

        delete_from ecoResAttributeValue
            exists join ecoResProductInstanceValue
                where ecoResProductInstanceValue.RecId == ecoResAttributeValue.InstanceValue
            exists join ecoResCategoryAttributeLookup
                where ecoResCategoryAttributeLookup.Attribute == ecoResAttributeValue.Attribute
            exists join ecoResProductCategory
                where ecoResProductCategory.Product == ecoResProductInstanceValue.Product
                && ecoResProductCategory.Category == ecoResCategoryAttributeLookup.Category
                && ecoResProductCategory.CategoryHierarchy == _categoryHierarchy
            // If same attribtues are linked to same products through their association with product attribute groups added to categories in
            // other retail category hierarchies then those product attributes shouldn't be deleted. Following joins will figure out those attributes
            notexists join ecoResAttributeValueExclude
                where ecoResAttributeValueExclude.RecId == ecoResAttributeValue.RecId
            exists join ecoResProductInstanceValueExclude
               where ecoResProductInstanceValueExclude.RecId == ecoResAttributeValueExclude.InstanceValue
            exists join ecoResCategoryAttributeLookupExclude
                where ecoResCategoryAttributeLookupExclude.Attribute == ecoResAttributeValue.Attribute
            exists join ecoResProductCategoryExclude
               where ecoResProductCategoryExclude.Product == ecoResProductInstanceValueExclude.Product
                && ecoResProductCategoryExclude.Category == ecoResCategoryAttributeLookupExclude.Category
                && ecoResProductCategoryExclude.CategoryHierarchy != _categoryHierarchy
            exists join ecoResCategoryHierarchyRoleExclude
                where ecoResCategoryHierarchyRoleExclude.CategoryHierarchy == ecoResProductCategoryExclude.CategoryHierarchy
                && (ecoResCategoryHierarchyRoleExclude.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Retail
                || ecoResCategoryHierarchyRoleExclude.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailSpecialGroup
                || ecoResCategoryHierarchyRoleExclude.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::RetailChannelNavigation);

        ttscommit;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS318713</DeveloperDocumentation>
	<FormRef>EcoResProductCategory</FormRef>
	<Label>@SYS135279</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Product</TitleField1>
	<TitleField2>Category</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ProductCategory</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ProductCategory</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProductCategory</Name>
			<Label>@SYS135279</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Product</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Product</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>EcoResProductCategoryDisplayOrder</ExtendedDataType>
			<Label>@Retail:RetailEcoResProductCategoryDisplayOrder</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CategoryProductRecId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>modifiedDateTime</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProductCategory</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CategoryCategoryHierarchyRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModifiedDateTime</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryHierarchy</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecVersion</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DisplayOrderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DisplayOrder</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Product</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategory_EcoResProductCategory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategoryHierarchy</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResCategoryHierarchy_EcoResProductCategory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryHierarchy</Name>
					<Field>CategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResProduct</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResProduct</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>EcoResProduct_EcoResProductCategory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>InventTable_EcoResProductCategory</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Product</Name>
					<Field>Product</Field>
					<RelatedField>Product</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProductIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>