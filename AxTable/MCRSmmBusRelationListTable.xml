<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSmmBusRelationListTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRSmmBusRelationListTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Remove business relation data for all business relations associated to the deleted list if they
    ///     are still prospects.  Otherwise, if the list prospects have been
    ///     converted to a customer/vendor then remove association to list.
    /// </summary>
    public void delete()
    {
        smmBusRelTable      smmBusRelTable;
        smmBusRelTypeGroup  smmBusRelTypeGroup;
        MCRsmmBusRelTable   mcrsmmBusRelTable;
        MCRsmmBusRelTable   mcrsmmBusRelTableUpdate;

        ttsbegin;

        while select forupdate smmBusRelTable
            join TableType from smmBusRelTypeGroup
                where smmBusRelTypeGroup.TypeId == smmBusRelTable.BusRelTypeId
            exists join mcrsmmBusRelTable
            where mcrsmmBusRelTable.smmBusRelTable == smmBusRelTable.RecId
                && mcrsmmBusRelTable.ListId == this.SmmListId
        {
            if (smmBusRelTypeGroup.TableType == smmBusRelTypeSourceTable::Relation)
            {
                this.removeBusinessRelationRecords(smmBusRelTable);
            }
            else // Type is customer/vendor - Don't flag as deleted - Remove
                 // association to deleted list
            {
                mcrsmmBusRelTableUpdate = smmBusRelTable.mcrsmmBusRelTable();
                mcrsmmBusRelTableUpdate.ListId = '';
                if (mcrsmmBusRelTableUpdate.validateWrite())
                {
                    smmBusRelTable.mcrPackMCRsmmBusRelTable(mcrsmmBusRelTableUpdate);
                    smmBusRelTable.update();
                }
                else
                {
                    throw error("@SYS21628");
                }
            }
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBusinessRelationRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a business relation associated with a deleted list or marks it as deleted if records can not be deleted.
    /// </summary>
    /// <param name="_smmBusRelTable">
    /// Business relation to remove.
    /// </param>
    /// <remarks>
    /// Logic used for deletion of rental lists.
    /// </remarks>
    private void removeBusinessRelationRecords(smmBusRelTable _smmBusRelTable)
    {
        smmBusRelTable              smmBusRelTable;
        MCRsmmBusRelTable           mcrsmmBusRelTable;
        SalesQuotationTable         salesQuotationTable;
        SalesQuotationPriceSimTable salesQuotationPriceSimTable;
        boolean                     deleteValidated;

        ttsBegin;

        // Delete quotes for business relation that have not been sent.
        while select forupdate salesQuotationTable
            where  salesQuotationTable.BusRelAccount == _smmBusRelTable.BusRelAccount
                && salesQuotationTable.QuotationStatus != SalesQuotationStatus::Sent
            notExists join salesQuotationPriceSimTable
                where salesQuotationPriceSimTable.QuotationId == salesQuotationTable.QuotationId
        {
            if (salesQuotationTable.validateDelete())
            {
                salesQuotationTable.delete();
            }
        }

        // Remove contact person links.
        deleteValidated = this.removeContactLinks(_smmBusRelTable.Party);

        //remove business relation record
        if (deleteValidated)
        {
            smmBusRelTable = smmBusRelTable::findRec(_smmBusRelTable.RecId, true);
            if (smmBusRelTable.validateDelete())
            {
                smmBusRelTable.delete();
            }
            else
            {
                deleteValidated = false;
            }
        }

        // Commit deletions, or roll back and mark the record as deleted.
        if (deleteValidated)
        {
            ttsCommit;
        }
        else
        {
            ttsAbort;
            ttsBegin;
            mcrsmmBusRelTable = mcrsmmBusRelTable::find(_smmBusRelTable.RecId, true);
            if (mcrsmmBusRelTable)
            {
                mcrsmmBusRelTable.IsListDeleted = NoYes::Yes;
                mcrsmmBusRelTable.update();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeContactLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a contact person and its related linked tables.
    /// </summary>
    /// <param name="_party">
    /// The party ID for the contact to be removed.
    /// </param>
    /// <returns>
    /// true if delete was successfull and validated; otherwise, false.
    /// </returns>
    private boolean removeContactLinks(DirPartyRecId _party)
    {
        ContactPerson           contactPerson;
        smmCampaignSelection    smmCampaignSelection;
        MCRTargetList           mcrTargetList;
        DirOrgPersonRelations   dirOrgPersonRelations;
        smmMailings             smmMailings;
        smmTMCallListTable      smmTMCallListTable;

        while select forupdate contactPerson
            where contactPerson.ContactForParty == _party
        {
            while select forupdate smmCampaignSelection
                where smmCampaignSelection.ContactPersonId == smmCampaignSelection.ContactPersonId
            {
                if (smmCampaignSelection.validateDelete())
                {
                    smmCampaignSelection.delete();
                }
                else
                {
                    return false;
                }
            }

            while select forupdate smmTMCallListTable
                    where smmTMCallListTable.ContactPersonId == ContactPerson.ContactPersonId
            {
                if (smmTMCallListTable.validateDelete())
                {
                    smmTMCallListTable.delete();
                }
                else
                {
                    return false;
                }
            }

            while select forupdate smmMailings
                    where smmMailings.ContactPersonId == ContactPerson.ContactPersonId
            {
                if (smmMailings.validateDelete())
                {
                    smmMailings.delete();
                }
                else
                {
                    return false;
                }
            }

            while select forupdate dirOrgPersonRelations
                    where dirOrgPersonRelations.ContactPersonId == ContactPerson.ContactPersonId
            {
                if (dirOrgPersonRelations.validateDelete())
                {
                    dirOrgPersonRelations.delete();
                }
                else
                {
                    return false;
                }
            }

            while select forupdate mcrTargetList
                    where mcrTargetList.ContactPersonId == ContactPerson.ContactPersonId
            {
                if (mcrTargetList.validateDelete())
                {
                    mcrTargetList.delete();
                }
                else
                {
                    return false;
                }
            }

            if (contactPerson.validateDelete())
            {
                contactPerson.delete();
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // Don't allow a blank list exp. date if the list is rented.
        if (this.SmmListType == MCRSmmListType::Rented
            && !this.SmmListExpDate )
        {
            ret = checkFailed("@MCR25544");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>MCRSmmBusRelationListTable</c> that matches the passed parameter.
    /// </summary>
    /// <param name="_listId">
    /// The list ID to be used to find the <c>MCRSmmBusRelationListTable</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>boolean</c> used to determine whether or not a record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>MCRSmmBusRelationListTable</c> record.
    /// </returns>
    public static MCRSmmBusRelationListTable find(MCRSmmListId _listId, boolean _forUpdate = false)
    {
        MCRSmmBusRelationListTable smmBusRelationListTable;

        smmBusRelationListTable.selectForUpdate(_forUpdate);

        select firstonly smmBusRelationListTable
            where smmBusRelationListTable.SmmListId == _listId;

        return smmBusRelationListTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the business relations list record using the specified record ID.
    /// </summary>
    /// <param name="recId">
    /// The record ID of the business relation list to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The business relation list record for the specified record ID.
    /// </returns>
    public static MCRSmmBusRelationListTable findRecId(RecId recId,
                                                boolean _forUpdate = false)
    {
        MCRSmmBusRelationListTable smmBusRelationListTable;

        smmBusRelationListTable.selectForUpdate(_forUpdate);

        select smmBusRelationListTable
            where smmBusRelationListTable.RecId == recId;

        return smmBusRelationListTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmCRM</ConfigurationKey>
	<DeveloperDocumentation>@MCR25534</DeveloperDocumentation>
	<Label>@MCR25534</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>smmListId</TitleField1>
	<TitleField2>smmListName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>Primary</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>CommerceCustomers</Modules>
	<PrimaryIndex>Primary</PrimaryIndex>
	<ReplacementKey>Primary</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>smmListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListExpDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>smmListId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>List</Name>
			<Label>@MCR25534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>smmListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>smmListExpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TargetID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>smmListDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSmmListDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>smmListExpDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSmmListExpDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>smmListId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSmmListId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>smmListName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRSmmListName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>smmListType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>MCRSmmListType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TargetID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTargetID</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Primary</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>smmListId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MCRTargetSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MCRTargetSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TargetID</Name>
					<SourceEDT>MCRTargetID</SourceEDT>
					<Field>TargetID</Field>
					<RelatedField>TargetID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TargetID</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>