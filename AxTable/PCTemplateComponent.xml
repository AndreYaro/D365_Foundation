<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTemplateComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCTemplateComponent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    public void accept(PCModelVisitor _visitor)
    {
        _visitor.visitStart(this);

        PCTemplateComponentConstraint templateComponentConstraint = PCTemplateComponentConstraint::findByTemplateComponent(this.RecId);

        // visit the condition if one exists
        if (templateComponentConstraint.RecId != 0)
        {
            PCExpressionConstraint::find(templateComponentConstraint.ConditionExpressionConstraint).accept(_visitor);
        }

        PCTemplateAttributeBinding templateAttributeBinding;
        while select templateAttributeBinding
            where templateAttributeBinding.TemplateComponent == this.RecId
        {
            if (templateAttributeBinding is PCTemplateConstant)
            {
                PCTemplateConstant templateConstant = templateAttributeBinding as PCTemplateConstant;
                templateConstant.accept(_visitor);
            }
            else if (templateAttributeBinding is PCTemplateCategoryAttribute)
            {
                PCTemplateCategoryAttribute templateCategoryAttribute = templateAttributeBinding as PCTemplateCategoryAttribute;
                templateCategoryAttribute.accept(_visitor);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        // for route operation requirements check if resource requirements exist
        if ( this.Requirement == PCRequirement::ActivityRequirement )
        {
            WrkCtrPCRouteOperationActivity pcRouteOperationActivity = WrkCtrPCRouteOperationActivity::findByTemplateComponent(this.RecId);

            if (pcRouteOperationActivity.RecId != 0)
            {
                pcRouteOperationActivity.accept(_visitor);
            }
        }

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the data area ID.
    /// </summary>
    /// <returns>
    /// A data area ID.
    /// </returns>
    public display dataAreaId dataArea()
    {
        CompanyInfo companyInfo = CompanyInfo::findRecId(this.LegalEntity);
        return companyInfo.DataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the record.
    /// </summary>
    /// <param name="_duplicatedComponent">
    /// A reference to a duplicated component.
    /// </param>
    /// <returns>
    /// The record ID of the duplicated record.
    /// </returns>
    public RefRecId duplicate(RefRecId _duplicatedComponent)
    {
        PCTemplateComponent duplicate;
        duplicate.data(this);

        duplicate.ComponentClass = _duplicatedComponent;

        duplicate.insert();

        this.duplicateConstraints(duplicate);

        this.duplicateTemplateAttributeBindings(duplicate, _duplicatedComponent);

        // duplicate activity requirements if its a route being duplicated
        this.duplicateRequirements(duplicate);

        return duplicate.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateTemplateAttributeBindings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates template attribute bindings related to the record.
    /// </summary>
    /// <param name="_duplicatedComponent">
    /// A reference to a duplicated component.
    /// </param>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    protected void duplicateTemplateAttributeBindings(PCTemplateComponent _duplicate, RefRecId _duplicatedComponent)
    {
        PCTemplateAttributeBinding templateAttributeBinding;
        while select templateAttributeBinding
            where templateAttributeBinding.TemplateComponent == this.RecId
        {
            if (templateAttributeBinding is PCTemplateConstant)
            {
                PCTemplateConstant templateConstant = templateAttributeBinding as PCTemplateConstant;
                templateConstant.duplicate(_duplicate.RecId);
            }
            else if (templateAttributeBinding is PCTemplateCategoryAttribute)
            {
                PCTemplateCategoryAttribute templateCategoryAttribute = templateAttributeBinding as PCTemplateCategoryAttribute;
                templateCategoryAttribute.duplicateExtended(_duplicate.RecId,_duplicatedComponent);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates constraints related to the record.
    /// </summary>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    protected void duplicateConstraints(PCTemplateComponent _duplicate)
    {
        PCTemplateComponentConstraint templateComponentConstraint = PCTemplateComponentConstraint::findByTemplateComponent(this.RecId);

        if (templateComponentConstraint.RecId != 0)
        {
            templateComponentConstraint.duplicate(_duplicate.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates requirements related to the record.
    /// </summary>
    /// <param name = "_duplicate">
    /// The duplicate component.
    /// </param>
    [Hookable]
    protected void duplicateRequirements(PCTemplateComponent _duplicate)
    {
        if (this.Requirement == PCRequirement::ActivityRequirement)
        {
            WrkCtrPCRouteOperationActivity wrkCtrPCRouteOperationActivity;
            select firstonly wrkCtrPCRouteOperationActivity
            where wrkCtrPCRouteOperationActivity.TemplateComponent == this.RecId;

            if (wrkCtrPCRouteOperationActivity.RecId != 0)
            {
                wrkCtrPCRouteOperationActivity.duplicate(_duplicate.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.LegalEntity = CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID.
    /// </summary>
    /// <returns>
    /// The item ID.
    /// </returns>
    display ItemId itemID()
    {
        PCTemplateAttributeBinding      templateAttributeBinding;
        PCTemplateFind                  templateFind = PCTemplateFind::construct();

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(this, tableNum(BOM), fieldNum(BOM, ItemId));
        return PCModelingLibrary::templateLoadStringAllocation(
            PCClass::find(this.ComponentClass), templateAttributeBinding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the route operation identifier.
    /// </summary>
    /// <returns>
    /// A route operation identifier.
    /// </returns>
    display RouteOprId routeOperation()
    {
        PCTemplateAttributeBinding      templateAttributeBinding;
        PCTemplateFind                  templateFind = PCTemplateFind::construct();

        templateAttributeBinding = templateFind.findBindingByTemplateComponent(this, tableNum(RouteOpr), fieldNum(RouteOpr, OprId));
        return PCModelingLibrary::templateLoadStringAllocation(
            PCClass::find(this.ComponentClass), templateAttributeBinding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        PCTemplateComponent templateComponent;
        boolean ret;

        ret = super();

        //enforce AK - Name, Component only if Requirement != PCRequirement::SubComponent
        if (ret && (this.Requirement != PCRequirement::SubComponent))
        {
            select  firstonly RecId, Name, ComponentClass, LegalEntity from templateComponent
            where   templateComponent.RecId != this.RecId
            &&      templateComponent.Requirement == this.Requirement
            &&      templateComponent.Name == this.Name
            &&      templateComponent.LegalEntity == this.LegalEntity
            &&      templateComponent.ComponentClass == this.ComponentClass;

            if (templateComponent || !this.Name)
            {
                return checkFailed(strFmt("@SYS153389", tablePName(PCTemplateComponent), templateComponent.Name));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record is in the <c>PCTemplateComponent</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, <c>false</c>.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCTemplateComponent::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMTemplateComponent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the record is a BOM component.
    /// </summary>
    /// <returns>
    ///    true if the record is a BOM component; otherwise, false.
    /// </returns>
    public boolean isBOMTemplateComponent()
    {
        return this.Requirement == PCRequirement::ProductRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTemplateComponent</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTemplateComponent</c> table; otherwise, an empty record.
    /// </returns>
    public static PCTemplateComponent find(RefRecId _recId, boolean _forupdate = false)
    {
        PCTemplateComponent record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153089</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153088</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCTemplateAttributeBinding</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCTemplateAttributeBinding</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PCTemplateComponentConstraint</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCTemplateComponentConstraint</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS129746</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS13342</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCTemplateComponentName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Requirement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PCRequirement</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CompanyInfoIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ComponentClass</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Requirement</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ComponentClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCClass</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ComponentContainer</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LineTemplateOf</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentClass</Name>
					<Field>ComponentClass</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntityFK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyInfo_PCTemplateComponent</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>