<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInterestJour extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>address</Name>
				<Source><![CDATA[
    display LogisticsAddressing address()
    {
        return LogisticsPostalAddress::findRecId(this.PostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur2Euro</Name>
				<Source><![CDATA[
    AmountCur amountCur2Euro(AmountCur _amountCur)
    {
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return this.CurrencyCode ? CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(_amountCur, this.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), euroCurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                                 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2Euro</Name>
				<Source><![CDATA[
    AmountCur amountMST2Euro(AmountMST _amountMST)
    {
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return CurrencyExchangeHelper::curAmount(_amountMST, euroCurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransForFee</Name>
				<Source><![CDATA[
    CustTrans custTransForFee()
    {
        CustTrans custTrans;

        select custTrans
            where custTrans.AccountNum == this.AccountNum &&
                  custTrans.TransDate == this.Updated &&
                  custTrans.Voucher == this.FeeVoucher;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datePreviousInterestNote</Name>
				<Source><![CDATA[
    display EndDate datePreviousInterestNote()
    {
        CustInterestJour custInterestJour;
        EndDate returnToDate;

        returnToDate = (select firstonly ToDate from custInterestJour
                    order ToDate desc
                    where custInterestJour.AccountNum == this.AccountNum &&
                          custInterestJour.ToDate < this.ToDate &&
                              custInterestJour.Status == PrintPostCancel::Posted).ToDate;

        return returnToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymentTerms</Name>
				<Source><![CDATA[
    display CustPaymTermId displayPaymentTerms()
    {
        return CustTable::find(this.AccountNum).PaymTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPrintedString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string indicating whether or not the interest note has been printed yet.
    /// </summary>
    /// <returns>A string indicating whether or not the interest note has been printed yet.</returns>
    public display str displayPrintedString()
    {
        return this.Printed == NoYes::No ? "@SYS4004109" : "@SYS5308";
    }

]]></Source>
			</Method>
			<Method>
				<Name>feeAmountEuro</Name>
				<Source><![CDATA[
    display AmountCur feeAmountEuro()
    {
        return this.amountMST2Euro(this.Fee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>feeInclTax</Name>
				<Source><![CDATA[
    display AmountCur feeInclTax()
    {
        return this.Fee + this.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>feeLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the fee ledger dimension.
    /// </summary>
    /// <param name = "_custInterestFeeType">The <c>CustInterestFeeType</c> enumeration used to help determine the proper fee ledger dimension.</param>
    /// <returns>The fee ledger dimension.</returns>
    LedgerDimensionDefaultAccount feeLedgerDimension(CustInterestFeeType _custInterestFeeType = CustInterestFeeType::Earning)
    {
        CustInterest custInterest;
        CustInterestVersion custInterestVersion;
        CustInterestVersionDetail custInterestVersionDetail;
        CustInterestFee custInterestFee;

        if (this.CustBillingClassification
            && this.InterestCalcAccountChoice == this.getInterestCalcAccountChoiceTransaction()
            && isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && CustParameters::isBillingClassificationEnabled())
        {
            custInterest = custInterest::findByBillingClassOrPostingProfile(this.AccountNum, this.CustBillingClassification, this.PostingProfile);
        }
        else
        {
            custInterest = CustInterest::find(CustLedgerAccounts::custInterest(this.AccountNum, this.PostingProfile));
        }

        custInterestVersion = CustInterestVersion::findByDate(custInterest.RecId, this.ToDate);
        custInterestVersionDetail = CustInterestVersionDetail::findByFeeType(custInterestVersion.RecId, _custInterestFeeType);
        custInterestFee = CustInterestFee::findByCustInterestVersionDetail(custInterestVersionDetail.RecId, this.CurrencyCode);

        return custInterestFee.FeeLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable(CustTable _custTable)
    {
        LogisticsLocationRoleRecId addressing;

        this.AccountNum = _custTable.AccountNum;
        this.Name = _custTable.name();

        if (_custTable.Party)
        {
            addressing = DirPartyTable::getLocationFromRole(_custTable.Party, LogisticsLocationRoleType::Statement);

            if (!addressing)
            {
                addressing = DirPartyTable::getLocationFromRole(_custTable.Party, LogisticsLocationRoleType::Invoice);
            }
            if (!addressing)
            {
                addressing = DirPartyLocation::findPrimaryPartyLocation(_custTable.Party).Location;
            }
        }

        this.PostalAddress = LogisticsPostalAddress::findByLocation(addressing).RecId;
        this.DefaultDimension = _custTable.DefaultDimension;
        this.CurrencyCode = _custTable.Currency;
        this.LanguageId = _custTable.languageId();
        this.TaxGroup = _custTable.TaxGroup;
        this.GiroType = _custTable.GiroTypeInterestNote;
        this.GiroAccountId = CompanyInfo::find().Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAddress</Name>
				<Source><![CDATA[
    display Addressing interestAddress()
    {
        return CustTable::find(this.AccountNum).postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestFeeLangText</Name>
				<Source><![CDATA[
    display LanguageTxtText interestFeeLangText()
    {
        CustInterestFee custInterestFee;
        LanguageTxt languageTxt;
        CustTable custTable;
        CustInterestVersion custInterestVersion;
        CustInterestVersionDetail custInterestVersionDetail;
        CustInterestRecId custInterestRecId;

        custInterestRecId = CustLedgerAccounts::custInterest(this.AccountNum, this.PostingProfile);

        select firstonly Txt
            from languageTxt
            where languageTxt.LanguageId == this.LanguageId

        exists join custInterestVersion
            where custInterestVersion.CustInterest == custInterestRecId

        exists join custInterestVersionDetail
            where custInterestVersionDetail.CustInterestVersion == custInterestVersion.RecId &&
                custInterestVersionDetail.FeeType == CustInterestFeeType::Earning

        exists join custInterestFee
            where custInterestFee.RecId == languageTxt.TxtRecId &&
                custInterestFee.TableId == languageTxt.TxtTableId &&
                custInterestFee.CustInterestVersionDetail == custInterestVersionDetail.RecId

        exists join custTable
            where custTable.AccountNum == this.AccountNum &&
                custTable.Currency == custInterestFee.CurrencyCode;

        return languageTxt.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestJournalNumber</Name>
				<Source><![CDATA[
    display GeneralJournalEntryJournalNumber interestJournalNumber( )
    {
        GeneralJournalEntryJournalNumber generalJournalEntryJournalNumber;

        if (!hasFieldAccess(tableNum(CustInterestJour), fieldNum(CustInterestJour, FeeVoucher), AccessType::View) ||
            !hasFieldAccess(tableNum(CustInterestJour), fieldNum(CustInterestJour, Updated), AccessType::View) ||
            !hasFieldAccess(tableNum(GeneralJournalEntry), fieldNum(GeneralJournalEntry, JournalNumber), AccessType::View))
        {
            throw error("@SYS57330");
        }

        if (this.RecId)
        {
            generalJournalEntryJournalNumber = GeneralLedgerExtension::findBySubledgerVoucherAccountingDate(this.FeeVoucher,
                                                          this.Updated).JournalNumber;
        }

        return generalJournalEntryJournalNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestName</Name>
				<Source><![CDATA[
    display Name interestName()
    {
        return CustTable::find(this.AccountNum).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAtLeastOneInterestTransactionIncluded</Name>
				<Source><![CDATA[
    public boolean isAtLeastOneInterestTransactionIncluded()
    {
        CustInterestTrans custInterestTrans;

        select count(RecId) from custInterestTrans
            where custInterestTrans.InterestNote == this.InterestNote
                && custInterestTrans.InterestCalculate;

        return custInterestTrans.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefJournalNumber</Name>
				<Source><![CDATA[
    public void jumpRefJournalNumber(Object _caller)
    {
        Args args;
        MenuFunction menuFunction;

        if (!this.RecId)
        {
            return;
        }

        args = new Args();

        args.caller(_caller);
        args.record(this);
        args.parmEnum(AllChosen::Chosen);

        menuFunction = new MenuFunction(menuitemDisplayStr(LedgerTransVoucher1), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeCancelled</Name>
				<Source><![CDATA[
    boolean mayBeCancelled()
    {
        boolean ret = true;

        if (this.Updated || this.Canceled)
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to modify.
    /// </param>
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (fieldName2id(tableNum(CustInterestJour), _fieldName))
        {
            case fieldNum(CustInterestJour, PostingProfile) :

                if (this.checkInterestCalcAccountChoice())
                {
                    warning("@SYS191480");
                }

            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentBankAccountId</Name>
				<Source><![CDATA[
    CompanyBankAccountId paymentBankAccountId()
    {
        CompanyBankAccountId paymBankAccountId;
        CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(this.paymMode());
        if (custPaymModeTable.AccountType == LedgerJournalACType::Bank)
        {
            paymBankAccountId = custPaymModeTable.parmPaymAccount();
        }

        return paymBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode</Name>
				<Source><![CDATA[
    CustPaymMode paymMode()
    {
        CustPaymMode paymMode;

        if (this.Status == PrintPostCancel::Posted)
        {
            paymMode = this.custTransForFee().PaymMode;
        }
        else
        {
            paymMode = CustTable::find(this.AccountNum).PaymMode;
        }

        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.InterestNote, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustTrans</Name>
				<Source><![CDATA[
    public Query queryCustTrans(boolean update = false)
    {
        DictRelation dictRelation;
        DictField externdictField;
        DictField dictField;
        Query query = new Query();
        Counter c;

        query.addDataSource(tableNum(CustTrans));

        dictRelation = new DictRelation(tableNum(CustTrans));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(CustTrans),dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(CustTrans)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        query.dataSourceTable(tableNum(CustTrans)).update(update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunCustTrans</Name>
				<Source><![CDATA[
    public QueryRun queryRunCustTrans(boolean update = false)
    {
        return new QueryRun(this.queryCustTrans(update));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    Query queryTmpTaxWorkTrans(boolean update = false)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        queryBuildDataSource = query.addDataSource(tableNum(TmpTaxWorkTrans));

        queryBuildDataSource.update(update);
        queryBuildDataSource.addRange(fieldNum(TmpTaxWorkTrans, TaxOrigin)).value(strFmt('!%1',queryValue(TaxOrigin::TaxReversed)));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, InventTransId ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxGroup ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxItemGroup ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxRefId ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, ExemptTax ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, SourceBaseAmountCur));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCancelling</Name>
				<Source><![CDATA[
    void setCancelling()
    {
        this.Canceled = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Status = PrintPostCancel::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrinted</Name>
				<Source><![CDATA[
    void setPrinted()
    {
        this.Printed = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdated</Name>
				<Source><![CDATA[
    void setUpdated(TransDate _transactionDate)
    {
        this.Updated = _transactionDate ? _transactionDate: DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Status = PrintPostCancel::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumInterestAmount</Name>
				<Source><![CDATA[
    display InterestAmountCur sumInterestAmount()
    {
        return this.totalInterestAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInterestAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total interest amount.
    /// </summary>
    /// <returns>The total interest amount in transaction currency.</returns>
    internal InterestAmountCur totalInterestAmount()
    {
        InterestAmountCur interestAmountCur;
        CustInterestTrans custInterestTrans;

        while select CurrencyCode, sum(InterestAmount)
            from custInterestTrans
            group by CurrencyCode
            where custInterestTrans.InterestNote == this.InterestNote &&
                  custInterestTrans.InterestCalculate
        {
            interestAmountCur += custInterestTrans.custInterestJourInterestAmount(this);
        }
        return interestAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total invoice amount.
    /// </summary>
    /// <returns>The total invoice amount.</returns>
    internal AmountCur totalInvoiceAmount()
    {
        AmountCur invoiceAmountCur;
        CustInterestTrans custInterestTrans;

        while select CurrencyCode, sum(InvoiceAmount)
            from custInterestTrans
            group by CurrencyCode
            where custInterestTrans.InterestNote == this.InterestNote
        {
            invoiceAmountCur += custInterestTrans.custInterestJourInvoiceAmount(this);
        }

        return invoiceAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumInterestAmountEuro</Name>
				<Source><![CDATA[
    display AmountCur sumInterestAmountEuro()
    {
        return this.amountMST2Euro(this.sumInterestAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumInterestAmountFee</Name>
				<Source><![CDATA[
    display AmountCur sumInterestAmountFee()
    {
        return this.sumInterestAmount() + this.Fee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumInterestAmountFeeInclTax</Name>
				<Source><![CDATA[
    display AmountCur sumInterestAmountFeeInclTax()
    {
        return this.sumInterestAmountFee() + this.TaxAmount - this.sumWriteoffAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumInterestAmountFeeInclTaxEuro</Name>
				<Source><![CDATA[
    display AmountCur sumInterestAmountFeeInclTaxEuro()
    {
        return this.amountMST2Euro(this.sumInterestAmountFeeInclTax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumWaivedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the waived amount for the current interest note.
    /// </summary>
    /// <returns>
    /// The waived amount for the current interest note.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AmountCur sumWaivedAmount()
    {
        CustInterestTrans custInterestTrans;
        AmountCur interestAmountCur;

        while select CurrencyCode, sum(InterestAmount)
            from custInterestTrans
            group by CurrencyCode
            where custInterestTrans.InterestNote == this.InterestNote &&
                  custInterestTrans.AdjustmentStatus == CustInterestAdjustmentStatus::Waive
        {
            interestAmountCur += custInterestTrans.custInterestJourInterestAmount(this);
        }

        interestAmountCur += this.FeeAdjustmentStatus == CustInterestAdjustmentStatus::Waive ? this.Fee : 0;

        return interestAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumWriteoffAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the write-off amount for the current interest note.
    /// </summary>
    /// <returns>
    /// Write-off amount for the current interest note.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AmountCur sumWriteoffAmount()
    {
        CustInterestTrans custInterestTrans;
        AmountCur interestAmountCur;

        while select CurrencyCode, sum(WriteOffAmount)
            from custInterestTrans
            group by CurrencyCode
            where custInterestTrans.InterestNote == this.InterestNote
        {
            interestAmountCur += CurrencyExchangeHelper::curAmount2CurAmount(custInterestTrans.WriteOffAmount, custInterestTrans.CurrencyCode, this.CurrencyCode, this.ToDate);
        }

        interestAmountCur += this.FeeWriteOffAmount;

        return interestAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalance</Name>
				<Source><![CDATA[
    display TaxTaxableAmountCur taxableBalance(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;
        QueryRun queryRun;
        TaxBaseCur taxBaseCur;
        TaxBaseCur sourceBaseAmountCur;
        TaxExemptTax taxExemptTax;

        queryRun = new QueryRun(this.queryTmpTaxWorkTrans());
        queryRun.setCursor(_tmpTaxWorkTrans);

        while (queryRun.next())
        {
            tmpTaxWorkTrans = queryRun.get(tableNum(TmpTaxWorkTrans));
            if (tmpTaxWorkTrans)
            {
                taxExemptTax = tmpTaxWorkTrans.ExemptTax;
                sourceBaseAmountCur = tmpTaxWorkTrans.SourceBaseAmountCur;
            }

            if (taxExemptTax == NoYes::No)
            {
                taxBaseCur += sourceBaseAmountCur;
            }
        }

        return -taxBaseCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxableAmountCur taxableBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return this.amountCur2Euro(this.taxableBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountEuro</Name>
				<Source><![CDATA[
    display TaxAmountCur taxAmountEuro()
    {
        return this.amountMST2Euro(this.TaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalance</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalance(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return this.sumInterestAmountFee() - this.taxableBalance(_tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return this.amountCur2Euro(this.taxFreeBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unSettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the unsettled amount for the current interest note.
    /// </summary>
    /// <returns>
    /// The unsettled amount for the current interest note.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display AmountCur unSettledAmount()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustInterestTrans custInterestTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        AmountCur unSettleAmount;

        while select AmountCur from custTransOpen
            join CurrencyCode from custTrans
            where custTrans.RecId == custTransOpen.RefRecId &&
                  custTrans.AccountNum == this.AccountNum &&
                  custTrans.TransDate == this.Updated
                exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == custTrans.Voucher &&
                      subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == custTrans.DataAreaId
                    exists join custInterestTrans
                    where custInterestTrans.GeneralJournalEntry == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                          custInterestTrans.InterestNote == this.InterestNote
        {
            if (custTrans.CurrencyCode != this.CurrencyCode)
            {
                unSettleAmount += CurrencyExchangeHelper::curAmount2CurAmount(custTransOpen.AmountCur, custTrans.CurrencyCode, this.CurrencyCode);
            }
            else
            {
                unSettleAmount += custTransOpen.AmountCur;
            }
        }

        if (this.Fee)
        {
            select AmountCur from custTransOpen
                exists join custTrans
                where custTrans.Voucher == this.FeeVoucher &&
                      custTrans.TransDate == this.Updated &&
                      custTrans.AccountNum == this.AccountNum &&
                      custTrans.RecId == custTransOpen.RefRecId;

            unSettleAmount += custTransOpen.AmountCur;
        }

        return unSettleAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(InterestNote _interestNote )
    {
        boolean ret = true;

        if (!CustInterestJour::exist(_interestNote))
        {
            ret = checkFailed(strFmt(CustInterestJour::txtNotExist(), _interestNote));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(InterestNote _interestNote )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custInterestJour
                 where
                     custInterestJour.InterestNote == _interestNote).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustInterestJour find(
        InterestNote _interestNote ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestJour custInterestJour;

        custInterestJour.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestJour.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            custInterestJour
            where
            custInterestJour.InterestNote == _interestNote;

        return custInterestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves record from customer interest journal table based on the account number,
    /// voucher number and Transaction date.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number of customer for whom interest has accrued.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number for which customer interest journal is determined.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use.
    /// </param>
    /// <returns>
    /// The buffer of <c>CustInterestJour</c> table.
    /// </returns>
    public static CustInterestJour findByVoucher(
        CustAccount _accountNum,
        Voucher _voucher,
        TransDate _transDate,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        custInterestJour.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestJour.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInterestJour
            where custInterestJour.AccountNum == _accountNum &&
                    custInterestJour.FeeVoucher == _voucher &&
                    custInterestJour.Updated == _transDate;
        if (!custInterestJour)
        {
            select firstonly custInterestJour
                exists join custInterestTrans
                    where custInterestTrans.InterestNote == custInterestJour.InterestNote &&
                            custInterestJour.AccountNum == _accountNum
                exists join subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.Voucher == _voucher &&
                            subledgerVoucherGeneralJournalEntry.AccountingDate == _transDate &&
                            subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == curext() &&
                            subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == custInterestTrans.GeneralJournalEntry
                exists join generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                        generalJournalEntry.Ledger == Ledger::current();
        }

        return custInterestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustUnPostedInterestNoteQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for unposted interest note that is related to the particular customer.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_excludeInterestNoteRecId">
    /// The interest note to exclude.
    /// </param>
    /// <param name="_billingClassificationRecId">
    /// The billing classification.
    /// </param>
    /// <param name="_selectForUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional
    /// </param>
    /// <returns>
    /// A Query object.
    /// </returns>
    public static Query buildCustUnPostedInterestNoteQuery(
        CustAccount _custAccount,
        RefRecId _excludeInterestNoteRecId,
        RefRecId _billingClassificationRecId,
        boolean _selectForUpdate = false)
    {
        Query query = new Query();
        
        QueryBuildDataSource custInterestJourQueryBuildDataSource = query.addDataSource(tableNum(CustInterestJour));
        custInterestJourQueryBuildDataSource.firstOnly(true);
        custInterestJourQueryBuildDataSource.update(_selectForUpdate);

        custInterestJourQueryBuildDataSource.addRange(fieldNum(CustInterestJour, AccountNum)).value(SysQuery::value(_custAccount));
        custInterestJourQueryBuildDataSource.addRange(fieldNum(CustInterestJour, FeeVoucher)).value(SysQuery::valueEmptyString());
        custInterestJourQueryBuildDataSource.addRange(fieldNum(CustInterestJour, Status)).value(SysQuery::value(any2Int(PrintPostCancel::Created)));
        custInterestJourQueryBuildDataSource.addRange(fieldNum(CustInterestJour, RecId)).value(SysQuery::valueNot(_excludeInterestNoteRecId));
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            custInterestJourQueryBuildDataSource.addRange(fieldNum(CustInterestJour, CustBillingClassification)).value(SysQuery::value(_billingClassificationRecId));
        }

        QueryBuildDataSource custInterestTransQueryBuildDataSource = custInterestJourQueryBuildDataSource.addDataSource(tableNum(CustInterestTrans));
        custInterestTransQueryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        custInterestTransQueryBuildDataSource.addLink(fieldNum(CustInterestJour, InterestNote), fieldNum(CustInterestTrans, InterestNote));
        custInterestTransQueryBuildDataSource.addRange(fieldNum(CustInterestTrans, GeneralJournalEntry)).value(SysQuery::value(0));
            
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustUnPostedInterestNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the unposted interest note that is related to the particular customer.
    /// </summary>
    /// <param name="_custAccount">
    ///    The customer account.
    /// </param>
    /// <param name="_excludeInterestNoteRecId">
    ///    The interest note to exclude; optional.
    /// </param>
    /// <param name="_selectForUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_billingClassificationRecId">
    ///    The billing classification; optional.
    /// </param>
    /// <returns>
    ///    The <c>CustInterestJour</c> buffer.
    /// </returns>
    public static CustInterestJour findCustUnPostedInterestNote(CustAccount _custAccount,
                                                                RefRecId _excludeInterestNoteRecId = 0,
                                                                boolean _selectForUpdate = false,
                                                                RefRecId _billingClassificationRecId = 0)
    {
        CustInterestJour custInterestJour;

        QueryRun queryRun = new QueryRun(
            CustInterestJour::buildCustUnPostedInterestNoteQuery(
                _custAccount,
                _excludeInterestNoteRecId,
                _billingClassificationRecId,
                _selectForUpdate));

        if (queryRun.next())
        {
            custInterestJour = queryRun.get(tableNum(CustInterestJour));
        }

        return custInterestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static CustInterestJour findRecId(
            recId _recId,
            boolean _forupdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestJour custInterestJour;

        custInterestJour.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestJour.concurrencyModel(_concurrencyModel);
        }

        select firstonly custInterestJour
            where custInterestJour.RecId == _recId;

        return custInterestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeeVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the Fee Voucher of customer.
    /// </summary>
    /// <param name="voucher">
    /// The voucher number for which customer interest journal is determined.
    /// </param>
    /// <returns>
    /// A <c>CustInterestJour</c> record.
    /// </returns>
    public static CustInterestJour isFeeVoucher(Voucher voucher)
    {
        CustInterestJour custInterestJour;

        select firstonly custInterestJour where custInterestJour.FeeVoucher == voucher;

        return custInterestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumInterestAmountFeeDisplayCache</Name>
				<Source><![CDATA[
    static container sumInterestAmountFeeDisplayCache(container _conSetInterestNote,
                                                             container _conMapInterstNoteSumInterestAmount)
    {
        CustInterestJour custInterestJour;
        Set setInterestNote = Set::create(_conSetInterestNote);
        Map mapInterestNoteSumInterestAmount = Map::create(_conMapInterstNoteSumInterestAmount);
        SetIterator si = new SetIterator(setInterestNote);

        si.begin();
        while (si.more())
        {
            custInterestJour = CustInterestJour::find(si.value());
            mapInterestNoteSumInterestAmount.insert(si.value(), custInterestJour.sumInterestAmountFee());
            si.next();
        }

        return mapInterestNoteSumInterestAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102177";
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintedFilterToFormDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a printed filter to the <c>CustInterestJour</c> form data source provided.
    /// </summary>
    /// <param name="_custInterestJourDataSource">
    /// The <c>CustInterestJour</c> form data source.
    /// </param>
    /// <param name="_selection">
    /// The filter selection.
    /// </param>
    public static void addPrintedFilterToFormDatasource(FormDataSource _custInterestJourDataSource, PrintedStatusFilter _selection)
    {
        switch (_selection)
        {
            case PrintedStatusFilter::NotPrinted:
                _custInterestJourDataSource.filter(fieldnum(CustInterestJour, Printed), queryValue(NoYes::No));
                break;
            case PrintedStatusFilter::Printed:
                _custInterestJourDataSource.filter(fieldnum(CustInterestJour, Printed), queryValue(NoYes::Yes));
                break;

            case PrintedStatusFilter::All:
            default:
                _custInterestJourDataSource.filter(fieldnum(CustInterestJour, Printed), '');
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatusFilterToFormDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a status filter to the <c>CustInterestJour</c> form data source provided.
    /// </summary>
    /// <param name="_custInterestJourDataSource">
    /// The <c>CustInterestJour</c> form data source.
    /// </param>
    /// <param name="_selection">
    /// The filter selection.
    /// </param>
    public static void addStatusFilterToFormDatasource(FormDataSource _custInterestJourDataSource, PrintPostCancelFilter _selection)
    {
        switch (_selection)
        {
            // It is important to use the PrintPostCancel enum for filtering since the enum element values are
            // not the same as the PrintPostCancelFilter enum. This was necessary to support "All" as an option.

            case PrintPostCancelFilter::Created:
                _custInterestJourDataSource.filter(fieldnum(CustInterestJour, Status), queryValue(PrintPostCancel::Created));
                break;

            case PrintPostCancelFilter::Posted:
                _custInterestJourDataSource.filter(fieldnum(CustInterestJour, Status), queryValue(PrintPostCancel::Posted));
                break;

            case PrintPostCancelFilter::Canceled:
                _custInterestJourDataSource.filter(fieldnum(CustInterestJour, Status), queryValue(PrintPostCancel::Canceled));
                break;

            case PrintPostCancelFilter::All:
            default:
                _custInterestJourDataSource.filter(fieldnum(CustInterestJour, Status), '');
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterestCalcAccountChoiceTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction enum value of <c>InterestCalcAccountChoice</c>.
    /// </summary>
    /// <returns>
    /// Enum value of transaction of enum <c>InterestCalcAccountChoice</c>.
    /// </returns>
    protected InterestCalcAccountChoice getInterestCalcAccountChoiceTransaction()
    {
        return InterestCalcAccountChoice::Transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterestCalcAccountChoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if field <c>InterestCalcAccountChoice</c> has value Transaction of enum <c>InterestCalcAccountChoice</c>.
    /// </summary>
    /// <returns>
    /// true if _interestCalcAccountChoice is of type transaction; otherwise, false.
    /// </returns>
    public boolean checkInterestCalcAccountChoice()
    {
        return (this.interestCalcAccountChoice == this.getInterestCalcAccountChoiceTransaction());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustInterest</ConfigurationKey>
	<DeveloperDocumentation>@SYS125062</DeveloperDocumentation>
	<FormRef>CustInterestJournal</FormRef>
	<Label>@SYS4207</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>InterestNote</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InterestIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>InterestIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInterestTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInterestTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sumInterestAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>address</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressDisplay</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>address</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPInterestJournal</Name>
			<Label>@SYS4207</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCalcAccountChoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>interestJournalNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeWriteOffAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeAdjustmentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FeeNote</Name>
			<Label>@SYS311882</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestJournal</Name>
			<Label>@SYS4207</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCalcAccountChoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeWriteOffAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeAdjustmentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestNote_PL</Name>
			<Label>@SYS8298</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterestNoteDocument_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NoteIssueDate_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestNote</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeeVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sequence</Name>
			<Label>@SYS21731</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Updated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Canceled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Printed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GiroAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Block</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Block</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Canceled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS1068</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingClassification</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS371</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<Visible>No</Visible>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Fee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9154</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FeeAdjustmentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS314578</Label>
			<EnumType>CustInterestAdjustmentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FeeLastAdjustmentInvoice</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInvoiceTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FeeVoucher</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@SYS329511</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FeeWriteOffAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS321331</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GiroAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubInterestId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterestCalcAccountChoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InterestCalcAccountChoice</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestNote</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterestNote</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestNoteDocument_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlInterestNoteDocument</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>NoteIssueDate_PL</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS113019</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS311882</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Printed</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS5308</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PrintPostCancel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWriteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Updated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS439</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_CustIntere</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InterestIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InterestNote</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Updated</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>InterestNote</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GiroAccountId</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>GiroAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_CustInterestJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingClassification</Name>
					<Field>CustBillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FeeLastAdjustmentInvoice</Name>
					<SourceEDT>CustInvoiceTableRefRecId</SourceEDT>
					<Field>FeeLastAdjustmentInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125051</EntityRelationshipRole>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransOpen</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInterestJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInterestJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInterestJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostalAddress</Name>
					<Field>PostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>