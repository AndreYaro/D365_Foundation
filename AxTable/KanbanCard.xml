<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanCard extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the value in the <c>Kanban.LegalEntity</c> field is valid.
    /// </summary>
    /// <param name="_kanban">
    /// The kanban related to the card.
    /// </param>
    /// <param name="_kanbanRule">
    /// The kanban rule related to the card.
    /// </param>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    public boolean checkLegalEntity(
        Kanban     _kanban     = Kanban::find(this.Kanban),
        KanbanRule _kanbanRule = KanbanRule::find(this.KanbanRule))
    {
        boolean     result = true;

        if (   _kanban
            && _kanbanRule)
        {
            if (_kanban.LegalEntity != _kanbanRule.LegalEntity)
            {
                result = checkFailed(strFmt("@SYS332722",this.CardId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        Kanban  kanban;

        ttsbegin;
        super();
        if (this.Kanban)
        {
            kanban = Kanban::find(this.Kanban);
            if (kanban)
            {
                KanbanCard::unAssign(kanban);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanRuleRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the record ID of the kanban rule that is associated with the card.
    /// </summary>
    /// <returns>
    /// The kanban rule record ID.
    /// </returns>
    /// <remarks>
    /// If the kanban card is assigned a kanban, the kanban rule of the kanban will be used; otherwise,
    /// the kanban rule of the card will be used (both should be the same, except when the kanban belongs to
    /// a replaced rule of the actual one).
    /// </remarks>
    private RefRecId getKanbanRuleRecId()
    {
        Kanban  kanban;

        select KanbanRule, RecId from kanban
            where kanban.RecId  == this.Kanban
               && kanban.Status != LeanKanbanStatus::Emptied;

        return kanban.RecId == 0 ? this.KanbanRule : kanban.KanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.PrintStatus = KanbanCardPrintStatusType::New;
        this.CardType = KanbanCardType::Circulating;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban ID that is currently assigned to the kanban card.
    /// </summary>
    /// <returns>
    ///    The kanban ID that is currently assigned to the kanban card.
    /// </returns>
    public display KanbanId kanbanId()
    {
        KanbanId    kanbanId;

        if (this.Kanban)
        {
            kanbanId = Kanban::find(this.Kanban).KanbanId;
        }

        return kanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reAssignToRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reassigns the card to the given <c>KanbanRule</c> buffer.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>RecId</c> of the <c>KanbanRule</c> to reassign the card to.
    /// </param>
    /// <param name="_reverse">
    ///    A Boolean value that defines if the card is assigned to a previous rule and the chain check must be reversed; optional.
    /// </param>
    /// <returns>
    ///    true if the card was reassigned; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method assumes that the current buffer is already selected for update.
    /// </remarks>
    public boolean reAssignToRule(
        KanbanRule _kanbanRule
        , boolean    _reverse = false
        )
    {
        KanbanRule  kanbanRule = KanbanRule::find(this.KanbanRule);
        boolean     sameChain;

        // validate parameters
        if (this.CardType != KanbanCardType::Circulating
            || !kanbanRule.RecId
            || !_kanbanRule.RecId)
        {
            error(Error::wrongUseOfFunction(funcName()));
            return false;
        }

        // make sure the rules belong to the same chain and that they are one after another

        if (_reverse)
        {
            sameChain = LeanCoverageKanbanRule::belongToTheSameReplacementChain(_kanbanRule.RecId,kanbanRule.RecId, true);
        }
        else
        {
            sameChain = LeanCoverageKanbanRule::belongToTheSameReplacementChain(kanbanRule.RecId,_kanbanRule.RecId, true);
        }

        if (!sameChain)
        {
            // The card %1 cannot be assigned to %2. The destination rule should be part of the same replacement chain and successing %1
            error(strFmt("@SYS133822", kanbanRule.RuleId, _kanbanRule.RuleId));
            return false;
        }

        ttsbegin;
        // update the FK
        this.KanbanRule = _kanbanRule.RecId;
        this.update();

        // check if we need to update the reprint status of the card
        if (kanbanRule.type().needsReprint(_kanbanRule))
        {
            this.PrintStatus = KanbanCardPrintStatusType::NeedsReprint;
        }
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintStatus</Name>
				<Source><![CDATA[
    public void setPrintStatus(
        KanbanCardPrintStatusType _kanbanCardPrintStatusType,
        boolean                   _update = true)
    {
        KanbanCard  kanbanCard;

        if (_update)
        {
            ttsbegin;
            kanbanCard = KanbanCard::find(this.RecId,true);
            if (   kanbanCard
                && kanbanCard.PrintStatus != _kanbanCardPrintStatusType)
            {
                kanbanCard.PrintStatus = _kanbanCardPrintStatusType;
                kanbanCard.update();
            }
            ttscommit;
            this.reread();
        }
        else
        {
            this.PrintStatus = _kanbanCardPrintStatusType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintStatusToPrintAutomatically</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the <c>PrintStatus</c> field and updates it depending on the automatic printing settings
    /// of the kanban rule to which the card belongs.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> buffer to which the card belongs.
    /// </param>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> buffer to which the card belongs.
    /// </param>
    public void setPrintStatusToPrintAutomatically(
        Kanban      _kanban,
        KanbanRule  _kanbanRule)
    {
        KanbanJob   kanbanJob = _kanban.firstKanbanJob();

        if (   (    this.PrintStatus == KanbanCardPrintStatusType::New
                ||  this.PrintStatus == KanbanCardPrintStatusType::NeedsReprint)
            && (    (_kanbanRule.PrintKanbanAutomatically == KanbanAutoPrintType::Creation && kanbanJob.Status == LeanKanbanJobStatus::NotPlanned)
                ||  (_kanbanRule.PrintKanbanAutomatically == KanbanAutoPrintType::Plan     && kanbanJob.Status == LeanKanbanJobStatus::Planned)
                ||  (_kanbanRule.PrintKanbanAutomatically == KanbanAutoPrintType::Prepare  && kanbanJob.Status == LeanKanbanJobStatus::Prepared)
                ||  (_kanbanRule.PrintKanbanAutomatically == KanbanAutoPrintType::Start    && kanbanJob.Status == LeanKanbanJobStatus::InProgress)
                ||  (_kanbanRule.PrintKanbanAutomatically == KanbanAutoPrintType::Receive  && kanbanJob.Status == LeanKanbanJobStatus::Completed)))
        {
            // set print status to 'waiting', so that it is picked up by the batch print job
            this.setPrintStatus(KanbanCardPrintStatusType::Waiting,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        Kanban kanban;

        boolean ret = super();

        select firstonly RecId from kanban
            where kanban.RecId  == this.Kanban
               && kanban.Status != LeanKanbanStatus::NotAssigned;

        if (kanban)
        {
            ret = checkFailed("@SYS136491");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the mandatory fields are present.
    /// </summary>
    /// <returns>
    ///    true if the fields are valid; otherwise, false.
    /// </returns>
    private boolean validateFields()
    {
        boolean result = false;

        switch (this.CardType)
        {
            case KanbanCardType::Circulating:
                result = this.KanbanRule != 0;
                if (!result)
                {
                    // Error saving circulating card %1 - missing foreign key to KanbanRule record.
                    error("@SYS133821");
                }
                break;
            case KanbanCardType::OneTime:
                result = true;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     result = true;

        result = super() && result;

        // validate the type-specific mandatory fields
        result = this.validateFields() && result;

        // legal entity
        result = this.checkLegalEntity() && result;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignToKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a <c>Kanban</c> record to a <c>KanbanCard</c> record.
    /// </summary>
    /// <param name="_kanbanCard">
    /// The <c>KanbanCard</c> buffer used for one of the foreign keys.
    /// </param>
    /// <param name="_kanban">
    /// The <c>Kanban</c> buffer used for the other foreign key.
    /// </param>
    /// <param name="_updateKanbanCard">
    /// A boolean value which determines if updates should be done on the <c>KanbanCard</c> record.
    /// Pass in false if calling during an update of a <c>KanbanCard</c> buffer; optional
    /// </param>
    /// <returns>
    /// true if the record was inserted successfully; otherwise, false.
    /// </returns>
    public static boolean assignToKanban(
        KanbanCard  _kanbanCard,
        Kanban      _kanban,
        boolean     _updateKanbanCard = true)
    {
        Kanban              kanban;
        KanbanCard          kanbanCard;
        KanbanRule          kanbanRule;

        boolean             result = true;

        // check input parameters
        if (!_kanbanCard.RecId
            || !_kanban.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_kanbanCard.KanbanRule != _kanban.KanbanRule)
        {
            throw error("@SYS136483");
        }

        if ( _kanban.Manual       == NoYes::Yes
          && _kanbanCard.CardType == KanbanCardType::Circulating)
        {
            kanbanRule = _kanban.kanbanRule();

            if (!kanbanRule.type().manualKanbansNeedCards())
            {
                throw error("@SYS310634");
            }
        }

        // find the kanban that the card is currently assigned to (if any)
        kanban = _kanbanCard.Kanban == (_kanban.RecId) ? _kanban : Kanban::find(_kanbanCard.Kanban);

        // see if there's already an assigned kanban record
        if (_kanbanCard.Kanban)
        {
            result = result && _kanbanCard.CardType != KanbanCardType::OneTime;

            if (!result)
            {
                throw error("@SYS309666");
            }

            // an existing kanban can be unassigned only if the
            // it's in status created
            result = result && kanban.Status == LeanKanbanStatus::NotAssigned;

            if (!result)
            {
                // Kanban %1 could not be assigned to card %2 because the card already has an assigned active kanban
                throw error(strFmt("@SYS133816", _kanban.KanbanId, _kanbanCard.CardId));
            }
        }

        result = result && _kanbanCard.checkLegalEntity(_kanban);

        if (result)
        {
            ttsbegin;

            // Clear any previous card assigned to the kanban
            KanbanCard::unAssign(kanban, false, _updateKanbanCard);

            kanban.skipDataMethods(true);
            str kanbanCardId = _kanbanCard.CardId;
            RecId kanbanRecId = _kanban.RecId;
            RecId kanbanCardRecId = _kanbanCard.RecId;

            update_recordset kanban
                setting KanbanCardId = kanbanCardId
                where kanban.RecId == kanbanRecId;

            if (_updateKanbanCard)
            {
                kanbanCard.skipDataMethods(true);
                update_recordset kanbanCard
                    setting Kanban = kanbanRecId
                    where kanbanCard.RecId == kanbanCardRecId;
            }

            KanbanLicensePlate::setLicensePlateForKanban(_kanban);

            ttscommit;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countRuleCards</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the <c>KanbanCard</c> records that belong to a particular kanban rule.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The kanban rule to which the cards belong.
    /// </param>
    /// <param name="_assigned">
    ///    The flag that indicates whether the assigned or unassigned cards should be counted.
    /// </param>
    /// <param name="_onlyActive">
    ///    The flag that indicates whether the cards for the active rule or the whole replacement chain should
    ///    be counted.
    /// </param>
    /// <returns>
    ///    The number of cards that correspond to the conditions.
    /// </returns>
    private static int countRuleCards(
        KanbanRule _kanbanRule,
        boolean    _assigned,
        boolean    _onlyActive)
    {
        QueryRun    queryRun;
        int         activeCardsCount = 0;

        if (_kanbanRule.RecId)
        {
            queryRun = new QueryRun(_kanbanRule.status().getCardsQuery(!_assigned, _onlyActive));

            // count the results
            while (queryRun.next())
            {
                activeCardsCount++;
            }
        }

        return activeCardsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a one-time card for the kanban and links them together.
    /// </summary>
    /// <param name="_kanban">
    /// The kanban for which a one-time card is created.
    /// </param>
    /// <param name="_numberSequenceId">
    /// The number sequence to use for drawing the card ID.
    /// </param>
    /// <returns>
    /// The new card if a card was created and assigned; otherwise, null.
    /// </returns>
    public static KanbanCard createForKanban(
        Kanban      _kanban,
        RefRecId    _numberSequenceId)
    {
        KanbanCard  kanbanCard;

        // validate input parameters
        if (    !_numberSequenceId
            ||  !_kanban.RecId
            ||  _kanban.Status != LeanKanbanStatus::NotAssigned)
        {
            error(Error::wrongUseOfFunction(funcName()));
            return null;
        }

        // draw a number from the number sequence
        kanbanCard.CardId = NumberSeq::newGetNumFromId(_numberSequenceId).num();

        if (!kanbanCard.CardId)
        {
            // KanbanCardId could not be obtained from number sequence %1
            error(strFmt("@SYS133820", NumberSequenceTable::find(_numberSequenceId).NumberSequence));
            return null;
        }

        kanbanCard.CardType = KanbanCardType::OneTime;
        kanbanCard.PrintStatus = KanbanCardPrintStatusType::New;
        kanbanCard.KanbanRule = _kanban.KanbanRule;

        ttsbegin;
        kanbanCard.insert();
        if (! KanbanCard::assignToKanban(kanbanCard, _kanban))
        {
            ttsabort;
            return null;
        }
        ttscommit;

        return kanbanCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the circulating <c>KanbanCard</c> records for the specified <c>KanbanRule</c> record.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>KanbanRule</c> record to which the cards are assigned.
    /// </param>
    /// <param name="_numberOfCards">
    ///    The number of cards to be created.
    /// </param>
    /// <returns>
    ///    A list of the <c>CardIds</c> values of cards created.
    /// </returns>
    public static List createForRule(
        KanbanRule _kanbanRule,
        int        _numberOfCards)
    {
        KanbanCard  kanbanCard;
        int         i;
        List        listCreatedCards = new List(Types::String);

        // validate input parameters
        if (   _numberOfCards <= 0
            || !_kanbanRule.RecId
            || _kanbanRule.UsesCirculatingCards == NoYes::No
            || !_kanbanRule.CardsNumberSequence
            || NumberSequenceTable::find(_kanbanRule.CardsNumberSequence).Manual == NoYes::Yes)
        {
            error(Error::wrongUseOfFunction(funcName()));
            return null;
        }

        ttsbegin;
        // create the requested number of cards
        for (i = 0; i < _numberOfCards; ++i)
        {
            kanbanCard.clear();

            // draw a number from the number sequence
            kanbanCard.CardId      = NumberSeq::newGetNumFromId(_kanbanRule.CardsNumberSequence).num();
            kanbanCard.CardType    = KanbanCardType::Circulating;
            kanbanCard.KanbanRule  = _kanbanRule.RecId;
            kanbanCard.PrintStatus = KanbanCardPrintStatusType::New;
            kanbanCard.insert();

            listCreatedCards.addEnd(kanbanCard.CardId);
        }
        ttscommit;

        return listCreatedCards;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>KanbanCard</c> table exists.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>KanbanCard</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _refRecId)
    {
        return _refRecId && (select firstonly kanbanCard where kanbanCard.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCardId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>KanbanCard</c> table exists.
    /// </summary>
    /// <param name="_cardId">
    /// The card to verify for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existCardId(KanbanCardId _cardId)
    {
        return _cardId && (select firstonly kanbanCard where kanbanCard.CardId == _cardId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanCard</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>KanbanCard</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanCard</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanCard find(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        KanbanCard kanbanCard;

        kanbanCard.selectForUpdate(_forUpdate);

        if (_refRecId)
        {
            select firstonly kanbanCard
                where kanbanCard.RecId == _refRecId;
        }

        return kanbanCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCardId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>KanbanCard</c> table with the specified card identifier.
    /// </summary>
    /// <param name="_cardId">
    ///    The card identifier of the <c>KanbanCard</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>KanbanCard</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanCard findCardId(
        KanbanCardId _cardId,
        boolean      _forUpdate = false)
    {
        KanbanCard kanbanCard;

        kanbanCard.selectForUpdate(_forUpdate);

        if (_cardId)
        {
            select firstonly kanbanCard
                where kanbanCard.CardId == _cardId;
        }

        return kanbanCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the card record for the specified kanban.
    /// </summary>
    /// <param name="_kanbanRecId">
    ///    The record identifier of the kanban record for which to find the associated card.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>KanbanCard</c> table; otherwise, an empty record if no card was found.
    /// </returns>
    public static KanbanCard findKanban(
        KanbanRefRecId _kanbanRecId,
        boolean        _forUpdate = false)
    {
        KanbanCard  kanbanCard;

        kanbanCard.selectForUpdate(_forUpdate);

        if (_kanbanRecId)
        {
            select firstonly kanbanCard
                where kanbanCard.Kanban == _kanbanRecId;
        }

        return kanbanCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanCard</c> table.
    /// </summary>
    /// <param name="_kanbanRuleRefRecId">
    /// The record ID of a <c>KanbanRule</c> record.
    /// </param>
    /// <param name="_printStatus">
    /// A <c>KanbanCardPrintStatusType</c> enumeration value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanCard</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanCard findKanbanRule(
        KanbanRuleRefRecId        _kanbanRuleRefRecId,
        KanbanCardPrintStatusType _printStatus = KanbanCardPrintStatusType::New,
        boolean                   _forUpdate   = false)
    {
        KanbanCard  kanbanCard;

        kanbanCard.selectForUpdate(_forUpdate);

        if (_kanbanRuleRefRecId)
        {
            select firstonly kanbanCard
                where kanbanCard.KanbanRule   == _kanbanRuleRefRecId
                    && kanbanCard.PrintStatus == _printStatus;
        }

        return kanbanCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleCardsCountAssigned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of assigned <c>KanbanCard</c> records that belong to a particular kanban rule.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> buffer to which the cards belong.
    /// </param>
    /// <param name="_onlyActive">
    /// Determines if only the cards for the active rule or the whole replacement chain are returned.
    /// </param>
    /// <returns>
    /// The number of assigned cards.
    /// </returns>
    public static NumberOf getRuleCardsCountAssigned(
        KanbanRule _kanbanRule,
        boolean    _onlyActive = true)
    {
        return KanbanCard::countRuleCards(_kanbanRule, true, _onlyActive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleCardsCountFree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of unassigned <c>KanbanCard</c> records that belong to a particular kanban rule.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> buffer to which the cards belong.
    /// </param>
    /// <param name="_onlyActive">
    /// Determines if only the cards for the active rule or the whole replacement chain are returned.
    /// </param>
    /// <returns>
    /// The number of assigned cards.
    /// </returns>
    public static NumberOf getRuleCardsCountFree(
        KanbanRule _kanbanRule,
        boolean    _onlyActive = true)
    {
        return KanbanCard::countRuleCards(_kanbanRule, false, _onlyActive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleCardsCountTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of records in the <c>KanbanCard</c> table that belong to a particular
    /// <c>KanbanRule</c> buffer.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> buffer to which the cards belong.
    /// </param>
    /// <param name="_onlyActive">
    /// A Boolean value that indicates whether the cards for the active rule or the whole replacement chain
    /// are returned; optional.
    /// </param>
    /// <param name="_onlyCirculating">
    /// A Boolean value that indicates whether the circulating cards are returned; optional.
    /// </param>
    /// <returns>
    /// The total number of cards that belong to the rule.
    /// </returns>
    public static NumberOf getRuleCardsCountTotal(
        KanbanRule _kanbanRule,
        boolean    _onlyActive      = true,
        boolean    _onlyCirculating = true)
    {
        KanbanCard              kanbanCard;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        LeanCoverageKanbanRule  searchLeanCoverageKanbanRule;

        // check input params
        if (!_kanbanRule.RecId)
        {
            return 0;
        }

        // do the db operation only if the rule uses cards
        if (_kanbanRule.UsesCirculatingCards)
        {
            searchLeanCoverageKanbanRule = LeanCoverageKanbanRule::findKanbanRule(_kanbanRule.RecId);

            // we only show cards that are either for the active rule (if the flag requested it)
            // or all cards belonging to expired rules in the same replacement chain
            select count(RecId) from kanbanCard
                where (!_onlyActive
                   ||  kanbanCard.KanbanRule == _kanbanRule.RecId)
                   && (!_onlyCirculating
                   ||  kanbanCard.CardType == KanbanCardType::Circulating)
                exists join leanCoverageKanbanRule
                    where leanCoverageKanbanRule.KanbanRule == kanbanCard.KanbanRule
                       && leanCoverageKanbanRule.Coverage   == searchLeanCoverageKanbanRule.Coverage
                       && leanCoverageKanbanRule.ValidFrom  <= searchLeanCoverageKanbanRule.ValidFrom;
        }

        return any2int(kanbanCard.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unassigns the current card from a kanban.
    /// </summary>
    /// <param name="_kanban">
    /// The kanban from which to remove the card.
    /// </param>
    /// <remarks>
    /// This method deletes the card itself for single usage cards.
    /// </remarks>
    public static void removeCard(Kanban _kanban)
    {
        KanbanCard  kanbanCard;

        if (_kanban.KanbanCardId)
        {
            kanbanCard = KanbanCard::findCardId(_kanban.KanbanCardId, true);

            switch (kanbanCard.CardType)
            {
                case KanbanCardType::OneTime:
                    ttsbegin;
                    kanbanCard.delete();
                    ttscommit;
                    break;
                case KanbanCardType::Circulating:
                    KanbanCard::unAssign(_kanban);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@GLS180237";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unAssign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unassigns the current card from a kanban.
    /// </summary>
    /// <param name="_kanban">
    ///    The Kanban from which to unassign the card.
    /// </param>
    /// <param name="_setLicensePlate">
    ///    A Boolean value that indicates if the license plate should be set; optional.
    /// </param>
    /// <param name="_updateKanbanCard">
    ///    A boolean value which determines if updates should be done on the <c>KanbanCard</c> record.
    ///   Pass in false if calling during an update of a <c>KanbanCard</c> buffer; optional.
    /// </param>
    public static void unAssign(Kanban _kanban, boolean _setLicensePlate = true, boolean _updateKanbanCard = true)
    {
        Kanban      kanban;
        KanbanCard  kanbanCard;

        if (   _kanban
            && _kanban.KanbanCardId != '')
        {
            ttsbegin;
            kanban.skipDataMethods(true);
            update_recordset kanban
                setting KanbanCardId = ''
                where kanban.RecId == _kanban.RecId;

            if (_updateKanbanCard)
            {
                kanbanCard.skipDataMethods(true);
                update_recordset kanbanCard
                    setting Kanban = 0
                    where kanbanCard.Kanban == _kanban.RecId;
            }

            if (_setLicensePlate)
            {
                KanbanLicensePlate::setLicensePlateForKanban(_kanban);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doKanbanAssignment</Name>
				<Source><![CDATA[
    private void doKanbanAssignment(boolean _insert = false)
    {
        boolean updateKanbanCard = false;

        if ( _insert
          || (this.Kanban != this.orig().Kanban))
        {
            if (this.Kanban)
            {
                var kanban = Kanban::find(this.Kanban);
                if (kanban.RecId != 0 && kanban.Status == LeanKanbanStatus::NotAssigned)
                {
                    KanbanRule::find(this.KanbanRule).status().reassignCard(this);
                    KanbanCard::assignToKanban(this, kanban, updateKanbanCard);
                }
            }
            else
            {
                var kanban = Kanban::find(this.orig().Kanban);
                boolean setLicensePlate = true;
                KanbanCard::unAssign(kanban, setLicensePlate, updateKanbanCard);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.doKanbanAssignment();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        this.doKanbanAssignment(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS324591</DeveloperDocumentation>
	<FormRef>KanbanCirculatingCards</FormRef>
	<Label>@SYS132011</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>CardId</TitleField1>
	<TitleField2>KanbanRule</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>CardId</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CardType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KanbanRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CardId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Card</Name>
			<Label>@SYS132011</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS131988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KanbanRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Kanban</Name>
			<Label>@SYS131574</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Kanban</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanCardId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CardType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>KanbanCardType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Kanban</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KanbanRule</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131579</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>KanbanCardPrintStatusType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CardId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CardId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>KanbanRuleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>KanbanRule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>KanbanIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Kanban</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CardTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CardType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Kanban</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>Kanban</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Kanban</Name>
					<Field>Kanban</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KanbanRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanRule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OwnerKanbanRule</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanCard</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KanbanRule</Name>
					<Field>KanbanRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>