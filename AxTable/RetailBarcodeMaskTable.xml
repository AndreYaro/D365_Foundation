<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBarcodeMaskTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailBarcodeMaskTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRefLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the length of the Barcode by using the selected <c>BarcodeType</c> enumeration value.
    /// </summary>
    /// <returns>
    /// true if the bar code is a <c>BarCodeType</c> enumeration value; otherwise false.
    /// </returns>
    int getRefLength()
    {
        boolean ret;

        switch (this.symbology)
        {
            case BarcodeType::EAN128    :   ret = 13;
                                            break;
            case BarcodeType::EAN8      :   ret = 8;
                                            break;
            case BarcodeType::UPCA      :   ret = 12;
                                            break;
            case BarcodeType::UPCE      :   ret = 7;
                                            break;
            default                     :   ret = 0;
                                            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>length</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total length of the bar code mask for the selected mask ID and adds to it the length of
    /// the prefix.
    /// </summary>
    /// <returns>
    /// The total length of the Barcode mask for this mask ID.
    /// </returns>
    display RetailBarcodeMaskLength length()
    {
        RetailBarcodeMaskSegment   barcodeMaskSegment;

        select sum(Length) from barcodeMaskSegment where
            barcodeMaskSegment.MaskId == this.MaskId;

        return barcodeMaskSegment.Length + strlen(this.Prefix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>errorOnRename</c> method of the <c>RetailConnActionManagement</c> class.
    /// </summary>
    public void renamePrimaryKey()
    {
        ;
        RetailConnActionManagement::errorOnRename(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the value for the mask based on the length of the mask segment.
    /// </summary>
    /// <remarks>
    /// This method appends the characters until it reaches the length of the mask segment with the prefix.
    /// </remarks>
    void updateMask()
    {
        RetailBarcodeMask  mask;
        RetailBarcodeMaskSegment rboBarcodeMaskSegment;
        int i;

        mask = this.Prefix;

        while select rboBarcodeMaskSegment
        order by SegmentNum
        where rboBarcodeMaskSegment.MaskId == this.maskId
        {
            i = 0;
            while (rboBarcodeMaskSegment.Length > i)
            {
                mask = mask + rboBarcodeMaskSegment.Char;
                i++;
            }
        }

        this.Mask = mask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMaskFromSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the value of the <c>Mask</c> field in the <c>RetailBarcodeMaskTable</c> record based on the
    /// length of the mask segment for the <c>MaskId</c> parameter that is passed.
    /// </summary>
    /// <param name="_MaskId">
    /// The current value of <c>MaskId</c> .
    /// </param>
    void updateMaskFromSegment(RetailBarcodeMaskId _MaskId)
    {
        RetailBarcodeMask  mask;
        RetailBarcodeMaskSegment rboBarcodeMaskSegment;
        RetailBarcodeMaskTable   rboBarcodeMaskTable;
        int i;

        ttsbegin;

        select forupdate firstonly rboBarcodeMaskTable where
            rboBarcodeMaskTable.MaskId == _MaskId;

        if (rboBarcodeMaskTable)
        {
            mask = rboBarcodeMaskTable.Prefix;

            while select rboBarcodeMaskSegment
            order by SegmentNum
            where rboBarcodeMaskSegment.MaskId == _MaskId
            {
                i = 0;
                while (rboBarcodeMaskSegment.Length > i)
                {
                    mask = mask + rboBarcodeMaskSegment.Char;
                    i++;
                }
            }

            rboBarcodeMaskTable.Mask = mask;
            rboBarcodeMaskTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        boolean proceed;

        ret = super(_fieldIdToCheck);

        switch (fieldExt2Id(_fieldIdToCheck))
        {
            case fieldnum(RetailBarcodeMaskTable, Prefix): 
                if (this.Prefix != this.orig().Prefix)
                {
                    // If prefix is updating through an entity (i.e., not from UI) then dialog box confirmation will be ignored.
                    if ((!this.isFormDataSource() && !RetailMerchandisingKillSwitch::enableBoxAPICallWhileUpdatingPrefixFieldUnderBarcodeMask())
                        || Box::yesNo("@Retail:PrefixFieldModifyInfoMessage",DialogButton::No))
                    {
                        ret = this.validatePrefix();
                    }
                    else
                    {
                        this.Prefix = this.orig().Prefix;
                    }
                }
                else 
                {
                    ret = this.validatePrefix();
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value for the <c>Prefix</c> field.
    /// </summary>
    /// <returns>
    /// true if the field is valid; otherwise false.
    /// </returns>
    boolean validatePrefix()
    {
        RetailBarcodeMaskTable barcodeMaskTable;

        if (this.Prefix == "")
        {
            select firstonly RecId from barcodeMaskTable
                where barcodeMaskTable.Prefix == "";
            if (barcodeMaskTable.RecId)
            {
                // do not allow to create any other mask if this already have a mask with prefix empty.
                return checkFailed("@RET3932");
            }
        }
        else
        {
            while select MaskId, Prefix from barcodeMaskTable
                where barcodeMaskTable.MaskId != this.MaskId
                    && barcodeMaskTable.Prefix != ""
            {
                if ((this.Prefix == substr(barcodeMaskTable.Prefix,1,strlen(this.Prefix)))
                    || (barcodeMaskTable.Prefix == substr(this.Prefix,1,strlen(barcodeMaskTable.Prefix))))
                {
                    // do not allow to create any other mask if this already have a mask with the same prefix.
                    return checkFailed("@RET3932");
                }
            }
        }

        this.updateMask();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.validatePrefix();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailBarcodeMaskTable</c> table.
    /// </summary>
    /// <param name="_maskId">
    /// The current value of field <c>Mask</c>.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the RetailBarcodeMaskTable; otherwise, an empty record.
    /// </returns>
    static RetailBarcodeMaskTable find(RetailBarcodeMaskId _maskId,
                                            boolean _update = false)
    {
        RetailBarcodeMaskTable  barCodeMaskTable;

        barCodeMaskTable.selectForUpdate(_update);

        if (_maskId)
        {
            select firstonly barCodeMaskTable
                where barCodeMaskTable.maskId == _maskId;
        }
        return barCodeMaskTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailBarcodeMaskTable</c> table.
    /// </summary>
    /// <param name="_mask">
    /// The current value of the <c>Mask</c> field.
    /// </param>
    /// <param name="_maskType">
    /// The current value of the <c>Masktype</c> field.
    /// </param>
    /// <param name="update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailBarcodeMaskTable</c> table; otherwise, an empty record.
    /// </returns>
    static RetailBarcodeMaskTable findMask(RetailBarcodeMask _mask,
                                        RetailBarcodeMaskType _maskType,
                                        boolean       update = false)
    {
        RetailBarcodeMaskTable  rboBarcodeMaskTable;
        ;

        rboBarcodeMaskTable.selectForUpdate(update);

        if (_mask && _maskType)
        select firstonly rboBarcodeMaskTable
            index hint MaskIdx
            where rboBarcodeMaskTable.Type == _maskType
            &&    rboBarcodeMaskTable.Mask == _mask;

        return rboBarcodeMaskTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET260835</DeveloperDocumentation>
	<FormRef>RetailBarcodeMaskSetup</FormRef>
	<Label>@RET3044</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>maskId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>MaskIdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>CommerceMiscellaneous</Modules>
	<PrimaryIndex>MaskIdIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BarcodeSetup</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>BarcodeSetup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RetailBarcodeMaskSegment</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailBarcodeMaskSegment</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Prefix</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Symbology</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Symbology</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BarcodeMask</Name>
			<Label>@RET3044</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Prefix</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Symbology</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@RET3039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@RET3040</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>maskId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Mask</Name>
			<Label>@RET3045</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Mask</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Prefix</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>length</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Symbology</Name>
			<Label>@RET3046</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Symbology</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@RET3042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Mask</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBarcodeMask</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>maskId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBarcodeMaskId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Prefix</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBarcodeMaskPrefix</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Symbology</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBarcodeSymbology</ExtendedDataType>
			<EnumType>BarcodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailBarcodeMaskType</ExtendedDataType>
			<EnumType>RetailBarcodeMaskTypeBase</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrefixIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Prefix</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MaskIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Mask</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Type</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MaskIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>maskId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>