<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestCategoryExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendRequestCategoryExtension extends VendRequest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the enterprise portal toolbar action menus, that are used to change and view the
    ///    vendor requests, should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the vendor request can be edited by the user; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean allowEdit()
    {
        boolean             ret = false;
        DirPersonUser       dirPersonUser = DirPersonUser::current();

        // Returns true if:
        //  - Employee originated, user is employee and draft status
        //  - Category request was drafted and user is vendor.
        switch (this.CategoryExtensionStatus)
        {
            case VendRequestCategoryStatus::RequestCancelled:
            case VendRequestCategoryStatus::Draft:
                if  (this.OriginatedByType      == VendRequestOriginatedByType::Procurement &&
                    DirPartyTableHelper::isWorker(dirPersonUser.PersonParty))
                    ret = true;
                break;
            case VendRequestCategoryStatus::CategoryRequestCancelled:
            case VendRequestCategoryStatus::CategoryRequestReady:
            case VendRequestCategoryStatus::CategoryRequestDrafted:
                ret = VendTable::isVendor();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string value that represents the approval form for a vendor request.
    /// </summary>
    /// <returns>
    /// The approval form command.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public menuItemNameDisplay approvalMenuItem()
    {
        menuItemNameDisplay ret;

        if (this.CategoryExtensionStatus < VendRequestCategoryStatus::CategoryRequestReady)
        {
            ret = menuitemDisplayStr(VendRequestCategoryProcurementApprove);
        }
        else
        {
            ret = menuitemDisplayStr(VendRequestCategoryVendorApprove);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the category request can be submitted by the user.
    /// </summary>
    /// <param name="_workflowType">
    ///   The name of the workflow template.
    /// </param>
    /// <returns>
    ///    true if the workflow can be submitted by the user; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = "")
    {
        boolean             ret;
        VendRequestCategory vendRequestCategory;

        ret = super(_workflowType);

        ret = ret && this.allowEdit();

        if (_workflowType == workFlowTypeStr(VendRequestNVJTemplate))
        {
            ret = ret && (this.CategoryExtensionStatus == VendRequestCategoryStatus::CategoryRequestDrafted ||
                this.CategoryExtensionStatus == VendRequestCategoryStatus::CategoryRequestCancelled);
        }

        // Make sure that there is at least one category request record:
        select  firstonly RecId
        from    vendRequestCategory
        where   vendRequestCategory.VendRequest == this.RecId;

        ret = ret && vendRequestCategory.RecId != 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor request configuration profile.
    /// </summary>
    /// <returns>
    /// The vendor request configuration.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendRequestProfile configuration()
    {
        VendFieldMetadataGroupType  configurationType;
        VendRequestProfile          vendRequestProfile;

        if (this.CategoryExtensionStatus < VendRequestCategoryStatus::CategoryRequestReady)
        {
            configurationType = VendFieldMetadataGroupType::VendRequestCategory;

            vendRequestProfile = VendRequestProfileHelper::findByDataArea(configurationType);
        }
        else
        {
            if (this.OriginatedByType == VendRequestOriginatedByType::Vendor)
            {
                configurationType = VendFieldMetadataGroupType::VendRequestVendorCategory;
            }
            else
            {
                configurationType = VendFieldMetadataGroupType::VendRequestCategoryApproval;
            }

            vendRequestProfile = VendRequestProfileHelper::findVendRequestProfile(
                configurationType,
                DirParty::primaryPostalAddress(this.VendParty).CountryRegionId);
        }

        return vendRequestProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there is at least one document attached to a vendor category request.
    /// </summary>
    /// <returns>
    /// true if the vendor request has documents; otherwise, false.
    /// </returns>
    display VendRequestHasDocuments hasDocuments()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionnaireCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any questionnaires that are not completed.
    /// </summary>
    /// <returns>
    /// A <c>VendRequestQuestionnairesCompleted</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// If there are outstanding questionnaires, this method will return the <c>NoYes::No</c> enumeration
    /// value; if all questionnaires are completed, it will return the <c>NoYES::Yes</c> enumeration value;
    /// otherwise, it returns the <c>Not required</c> enumeration value.
    /// </remarks>
    public display VendRequestQuestionnaireCompleted questionnaireCompleted()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the document status of the vendor request record regardless of the instance entity type.
    /// </summary>
    /// <returns>
    ///    The document request status.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display VendRequestDocumentStatusText requestStatus()
    {
        return enum2str(this.CategoryExtensionStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Display the classification type of the vendor request, regardless of the subtype of the
    ///    <c>VendRequest</c> table.
    /// </summary>
    /// <returns>
    ///    An enumeration value that indicates a vendor category request.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display VendRequestInstanceEntityType requestTypeName()
    {
        return VendRequestInstanceEntityType::Category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPendingReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the vendor request to the
    /// <c>VendRequestCategoryStatus::CategoryRequestPendingReview</c> enumeration value.
    /// </summary>
    public void setPendingReview()
    {
        super();

        this.CategoryExtensionStatus = VendRequestCategoryStatus::CategoryRequestPendingReview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReviewed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the vendor request to the
    /// <c>VendRequestCategoryStatus::CategoryRequestReviewed</c> enumeration value.
    /// </summary>
    public void setReviewed()
    {
        super();

        this.CategoryExtensionStatus = VendRequestCategoryStatus::CategoryRequestReviewed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendRequest, ContactParty):
                    if (ContactPerson::findByPartyRecId(this.ContactParty).ContactForParty != this.VendParty)
                    {
                        ret = checkFailed("@SYS334522");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>VendRequestCategoryExtension</c> table exists.
    /// </summary>
    /// <param name="_vendRequestCategoryExtensionId">
    /// The record ID of a <c>VendRequestCategoryExtension</c> record.
    /// </param>
    /// <returns>
    /// True if the <c>VendRequestCategoryExtension</c> record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(recId _vendRequestCategoryExtensionId)
    {
        return (select firstonly RecId
                from  vendRequestCategoryExtension
                where vendRequestCategoryExtension.RecId == _vendRequestCategoryExtensionId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendRequestCategoryExtension</c> table.
    /// </summary>
    /// <param name="_vendRequestRecId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>VendRequestCategoryExtension</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static VendRequestCategoryExtension find( recId       _vendRequestRecId,
                                              boolean     _forUpdate = false )
    {
        VendRequestCategoryExtension vendRequestCategoryExtension;

        vendRequestCategoryExtension.selectForUpdate(_forUpdate);

        select  vendRequestCategoryExtension
        where   vendRequestCategoryExtension.RecId == _vendRequestRecId;

        return vendRequestCategoryExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of categories for a category request.
    /// </summary>
    /// <param name="_vendRequestCategoryExtensionId">
    ///    The record ID of the <c>VendRequestCategoryExtension</c> record.
    /// </param>
    /// <returns>
    ///    A container list of containers that contain the record IDs and names of each category found in the
    ///    <c>VendRequestCategory</c> and <c>EcoResCategory</c> tables.
    /// </returns>
    /// <remarks>
    ///    Called from the EP <c>VendRequestCategoryAdd</c> and <c>VendRequestCategoryEdit</c> Web controls.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getRequestCategories(recId _vendRequestCategoryExtensionId)
    {
        VendRequestCategory             vendRequestCategory;
        EcoResCategory                  ecoResCategory;
        container                       ret = connull();

        while select Category from vendRequestCategory
        where   vendRequestCategory.VendRequest == _vendRequestCategoryExtensionId
        join    Name from ecoResCategory
        where   ecoResCategory.RecId == vendRequestCategory.Category
        {
            ret += [[vendRequestCategory.Category,ecoResCategory.Name]];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the document and workflow states of the new vendor request item.
    /// </summary>
    /// <param name="_vendRequestRecId">
    /// The record ID of the Vendor Request item to update.
    /// </param>
    /// <param name="_nextDocumentStatus">
    /// The vendor request document status of the Vendor Request item.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void setWorkflowState(recId _vendRequestRecId, VendRequestCategoryStatus _nextDocumentStatus)
    {
        VendRequestCategoryExtension vendRequestCategoryExtension;
        VendRequestWorkflowState nextWorflowState;

        switch (_nextDocumentStatus)
        {
            case VendRequestCategoryStatus::RequestSubmitted:
                nextWorflowState = VendRequestWorkflowState::Submitted;
                break;
            case VendRequestCategoryStatus::RequestApproved:
                nextWorflowState = VendRequestWorkflowState::Approved;
                break;
            case VendRequestCategoryStatus::RequestPendingApproval:
                nextWorflowState = VendRequestWorkflowState::PendingApproval;
                break;
            case VendRequestCategoryStatus::RequestRejected:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCategoryStatus::RequestCancelled:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCategoryStatus::CategoryRequestReady:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCategoryStatus::CategoryRequestDrafted:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCategoryStatus::CategoryRequestSubmitted:
                nextWorflowState = VendRequestWorkflowState::Submitted;
                break;
            case VendRequestCategoryStatus::CategoryRequestPendingApproval:
                nextWorflowState = VendRequestWorkflowState::PendingApproval;
                break;
            case VendRequestCategoryStatus::CategoryRequestRejected:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
            case VendRequestCategoryStatus::CategoryRequestCancelled:
                nextWorflowState = VendRequestWorkflowState::NotSubmitted;
                break;
        }

        ttsbegin;

        select  firstonly forupdate vendRequestCategoryExtension
        where   vendRequestCategoryExtension.RecId == _vendRequestRecId;

        if  (vendRequestCategoryExtension.RecId)
        {
            vendRequestCategoryExtension.VendRequestWorkflowState = nextWorflowState;
            vendRequestCategoryExtension.CategoryExtensionStatus = _nextDocumentStatus;
            vendRequestCategoryExtension.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendRequest</ConfigurationKey>
	<DeveloperDocumentation>@SYS317734</DeveloperDocumentation>
	<Label>@SYS153427</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CategoryExtensionStatus</TitleField1>
	<TitleField2>OriginatedByType</TitleField2>
	<Extends>VendRequest</Extends>
	<Modules>Obsolete</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryExtensionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginatedByType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS130857</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CategoryExtensionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginatedByType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CategoryExtensionStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendRequestCategoryStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OriginatedByType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendRequestOriginatedByType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendRequest</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendRequestParent</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>VendRequestChild</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>