<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTransitDocumentDetailsHeader_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTransitDocumentDetailsHeader_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustomerTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates customer transactions basedon tax module type.
    /// </summary>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    public static void createCustomerTransactions(TmpTransitDocumentDetailsHeader_IN   _tmpTransitDocumentDetailsHeader,
                                                  TmpTransitDocumentDetailsLine_IN     _tmpTransitDocumentDetailsLine)
    {
        CustTrans           custTrans;
        TaxTrans            taxTrans;
        TaxModuleTypeId     source;

        delete_from _tmpTransitDocumentDetailsLine;

        if (_tmpTransitDocumentDetailsHeader.Account &&
            _tmpTransitDocumentDetailsHeader.Source != Source_IN::Purch)
        {
            switch (_tmpTransitDocumentDetailsHeader.Source)
            {
                case Source_IN::All:
                    if (! _tmpTransitDocumentDetailsHeader.Date)
                    {
                        while select Voucher, TransDate, Invoice, AccountNum from custTrans
                            group by TransDate, Voucher, Invoice, AccountNum
                            where custTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account
                        {
                            taxTrans    = TaxTrans::find(custTrans.Voucher, custTrans.TransDate);
                            source      = taxTrans.Source;
                            if (source == TaxModuleType::Sales)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertSalesTransactions(custTrans,
                                                                                            _tmpTransitDocumentDetailsHeader,
                                                                                            _tmpTransitDocumentDetailsLine,
                                                                                            source);
                            }
                            if (source == TaxModuleType::Voucher)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustJournalTransactions(custTrans,
                                                                                                  _tmpTransitDocumentDetailsHeader,
                                                                                                  _tmpTransitDocumentDetailsLine,
                                                                                                  source);
                            }
                            if (source == TaxModuleType::FreeTxtInvoice)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustFreeInvoiceTransactions(custTrans,
                                                                                                      _tmpTransitDocumentDetailsHeader,
                                                                                                      _tmpTransitDocumentDetailsLine,
                                                                                                      source);
                            }
                        }
                    }
                    else
                    {
                        while select Voucher, TransDate, Invoice, AccountNum from custTrans
                            group by TransDate, Voucher, Invoice, AccountNum
                            where custTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account &&
                                  custTrans.TransDate   <= _tmpTransitDocumentDetailsHeader.Date
                        {
                            taxTrans    = TaxTrans::find(custTrans.Voucher, custTrans.TransDate);
                            source      = taxTrans.Source;
                            if (source == TaxModuleType::Sales)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertSalesTransactions(custTrans,
                                                                                            _tmpTransitDocumentDetailsHeader,
                                                                                            _tmpTransitDocumentDetailsLine,
                                                                                            source);
                            }
                            if (source == TaxModuleType::Voucher)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustJournalTransactions(custTrans,
                                                                                                  _tmpTransitDocumentDetailsHeader,
                                                                                                  _tmpTransitDocumentDetailsLine,
                                                                                                  source);
                            }
                            if (source == TaxModuleType::FreeTxtInvoice)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustFreeInvoiceTransactions(custTrans,
                                                                                                      _tmpTransitDocumentDetailsHeader,
                                                                                                      _tmpTransitDocumentDetailsLine,
                                                                                                      source);
                            }
                        }
                    }
                    break;

                case Source_IN::Sales:
                    if (! _tmpTransitDocumentDetailsHeader.Date)
                    {
                        while select Voucher, TransDate, Invoice, AccountNum from custTrans
                            group by TransDate, Voucher, Invoice, AccountNum
                            where custTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account &&
                                  custTrans.TransType   == LedgerTransType::Sales
                        {
                            taxTrans    = TaxTrans::find(custTrans.Voucher, custTrans.TransDate);
                            source      = taxTrans.Source;

                            TmpTransitDocumentDetailsHeader_IN::insertSalesTransactions(custTrans,
                                                                                        _tmpTransitDocumentDetailsHeader,
                                                                                        _tmpTransitDocumentDetailsLine,
                                                                                        source);
                        }
                    }
                    else
                    {
                        while select Voucher, TransDate, Invoice, AccountNum from custTrans
                            group by TransDate, Voucher, Invoice, AccountNum
                            where custTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account &&
                                  custTrans.TransDate   <= _tmpTransitDocumentDetailsHeader.Date    &&
                                  custTrans.TransType   == LedgerTransType::Sales
                        {
                            taxTrans    = TaxTrans::find(custTrans.Voucher, custTrans.TransDate);
                            source      = taxTrans.Source;

                            TmpTransitDocumentDetailsHeader_IN::insertSalesTransactions(custTrans,
                                                                                        _tmpTransitDocumentDetailsHeader,
                                                                                        _tmpTransitDocumentDetailsLine,
                                                                                        source);
                        }
                    }

                    break;

                case Source_IN::Journal:
                    if (! _tmpTransitDocumentDetailsHeader.Date)
                    {
                        while select Voucher, TransDate, Invoice, AccountNum from custTrans
                            group by TransDate, Voucher, Invoice, AccountNum
                            where custTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account
                        {
                            taxTrans    = TaxTrans::find(custTrans.Voucher, custTrans.TransDate);
                            source      = taxTrans.Source;
                            if (source == TaxModuleType::Voucher)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustJournalTransactions(custTrans,
                                                                                                  _tmpTransitDocumentDetailsHeader,
                                                                                                  _tmpTransitDocumentDetailsLine,
                                                                                                  source);
                            }
                            if (source == TaxModuleType::FreeTxtInvoice)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustFreeInvoiceTransactions(custTrans,
                                                                                                      _tmpTransitDocumentDetailsHeader,
                                                                                                      _tmpTransitDocumentDetailsLine,
                                                                                                      source);
                            }
                        }
                    }
                    else
                    {
                        while select Voucher, TransDate, Invoice, AccountNum from custTrans
                            group by TransDate, Voucher, Invoice, AccountNum
                            where custTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account &&
                                  custTrans.TransDate   <= _tmpTransitDocumentDetailsHeader.Date
                        {
                            taxTrans    = TaxTrans::find(custTrans.Voucher, custTrans.TransDate);
                            source      = taxTrans.Source;
                            if (source == TaxModuleType::Voucher)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustJournalTransactions(custTrans,
                                                                                                  _tmpTransitDocumentDetailsHeader,
                                                                                                  _tmpTransitDocumentDetailsLine,
                                                                                                  source);
                            }
                            if (source == TaxModuleType::FreeTxtInvoice)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertCustFreeInvoiceTransactions(custTrans,
                                                                                                      _tmpTransitDocumentDetailsHeader,
                                                                                                      _tmpTransitDocumentDetailsLine,
                                                                                                      source);
                            }
                        }
                    }

                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates vendor transactions basedon tax module type.
    /// </summary>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    public static void createVendorTransactions(TmpTransitDocumentDetailsHeader_IN       _tmpTransitDocumentDetailsHeader,
                                                TmpTransitDocumentDetailsLine_IN         _tmpTransitDocumentDetailsLine)
    {
        VendTrans                   vendTrans;
        TaxTrans                    taxTrans;
        TaxModuleTypeId             source;

        delete_from _tmpTransitDocumentDetailsLine;

        if (_tmpTransitDocumentDetailsHeader.Account &&
            _tmpTransitDocumentDetailsHeader.Source != Source_IN::Sales)
        {
            switch (_tmpTransitDocumentDetailsHeader.Source)
            {
                case Source_IN::All:
                    if (! _tmpTransitDocumentDetailsHeader.Date)
                    {
                        while select vendTrans
                            where vendTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account
                        {
                            taxTrans    = TaxTrans::find(vendTrans.Voucher, vendTrans.TransDate);
                            source      = taxTrans.Source;
                            if (source == TaxModuleType::Purch)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertPurchTransactions(vendTrans,
                                                                                            _tmpTransitDocumentDetailsHeader,
                                                                                            _tmpTransitDocumentDetailsLine,
                                                                                            source);
                            }
                            if (source == TaxModuleType::Voucher)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertVendJournalTransactions(vendTrans,
                                                                                                  _tmpTransitDocumentDetailsHeader,
                                                                                                  _tmpTransitDocumentDetailsLine,
                                                                                                  source);
                            }
                        }
                    }
                    else
                    {
                        while select vendTrans
                            where vendTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account &&
                                  vendTrans.TransDate   <= _tmpTransitDocumentDetailsHeader.Date
                        {
                            taxTrans    = TaxTrans::find(vendTrans.Voucher, vendTrans.TransDate);
                            source      = taxTrans.Source;
                            if (source == TaxModuleType::Purch)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertPurchTransactions(vendTrans,
                                                                                            _tmpTransitDocumentDetailsHeader,
                                                                                            _tmpTransitDocumentDetailsLine,
                                                                                            source);
                            }
                            if (source == TaxModuleType::Voucher)
                            {
                                TmpTransitDocumentDetailsHeader_IN::insertVendJournalTransactions(vendTrans,
                                                                                                  _tmpTransitDocumentDetailsHeader,
                                                                                                  _tmpTransitDocumentDetailsLine,
                                                                                                  source);
                            }
                        }
                    }

                    break;

                case Source_IN::Purch:
                    if (! _tmpTransitDocumentDetailsHeader.Date)
                    {
                        while select vendTrans
                            where vendTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account &&
                                  vendTrans.TransType   == LedgerTransType::Purch
                        {
                            taxTrans    = TaxTrans::find(vendTrans.Voucher, vendTrans.TransDate);
                            source      = taxTrans.Source;

                            TmpTransitDocumentDetailsHeader_IN::insertPurchTransactions(vendTrans,
                                                                                        _tmpTransitDocumentDetailsHeader,
                                                                                        _tmpTransitDocumentDetailsLine,
                                                                                        source);
                        }
                    }
                    else
                    {
                        while select vendTrans
                            where vendTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account &&
                                  vendTrans.TransDate   <= _tmpTransitDocumentDetailsHeader.Date    &&
                                  vendTrans.TransType   == LedgerTransType::Purch
                        {
                            taxTrans    = TaxTrans::find(vendTrans.Voucher, vendTrans.TransDate);
                            source      = taxTrans.Source;

                            TmpTransitDocumentDetailsHeader_IN::insertPurchTransactions(vendTrans,
                                                                                        _tmpTransitDocumentDetailsHeader,
                                                                                        _tmpTransitDocumentDetailsLine,
                                                                                        source);
                        }
                    }

                    break;

                case Source_IN::Journal:
                    if (! _tmpTransitDocumentDetailsHeader.Date)
                    {
                        while select vendTrans
                            where vendTrans.AccountNum  == _tmpTransitDocumentDetailsHeader.Account
                        {
                            taxTrans    = TaxTrans::find(vendTrans.Voucher, vendTrans.TransDate);
                            source      = taxTrans.Source;

                            TmpTransitDocumentDetailsHeader_IN::insertVendJournalTransactions(vendTrans,
                                                                                              _tmpTransitDocumentDetailsHeader,
                                                                                              _tmpTransitDocumentDetailsLine,
                                                                                              source);
                        }
                    }
                    else
                    {
                        while select vendTrans
                            where vendTrans.AccountNum   == _tmpTransitDocumentDetailsHeader.Account &&
                                  vendTrans.TransDate    <= _tmpTransitDocumentDetailsHeader.Date
                        {
                            taxTrans    = TaxTrans::find(vendTrans.Voucher, vendTrans.TransDate);
                            source      = taxTrans.Source;

                            TmpTransitDocumentDetailsHeader_IN::insertVendJournalTransactions(vendTrans,
                                                                                              _tmpTransitDocumentDetailsHeader,
                                                                                              _tmpTransitDocumentDetailsLine,
                                                                                              source);
                        }
                    }

                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustFreeInvoiceTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record in to transit document details line table based on fields specified.
    /// </summary>
    /// <param name="_custTrans">
    /// Buffer oc custtrans table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    public static void insertCustFreeInvoiceTransactions(CustTrans                             _custTrans,
                                                         TmpTransitDocumentDetailsHeader_IN    _tmpTransitDocumentDetailsHeader,
                                                         TmpTransitDocumentDetailsLine_IN      _tmpTransitDocumentDetailsLine,
                                                         TaxModuleTypeId                       _source)
    {
        CustInvoiceTable                custInvoiceTable;
        CustInvoiceLine                 custInvoiceLine;
        AmountCur                       taxAmount;
        boolean                         isTax;
        TaxTrans                        taxTransLoc;
        TransTaxInformation             transTaxInformation;

        select custInvoiceTable
            where custInvoiceTable.InvoiceId    == _custTrans.Voucher;
        if (custInvoiceTable)
        {
            while select AmountCur, RecId, TableId from custInvoiceLine
                where custInvoiceLine.ParentRecId     == custInvoiceTable.RecId
            {
                taxAmount           = 0;
                isTax               = false;

                transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(custInvoiceLine);

                ttsbegin;
                _tmpTransitDocumentDetailsLine.AccountType       = _tmpTransitDocumentDetailsHeader.AccountType;
                _tmpTransitDocumentDetailsLine.Account           = _tmpTransitDocumentDetailsHeader.Account;
                _tmpTransitDocumentDetailsLine.Voucher           = _custTrans.Voucher;
                _tmpTransitDocumentDetailsLine.Date              = _custTrans.TransDate;
                _tmpTransitDocumentDetailsLine.Source            = _source;
                _tmpTransitDocumentDetailsLine.SalesTaxFormTypes = transTaxInformation.SalesTaxFormTypes;
                _tmpTransitDocumentDetailsLine.TransactionAmount = custInvoiceLine.AmountCur;

                while select TaxAutogenerated, SourceRegulateAmountCur, SourceTaxAmountCur from taxTransLoc
                    where taxTransLoc.SourceRecId   == custInvoiceLine.RecId
                       && taxTransLoc.SourceTableId == custInvoiceLine.TableId
                {
                    if (TaxTable::find(taxTransLoc.TaxCode).TaxType_IN == TaxType_IN::SalesTax)
                    {
                        if (!taxTransLoc.TaxAutogenerated)
                        {
                            taxAmount += taxTransLoc.SourceRegulateAmountCur;
                        }
                        else
                        {
                            taxAmount += taxTransLoc.SourceTaxAmountCur;
                        }
                        isTax = true;
                    }
                }

                if ((taxAmount > 0 && _tmpTransitDocumentDetailsLine.TransactionAmount < 0) ||
                    (taxAmount < 0 && _tmpTransitDocumentDetailsLine.TransactionAmount > 0))
                {
                    _tmpTransitDocumentDetailsLine.TransactionAmount = _tmpTransitDocumentDetailsLine.TransactionAmount * -1;
                }

                _tmpTransitDocumentDetailsLine.TaxAmount     = taxAmount;
                _tmpTransitDocumentDetailsLine.SourceTableId = custInvoiceLine.TableId;
                _tmpTransitDocumentDetailsLine.SourceRecId   = custInvoiceLine.RecId;
                if (isTax &&
                    ! TaxTrans_IN::existSeriesNumber(custInvoiceLine.TableId, custInvoiceLine.RecId, _custTrans.Voucher))
                {
                    _tmpTransitDocumentDetailsLine.insert();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustJournalTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record in to transit document details line table based on fields specified.
    /// </summary>
    /// <param name="_custTrans">
    /// Buffer oc custtrans table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    public static void insertCustJournalTransactions(CustTrans                             _custTrans,
                                                     TmpTransitDocumentDetailsHeader_IN    _tmpTransitDocumentDetailsHeader,
                                                     TmpTransitDocumentDetailsLine_IN      _tmpTransitDocumentDetailsLine,
                                                     TaxModuleTypeId                       _source)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        AmountCur                   taxAmount;
        boolean                     isTax;
        TaxTrans                    taxTransLoc;
        TransTaxInformation         transTaxInformation;

        select ledgerJournalTrans
            where ledgerJournalTrans.Voucher    == _custTrans.Voucher;

        if (ledgerJournalTrans)
        {
            taxAmount       = 0;
            isTax           = false;

            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans);

            ttsbegin;

            _tmpTransitDocumentDetailsLine.AccountType       = _tmpTransitDocumentDetailsHeader.AccountType;
            _tmpTransitDocumentDetailsLine.Account           = _tmpTransitDocumentDetailsHeader.Account;
            _tmpTransitDocumentDetailsLine.Voucher           = _custTrans.Voucher;
            _tmpTransitDocumentDetailsLine.Date              = _custTrans.TransDate;
            _tmpTransitDocumentDetailsLine.Source            = _source;
            _tmpTransitDocumentDetailsLine.SalesTaxFormTypes = transTaxInformation.SalesTaxFormTypes;
            _tmpTransitDocumentDetailsLine.TransactionAmount = ledgerJournalTrans.amount();

            while select TaxCode, TaxAutogenerated, SourceRegulateAmountCur, SourceTaxAmountCur from taxTransLoc
                where taxTransLoc.Voucher == ledgerJournalTrans.Voucher
            {
                if (TaxTable::find(taxTransLoc.TaxCode).TaxType_IN == TaxType_IN::SalesTax)
                {
                    if (!taxTransLoc.TaxAutogenerated)
                    {
                        taxAmount += taxTransLoc.SourceRegulateAmountCur;
                    }
                    else
                    {
                        taxAmount += taxTransLoc.SourceTaxAmountCur;
                    }
                    isTax = true;
                }
            }

            if ((taxAmount > 0 && _tmpTransitDocumentDetailsLine.TransactionAmount < 0) ||
                (taxAmount < 0 && _tmpTransitDocumentDetailsLine.TransactionAmount > 0))
            {
                _tmpTransitDocumentDetailsLine.TransactionAmount = _tmpTransitDocumentDetailsLine.TransactionAmount * -1;
            }

            _tmpTransitDocumentDetailsLine.TaxAmount     = taxAmount;
            _tmpTransitDocumentDetailsLine.SourceTableId = ledgerJournalTrans.TableId;
            _tmpTransitDocumentDetailsLine.SourceRecId   = ledgerJournalTrans.RecId;

            if (isTax &&
                ! TaxTrans_IN::existSeriesNumber(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, ledgerJournalTrans.Voucher))
            {
                _tmpTransitDocumentDetailsLine.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPurchTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record in to transit document details line table based on fields specified.
    /// </summary>
    /// <param name="_vendTrans">
    /// Buffer oc Vendtrans table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    public static void insertPurchTransactions(VendTrans                           _vendTrans,
                                               TmpTransitDocumentDetailsHeader_IN  _tmpTransitDocumentDetailsHeader,
                                               TmpTransitDocumentDetailsLine_IN    _tmpTransitDocumentDetailsLine,
                                               TaxModuleTypeId                     _source)
    {
        VendInvoiceJour                 vendInvoiceJour;
        PurchLine                       purchLine;
        AmountCur                       taxAmount;
        boolean                         isTax;
        TaxTrans                        taxTransLoc;
        TransTaxInformation             transTaxInformation;
        TransTaxInformationHelper		transTaxInformationHelper = TransTaxInformationHelper::newHelper();

        vendInvoiceJour = VendInvoiceJour::findFromVendTrans(_vendTrans.Invoice, _vendTrans.TransDate, _vendTrans.AccountNum);
        while select LineAmount, InventTransId, TableId, RecId from purchLine
            where purchLine.PurchId     == vendInvoiceJour.PurchId
        {
            transTaxInformation = transTaxInformationHelper.getTransTaxInformationByRecord(purchLine);

            taxAmount       = 0;
            isTax = false;
            ttsbegin;
            _tmpTransitDocumentDetailsLine.AccountType       = _tmpTransitDocumentDetailsHeader.AccountType;
            _tmpTransitDocumentDetailsLine.Account           = _tmpTransitDocumentDetailsHeader.Account;
            _tmpTransitDocumentDetailsLine.Voucher           = _vendTrans.Voucher;
            _tmpTransitDocumentDetailsLine.Date              = _vendTrans.TransDate;
            _tmpTransitDocumentDetailsLine.Source            = _source;
            _tmpTransitDocumentDetailsLine.SalesTaxFormTypes = transTaxInformation.SalesTaxFormTypes;
            _tmpTransitDocumentDetailsLine.TransactionAmount = purchLine.LineAmount;

            while select TaxCode, TaxAutogenerated, SourceRegulateAmountCur, SourceTaxAmountCur from taxTransLoc
                where taxTransLoc.Voucher          == _vendTrans.Voucher &&
                      taxTransLoc.InventTransId    == purchLine.InventTransId
            {
                if (TaxTable::find(taxTransLoc.TaxCode).TaxType_IN == TaxType_IN::SalesTax)
                {
                    if (!taxTransLoc.TaxAutogenerated)
                    {
                        taxAmount += taxTransLoc.SourceRegulateAmountCur;
                    }
                    else
                    {
                        taxAmount += taxTransLoc.SourceTaxAmountCur;
                    }
                    isTax = true;
                }
            }

            if ((taxAmount > 0 && _tmpTransitDocumentDetailsLine.TransactionAmount < 0) ||
                (taxAmount < 0 && _tmpTransitDocumentDetailsLine.TransactionAmount > 0))
            {
                _tmpTransitDocumentDetailsLine.TransactionAmount = _tmpTransitDocumentDetailsLine.TransactionAmount * -1;
            }

            _tmpTransitDocumentDetailsLine.TaxAmount         = taxAmount;
            _tmpTransitDocumentDetailsLine.SourceTableId     = purchLine.TableId;
            _tmpTransitDocumentDetailsLine.SourceRecId       = purchLine.RecId;
            if (isTax &&
                ! TaxTrans_IN::existSeriesNumber(purchLine.TableId, purchLine.RecId, _vendTrans.Voucher))
            {
                _tmpTransitDocumentDetailsLine.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record in to transit document details line table based on fields specified.
    /// </summary>
    /// <param name="_custTrans">
    /// Buffer oc Custtrans table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    public static void insertSalesTransactions(CustTrans                           _custTrans,
                                               TmpTransitDocumentDetailsHeader_IN  _tmpTransitDocumentDetailsHeader,
                                               TmpTransitDocumentDetailsLine_IN    _tmpTransitDocumentDetailsLine,
                                               TaxModuleTypeId                     _source)
    {
        CustInvoiceJour                 custInvoiceJour;
        SalesLine                       salesLine;
        AmountCur                       taxAmount;
        boolean                         isTax;
        TaxTrans                        taxTransLoc;
        TransTaxInformation             transTaxInformation;
        TransTaxInformationHelper		transTaxInformationHelper = TransTaxInformationHelper::newHelper();

        custInvoiceJour = CustInvoiceJour::findFromCustTrans(_custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum);
        while select LineAmount, InventTransId, TableId, RecId from salesLine
            where salesLine.SalesId == custInvoiceJour.SalesId
        {
            transTaxInformation = transTaxInformationHelper.getTransTaxInformationByRecord(salesLine);

            taxAmount   = 0;
            isTax = false;
            ttsbegin;
            _tmpTransitDocumentDetailsLine.AccountType       = _tmpTransitDocumentDetailsHeader.AccountType;
            _tmpTransitDocumentDetailsLine.Account           = _tmpTransitDocumentDetailsHeader.Account;
            _tmpTransitDocumentDetailsLine.Voucher           = _custTrans.Voucher;
            _tmpTransitDocumentDetailsLine.Date              = _custTrans.TransDate;
            _tmpTransitDocumentDetailsLine.Source            = _source;
            _tmpTransitDocumentDetailsLine.SalesTaxFormTypes = transTaxInformation.SalesTaxFormTypes;
            _tmpTransitDocumentDetailsLine.TransactionAmount = salesLine.LineAmount;

            while select TaxCode, TaxAutogenerated, SourceRegulateAmountCur, SourceTaxAmountCur from taxTransLoc
                where taxTransLoc.Voucher          == _custTrans.Voucher &&
                      taxTransLoc.InventTransId    == salesLine.InventTransId
            {
                if (TaxTable::find(taxTransLoc.TaxCode).TaxType_IN == TaxType_IN::SalesTax)
                {
                    if (!taxTransLoc.TaxAutogenerated)
                    {
                        taxAmount += taxTransLoc.SourceRegulateAmountCur;
                    }
                    else
                    {
                        taxAmount += taxTransLoc.SourceTaxAmountCur;
                    }
                    isTax = true;
                }
            }

            if ((taxAmount > 0 && _tmpTransitDocumentDetailsLine.TransactionAmount < 0) ||
                (taxAmount < 0 && _tmpTransitDocumentDetailsLine.TransactionAmount > 0))
            {
                _tmpTransitDocumentDetailsLine.TransactionAmount = _tmpTransitDocumentDetailsLine.TransactionAmount * -1;
            }

            _tmpTransitDocumentDetailsLine.TaxAmount        = taxAmount;
            _tmpTransitDocumentDetailsLine.SourceTableId    = salesLine.TableId;
            _tmpTransitDocumentDetailsLine.SourceRecId      = salesLine.RecId;
            if (isTax &&
                ! TaxTrans_IN::existSeriesNumber(salesLine.TableId, salesLine.RecId, _custTrans.Voucher))
            {
                _tmpTransitDocumentDetailsLine.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendJournalTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert record in to transit document details line table based on fields specified.
    /// </summary>
    /// <param name="_vendTrans">
    /// Buffer of VendTrans table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    /// <param name="_source">
    /// Tax module type.
    /// </param>
    public static void insertVendJournalTransactions(VendTrans                             _vendTrans,
                                                     TmpTransitDocumentDetailsHeader_IN    _tmpTransitDocumentDetailsHeader,
                                                     TmpTransitDocumentDetailsLine_IN      _tmpTransitDocumentDetailsLine,
                                                     TaxModuleTypeId                       _source)
    {
        LedgerJournalTrans              ledgerJournalTrans;
        AmountCur                       taxAmount;
        boolean                         isTax;
        TaxTrans                        taxTransLoc;
        TransTaxInformation             transTaxInformation;

        select ledgerJournalTrans
            where ledgerJournalTrans.Voucher    == _vendTrans.Voucher;
        if (ledgerJournalTrans)
        {
            taxAmount       = 0;
            isTax = false;

            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans);

            ttsbegin;
            _tmpTransitDocumentDetailsLine.AccountType       = _tmpTransitDocumentDetailsHeader.AccountType;
            _tmpTransitDocumentDetailsLine.Account           = _tmpTransitDocumentDetailsHeader.Account;
            _tmpTransitDocumentDetailsLine.Voucher           = _vendTrans.Voucher;
            _tmpTransitDocumentDetailsLine.Date              = _vendTrans.TransDate;
            _tmpTransitDocumentDetailsLine.Source            = _source;
            _tmpTransitDocumentDetailsLine.SalesTaxFormTypes = transTaxInformation.SalesTaxFormTypes;
            _tmpTransitDocumentDetailsLine.TransactionAmount = ledgerJournalTrans.amount();

            while select TaxCode, TaxAutogenerated, SourceRegulateAmountCur, SourceTaxAmountCur from taxTransLoc
                where taxTransLoc.Voucher          == ledgerJournalTrans.Voucher
            {
                if (TaxTable::find(taxTransLoc.TaxCode).TaxType_IN == TaxType_IN::SalesTax)
                {
                    if (!taxTransLoc.TaxAutogenerated)
                    {
                        taxAmount += taxTransLoc.SourceRegulateAmountCur;
                    }
                    else
                    {
                        taxAmount += taxTransLoc.SourceTaxAmountCur;
                    }
                    isTax = true;
                }
            }

            if ((taxAmount > 0 && _tmpTransitDocumentDetailsLine.TransactionAmount < 0) ||
                (taxAmount < 0 && _tmpTransitDocumentDetailsLine.TransactionAmount > 0))
            {
                _tmpTransitDocumentDetailsLine.TransactionAmount = _tmpTransitDocumentDetailsLine.TransactionAmount * -1;
            }

            _tmpTransitDocumentDetailsLine.TaxAmount         = taxAmount;
            _tmpTransitDocumentDetailsLine.SourceTableId     = ledgerJournalTrans.TableId;
            _tmpTransitDocumentDetailsLine.SourceRecId       = ledgerJournalTrans.RecId;
            if (isTax &&
                ! TaxTrans_IN::existSeriesNumber(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, ledgerJournalTrans.Voucher))
            {
                _tmpTransitDocumentDetailsLine.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendSeriesNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates record of tax transaction table.
    /// </summary>
    /// <param name="_tmpTransitDocumentDetailsHeader">
    /// Buffer of TmpTransitDocumentDetailsHeader_IN table.
    /// </param>
    /// <param name="_tmpTransitDocumentDetailsLine">
    /// Buffer of TmpTransitDocumentDetailsLine_IN table.
    /// </param>
    public static void updateCustVendSeriesNumber(TmpTransitDocumentDetailsHeader_IN   _tmpTransitDocumentDetailsHeader,
                                                  TmpTransitDocumentDetailsLine_IN     _tmpTransitDocumentDetailsLine)
    {
        TaxTrans_IN     taxTransLoc;

        if (_tmpTransitDocumentDetailsHeader.CompanyFormNumber   ||
            _tmpTransitDocumentDetailsHeader.CompanyFormSeries   ||
            _tmpTransitDocumentDetailsHeader.CustVendFormNumber  ||
            _tmpTransitDocumentDetailsHeader.CustVendFormSeries)
        {
            while select _tmpTransitDocumentDetailsLine
                where _tmpTransitDocumentDetailsLine.Mark == NoYes::Yes
            {
                taxTransLoc.clear();
                ttsbegin;
                while select forupdate taxTransLoc
                    where taxTransLoc.SourceTableId     == _tmpTransitDocumentDetailsLine.SourceTableId
                       && taxTransLoc.SourceRecId       == _tmpTransitDocumentDetailsLine.SourceRecId
                       && taxTransLoc.Voucher           == _tmpTransitDocumentDetailsLine.Voucher
                {
                    taxTransLoc.CompanyFormSeries      = _tmpTransitDocumentDetailsHeader.CompanyFormSeries;
                    taxTransLoc.CompanyFormNumber      = _tmpTransitDocumentDetailsHeader.CompanyFormNumber;
                    taxTransLoc.CustVendFormSeries     = _tmpTransitDocumentDetailsHeader.CustVendFormSeries;
                    taxTransLoc.CustVendFormNumber     = _tmpTransitDocumentDetailsHeader.CustVendFormNumber;
                    taxTransLoc.update();
                }
                ttscommit;
            }

            delete_from _tmpTransitDocumentDetailsLine
                where _tmpTransitDocumentDetailsLine.Mark    == NoYes::Yes;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@GLS5867</Label>
	<TitleField1>AccountType</TitleField1>
	<TitleField2>Source</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>AccountTypeIdx</ReplacementKey>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyTransitDocument</Name>
			<Label>@GLS5869</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyFormSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyFormNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustVendTransitDocument</Name>
			<Label>@GLS5870</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendFormSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendFormNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Select</Name>
			<Label>@SYS2245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Account</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FormAttachments</Name>
			<Label>@SYP4880645</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesTaxFormSeries</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxFormNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxFormDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxFormValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SelectFormReference</Name>
			<Label>@SYS2245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Role</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Account</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDateFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDateTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxFormType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTaxFormDirection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Account</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@SYS24500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>VendCustType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyFormNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@SYS3915</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyFormSeries</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@GLS5868</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendFormNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@SYS3915</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendFormSeries</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DocumentNum</ExtendedDataType>
			<Label>@GLS5868</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>Source_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Role</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>FormTrackingRole_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesTaxFormDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesTaxFormDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SalesTaxFormDirection</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>FormTrackingBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesTaxFormNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesTaxFormNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesTaxFormSeries</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesTaxFormSeries_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SalesTaxFormType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SalesTaxFormTypesRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDateFrom</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDateTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseFrom</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationIdFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarehouseTo</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventLocationIdTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesTaxFormValue</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransitDocumentFormValue_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>VendCustType_IN::Customer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Account</Name>
					<Field>Account</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendAccounts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_VendAccounts</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Account</Name>
					<Field>Account</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountType</Name>
					<Field>AccountType</Field>
					<ValueStr>VendCustType_IN::Vendor</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Account</Name>
					<Field>Account</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocationWarehouseFrom</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocationWarehouseFrom</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseFrom</Name>
					<SourceEDT>InventLocationIdFrom</SourceEDT>
					<Field>WarehouseFrom</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType</Name>
					<SourceEDT>InventLocationIdFrom</SourceEDT>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocationWarehouseTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocationWarehouseTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WarehouseTo</Name>
					<SourceEDT>InventLocationIdTo</SourceEDT>
					<Field>WarehouseTo</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType</Name>
					<SourceEDT>InventLocationIdTo</SourceEDT>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTaxFormTypes_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTaxFormTypes_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTaxFormType</Name>
					<Field>SalesTaxFormType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>