<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchParmLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchParmLine extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur amountExclTax(AmountCur _amountCur, Qty _qty, TransDate _transDate, Tax _tax = null, boolean _skipRounding = false, boolean _useRoundedTaxOrigin = true)
    {
        return this.salesPurchLineInterface().amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExcludingTax</Name>
				<Source><![CDATA[
    public AmountCur amountExcludingTax(AmountCur _amountCur, Qty  _qty, TransDate _transDate, Tax _tax = null, VendDocumentTableMap _parmTable = null, boolean _keepEndDisc = false, boolean _skipRounding = false)
    {
        return this.calculateAmountExcludingTax(
            _amountCur,
            _qty,
            _transDate,
            _tax,
            _parmTable,
            _keepEndDisc,
            _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountExcludingTax</Name>
				<Source><![CDATA[
    public AmountCur calculateAmountExcludingTax(
        AmountCur               _amountCur, 
        Qty                     _qty, 
        TransDate               _transDate, 
        Tax                     _tax = null, 
        VendDocumentTableMap    _parmTable = null, 
        boolean                 _keepEndDisc = false, 
        boolean                 _skipRounding = false, 
        boolean                 _useRoundedTaxOrigin = true)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        TaxBaseCur   taxOrigin;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.purchLine().inventDim().inventProfile_RU().taxUpdateIncoming() == TaxUpdateMode_RU::NoCalc)
            {
                return _amountCur;
            }
        }
        // </GEERU>

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && (!this.purchLine().taxGroup || !this.purchLine().TaxItemGroup))
        {
            taxOrigin = this.amountExcludingTaxGTE();
        }
        else
        {
            // </GTE>
            if (this.purchParmTable().Ordering != DocumentStatus::ReceiptsList)
            {
                taxOrigin = this.amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
                
                // Based on current design, tax will be calculated based on purchParmLine.Try to get tax from purchParmLine first.
                // If it does not exist, get from purchLine.
                if (!taxOrigin)
                {
                    taxOrigin = this.purchLine().amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
                }
            }
            else
            {
                taxOrigin = this.purchLine().amountExclTax(_amountCur, _qty, _transDate, _tax, _skipRounding, _useRoundedTaxOrigin);
            }
            // </GTE>
        }
        // <GTE>

        return taxOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExcludingTaxGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Amount excluding tax for GTE.
    /// </summary>
    /// <returns>
    /// The amount excluding tax.
    /// </returns>
    public amountCur amountExcludingTaxGTE()
    {
        TaxBaseCur          taxOrigin;
        ITaxDocument        taxDocumentObject;
        ITaxDocumentLine    taxDocumentLineObject;
        
        taxOrigin = this.LineAmount;
        taxDocumentObject = TaxBusinessService::calculateTax(
            TaxableDocumentObject::construct(
                TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.purchParmTable())));

        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(this.TableId, this.RecId);
            if (taxDocumentLineObject && taxDocumentLineObject.priceInclTax())
            {
                taxOrigin = taxOrigin - taxDocumentLineObject.getInclTax().amountTransactionCurrency();
            }
        }
        return taxOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the MST amount for a given amount.
    /// </summary>
    /// <param name="amountCur">
    /// The amount to convert.
    /// </param>
    /// <param name="exchRateDate">
    /// The date used to calculate the exchange rate.
    /// </param>
    /// <param name="exchRate">
    /// The exchange rate to use, if known.
    /// </param>
    /// <param name="exchrateSecondary">
    /// The secondary exchange rate to use, if known.
    /// </param>
    /// <param name="exchRatesTriangulation">
    /// The exchange rate triangulation to use, if known.
    /// </param>
    /// <returns>
    /// The amount in MST.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public AmountMST amountMST(AmountCur               amountCur,
                               TransDate               exchRateDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                               ExchRate                exchRate                = 0,
                               ExchrateSecondary       exchrateSecondary       = 0,
                               ExchRatesTriangulation  exchRatesTriangulation  = UnknownNoYes::Unknown)

    {
        return this.salesPurchLineInterface().amountMST(amountCur, exchRateDate, exchRate, exchrateSecondary, exchRatesTriangulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferPdsVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrives a buffer containing the vendor batch information attached to the current posting line.
    /// </summary>
    /// <returns>
    ///     An uncommited buffer of the <c>PdsVendBatchInfo</c> table.
    /// </returns>
    public PdsVendBatchInfo bufferPdsVendBatchInfo()
    {
        PdsVendBatchInfo bufferPdsVendBatchInfo;

        bufferPdsVendBatchInfo.CountryOfOrigin1 = this.PdsCountryOfOrigin1;
        bufferPdsVendBatchInfo.CountryOfOrigin2 = this.PdsCountryOfOrigin2;
        bufferPdsVendBatchInfo.SourceRef        = this.PurchLineRecId;
        bufferPdsVendBatchInfo.UseVendBatchDate = this.PdsUseVendBatchDate;
        bufferPdsVendBatchInfo.UseVendBatchExp  = this.PdsUseVendBatchExp;
        bufferPdsVendBatchInfo.VendBatchDate    = this.PdsVendBatchDate;
        bufferPdsVendBatchInfo.VendExpiryDate   = this.PdsVendExpiryDate;
        bufferPdsVendBatchInfo.VendBatchId      = this.PdsVendBatchId;

        return bufferPdsVendBatchInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmount(Qty _qty = this.ReceiveNow)
    {
        return this.salesPurchLineInterface().calcLineAmount(_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineAmount</Name>
				<Source><![CDATA[
    AmountCur calculateLineAmount(Qty qty = this.ReceiveNow, PurchLine _purchLine = null)
    {
        return this.VendDocumentLineMap::calculatePrice2LineAmount(qty, false, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineAmountForced</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcLineAmountForced(Qty _qty = this.ReceiveNow, PriceDiscPolicyCheckPolicy _checkPolicy = null)
    {
        return this.salesPurchLineInterface().calcLineAmountForced(_qty, _checkPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        return this.salesPurchLineInterface().calcPrice2LineAmount(_qty, _forceLineAmountCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice2LineAmount</Name>
				<Source><![CDATA[
    public AmountCur calculatePrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation, PurchLine _purchLine = null)
    {
        return this.VendDocumentLineMap::calculatePrice2LineAmount(_qty, _forceLineAmountCalculation, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPromptFixedLineAmount</Name>
				<Source><![CDATA[
    boolean checkAndPromptFixedLineAmount()
    {
        return this.PriceDiscLine::checkAndPromptFixedLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default value to a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table record, used to copy values from; optional.
    /// </param>
    public void defaultField(FieldId _fieldId, Common _purchLine = null)
    {
        VendDocumentLineType vendDocumentLineType = this.type(_purchLine);

        if (vendDocumentLineType)
        {
            vendDocumentLineType.defaultField(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default values to all fields.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> table record, used to copy values from; optional.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// An <c>PurchParmUpdate</c> table record, used to copy values from; optional.
    /// </param>
    /// <param name="_receiveNow">
    /// A purchasing quantity; optional.
    /// </param>
    /// <param name="_inventNow">
    /// An inventory quantity; optional.
    /// </param>
    /// <param name="_cwReceiveNow">
    /// A catch weight quantity; optional.
    /// </param>
    /// <param name="_specQty">
    /// A quantity defaulting method; optional.
    /// </param>
    public void defaultRow(
        PurchLine		_purchLine			= null,
        PurchParmUpdate _purchParmUpdate	= null,
        PurchQty		_receiveNow			= naReal(),
        InventQty		_inventNow			= naReal(),
        PdsCWInventQty	_cwReceiveNow		= naReal(),
        Set				_tableToLineFields = null,
        PurchUpdate		_specQty			= _purchParmUpdate.SpecQty
        )
    {
        VendDocumentLineType vendDocumentLineType = this.type(_purchLine, _purchParmUpdate);

        if (vendDocumentLineType)
        {
            vendDocumentLineType.parmSpecQty(_specQty);

            vendDocumentLineType.defaultRow(_receiveNow, _inventNow, _cwReceiveNow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return this.VendDocumentLineMap::deliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RecId</c> value of the <c>LogisticsLocation</c> record that is associated with the
    /// selected <c>DeliveryPostalAddress</c> table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> value of the <c>LogisticsLocation</c> record that is associated with the selected
    /// <c>DeliveryPostalAddress</c> table.
    /// </returns>
    public LogisticsLocationRecId deliveryLocation()
    {
        return LogisticsPostalAddress::getLocation(this.DeliveryPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    DiscAmount  discAmount()
    {
        return this.VendDocumentLineMap::discAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    DiscPct   discPercent()
    {
        return this.VendDocumentLineMap::discPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the reason code by using the <c>ReasonCodeMap</c> map.
    /// </summary>
    /// <param name="_set">
    /// true if the reason code is set; otherwise, false.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        return this.VendDocumentLineMap::editReasonCode(_set, _reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the reason comment using the <c>ReasonCodeMap</c> map.
    /// </summary>
    /// <param name="_set">
    /// true if the reason comment is set; otherwise, false.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when the <paramref name="_set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        return this.VendDocumentLineMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvancedPricingInvoiceCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    /// <returns>
    /// The ID of the attribute-based calculation used.
    /// </returns>
    public display PDSCalculationId getAdvancedPricingInvoiceCalculationId()
    {
        return this.VendDocumentLineMap::getAdvancedPricingInvoiceCalculationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>ItemType</c> value for the item.
    /// </summary>
    /// <returns>
    /// The <c>ItemType</c> value for the item.
    /// </returns>
    display ItemType getItemType()
    {
        return this.VendDocumentLineMap::getItemType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscChargesAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the amount based on the table id and recId passed.
    /// </summary>
    /// <param name="_transTableId">
    /// The unique table id to find.
    /// </param>
    /// <param name="_transRecId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_documentStatus">
    /// The invoice status of current record.
    /// </param>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public Amount getMiscChargesAmount_IN(RefTableId _transTableId,
                                          RefRecId _transRecId,
                                          DocumentStatus _documentStatus = this.Ordering)
    {
        Amount              notionalAmount;
        Amount              markupTotalValue;
        MarkupTrans         markupTransLoc;
        Amount              notionalCharges;
        Amount              miscChargeAmount;
        CustomsAmount_IN    landingCharges;
        RealBase            factor;
        PurchOrderedQty     purchQty;

        if (!(TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
        && (_documentStatus == DocumentStatus::ReceiptsList || _documentStatus == DocumentStatus::PackingSlip)))
        {
            while select Value, NotionalPct_IN, CurrencyCode, MarkupCategory, MarkUpAllocateAfter_IN, DocumentStatus, Keep
            from markupTransLoc
            where markupTransLoc.TransTableId == _transTableId
                && markupTransLoc.TransRecId  == _transRecId
                && ((markupTransLoc.CustomsAssessableValue_IN == NoYes::Yes || markupTransLoc.NotionalCharges_IN == NoYes::Yes && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                || (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled()))
            {
                // Filter misc. charge value when post the second Bill of entry.
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && !markupTransLoc.Keep && _documentStatus == DocumentStatus::BillOfEntry_IN
                && _transTableId == tableNum(PurchLine) && CustomsVendBOETrans_IN::findPurchLineRecId(_transRecId).RecId)
                {
                    continue;
                }

                if (markupTransLoc.MarkupCategory == MarkupCategory::Percent)
                {
                    if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::NetAmount)
                    {
                        markupTransLoc.Value = this.LineAmount * markupTransLoc.Value / 100;
                    }
                    if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Qty)
                    {
                        markupTransLoc.Value = this.ReceiveNow * markupTransLoc.Value / 100;
                    }
                    if (markupTransLoc.MarkUpAllocateAfter_IN == MarkupAllocateAfter::Line)
                    {
                        markupTransLoc.Value = 1 * markupTransLoc.Value / 100;
                    }
                }

                if (markupTransLoc.MarkupCategory == MarkupCategory::Pcs)
                {
                    markupTransLoc.Value = this.ReceiveNow * markupTransLoc.Value;
                }

                if (_transTableId != tableNum(CustInvoiceTable))
                {
                    // calculate markup value for import order.
                    if (this.purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                    {
                        CustomsExchangeRate_IN  customsExchangeRate;
                        // The charges are converted based on the same exchange rate as per the bill of entry date.
                        if (this.purchParmUpdate().CustomsBillOfEntry_IN == NoYes::Yes)
                        {
                            customsExchangeRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                this.CurrencyCode,
                                Direction_IN::Import,
                                this.purchParmTable().TransDate);
                        }
                        else
                        {
                            customsExchangeRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                this.CurrencyCode,
                                Direction_IN::Import);
                        }

                        if (customsExchangeRate && markupTransLoc.CurrencyCode == Ledger::find(Ledger::current()).AccountingCurrency)
                        {
                            customsExchangeRate = customsExchangeRate / 100;

                            if (markupTransLoc.CurrencyCode
                                    && this.CurrencyCode
                                    && markupTransLoc.CurrencyCode != this.CurrencyCode
                                    && markupTransLoc.MarkupCategory != MarkupCategory::Percent)
                            {
                                AmountMST amountMSTLoc = CurrencyExchangeHelper::mstAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode);

                                markupTotalValue = (amountMSTLoc / customsExchangeRate);
                            }
                            else
                            {
                                markupTotalValue = markupTransLoc.Value;
                            }
                        }
                        else
                        {
                            markupTotalValue = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, this.CurrencyCode);
                        }
                    }
                    else
                    {
                        markupTotalValue    = CurrencyExchangeHelper::curAmount2CurAmount(markupTransLoc.Value, markupTransLoc.CurrencyCode, this.CurrencyCode);
                    }
                }
                else
                {
                    markupTotalValue    = markupTransLoc.Value;
                }
                notionalCharges     = markupTransLoc.NotionalPct_IN/100;

                notionalAmount      = this.LineAmount * notionalCharges;

                if (notionalAmount == 0)
                {
                    miscChargeAmount += markupTotalValue;
                }
                else if (markupTotalValue == 0)
                {
                    miscChargeAmount += notionalAmount;
                }
                else if (notionalAmount < markupTotalValue)
                {
                    miscChargeAmount += notionalAmount;
                }
                else
                {
                    miscChargeAmount += markupTotalValue;
                }

                if(!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    purchQty = PurchLine::findRecId(this.PurchLineRecId).PurchQty;
                    if (this.ReceiveNow != purchQty && purchQty != 0)
                    {
                        factor = this.ReceiveNow / purchQty;
                    }

                    if (markupTransLoc.MarkupCategory != MarkupCategory::Percent && factor)
                    {
                        miscChargeAmount = CurrencyExchangeHelper::amount(miscChargeAmount * factor, this.CurrencyCode);
                    }
                }
            }
        }

        if (this.purchTable().isCustomsImportOrder_IN())
        {
            landingCharges = (this.LineAmount + miscChargeAmount) * VendParameters::find().CustomsLandingChargesPct_IN / 100;
        }

        return miscChargeAmount + landingCharges + this.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnlyLineAmount</Name>
				<Source><![CDATA[
    boolean hasOnlyLineAmount()
    {
        return this.PriceDiscLine::hasOnlyLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean inclTax()
    {
        return this.salesPurchLineInterface().inclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this line is tax included.
    /// </summary>
    /// <param name="_purchTable">
    /// Corresponding purchase order header record; optional.
    /// </param>
    /// <param name="_purchParmTable">
    /// Corresponding document header record; optional.
    /// </param>
    /// <returns>
    /// True if the line is tax included; otherwise, false.
    /// </returns>
    public boolean includeTax(PurchTable _purchTable = null, Common _header = null)
    {
        NoYes inclTax;
        //<GIN>
        #ISOCountryRegionCodes
        //</GIN>

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() && (!this.purchLine().TaxGroup || !this.purchLine().TaxItemGroup))
        {
            SalesPurchJournalLine salesPurchJournalLine = SalesPurchJournalLine::findRecId(this.TableId, this.RecId);
            TaxModelTaxable taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(salesPurchJournalLine);
            if (taxModelTaxable)
            {
                return taxModelTaxable.isPriceInclTax();
            }
        }
        // </GTE>

        //<GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return FormulaDesigner_IN::isPriceInclTaxOnLineAmount(this.purchLine().TaxItemGroup);
        }
        //</GIN>

        PurchParmTable purchParmTable = _header as PurchParmTable;
        if (_purchTable)
        {
            inclTax = _purchTable.InclTax;
        }
        else if (purchParmTable)
        {
            inclTax = purchParmTable.purchTable().InclTax;
        }
        else
        {
            inclTax = this.purchParmTable().purchTable().InclTax;
        }

        return inclTax == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultAdvancedPricingCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the default value of attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    public void initDefaultAdvancedPricingCalculationId()
    {
        this.VendDocumentLineMap::initDefaultAdvancedPricingCalculationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current record from a given purchase line.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> table record to initialize from.
    /// </param>
    void initFromPurchLine(PurchLine _purchLine)
    {
        PdsVendBatchInfo    pdsVendBatchInfo = null;

        this.VendDocumentLineMap::initFromPurchLine(_purchLine);

        if (TaxParameters::checkTaxParameters_IN())
        {
            PurchParmLine_IN purchParmLine_IN = this.purchParmLine_IN();
            PurchLine_IN purchLine_IN = _purchLine.purchLine_IN();

            purchParmLine_IN.MaximumRetailPrice = purchLine_IN.MaximumRetailPrice;
            purchParmLine_IN.EximPorts = _purchLine.EximPorts_IN;
            this.packPurchParmLine_IN(purchParmLine_IN);
        }

        if (#PdsVendBatchEnabled)
        {
            if (this.pdsCanSetVendBatchInfo())
            {
                pdsVendBatchInfo = _purchLine.pdsVendBatchInfo();
            }

            this.pdsInitFromVendBatchInfo(pdsVendBatchInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        super();

        this.Closed = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(boolean _update = false)
    {
        return this.VendDocumentLineMap::inventDim(_update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the item is tracked in inventory.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::Yes</c> enumeration value if the object is tracked in inventory; otherwise, the
    /// <c>NoYes::No</c> enumeration value.
    /// </returns>
    display NoYes inventoried()
    {
        return this.VendDocumentLineMap::inventoried();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyCorrection</Name>
				<Source><![CDATA[
    display InventQty inventQtyCorrection()
    {
        return this.PreviousInventNow - this.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(ItemId _itemId = this.ItemId, boolean update = false)
    {
        return this.VendDocumentLineMap::inventTable(_itemId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvance</Name>
				<Source><![CDATA[
    public boolean isAdvance()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvanceApplication</Name>
				<Source><![CDATA[
    public boolean isAdvanceApplication()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean isCategoryBased()
    {
        return this.salesPurchLineInterface().isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a line is associated with a purchase order.
    /// </summary>
    /// <returns>
    /// true if the line is not associated with a purchase order; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is only necessary for shared processing with invoices, such as taxes and totals.
    /// </remarks>
    public boolean isNonPO()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display PurchLineShowItemName itemName()
    {
        return this.VendDocumentLineMap::itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExclTax</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public AmountCur lineAmountExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, boolean _skipRounding = false)
    {
        return this.salesPurchLineInterface().lineAmountExclTax(_transDate, _tax, _skipRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountExcludingTax</Name>
				<Source><![CDATA[
    public AmountCur lineAmountExcludingTax(TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null, VendDocumentTableMap _parmTable = null, boolean _keepEndDisc = false)
    {
        return this.VendDocumentLineMap::lineAmountExcludingTax(transDate, _tax, _parmTable, _keepEndDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountInclTax_RU</Name>
				<Source><![CDATA[
    public AmountCur lineAmountInclTax_RU(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.VendDocumentLineMap::lineAmountInclTax_RU(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountModified</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void lineAmountModified()
    {
        this.salesPurchLineInterface().lineAmountModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscExclTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the amount of the line discount excluding tax.
    /// </summary>
    /// <param name="_transDate">
    ///     The date of the transaction.
    /// </param>
    /// <param name="_tax">
    ///     The parameters for the tax calculation.
    /// </param>
    /// <returns>
    ///     The discount amount.
    /// </returns>
    public DiscAmount lineDiscExclTax(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        return this.VendDocumentLineMap::lineDiscExclTax(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if associated <see cref="T:MarkupTrans" /> records may be added, changed, or deleted.
    /// </summary>
    /// <returns>
    /// true if modifications are allowed; otherwise, false.
    /// </returns>
    public boolean markupAllowed()
    {
        PurchTable purchTable = this.purchTable();
        return !purchTable.isInterCompanyOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPurchUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the purchase unit of a specified record in the <c>PurchParmLine</c> table.
    /// </summary>
    /// <returns>
    /// The purchase unit of a specified record in the <c>PurchParmLine</c> table.
    /// </returns>
    public display PurchUnit mcrDisplayPurchUnit()
    {
        PurchLine purchLine;
        select firstonly PurchUnit from purchLine
            where purchLine.RecId == this.PurchLineRecId;
        return purchLine.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedClosed</Name>
				<Source><![CDATA[
    void  modifiedClosed()
    {
        this.VendDocumentLineMap::modifiedClosed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void  modifiedField(FieldId _fieldId)
    {
        // <GIN>
        PurchParmLine_IN            purchParmLineIN;
        CustomsVendBOETrans_IN      customsVendBOETransIN;
        PurchParmTable              purchParmTable;
        // </GIN>

        super(_fieldId);

        purchParmTable = this.purchParmTable();

        switch (_fieldId)
        {
            case fieldNum(PurchParmLine, ReceiveNow):
                this.pdsCWReceiveNowConversion(false);

                // <GIN>
                if (TaxParameters::checkParameterForPosting_IN(TaxType_IN::Customs) &&
                    PurchTable::find(this.OrigPurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                {
                    this.VendDocumentLineMap::modifiedReceiveNow_IN();
                    if (this.Ordering == DocumentStatus::BillOfEntry_IN)
                    {
                        this.updateAssessableValue_IN();
                    }
                    else if (this.Ordering == DocumentStatus::PackingSlip)
                    {
                        // Update AV and AV in accounting currenty proportionally according to that on BOE transaction
                        purchParmLineIN = this.purchParmLine_IN();
                        if (purchParmLineIN.SourceTableId == TableNum(CustomsVendBOETrans_IN) && purchParmLineIN.SourceRecId != 0)
                        {
                            customsVendBOETransIN = CustomsVendBOETrans_IN::find(purchParmLineIN.SourceRecId);
                            if (customsVendBOETransIN)
                            {
                                purchParmLineIN.AssessableValueTransactionCurrency = CurrencyExchangeHelper::amount(customsVendBOETransIN.AssessableValue * this.ReceiveNow / customsVendBOETransIN.BillOfEntryQty, this.currencyCode);
                                purchParmLineIN.AssessableValueAccountingCurrency  = CurrencyExchangeHelper::amount(customsVendBOETransIN.AssessableValueAccountingCurrency * this.ReceiveNow / customsVendBOETransIN.BillOfEntryQty, this.currencyCode);
                                this.packPurchParmLine_IN(purchParmLineIN);
                            }
                        }
                        info("@GLS6626");
                    }
                }
                else
                {
                    // </GIN>
                    this.modifiedReceiveNow();
                    // <GIN>
                }
                // </GIN>
                break;

            case fieldNum(PurchParmLine, PdsCWReceiveNow):
                this.pdsCWReceiveNowConversion(true);
                this.modifiedReceiveNow();
                this.pdsCWModifiedReceiveNow();
                break;

            case fieldNum(PurchParmLine, PdsCWRemainAfterInvent):
                this.pdsCWRemainAfterInventConversion(true);
                this.setRemainAfterInvent();
                break;

            case fieldNum(PurchParmLine, InventNow):
                this.ChangedManually = NoYes::Yes;
                break;

            case fieldNum(PurchParmLine, RemainAfter):
                this.setRemainAfterInvent();
                this.pdsCWRemainAfterInventConversion(false);
                break;

            case fieldNum(PurchParmLine, PriceUnit):
                this.LineAmount = this.calcLineAmount();
                this.updateAssessableValue_IN();
                break;

            case fieldNum(PurchParmLine, LinePercent):
            case fieldNum(PurchParmLine, PurchMarkup):
            case fieldNum(PurchParmLine, MultiLnDisc):
            case fieldNum(PurchParmLine, LineDisc):
            case fieldNum(PurchParmLine, PurchPrice):
            case fieldNum(PurchParmLine, MultiLnPercent):
                this.LineAmount = this.calcLineAmountForced();
                this.updateAssessableValue_IN();
                break;

            case fieldNum(PurchParmLine, LineAmount):
                this.lineAmountModified();
                this.updateAssessableValue_IN();
                break;

            case fieldNum(PurchParmLine, Closed):
                this.modifiedClosed();
                break;

            default: break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    private void updateAssessableValue_IN()
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            PurchParmLine_IN purchParmLineIN = this.purchParmLine_IN();
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                if (this.Ordering == DocumentStatus::BillOfEntry_IN && TaxIntegrationUtils::isChargeOnBOEEnabled())
                {
                    purchParmLineIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN(this.TableId, this.RecId, this.purchParmTable().Ordering);
                }
                else
                {
                    purchParmLineIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN(tableNum(PurchLine), this.PurchLineRecId, this.purchParmTable().Ordering);
                }
            }
            else
            {
                purchParmLineIN.AssessableValueTransactionCurrency = this.getMiscChargesAmount_IN(this.TableId, this.RecId);
            }
            purchParmLineIN.calcAssessableValueAccountingCurrency();
            info("@GLS6626");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedReceiveNow</Name>
				<Source><![CDATA[
    public void  modifiedReceiveNow(boolean _setCWQuantities = false)
    {
        this.VendDocumentLineMap::modifiedReceiveNow(_setCWQuantities);

        this.updateAssessableValue_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>Name</c> field from the order line.
    /// </summary>
    /// <returns>
    /// The <c>Name</c> field from the order line.
    /// </returns>
    public display ItemFreeTxt name()
    {
        return this.VendDocumentLineMap::name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCanSetVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the vendor batch info fields can be set on the current record.
    /// </summary>
    /// <returns>
    ///    true if the fields can be set; otherwise, false.
    /// </returns>
    public boolean pdsCanSetVendBatchInfo()
    {
        return !PdsVendBatchInfo::purchaseRegistration(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWModifiedReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method recalculates the CW quantities for the current record.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// public void pdsCWModifiedReceiveNow()
    /// </syntax>
    /// </remarks>
    public void  pdsCWModifiedReceiveNow()
    {
        this.pdsCWSetQty(
            this.purchParmTable().Ordering,
            this.purchParmUpdate().CreditRemaining);

        if (this.Closed)
        {
            this.PdsCWRemainAfterInvent = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a correction quantity in catch weight units.
    /// </summary>
    /// <returns>
    /// A correction quantity in catch weight units.
    /// </returns>
    public display PdsCWInventQty pdsCWQtyCorrection()
    {
        return this.PdsCWPreviousReceiveNow - this.PdsCWReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReceiveNowConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method converts PdsCWReceiveNow qty from InventNow qty or
    /// InventNow qty from PdsCWReceiveNow, depending on the value of the
    /// boolean )fromCW parameter.
    /// </summary>
    /// <param name="_fromCW">If true covnerts PdsCWReceiveNow into
    /// Inventory qty ReceiveNow.  If false converts InventNow qty
    /// into PdsCWReceiveNow.</param>
    /// <remarks>
    /// <syntax>
    /// private void pdsCWReceiveNowConversion(Enum _fromCW)
    /// </syntax>
    /// </remarks>
    private void pdsCWReceiveNowConversion(boolean _fromCW = false)
    {
        PurchLine purchLine;

        purchLine = this.purchLine();

        if (PdsGlobal::pdsIsCWItem(purchLine.ItemId))
        {
            if (_fromCW)
            {
                this.ReceiveNow = PdsCatchWeight::inventQty(
                                                purchLine.ItemId,
                                                this.PdsCWReceiveNow,
                                                purchLine.PurchUnit);
            }
            else
            {
                if (!this.PdsCWReceiveNow)
                {
                    this.PdsCWReceiveNow = PdsCatchWeight::cwQty(
                                                purchLine.ItemId,
                                                this.InventNow);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainAfterInventConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method converts PdsCWRemainAfterInvent qty from InventNow qty or
    /// RemainAfter qty from PdsCWRemainAfterInvent, depending on the value of the
    /// boolean )fromCW parameter.
    /// </summary>
    /// <param name="_fromCW">If true covnerts PdsCWRemainAfterInvent into
    /// Inventory qty RemainAfter.  If false converts RemainAfter qty
    /// into PdsCWRemainAfterInvent.</param>
    /// <remarks>
    /// <syntax>
    /// private void pdsCWRemainAfterInventConversion(Enum _fromCW)
    /// </syntax>
    /// </remarks>
    private void pdsCWRemainAfterInventConversion(boolean _fromCW = false)
    {
        PurchLine purchLine;

        purchLine = this.purchLine();

        if (PdsGlobal::pdsIsCWItem(purchLine.ItemId))
        {
            if (_fromCW)
            {
                this.RemainAfter = PdsCatchWeight::inventQty(
                                                purchLine.ItemId,
                                                this.PdsCWRemainAfterInvent,
                                                purchLine.PurchUnit);
            }
            else
            {
                if (!this.PdsCWRemainAfterInvent)
                {
                    this.PdsCWRemainAfterInvent = PdsCatchWeight::cwQty(
                                                        purchLine.ItemId,
                                                        this.RemainAfterInvent);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegates the setting of the catch weight quantity to the <c>VendDocumentLineMap</c> map.
    /// </summary>
    /// <param name="_documentStatus">
    /// The status of the vendor document line.
    /// </param>
    /// <param name="_creditRemaining">
    /// Boolean variable to determine whether the remaining quantity should be credited.
    /// </param>
    public void pdsCWSetQty(DocumentStatus _documentStatus, boolean _creditRemaining)
    {
        this.VendDocumentLineMap::pdsCWSetQty(_documentStatus, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition code associated with the <c>PurchParmLine</c> record.
    /// </summary>
    /// <returns>
    /// The disposition code associated with the <c>PurchParmLine</c> record.
    /// </returns>
    public display PdsBatchDispositionCode pdsDispositionCode()
    {
        InventDim               inventDim;
        PdsBatchDispositionCode dispositionCode = '';

        if (hasFieldAccess(tableNum(InventBatch),
                    fieldNum(InventBatch,PdsDispositionCode),
                    AccessType::View))
        {
            inventDim = this.inventDim();
            if (inventDim.InventBatchId)
            {
                dispositionCode = InventBatch::find(
                                    inventDim.InventBatchId,
                                    this.ItemId).PdsDispositionCode;
            }
        }

        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch disposition status associated with the <c>PurchParmLine</c> record.
    /// </summary>
    /// <returns>
    /// The disposition status associated with the <c>PurchParmLine</c> record.
    /// </returns>
    public display PdsStatus pdsDispositionStatus()
    {
        InventDim                   inventDim;
        PdsBatchDispositionStatus   status = PdsStatus::NotApplicable;

        inventDim = this.inventDim();

        if (inventDim.InventBatchId)
        {
            status = InventBatch::find(
                        inventDim.InventBatchId,
                        this.ItemId).pdsDispositionStatus();
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsInitFromVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a <c>PurchParmLine</c> record with values based on <c>PdsVendBatchInfo</c> record.
    /// </summary>
    /// <param name="_batchInfo">
    /// A record of the table <c>PdsVendBatchInfo</c>.
    /// </param>
    public void pdsInitFromVendBatchInfo(PdsVendBatchInfo _batchInfo)
    {
        this.PdsVendBatchDate           = _batchInfo.VendBatchDate;
        this.PdsUseVendBatchDate        = _batchInfo.UseVendBatchDate;
        this.PdsVendExpiryDate          = _batchInfo.VendExpiryDate;
        this.PdsUseVendBatchExp         = _batchInfo.UseVendBatchExp;
        this.PdsCountryOfOrigin1        = _batchInfo.CountryOfOrigin1;
        this.PdsCountryOfOrigin2        = _batchInfo.CountryOfOrigin2;
        this.PdsVendBatchId             = _batchInfo.VendBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetPdsVendBatchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the vendor batch information based on the related <c>PurchParmLine</c> record.
    /// </summary>
    /// <returns>
    ///    true if the vendor batch info record was created or updated; otherwise, false.
    /// </returns>
    public boolean pdsSetPdsVendBatchInfo()
    {
        PdsVendBatchInfo    vendBatchInfo;
        boolean             result = this.pdsCanSetVendBatchInfo();

        if (result)
        {
            vendBatchInfo = PdsVendBatchInfo::findBySourceRecId(PdsVendBatchInfoSourceRefType::PurchaseOrderLine, this.purchLine().RecId, true);

            try
            {
                ttsbegin;
                vendBatchInfo.initFromParmLine(this);
                if (!vendBatchInfo.RecId)
                {
                    vendBatchInfo.initFromPurchLine(this.purchLine());
                    vendBatchInfo.insert();
                }
                else
                {
                    vendBatchInfo.update();
                }
                ttscommit;
            }
            catch (Exception::Error)
            {
                throw error("@PDS1996");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateUseVendBatchDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update PdsUseVendBatchDate field based on the value if the PdsVendBatchDate field and user input
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// private void pdsUpdateUseVendBatchDate()
    /// </syntax>
    /// </remarks>
    public void pdsUpdateUseVendBatchDate()
    {
        if (!this.PdsUseVendBatchDate
            && this.PdsVendBatchDate != dateNull())
        {
            if (Box::yesNo("@PRO2224",DialogButton::Yes,"@PRO2241")
                == DialogButton::Yes)
            {
                this.PdsUseVendBatchDate = true;
            }
        }
        else if (this.PdsUseVendBatchDate
            && this.PdsVendBatchDate == dateNull())
        {
            this.PdsUseVendBatchDate = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateUseVendExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update PdsUseVendBatchExp field based on the value if the PdsVendExpiryDate field and user input
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// private void pdsUpdateUseVendExpiryDate()
    /// </syntax>
    /// </remarks>
    public void pdsUpdateUseVendExpiryDate()
    {
        if (!this.PdsUseVendBatchExp
            && this.PdsVendExpiryDate != dateNull())
        {
            if (Box::yesNo("@PDS1354",DialogButton::Yes,"@PDS1355")
                == DialogButton::Yes)
            {
                this.PdsUseVendBatchExp = true;
            }
        }
        else if (this.PdsUseVendBatchExp
            && this.PdsVendExpiryDate == dateNull())
        {
            this.PdsUseVendBatchExp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    PurchLine purchLine(boolean  _forUpdate = false)
    {
        return this.VendDocumentLineMap::purchLine(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmLine_Asset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the purchase parameter asset line that is related to the purchase parameter line.
    /// </summary>
    /// <param name="_update">
    /// A Boolean value that indicates whether the <c>PurhcParmLine_Asset</c> record buffer may be updated.
    /// </param>
    /// <returns>
    /// A <c>PurchParmLine_Asset</c> record buffer.
    /// </returns>
    public PurchParmLine_Asset purchParmLine_Asset(boolean _update = false)
    {
        return PurchParmLine_Asset::findByPurchParmLineRecId(this.RecId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmSubTable</Name>
				<Source><![CDATA[
    PurchParmSubTable  purchParmSubTable(boolean  update = false)
    {
        return PurchParmSubTable::find(this.ParmId, this.TableRefId, this.OrigPurchId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmTable</Name>
				<Source><![CDATA[
    PurchParmTable purchParmTable(boolean  update = false)
    {
        return PurchParmTable::find(this.ParmId, this.TableRefId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmUpdate</Name>
				<Source><![CDATA[
    PurchParmUpdate  purchParmUpdate(boolean  _forUpdate = false)
    {
        return this.purchParmTable().purchParmUpdate(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyCorrection</Name>
				<Source><![CDATA[
    display PurchQty purchQtyCorrection()
    {
        return this.PreviousReceiveNow - this.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    PurchTable purchTable(boolean  update = false)
    {
        return PurchTable::find(this.OrigPurchId, update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the status of the associated quality orders.
    /// </summary>
    /// <returns>
    /// The current quality order status.
    /// </returns>

    display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        return this.purchLine().qualityOrderStatusDisplay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertPreviousVersionChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts changes to the <c>Remain</c> fields of the purchase line caused by the previous version of the document being corrected.
    /// </summary>
    /// <param name="_purchLine">
    ///     The purchase lines to be modified.
    /// </param>
    public void revertPreviousVersionChanges(PurchLine _purchLine)
    {
        _purchLine.RemainPurchPhysical += this.PreviousReceiveNow;
        _purchLine.RemainInventPhysical += this.PreviousInventNow;
        _purchLine.RemainPurchFinancial -= this.PreviousReceiveNow;
        _purchLine.RemainInventFinancial -= this.PreviousInventNow;
        _purchLine.PdsCWRemainInventPhysical += this.PdsCWPreviousReceiveNow;
        _purchLine.PdsCWRemainInventFinancial -= this.PdsCWPreviousReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdvancedPricingInvoiceCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the attribute-based calculation ID in the table buffer mapped.
    /// </summary>
    /// <param name="_calculationId">
    /// The calculation ID to set; optional.
    /// </param>
    public void setAdvancedPricingInvoiceCalculationId(PDSCalculationId _calculationId = '')
    {
        this.VendDocumentLineMap::setAdvancedPricingInvoiceCalculationId(_calculationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReceiveNow</Name>
				<Source><![CDATA[
    void  setInventReceiveNow(boolean setInventNow = true)
    {
        this.VendDocumentLineMap::setInventReceiveNow(setInventNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    void setLineAmount(Qty  _qty = this.ReceiveNow, PurchLine _purchLine = null)
    {
        this.VendDocumentLineMap::setLineAmount(_qty, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
    void  setQty(DocumentStatus     documentStatus,
                 boolean            creditRemaining,
                 boolean            setInventNow = true,
                 boolean            setInventQtys = true)
    {
        this.VendDocumentLineMap::setQty(documentStatus, creditRemaining, setInventNow, setInventQtys);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainAfterInvent</Name>
				<Source><![CDATA[
    void  setRemainAfterInvent()
    {
        this.VendDocumentLineMap::setRemainAfterInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the strategy that is used to validate and apply default values.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The <c>PurchParmLine</c> record that is used to track the state; optional.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record that is used to apply the default values; optional.
    /// </param>
    /// <param name="_purchParmUpdate">
    /// A <c>PurchParmUpdate</c> record that is used to apply the default values; optional.
    /// </param>
    /// <returns>
    /// The strategy that is used to validate and apply default values.
    /// </returns>
    private VendDocumentLineType type(PurchLine _purchLine = null, PurchParmUpdate _purchParmUpdate = null)
    {
        PurchParmTable  purchParmTable;

        if (this.Ordering == DocumentStatus::None)
        {
            select Ordering, DocumentOrigin from purchParmTable
            where purchParmTable.TableRefId == this.TableRefId &&
                purchParmTable.ParmId == this.ParmId;

            this.Ordering = purchParmTable.Ordering;
            this.DocumentOrigin = purchParmTable.DocumentOrigin;
        }

        return VendDocumentLineType::construct(this, _purchLine, _purchParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>VendDocumentLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>VendDocumentLineInterface</c> object.
    /// </returns>
    public VendDocumentLineInterface vendDocumentLineInterface()
    {
        return this.VendDocumentLineMap::vendDocumentLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId field)
    {
        boolean                 isValid = true;
        VendDocumentLineType   vendDocumentLineType;

        vendDocumentLineType = this.type();
        if (vendDocumentLineType != null)
        {
            isValid = vendDocumentLineType.validateField(field);
        }

        if (isValid)
        {
            isValid = super(field);
        }

        switch (field)
        {
            case fieldNum(PurchParmLine,PdsVendBatchDate) :
                if (isValid
                    && this.PdsVendBatchDate != dateNull()
                    && this.PdsVendBatchDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    isValid = checkFailed("@PRO2230");
                }
                break;
            case fieldNum(PurchParmLine,PdsVendExpiryDate):
                if (isValid
                    && this.PdsVendExpiryDate != dateNull()
                    && this.PdsVendExpiryDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    isValid = checkFailed("@PDS1353");
                }
                break;
            case fieldNum(PurchParmLine,PdsCountryOfOrigin1):
            //Fall through
            case fieldNum(PurchParmLine,PdsCountryOfOrigin2):
                if (this.PdsCountryOfOrigin1
                    && this.PdsCountryOfOrigin2
                    && this.PdsCountryOfOrigin1 == this.PdsCountryOfOrigin2)
                {
                    isValid = checkFailed("@PDS1356");
                }
                break;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyAndAmount</Name>
				<Source><![CDATA[
    boolean validateQtyAndAmount()
    {
        return this.VendDocumentLineMap::validateQtyAndAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = this.validateWrite_ServerPre();

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite_ServerPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current record is valid and ready to be written to the database.
    /// </summary>
    /// <param name="_purchParmLine">
    /// A <c>PurchParmLine</c> record, used to track state; optional.
    /// </param>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method was created to move execution of the logic for <c>validateWrite</c> onto the server.
    /// The logic is before other validation logic because the kernel validates information that will not
    /// be exposed as faults.
    /// </remarks>
    private boolean validateWrite_ServerPre()
    {
        boolean                 isValid;
        VendDocumentLineType    vendDocumentLineType;

        isValid = true;

        vendDocumentLineType = this.type();
        if (vendDocumentLineType != null)
        {
            isValid = vendDocumentLineType.validateRow();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromPurchParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records form <c>PurchParmLine</c> table for given parameters.
    /// </summary>
    /// <param name="_parmId">
    /// The parm id is used to find record.
    /// </param>
    /// <param name="_tableRefId">
    /// The table id is used to find record.
    /// </param>
    public static void  deleteFromPurchParmLine_IN(ParmId          _parmId,
                                                   TradeLineRefId  _tableRefId)
    {
        PurchParmLine  purchParmLine;

        delete_from purchParmLine
            where   purchParmLine.ParmId     == _parmId &&
                    purchParmLine.TableRefId == _tableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromPurchParmSubTable</Name>
				<Source><![CDATA[
    static void  deleteFromPurchParmSubTable(PurchParmSubTable _purchParmSubTable)
    {
        PurchParmLine  purchParmLine;

        delete_from purchParmLine
            where purchParmLine.ParmId      == _purchParmSubTable.ParmId
               && purchParmLine.TableRefId  == _purchParmSubTable.TableRefId
               && purchParmLine.OrigPurchId == _purchParmSubTable.OrigPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes lines from the <c>PurchParmLine</c> table for a given <c>ParmId</c> value.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> value for which lines are deleted.
    /// </param>
    static void deleteParmId(ParmId _parmId)
    {
        PurchParmLine  purchParmLine;

        delete_from purchParmLine
            where purchParmLine.ParmId == _parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventTransId</Name>
				<Source><![CDATA[
    static boolean existInventTransId(ParmId             _parmId,
                                      TradeInventTransId _inventTransId)
    {
        if (_parmId && _inventTransId)
        {
            return (select firstonly RecId from purchParmLine
                        where purchParmLine.ParmId        == _parmId &&
                              purchParmLine.InventTransId == _inventTransId
                   ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPurch</Name>
				<Source><![CDATA[
    static boolean existPurch(ParmId     parmId,
                              PurchId    origPurchId)
    {
        if (parmId  &&  origPurchId)
        {
            return (select firstonly RecId from purchParmLine
                        where purchParmLine.ParmId      == parmId &&
                              purchParmLine.OrigPurchId == origPurchId
                   ).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTableRefId</Name>
				<Source><![CDATA[
    static boolean existTableRefId(ParmId           parmId,
                                   TradeLineRefId   tableRefId)
    {
        if (parmId  &&  tableRefId)
        {
            return (select firstonly RecId from purchParmLine
                        where purchParmLine.ParmId      == parmId
                           && purchParmLine.TableRefId  == tableRefId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWaiting</Name>
				<Source><![CDATA[
    static boolean  existWaiting(ParmId             _parmId,
                                 PurchId            _purchId,
                                 TradeInventTransId _inventTransId)
    {
        if (_parmId  &&  _purchId  &&  _inventTransId)
        {
            return (select firstonly RecId from purchParmLine
                        where   purchParmLine.ParmId        == _parmId  &&
                                purchParmLine.OrigPurchId   == _purchId &&
                                purchParmLine.InventTransId == _inventTransId
                   ).RecId !=0;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PurchParmLine</c> record with a particular PurchLineRefRecId value.
    /// </summary>
    /// <param name="_purchLineRefRecId">
    /// The PurchLineRecId field value to use to find the <c>PurchParmLine</c> record.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the record buffer can be updated; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchParmLine</c> record buffer.
    /// </returns>
    static PurchParmLine findByPurchLineRefRecId(PurchLineRefRecId _purchLineRefRecId, boolean _update = false)
    {
        PurchParmLine purchParmLine;

        if (_purchLineRefRecId)
        {
            purchParmLine.selectForUpdate(_update);

            // There is only ever one purhcParmLine for the given purchLineRefRecId.
            select firstonly purchParmLine
                where (purchParmLine.PurchLineRecId == _purchLineRefRecId);
        }

        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    static PurchParmLine findInventTransId(ParmId               _parmId,
                                           TradeInventTransId   _inventTransId,
                                           boolean              _update = false,
                                           TradeLineRefId       _tableRefId ='')
    {
        PurchParmLine  purchParmLine;

        purchParmLine.selectForUpdate(_update);

        select firstonly purchParmLine
            where purchParmLine.ParmId          == _parmId
               && purchParmLine.InventTransId   == _inventTransId
               && (!_tableRefId || purchParmLine.TableRefId == _tableRefId);

        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locates a <c>PurchParmLine</c> table record using its record identifier.
    /// </summary>
    /// <param name="_parmId">
    /// A record identifier.
    /// </param>
    /// <param name="_tableRefId">
    /// A reference table Id.
    /// </param>
    /// <param name="_inventTransId">
    /// A Invent trans ID.
    /// </param>
    /// <param name="_update">
    /// True if the record returned can be updated; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>PurchParmLine</c> table record.
    /// </returns>
    public static PurchParmLine findInventTransId_IN(ParmId          _parmId,
                                                     TradeLineRefId  _tableRefId,
                                                     InventTransId   _inventTransId,
                                                     boolean         _update = false )
    {
        PurchParmLine  purchParmLine;

        purchParmLine.selectForUpdate(_update);

        if (_parmId && _tableRefId && _inventTransId)
        {
            select firstonly purchParmLine
                where purchParmLine.ParmId          == _parmId
                    && purchParmLine.TableRefId     == _tableRefId
                   && purchParmLine.InventTransId   == _inventTransId;
        }

        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locates a <c>PurchParmLine</c> record by using its record identifier.
    /// </summary>
    /// <param name="_recId">
    /// A record ID.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the record can be updated; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchParmLine</c> record.
    /// </returns>
    public static PurchParmLine findRecId(RefRecId _recId, boolean _update = false)
    {
        PurchParmLine purchParmLine;

        if (_recId)
        {
            if (_update)
            {
                purchParmLine.selectForUpdate(_update);
            }
            select firstonly purchParmLine
                where purchParmLine.RecId == _recId;
        }
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTableRefId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locates a <c>PurchParmLine</c> table record using its record identifier.
    /// </summary>
    /// <param name="_parmId">
    /// A record identifier.
    /// </param>
    /// <param name="_tableRefId">
    /// A ref table ID.
    /// </param>
    /// <param name="_update">
    /// true if the record returned can be updated; otherwise, false.
    /// </param>
    /// <returns>
    /// A <c>PurchParmLine</c> table record.
    /// </returns>
    public static PurchParmLine findTableRefId_IN(ParmId           _parmId,
                                                  TradeLineRefId   _tableRefId,
                                                  boolean          _update = false )
    {
        PurchParmLine  purchParmLine;

        purchParmLine.selectForUpdate(_update);

        select firstonly purchParmLine
            where purchParmLine.ParmId          == _parmId
               && purchParmLine.TableRefId      == _tableRefId;

        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchParmLineForQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchParmLine</c> record based on the quality order.
    /// </summary>
    /// <param name = "_inventQualityOrderTable">Quality order for which the <c>PurchParmLine</c> record is retrieved.</param>
    /// <param name = "_forUpdate">True if the record returned can be updated, otherwise false.</param>
    /// <param name = "_receiveNowRequired">True if the receiveNow is required, otherwise false.</param>
    /// <returns>The <c>PurchParmLine</c> record.</returns>
    internal static PurchParmLine findPurchParmLineForQualityOrder(InventQualityOrderTable _inventQualityOrderTable, boolean _receiveNowRequired = false, boolean _forUpdate = false)
    {
        PurchParmTable  purchParmTable;
        PurchParmLine   purchParmLine;

        if (_forUpdate)
        {
            purchParmLine.selectForUpdate(_forUpdate);
        }

        select firstOnly purchParmLine
            where purchParmLine.InventTransId == _inventQualityOrderTable.InventRefTransId
                && purchParmLine.OrigPurchId  == _inventQualityOrderTable.InventRefId
                && (!_receiveNowRequired || purchParmLine.ReceiveNow != 0)
            exists join purchParmTable
                where purchParmTable.ParmId == purchParmLine.ParmId
                    && purchParmTable.TableRefId == purchParmLine.TableRefId
                    && purchParmTable.Ordering == DocumentStatus::PackingSlip;

        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPurchParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>PurchParmLine_IN</c> record associated with the current record.
    /// </summary>
    /// <param name="_purchParmLine_IN">
    /// The <c>PurchParmLine_IN</c> record.
    /// </param>
    public void packPurchParmLine_IN(PurchParmLine_IN _purchParmLine_IN)
    {
        _purchParmLine_IN.PurchParmLine = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_purchParmLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PurchParmLine_IN</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>PurchParmLine_IN</c> record associated with the current record.
    /// </returns>
    public PurchParmLine_IN purchParmLine_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(PurchParmLine_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchParmLine</c> table will update the Tax
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise is false </returns>
    private boolean taxRecalculationNeeded(Common _origTransactionTable = this.orig())
    {
        PurchParmLine purchParmLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        boolean updateNeeded =
                    (
                    (this.ItemId                    != purchParmLine_Orig.ItemId) ||
                    (this.PriceUnit                 != purchParmLine_Orig.PriceUnit) ||
                    (this.PurchPrice                != purchParmLine_Orig.PurchPrice) ||
                    (this.LinePercent               != purchParmLine_Orig.LinePercent) ||
                    (this.LineDisc                  != purchParmLine_Orig.LineDisc) ||
                    (this.TaxItemGroup              != purchParmLine_Orig.TaxItemGroup) ||
                    (this.TaxGroup                  != purchParmLine_Orig.TaxGroup) ||
                    (this.MultiLnDisc               != purchParmLine_Orig.MultiLnDisc) ||
                    (this.MultiLnPercent            != purchParmLine_Orig.MultiLnPercent) ||
                    (this.ProcurementCategory       != purchParmLine_Orig.ProcurementCategory) ||
                    (this.PurchMarkup               != purchParmLine_Orig.PurchMarkup) ||
                    (this.LineAmount                != purchParmLine_Orig.LineAmount) ||
                    (this.CurrencyCode              != purchParmLine_Orig.CurrencyCode) ||
                    (this.DeliveryPostalAddress     != purchParmLine_Orig.DeliveryPostalAddress) ||
                    (this.ReceiveNow                != purchParmLine_Orig.ReceiveNow)
                    );

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>PurchParmLine</c> table buffer on india fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_origTransactionTable">
    /// The <c>Transaction table</c> record, optional.
    /// </param>
    /// <returns>
    /// True if the the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    private boolean hasIndirectTaxFieldChanged_IN(Common _origTransactionTable = this.orig())
    {
        boolean             indirectTaxChanged = false;
        PurchParmLine_IN    purchParmLine_IN;
        PurchParmLine_IN    purchParmLine_Orig_IN;
        PurchParmLine       purchParmLine_Orig = _origTransactionTable ? _origTransactionTable : this.orig();

        if (TaxParameters::checkTaxParameters_IN())
        {
            purchParmLine_IN        = this.purchParmLine_IN();
            purchParmLine_Orig_IN   = purchParmLine_Orig.purchParmLine_IN();

            indirectTaxChanged =
                purchParmLine_IN.AssessableValueTransactionCurrency  != purchParmLine_Orig_IN.AssessableValueTransactionCurrency
                || purchParmLine_IN.ReceivedQty                     != purchParmLine_Orig_IN.ReceivedQty
                || purchParmLine_IN.MaximumRetailPrice              != purchParmLine_Orig_IN.MaximumRetailPrice;
        }

        return indirectTaxChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current tax status of <c> PurchParmLine </c> to dirty
    /// </summary>
    public void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.purchParmTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update current <c> PurchParmLine </c>
    /// </summary>
    public void update()
    {
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled())
        {
            if (this.SalesPurchJournalLine::taxRecalculationNeeded())
            {
                this.markCurrentTaxDocumentTaxStatusDirty();
            }
        }
        // </GTE>

        super();

    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purch parm line record.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchParmLineImpl</c> object </returns>
    public TaxModelDocLinePurchParmLineImpl initTaxModelDocLine()
    {
        TaxModelDocLinePurchParmLineImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchParmLineImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this purch parm line record for Indian.
    /// </summary>
    /// <returns>The <c>TaxModelDocLinePurchParmLineImpl_IN</c> object </returns>
    public TaxModelDocLinePurchParmLineImpl_IN initTaxModelDocLine_IN()
    {
        TaxModelDocLinePurchParmLineImpl_IN taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(this) as TaxModelDocLinePurchParmLineImpl_IN;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the header table.
    /// </summary>
    /// <returns>The record for PurchParmTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.purchParmTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentRowDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The callback method on tax engine tax document display
    /// </summary>
    /// <returns>The tax document display string.</returns>
    public TaxDocumentDisplayString getTaxDocumentRowDisplayString()
    {
        return strFmt("@ApplicationSuiteTaxEngineIntegration:PurchLineTaxDocumentRowDisplayFormat", this.LineNum, this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesPurchLineInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchLineInterface</c> object.
    /// </returns>
    public SalesPurchLineInterface salesPurchLineInterface()
    {
        return this.SalesPurchLine::salesPurchLineInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingSlipQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates packing slip quantity.
    /// </summary>
    /// <param name = "_purchQuantity">A purchase order quantity.</param>
    /// <param name = "_purchLine">A purchase order line.</param>
    /// <param name = "_purchParmUpdate">A purchase order parm update instance.</param>
    /// <param name = "_registeredPurchQty">A purchase quantity.</param>
    /// <param name = "_registeredInventQty">An inventory quantity.</param>
    public void updatePackingSlipQty(
        PurchQuantity   _purchQuantity,
        PurchLine       _purchLine,
        PurchParmUpdate _purchParmUpdate,
        PurchQty        _registeredPurchQty,
        InventQty       _registeredInventQty)
    {
        [ this.ReceiveNow,
            this.RemainBefore,
            this.RemainAfter ]       = _purchQuantity.qtyPurch(_purchLine, _purchParmUpdate.SpecQty, _registeredPurchQty + this.ReceiveNow, _purchParmUpdate.CreditRemaining);
        [ this.InventNow,
            this.RemainBeforeInvent,
            this.RemainAfterInvent ] = _purchQuantity.qtyInvent(_purchLine, _purchParmUpdate.SpecQty, _registeredInventQty + this.InventNow, _purchParmUpdate.CreditRemaining);

        this.setLineAmount(this.ReceiveNow, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line has an end discount defined.
    /// </summary>
    /// <returns>
    /// true if an end discount is defined, otherwise; false.
    /// </returns>
    [Hookable(false), Wrappable(false)]
    public boolean endDisc()
    {
        return this.salesPurchLineInterface().endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityOrdered</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal display PurchQty quantityOrdered()
    {
        return this.purchLine().PurchQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124478</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SCM:PurchParmLineTitle</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>OrigPurchId</TitleField1>
	<TitleField2>PurchaseLineLineNumber</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ParmTableRefIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<PrimaryIndex>ParmTableRefIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>MarkupTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>MarkupTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchParmLine_Asset</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchParmLine_Asset</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchParmLine_Project</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchParmLine_Project</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>PurchParmSubLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PurchParmSubLine</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendInvoiceMatchingLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>VendInvoiceMatchingLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAfterInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Discount</Name>
			<Label>@SYS11829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LinePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MultiLnDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxServiceCode_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseLineLineNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryQuantity</Name>
			<Label>@SYS21676</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainBeforeInventPhysical</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBeforeInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousInventNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainAfterInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MiscCharges</Name>
			<Label>@SYS128435</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OrderLine</Name>
			<Label>@SYS508</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>changedManually</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingSlip</Name>
			<Label>@SYS128445</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainAfter</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCW</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainBeforeInvent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWPreviousReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainAfterInvent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsShelf</Name>
			<Label>@PRO945</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsUseVendBatchExp</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsVendCOO_BatchId</Name>
			<Label>@PDS1357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCountryOfOrigin2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsVendBatchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting_RU</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectCostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSARetainage</Name>
			<Label>@PSA2704</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseLineInvoice</Name>
			<Label>@SYS128446</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseLines</Name>
			<Label>@SYS9664</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>currencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseQuantity</Name>
			<Label>@SYS11187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RemainAfter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainBefore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeviationQty_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreviousDeviationQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProcurementCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099GroupFields</Name>
			<Label>@SYS24226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099StateAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CFOPTable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>changedManually</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS28792</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS332457</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>currencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsDeliveryName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceLineDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DeviationQty_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchDeviationQty_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>DocumentOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS2934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6901</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LinePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLinePercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnDisc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultiLnPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMultiLnPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Ordering</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS2934</Label>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigPurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdOrig</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsCountryOfOrigin2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCountryOfOrigin2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWPreviousReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS84</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainAfterInvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS76</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainBeforeInvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS147</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsUseVendBatchExp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsUseVendBatchExp</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendBatchDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsVendBatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendBatchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PdsVendExpiryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsVendExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>VendPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousDeviationQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchDeviationQty_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousInventNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PreviousReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchaseLineLineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchLineRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PurchLineRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PurchPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchPrice</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS2934</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAfter</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainAfterInvent</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS22556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBefore</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchQty</ExtendedDataType>
			<Label>@SYS8459</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBeforeInvent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS8459</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainBeforeInventPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeRemainBeforeInventPhysical</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099Fields</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099FieldsRecId</ExtendedDataType>
			<Label>@SYS128436</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099State</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS128439</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Tax1099StateAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099StateAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS128442</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxServiceCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValue_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS5298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcceptedQty_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsBillOfEntryNumberTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsImportInvoiceNumberTable_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsInvoiceRegnRecId_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>MaximumRetailPrice_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceivedQty_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RejectedQty_IN</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>parmIdOrigPurchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigPurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ParmTableRefIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrigPurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchaseLineLineNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099FieldsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CFOPTable_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CFOPTable_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterJournalTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigOrderId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterParmLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PreviousQty</MapField>
					<MapFieldTo>PreviousReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>ReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceLineRecId</MapField>
					<MapFieldTo>PurchLineRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PriceDiscLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Included</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Unit</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ReasonCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConfirmedDlv</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExternalItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemBOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemRouteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDeliveryType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Markup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRCustVendAC</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCROrderLine2PriceHistoryRef</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRReceiptDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRShipDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PDSCalculationId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWSalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Price</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchSalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>QtyOrdered</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RequiredDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RetailVariantId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StockedProduct</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitOfMeasure</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchLine_W</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile_RU</MapField>
					<MapFieldTo>PostingProfile_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceAgreementDate_RU</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>VendDocumentLineMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>changedManually</MapField>
					<MapFieldTo>changedManually</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>closed</MapField>
					<MapFieldTo>closed</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>currencyCode</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName</MapField>
					<MapFieldTo>DeliveryName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentOrigin</MapField>
					<MapFieldTo>DocumentOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventNow</MapField>
					<MapFieldTo>InventNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineDisc</MapField>
					<MapFieldTo>LineDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePercent</MapField>
					<MapFieldTo>LinePercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnDisc</MapField>
					<MapFieldTo>MultiLnDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultiLnPercent</MapField>
					<MapFieldTo>MultiLnPercent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Ordering</MapField>
					<MapFieldTo>Ordering</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigPurchId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWReceiveNow</MapField>
					<MapFieldTo>PdsCWReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWRemainAfter</MapField>
					<MapFieldTo>PdsCWRemainAfterInvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWRemainBefore</MapField>
					<MapFieldTo>PdsCWRemainBeforeInvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PriceUnit</MapField>
					<MapFieldTo>PriceUnit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProcurementCategory</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchaseLineLineNumber</MapField>
					<MapFieldTo>PurchaseLineLineNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchLineRecId</MapField>
					<MapFieldTo>PurchLineRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchMarkup</MapField>
					<MapFieldTo>PurchMarkup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchPrice</MapField>
					<MapFieldTo>PurchPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ReceiveNow</MapField>
					<MapFieldTo>ReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainAfter</MapField>
					<MapFieldTo>RemainAfter</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainAfterInvent</MapField>
					<MapFieldTo>RemainAfterInvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainBefore</MapField>
					<MapFieldTo>RemainBefore</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainBeforeInvent</MapField>
					<MapFieldTo>RemainBeforeInvent</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemainBeforeInventPhysical</MapField>
					<MapFieldTo>RemainBeforeInventPhysical</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TableRefId</MapField>
					<MapFieldTo>TableRefId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>currencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
					<MapFieldTo>LineAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>ReceiveNow</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CFOPTable_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFOPTable_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CFOPTable_BR</Name>
					<Field>CFOPTable_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>currencyCode</Name>
					<Field>currencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_PurchParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceVendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>VendInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OrderVendor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OrderVendor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCountryOfOrigin1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion_COO1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_COO1</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin1</Name>
					<SourceEDT>PdsCountryOfOrigin1</SourceEDT>
					<Field>PdsCountryOfOrigin1</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsCountryOfOrigin2</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion_COO2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsAddressCountryRegion_COO2</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsCountryOfOrigin2</Name>
					<SourceEDT>PdsCountryOfOrigin2</SourceEDT>
					<Field>PdsCountryOfOrigin2</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProcurementCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResCategory_PurchParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProcurementCategory</Name>
					<Field>ProcurementCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLineRecId</Name>
					<Field>PurchLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmSubTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmSubTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPurchId</Name>
					<Field>OrigPurchId</Field>
					<RelatedField>OrigPurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchParmTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPurchId</Name>
					<Field>OrigPurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Tax1099Fields</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Tax1099Fields</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099Fields</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099Fields</Name>
					<Field>Tax1099Fields</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Tax1099State</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099State</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099State</Name>
					<Field>Tax1099State</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile_RU</Name>
					<SourceEDT>VendPostingProfile</SourceEDT>
					<Field>PostingProfile_RU</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProfileIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>