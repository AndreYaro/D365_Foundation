<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillingClassification</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBillingClassification extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custBillingClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>BillingClassification</c> and <c>RecId</c> fields of <c>CustBillingClassification</c> table
    /// </summary>
    /// <param name="_billingClassification">
    /// A <c>BillingClassification</c> field value used to filter record.
    /// </param>
    /// <returns>
    /// A container of <c>CustBillingClassification</c> table.
    /// </returns>
    public container custBillingClass(BillingClassification _billingClassification)
    {
        container                   billingClassificationIdContainer, billingClassificationNameContainer;
        CustBillingClassification   custBillingClassification;

        custBillingClassification           = CustBillingClassification::findByBillingClassification(_billingClassification);
        billingClassificationIdContainer    = conIns(billingClassificationIdContainer, 1, custBillingClassification.RecId);
        billingClassificationNameContainer  = conIns(billingClassificationNameContainer, 1, custBillingClassification.BillingClassification);

        return [billingClassificationIdContainer, billingClassificationNameContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBillingClassificationForMultiSelectControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a comma delimited string of <c>CustBillingClassifications</c> table <c>RecId</c> values.
    /// </summary>
    /// <param name = "_billingClassificationString">
    /// A string containing a comma delimeted list of <c>CustBillingClassifications</c> table <c>RecId</c> values.
    /// </param>
    /// <returns>
    /// A container that represents selected values in a multiselect control of <c>CustBillingClassification</c> records.
    /// </returns>
    internal static container custBillingClassificationForMultiSelectControl(str _billingClassificationString)
    {
        container billingClassificationIdContainer;
        container billingClassificationNameContainer;

        if (_billingClassificationString != strMin())
        {
            List billingClassificationList = strSplit(_billingClassificationString, ',');
            ListEnumerator enumerator = billingClassificationList.getEnumerator();

            int counter;
            while (enumerator.moveNext())
            {
                RefRecId custBillingClassificationRecId = str2Int64(enumerator.current());
                if (custBillingClassificationRecId)
                {
                    CustBillingClassification custBillingClassification = CustBillingClassification::find(custBillingClassificationRecId);

                    if (custBillingClassification)
                    {
                        counter++;
                        billingClassificationIdContainer = conIns(billingClassificationIdContainer, counter, custBillingClassification.RecId);
                        billingClassificationNameContainer = conIns(billingClassificationNameContainer, counter, custBillingClassification.BillingClassification);
                    }
                }
            }
        }

        return [billingClassificationIdContainer, billingClassificationNameContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update all  <c>SettlementPriority</c> value of the <c>CustBillingClassification</c> table that have lower priority value than the deleted one.
    /// </summary>
    public void delete()
    {
        CustBillingClassification  custBillingClassificationdelete;
        SettlementPriority         currentSettlementPriority = this.SettlementPriority;
        RefRecId                   deletedRecordRecId = this.RecId;

        ttsbegin;
        super();

        if (deletedRecordRecId != 0)
        {
            // updates lower billing codes priority.
            update_recordset custBillingClassificationdelete
                setting SettlementPriority = custBillingClassificationdelete.SettlementPriority - 1
                    where custBillingClassificationdelete.SettlementPriority >= currentSettlementPriority;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLowestSettlementPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lowest priority of billing classifications.
    /// </summary>
    /// <returns>
    /// A <c>SettlementPriority</c> field of the <c>CustBillingClassification</c> table.
    /// </returns>
    public Priority getLowestSettlementPriority()
    {
        CustBillingClassification custBillingClassificationLocal;

        select maxof(SettlementPriority) from custBillingClassificationLocal;
        // lowest priority of billing classification.
        return custBillingClassificationLocal.SettlementPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts billing classification record with lowest priority.
    /// </summary>
    void insert()
    {
        if (this.RecId == 0)
        {
            // set Settlement priority to lowest priority.
            this.SettlementPriority = this.getLowestSettlementPriority()  + 1;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the priority of billing classifications.
    /// </summary>
    /// <param name="_directionUp">
    /// A Boolean value that specifies whether to increase or decrease the priority of a billing classification.
    /// </param>
    /// <returns>
    /// The last updated record in the <c>CustBillingClassificationlocal</c> table.
    /// </returns>
    public CustBillingClassification updatePriority(boolean _directionUp)
    {
        CustBillingClassification   custBillingClassificationlocal;
        SettlementPriority          selected;
        SettlementPriority          change;

        ttsbegin;
        //gets selected priority
        change = this.SettlementPriority;
        switch (_directionUp)
        {
            case true :
                        selected = this.SettlementPriority - 1;
                        break;
            case false :
                        selected = this.SettlementPriority + 1;
                        break;
        }
        // updates selected settlement priority to zero.
        select forupdate firstonly custBillingClassificationlocal
        where custBillingClassificationlocal.SettlementPriority == change;
        custBillingClassificationlocal.SettlementPriority = 0;
        custBillingClassificationlocal.update();
        custBillingClassificationlocal.clear();

        // updates lower/higher settlement priority to selected settlement priority.
        select forupdate firstonly custBillingClassificationlocal
        where custBillingClassificationlocal.SettlementPriority == selected;
        custBillingClassificationlocal.SettlementPriority = change;
        custBillingClassificationlocal.update();
        custBillingClassificationlocal.clear();

        // updates selected settlement priority to lower/higher settlement priority.
        select forupdate firstonly custBillingClassificationlocal
        where custBillingClassificationlocal.SettlementPriority == 0;
        custBillingClassificationlocal.SettlementPriority = selected;
        custBillingClassificationlocal.update();
        ttscommit;

        return custBillingClassificationlocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean             isValid = true;
        CustInvoiceTable    custInvoiceTable;

        if (isValid)
        {
            select firstonly RecId from custInvoiceTable
                where custInvoiceTable.CustBillingClassification == this.RecId;

            isValid = custInvoiceTable.RecId;
        }

        if (isValid)
        {
            throw error("@SPS367");
        }
        else
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret = true;
        switch (_fieldIdToCheck)
        {
            case fieldNum(CustBillingClassification, InvoiceNumberSeq) :
                if (this.InvoiceNumberSeq)
                {
                    if (!NumberSequenceTable::findByNaturalKey(this.InvoiceNumberSeq))
                    {
                        ret = checkFailed("@SPS366");
                    }
                }
                break;
            case fieldNum(CustBillingClassification, CreditNoteNumberSeq) :
                if (this.CreditNoteNumberSeq)
                {
                    if (!NumberSequenceTable::findByNaturalKey(this.CreditNoteNumberSeq))
                    {
                        ret = checkFailed("@SPS366");
                    }
                }
                break;
            case fieldNum(CustBillingClassification, BillingClassification) :
                if (CustBillingClassification::findByBillingClassification(this.BillingClassification))
                    ret = checkFailed("@SPS539");
                    break;
        }
        if (ret)
            ret = super(_fieldIdToCheck);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        if (!this.BillingClassification)
            ret = checkFailed("@SPS374");
        else
            ret = super();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBillingClassificationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the billing classification lookup functionality.
    /// </summary>
    /// <param name="_formControl">
    /// The form control object from where this method is called.
    /// </param>
    public static void custBillingClassificationLookup(FormControl _formControl)
    {
        SysTableLookup       sysTableLookup;
        Query                query = new Query();
        QueryBuildDataSource qbdsCustBillingClassification;
        QueryBuildDataSource qbdsJournalizingDefinitionCustTrans;

        sysTableLookup = SysTableLookup::newParameters(tableNum(CustBillingClassification), _formControl);

        qbdsCustBillingClassification = query.addDataSource(tableNum(CustBillingClassification));
        
        // Set the query to be used by the lookup form
        sysTableLookup.parmQuery(query);

        // Specify the BillingClassification field to show in the form
        sysTableLookup.addLookupfield(fieldNum(CustBillingClassification, BillingClassification));
        sysTableLookup.addLookupfield(fieldNum(CustBillingClassification, Description));

        // Perform the lookup
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>CustBillingClassification</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;

        if (!CustBillingClassification::exist(_recId))
        {
            ret = checkFailed(strFmt(CustBillingClassification::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBillingClassExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any billing classifications exists in the <c>CustBillingClassification</c> table.
    /// </summary>
    /// <returns>
    /// true if any record exists; otherwise, false.
    /// </returns>
    public static boolean doesBillingClassExist()
    {
        return (select firstonly RecId from CustBillingClassification).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>CustBillingClassification</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean existBillingClassification;

        existBillingClassification = (select firstonly
                    RecId
                from
                    custBillingClassification
                where
                    custBillingClassification.RecId == _recId).RecId != 0;

        return existBillingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustBillingClassification</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional
    /// </param>
    /// <returns>
    /// A record in the <c>CustBillingClassification</c> table; otherwise, an empty record.
    /// </returns>
    public static CustBillingClassification find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        CustBillingClassification custBillingClassification;
        if (_recId)
        {
            custBillingClassification.selectForUpdate(_forUpdate);

            select firstonly custBillingClassification
                where custBillingClassification.RecId == _recId;
        }
        return custBillingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBillingClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>CustBillingClassification</c> table to find the specified record.
    /// </summary>
    /// <param name="_billingClassification">
    /// A billing classification to find.
    /// </param>
    /// <returns>
    /// <c>CustBillingClassification</c> table buffer.
    /// </returns>
    public static CustBillingClassification findBillingClassification(BillingClassification _billingClassification)
    {
        CustBillingClassification billingClassificationTable;

        select firstonly billingClassificationTable
            where billingClassificationTable.BillingClassification == _billingClassification;

        return billingClassificationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBillingClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustBillingClassification</c> record that is specified by the <c>BillingClassification</c> field.
    /// </summary>
    /// <param name="_billingClassification">
    /// A billing classification to find.
    /// </param>
    /// <returns>
    /// A record in the <c>CustBillingClassification</c> table; otherwise, an empty record.
    /// </returns>
    public static CustBillingClassification findByBillingClassification(BillingClassification _billingClassification)
    {
        CustBillingClassification billingClassifcation;

        select firstonly billingClassifcation
            where billingClassifcation.BillingClassification == _billingClassification;

        return billingClassifcation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustBillingClassification</c> record that is associated with the by the invoice line.
    /// </summary>
    /// <param name="_custInvoiceLineRecId">
    /// The recId of the invoice line.
    /// </param>
    /// <returns>
    /// A record in the <c>CustBillingClassification</c> table; otherwise, an empty record.
    /// </returns>
    public static CustBillingClassification findByCustInvoiceLine(RefRecId  _custInvoiceLineRecId)
    {
        CustBillingClassification billingClassifcation;
        CustInvoiceTable          custInvoiceTable;
        CustInvoiceLine           custInvoiceLine;

        select firstonly billingClassifcation
            join RecId from custInvoiceTable
                where billingClassifcation.RecId == custInvoiceTable.CustBillingClassification
            join RecId from custInvoiceLine
                where custInvoiceTable.RecId == custInvoiceLine.ParentRecId &&
                        custInvoiceLine.RecId == _custInvoiceLineRecId;

        return billingClassifcation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustBillingClassificationContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container for CustBillingClassification suitable to be assigned to SysLookupMultiSelectCtrl.
    /// </summary>
    /// <param name="_billingClassificationId">
    /// A <c>BillingClassification</c> record id.
    /// </param>
    /// <returns>
    /// Returns a container containing seperate containers for CustBillingClassification.RecId and CustBillingClassification.Name.
    /// Suitable to be assigned to SysLookupMultiSelectCtrl.
    /// </returns>
    public static container getCustBillingClassificationContainer(RefRecId _billingClassificationId)
    {
        container                   billingClassificationIdContainer, billingClassificationNameContainer;
        CustBillingClassification   custBillingClassification;

        custBillingClassification           = CustBillingClassification::find(_billingClassificationId);
        billingClassificationIdContainer    = conIns(billingClassificationIdContainer, 1, custBillingClassification.RecId);
        billingClassificationNameContainer  = conIns(billingClassificationNameContainer, 1, custBillingClassification.BillingClassification);

        return [billingClassificationIdContainer, billingClassificationNameContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves interest code associated with the billing classification.
    /// </summary>
    /// <param name="_custTrans">
    /// The customer transaction record.
    /// </param>
    /// <returns>
    /// Returns interest code record and interest calculation source.
    /// </returns>
    public static container interestCode(CustTrans _custTrans)
    {
        RefRecId                        custInterestRecId;
        CustInterestCodeSource          interestCodeSource;

        CustBillingClassification custBillingClassification = CustBillingClassification::find(_custTrans.CustBillingClassification);

        if (custBillingClassification)
        {
            switch (custBillingClassification.UseFromPostingProfile)
            {
                case NoYes::No:

                    custInterestRecId = custBillingClassification.CustInterest;

                    if (custInterestRecId)
                    {
                        interestCodeSource = custBillingClassification.getCustInterestCodeSourceBillingClassification();
                    }
                break;

                case NoYes::Yes:

                    [custInterestRecId,interestCodeSource] =  CustLedgerAccounts::billingClassPostingProfileinterestCode(_custTrans.AccountNum,
                                                    CustInvoiceJour::findFromCustTrans(_custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum).PostingProfile,
                                                    false);
                break;
            }
        }
        else
        {
            [custInterestRecId,interestCodeSource] = CustLedgerAccounts::billingClassPostingProfileinterestCode(_custTrans.AccountNum,
                                                    CustInvoiceJour::findFromCustTrans(_custTrans.Invoice, _custTrans.TransDate, _custTrans.AccountNum).PostingProfile,
                                                    custBillingClassification.UseFromPostingProfile);
        }

        return [custInterestRecId,interestCodeSource];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInterestCodeSourceBillingClassification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the billing classification enum value of <c>CustInterestCodeSource</c>.
    /// </summary>
    /// <returns>
    /// Enum value of BillingClass of enum <c>CustInterestCodeSource</c>.
    /// </returns>
    protected CustInterestCodeSource getCustInterestCodeSourceBillingClassification()
    {
        return CustInterestCodeSource::BillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefBillingClassification</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs the <c>CustBillingClassification</c> form for the specified billing classification.
    /// </summary>
    /// <param name="_object">
    ///     The object that called the <c>CustBillingClassification</c> form.
    /// </param>
    /// <param name="_custBillingClassificationCodeRecId">
    ///     The unique ID of the <c>CustBillingClassification</c> table referenced by the caller.
    /// </param>
    public static void jumpRefBillingClassification(Object _object,recId _custBillingClassificationCodeRecId)
    {
        Args args = new Args();
        args.record(CustBillingClassification::find(_custBillingClassificationCodeRecId, false));
        args.caller(_object);

        new MenuFunction(menuitemDisplayStr(CustBillingClassification), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySettlementPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustBillingClassification</c> table record by <c>SettlementPriority</c> field value.
    /// </summary>
    /// <param name="_settlementPrioriy">
    /// The settlement priority of billing class.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional
    /// </param>
    /// <returns>
    /// A record in the <c>CustBillingClassification</c> table; otherwise, an empty record.
    /// </returns>
    public static CustBillingClassification findBySettlementPriority(
        SettlementPriority   _settlementPriority,
        boolean _forUpdate = false)
    {
        CustBillingClassification custBillingClassification;

        if (_settlementPriority > 0)
        {
            custBillingClassification.selectForUpdate(_forUpdate);

            select firstonly custBillingClassification
                where custBillingClassification.SettlementPriority == _settlementPriority;
        }

        return custBillingClassification;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS362</DeveloperDocumentation>
	<FormRef>CustBillingClassification</FormRef>
	<Label>@SPS337</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>BillingClassification</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>BillingClassPriorityIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>BillingClassIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustBillingClassificationCode</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustBillingClassificationCode</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingClassification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillingClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CollectionLetter</Name>
			<Label>@SYS13960</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseBillingClassCollectionLetter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCourse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SPS346</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestCode</Name>
			<Label>@SYS3854</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseFromPostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInterest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NumberSequence</Name>
			<Label>@SYS26442</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumberSeq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditNoteNumberSeq</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentTerm</Name>
			<Label>@SYS55132</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RestrictCreditNote</Name>
			<Label>@SPS354</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RestrictCreditNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SettlementPriority</Name>
			<Label>@SPS343</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SettlementPriority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UseFromPostingProfile</Name>
			<Label>@SPS349</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UseFromPostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceNumberSeq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceCode</ExtendedDataType>
			<Label>@SYS4726</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillingClassification</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BillingClassification</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CollectionLetterCourse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CollectionLetterCourseId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditNoteNumberSeq</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceCode</ExtendedDataType>
			<Label>@SPS355</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInterest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS8324</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RestrictCreditNote</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SPS354</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SettlementPriority</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SettlementPriority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseBillingClassCollectionLetter</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS675</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseFromPostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SPS349</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BillingClassIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BillingClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BillingClassPriorityIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SettlementPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInterestIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInterest</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CreditNumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CreditNumberSequenceTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustBillingClassification</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditNoteNumberSeq</Name>
					<SourceEDT>NumberSequenceCode</SourceEDT>
					<Field>CreditNoteNumberSeq</Field>
					<RelatedField>NumberSequence</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustCollectionLetterTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustCollectionLetterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CollectionLetterCourse</Name>
					<SourceEDT>CollectionLetterCourseId</SourceEDT>
					<Field>CollectionLetterCourse</Field>
					<RelatedField>CollectionLetterCourse</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CourseIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInterest</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustInterest</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInterest</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustInterest_CustBillingClassification</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInterest</Name>
					<Field>CustInterest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InvoiceNumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceNumberSequenceTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustBillingClassification</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceNumberSeq</Name>
					<SourceEDT>NumberSequenceCode</SourceEDT>
					<Field>InvoiceNumberSeq</Field>
					<RelatedField>NumberSequence</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymTerm</Name>
					<SourceEDT>PaymTermId</SourceEDT>
					<Field>PaymTerm</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>