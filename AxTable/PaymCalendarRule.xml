<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymCalendarRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the <c>PaymCalendarRule</c> table.
    /// </summary>
    public void delete()
    {
        NoYes isActive = this.IsActive;

        super();

        // Flush cache
        if (isActive == NoYes::Yes)
        {
            PaymCalendarProcessor::paymCalendarRuleChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in the <c>PaymCalendarRule</c> table.
    /// </summary>
    public void insert()
    {
        // From the form, isActive is always false. But it could be true from a direct table write.
        NoYes isActive = this.IsActive;

        this.updateToDefaultPriority();

        super();

        // Flush cache
        if (isActive == NoYes::Yes)
        {
            PaymCalendarProcessor::paymCalendarRuleChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToDefaultPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the priority of a newly created payment calendar rule
    /// to the lowest priority.
    /// </summary>
    /// <remarks>
    /// If a priority has already been specified, the priority will not be updated.
    ///</remarks>
    protected void updateToDefaultPriority()
    {
        if (this.Priority == 0)
        {
            this.Priority = PaymCalendarRule::lastPriority(this.ModuleType) + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a record down in the <c>PaymCalendarRule</c> table by increasing the priority value.
    /// </summary>
    /// <returns>
    /// The updated record in the <c>PaymCalendarRule</c> table.
    /// </returns>
    public PaymCalendarRule moveDown()
    {
        return this.adjustPriority(this.Priority + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a record up in the <c>PaymCalendarRule</c> table by reducing the priority value.
    /// </summary>
    /// <returns>
    /// The updated record in the <c>PaymCalendarRule</c> table.
    /// </returns>
    public PaymCalendarRule moveUp()
    {
        return this.adjustPriority(this.Priority - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in the <c>PaymCalendarRule</c> table.
    /// </summary>
    public void update()
    {
        PaymCalendarRule origPaymCalendarRule;
        PaymCalendarCriteriaRule paymCalendarCriteriaRule;
        PaymCalendarCriteriaRule origPaymCalendarCriteriaRule;
        boolean isFlush;

        // Flush if IsActive or Priority have changed
        origPaymCalendarRule = this.orig();
        isFlush = (this.IsActive != origPaymCalendarRule.IsActive)
            || (this.Priority != origPaymCalendarRule.Priority);

        // Flush if PaymTerm, PaymMode or PaymCalendar have changed
        if (!isFlush)
        {
            paymCalendarCriteriaRule = this as PaymCalendarCriteriaRule;

            if (paymCalendarCriteriaRule != null)
            {
                select firstonly origPaymCalendarCriteriaRule
                    where origPaymCalendarCriteriaRule.RecId == paymCalendarCriteriaRule.RecId;

                isFlush = (paymCalendarCriteriaRule.PaymTerm != origPaymCalendarCriteriaRule.PaymTerm)
                    || (paymCalendarCriteriaRule.PaymCalendar != origPaymCalendarCriteriaRule.PaymCalendar)
                    || (paymCalendarCriteriaRule.CustomerPaymMode != origPaymCalendarCriteriaRule.CustomerPaymMode)
                    || (paymCalendarCriteriaRule.VendorPaymMode != origPaymCalendarCriteriaRule.VendorPaymMode);
            }
        }

        super();

        // Flush cache
        if (isFlush)
        {
            PaymCalendarProcessor::paymCalendarRuleChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>PaymCalendarRule</c> table; if not, an
    /// error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PaymCalendarRuleId _recId)
    {
        boolean isExisting = true;

        if (!PaymCalendarRule::exist(_recId))
        {
            isExisting = checkFailed(strFmt(PaymCalendarRule::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PaymCalendarRule</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PaymCalendarRuleId _recId)
    {
        PaymCalendarRule paymCalendarRule;

        select firstonly Priority from paymCalendarRule
            where paymCalendarRule.RecId == _recId;

        return paymCalendarRule != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveRuleForRuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an active rule occurs in the <c>PaymCalendarRule</c> table for a module and type.
    /// </summary>
    /// <param name="_moduleType">
    /// The module type of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <param name="_ruleType">
    /// The rule type of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existActiveRuleForRuleType(PaymCalendarModuleType _moduleType, PaymCalendarRuleType _ruleType)
    {
        PaymCalendarRule paymCalendarRule;

        select firstonly RecId from paymCalendarRule
            where paymCalendarRule.ModuleType == _moduleType
                && paymCalendarRule.RuleType == _ruleType
                && paymCalendarRule.IsActive == NoYes::Yes;

        return paymCalendarRule != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a rule occurs in the <c>PaymCalendarRule</c> table for a module.
    /// </summary>
    /// <param name="_moduleType">
    /// The module type of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existForModuleType(PaymCalendarModuleType _moduleType)
    {
        PaymCalendarRule paymCalendarRule;

        select firstonly RecId from paymCalendarRule
            where paymCalendarRule.ModuleType == _moduleType;

        return paymCalendarRule != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForRuleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a rule occurs in the <c>PaymCalendarRule</c> table for a module, name and legal
    /// entity.
    /// </summary>
    /// <param name="_moduleType">
    /// The module type of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <param name="_ruleName">
    /// The rule name of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existForRuleName(PaymCalendarModuleType _moduleType, Name _ruleName)
    {
        PaymCalendarRule paymCalendarRule;

        select firstonly RecId from paymCalendarRule
            where paymCalendarRule.ModuleType == _moduleType
                && paymCalendarRule.Name == _ruleName;

        return paymCalendarRule != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForRuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a rule occurs in the <c>PaymCalendarRule</c> table for a module and type.
    /// </summary>
    /// <param name="_moduleType">
    /// The module type of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <param name="_ruleType">
    /// The rule type of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity of the <c>PaymCalendarRule</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existForRuleType(PaymCalendarModuleType _moduleType, PaymCalendarRuleType _ruleType)
    {
        PaymCalendarRule paymCalendarRule;

        select firstonly RecId from paymCalendarRule
            where paymCalendarRule.ModuleType == _moduleType
                && paymCalendarRule.RuleType == _ruleType;

        return paymCalendarRule != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PaymCalendarRule</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendarRule</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendarRule</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendarRule find(
        PaymCalendarRuleId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarRule paymCalendarRule;

        if (_recId)
        {
            paymCalendarRule.selectForUpdate(_forupdate);
            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                paymCalendarRule.concurrencyModel(_concurrencyModel);
            }

            select firstonly paymCalendarRule
                where paymCalendarRule.RecId == _recId;
        }

        return paymCalendarRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextHighestRuleByPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next highest payment calendar rule in terms of priority.
    /// </summary>
    /// <param name = "_priority">The priority to search for.</param>
    /// <param name = "_moduleType">The module type of the <c>PaymCalendarRule</c> record to check for existence.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when it reads the record.</param>
    /// <returns>A record in the <c>PaymCalendarRule</c> table; otherwise, an empty record.</returns>
    /// <remarks>Rules with lower priority values have higher priority.</remarks>
    private static PaymCalendarRule findNextHighestRuleByPriority(
        PaymCalendarPriority _priority,
        PaymCalendarModuleType _moduleType,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarRule paymCalendarRule;

        paymCalendarRule.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendarRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly paymCalendarRule
            order by paymCalendarRule.Priority desc
            where paymCalendarRule.ModuleType == _moduleType
                && paymCalendarRule.Priority <= _priority;

        return paymCalendarRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextLowestRuleByPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next lowest payment calendar rule in terms of priority.
    /// </summary>
    /// <param name = "_priority">The priority to search for.</param>
    /// <param name = "_moduleType">The module type of the <c>PaymCalendarRule</c> record to check for existence.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <param name = "_concurrencyModel">The concurrency model option to use when it reads the record.</param>
    /// <returns>A record in the <c>PaymCalendarRule</c> table; otherwise, an empty record.</returns>
    /// <remarks>Rules with higher priority values have lower priority.</remarks>
    private static PaymCalendarRule findNextLowestRuleByPriority(
        PaymCalendarPriority _priority,
        PaymCalendarModuleType _moduleType,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendarRule paymCalendarRule;

        paymCalendarRule.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendarRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly paymCalendarRule
            order by paymCalendarRule.Priority asc
            where paymCalendarRule.ModuleType == _moduleType
                && paymCalendarRule.Priority >= _priority;

        return paymCalendarRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the largest priority value in the <c>PaymCalendarRule</c> table.
    /// </summary>
    /// <param name="_moduleType">
    /// The module type of the <c>PaymCalendarRule</c> record to check for priority.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity of the <c>PaymCalendarRule</c> record to check for priority.
    /// </param>
    /// <returns>
    /// The largest priority value in the <c>PaymCalendarRule</c> table.
    /// </returns>
    public static PaymCalendarPriority lastPriority(PaymCalendarModuleType _moduleType)
    {
        PaymCalendarRule paymCalendarRule;
        PaymCalendarPriority lastPriority;

        select firstonly Priority from paymCalendarRule
            order by paymCalendarRule.Priority desc
            where paymCalendarRule.ModuleType == _moduleType;

        lastPriority = paymCalendarRule.Priority;
        return lastPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>PaymCalendarRule</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPriority</Name>
				<Source><![CDATA[
    private PaymCalendarRule adjustPriority(PaymCalendarPriority _adjacentPriority)
    {
        PaymCalendarRule adjacentPaymCalendarRule;
        PaymCalendarRule currentPaymCalendarRule;
        PaymCalendarRuleId currentRuleRecId = this.RecId;
        PaymCalendarPriority currentPriority = this.Priority;

        ttsbegin;

        if (currentPriority > _adjacentPriority)
        {
            adjacentPaymCalendarRule = PaymCalendarRule::findNextHighestRuleByPriority(_adjacentPriority, this.ModuleType, true);
        }
        else
        {
            adjacentPaymCalendarRule = PaymCalendarRule::findNextLowestRuleByPriority(_adjacentPriority, this.ModuleType, true);
        }

        if (adjacentPaymCalendarRule)
        {
            currentPaymCalendarRule = PaymCalendarRule::find(currentRuleRecId, true);
            currentPaymCalendarRule.Priority = maxInt();
            currentPaymCalendarRule.update();

            adjacentPaymCalendarRule.Priority = currentPriority;
            adjacentPaymCalendarRule.update();

            currentPaymCalendarRule.Priority = _adjacentPriority;
            currentPaymCalendarRule.update();
        }
        else
        {
            currentPaymCalendarRule = this;
        }

        ttscommit;

        return currentPaymCalendarRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.RecId == 0
            && this.RuleType != PaymCalendarRuleType::Specific
            && PaymCalendarRule::existForRuleType(this.ModuleType, this.RuleType))
        {
            if (this.RuleType == PaymCalendarRuleType::LegalEntityLocation)
            {
                ret = checkFailed("@CashManagement:GLS220347");
            }
            else if (this.ModuleType == PaymCalendarModuleType::Vendor)
            {
                ret = checkFailed("@CashManagement:GLS220346");
            }
            else
            {
                ret = checkFailed("@CashManagement:GLS220354");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymCalendar</ConfigurationKey>
	<DeveloperDocumentation>@CashManagement:GLS220432</DeveloperDocumentation>
	<Label>@CashManagement:GLS220431</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<DataSharingType>Duplicate</DataSharingType>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>Bank</Modules>
	<ReplacementKey>PaymCalendarPriorityRuleIdx</ReplacementKey>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RuleType</Name>
			<Label>@GLS220310</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RuleType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@CashManagement:GLS220312</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymCalendarModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PaymCalendar</ConfigurationKey>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@CashManagement:GLS220335</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymCalendarPriority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RuleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PaymCalendarRuleType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PaymCalendarPriorityRuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymCalendarModuleRuleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>