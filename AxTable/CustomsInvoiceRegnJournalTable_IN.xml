<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsInvoiceRegnJournalTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsInvoiceRegnJournalTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from CustomsInvoiceRegnJournalTable_IN for specified CustomsInvoiceRegnJournalLine_IN record.
    /// </summary>
    public void clearTable()
    {
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTableLoc;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLineLoc;

        delete_from customsInvoiceRegnJournalTableLoc
            notexists join customsInvoiceRegnJournalLineLoc
                where customsInvoiceRegnJournalTableLoc.RecId == customsInvoiceRegnJournalLineLoc.CustomsInvoiceRegnJournalTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts into customs invoice regn journal table.
    /// </summary>
    public void insert()
    {
        CustomsInvoiceRegnJournalLine_IN customsInvoiceRegnJournalLine;
        PurchLine                        purchLine;

        super();

        while select forupdate customsInvoiceRegnJournalLine
            join purchLine
            where purchLine.PurchId                            == this.OrderId
               && customsInvoiceRegnJournalLine.PurchLineRecId == purchLine.RecId
               && customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == 0
        {
            ttsbegin;
            customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId  = this.RecId;
            customsInvoiceRegnJournalLine.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceRegnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// inserts records CustomsInvoiceRegnJournalLine_IN for specified CustomsInvoiceRegnJournalTable_IN table record.
    /// </summary>
    public void insertInvoiceRegnJournalLine()
    {
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;
        PurchLine                           purchLine;

        select RecId from customsInvoiceRegnJournalTable
            where customsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable  == this.RecId;

        if (!customsInvoiceRegnJournalTable.RecId)
        {
            while select purchLine
                where purchLine.PurchId == this.OrderId
            {
                customsInvoiceRegnJournalLine.PurchLineRecId                  = purchLine.RecId;
                customsInvoiceRegnJournalLine.InventDimId                     = purchLine.InventDimId;
                customsInvoiceRegnJournalLine.Receive                         = CustomsInvoiceRegistrateForm_IN::calcReceiveQty(purchLine);
                if (customsInvoiceRegnJournalLine.Receive != 0)
                {
                    customsInvoiceRegnJournalLine.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether <c>CustomsInvoiceRegnJournalTable_IN</c> has been updated
    /// </summary>
    /// <returns>
    /// If true, <c>CustomsInvoiceRegnJournalTable_IN</c> contains updated <c>CustomsInvoiceRegnJournalLine_IN</c> records.
    /// </returns>
    public boolean isUpdated()
    {
        boolean result = false;
        CustomsInvoiceRegnJournalLine_IN customsInvoiceRegnJournalLine;

        if (this.RecId)
        {
            select firstOnly RecId from customsInvoiceRegnJournalLine
                where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == this.RecId
                    && customsInvoiceRegnJournalLine.Updated == NoYes::Yes;
            if (customsInvoiceRegnJournalLine.RecId)
                result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifys field of the table.
    /// </summary>
    /// <param name="_fieldId">
    /// The field id.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        CustomsInvoiceRegnJournalLine_IN customsInvoiceRegnJournalLine;

        super(_fieldId);
        switch (_fieldId)
        {
            case fieldnum(CustomsInvoiceRegnJournalTable_IN, OrderId):
                CustomsInvoiceRegnJournalLine_IN::clearLines();
                this.insertInvoiceRegnJournalLine();
                break;

            case fieldnum(CustomsInvoiceRegnJournalTable_IN, CustomsImportInvoiceNumberTable):

                select firstonly RecId, Updated from customsInvoiceRegnJournalLine
                    where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == this.orig().RecId;

                if (customsInvoiceRegnJournalLine.RecId
                    && customsInvoiceRegnJournalLine.Updated == NoYes::Yes
                    && !this.CustomsImportInvoiceNumberTable)
                {
                    this.CustomsImportInvoiceNumberTable = this.orig().CustomsImportInvoiceNumberTable;
                }
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustomsInvoiceRegnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query object joining  CustomsInvoiceRegnJournalLine_IN table and CustomsInvoiceRegnJournalTable_IN table.
    /// </summary>
    /// <param name="_update">
    /// if true, select record for update
    /// </param>
    /// <returns>
    /// The Query object for CustomsInvoiceRegnJournalLine_IN records.
    /// </returns>
    public Query queryCustomsInvoiceRegnJournalLine(boolean _update = false)
    {
        DictRelation    dictRelation;
        DictField       externdictField;
        DictField       dictField;
        Query           query = new Query();
        Counter         c;

        query.addDataSource(tablenum(CustomsInvoiceRegnJournalLine_IN));
        dictRelation = new DictRelation(tablenum(CustomsInvoiceRegnJournalLine_IN));
        dictRelation.loadTableRelation(this.TableId);
        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField     = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField           = new DictField(tablenum(CustomsInvoiceRegnJournalLine_IN),dictRelation.lineTableValue(c));
                query.dataSourceTable(tablenum(CustomsInvoiceRegnJournalLine_IN)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        query.dataSourceTable(tablenum(CustomsInvoiceRegnJournalLine_IN)).update(_update);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean                             ret;
        PurchTable_W                        purchTable_W;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine_IN;

        ret = super();

        if (ret)
        {
            // call lines validateDelete
            while select * from customsInvoiceRegnJournalLine_IN
                where customsInvoiceRegnJournalLine_IN.CustomsInvoiceRegnJournalTableRecId == this.RecId
            {
                ret = customsInvoiceRegnJournalLine_IN.validateDelete();
                if (!ret) break;
            }

            if (ret)
            {
                ttsbegin;
                purchTable_W = purchTable_W::findByPurchTable(PurchTable::find(this.OrderId).RecId, true);
                purchTable_W.CustomsInvoiceRegistered_IN = NoYes::No;
                purchTable_W.update();
                ttscommit;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                         ret;
        CustomsImporterInvoiceNumber_IN customsImporterInvoiceNumber;
        PurchTable                      purchTable;

        ret = super(_fieldIdToCheck);
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(CustomsInvoiceRegnJournalTable_IN, OrderId) :

                    purchTable = PurchTable::find(this.OrderId);
                    if (purchTable.purchTable_W().CustomsInvoiceRegistered_IN == NoYes::Yes)
                    {
                        ret = false;
                    }
                    if (this.OrderId)
                    {
                        if (!purchTable.isCustomsImportOrder_IN())
                        {
                            ret = checkFailed(strfmt("@GLS5765",this.OrderId));
                        }
                    }
                    break;

                case fieldnum(CustomsInvoiceRegnJournalTable_IN, CustomsImportInvoiceNumberTable):
                    if (this.CustomsImportInvoiceNumberTable)
                    {
                        customsImporterInvoiceNumber = CustomsImportInvoiceNumberTable_IN::find(this.CustomsImportInvoiceNumberTable).ImporterInvoiceNumber;
                        if (!CustomsImportInvoiceNumberTable_IN::checkImporterInvoiceNumber(customsImporterInvoiceNumber))
                        {
                            ret = checkFailed(strfmt("@GLS5745",customsImporterInvoiceNumber));
                        }
                    }
                    break;
                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnJournalTable_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsInvoiceRegnJournalTable_IN table.
    /// </returns>
    public static CustomsInvoiceRegnJournalTable_IN find(
        RefRecId            _recId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        CustomsInvoiceRegnJournalTable_IN customsInvoiceRegnJournalTable;

        customsInvoiceRegnJournalTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsInvoiceRegnJournalTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsInvoiceRegnJournalTable
            where customsInvoiceRegnJournalTable.RecId == _recId;

        return customsInvoiceRegnJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchAndInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CustomsInvoiceRegnJournalTable_IN</c> table for the specified <c>PurchId</c> and <c>CustomsImportInvoiceNumberTable</c>.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> to find <c>CustomsInvoiceRegnJournalTable_IN</c>.
    /// </param>
    /// <param name="_invoiceId">
    /// The <c>CustomsImportInvoiceNumberTable</c> to find <c>CustomsInvoiceRegnJournalTable_IN</c>.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    /// A buffer containing <c>CustomsInvoiceRegnJournalTable_IN</c> table.
    /// </returns>
    public static CustomsInvoiceRegnJournalTable_IN findByPurchAndInvoice(
        PurchId   _purchId,
        RefRecId  _invoiceId,
        boolean   _forupdate = false )
    {
        CustomsInvoiceRegnJournalTable_IN customsInvoiceRegnJournalTable;

        customsInvoiceRegnJournalTable.selectForUpdate(_forupdate);
        select firstonly customsInvoiceRegnJournalTable
            where customsInvoiceRegnJournalTable.OrderId                         == _purchId
            &&    customsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable == _invoiceId;

        return customsInvoiceRegnJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsInvoiceRegnJournalTable_IN table for the specified record id.
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId to find CustomsInvoiceRegnJournalTable_IN.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsInvoiceRegnJournalTable_IN table.
    /// </returns>
    public static CustomsInvoiceRegnJournalTable_IN findByPurchId(
        PurchId             _purchId,
        boolean             _forupdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        CustomsInvoiceRegnJournalTable_IN customsInvoiceRegnJournalTable;

        customsInvoiceRegnJournalTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsInvoiceRegnJournalTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsInvoiceRegnJournalTable
            where customsInvoiceRegnJournalTable.OrderId == _purchId;

        return customsInvoiceRegnJournalTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64137</DeveloperDocumentation>
	<Label>@GLS5753</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CustomsImportInvoiceNumberTable</TitleField1>
	<TitleField2>OrderId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>OrderIdInvoiceRegnIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustomsInvoiceRegnJournalLine_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustomsInvoiceRegnJournalLine_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsImportInvoiceNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportInvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomsImportInvoiceNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportInvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsImportInvoiceNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS60990</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ImportInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OrderIdInvoiceRegnIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsImportInvoiceNumberTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OrderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsImportInvoiceNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsImportInvoiceNumberTable_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsImportInvoiceNumberTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsImportInvoiceNumberTable_IN_CustomsInvoiceRegnJournalTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsImportInvoiceNumberTable</Name>
					<Field>CustomsImportInvoiceNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderId</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>OrderId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>