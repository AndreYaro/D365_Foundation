<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEPCGSchemeTable_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EximEPCGSchemeTable_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkImportOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximEPCGImportTrans_IN record exists for specified EximEPCGSchemesTable_IN RecId.
    /// </summary>
    /// <returns>true if EximEPCGImportTrans_IN record is found otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkImportOrder()
    {
        return (select firstonly SchemeTableRecId from eximEPCGImportTrans_IN
                    where eximEPCGImportTrans_IN.SchemeTableRecId == this.RecId).SchemeTableRecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.SchemeDateTime = DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldnum(EximEPCGSchemeTable_IN, Basis) :
                    if (this.Basis == EximEPCGSchemeBasis_IN::TechnologyUpgrade
                        && !EximParameters_IN::find().epcgEnableTechUpgrade)
                    {
                        ret = checkFailed(strfmt("@GLS61933", "@GLS62053"));
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableMergeButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the merge functionality is enabled for given EximEPCGSchemesTable_IN records.
    /// </summary>
    /// <param name="_epcgSchemeTable">FormDataSource</param>
    /// <returns>true if the merge functionality is enabled otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean enableMergeButton(FormDataSource _epcgSchemeTable)
    {
        EximEPCGSchemeTable_IN   epcgSchemeTable;
        EximEPCGLicenseStatus_IN origEPCGLicenseStatus;
        EximEPCGLicenseStatus_IN epcgLicenseStatus;
        RefRecId                 portsRecId;
        boolean                  ret = true;
        EximEPCGSchemeLine_IN    epcgSchemeLine;
        TransDate                periodStart;
        TransDate                periodEnd;
        RecId                    calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        for (epcgSchemeTable = _epcgSchemeTable.getFirst(true); epcgSchemeTable; epcgSchemeTable = _epcgSchemeTable.getNext())
        {
            if (!periodStart && !periodEnd)
            {
                periodStart  = LedgerFiscalCalendar::findOpeningPeriodByDate(calendarRecId, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(epcgSchemeTable.IssueDateTime, DateTimeUtil::getUserPreferredTimeZone()))).StartDate;
                periodEnd    = LedgerFiscalCalendar::findClosingPeriodByDate(calendarRecId, DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(epcgSchemeTable.IssueDateTime, DateTimeUtil::getUserPreferredTimeZone()))).EndDate;

                portsRecId = epcgSchemeTable.EximPorts;
                origEPCGLicenseStatus = EximEPCGSchemeLine_IN::findRefRecId(epcgSchemeTable.RecId).LicenseStatus;
            }
            epcgLicenseStatus = EximEPCGSchemeLine_IN::findRefRecId(epcgSchemeTable.RecId).LicenseStatus;

            select firstonly RecId
                from epcgSchemeLine
                    where epcgSchemeLine.SchemeTableRecId == epcgSchemeTable.RecId
                       && epcgSchemeLine.LicenseStatus == EximEPCGLicenseStatus_IN::Extended;

            if (ret
                && (epcgSchemeLine.RecId
                || (( epcgSchemeTable.Status != EximEPCGSchemeStatus_IN::Approved
                  ||  epcgSchemeTable.EximPorts != portsRecId
                  ||  epcgLicenseStatus != origEPCGLicenseStatus)
                  || (epcgLicenseStatus != EximEPCGLicenseStatus_IN::Original
                   && epcgLicenseStatus != EximEPCGLicenseStatus_IN::Domestic))))
            {
                ret = false;
            }

            if (ret
                && (DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(epcgSchemeTable.IssueDateTime, DateTimeUtil::getUserPreferredTimeZone())) < periodStart
                 || DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(epcgSchemeTable.IssueDateTime, DateTimeUtil::getUserPreferredTimeZone())) > periodEnd))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximEPCGSchemeTable_IN table for the specified id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing EximEPCGSchemeTable_IN table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeTable_IN find(
        RefRecId            _recId,
        boolean             _forUpdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        EximEPCGSchemeTable_IN  eximEPCGSchemeTable;

        eximEPCGSchemeTable.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            eximEPCGSchemeTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly eximEPCGSchemeTable
            where eximEPCGSchemeTable.RecId == _recId;

        return eximEPCGSchemeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximEPCGSchemeTable_IN table for the specified RecId.
    /// </summary>
    /// <param name="_recId">RefRecId</param>
    /// <param name="_forUpdate">boolean</param>
    /// <returns>EximEPCGSchemeTable_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeTable_IN findRecId(
        RefRecId   _recId,
        boolean    _forUpdate = false)
    {
        EximEPCGSchemeTable_IN  eximEPCGSchemeTable;

        if (_recId)
        {
            eximEPCGSchemeTable.selectForUpdate(_forUpdate);

            select firstonly eximEPCGSchemeTable
                where eximEPCGSchemeTable.RecId == _recId;
        }

        return eximEPCGSchemeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSchemeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EximEPCGSchemeTable_IN table for the specified EximEPCGId_IN.
    /// </summary>
    /// <param name="_eximEPCGSchemeId">EximEPCGId_IN</param>
    /// <param name="_forUpdate">boolean</param>
    /// <returns>EximEPCGSchemeTable_IN table record</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGSchemeTable_IN findSchemeId(
        EximEPCGId_IN _eximEPCGSchemeId,
        boolean       _forUpdate = false)
    {
        EximEPCGSchemeTable_IN  eximEPCGSchemeTable;

        if (_eximEPCGSchemeId)
        {
            eximEPCGSchemeTable.selectForUpdate(_forUpdate);

            select firstonly eximEPCGSchemeTable
                where eximEPCGSchemeTable.SchemeId == _eximEPCGSchemeId;
        }

        return eximEPCGSchemeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLicense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if EximEPCGSchemeTable_IN is not closed for specified EximEPCGId_IN.
    /// </summary>
    /// <param name="_origSchemeId">EximEPCGId_IN</param>
    /// <returns>true if EximEPCGSchemeTable_IN is not closed otherwise, false</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isValidLicense(EximEPCGId_IN _origSchemeId)
    {
        return _origSchemeId
            &&  (select firstonly RecId from eximEPCGSchemeTable_IN
                    where eximEPCGSchemeTable_IN.SchemeId   == _origSchemeId
                       && eximEPCGSchemeTable_IN.Closed     == NoYes::No
                       && (eximEPCGSchemeTable_IN.Status    == EximEPCGSchemeStatus_IN::Approved
                       || eximEPCGSchemeTable_IN.Status     == EximEPCGSchemeStatus_IN::TechUpgrade)).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSchemeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates EximEPCGSchemeTable_IN table Status and Closed fields for specified RecId.
    /// </summary>
    /// <param name="_epcgSchemeTableRecId">RefRecId</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateSchemeStatus(RefRecId _epcgSchemeTableRecId)
    {
        EximEPCGSchemeTable_IN epcgSchemeTable;

        ttsbegin;

        epcgSchemeTable = EximEPCGSchemeTable_IN::findRecId(_epcgSchemeTableRecId, true);
        if (epcgSchemeTable)
        {
            epcgSchemeTable.Status = EximEPCGSchemeStatus_IN::Redeemed;
            epcgSchemeTable.Closed = NoYes::Yes;
            epcgSchemeTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS62454</DeveloperDocumentation>
	<FormRef>EximEPCGSchemeTable_IN</FormRef>
	<Label>@GLS62119</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>SchemeId</TitleField1>
	<TitleField2>Basis</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>ExportImportIndia</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>SchemeIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EximEPCGExportTrans_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGExportTrans_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGImportableItems_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGImportableItems_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGImportTrans_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGImportTrans_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGSchemeApprove_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGSchemeApprove_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGSchemeLine_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGSchemeLine_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>EximEPCGSchemeMergeReference_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EximEPCGSchemeMergeReference_IN</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EximPorts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Lines</Name>
			<Label>@SYS15451</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicenseNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssueDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalBasis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportValueMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportExpiryDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SchemeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SchemeDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EximPorts</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Basis</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalBasis</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximEPCGExportObligationBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Basis</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximEPCGSchemeBasis_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS18742</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EximPorts</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS61500</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ImportExpiryDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@GLS62344</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ImportValueMST</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@GLS62095</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>IssueDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@GLS62283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicenseNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>EximLicenseNum_IN</ExtendedDataType>
			<Label>@SYS114298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>SchemeDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@GLS62116</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SchemeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximEPCGId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EximEPCGSchemeStatus_IN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SchemeIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SchemeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EximPortsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EximPorts</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EximPorts</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EximPorts_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EximPorts_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EximPorts_IN_EximEPCGSchemeTable_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EximPorts</Name>
					<Field>EximPorts</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>