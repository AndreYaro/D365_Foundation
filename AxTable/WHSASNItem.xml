<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSASNItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSASNItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.updateQtyLeftToStructure(this.LoadLineRefRecId, 0, true);

        this.deleteRelatedASNItemReceipts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedASNItemReceipts</Name>
				<Source><![CDATA[
    private void deleteRelatedASNItemReceipts()
    {
        WHSASNItemReceipt::deleteByASNItemRecId(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method of product item name.
    /// </summary>
    /// <returns>
    /// Item name of the product.
    /// </returns>
    display ItemName displayItemName()
    {
        return EcoResProductTranslation::findByProductLanguage(InventTable::itemProduct(this.ItemId), Global::currentUserLanguage()).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method of inventory total weight.
    /// </summary>
    /// <returns>
    /// Total weight of the inventory.
    /// </returns>
    display Weight displayItemWeight()
    {
        return InventTable::find(this.ItemId).grossWeight() *
               InventTableModule::unitConvert(this.ItemId, ModuleInventPurchSales::Invent, this.uom, this.Qty, this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        Qty convertedQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                 this.InventDimId,
                                                                                                 this.Qty,
                                                                                                 this.UOM,
                                                                                                 WHSLoadLine::findbyRecId(this.LoadLineRefRecId).UOM,
                                                                                                 NoYes::No,
                                                                                                 NoYes::No);

        this.updateQtyLeftToStructure(this.LoadLineRefRecId, -convertedQty);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds dimensions of the inventory item.
    /// </summary>
    /// <returns>
    /// <c>InventDim</c> record containing dimension info of the item.
    /// </returns>
    InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.orig().uom == this.uom)
        {
            this.updateQtyLeftToStructure(this.LoadLineRefRecId, this.orig().Qty - this.Qty);
        }
        else
        {
            Qty convertedQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
                                                                                                     this.InventDimId,
                                                                                                     this.orig().Qty,
                                                                                                     this.orig().UOM,
                                                                                                     this.UOM,
                                                                                                     NoYes::No,
                                                                                                     NoYes::No);

            this.updateQtyLeftToStructure(this.LoadLineRefRecId, convertedQty - this.Qty);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyLeftToStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates quantity left to structure on load line.
    /// </summary>
    /// <param name="_recId">
    /// RecId of the load line.
    /// </param>
    /// <param name="_qty">
    /// Quantity to be added to structure.
    /// </param>
    /// <param name="_allowZeroQty">
    /// Determines if quantity left to structure should be updated even if <c>_qty</c> is zero; optional.
    /// </param>
    public void updateQtyLeftToStructure(RefRecId _recId, Qty _qty, boolean _allowZeroQty = false)
    {
        if (_qty || _allowZeroQty)
        {
            WHSLoadLine loadLine = WHSLoadLine::findbyRecId(_recId, true);

            if (loadLine)
            {
                ttsbegin;
                const boolean IncludeOverDelivery = false;
                loadLine.QtyLeftToStructure = loadLine.getQtyLeftToStructure(IncludeOverDelivery, _qty);
                loadLine.write();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates quantity of the ASN item.
    /// </summary>
    /// <returns>
    /// True if the quantity is validated.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Quantity exceeds available items.
    /// </exception>
    boolean validateQty()
    {
        Qty newQtyLeftToStructure;

        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(this.LoadLineRefRecId);

        if (loadLine)
        {
            newQtyLeftToStructure = loadLine.getQtyLeftToStructure() + this.orig().Qty - this.Qty;
        }

        if (newQtyLeftToStructure < 0)
        {
            throw error(strFmt("@WAX502", -newQtyLeftToStructure));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret = super();

        ret = ret && this.validateQty() && this.Qty > 0;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts quantity of ASN items with a unit of measure.
    /// </summary>
    /// <param name="_loadLine">
    /// The load line that ASN items belong to.
    /// </param>
    /// <param name="_uom">
    /// UOM to be used to convert.
    /// </param>
    static void convertToUnit(WHSLoadLine _loadLine, WHSUOM _uom)
    {
        WHSASNItem      asnItem;

        ttsbegin;

        while select forupdate asnItem
            where asnItem.LoadLineRefRecId == _loadLine.RecId
        {
            asnItem.Qty		    = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(asnItem.ItemId,
                                                                                                        asnItem.InventDimId,
                                                                                                        asnItem.Qty,
                                                                                                        asnItem.UOM,
                                                                                                        _uom,
                                                                                                        NoYes::No,
                                                                                                        NoYes::No);
            asnItem.uom      = _uom;
            
            asnItem.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a specific record exists with given parameters.
    /// </summary>
    /// <param name="_licensePlateId">
    /// The parameter of type <c>WHSLicensePlateId</c>.
    /// </param>
    /// <param name="_module">
    /// Module of the ASN item.
    /// </param>
    /// <param name="_itemId">
    /// Item id of the ASN item.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSLicensePlateId   _licensePlateId,
                                WHSModule           _module,
                                ItemId              _itemId)
    {
        return (_licensePlateId && _module && _itemId) &&
               (select firstonly RecId from whsasnItem
                where whsasnItem.LicensePlateId      == _licensePlateId &&
                      whsasnItem.Module              == _module &&
                      whsasnItem.ItemId              == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record with given parameters.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id of the ASN item.
    /// </param>
    /// <param name="_module">
    /// Module of the ASN item.
    /// </param>
    /// <param name="_itemId">
    /// Item id of the ASN item.
    /// </param>
    /// <param name="_inventDimId">
    /// Dimension of the ASN item.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that was searched for.
    /// </returns>
    public static WHSASNItem find(WHSLicensePlateId _licensePlateId,
                                  WHSModule         _module,
                                  ItemId            _itemId,
                                  InventDimId       _inventDimId,
                                  boolean           _forupdate = false)
    {
        WHSASNItem    asnItem;

        if (_licensePlateId &&
            _module &&
            _itemId &&
            _inventDimId)
        {
            asnItem.selectForUpdate(_forupdate);

            select firstonly asnItem
                where asnItem.LicensePlateId     == _licensePlateId &&
                      asnItem.Module             == _module &&
                      asnItem.ItemId                == _itemId &&
                      asnItem.InventDimId           == _inventDimId;
        }

        return asnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLPModuleItemLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record with given parameters.
    /// </summary>
    /// <param name="_licensePlateId">
    /// The parameter of type <c>WHSLicensePlateId</c>.
    /// </param>
    /// <param name="_module">
    /// Module of the ASN item.
    /// </param>
    /// <param name="_itemId">
    /// Item id of the ASN item.
    /// </param>
    /// <param name="_recId">
    /// Load line that ASN item belongs to.
    /// </param>
    /// <param name="_inventDimId">
    /// Dimension of the ASN item.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether record is selected for update.
    /// </param>
    /// <returns>
    /// The record that was searched for.
    /// </returns>
    public static WHSASNItem findByLPModuleItemLineNum(WHSLicensePlateId    _licensePlateId,
                                                       WHSModule            _module,
                                                       ItemId               _itemId,
                                                       RefRecId             _recId,
                                                       InventDimId          _inventDimId,
                                                       boolean              _forupdate = false)
    {
        WHSASNItem    asnItem;

        if (_licensePlateId &&
            _module         &&
            _itemId         &&
            _inventDimId    &&
            _recId)
        {
            asnItem.selectForUpdate(_forupdate);

            select firstonly asnItem
                where asnItem.LicensePlateId     == _licensePlateId
                    && asnItem.Module            == _module
                    && asnItem.ItemId            == _itemId
                    && asnItem.InventDimId       == _inventDimId
                    && asnItem.LoadLineRefRecId  == _recId;
        }

        return asnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>WHSASNItem</c> buffer based on the reference ID.
    /// </summary>
    /// <param name = "_asnItemRecId">Reference ID of the <c>WHSASNItem</c> record.</param>
    /// <param name = "_forupdate">Determines whether record is selected for update.</param>
    /// <returns>A <c>WHSASNItem</c> buffer.</returns>
    public static WHSASNItem findByRecId(WHSASNItemRecId _asnItemRecId, boolean _forupdate = false)
    {
        WHSASNItem    asnItem;

        if (_asnItemRecId)
        {
            asnItem.selectForUpdate(_forupdate);

            select firstonly asnItem
                where asnItem.RecId == _asnItemRecId;
        }

        return asnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptWorkCreatedQty</Name>
				<Source><![CDATA[
    private WHSWorkCreatedQty receiptWorkCreatedQty()
    {
        WHSWorkCreatedQty workCreatedQty = this.WorkCreatedQty;

        if (this.RecId)
        {
            WHSASNItemReceipt asnItemReceipt;

            select firstonly WorkCreatedQty from asnItemReceipt
                where asnItemReceipt.ASNItem == this.RecId;

            workCreatedQty += asnItemReceipt.WorkCreatedQty;
        }
        
        return workCreatedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReceiptWorkCreatedQty</Name>
				<Source><![CDATA[
    [Hookable(false), SysClientCacheDataMethod(true)]
    internal display WHSWorkCreatedQty displayReceiptWorkCreatedQty()
    {
        return this.receiptWorkCreatedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCapturedWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments the captured weight.
    /// </summary>
    /// <param name = "_asnItemRecId">Reference ID of the <c>WHSASNItem</c> record to be updated.</param>
    /// <param name = "_capturedWeight">Captured Weight to be updated.</param>
    [Hookable(false)]
    internal static void updateCapturedWeight(WHSASNItemRecId _asnItemRecId, WHSCapturedWeight _capturedWeight)
    {
        ttsbegin;

        WHSASNItem asnItem = WHSASNItem::findByRecId(_asnItemRecId, true);

        if (asnItem)
        {
            asnItem.CapturedWeight += _capturedWeight;
            asnItem.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnyForUomStructure</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existsAnyForUomStructure(WHSLicensePlateId _licensePlateId, WHSModule _module, WHSShipmentId _shipmentId)
    {
        WHSASNItem asnItem;

        select firstonly RecId from asnItem 
            where asnItem.LicensePlateId == _licensePlateId 
               && asnItem.Module == _module 
               && asnItem.ShipmentId == _shipmentId;

        return asnItem.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4325</DeveloperDocumentation>
	<FormRef>WHSPackingStructure</FormRef>
	<Label>@WAX655</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LicensePlateId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LicensePlateModuleItemLoadRecIdDimIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>LicensePlateModuleItemLoadRecIdDimIdIdx</PrimaryIndex>
	<ReplacementKey>LicensePlateModuleItemLoadRecIdDimIdIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreatedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchExpirationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCreatedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchExpirationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BatchExpirationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchExpDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSASNLicensePlateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadLineRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WHSModule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProductQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUOM</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WorkCreatedQty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkCreatedQty</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CapturedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCapturedWeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LicensePlateModuleItemLoadRecIdDimIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadLineRefRecIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadLineRefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UOM</Name>
					<Field>UOM</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLoadLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadLineRefRecId</Name>
					<Field>LoadLineRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSUOMStructure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSUOMStructure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Module</Name>
					<Field>Module</Field>
					<RelatedField>Module</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<SourceEDT>WHSLicensePlateId</SourceEDT>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>