<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUserDefinedCertificateProfileLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailUserDefinedCertificateProfileLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailUserDefinedCertificateProfileLine</c> table.
    /// </summary>
    /// <param name = "_recId">The record ID for which to find the record from the <c>RetailUserDefinedCertificateProfileLine</c> table.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>RetailUserDefinedCertificateProfileLine</c> table; otherwise, an empty record.</returns>
    internal static RetailUserDefinedCertificateProfileLine findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        RetailUserDefinedCertificateProfileLine retailUserDefinedCertificateProfileLine;

        if (_recId)
        {
            retailUserDefinedCertificateProfileLine.selectForUpdate(_forUpdate);

            select firstonly retailUserDefinedCertificateProfileLine
                where retailUserDefinedCertificateProfileLine.RecId == _recId;
        }

        return retailUserDefinedCertificateProfileLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movePriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases/Decreases the priority of the given record.
    /// </summary>
    /// <param name = "_profileLine">A <c>RetailUserDefinedCertificateProfileLine</c> record which priority is changed.</param>
    /// <param name = "_moveUp">A Boolean value that indicates whether to increase/decrease the priority of the current record; optional.</param>
    /// <returns>A record with updated priority; otherwise an empty record.</returns>
    internal static RetailUserDefinedCertificateProfileLine movePriority(RetailUserDefinedCertificateProfileLine _profileLine, boolean _moveUp = true)
    {
        RetailUserDefinedCertificateProfileLine line;

        if (_profileLine)
        {
            RetailUserDefinedCertificateProfileLine nextLine = RetailUserDefinedCertificateProfileLine::findWithNextPriorityValue(_profileLine, !_moveUp);
            if (nextLine)
            {
                line = RetailUserDefinedCertificateProfileLine::swapPriorities(_profileLine, nextLine);
            }
        }

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPriorities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps priorities of two <c>RetailUserDefinedCertificateProfileLine</c> records.
    /// </summary>
    /// <param name = "_sourceLine">A <c>RetailUserDefinedCertificateProfileLine</c> source record.</param>
    /// <param name = "_targetLine">A <c>RetailUserDefinedCertificateProfileLine</c> target record.</param>
    /// <returns>A source record with updated priority if both records exist; otherwise a source record.</returns>
    private static RetailUserDefinedCertificateProfileLine swapPriorities(RetailUserDefinedCertificateProfileLine _sourceLine, RetailUserDefinedCertificateProfileLine _targetLine)
    {
        if (_sourceLine && _targetLine)
        {
            ttsbegin;
            _sourceLine.selectForUpdate(true);
            _targetLine.selectForUpdate(true);

            RetailUserDefinedCertificateProfileLinePriority currentPriority = _sourceLine.Priority;
            RetailUserDefinedCertificateProfileLinePriority nextPriority = _targetLine.Priority;

            _sourceLine.Priority = maxInt();
            _sourceLine.update();
            _targetLine.Priority = currentPriority;
            _targetLine.update();
            _sourceLine.Priority = nextPriority;
            _sourceLine.update();
            ttscommit;
        }

        return _sourceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRetailUserDefinedCertificateProfileLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> for <c>RetailUserDefinedCertificateProfileLine</c> table.
    /// </summary>
    /// <param name = "_profileCompany">A certificate profile company recId.</param>
    /// <param name = "_profileLinePriority">A certificate profile line priority.</param>
    /// <param name = "_priorityCondition">A condition to find records , e.g. '<', '>', '='.</param>
    /// <param name = "_prioritySortOrder">A priority sort order.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <param name = "_firstOnly">A Boolean value that indicates whether to fetch only the first record; optional.</param>
    /// <returns>A <c>Query</c> with the record(s) of higher/lower priority value.</returns>
    private static Query queryRetailUserDefinedCertificateProfileLine(
        RetailUserDefinedCertificateProfileCompanyRefRecId _profileCompany,
        RetailUserDefinedCertificateProfileLinePriority _profileLinePriority,
        str _priorityCondition = '',
        SortOrder _prioritySortOrder = SortOrder::Ascending,
        boolean _forUpdate = false,
        boolean _firstOnly = false)
    {
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(RetailUserDefinedCertificateProfileLine));

        qbds.update(_forUpdate);
        qbds.firstOnly(_firstOnly);

        qbds.addSortField(fieldNum(RetailUserDefinedCertificateProfileLine, Priority), _prioritySortOrder);
        qbds.addRange(fieldNum(RetailUserDefinedCertificateProfileLine, CertificateProfileCompany)).value(queryValue(_profileCompany));

        if (_priorityCondition)
        {
            qbds.addRange(fieldNum(RetailUserDefinedCertificateProfileLine, Priority)).value(strFmt('%1%2', _priorityCondition, _profileLinePriority));
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithNextPriorityValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record with higher/lower priority value than given one.
    /// </summary>
    /// <param name = "_profileLine">A <c>RetailUserDefinedCertificateProfileLine</c> record which Priority is base.</param>
    /// <param name = "_findNextHigherPriority">A Boolean value that indicates whether to find the record with the next higher priority value; optional.</param>
    /// <returns>A record in the <c>RetailUserDefinedCertificateProfileLine</c> table; otherwise, an empty record.</returns>
    internal static RetailUserDefinedCertificateProfileLine findWithNextPriorityValue(RetailUserDefinedCertificateProfileLine _profileLine, boolean _findNextHigherPriority = true)
    {
        str priorityCondition;
        SortOrder sortOrder;

        if (_findNextHigherPriority)
        {
            priorityCondition = '>';
            sortOrder = SortOrder::Ascending;
        }
        else
        {
            priorityCondition = '<';
            sortOrder = SortOrder::Descending;
        }

        RetailUserDefinedCertificateProfileLine nextLine;

        QueryRun qr = new QueryRun(RetailUserDefinedCertificateProfileLine::queryRetailUserDefinedCertificateProfileLine(_profileLine.CertificateProfileCompany, _profileLine.Priority, priorityCondition, sortOrder, false, true));
        if (qr.next())
        {
            nextLine = qr.get(tableNum(RetailUserDefinedCertificateProfileLine));
        }

        return nextLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxPriorityValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the max priority value.
    /// </summary>
    /// <param name = "_profileCompany">A certificate profile company recId.</param>
    /// <returns>A priority value.</returns>
    private static RetailUserDefinedCertificateProfileLinePriority getMaxPriorityValue(RetailUserDefinedCertificateProfileCompanyRefRecId _profileCompany)
    {
        RetailUserDefinedCertificateProfileLinePriority maxPriority;

        QueryRun qr = new QueryRun(RetailUserDefinedCertificateProfileLine::queryRetailUserDefinedCertificateProfileLine(_profileCompany, 0, '>', SortOrder::Descending, false, true));
        if (qr.next())
        {
            RetailUserDefinedCertificateProfileLine maxPriorityLine = qr.get(tableNum(RetailUserDefinedCertificateProfileLine));
            maxPriority = maxPriorityLine.Priority;
        }

        return maxPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changePriorities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases (decreases) priorities of <c>RetailUserDefinedCertificateProfileLine</c> records with higher (lower) priorities than the given.
    /// </summary>
    /// <param name = "_profileCompany">A certificate profile company recId.</param>
    /// <param name = "_profileLinePriority">A certificate profile line priority.</param>
    /// <param name = "_increasePriorities">A Boolean value that indicates whether to find the record with the next higher priority value; optional.</param>
    private static void changePriorities(
        RetailUserDefinedCertificateProfileCompanyRefRecId _profileCompany,
        RetailUserDefinedCertificateProfileLinePriority _profileLinePriority,
        boolean _increasePriorities = true)
    {
        int priorityDifference;
        str priorityCondition;
        SortOrder sortOrder;

        if (_increasePriorities)
        {
            priorityDifference = 1;
            priorityCondition = '';
            sortOrder = SortOrder::Descending;
        }
        else
        {
            priorityDifference = -1;
            priorityCondition = '>';
            sortOrder = SortOrder::Ascending;
        }

        ttsbegin;
        QueryRun qr = new QueryRun(RetailUserDefinedCertificateProfileLine::queryRetailUserDefinedCertificateProfileLine(_profileCompany, _profileLinePriority, priorityCondition, sortOrder, true, false));

        while(qr.next())
        {
            RetailUserDefinedCertificateProfileLine line = qr.get(tableNum(RetailUserDefinedCertificateProfileLine));
            line.Priority = line.Priority + priorityDifference;
            line.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new record in the <c>RetailUserDefinedCertificateProfileLine</c> table.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        // Initialize the current <c>RetailUserDefinedCertificateProfileLine</c> record with the lowest priority (highest by value),
        // if it is not already set.
        if (!this.Priority)
        {
            RetailUserDefinedCertificateProfileLinePriority maxPriority = RetailUserDefinedCertificateProfileLine::getMaxPriorityValue(this.CertificateProfileCompany);

            this.Priority = maxPriority + 1;
        }

        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the <c>RetailUserDefinedCertificateProfileLine</c> table and decreases priorities of remaining lines.
    /// </summary>
    public void delete()
    {
        RetailUserDefinedCertificateProfileCompanyRefRecId profileCompanyRefRecId = this.CertificateProfileCompany;
        RetailUserDefinedCertificateProfileLinePriority profileLinePriority = this.Priority;

        super();

        RetailUserDefinedCertificateProfileLine::changePriorities(profileCompanyRefRecId, profileLinePriority, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStoreNameField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the StoreName field value is one of the <c>System.Security.Cryptography.X509Certificates.StoreName</c> enum values.
    /// </summary>
    /// <returns>true if the field is valid or not specified; otherwise, false.</returns>
    private boolean validateStoreNameField()
    {
        boolean result = true;

        if (this.StoreName)
        {
            System.Exception ex;
            try
            {
                System.Security.Cryptography.X509Certificates.StoreName clrStoreName = ClrInterop::parseClrEnum("System.Security.Cryptography.X509Certificates.StoreName", this.StoreName);
            }
            catch(ex)
            {
                result = checkFailed(strFmt("@SYS78966", "@Retail:RetailUserDefinedCertificateProfileLineStoreName"));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStoreLocationField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the StoreLocation field value is one of the <c>System.Security.Cryptography.X509Certificates.StoreLocation</c> enum values.
    /// </summary>
    /// <returns>true if the field is valid or not specified; otherwise, false.</returns>
    private boolean validateStoreLocationField()
    {
        boolean result = true;

        if (this.StoreLocation)
        {
            System.Exception ex;
            try
            {
                System.Security.Cryptography.X509Certificates.StoreLocation clrStoreLocation = ClrInterop::parseClrEnum("System.Security.Cryptography.X509Certificates.StoreLocation", this.StoreLocation);
            }
            catch(ex)
            {
                result = checkFailed(strFmt("@SYS78966", "@Retail:RetailUserDefinedCertificateProfileLineStoreLocation"));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInactiveFieldsByCertificateLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears values for inactive fields based on the CertificateLocationType field.
    /// </summary>
    private void clearInactiveFieldsByCertificateLocationType()
    {
        switch(this.CertificateLocationType)
        {
            case RetailUserDefinedCertificateProfileLineLocationType::KeyVault:
                this.Thumbprint = '';
                this.StoreLocation = '';
                this.StoreName = '';
                break;
            case RetailUserDefinedCertificateProfileLineLocationType::LocalCertificate:
                this.KeyVaultCertificate = 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(RetailUserDefinedCertificateProfileLine, CertificateLocationType):
                this.clearInactiveFieldsByCertificateLocationType();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch(_fieldIdToCheck)
            {
                case fieldNum(RetailUserDefinedCertificateProfileLine, StoreLocation):
                    ret = this.validateStoreLocationField();
                    break;
                case fieldNum(RetailUserDefinedCertificateProfileLine, StoreName):
                    ret = this.validateStoreNameField();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@Retail:RetailUserDefinedCertificateProfileLineTableDevDoc</DeveloperDocumentation>
	<FormRef>RetailUserDefinedCertificateProfileLine</FormRef>
	<Label>@Retail:RetailUserDefinedCertificateProfileLineTableTitle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CompanyPriorityIdx</ClusteredIndex>
	<PrimaryIndex>CompanyPriorityIdx</PrimaryIndex>
	<ReplacementKey>CompanyPriorityIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateProfileCompany</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateLocationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Thumbprint</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Comments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CertificateProfileCompany</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RetailUserDefinedCertificateProfileCompanyRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserDefinedCertificateProfileLinePriority</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CertificateLocationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<EnumType>RetailUserDefinedCertificateProfileLineLocationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserDefinedCertificateProfileLineStoreLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Thumbprint</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserDefinedCertificateProfileLineThumbprint</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StoreName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserDefinedCertificateProfileLineStoreName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comments</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUserDefinedCertificateProfileLineComment</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CompanyPriorityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CertificateProfileCompany</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailUserDefinedCertificateProfileCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailUserDefinedCertificateProfileCompany</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CertificateProfileCompany</Name>
					<Field>CertificateProfileCompany</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificate</Name>
					<Field>KeyVaultCertificate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>