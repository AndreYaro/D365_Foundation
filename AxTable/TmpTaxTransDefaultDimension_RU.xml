<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTaxTransDefaultDimension_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTaxTransDefaultDimension_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFromSourceDocumentLine</Name>
				<Source><![CDATA[
    private void addFromSourceDocumentLine(TaxTrans _taxTrans)
    {
        List                    distributions = AccountingDistribution::getDistributionList(
            AccountingDistribution::getLastSourceDocumentLineEvent(_taxTrans.SourceDocumentLine).RecId,
            _taxTrans.SourceDocumentLine);
        Enumerator              i             = distributions.getEnumerator();
        AccountingDistribution  distribution;
        while (i.moveNext())
        {
            distribution                    = i.current();
            this.DefaultDimension           = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(distribution.LedgerDimension);
            this.AllocationFactor           = distribution.AllocationFactor;
            this.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRTax25Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Applies the given profit tax dimension parameters to all dimensions in the table.
    /// </summary>
    /// <param name="_dimension">
    ///   Dimension parameters to apply.
    /// </param>
    public void applyRTax25Dimension(RTax25ExchAdjDimension _dimension)
    {
        while select this
        {
            this.DefaultDimension = _dimension.getDefaultDimension(this.DefaultDimension);
            this.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFromLedgerVoucherObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds information rom the given uposted voucher.
    /// </summary>
    /// <param name="_voucher">
    ///  A <c>LedgerVoucherObject</c> class instance that holds transactions to account.
    /// </param>
    public void fillFromLedgerVoucherObject(LedgerVoucherObject _voucher)
    {
        LedgerVoucherTransList              transactions;
        LedgerPostingOneToManyCollection    taxLinks;
        boolean                             hasMore;
        boolean                             hasMoreLinks;
        Set                                 taxLinksSet;
        SetEnumerator                       taxLinksSetEnumerator;
        TaxTransRelationshipType            taxTransRelationshipType;

        if (_voucher)
        {
            transactions = _voucher.getInternalCollection();

            for (hasMore = transactions.first(); hasMore; hasMore = transactions.next())
            {
                this.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(transactions.item().parmLedgerDimensionId());
                taxLinks = transactions.item().parmTaxLinks();

                for (hasMoreLinks = taxLinks.first(); hasMoreLinks; hasMoreLinks  = taxLinks.next())
                {
                    this.TaxTrans = taxLinks.currentOne();
                    taxLinksSet = taxLinks.currentMany();

                    taxLinksSetEnumerator = taxLinksSet.getEnumerator();
                    while (taxLinksSetEnumerator.moveNext())
                    {
                        // the TaxTransRelationshipType is the first object in the container
                        taxTransRelationshipType = conPeek(taxLinksSetEnumerator.current(), 1);

                        if (taxTransRelationshipType == TaxTransRelationshipType::Tax)
                        {
                            this.AllocationFactor = 1;
                            this.doInsert();
                            break;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the current instance of the table with data from voucher.
    /// </summary>
    /// <param name="_voucher">
    ///    Voucher number to fill from.
    /// </param>
    /// <param name="_date">
    ///   Transaction date to identify the voucher.
    /// </param>
    /// <param name="_origin">
    ///    Tax origin.
    /// </param>
    /// <param name="_sourceTableID">
    ///    Source table ID.
    /// </param>
    /// <param name="_sourceRecID">
    ///    Source record ID.
    /// </param>
    public void fillFromVoucher(Voucher _voucher, TransDate _date, TaxOrigin _origin, TableId _sourceTableID, RecId _sourceRecID)
    {
        TaxTrans taxTrans;

        LedgerDimensionAccount taxTransLedgerDimension(TaxTransRecId _taxTrans)
        {
            LedgerDimensionAccount ret =  TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(_taxTrans);

            if (!ret)
            {
                ret = TaxTransGeneralJournalAccountEntry::find_RU(_taxTrans, TaxTransRelationshipType::Tax).LedgerDimension;
            }

            return ret;
        }

        delete_from this;

        while select * from taxTrans
            where taxTrans.Voucher          == _voucher
                &&  taxTrans.TransDate        == _date
                &&  taxTrans.ExemptTax        == NoYes::No
                && (taxTrans.TaxOrigin        == TaxOrigin::CashDisc
                ||  taxTrans.TaxOrigin        == _origin)
                && (!_sourceTableID
                || (taxTrans.SourceTableId    == _sourceTableID
                &&  taxTrans.SourceRecId      == _sourceRecID))
        {
            this.TaxTrans = taxTrans.RecId;
            if (taxTrans.TaxAmount && taxTrans.SourceDocumentLine)
            {
                this.addFromSourceDocumentLine(taxTrans);
            }
            else
            {
                this.AllocationFactor           = 1;
                this.DefaultDimension           = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(taxTransLedgerDimension(taxTrans.RecId));
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns fraction of a given tax transaction distributed to a given dimension.
    /// </summary>
    /// <param name="_taxTransRecId">
    ///   Record ID of the tax transaction.
    /// </param>
    /// <param name="_defaultDimension">
    ///    A <c>DimensionDefault</c> type instance.
    /// </param>
    /// <returns>
    ///    Real value in the range of  0..1 representing the fraction.
    /// </returns>
    AllocationFactor getDefaultDimensionFactor(TaxTransRecId _taxTransRecId, DimensionDefault _defaultDimension)
    {
        select sum(AllocationFactor) from this
            where this.DefaultDimension == _defaultDimension
               && this.TaxTrans         == _taxTransRecId;

        return this.AllocationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns whether the table contain records.
    /// </summary>
    /// <returns>
    ///  true, if filled; otherwise, false.
    /// </returns>
    public boolean isFilled()
    {
        select firstonly this;
        return this.RecId ? true : false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS330677</DeveloperDocumentation>
	<Label>@SYS110288</Label>
	<TitleField1>DefaultDimension</TitleField1>
	<TitleField2>TaxTrans</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AllocationFactor</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AllocationFactor</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxTrans</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxTransRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DefaultDimensionTaxTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>