<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFundingLimit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjFundingLimit extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the activity number that is used in the record is valid.
    /// </summary>
    /// <returns>
    /// true if the activity number is valid for the project; otherwise, false.
    /// </returns>
    private boolean checkActivityNumber()
    {
        boolean retValue = true;
        RecId   projRecId;

        // Validate the activity number in ProjActivity table
        retValue = ProjActivity::exist(this.ActivityNumber);

        // ProjId required for using activities
        if (retValue && !this.ProjId)
        {
            retValue = false;
        }

        // Validate activity is associated to the project
        if (retValue)
        {
            projRecId = ProjTable::find(this.ProjId).RecId;
            if (smmActivityParentLinkTable::findByActivityAndParent(this.ActivityNumber, smmActivityParentType::Project, projRecId, tableNum(ProjTable)).RecId == 0)
            {
                retValue = false;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the category group that is used in the record is valid.
    /// </summary>
    /// <returns>
    /// true if the category group is valid; otherwise false.
    /// </returns>
    protected boolean checkCategoryGroupId()
    {
        ProjCategoryType    projCategoryType;
        boolean             retValue = true;

        if (this.ValidFor == ProjAllTrxType::All && this.CategoryGroupId)
        {
            retValue = false;
        }

        if (retValue && this.CategoryGroupId)
        {
            projCategoryType = ProjCategoryGroup::find(this.CategoryGroupId).CategoryType;
            switch (projCategoryType)
            {
                case ProjCategoryType::Cost :
                if (this.ValidFor != ProjAllTrxType::Expenses)
                    {
                        retValue = false;
                    }
                    break;

                case ProjCategoryType::Hour :
                if (this.ValidFor != ProjAllTrxType::Hours)
                    {
                        retValue = false;
                    }
                    break;

                case ProjCategoryType::Item :
                if (this.ValidFor != ProjAllTrxType::Items)
                    {
                        retValue = false;
                    }
                    break;

                case ProjCategoryType::Revenue :
                if (this.ValidFor != ProjAllTrxType::Fees)
                    {
                        retValue = false;
                    }
                    break;

                default:
                    retValue = false;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the category that is used in the record is valid.
    /// </summary>
    /// <returns>
    /// true if the category is valid; otherwise, false.
    /// </returns>
    protected boolean checkCategoryId()
    {
        ProjCategoryType    projCategoryType;
        boolean             retValue = true;

        if (this.ValidFor == ProjAllTrxType::All && this.CategoryId)
        {
            retValue = false;
        }

        if (retValue && this.CategoryId)
        {
            projCategoryType = ProjCategory::find(this.CategoryId).CategoryType;
            switch (projCategoryType)
            {
                case ProjCategoryType::Cost :
                if (this.ValidFor != ProjAllTrxType::Expenses)
                    {
                        retValue = false;
                    }
                    break;

                case ProjCategoryType::Hour :
                if (this.ValidFor != ProjAllTrxType::Hours)
                    {
                        retValue = false;
                    }
                    break;

                case ProjCategoryType::Item :
                if (this.ValidFor != ProjAllTrxType::Items)
                    {
                        retValue = false;
                    }
                    break;

                case ProjCategoryType::Revenue :
                if (this.ValidFor != ProjAllTrxType::Fees)
                    {
                        retValue = false;
                    }
                    break;

                default:
                    retValue = false;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new funding limit record and determines the line number for the record.
    /// </summary>
    public void insert()
    {
        ttsbegin;

        if (!this.LineNumber)
        {
            this.LineNumber = this.lastLineNumber(this.ContractId) + 1;
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the maximum line number value for all the funding limit lines that are contained in the contract passed in as a parameter.
    ///    The projFundingLimit needs to be valid.
    /// </summary>
    /// <param name="_contractId">
    ///    The project contract ID.
    /// </param>
    /// <returns>
    ///    The maximum line number.
    /// </returns>
    /// <remarks>
    ///    The maximum line number is also the last line number that is used.
    /// </remarks>
    private ProjFundingLimitLineNumber lastLineNumber(ProjInvoiceProjId _contractId)
    {
        return (select maxof(LineNumber) from projFundingLimit
            where projFundingLimit.ContractId == _contractId).LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLimitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether limit amount used in the record is valid.
    /// </summary>
    /// <returns>
    /// true if Limit Amount is greater than the committed amount for the limit and actuals posted; otherwise, false.
    /// </returns>
    private boolean isValidLimitAmount()
    {
        boolean isValidLimit = true;
		
        if (this.AmountMst < this.LimitSpent + ProjFundingLimitTrackingManager::getTrackedAmount(this.RecId, ProjSDLineTrackingType::All))
        {
            isValidLimit = false;
        }

        return isValidLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjFundingLimit, ValidFor) :
            if (this.ValidFor == ProjAllTrxType::All)
                {
                    this.CategoryGroupId = '';
                    this.CategoryId = '';
                }

                if ((this.ValidFor != ProjAllTrxType::All) && this.CategoryGroupId)
                {
                    if (!this.checkCategoryGroupId())
                    {
                        this.CategoryGroupId = '';
                        this.CategoryId = '';
                    }
                }

                if ((this.ValidFor != ProjAllTrxType::All) && this.CategoryId)
                {
                    if (!this.checkCategoryId())
                    {
                        this.CategoryId = '';
                    }
                }

                if ((this.ValidFor != ProjAllTrxType::All) && this.ItemId)
                {
                    if (this.ValidFor != ProjAllTrxType::Items)
                    {
                        this.ItemId = '';
                    }
                }

                if ((this.ValidFor != ProjAllTrxType::All) && this.Resource)
                {
                    if (this.ValidFor == ProjAllTrxType::Items)
                    {
                        this.Resource = 0;
                    }
                }

                break;

            case fieldNum(ProjFundingLimit, CategoryGroupId) :
            if (!this.checkCategoryGroupId())
                {
                    this.CategoryGroupId = '';
                    this.CategoryId = '';
                }
                else
                {
                    if (this.CategoryGroupId == '')
                    {
                        this.CategoryId = '';
                    }
                }
                break;

            case fieldNum(ProjFundingLimit, CategoryId) :
            if (!this.checkCategoryId())
                {
                    this.CategoryId = '';
                }
                else
                {
                    // Always set the Category Group to match that of the CategoryId
                    this.CategoryGroupId = ProjCategory::find(this.CategoryId).CategoryGroupId;
                }
                break;

            case fieldNum(ProjFundingLimit, ProjId) :
            if (!this.ProjId)
                {
                    this.ActivityNumber = '';
                }
                else
                {
                    if (this.ActivityNumber)
                    {
                        if (!this.checkActivityNumber())
                        {
                            this.ActivityNumber = '';
                        }
                    }
                }
                break;

            default :
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the amount pending to be spent funding limit
    /// </summary>
    /// <returns>
    ///     Returns the amount allocated to be spent against the funding limit
    /// </returns>
    public display AmountCur trackedAmount()
    {
        ProjSDLineTrackingType projSDLineTrackingType = ProjSDLineTrackingType::All;

        return ProjFundingLimitTrackingManager::getTrackedAmount(this.RecId, projSDLineTrackingType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        ProjFundingSource   projFundingSource;
        boolean ret = true;

        switch (_fieldIdToCheck)
        {
            case fieldNum(ProjFundingLimit, Resource) :

            if (this.Resource && !ResourceFacade::exist(this.Resource))
                {
                    ret = checkFailed("@Res:ResourceDoesNotExist");
                }
                ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
                break;

            case fieldNum(ProjFundingLimit, ItemId) :
            if (this.ItemId && !InventTable::exist(this.ItemId))
                {
                    ret = checkFailed("@SYS133447");
                }
                break;

            case fieldNum(ProjFundingLimit, FundingSource) :
                // Funding source not associate to contract
                if (this.FundingSource && !(ProjFundingSource::existContractFundingSource(this.ContractId, ProjFundingSource::find(this.FundingSource).FundingSourceId)))
                {
                    ret = checkFailed("@SYS135793");
                }

                // Funding source is of type On-Hold
                if (ret && this.FundingSource)
                {
                    projFundingSource = ProjFundingSource::find(this.FundingSource);
                    if (projFundingSource && projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource)
                    {
                        ret = checkFailed("@SYS319823");
                    }
                }
                break;

            case fieldNum(ProjFundingLimit, AmountMst) :
				// Place the test here instead of validate write as we don't want this to be
				// executed when the LimitSpent is updated by posting of actual
				if (ret && !this.isValidLimitAmount())
				{
					ret = checkFailed("@Proj:FundingLimitIsLessThanActualAndCommittedAmounts");
				}
                break;
        }

        if (ret)
        {
            ret = super(_fieldIdToCheck);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ProjTable projTable;
        boolean ret;

        ret = super();

        if (ret && this.ContractId)
        {
            if (!ProjInvoiceTable::exist(this.ContractId))
            {
                ret = checkFailed("@SYS133437");
            }
        }

        if (ret && this.ProjId)
        {
            projTable = ProjTable::find(this.ProjId);
            if (!projTable)
            {
                ret = checkFailed("@SYS133438");
            }

            if (ret && projTable.ProjInvoiceProjId != this.ContractId)
            {
                ret = checkFailed(strFmt("@SYS133439", this.ProjId));
            }
        }

        if (ret && this.ActivityNumber)
        {
            if (!ProjActivity::exist(this.ActivityNumber))
            {
                ret = checkFailed("@SYS133440");
            }

            // Project is required to be used with activities
            if (ret && !this.ProjId)
            {
                ret = checkFailed("@SYS133441");
            }

            // Activity not part of the project
            if (ret && smmActivityParentLinkTable::findByActivityAndParent(this.ActivityNumber, smmActivityParentType::Project, ProjTable::find(this.ProjId).RecId, tableNum(ProjTable)).RecId == 0)
            {
                ret = checkFailed("@SYS133442");
            }
        }

        if (ret && this.CategoryGroupId)
        {
            if (!ProjCategoryGroup::exist(this.CategoryGroupId))
            {
                ret = checkFailed("@SYS133443");
            }
        }

        if (ret && this.CategoryId)
        {
            if (!ProjCategory::exist(this.CategoryId))
            {
                ret = checkFailed("@SYS133444");
            }

            if (ret && this.CategoryGroupId)
            {
                if (ProjCategory::find(this.CategoryId).CategoryGroupId != this.CategoryGroupId)
                {
                    ret = checkFailed(strFmt("@SYS133443", this.CategoryId, this.CategoryGroupId));
                }
            }
        }

        if (ret && this.Resource)
        {
            if (!ResourceFacade::exist(this.Resource))
            {
                ret = checkFailed("@Res:ResourceDoesNotExist");
            }
            if ((this.ValidFor == ProjAllTrxType::Items) ||
            (this.ValidFor == ProjAllTrxType::Revenues))
            {
                ret = checkFailed("@Res:ResourceIsNotValidAssociation");
            }
        }

        if (ret && this.ItemId)
        {
            if (!InventTable::exist(this.ItemId))
            {
                ret = checkFailed("@SYS133447");
            }

            if ((this.ValidFor == ProjAllTrxType::Expenses) ||
            (this.ValidFor == ProjAllTrxType::Fees) ||
            (this.ValidFor == ProjAllTrxType::Hours) ||
            (this.ValidFor == ProjAllTrxType::Revenues))
            {
                ret = checkFailed("@SYS133448");
            }
        }

        if (ret && this.Resource && this.ItemId)
        {
            ret = checkFailed("@Res:ResourceAndItemCantBeInSameRule");
        }

        ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjFundingLimit</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjFundingLimit</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        if (_recId)
        {
            return (select projFundingLimit where projFundingLimit.RecId == _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the funding limit has been defined for a contract.
    /// </summary>
    /// <param name="_contractId">
    /// The contract that is being processed.
    /// </param>
    /// <returns>
    /// true if at least one funding limit has been defined for the contract; otherwise, false.
    /// </returns>
    public static boolean existForContract(ProjInvoiceProjId _contractId)
    {
        boolean retValue = false;
        ProjFundingLimit    projFundingLimit;

        retValue = (select firstonly projFundingLimit where projFundingLimit.ContractId == _contractId).RecId != 0;

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjFundingLimit</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjFundingLimit</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjFundingLimit</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjFundingLimit find(RecId _recId, boolean _forUpdate = false)
    {
        ProjFundingLimit   projFundingLimit = null;

        projFundingLimit.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select projFundingLimit where projFundingLimit.RecId == _recId;
        }

        return projFundingLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfLimitsForContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of funding limits that are defined for the contract.
    /// </summary>
    /// <param name="_contractId">
    /// The contract that is processed.
    /// </param>
    /// <returns>
    /// The number of funding limits that are defined on the contract.
    /// </returns>
    public static int64 numberOfLimitsForContract(ProjInvoiceProjId _contractId)
    {
        return (select count(RecId) from projFundingLimit where projFundingLimit.ContractId == _contractId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the funding limit can be edited
    /// </summary>
    /// <returns>
    /// Boolean value indicating if the funding limit can be edited
    /// </returns>
    public boolean allowEdit(){
        if (this.trackedAmount() != 0 || this.LimitSpent > 0)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if ( ret && !this.allowEdit())
        {
            ret = checkFailed("@Proj:DeleteFundingLimitWithTransactions");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS133008</DeveloperDocumentation>
	<Label>@SYS133005</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ContractId</TitleField1>
	<TitleField2>ValidFor</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>FundingLimitIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMst</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS115561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountMst</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LimitSpent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountMst</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingLimitAmountMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LimitSpent</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS326761</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidFor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjAllTrxType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LineNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingLimitLineNumber</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FundingLimitIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FundingSource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFor</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContractIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingLimit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingLimit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategoryGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategoryGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategoryGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingLimit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryGroupId</Name>
					<SourceEDT>ProjCategoryGroupId</SourceEDT>
					<Field>CategoryGroupId</Field>
					<RelatedField>CategoryGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjFundingLimit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingSource</Name>
					<Field>FundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjFundingLimit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContractId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ContractId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingLimit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingLimit</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>