<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMVendRebateTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether or not a rebate transaction record exists with the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value for which to search the vendor rebate transaction table.
    /// </param>
    /// <returns>
    /// true if a rebate transaction record exists with the passed in <c>RecId</c>; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        if (_recId != 0)
        {
            return (select tamVendRebateTrans
                    where tamVendRebateTrans.RecId == _recId
                    ).RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a rebate transaction record based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value for which to search the vendor rebate transaction table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether the record should be selected for update or not; optional.
    /// </param>
    /// <returns>
    /// The vendor rebate transaction record based on the passed in parameters.
    /// </returns>
    public static TAMVendRebateTrans find(RecId _recId, boolean _forUpdate = false)
    {
        TAMVendRebateTrans vendRebateTrans;

        if (_recId != 0)
        {
            vendRebateTrans.selectForUpdate(_forUpdate);

            select firstonly vendRebateTrans
                where vendRebateTrans.RecId == _recId;
        }

        return vendRebateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVendRebateIdTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a vendor rebate transaction record based on the passed in <c>TAMVendRebateId</c> and rebate
    /// transaction type.
    /// </summary>
    /// <param name="_rebateId">
    /// The <c>TAMVendRebateId</c> value for which to search the rebate transaction table.
    /// </param>
    /// <param name="_transactionType">
    /// The rebate transaction type for which to search the rebate transaction table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not; optional.
    /// </param>
    /// <returns>
    /// The vendor rebate transaction record that was found based on the passed in parameters.
    /// </returns>
    public static TAMVendRebateTrans findByVendRebateIdTransaction(TAMVendRebateId      _rebateId,
                                                        TAMVendRebateTransactionType    _transactionType,
                                                        boolean                         _forUpdate = false)
    {
        TAMVendRebateTrans tamVendRebateTrans;

        if (_rebateId)
        {
            tamVendRebateTrans.selectForUpdate(_forUpdate);

            select firstonly tamVendRebateTrans
                where tamVendRebateTrans.VendRebateId == _rebateId
                 && tamVendRebateTrans.RebateTransactionType == _transactionType;
        }

        return tamVendRebateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromTAMVendRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a vendor rebate transaction record based on a vendor rebate table record.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The <c>TamVendRebateTable</c> record to use in order to initialize that values in the vendor rebate
    /// transaction record.
    /// </param>
    /// <param name="_tamVendRebateAmount">
    /// The rebate amount to use to initialize the vendor rebate transaction record; optional.
    /// </param>
    /// <param name="_ledgerJournalId">
    /// The <c>LedgerJournalId</c> to use to initialize the vendor rebate transaction record; optional.
    /// </param>
    /// <param name="_rebateInvoiceId">
    /// The <c>VendInvoiceId</c> to use to initialize the vendor rebate transaction record; optional.
    /// </param>
    /// <param name="_rebateTransactionType">
    /// The rebate transaction type to use to initialize the vendor rebate transaction record; optional.
    /// </param>
    /// <param name="_description">
    /// The description to use to initialize the vendor rebate transaction record; optional.
    /// </param>
    /// <param name="_manualInvoicing">
    /// The flag to indicate that the vendor invoice related to this
    /// vendor rebate transaction record needs to be manually posted; optional.
    /// </param>
    public static void insertFromTAMVendRebateTable(TAMVendRebateTable  _tamVendRebateTable,
                                        TAMRebateAmt                    _tamVendRebateAmount = 0,
                                        LedgerJournalId                 _ledgerJournalId = '',
                                        VendInvoiceId                   _rebateInvoiceId = '',
                                        TAMVendRebateTransactionType    _rebateTransactionType =
                                        TAMVendRebateTransactionType::RebateAccrual,
                                        Description                     _description = '',
                                        TAMVendRebateManualInvoicing    _manualInvoicing = false)
    {
        TAMVendRebateTrans  vendRebateTrans;
        CurrencyCode        ledgerCurrency;

        if (_tamVendRebateTable && _tamVendRebateAmount)
        {
            ledgerCurrency = Ledger::accountingCurrencyByLedger(Ledger::current());

            ttsBegin;

            vendRebateTrans.VendRebateId = _tamVendRebateTable.VendRebateId;
            vendRebateTrans.RebateTransactionType = _rebateTransactionType;
            vendRebateTrans.Description = _description;

            if (ledgerCurrency != _tamVendRebateTable.CurrencyCode)
            {
                vendRebateTrans.RebateAmt = CurrencyExchangeHelper::amountCur2MST(_tamVendRebateAmount, _tamVendRebateTable.CurrencyCode);
            }
            else
            {
                vendRebateTrans.RebateAmt = _tamVendRebateAmount;
            }

            if (_ledgerJournalId)
            {
                vendRebateTrans.LedgerJournalId = _ledgerJournalId;
            }
            else if (_rebateInvoiceId)
            {
                vendRebateTrans.RebateInvoiceId = _rebateInvoiceId;
            }

            vendRebateTrans.ManualInvoicing = _manualInvoicing;

            vendRebateTrans.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the vendor invoice number related to the passed in <c>TAMVendRebateTrans</c>.
    /// This vendor invoice is for the calculated vendor rebate.
    /// </summary>
    /// <param name="_tamVendRebateTrans">
    /// The <c>TAMVendRebateTrans</c> record for which the vendor invoice id needs to be found.
    /// </param>
    /// <returns>
    /// The vendor invoice number.
    /// </returns>
    public display VendInvoiceId vendInvoiceId(TAMVendRebateTrans _tamVendRebateTrans)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // If Invoice was automatically posted
        if (_tamVendRebateTrans.RebateInvoiceId)
        {
            return _tamVendRebateTrans.RebateInvoiceId;
        }

        if (_tamVendRebateTrans.VendInvoiceInfoTableTableRefId)
        {
            // If Invoice is in pending state
            vendInvoiceInfoTable = VendInvoiceInfoTable::find(_tamVendRebateTrans.VendInvoiceInfoTableParmId,
                _tamVendRebateTrans.VendInvoiceInfoTableTableRefId);

            if (vendInvoiceInfoTable)
            {
                return vendInvoiceInfoTable.Num;
            }
            else
            {
                // If Invoice was manually posted
                select firstonly vendInvoiceInfoTable
                    where vendInvoiceInfoTable.TableRefId == _tamVendRebateTrans.VendInvoiceInfoTableTableRefId;

                if (vendInvoiceInfoTable)
                {
                    return vendInvoiceInfoTable.Num;
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMVendorRebate</ConfigurationKey>
	<DeveloperDocumentation>@MCR40072</DeveloperDocumentation>
	<FormRef>TAMVendRebateTrans</FormRef>
	<Label>@PDS1052</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>VendRebateId</TitleField1>
	<TitleField2>LedgerJournalId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateTransactionType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManualInvoicing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerJournalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateTransactionType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMVendRebateTransactionType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendRebateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualInvoicing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateManualInvoicing</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoTableParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoTableTableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TAMVendRebateJourIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>VendRebateId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerJournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalId</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>LedgerJournalId</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMVendRebateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMVendRebateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRebateId</Name>
					<Field>VendRebateId</Field>
					<RelatedField>VendRebateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TAMVendRebateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TAMVendRebateTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoTableTableRefId</Name>
					<Field>VendInvoiceInfoTableTableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoTableParmId</Name>
					<Field>VendInvoiceInfoTableParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TableRefIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>