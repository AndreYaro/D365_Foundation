<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanScenario</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPlanScenario extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for a field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID for which the default value is set.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        BudgetPlanScenarioConfiguration budgetPlanningConfiguration;

        super(_fieldId);

        budgetPlanningConfiguration = BudgetPlanScenarioConfiguration::construct();
        budgetPlanningConfiguration.parmBudgetPlanScenario(this);

        budgetPlanningConfiguration.defaultField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        BudgetPlanScenarioTranslation::deleteForBudgetPlanScenario(this.RecId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        BudgetPlanScenarioConfiguration budgetPlanningConfiguration;
        budgetPlanningConfiguration = BudgetPlanScenarioConfiguration::construct();
        budgetPlanningConfiguration.parmBudgetPlanScenario(this);
        budgetPlanningConfiguration.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        // Create translation information
        BudgetPlanScenarioTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>localizedScenarioName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized name of the <c>BudgetPlanScenarioTranslation</c> value from a
    /// <c>BudgetPlanScenario</c> record.
    /// </summary>
    /// <returns>
    /// Localized <c>BudgetPlanScenarioName</c> value.
    /// </returns>
    public display BudgetPlanScenarioName localizedScenarioName()
    {
        BudgetPlanScenarioName budgetPlanScenarioName;

        if (hasTableAccess(tableNum(BudgetPlanScenario))
         && hasTableAccess(tableNum(BudgetPlanScenarioTranslation)))
        {
            budgetPlanScenarioName = BudgetPlanScenarioTranslation::getLocalizedName(this.RecId);
        }

        return budgetPlanScenarioName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies or sets the additional field values that are based on the modified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        BudgetPlanScenarioConfiguration budgetPlanningConfiguration;

        super(_fieldId);

        budgetPlanningConfiguration = BudgetPlanScenarioConfiguration::construct();
        budgetPlanningConfiguration.parmBudgetPlanScenario(this);

        budgetPlanningConfiguration.modifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Update translation information
        BudgetPlanScenarioTranslation::createOrUpdateTranslation(this.RecId, this.Name, this.Description);
        BudgetPlanLineDefaultRowTemplateManager::refreshTemplateRecordsForScenario(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid;

        isValid = super();

        if (isValid && this.RecId)
        {
            if (BudgetPlanLine::existsForScenario(this.RecId))
            {
                //Validating if the budget planning scenerio is being referenced on budget planning line estimates table.
                isValid = checkFailed("@GLS70646");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean                         isValid;
        BudgetPlanScenarioConfiguration budgetPlanningConfiguration;

        budgetPlanningConfiguration = BudgetPlanScenarioConfiguration::construct();
        budgetPlanningConfiguration.parmBudgetPlanScenario(this);

        isValid = super(_fieldIdToCheck)
            && budgetPlanningConfiguration.validateField(_fieldIdToCheck);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid;

        isValid = super()
                  && BudgetPlanScenarioConfiguration::validateWrite(this);

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>BudgetPlanScenario</c> table; if not,
    /// an error message is displayed.
    /// </summary>
    /// <param name="_budgetPlanScenarioRecId">
    /// The record ID of the <c>BudgetPlanScenario</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        boolean isExisting = true;

        if (!BudgetPlanScenario::exist(_budgetPlanScenarioRecId))
        {
            isExisting = checkFailed(strFmt(BudgetPlanScenario::txtNotExist(), _budgetPlanScenarioRecId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>BudgetPlanScenario</c> table.
    /// </summary>
    /// <param name="_budgetPlanScenarioRecId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        return (BudgetPlanScenario::find(_budgetPlanScenarioRecId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanScenario</c> table.
    /// </summary>
    /// <param name="_budgetPlanScenarioRecId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanScenario</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanScenario find(
        BudgetPlanScenarioRecId _budgetPlanScenarioRecId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanScenario budgetPlanScenario;

        if (_budgetPlanScenarioRecId)
        {
            budgetPlanScenario.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanScenario.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanScenario
                where budgetPlanScenario.RecId == _budgetPlanScenarioRecId;
        }

        return budgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLocalizedName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanScenario</c> table by using the localized name.
    /// </summary>
    /// <param name="_localizedName">
    /// The localized name of the <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_languageId">
    /// The language of the <c>BudgetPlanScenario</c> record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanScenario</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanScenario findByLocalizedName(
        BudgetPlanScenarioName _localizedName,
        boolean                _forUpdate = false,
        LanguageId             _languageId = currentUserLanguage())
    {
        BudgetPlanScenario budgetPlanScenario;
        LanguageId         languageId = _languageId;

        // Look for the localized value first
        if (languageId)
        {
            budgetPlanScenario = BudgetPlanScenario::findByNameLanguage(_localizedName, _forUpdate, languageId);
        }

        // If no user language, fall back to the system language.
        if (!budgetPlanScenario)
        {
            budgetPlanScenario = BudgetPlanScenario::findByNameLanguage(_localizedName, _forUpdate, SystemParameters::getSystemLanguageId());
        }

        // If not found or language not specified, fall back to invariant name
        if (!budgetPlanScenario)
        {
            budgetPlanScenario = BudgetPlanScenario::findByName(_localizedName, _forUpdate);
        }

        return budgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanScenario</c> table.
    /// </summary>
    /// <param name="_budgetPlanScenarioName">
    /// The name of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanScenario</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanScenario findByName(
        BudgetPlanScenarioName _budgetPlanScenarioName,
        boolean                _forupdate = false,
        ConcurrencyModel       _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPlanScenario budgetPlanScenario;

        if (_budgetPlanScenarioName)
        {
            budgetPlanScenario.selectForUpdate(_forupdate);

            if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPlanScenario.concurrencyModel(_concurrencyModel);
            }

            select firstOnly budgetPlanScenario
                where budgetPlanScenario.Name == _budgetPlanScenarioName;
        }

        return budgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNameLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanScenario</c> table by using the localized name and
    /// language.
    /// </summary>
    /// <param name="_budgetPlanScenarioName">
    /// The localized name of the <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_languageId">
    /// The language of the <c>BudgetPlanScenario</c> record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanScenario</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanScenario findByNameLanguage(
            BudgetPlanScenarioName _budgetPlanScenarioName,
            boolean                _forUpdate = false,
            LanguageId             _languageId = currentUserLanguage())
    {
        BudgetPlanScenario            budgetPlanScenario;
        BudgetPlanScenarioTranslation budgetPlanScenarioTranslation;

        if (_budgetPlanScenarioName)
        {
            budgetPlanScenario.selectForUpdate(_forUpdate);

            select firstOnly budgetPlanScenario
                exists join budgetPlanScenarioTranslation
                    where budgetPlanScenarioTranslation.Name == _budgetPlanScenarioName
                    &&    budgetPlanScenarioTranslation.BudgetPlanScenario == budgetPlanScenario.RecId
                    &&    budgetPlanScenarioTranslation.LanguageId == _languageId;
        }

        return budgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByBudgetPlanStageWorkFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>BudgetPlanScenario</c> table.
    /// </summary>
    /// <param name="_budgetPlanningStageRecId">
    /// The record ID of the <c>BudgetPlanStage</c> record to check for existence.
    /// </param>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the <c>BudgetPlanningWorkflowStage</c> record to check for existence.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetPlanScenario</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanScenario findFirstByBudgetPlanStageWorkFlow(
        BudgetPlanningStageRecId    _budgetPlanningStageRecId,
        BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanScenario              budgetPlanScenario;
        BudgetPlanScenarioConstraint    budgetPlanScenarioConstraint;
        BudgetPlanningWorkflowStage     budgetPlanningWorkflowStage;

        if (_budgetPlanningStageRecId)
        {
            select firstOnly RecId, Name, UnitOfMeasureClass from budgetPlanScenario
                exists join BudgetPlanningStage from budgetPlanningWorkflowStage
                    where budgetPlanningWorkflowStage.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId
                       && budgetPlanningWorkflowStage.BudgetPlanningStage    == _budgetPlanningStageRecId
                exists join BudgetPlanScenario from budgetPlanScenarioConstraint
                    where budgetPlanScenarioConstraint.BudgetPlanScenario       == budgetPlanScenario.RecId
                    && budgetPlanScenarioConstraint.BudgetPlanningWorkflowStage == budgetPlanningWorkflowStage.RecId;
        }

        return budgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanScenarioReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form control on which the lookup will be performed.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanScenario</c> record selected by the lookup.
    /// </returns>
    public static BudgetPlanScenario lookupBudgetPlanScenarioReference(FormReferenceControl _formReferenceControl)
    {
        Query                   query;
        SysReferenceTableLookup referenceLookup;
        QueryBuildDataSource    qbdsBudgetPlanScenario;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetPlanScenario), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetPlanScenario, Name));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanScenario, Description));

        query = new Query();
        qbdsBudgetPlanScenario = query.addDataSource(tableNum(BudgetPlanScenario));

        qbdsBudgetPlanScenario.addRange(fieldNum(BudgetPlanScenario, UnitOfMeasureClass)).value(enum2Value(UnitOfMeasureClass::Monetary));

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveBudgetPlanScenarioReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the lookup for the <c>BudgetPlanScenario</c> table records
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form that is used.
    /// </param>
    /// <returns>
    /// A reference record for the <c>BudgetPlanScenario</c>.
    /// </returns>
    public static BudgetPlanScenario resolveBudgetPlanScenarioReference(FormReferenceControl _formReferenceControl)
    {
        BudgetPlanScenario  budgetPlanScenario;
        BudgetPlanScenarioName scenarioName = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(BudgetPlanScenario, Name),tableStr(BudgetPlanScenario))).value();

        select budgetPlanScenario
            where budgetPlanScenario.Name == scenarioName
                && budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary;

        return budgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyIsMonetaryUnitOfMeasureClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies a specified record in the <c>BudgetPlanScenario</c> table has a monetary UnitOfMeasureClass.
    /// </summary>
    /// <param name="_budgetPlanScenarioRecId">
    /// The record ID of the record to verify.
    /// </param>
    /// <returns>
    /// true if the record in the <c>BudgetPlanScenario</c> table exists and has a monetary UnitOfMeatureClass; overwise, false and raises and error.
    /// </returns>
    public static boolean verifyIsMonetaryUnitOfMeasureClass(BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        boolean                     isValid = true;
        BudgetPlanScenario          budgetPlanScenario;

        select firstonly RecId from budgetPlanScenario
            where budgetPlanScenario.RecId == _budgetPlanScenarioRecId
                && budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary;

        if (!budgetPlanScenario.RecId)
        {
            error("@GLS150328");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>UnitOfMeasure</c> field in the <c>BudgetPlanScenario</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>UnitOfMeasureClass</c> field is valid; otherwise, false.
    /// </returns>
    public boolean validateUnitOfMeasure()
    {
        boolean       isValid = true;
        UnitOfMeasure setUnitOfMeasure;

        setUnitOfMeasure = UnitOfMeasure::find(this.UnitOfMeasure);

        // Unit of measure entered MUST have a the same unit of measure class
        // as the scenario unit of measure class
        if (setUnitOfMeasure.UnitOfMeasureClass != this.UnitOfMeasureClass)
        {
            isValid = checkFailed(
                strFmt("@GLS150010",
                    setUnitOfMeasure.Symbol,
                    enum2str(this.UnitOfMeasureClass)));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS70137</DeveloperDocumentation>
	<FormRef>BudgetPlanningConfiguration</FormRef>
	<Label>@GLS70134</Label>
	<SingularLabel>@GLS70135</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>Budget</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ColumnDeleteAction</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>BudgetPlanScenario</Relation>
			<Table>BudgetPlanColumn</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasureClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsHistorical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS55776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasureClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanScenarioDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetPlanScenarioName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitOfMeasureClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS310136</Label>
			<EnumType>UnitOfMeasureClass</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsHistorical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Budget:PlanIsHistorical</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
			<Label>@Budget:ScenarioUnitOfMeasure</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultUnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects70</ConfigurationKey>
			<ExtendedDataType>UnitOfMeasureRecId</ExtendedDataType>
			<HelpText>@GLS150009</HelpText>
			<Label>@GLS150008</Label>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasureRecId</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>