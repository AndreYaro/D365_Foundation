<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransTaxExtensionIN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransTaxExtensionIN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteFromUncommittedTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>TaxUncommitted and TaxWithholdUncommitted_IN</c> records if a field that affects tax has changed.
    /// </summary>
    /// <param name="_deleteTaxUncommitted">
    /// Boolean that will decide if TaxUncommitted records are to be deleted or not.
    /// </param>
    /// <remarks>
    /// Please see the XML doc for insert method.
    /// </remarks>
    private void deleteFromUncommittedTables(boolean _deleteTaxUncommitted = true)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;

        ledgerJournalTrans = this.getLedgerJournalTrans();
        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

        if (_deleteTaxUncommitted == true
            && TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice))
        {
            TaxUncommitted::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice);
        }

        if (_deleteTaxUncommitted == true
           && TaxItemGroupHeading::find(ledgerjournalTrans.TaxItemGroup).ServiceTaxBasis_IN != ServiceTaxBasis_IN::None
           && ledgerjournalTrans.isPaymentJournal_IN())
        {
            TaxUncommitted_IN::deleteByMainVoucher(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerjournalTrans.Voucher);
        }

        if (TaxWithholdUncommitted_IN::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.getWHTUsingInvoiceId_IN()))
        {
            TaxWithholdUncommitted_IN::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTrans.Voucher, ledgerJournalTrans.getWHTUsingInvoiceId_IN());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalTrans</c> value for the specified <c>LedgerJournalTransTaxExtensionIN</c> record.
    /// </summary>
    /// <returns>
    /// A <c>LedgerJournalTrans</c> record.
    /// </returns>
    public LedgerJournalTrans getLedgerJournalTrans()
    {
        return LedgerJournalTrans::findRecId(this.LedgerJournalTrans, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// The kernel method is added a flag to control the recalculation of indirect taxes as decided by the caller.
    /// </summary>
    /// <param name="_calcIndirectTax">
    /// This boolean controls the recalculation of indirect taxes as decided by the caller.
    /// </param>
    /// <param name="_calcDirectTax">
    /// This boolean controls the recalculation of direct taxes as decided by the caller.
    /// </param>
    /// <remarks>
    /// The recalculation is part of cache implementation. But during centralized payment scenarios for service tax(other than Direct tax)
    /// this recalculation causes many issues due to out of scope flow. So we are stoping indirect tax recalculation depending on the
    /// context(caller) where a recalculation is not necessary and a performance overhead.
    /// </remarks>
    public void insert(boolean _calcIndirectTax = true, boolean _calcDirectTax = true)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;

        ledgerJournalTrans = this.getLedgerJournalTrans();
        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

        if (this.LedgerJournalTrans)
        {
            if (!LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(this.LedgerJournalTrans))
            {
                super();
                this.deleteFromUncommittedTables(_calcIndirectTax);

                if (!ledgerJournalTable.Posted 
                    && !(ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger && ledgerJournalTrans.TransferredBy) 
                    && !(ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool))
                {
                    if (_calcIndirectTax)
                    {
                        // if taxes were deleted then recalculate taxes
                        LedgerJournalTrans::getTaxInstance(
                            ledgerJournalTrans.JournalNum, 
                            ledgerJournalTrans.Voucher, 
                            ledgerJournalTrans.Invoice, 
                            true,
                            null, 
                            false, 
                            ledgerJournalTrans.TransDate);
                    }

                    // <GIN>
                    if (_calcDirectTax && TaxWithholdParameters_IN::checkTaxParameters())
                    {
                        LedgerJournalTrans  ledgerJournalTransLoc;
                        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtension;

                        select firstOnly RecId from ledgerJournalTransLoc 
                            where ledgerJournalTransLoc.Voucher == ledgerJournalTrans.Voucher
                                && ledgerJournalTransLoc.JournalNum == ledgerJournalTrans.JournalNum
                            join recid from ledgerJournalTransTaxExtension
                                where ledgerJournalTransTaxExtension.LedgerJournalTrans == ledgerJournalTransLoc.RecId
                                && (ledgerJournalTransTaxExtension.TDSGroup != '' || ledgerJournalTransTaxExtension.TCSGroup != '');

                        if (ledgerJournalTransLoc.RecId > 0)
                        {
                            // if taxes were deleted then recalculate taxes
                            LedgerJournalTrans_IN_Extension::getTaxWithholdInstance_IN(
                                ledgerJournalTrans.JournalNum,
                                ledgerJournalTrans.Voucher,
                                ledgerJournalTrans.Invoice,
                                true);
                        }
                    }
                    // </GIN>
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update</Name>
				<Source><![CDATA[
    public void Update()
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensioIN_orig = this.orig();
        LedgerJournalTrans  ledgerJournalTrans = this.getLedgerJournalTrans();
        LedgerJournalTable  ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

        if (this.LedgerJournalTrans)
        {
            this.deleteFromUncommittedTables();
            super();

            if (!ledgerJournalTable.Posted 
                && !(ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger && ledgerJournalTrans.TransferredBy) 
                && !(ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool))
            {
                // if taxes were deleted then recalculate taxes
                LedgerJournalTrans::getTaxInstance(
                    ledgerJournalTrans.JournalNum, 
                    ledgerJournalTrans.Voucher, 
                    ledgerJournalTrans.Invoice, 
                    true, 
                    null, 
                    false, 
                    ledgerJournalTrans.TransDate);

                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    LedgerJournalTrans                  ledgerJournalTransLoc;
                    LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtension;

                    select firstOnly RecId from ledgerJournalTransLoc
                            where ledgerJournalTransLoc.Voucher == ledgerJournalTrans.Voucher
                                && ledgerJournalTransLoc.JournalNum == ledgerJournalTrans.JournalNum
                            join recid from ledgerJournalTransTaxExtension
                                where ledgerJournalTransTaxExtension.LedgerJournalTrans == ledgerJournalTransLoc.RecId
                                && (ledgerJournalTransTaxExtension.TDSGroup != '' || ledgerJournalTransTaxExtension.TCSGroup != '');

                    if (ledgerJournalTransLoc.RecId > 0)
                    {
                        // if taxes were deleted then recalculate taxes
                        LedgerJournalTrans_IN_Extension::getTaxWithholdInstance_IN(
                            ledgerJournalTrans.JournalNum,
                            ledgerJournalTrans.Voucher,
                            ledgerJournalTrans.Invoice,
                            true);
                    }
                }
            }

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::IsCompanyEnabled() 
                && this.isTaxRecalculationNeeded(ledgerJournalTransTaxExtensioIN_orig))
            {
                ledgerJournalTrans.markCurrentTaxDocumentTaxStatusDirty();
            }
            // </GTE>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.LedgerJournalTrans)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerJournalTransTaxExtensionIN</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The reference record ID of the record to find.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerJournalTransTaxExtensionIN</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTransTaxExtensionIN findByLedgerJournalTrans(
        LedgerJournalTransRefRecId  _recId,
        boolean                     _update = false)
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt;

        if (_recId)
        {
            ledgerJournalTransTaxExt.selectForUpdate(_update);
            select firstOnly crossCompany ledgerJournalTransTaxExt
                where ledgerJournalTransTaxExt.LedgerJournalTrans == _recId;
        }

        return ledgerJournalTransTaxExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(LedgerJournalTransTaxExtensionIN, tdsGroup):
                    if (TaxWithholdParameters_IN::isTDSActivate()
                        && this.tdsGroup)
                    {
                        changecompany(this.getLedgerJournalTrans().Company ? this.getLedgerJournalTrans().Company : curext())
                        {
                            if (TaxWithholdGroupHeading::find(this.tdsGroup).TaxType_IN != TaxWithholdCodeType_IN::TDS)
                            {
                                ret = checkFailed(strFmt("@GLS5461", this.tdsGroup, TaxWithholdCodeType_IN::TDS));
                            }
                        }
                    }
                    break;

                case fieldNum(LedgerJournalTransTaxExtensionIN, tcsGroup):
                    if (TaxWithholdParameters_IN::isTCSActivate()
                        && this.tcsGroup)
                    {
                        changecompany(this.getLedgerJournalTrans().Company ? this.getLedgerJournalTrans().Company : curext())
                        {
                            if (TaxWithholdGroupHeading::find(this.tcsGroup).TaxType_IN != TaxWithholdCodeType_IN::TCS)
                            {
                                ret = checkFailed(strFmt("@GLS5461", this.tcsGroup, TaxWithholdCodeType_IN::TCS));
                            }
                        }
                    }
                    break;

                case fieldNum(LedgerJournalTransTaxExtensionIN, ExcludedGSTAmountCur):
                    if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                    {
                        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(this.LedgerJournalTrans, false);

                        if ((LedgerJournalTrans::isVendorPaymentWithTDSCalculation_IN(ledgerJournalTrans)
                                && (this.ExcludedGSTAmountCur < 0 || this.ExcludedGSTAmountCur > ledgerJournalTrans.AmountCurDebit))
                            || (LedgerJournalTrans::isCustomerPaymentWithTDSCalculation_IN(ledgerJournalTrans)
                                && (this.ExcludedGSTAmountCur < 0 || this.ExcludedGSTAmountCur > ledgerJournalTrans.AmountCurCredit)))
                        {
                            ret = checkFailed("@TaxGST:CheckExcludedGSTAmount");
                        }
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax recalculation is needed after updating a record in LedgerJournalTransTaxExtensionIN table
    /// </summary>
    /// <param name="_orig">
    /// The original record.
    /// </param>
    /// <returns>True if tax recalculation is needed, otherwise false </returns>
    public boolean isTaxRecalculationNeeded(LedgerJournalTransTaxExtensionIN _orig)
    { 
        return this.AssessableValueTransactionCurrency != _orig.AssessableValueTransactionCurrency
                || this.WithIGSTPayment != _orig.WithIGSTPayment
                || this.WouldYouClaimRefund != _orig.WouldYouClaimRefund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        TransTaxInformation transTaxInformation;

        super(_fieldId);

        switch(_fieldId)
        {
            case fieldNum(LedgerJournalTransTaxExtensionIN, TDSGroup):
                transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformation(tableNum(LedgerJournalTrans), this.LedgerJournalTrans, true);
                if (transTaxInformation.TaxWithholdSoftwareDeclReceived == NoYes::Yes)
                {
                    ttsbegin;
                    transTaxInformation.TaxWithholdSoftwareDeclReceived = NoYes::No;
                    transTaxInformation.update();
                    ttscommit;
                }
                break;

            case fieldNum(LedgerJournalTransTaxExtensionIN, InvoiceSettleAmountGSTTDS):
            case fieldNum(LedgerJournalTransTaxExtensionIN, ExcludeGSTAmountGSTTDS):
                this.updateTaxableAmountGSTTDS();
                break;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransExcludedGSTAmountforGTE_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excluded GST Amount when the journal is vendor payment journal for GTE and TDS group is not empty.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The buffer of the <c>LedgerJournalTrans</c>.</param>
    /// <returns>The excluded GST amount</returns>
    [SysObsolete("This method is obsoleted. Please use the getCustVendTransExcludedGSTAmountforGTE_IN() method instead.", false, 08\06\2022)]
    public TaxAmountCur getVendTransExcludedGSTAmountforGTE_IN(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxAmountCur   excludedGSTAmount;
        
        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact)
        {
            excludedGSTAmount = TaxWithholdJournal_IN::getCustVendTransTotalExcludedGSTAmountforGTE(_ledgerJournalTrans);
        }

        return excludedGSTAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransExcludedGSTAmountforGTE_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excluded GST Amount when the journal is customer or vendor payment journal for GTE and TDS group is not empty.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The buffer of the <c>LedgerJournalTrans</c>.</param>
    /// <returns>The excluded GST amount</returns>
    internal TaxAmountCur getCustVendTransExcludedGSTAmountforGTE_IN(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxAmountCur excludedGSTAmount;

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact)
        {
            excludedGSTAmount = TaxWithholdJournal_IN::getCustVendTransTotalExcludedGSTAmountforGTE(_ledgerJournalTrans);
        }

        return excludedGSTAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tdsAndTSCInitFromVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// TDS or TCS init from vendor.
    /// </summary>
    /// <param name = "_accountNum">Vendor account number.</param>
    public void tdsAndTSCInitFromVendor(AccountNum _accountNum)
    {
        if (_accountNum)
        {
            TaxInformationVendTable_IN taxInformationVendTable_IN = TaxInformationVendTable_IN::findByVendTable(_accountNum);
            this.TDSGroup = taxInformationVendTable_IN.TDSGroup;
            this.TCSGroup = taxInformationVendTable_IN.TCSGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tdsAndTSCInitFromCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// TDS or TCS init from customer.
    /// </summary>
    /// <param name = "_accountNum">Customer account number.</param>
    public void tdsAndTSCInitFromCustomer(AccountNum _accountNum)
    {
        if (_accountNum)
        {
            TaxInformationCustTable_IN taxInformationCustTable_IN = TaxInformationCustTable_IN::findByCustTable(_accountNum);
            this.TDSGroup = taxInformationCustTable_IN.TDSGroup;
            this.TCSGroup = taxInformationCustTable_IN.TCSGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxableAmountGSTTDS</Name>
				<Source><![CDATA[
    internal void updateTaxableAmountGSTTDS()
    {
        this.TaxableAmountGSTTDS = this.InvoiceSettleAmountGSTTDS - this.ExcludeGSTAmountGSTTDS;
        this.getLedgerJournalTrans().markCurrentTaxDocumentTaxStatusDirty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhenTransTaxInfoCustVendLocationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>LedgerJournalTransTaxExtensionIN</c> when customer/vendor location of tax information is modified.
    /// </summary>
    /// <param name = "_transTaxInformation">The modified tax information.</param>
    internal static void updateWhenTransTaxInfoCustVendLocationModified(TransTaxInformation _transTaxInformation)
    {
        TransitDocumentTransTaxInfoRelation_IN trans = _transTaxInformation.getSourceTransactionOfTaxInformation();
        if (trans.TransactionTableId == tableNum(LedgerJournalTrans))
        {
            LogisticsLocationExt logisticsLocationExt;
            LogisticsPostalAddress logisticsPostalAddress;
            if (_transTaxInformation.CustomerLocation)
            {
                logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(_transTaxInformation.CustomerLocation, DateTimeUtil::getSystemDateTime(), true);
                logisticsLocationExt = LogisticsLocationExt::find(logisticsPostalAddress.Location);
            }
            else if (_transTaxInformation.VendorLocation)
            {
                logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(_transTaxInformation.VendorLocation, DateTimeUtil::getSystemDateTime(), true);
                logisticsLocationExt = LogisticsLocationExt::find(logisticsPostalAddress.Location);
            }

            ttsbegin;
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtIN = LedgerJournalTransTaxExtensionIN::findByLedgerJournalTrans(trans.TransactionRecId, true);
            ledgerJournalTransTaxExtIN.WithIGSTPayment = logisticsLocationExt.TaxGSTEPZCode_IN != TaxGSTEPZCode_IN::None;
            if (_transTaxInformation.CustomerLocation)
            {
                ledgerJournalTransTaxExtIN.WouldYouClaimRefund = ledgerJournalTransTaxExtIN.WithIGSTPayment;
            }
            ledgerJournalTransTaxExtIN.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLedgerJournalTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data from <c>LedgerJournalTransTaxExtensionIN</c> to new extension table
    /// when new <c>LedgerJournalTrans</c> is created.
    /// </summary>
    /// <param name = "_ledgerJournalTransOld">The old <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_ledgerJournalTransNew">The new <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_copyAssessableValue">A Boolean value that indicates whether to copy assessable value; optional.</param>
    /// <param name = "_copyTaxInfo">A Boolean value that indicates whether to copy tax information; optional.</param>
    /// <returns>The tax extension table for new <c>LedgerJournalTrans</c>.</returns>
    internal static LedgerJournalTransTaxExtensionIN copyLedgerJournalTransTaxExtensionIN(
        LedgerJournalTrans _ledgerJournalTransOld,
        LedgerJournalTrans _ledgerJournalTransNew,
        boolean _copyAssessableValue = true,
        boolean _copyTaxInfo = true)
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionINOld = _ledgerJournalTransOld.ledgerJournalTransTaxExtensionIN();

        if (_copyTaxInfo)
        {
            TransTaxInformationHelper::copyTransTaxInformation(_ledgerJournalTransOld, _ledgerJournalTransNew);
        }

        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionINNew;
        if (ledgerJournalTransTaxExtensionINOld.RecId)
        {
            ledgerJournalTransTaxExtensionINNew = ledgerJournalTransTaxExtensionINOld.data();

            if (!_copyAssessableValue)
            {
                ledgerJournalTransTaxExtensionINNew.AssessableValueTransactionCurrency =
                    _ledgerJournalTransNew.AmountCurDebit ? _ledgerJournalTransNew.AmountCurDebit : _ledgerJournalTransNew.AmountCurCredit;
            }

            ledgerJournalTransTaxExtensionINNew.LedgerJournalTrans = _ledgerJournalTransNew.RecId;
            ledgerJournalTransTaxExtensionINNew.insert();
        }

        return ledgerJournalTransTaxExtensionINNew;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS222133</DeveloperDocumentation>
	<Label>@GLS222132</Label>
	<TitleField1>LedgerJournalTrans</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LedgerJournalTransIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<ReplacementKey>LedgerJournalTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Partition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation</Name>
			<Label>@SYS33614</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaximumRetailPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssessableValueTransactionCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProvisionalAssessment</Name>
			<Label>@TaxGST:ProvisionalAssessment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProvisionalAssessment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchSourceInvoice</Name>
			<Label>@TaxGST:OriginalPurchaseInvoice</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefPurchInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefPurchInvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesSourceInvoice</Name>
			<Label>@TaxGST:OriginalSalesInvoice</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefSalesInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefSalesInvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithIGSTPayment</Name>
			<Label>@TaxGSTSEZ:WithIGSTPayment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WithIGSTPayment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WouldYouClaimRefund</Name>
			<Label>@TaxGSTSEZ:WouldYouClaimRefund_IN</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WouldYouClaimRefund</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GSTTDS</Name>
			<Label>@TaxGSTTDS:GSTTDSGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceSettleAmountGSTTDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExcludeGSTAmountGSTTDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxableAmountGSTTDS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculateWithTaxableAmountGSTTDS</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ServiceEventGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ServiceEventGroup_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValueTransactionCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS5298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustomsDuty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsAmount_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumRetailPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS5296</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxSetoffVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Label>@GLS221798</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TCSGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Label>@GLS5363</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TDSGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Label>@GLS5362</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProvisionalAssessment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@TaxGST:HelpTextOfProvisionalAssessment</HelpText>
			<Label>@TaxGST:ProvisionalAssessment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceIdentification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<HelpText>@SYS313566</HelpText>
			<EnumType>InvoiceIdentification_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OriginalTransactionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@SYS4001809</HelpText>
			<Label>@TaxGST:OriginalTransDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalTransactionID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxGSTTransactionID_IN</ExtendedDataType>
			<Label>@TaxGST:OriginalTransId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RefPurchInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@SYP4860675</HelpText>
			<Label>@SYP4860674</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefPurchInvoiceId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<HelpText>@SYP4860677</HelpText>
			<Label>@SYP4860676</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RefSalesInvoiceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@SYP4860675</HelpText>
			<Label>@SYP4860674</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefSalesInvoiceId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
			<HelpText>@SYP4860677</HelpText>
			<Label>@SYP4860676</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdNatureOfRemittance</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxWitholdNatureOfRemittanceRefRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdCountryRegionToRemittance</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxWithholdCountryToRemitRefRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdAcknowledgementNumber</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxWithholdAcknowledgementNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxInventVATCommodityCodeId</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxInventVATCommodityCodeId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInformation_IN</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>TaxInformationRefRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerJournalInclTax</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>LedgerJournalInclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DirectSettlement</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<EnumType>DirectSettlement_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CENVATCreditAvailed</Name>
			<ConfigurationKey>SysDeletedObjects80</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExcludedGSTAmountCur</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>AmountCurExcludedGSTAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WouldYouClaimRefund</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGSTSEZ:WouldYouClaimRefund_IN</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WithIGSTPayment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGSTSEZ:WithIGSTPayment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExcludeGSTAmountGSTTDS</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@TaxGSTTDS:ExcludeGSTAmountGSTTDS</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceSettleAmountGSTTDS</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@TaxGSTTDS:InvoiceSettleAmountGSTTDS</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxableAmountGSTTDS</Name>
			<AllowEdit>No</AllowEdit>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS62780</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalculateWithTaxableAmountGSTTDS</Name>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<Label>@TaxGSTTDS:CalculateWithTaxableAmountGSTTDS</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>LedgerJournalTrans</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxModelDocLineExtensionIN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionRefRecId</MapField>
					<MapFieldTo>LedgerJournalTrans</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLineExtension_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssessableValue</MapField>
					<MapFieldTo>AssessableValueTransactionCurrency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssessableValueAccountingCurrency</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditNoteDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsMaxRetailPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsTariffCodeTable</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DirectSettlement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSA</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseTariffCodes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MaximumRetailPrice</MapField>
					<MapFieldTo>MaximumRetailPrice</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTaxFormTypes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxAsPerOriginalInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTCSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTDSGroup</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeadingTCS_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdGroupHeading_2_LedgerJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TCSGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TCSGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeadingTDS_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdGroupHeading_1_LedgerJournalTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TDSGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TDSGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>