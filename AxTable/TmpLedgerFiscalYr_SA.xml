<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpLedgerFiscalYr_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpLedgerFiscalYr_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                     ret;
        FiscalCalendarYear          fiscalCalendarYear;
        LedgerFiscalCalendarYear    ledgerFiscalCalendarYear;
        boolean                     yrPresent;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(TmpLedgerFiscalYr_SA, Year) :
                while select EndDate from fiscalCalendarYear
                    exists join ledgerFiscalCalendarYear
                        where ledgerFiscalCalendarYear.FiscalCalendarYear == fiscalCalendarYear.RecId
                           && ledgerFiscalCalendarYear.Ledger == Ledger::current()
                           && ledgerFiscalCalendarYear.Status == FiscalYearStatus::Open
                {
                    if (year(fiscalCalendarYear.EndDate) == this.Year)
                    {
                        yrPresent = true;
                        break;
                    }
                }
                if (!yrPresent)
                {
                    ret = checkFailed(strfmt("@SYS112224", this.Year, fieldpname(TmpLedgerFiscalYr_SA, Year), tablepname(TmpLedgerFiscalYr_SA)));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFiscalYrs</Name>
				<Source><![CDATA[
        public static TmpLedgerFiscalYr_SA fillFiscalYrs(RefTableId _tableId)
    {
        TmpLedgerFiscalYr_SA        ledgerFiscalYr;
        FiscalCalendarYear          fiscalCalendarYear;
        LedgerFiscalCalendarYear    ledgerFiscalCalendarYear;

        if (_tableId == tablenum(AssetDepreciationZakat_SA))
        {
            while select EndDate from fiscalCalendarYear
                exists join ledgerFiscalCalendarYear
                    where ledgerFiscalCalendarYear.FiscalCalendarYear == fiscalCalendarYear.RecId
                       && ledgerFiscalCalendarYear.Ledger == Ledger::current()
            {
                ledgerFiscalYr.Year   = year(fiscalCalendarYear.EndDate);
                ledgerFiscalYr.Status = (ledgerFiscalCalendarYear.Status == FiscalYearStatus::Close) ? FiscalYearStatus::Close : FiscalYearStatus::Open;
                ledgerFiscalYr.insert();
            }
        }
        else
        {
            while select EndDate from fiscalCalendarYear
                exists join ledgerFiscalCalendarYear
                    where ledgerFiscalCalendarYear.FiscalCalendarYear == fiscalCalendarYear.RecId
                       && ledgerFiscalCalendarYear.Ledger == Ledger::current()
                       && ledgerFiscalCalendarYear.Status == FiscalYearStatus::Open
            {
                ledgerFiscalYr.Year   = year(fiscalCalendarYear.EndDate);
                ledgerFiscalYr.Status = FiscalYearStatus::Open;
                ledgerFiscalYr.insert();
            }
        }

        return ledgerFiscalYr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFiscalYr</Name>
				<Source><![CDATA[
        public static void lookupFiscalYr(
        FormIntControl  _ctrl,
        Common             _record,
        RefTableId         _tableId)
    {
        Args     args;
        FormRun  formRun;

        args = new Args();
        args.name(formstr(LedgerFiscalYrLookup_SA));
        args.record(_record);
        args.selectField(_tableId);
        args.caller(_ctrl);
        formRun = classfactory.formRunClass(args);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<Label>@SYS13292</Label>
	<TitleField1>Year</TitleField1>
	<TitleField2>Status</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Year</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>FiscalYearStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Year</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerFiscalYearZakat_SA</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>