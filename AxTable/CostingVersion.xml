<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostingVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostingVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPriceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the price type is allowed in the version.
    /// </summary>
    /// <param name="_costingVersionPriceType">
    ///    The price type to check.
    /// </param>
    /// <returns>
    ///    true if the price type is allowed; otherwise, false.
    /// </returns>
    boolean checkPriceType(CostingVersionPriceType _costingVersionPriceType)
    {
        boolean         ret;

        ret = true;
        if ((_costingVersionPriceType == CostingVersionPriceType::Purch && this.AllowPurch == NoYes::No) ||
            (_costingVersionPriceType == CostingVersionPriceType::Cost  && this.AllowCost  == NoYes::No) ||
            (_costingVersionPriceType == CostingVersionPriceType::Sales && this.AllowSales == NoYes::No))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersionActivationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Activate button should be enabled on the costing versions form.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean costingVersionActivationEnabled()
    {
        return this.RecId != 0 && !this.BlockActivation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersionBOMCalcEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Calculation button should be enabled on the costing versions form.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean costingVersionBOMCalcEnabled()
    {
        return this.RecId != 0 && !this.Blocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersionCopyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Copy to button should be enabled on the Costing versions form.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean costingVersionCopyEnabled()
    {
        return this.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersionPriceEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Price button should be enabled on the Costing versions form.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean costingVersionPriceEnabled()
    {
        return this.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costingVersionPrintEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Print button should be enabled on the costing versions form.
    /// </summary>
    /// <returns>
    ///    true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean costingVersionPrintEnabled()
    {
        return this.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>CostingVersion</c> table buffer based on the costing type.
    /// </summary>
    void initFromCostingType()
    {
        void setupStdCostRestrictions()
        {
            this.PriceAllocateMarkup    = NoYes::Yes;
            this.RecordRestrict         = NoYes::Yes;
            this.bomCalcRestrict        = NoYes::Yes;
            this.bomCostPriceModel      = BOMCostPriceModel::ItemCostPrice;
            this.bomCalcExplosionMode   = BOMCalcExplosionMode::SingleLevel;
            this.PurchPriceModel        = PurchPriceModel::PurchPrice;
        }

        switch (this.CostingType)
        {
            case CostingVersionCostingType::Standard:
                setupStdCostRestrictions();
                break;

            case CostingVersionCostingType::Conversion:
                setupStdCostRestrictions();
                this.AllowCost          = NoYes::Yes;
                this.AllowPurch         = NoYes::No;
                this.AllowSales         = NoYes::No;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.AllowPurch             = NoYes::Yes;
        this.AllowCost              = NoYes::Yes;
        this.AllowSales             = NoYes::Yes;
        this.BlockActivation        = NoYesCombo::Yes;
        this.bomCalcRun             = NoYes::Yes;
        this.PurchCalcRun           = NoYes::Yes;
        this.PurchPriceModel        = PurchPriceModel::PurchPrice;
        this.initFromCostingType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchToStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches a costing version to a standard cost costing version.
    /// </summary>
    public void switchToStandard()
    {
        this.CostingType     = CostingVersionCostingType::Standard;
        this.Blocked         = NoYesCombo::Yes;
        this.BlockActivation = NoYesCombo::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventItemPriceSim  inventItemPriceSim;
        date                origDate;

        ttsbegin;

        origDate = this.orig().DefaultDate;

        // Execute super() first because updating InventItemPriceSim will update the CostingVersion
        super();

        if (this.CostingType == CostingVersionCostingType::Conversion &&
            this.DefaultDate != origDate)
        {
            update_recordset inventItemPriceSim
                setting FromDate = this.DefaultDate
                where inventItemPriceSim.VersionId == this.VersionId;

            // Reread the record because it might have been changed by InventItemPriceSim
            this.reread();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean         ret;
        CostingVersion  fallbackCostingVersion;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(CostingVersion, bomFallBackVersion) :
                if (this.VersionId == this.bomFallBackVersion)
                {
                    ret = checkFailed("@SYS104634");
                }
                if (this.bomFallBackVersion)
                {
                    fallbackCostingVersion = CostingVersion::find(this.bomFallBackVersion);
                    if ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion) &&
                        fallbackCostingVersion.CostingType != CostingVersionCostingType::Standard)
                    {
                        ret = checkFailed(strFmt("@SYS112057", CostingVersionCostingType::Standard));
                    }

                    if (ret && fallbackCostingVersion.CostingType == CostingVersionCostingType::Conversion)
                    {
                        ret = checkFailed(strFmt("@SYS120284", CostingVersionCostingType::Conversion));
                    }
                }
                break;

            case fieldNum(CostingVersion, PriceAllocateMarkup) :
                if ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion) &&
                    this.PriceAllocateMarkup == NoYes::No)
                {
                    ret = checkFailed(strFmt("@SYS112056", "@SYS6613", this.CostingType));
                }
                break;

            case fieldNum(CostingVersion, RecordRestrict) :
                if ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion) &&
                    this.RecordRestrict == NoYes::No)
                {
                    ret = checkFailed(strFmt("@SYS112056", "@SYS112051", this.CostingType));
                }
                break;

            case fieldNum(CostingVersion, bomCalcRestrict) :
                if ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion) &&
                    this.bomCalcRestrict == NoYes::No)
                {
                    ret = checkFailed(strFmt("@SYS112056", "@SYS103454", this.CostingType));
                }
                break;

            case fieldNum(CostingVersion, bomCostPriceModel) :
                if ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion) &&
                    this.bomCostPriceModel != BOMCostPriceModel::ItemCostPrice)
                {
                    ret = checkFailed(strFmt("@SYS113587", "@SYS93990", BOMCostPriceModel::ItemCostPrice, this.CostingType));
                }
                break;

            case fieldNum(CostingVersion, bomCalcExplosionMode) :
                if ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion) &&
                    this.bomCalcExplosionMode != BOMCalcExplosionMode::SingleLevel)
                {
                    ret = checkFailed(strFmt("@SYS113587", "@SYS116255", BOMCalcExplosionMode::SingleLevel, this.CostingType));
                }
                break;
            case fieldNum(CostingVersion, PurchPriceModel) :
                if (this.validatePurchPriceModel())
                {
                    ret = checkFailed(strFmt("@SYS113587", "@SYS303203", PurchPriceModel::PurchPrice, this.CostingType));
                }
                break;
            case fieldNum(CostingVersion, AllowPurch) :
                if (this.CostingType == CostingVersionCostingType::Conversion && this.AllowPurch)
                {
                    ret = checkFailed(strFmt("@SYS120288", new DictField(this.TableId, _fieldIdToCheck).label()));
                }
                break;

            case fieldNum(CostingVersion, AllowSales) :
                if (this.CostingType == CostingVersionCostingType::Conversion && this.AllowSales)
                {
                    ret = checkFailed(strFmt("@SYS120288", new DictField(this.TableId, _fieldIdToCheck).label()));
                }
                break;

            case fieldNum(CostingVersion, AllowCost) :
                if (this.CostingType == CostingVersionCostingType::Conversion && !this.AllowCost)
                {
                    ret = checkFailed(strFmt("@SYS112056", new DictField(this.TableId, _fieldIdToCheck).label(), CostingVersionCostingType::Conversion));
                }
                break;
            case fieldNum(CostingVersion, BlockActivation) :
                if (this.CostingType == CostingVersionCostingType::Conversion && !this.BlockActivation)
                {
                    ret = checkFailed(strFmt("@SYS120289", new DictField(this.TableId, _fieldIdToCheck).label(), "@SYS26062"));
                }
                break;
            case fieldNum(CostingVersion, InventSiteId) :
                if (this.CostingType == CostingVersionCostingType::Conversion && this.InventSiteId)
                {
                    ret = checkFailed(strFmt("@SYS120290", new DictField(this.TableId, _fieldIdToCheck).label()));
                }

            case fieldNum(CostingVersion, CostingType) :
                if (this.CostingType == CostingVersionCostingType::Conversion)
                {
                    ret = checkFailed(strFmt("@SYS120291", CostingVersionCostingType::Conversion));
                }

            case fieldNum(CostingVersion, DefaultDate) :
                if (this.CostingType == CostingVersionCostingType::Conversion)
                {
                    ret = checkFailed("@SYS120292");
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchPriceModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the <c>PurchPriceModel</c> field is set correctly.
    /// </summary>
    /// <returns>true if the <c>PurchPriceModel</c> field is set correctly; otherwise, false.</returns>
    protected boolean validatePurchPriceModel()
    {
        return ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion)
            && this.PurchPriceModel != PurchPriceModel::PurchPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (!ret)
        {
            return ret;
        }

        switch (this.bomCalcFallBack)
        {
            case BOMCalcFallBack::Simulated:
                if (this.bomFallBackVersion)
                {
                    if ((this.CostingType == CostingVersionCostingType::Standard || this.CostingType == CostingVersionCostingType::Conversion) &&
                        CostingVersion::find(this.bomFallBackVersion).CostingType != CostingVersionCostingType::Standard)
                    {
                        ret = checkFailed(strFmt("@SYS112057", this.CostingType));
                    }
                }
                else
                {
                    ret  = checkFailed("@SYS106033");
                }
                break;

            case BOMCalcFallBack::None,
                BOMCalcFallBack::CurrentActive:
                if (this.bomFallBackVersion)
                {
                    ret  = checkFailed("@SYS106034");
                }
                break;
        }

        switch (this.CostingType)
        {
            case CostingVersionCostingType::Standard,
                CostingVersionCostingType::Conversion:
                if (this.PriceAllocateMarkup == NoYes::No)
                {
                    ret = checkFailed(strFmt("@SYS112056", "@SYS6613", this.CostingType));
                }

                if (this.bomCalcExplosionMode != BOMCalcExplosionMode::SingleLevel)
                {
                    ret = checkFailed(strFmt("@SYS113587", "@SYS116255", BOMCalcExplosionMode::SingleLevel, this.CostingType));
                }
                break;
        }

        if (this.bomCalcRestrict && !this.bomCalcRun && !this.PurchCalcRun)
        {
            ret = checkFailed("@SYS328827");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blocked</Name>
				<Source><![CDATA[
    static NoYesId blocked(
        CostingVersionId      _costingVersion,
        CostingVersionStatus  _costingVersionStatus
        )
    {
        NoYesId blocked;

        switch (_costingVersionStatus)
        {
            case CostingVersionStatus::Current:
                blocked = NoYes::Yes;
                break;

            case CostingVersionStatus::Previous:
                blocked = NoYes::Yes;
                break;

            case CostingVersionStatus::Pending:
                blocked = CostingVersion::find(_costingVersion).Blocked ? NoYes::Yes : NoYes::No;
                break;

            default:
                blocked = NoYes::Yes;
        }
        return blocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCostingType2InventItemCostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the value in one enumeration to the value in another enumeration.
    /// </summary>
    /// <param name="_costingVersionCostingType">
    ///    The enumeration that is being converted.
    /// </param>
    /// <returns>
    ///    A new enumeration of the type <c>InventItemCostingType</c>.
    /// </returns>
    public static InventItemCostingType convertCostingType2InventItemCostingType(CostingVersionCostingType _costingVersionCostingType)
    {
        InventItemCostingType convertToInventItemCostingType;

        switch (_costingVersionCostingType)
        {
            case CostingVersionCostingType::Standard,
                CostingVersionCostingType::Conversion:
                convertToInventItemCostingType = InventItemCostingType::Standard;
                break;

            case CostingVersionCostingType::Normal:
                convertToInventItemCostingType = InventItemCostingType::Undefined;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return convertToInventItemCostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static CostingVersion find(
        CostingVersionId    _costingVersion,
        boolean             _forUpdate          = false
        )
    {
        CostingVersion      costingVersion;

        costingVersion.selectForUpdate(_forUpdate);

        if (_costingVersion)
        {
            select firstonly costingVersion
                where costingVersion.VersionId == _costingVersion;
        }
        return costingVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBOMCalcCostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the costing type that is used for fetching a costing record.
    /// </summary>
    /// <param name="_versionId">
    ///    The version ID.
    /// </param>
    /// <param name="_bomCostPriceModel">
    ///    A <c>BOMCostPriceModel</c> value that controls how the prices are fetched.
    /// </param>
    /// <returns>
    ///    The costing type that should be used for fetching an item price.
    /// </returns>
    static InventItemCostingType findBOMCalcCostingType(
        CostingVersionId    _versionId,
        BOMCostPriceModel   _bomCostPriceModel
        )
    {
        InventItemCostingType inventItemCostingType;
        CostingVersion        costingVersion;

        switch (_bomCostPriceModel)
        {
            case BOMCostPriceModel::BOMCalcGroup:
                inventItemCostingType = InventItemCostingType::Default;
                break;

            case BOMCostPriceModel::ItemCostPrice:
                costingVersion        = CostingVersion::find(_versionId);
                inventItemCostingType = CostingVersion::convertCostingType2InventItemCostingType(costingVersion.CostingType);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return inventItemCostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastActivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the last activated date of a costing version whenever a pending price is activated.
    /// </summary>
    /// <param name="_costingVersion">
    /// The ID of the costing version.
    /// </param>
    /// <remarks>
    /// The record is updated only if the new date differs from the old date.
    /// </remarks>
    public static void updateLastActivation(CostingVersionId  _costingVersion)
    {
        CostingVersion costingVersion;

        costingVersion = CostingVersion::find(_costingVersion);

        if (costingVersion.LastActivation == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || costingVersion.RecId == 0)
        {
            return;
        }

        ttsbegin;

        costingVersion = CostingVersion::find(_costingVersion, true);
        costingVersion.LastActivation = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        costingVersion.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the last activated date of a costing version whenever a price is created, modified,
    /// activated, or deleted.
    /// </summary>
    /// <param name="_costingVersion">
    /// The ID of the costing version.
    /// </param>
    /// <remarks>
    /// The record is updated only if the new date differs from the old date.
    /// </remarks>
    public static void updateLastUpdated(CostingVersionId  _costingVersion)
    {
        #OCCRetryCount

        CostingVersion costingVersion;

        costingVersion = CostingVersion::find(_costingVersion);

        if (costingVersion.LastUpdate == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || costingVersion.RecId == 0)
        {
            return;
        }

        try
        {
            ttsbegin;

            costingVersion = CostingVersion::find(_costingVersion, true);
            costingVersion.LastUpdate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            costingVersion.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceAllocateMarkup</Name>
				<Source><![CDATA[
    private void defaultPriceAllocateMarkup()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, PriceAllocateMarkup)) || this.interactiveContext())
        {
            if (this.CostingType == CostingVersionCostingType::Normal)
            {
                this.PriceAllocateMarkup = NoYes::No;
            }
            else
            {
                this.PriceAllocateMarkup = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRecordRestrict</Name>
				<Source><![CDATA[
    private void defaultRecordRestrict()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, RecordRestrict)) || this.interactiveContext())
        {
            if (this.CostingType == CostingVersionCostingType::Normal)
            {
                this.RecordRestrict = NoYes::No;
            }
            else
            {
                this.RecordRestrict = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBomCalcRestrict</Name>
				<Source><![CDATA[
    private void defaultBomCalcRestrict()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, bomCalcRestrict)) || this.interactiveContext())
        {
            if (this.CostingType == CostingVersionCostingType::Normal)
            {
                this.bomCalcRestrict = NoYes::No;
            }
            else
            {
                this.bomCalcRestrict = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBomCostPriceModel</Name>
				<Source><![CDATA[
    private void defaultBomCostPriceModel()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, bomCostPriceModel)) || this.interactiveContext())
        {
            if (this.CostingType == CostingVersionCostingType::Normal)
            {
                this.bomCostPriceModel = BOMCostPriceModel::BOMCalcGroup;
            }
            else
            {
                this.bomCostPriceModel = BOMCostPriceModel::ItemCostPrice;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultbomCalcExplosionMode</Name>
				<Source><![CDATA[
    private void defaultbomCalcExplosionMode()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, bomCalcExplosionMode)) || this.interactiveContext())
        {
            if (this.CostingType == CostingVersionCostingType::Normal)
            {
                this.bomCalcExplosionMode = BOMCalcExplosionMode::MultiLevel;
            }
            else
            {
                this.bomCalcExplosionMode = BOMCalcExplosionMode::SingleLevel;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchPriceModel</Name>
				<Source><![CDATA[
    private void defaultPurchPriceModel()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, PurchPriceModel)) || this.interactiveContext())
        {
            this.PurchPriceModel = PurchPriceModel::PurchPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAllowCost</Name>
				<Source><![CDATA[
    private void defaultAllowCost()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, AllowCost)) || this.interactiveContext())
        {
            this.AllowCost = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAllowPurch</Name>
				<Source><![CDATA[
    private void defaultAllowPurch()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, AllowPurch)) || this.interactiveContext())
        {
            if (this.CostingType == CostingVersionCostingType::Conversion)
            {
                this.AllowPurch = NoYes::No;
            }
            else
            {
                this.AllowPurch = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAllowSales</Name>
				<Source><![CDATA[
    private void defaultAllowSales()
    {
        if (!this.isFieldSet(fieldnum(CostingVersion, AllowSales)) || this.interactiveContext())
        {
            if (this.CostingType == CostingVersionCostingType::Conversion)
            {
                this.AllowSales = NoYes::No;
            }
            else
            {
                this.AllowSales = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(CostingVersion, PriceAllocateMarkup):
                this.defaultPriceAllocateMarkup();
                break;

            case fieldnum(CostingVersion, RecordRestrict):
                this.defaultRecordRestrict();
                break;

            case fieldnum(CostingVersion, bomCalcRestrict):
                this.defaultBomCalcRestrict();
                break;

            case fieldnum(CostingVersion, bomCostPriceModel):
                this.defaultBomCostPriceModel();
                break;

            case fieldnum(CostingVersion, bomCalcExplosionMode):
                this.defaultBomCalcExplosionMode();
                break;

            case fieldnum(CostingVersion, PurchPriceModel):
                this.defaultPurchPriceModel();
                break;

            case fieldnum(CostingVersion, AllowCost):
                this.defaultAllowCost();
                break;

            case fieldnum(CostingVersion, AllowPurch):
                this.defaultAllowPurch();
                break;

            case fieldnum(CostingVersion, AllowSales):
                this.defaultAllowSales();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldnum (CostingVersion, PriceAllocateMarkup), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, RecordRestrict), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, bomCalcRestrict), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, bomCostPriceModel), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, bomCalcExplosionMode), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, PurchPriceModel), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, AllowCost), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, AllowPurch), [fieldnum (CostingVersion, CostingType)]],
            [fieldnum (CostingVersion, AllowSales), [fieldnum (CostingVersion, CostingType)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        TableExtension ret;

        ret = SysTableExtension::construct();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123800</DeveloperDocumentation>
	<FormRef>CostingVersion</FormRef>
	<Label>@SYS103444</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>VersionId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>VersionIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>VersionIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CostSheetCalculationFactor</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CostSheetCalculationFactor</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemPrice</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventItemPrice</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventItemPriceSim</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventItemPriceSim</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventStdCostConv</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventStdCostConv</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RouteCostCategoryPrice</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RouteCostCategoryPrice</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastActivation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AllowPriceTypes</Name>
			<Label>@SYS112054</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowPurch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowSales</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOMCalculation</Name>
			<Label>@SYS103589</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMCalcRun</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchCalcRun</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCalcRestrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCostPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCalcFallBack</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMFallBackVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCostProfitSet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMCalcExplosionMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Model</Name>
			<Label>@SYS9923</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastActivation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidFor</Name>
			<Label>@SYS17743</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VersionValues</Name>
			<Label>@SYS112055</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecordRestrict</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceAllocateMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundOffCalculation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceAllowCost</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowPurch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceAllowPurch</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceAllowSales</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlockActivation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS126900</Label>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS28075</Label>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMCalcExplosionMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcExplosionMode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMCalcFallBack</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCalcFallBack</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMCalcRestrict</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS103454</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMCalcRun</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Prod</ConfigurationKey>
			<Label>@SYS4398</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMCostPriceModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BOMCostPriceModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BOMCostProfitSet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostProfitSet</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMFallBackVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<Label>@SYS104633</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostingType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostingVersionCostingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DefaultDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastActivation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS103450</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastUpdate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS103451</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceAllocateMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceAllocateMarkup</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchCalcRun</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Label>@SYS15812</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchPriceModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchPriceModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecordRestrict</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceRecRestrict</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundOffCalculation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventPriceRoundOff</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VersionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VersionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FallbackCostingVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMFallBackVersion</Name>
					<SourceEDT>CostingVersionId</SourceEDT>
					<Field>BOMFallBackVersion</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>