<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardTypeSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CreditCardTypeSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>CreditCardTypeSetup</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_creditCardProcessors">
    /// A <c>CreditCardProcessors</c> record to check for existence.
    /// </param>
    /// <param name="_cardTypeName">
    /// A <c>CreditCardTypeName</c> to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CreditCardProcessors _creditCardProcessors, CreditCardTypeName _cardTypeName)
    {
        if (!CreditCardTypeSetup::exist(_creditCardProcessors, _cardTypeName))
        {
            return checkFailed(strFmt(CreditCardTypeSetup::txtNotExist(), _creditCardProcessors, _cardTypeName));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new <c>CreditCardTypeSetup</c> record.
    /// </summary>
    /// <param name="_creditCardProcessors">
    /// A <c>CreditCardProcessors</c> table record.
    /// </param>
    /// <remarks>
    /// A new record is only added if it does not already exist including child records in the <c>CreditCardTypeCurrency</c> table.
    /// </remarks>
    public static void createDefaultData(CreditCardProcessors _creditCardProcessors)
    {
    #define.isoUSD('USD')
        CreditCardAccountSetup creditCardAccountSetup;
        CreditCardTypeSetup creditCardTypeSetup;
        CreditCardPaymentProperties creditCardPaymentProperties;
        ListEnumerator enumCardTypeNames;
        CreditCardTypeName cardTypeName;
        List creditCardTypeNames;
        ListEnumerator enumCurrency;
        CurrencyCode currency;

        const boolean Decrypt = false;

        boolean containsCreditCardTypeName(str _name)
        {
            ListEnumerator enumNames = creditCardTypeNames.getEnumerator();

            while (enumNames.moveNext())
            {
                if (enumNames.current() == _name)
                {
                    return true;
                }
            }
            return false;
        }

        if (_creditCardProcessors)
        {
            creditCardAccountSetup = CreditCardAccountSetup::find(_creditCardProcessors.RecId);
            creditCardPaymentProperties = CreditCardPaymentProperties::fromXmlString(creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Decrypt, ''));
            creditCardTypeNames = strSplit(creditCardPaymentProperties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_MerchantAccount(), Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.MerchantAccountProperties::get_SupportedTenderTypes()).parmStringValue(), ';');
            enumCardTypeNames = creditCardTypeNames.getEnumerator();

            // Delete records for any invalid card type.
            while select forUpdate CreditCardTypeName
                from creditCardTypeSetup
                    where creditCardTypeSetup.CreditCardProcessors == _creditCardProcessors.RecId
            {
                if (!containsCreditCardTypeName(creditCardTypeSetup.CreditCardTypeName))
                {
                    creditCardTypeSetup.delete();
                }
            }

            // Create records for each card type.
            while (enumCardTypeNames.moveNext())
            {
                cardTypeName = enumCardTypeNames.current();
                if (!CreditCardTypeSetup::find(_creditCardProcessors, cardTypeName))
                {
                    creditCardTypeSetup.clear();
                    creditCardTypeSetup.CreditCardProcessors = _creditCardProcessors.RecId;
                    creditCardTypeSetup.CreditCardTypeName = cardTypeName;
                    creditCardTypeSetup.DataSupport = CreditCardDataSupport::Level1;
                    creditCardTypeSetup.insert();

                    // Create record for first currency
                    enumCurrency = strSplit(creditCardPaymentProperties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_MerchantAccount(), Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.MerchantAccountProperties::get_SupportedCurrencies()).parmStringValue(), ';').getEnumerator();
                    currency = enumCurrency.moveNext() ? any2str(enumCurrency.current()) : #isoUSD;

                    CreditCardTypeCurrency::createDefaultData(creditCardTypeSetup, currency);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>CreditCardTypeSetup</c> table exists.
    /// </summary>
    /// <param name="_creditCardProcessors">
    /// A <c>CreditCardProcessors</c> record to check for existence.
    /// </param>
    /// <param name="_cardTypeName">
    /// A <c>CreditCardTypeName</c> record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(CreditCardProcessors _creditCardProcessors, CreditCardTypeName _cardTypeName)
    {
        return (select creditCardTypeSetup
                 where
                    creditCardTypeSetup.CreditCardProcessors == _creditCardProcessors.RecId &&
                    creditCardTypeSetup.CreditCardTypeName == _cardTypeName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardTypeSetup</c> table.
    /// </summary>
    /// <param name="_creditCardProcessors">
    /// A <c>CreditCardProcessors</c> record to check for existence.
    /// </param>
    /// <param name="_cardTypeName">
    /// A <c>CreditCardTypeName</c> record to check for existence.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardTypeSetup</c> table; otherwise, an empty record.
    /// </returns>
    public static CreditCardTypeSetup find(
            CreditCardProcessors _creditCardProcessors,
            CreditCardTypeName _cardTypeName,
            boolean _forUpdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardTypeSetup creditCardTypeSetup;

        creditCardTypeSetup.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            creditCardTypeSetup.concurrencyModel(_concurrencyModel);
        }

        select firstonly creditCardTypeSetup
            where
                creditCardTypeSetup.CreditCardProcessors == _creditCardProcessors.RecId &&
                creditCardTypeSetup.CreditCardTypeName == _cardTypeName;

        return creditCardTypeSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CreditCard</ConfigurationKey>
	<DeveloperDocumentation>@SYS328655</DeveloperDocumentation>
	<FormRef>CreditCardTypeSetup</FormRef>
	<Label>@SYS327089</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CreditCardTypeName</TitleField1>
	<TitleField2>PaymentJournal</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProcessorCardTypeIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>AccountsReceivable</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CreditCardTypeCurrency</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CreditCardTypeCurrency</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditCardTypeName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditCardTypeName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataSupport</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CreditCardProcessors</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardProcessorsId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditCardTypeName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardTypeName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DataSupport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CreditCardDataSupport</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentJournal</Name>
			<ExtendedDataType>LedgerJournalNameId</ExtendedDataType>
			<Label>@SYS112305</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProcessorCardTypeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>CreditCardProcessors</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CreditCardTypeName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CreditCardProcessors</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CreditCardProcessors</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CreditCardProcessors</Name>
					<Field>CreditCardProcessors</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalName</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentJournal</Name>
					<SourceEDT>LedgerJournalNameId</SourceEDT>
					<Field>PaymentJournal</Field>
					<RelatedField>JournalName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>JournalNameIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>