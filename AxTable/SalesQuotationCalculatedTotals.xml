<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationCalculatedTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationCalculatedTotals extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateForSalesQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals for a sales Quote. If a <c>SalesQuotationCalculatedTotals</c> record is existing, then it is updated.
    /// If one is not existing, then it is created.
    /// </summary>
    /// <param name = "_quotationId">
    /// <c>QuotationIdBase</c> of the sales quotation for which the totals should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Update timestamp that should be marked on the record.
    /// </param>
    /// <returns>
    /// <c>SalesQuotationCalculatedTotals</c> record containing the calculated totals.
    /// </returns>
    public static SalesQuotationCalculatedTotals calculateForSalesQuotation(QuotationIdBase _quotationId, utcdatetime _updateDateTime )
    {
        using (SysInstrumentationActivityContext activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(tableStr(SalesQuotationCalculatedTotals)).salesTotalsCalculateActivities().calculateForSalesQuotation())
        {
            ttsbegin;

            SalesQuotationCalculatedTotals quotationTotals = SalesQuotationCalculatedTotals::find(_quotationId, true);
        
            SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(_quotationId);

            SalesQuotationTotals totals = SalesQuotationTotals::construct(salesQuotationTable, SalesUpdate::All);
            quotationTotals.LineTotalAmount                 = totals.totalBalance();
            quotationTotals.TotalDiscountAmount             = totals.totalEndDisc();
            quotationTotals.QuotationTotalDiscountAmount    = quotationTotals.TotalDiscountAmount + totals.totalLineDisc();
            quotationTotals.QuotationTotalChargesAmount     = totals.totalMarkup();
            quotationTotals.QuotationTotalTaxAmount         = totals.totalTaxAmount();
            quotationTotals.QuotationTotalAmount            = totals.totalAmount();
            quotationTotals.LastUpdatedDateTime             = _updateDateTime;

            if (quotationTotals.RecId)
            {
                quotationTotals.update();
            }
            else
            {
                quotationTotals.QuotationId = _quotationId;
                quotationTotals.insert();
            }

            ttscommit;

            activityContext.addCustomProperty(tableStr(SalesQuotationTable), int642Str(salesQuotationTable.RecId));

            return quotationTotals;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SalesQuotationCalculatedTotals find(QuotationIdBase _quotationId, boolean _forUpdate = false)
    {
        SalesQuotationCalculatedTotals quotationTotals;

        quotationTotals.selectForUpdate(_forUpdate);

        if (_quotationId)
        {
            select firstonly quotationTotals
                where quotationTotals.QuotationId == _quotationId;
        }
        return quotationTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuotationHeaderTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>QuotationHeaderTaxAmount</c> field on a<c>SalesQuotationCalculatedTotals</c> record with the difference between quotation total tax amount and line tax amounts.
    /// </summary>
    /// <remarks>Tax on charges related to the sales quotation header will be included in this amount.</remarks>
    /// <param name = "_quotationTotals">SalesQuotationCalculatedTotals record to update</param>
    public static void updateQuotationHeaderTaxAmount(SalesQuotationCalculatedTotals _quotationTotals)
    {
        ttsbegin;
        
        _quotationTotals.selectForUpdate(true);
        SalesQuotationLineCalculatedTotals quotationLineTotals;

        select sum(TotalTaxAmount) from quotationLineTotals where quotationLineTotals.QuotationId == _quotationTotals.QuotationId;
        _quotationTotals.QuotationHeaderTaxAmount = _quotationTotals.QuotationTotalTaxAmount - quotationLineTotals.TotalTaxAmount;
        _quotationTotals.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:SalesQuotationCalculatedTotalsDevDoc</DeveloperDocumentation>
	<Label>@SCM:SalesQuotationCalculatedTotals</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>QuotationId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>QuotationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QuotationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QuotationIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineTotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalAmount</ExtendedDataType>
			<Label>@SYS5360</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuotationTotalChargesAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalMarkupAmount</ExtendedDataType>
			<Label>@SYS11466</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
			<Label>@RET3621</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuotationTotalDiscountAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesDiscountAmount</ExtendedDataType>
			<Label>@SYS16711</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuotationTotalTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalTaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuotationTotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MCRTotalAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>LastUpdatedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesTotalsLastUpdatedDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuotationHeaderTaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>QuotationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SalesQuotationTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>SalesQuotationTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotationId</Name>
					<Field>QuotationId</Field>
					<RelatedField>QuotationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>