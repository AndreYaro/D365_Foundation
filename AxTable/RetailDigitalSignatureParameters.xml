<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDigitalSignatureParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailDigitalSignatureParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates record in the <c>RetailDigitalSignatureParameters</c> table.
    /// </summary>
    /// <param name="_forupdate">
    /// True if the returned record is allowed to update; otherwise, false.
    /// </param>
    /// <returns>
    /// The record of the <c>RetailDigitalSignatureParameters</c> table.
    /// </returns>
    public static RetailDigitalSignatureParameters find(boolean _forupdate = false)
    {
        RetailDigitalSignatureParameters parameter;

        if (_forupdate)
        {
            parameter.selectForUpdate(_forupdate);
        }

        select firstonly parameter
            index KeyIdx
            where parameter.Key == 0;

        if (!parameter && !parameter.isTmp())
        {
            Company::createParameter(parameter);
        }

        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailDigitalSignatureParameters_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// On validating retail digital signature parameters write handler.
    /// </summary>
    /// <param name="sender">The event sender.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(RetailDigitalSignatureParameters), DataEventType::ValidatingWrite)]
    public static void RetailDigitalSignatureParameters_onValidatingWrite(Common sender, DataEventArgs e)
    {
        RetailDigitalSignatureParameters parameters = sender as RetailDigitalSignatureParameters;

        if (parameters.DigestAlgorithm)
       {
           if (!RetailDigitalSignatureManager::isHashAlgorithmSupported(parameters.DigestAlgorithm))
           {
               str message = con2Str(RetailDigitalSignatureManager::getSupportedHashAlgorithms(), ', ');
               warning(strFmt("@RetailGrandTotalJournal:DeprecatedHashAlgorithmsInCommerceParameters", parameters.DigestAlgorithm, message));
           }
       }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<CountryRegionCodes>FR</CountryRegionCodes>
	<DeveloperDocumentation>@RetailGrandTotalJournal:RetailDigitalSignatureParametersDevDoc</DeveloperDocumentation>
	<Label>@RetailGrandTotalJournal:DigitalSignatureParams</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Parameter</TableGroup>
	<CacheLookup>EntireTable</CacheLookup>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>CommerceMiscellaneous</Modules>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DigestAlgorithm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DigitalCertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificateRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SignatureConfig</Name>
			<Label>@RetailGrandTotalJournal:DigitalSignatureParams</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DigitalCertificateSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificateRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DigestAlgorithm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Encoding</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DigestAlgorithm</Name>
			<ExtendedDataType>String10</ExtendedDataType>
			<HelpText>@RetailGrandTotalJournal:TypeOfHashFunction</HelpText>
			<Label>@RetailGrandTotalJournal:HashFunction</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DigitalCertificateSubject</Name>
			<ExtendedDataType>DigitalCertificateSubject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Encoding</Name>
			<ExtendedDataType>String10</ExtendedDataType>
			<HelpText>@RetailGrandTotalJournal:CharEncoding</HelpText>
			<Label>@RetailGrandTotalJournal:Encoding</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Key</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ParametersKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultCertificateRef</Name>
			<ExtendedDataType>KeyVaultCertificateRef</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Key</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultCertificateTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>KeyVaultCertificateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultCertificateRef</Name>
					<Field>KeyVaultCertificateRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>