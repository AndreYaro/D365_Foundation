<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISWaybillSettlement_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EGAISWaybillSettlement_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>purchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the purchase ID of the purchase order line which Lot ID is stored in the current settlement line.
    /// </summary>
    /// <returns>
    ///    The purchase ID of the purchase order line which Lot ID is stored in the current settlement line.
    /// </returns>
    public display PurchId purchId()
    {
        return PurchLine::findInventTransId(this.InventTransId).PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;
        EGAISWaybillSettlement_RU   settlement;
        EGAISWaybillLine_RU         waybillLine;

        ret = super();

        if (this.Qty < 0)
        {
            ret = checkFailed("@SYS50502");
        }

        if (ret)
        {
            waybillLine = EGAISWaybillLine_RU::findRecId(this.WaybillLine);

            select sum(Qty) from settlement
            where settlement.WaybillLine == this.WaybillLine
               && settlement.RecId       != this.RecId;

            if (settlement.Qty + this.Qty > waybillLine.Qty)
            {
                ret = checkFailed(strFmt("@EGAIS:TotalSettledQuantityExceedsTheQuantityInTheEgaisBo", settlement.Qty + this.Qty, waybillLine.Qty));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a settlement between a purchase line and EGAIS waybill line.
    /// </summary>
    /// <param name="_purchLine">
    ///    Purchase order line which have to be settled with the EGAIS waybill line.
    /// </param>
    /// <param name="_waybillLine">
    ///    EGAIS waybill line which have to be settled with the purchase order line.
    /// </param>
    /// <returns>
    ///    true, if the settlement was created; otherwise, false.
    /// </returns>
    public static boolean createPurchSettlement(PurchLine _purchLine,
        EGAISWaybillLine_RU _waybillLine)
    {
        Qty                         settlementQty;
        EGAISWaybillSettlement_RU   settlement;
        InventDim                   inventDim;

        if (Box::okCancel(strFmt("@EGAIS:PurchaseOrderLineWithLotIdWillBeUsedForSettlementC", _purchLine.InventTransId), DialogButton::Ok, "@SYS10163") == DialogButton::Ok)
        {
            select firstOnly settlement
            where settlement.WaybillLine == _waybillLine.RecId
               && settlement.InventTransId == _purchLine.InventTransId;

            if (settlement)
            {
                throw error(strFmt("@EGAIS:EgaisBolLineWithIdentityIsAlreadySettledWithPurcha", _waybillLine.Identity, _purchLine.InventTransId));
            }

            settlementQty = min(_purchLine.EGAISUnsettledQty_RU(), _waybillLine.unsettledQty());

            inventDim                   = _purchLine.inventDim();
            inventDim.inventBatchId     = _waybillLine.informB().InventBatchId;

            settlement.InventTransId    = _purchLine.InventTransId;
            settlement.WaybillLine      = _waybillLine.RecId;
            settlement.InventDimId      = InventDim::findOrCreate(inventDim).InventDimId;
            settlement.Qty              = settlementQty;

            if (settlement.validateWrite())
            {
                settlement.insert();
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the settlement exists for the specified record.
    /// </summary>
    /// <param name="_common">
    ///    Table record for which the existence of the settlement should be determined.
    /// </param>
    /// <returns>
    ///    true, if the settlement exists for the specified record; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The type of the table passed as a parameter is not used for the EGAIS settlement.
    /// </exception>
    public static boolean existsSettlement(Common   _common)
    {
        EGAISWaybillSettlement_RU       settlement;
        EGAISWaybillJour_RU             waybillJour;
        EGAISWaybillLine_RU             waybillLine;
        PurchLine                       purchLine;
        InventTrans                     inventTrans;
        boolean                         ret;

        switch (_common.TableId)
        {
            case tableNum(EGAISWaybillLine_RU):
                waybillLine = _common;
                ret =  (select firstOnly RecId from EGAISWaybillSettlement_RU
                        where EGAISWaybillSettlement_RU.WaybillLine == waybillLine.RecId).RecId != 0;
                break;

            case tableNum(PurchLine):
                purchLine = _common;
                select firstOnly RecId from settlement
                where settlement.InventTransId == purchLine.InventTransId
            exists join waybillLine
                where waybillLine.RecId == settlement.WaybillLine
            exists join waybillJour
                where waybillJour.RecId == waybillLine.WaybillJour
                   && waybillJour.Direction == EGAISDocumentDirection_RU::Incoming;

                ret = settlement.RecId != 0;
                break;

            case tableNum(InventTrans):
                inventTrans = _common;
                ret =  (select firstOnly RecId from EGAISWaybillSettlement_RU
                        where EGAISWaybillSettlement_RU.InventTrans == inventTrans.RecId).RecId != 0;
                break;

            default:
                throw error("@SYS104799");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@EGAIS:TheEgaiswaybillsettlement_ruTableContainsInformati</DeveloperDocumentation>
	<Label>@EGAIS:EgaisBillOfLadingSettlement</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>EGAIS</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaybillLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>purchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>TradeInventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WaybillLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EGAISWaybillLine_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EGAISWaybillLine_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaybillLine</Name>
					<Field>WaybillLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTrans</Name>
					<Field>InventTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>