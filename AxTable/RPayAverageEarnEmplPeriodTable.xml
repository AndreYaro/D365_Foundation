<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAverageEarnEmplPeriodTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RPayAverageEarnEmplPeriodTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowReverseDeferral</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean allowReverseDeferral()
    {
        RDeferralsTable deferralsTable;
        RDeferralsTrans deferralsTrans;

        select firstonly RecId, DeferralsId, RefRecId, RefTableId
            from deferralsTable
            where deferralsTable.RefRecId   == this.RecId &&
                  deferralsTable.RefTableId == this.TableId
            exists join deferralsTrans
                where deferralsTrans.DeferralsId == deferralsTable.DeferralsId   &&
                      deferralsTrans.TransType   != RDeferralsTransType::Receipt &&
                     !deferralsTrans.StornoRecId;

        return deferralsTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageEarnForSickListDeleteCheck</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean averageEarnForSickListDeleteCheck()
    {
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
        boolean                         ret = true;
        ;

        select firstonly averageEarnEmplPeriodTable
            where averageEarnEmplPeriodTable.SourceSickListId == this.RpaySickListId &&
                  averageEarnEmplPeriodTable.EmplId           == this.EmplId         &&
                  averageEarnEmplPeriodTable.Included         == NoYes::Yes;

        if (averageEarnEmplPeriodTable)
        {
            ret = checkFailed(strFmt("@RUP2607", RPayAverageEarnTable::find(averageEarnEmplPeriodTable.rPayAverageEarnCode).RpayAverageEarnCodeType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageEarnName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Name averageEarnName()
    {
        return RPayAverageEarnTable::find(this.rPayAverageEarnCode).AverageEarnName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageEarnValueSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display RPayAmount averageEarnValueSum(StartDate             _startDate = dateNull(),
                                                  RPayAverageSourceType _rPayAverageSourceType = RPayAverageSourceType::OtherFund)
    {
        RPayAverageEarnValue rPayAverageEarnValue;

        if (_startDate)
        {
            select sum(Amount) from rPayAverageEarnValue
                where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == this.RecId &&
                      rPayAverageEarnValue.StartDate                  >= _startDate &&
                      rPayAverageEarnValue.PayAverageSourceType       == _rPayAverageSourceType;
        }
        else
        {
            select sum(Amount) from rPayAverageEarnValue
                where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == this.RecId;
        }

        return rPayAverageEarnValue.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageEarnValueTypeSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount averageEarnValueTypeSum(RPayAverageSourceType _rPayAverageSourceType)
    {
        RPayAverageEarnValue rPayAverageEarnValue;
        ;
        select sum(Amount) from rPayAverageEarnValue
            where rPayAverageEarnValue.AverageEarnEmplPeriodRecid == this.RecId &&
                  rPayAverageEarnValue.PayAverageSourceType       == _rPayAverageSourceType;
        return rPayAverageEarnValue.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>businessTripBreaking</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean businessTripBreaking()
    {
        RPayAverageEarnEmplPeriodTable      rpayAverageEarnEmplPeriodTableBusinessTrip, rpayAverageEarnEmplPeriodTableNew;
        TransLink_RU                        transLink;
        RPayAverageEarnEngine_BusinessTrip  rPayAverageEarnEngine_BusinessTrip;
        RHRMEmplTable                       emplTable = RHRMEmplTable::find(this.EmplId);
        container                           con;
        int                                 i;
        StartDate                           startDateLocal;
        EndDate                             endDateLocal;
        boolean                             first = true;

        rPayAverageEarnEngine_BusinessTrip = new RPayAverageEarnEngine_BusinessTrip(rpayAverageEarnEmplPeriodTableBusinessTrip.EmplId,
                                                                            rpayAverageEarnEmplPeriodTableBusinessTrip.rPayAverageEarnCode,
                                                                            rpayAverageEarnEmplPeriodTableBusinessTrip.AverageEarnCalcPeriod);

        while select rpayAverageEarnEmplPeriodTableBusinessTrip
            where rpayAverageEarnEmplPeriodTableBusinessTrip.AverageEarnCodeType    == RPayAverageEarnCodeType::BusinessTrip &&
                  rpayAverageEarnEmplPeriodTableBusinessTrip.EmplId                 == this.EmplId                           &&
                  rpayAverageEarnEmplPeriodTableBusinessTrip.StartDate              <= this.EndDate                          &&
                  rpayAverageEarnEmplPeriodTableBusinessTrip.EndDate                >= this.StartDate                        &&
                  rpayAverageEarnEmplPeriodTableBusinessTrip.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTrip
            #transLinkNotExistsReversed_RU(transLink, rpayAverageEarnEmplPeriodTableBusinessTrip)
        {
            rPayAverageEarnEngine_BusinessTrip.rPayAverageEarnEmplPeriodTable(rpayAverageEarnEmplPeriodTableBusinessTrip);
            con = rPayAverageEarnEngine_BusinessTrip.getBusinessTripIntervals();

            for (i = 1 ; i <= conLen(con) ; i++)
            {
                startDateLocal = conPeek(conPeek(con,i),1);
                endDateLocal   = conPeek(conPeek(con,i),2);

                if (this.StartDate <= endDateLocal && this.EndDate >= startDateLocal)
                {
                    startDateLocal = max(this.StartDate, startDateLocal);
                    endDateLocal   = min(this.EndDate, endDateLocal);

                    rpayAverageEarnEmplPeriodTableNew.AverageEarnCodeType       = rpayAverageEarnEmplPeriodTableBusinessTrip.AverageEarnCodeType;
                    rpayAverageEarnEmplPeriodTableNew.rPayAverageEarnCode       = rpayAverageEarnEmplPeriodTableBusinessTrip.rPayAverageEarnCode;
                    rpayAverageEarnEmplPeriodTableNew.EmplId                    = this.EmplId;
                    rpayAverageEarnEmplPeriodTableNew.BusinessTripRecordType    = RPayBusinessTripRecordType::BusinessTripBreaking;
                    rpayAverageEarnEmplPeriodTableNew.PrevBusinessTripStartDate = rpayAverageEarnEmplPeriodTableBusinessTrip.StartDate;

                    rPayAverageEarnEngine_BusinessTrip.rPayAverageEarnEmplPeriodTable(rpayAverageEarnEmplPeriodTableNew);
                    rPayAverageEarnEngine_BusinessTrip.initFromPreviousBusinessTrip();
                    rPayAverageEarnEngine_BusinessTrip.rPayAverageEarnEmplPeriodTable(rpayAverageEarnEmplPeriodTableNew);

                    rpayAverageEarnEmplPeriodTableNew.StartDate = startDateLocal;
                    rpayAverageEarnEmplPeriodTableNew.EndDate   = endDateLocal;

                    rPayAverageEarnEngine_BusinessTrip.updateDayNumber();

                    if (rPayAverageEarnEngine_BusinessTrip.check())
                    {
                        rpayAverageEarnEmplPeriodTableNew.SourceSickListId = this.RpaySickListId;
                        rpayAverageEarnEmplPeriodTableNew.insert();
                        rPayAverageEarnEngine_BusinessTrip.calculateNow();
                    }
                    else
                    {
                        return checkFailed(strFmt("@RUP2608", emplTable.EmployeeId, emplTable.name(), startDateLocal, endDateLocal));
                    }

                    RPayTblUpdater::updateTimesheetFromDocument(rpayAverageEarnEmplPeriodTableNew.StartDate,
                                                                rpayAverageEarnEmplPeriodTableNew.EndDate,
                                                                rpayAverageEarnEmplPeriodTableNew.EmplId);
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>businessTripEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate businessTripEndDate()
    {
        return RPayAverageEarnEmplPeriodTable::getExtendedAEEndDate(RPayAverageEarnCodeType::BusinessTrip, this, this.EndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarDayNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RHRMPeriod calendarDayNumber()
    {
        RPayCalendarId                 rPaySevenDaysCalendarId;
        RHRMPeriod                     ret;
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        TransLink_RU                   transLink;

        if (this.rPayWeekDuration == RPayWeekDuration::SevenDays)
        {
            ret = this.DayNumber;
        }
        else
        {
            if (this.StartDate && this.EndDate)
            {
                rPaySevenDaysCalendarId = RPayCalendarTable::findCalendarType(RPayCalendarType::SevenDays).CalendarId;
                ret = RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPaySevenDaysCalendarId, this.StartDate, this.EndDate, this.VacationTypeId);
            }
            else
            {
                ret = 0;
            }
        }
        if (RPayAverageEarnTable::find(this.rPayAverageEarnCode).RpayAverageEarnCodeType == RPayAverageEarnCodeType::Vacation)
        {
            while select DayNumber, StartDate, EndDate from payAverageEarnEmplPeriodTable
                where payAverageEarnEmplPeriodTable.EmplId                == this.EmplId              &&
                      payAverageEarnEmplPeriodTable.PrevVacationStartDate == this.StartDate           &&
                      payAverageEarnEmplPeriodTable.AverageEarnCodeType   == this.AverageEarnCodeType &&
                      payAverageEarnEmplPeriodTable.VacationRecordType    == RPayVacationRecordType::VacationBreaking
                #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable)
            {
                if (this.rPayWeekDuration == RPayWeekDuration::SevenDays)
                {
                    ret -= payAverageEarnEmplPeriodTable.DayNumber;
                }
                else
                {
                    if (payAverageEarnEmplPeriodTable.StartDate && payAverageEarnEmplPeriodTable.EndDate)
                    {
                        ret -= RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPaySevenDaysCalendarId, payAverageEarnEmplPeriodTable.StartDate, payAverageEarnEmplPeriodTable.EndDate, this.VacationTypeId);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOriginalRow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks original row for storno row
    /// </summary>
    /// <returns>
    ///     true if deleting is allowed. overwise, false.
    /// </returns>
    /// <remarks>
    ///     Use this check before deleting storno rows.
    /// </remarks>
    private boolean checkOriginalRow()
    {
        RPayAverageEarnEmplPeriodTable  origRecord;

        if ( !this.isReverseLine())
        {
            return true;
        }

        origRecord = TransLink_RU::findOrig(this);
        if ( !origRecord)
        {
            return true;
        }

        return RPayAverageEarnEngine::construct(origRecord).check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RPayTblTransDocRelation relationTable;

        TransLink_RU::rpayRemove(this.TableId, this.RecId);

        delete_from relationTable
            where relationTable.RefTableId == this.TableId
               && relationTable.RefRecId == this.RecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssociatedVacationBusinessTrip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes associated vacation business trip.
    /// </summary>
    /// <param name="_updateTbl">
    /// The indicator, if true, timesheet will be updated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteAssociatedVacationBusinessTrip(boolean _updateTbl)
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        RPayAverageEarnEmplPeriodTable tableOrig;
        TransLink_RU                   transLink;

        while select forupdate rPayAverageEarnEmplPeriodTable
            where (rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::BusinessTrip
                || rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::Vacation)
               && rPayAverageEarnEmplPeriodTable.SourceSickListId    == this.RpaySickListId
               && rPayAverageEarnEmplPeriodTable.EmplId              == this.EmplId
               && rPayAverageEarnEmplPeriodTable.Included            == NoYes::No
            #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodTable)
        {
            tableOrig = rPayAverageEarnEmplPeriodTable.data();
            rPayAverageEarnEmplPeriodTable.delete();
            if (_updateTbl)
            {
                RPayTblUpdater::updateTimesheetFromDocument(tableOrig.StartDate, tableOrig.EndDate, tableOrig.EmplId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exclDaysApplicable</Name>
				<Source><![CDATA[
    #define.ExcludeDaysApplyDate(01\01\2013)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean exclDaysApplicable()
    {
        return (this.RpayIllType == RPayIllType::maternity_leave ||
                this.RpayIllType == RPayIllType::ChildVacation)  &&
                this.StartDate   >= #ExcludeDaysApplyDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstSickListAccident</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable firstSickListAccident()
    {
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;
        ;
        if (this.PrevPaySickListId)
        {
            rPayAverageEarnEmplPeriodTable = this.previousSickList().firstSickListAccident();
        }
        else
        {
            rPayAverageEarnEmplPeriodTable = this;
        }

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrectedPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the corrected period.
    /// </summary>
    /// <returns>
    /// The corrected period date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate getCorrectedPeriod()
    {
        RPayAverageEarnEmplPeriodTable origDoc;

        if (this.isReverseLine())
        {
            origDoc = TransLink_RU::findOrig(this);
            return origDoc.CorrectedPeriod;
        }

        return this.CorrectedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartUnincludedPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns last time sheet period, when the document is already proceed plus one day.
    /// Or start of the document if it not included yet.
    /// </summary>
    /// <returns>
    /// Last date of time period.
    /// </returns>
    /// <remarks>
    /// If document was fully included, method returns no-sense result.
    /// Check it with isFullyInTimeSheet() method.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display TransDate getStartUnincludedPeriod()
    {
        RPayTblTrans                tblTrans;
        RPayTblTransDocRelation     docRelation;

        select firstonly SourceDate from tblTrans
            order by SourceDate desc
            exists join docRelation
                    where docRelation.TblTransRecId == tblTrans.RecId
                       && docRelation.RefRecId == this.recId
                       && docRelation.RefTableId == this.TableId;

        if ( !tblTrans)
        {
            return this.StartDate;
        }
        return tblTrans.SourceDate + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hospitalName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Name hospitalName()
    {
        Name    name;

        switch (this.HospitalType)
        {
            case RPayHospitalType::Cust:
                name = CustTable::find(this.Hospital).name();
                break;
            case RPayHospitalType::Vend:
                name = VendTable::find(this.Hospital).name();
                break;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAverageEarnEmplTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromAverageEarnEmplTable()
    {
        RPayAverageEarnTable        rPayAverageEarnTable;
        RPayAverageEarnEmplTable    rPayAverageEarnEmplTable;
        ;
        rPayAverageEarnTable     = RPayAverageEarnTable::find(this.rPayAverageEarnCode);
        rPayAverageEarnEmplTable = RPayAverageEarnEmplTable::find(this.rPayAverageEarnCode,this.EmplId);

        if (rPayAverageEarnEmplTable)
        {
            this.AverageEarnCodeType          = rPayAverageEarnEmplTable.AverageEarnCodeType;
            this.MonthForCalc                 = rPayAverageEarnEmplTable.MonthForCalc;
            this.rPayWeekDuration             = rPayAverageEarnEmplTable.rPayWeekDuration;
            this.rPayAverageTimeCalcType      = rPayAverageEarnEmplTable.rPayAverageTimeCalcType;
            this.RpayAverageFullMonthCalcType = rPayAverageEarnEmplTable.RpayAverageFullMonthCalcType;
            this.ScheduleTimeGroupCode        = rPayAverageEarnEmplTable.ScheduleTimeGroupCode;
            this.ActuallyTimeGroupCode        = rPayAverageEarnEmplTable.ActuallyTimeGroupCode;
            this.NonAppearanceTimeGroupCode   = rPayAverageEarnEmplTable.NonAppearanceTimeGroupCode;
            this.AverageTimeGroupCode         = rPayAverageEarnEmplTable.AverageTimeGroupCode;
            this.rPayDayHourCalc              = rPayAverageEarnEmplTable.rPayDayHourCalc;
            this.ActuallyFund                 = rPayAverageEarnEmplTable.ActuallyFund;
            this.AverageFund                  = rPayAverageEarnEmplTable.AverageFund;
            this.RiseFactor                   = rPayAverageEarnEmplTable.RiseFactor;
            this.BonusFund                    = rPayAverageEarnEmplTable.BonusFund;
            this.rPayBonusAccountingCriterion = rPayAverageEarnEmplTable.rPayBonusAccountingCriterion;
            this.CalcBonusInProportion        = rPayAverageEarnEmplTable.CalcBonusInProportion;
            this.RpaySickListType             = rPayAverageEarnEmplTable.RpaySickListType;
            this.CalcByFund                   = rPayAverageEarnEmplTable.CalcByFund;
            return;
        }
        else if (rPayAverageEarnTable)
        {
            this.AverageEarnCodeType          = rPayAverageEarnTable.RpayAverageEarnCodeType;
            this.MonthForCalc                 = rPayAverageEarnTable.MonthForCalc;
            this.rPayWeekDuration             = rPayAverageEarnTable.rPayWeekDuration;
            this.rPayAverageTimeCalcType      = rPayAverageEarnTable.rPayAverageTimeCalcType;
            this.RpayAverageFullMonthCalcType = rPayAverageEarnTable.RpayAverageFullMonthCalcType;
            this.ScheduleTimeGroupCode        = rPayAverageEarnTable.ScheduleTimeGroupCode;
            this.ActuallyTimeGroupCode        = rPayAverageEarnTable.ActuallyTimeGroupCode;
            this.NonAppearanceTimeGroupCode   = rPayAverageEarnTable.NonAppearanceTimeGroupCode;
            this.AverageTimeGroupCode         = rPayAverageEarnTable.AverageTimeGroupCode;
            this.rPayDayHourCalc              = rPayAverageEarnTable.rPayDayHourCalc;
            this.ActuallyFund                 = rPayAverageEarnTable.ActuallyFund;
            this.AverageFund                  = rPayAverageEarnTable.AverageFund;
            this.RiseFactor                   = rPayAverageEarnTable.RiseFactor;
            this.BonusFund                    = rPayAverageEarnTable.BonusFund;
            this.rPayBonusAccountingCriterion = rPayAverageEarnTable.rPayBonusAccountingCriterion;
            this.CalcBonusInProportion        = rPayAverageEarnTable.CalcBonusInProportion;
            this.RpaySickListType             = rPayAverageEarnTable.RpaySiclListType;
            this.CalcByFund                   = rPayAverageEarnTable.CalcByFund;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ApplyRestriction = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullyInTimeSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the document fully in timesheet.
    /// </summary>
    /// <param name="_date">
    /// The date to check.
    /// </param>
    /// <returns>
    /// True if document is in timesheet.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display boolean isFullyInTimeSheet(TransDate _date = endmth(this.EndDate))
    {
        RPayTblTrans                tblTrans;
        RPayTblTransDocRelation     docRelation;
        TransDate                   currentPeriod = RPayParameters::payPeriod(this.EmplId);

        if (currentPeriod <= this.EndDate)
        {
            return false;
        }

        select firstOnly RecId from docRelation
            where docRelation.RefRecId == this.RecId
               && docRelation.RefTableId == this.TableId
            join RecId from tblTrans
                where tblTrans.RecId == docRelation.TblTransRecId
                   && tblTrans.SourceDate == _date;

        return docRelation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenSickList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isOpenSickList()
    {
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;
        TransLink_RU                    transLink;

        select firstonly RecId from rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.EmplId              == this.EmplId                              &&
                  rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == this.AverageEarnCodeType                 &&
                  rPayAverageEarnEmplPeriodTable.RecId               != this.RecId                               &&
               (((rPayAverageEarnEmplPeriodTable.StartDate           >= this.StartDate                           &&
                  rPayAverageEarnEmplPeriodTable.StartDate           <= this.EndDate)                            ||
                 (this.StartDate                                     >= rPayAverageEarnEmplPeriodTable.StartDate &&
                  this.StartDate                                     <= rPayAverageEarnEmplPeriodTable.EndDate)) &&
                ((this.RpayIllType                                   == RPayIllType::ChildVacation               &&
                  rPayAverageEarnEmplPeriodTable.RpayIllType         != RPayIllType::ChildVacation)              ||
                  this.RpayIllType                                   != RPayIllType::ChildVacation))
            #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodTable);

        return rPayAverageEarnEmplPeriodTable.RecId == 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isReverseLine()
    {
        TransLink_RU transLink;

        select firstonly RecId from transLink
            where transLink.RefTableId == this.TableId &&
                  transLink.RefSec     == this.RecId   &&
                  transLink.RefPri     != transLink.RefSec;

        return (transLink.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceBusinessTrip</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isSourceBusinessTrip()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        ;

        if (this.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTripBreaking)
        {
            return false;
        }

        select firstonly RecId from rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.AverageEarnCodeType       == this.AverageEarnCodeType &&
                  rPayAverageEarnEmplPeriodTable.PrevBusinessTripStartDate == this.StartDate           &&
                  rPayAverageEarnEmplPeriodTable.EmplId                    == this.EmplId;

        return (rPayAverageEarnEmplPeriodTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceVacation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isSourceVacation()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;

        if (this.VacationRecordType == RPayVacationRecordType::VacationBreaking)
        {
            return false;
        }

        select firstonly RecId from rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.VacationRecordType    != RPayVacationRecordType::VacationCompensation &&
                  rPayAverageEarnEmplPeriodTable.AverageEarnCodeType   == this.AverageEarnCodeType                     &&
                  rPayAverageEarnEmplPeriodTable.PrevVacationStartDate == this.StartDate                               &&
                  rPayAverageEarnEmplPeriodTable.EmplId                == this.EmplId;

        return (rPayAverageEarnEmplPeriodTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RPayAverageEarnEmplPeriodTable, Included):
                if (!this.Included && this.RecId)
                    this.reverseDeferrals();
                break;

            case fieldNum(RPayAverageEarnEmplPeriodTable, EmplId):
                if (this.EmplId &&
                    this.AverageEarnCodeType == RPayAverageEarnCodeType::SickList &&
                    this.EmplId != RHRMEmplTable::find(this.EmplId).PayMainEmplId)
                    checkFailed("@RUP3200");
                break;

            case fieldNum(RPayAverageEarnEmplPeriodTable, HospitalType):
                this.Hospital = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mrotEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate mrotEndDate()
    {
        if (this.mrotStartDate)
        {
            return this.mrotEndDate ? this.mrotEndDate : this.EndDate;
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needTSUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determins if time sheet update is needed.
    /// </summary>
    /// <returns>
    /// True if time sheet update is needed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UnknownNoYes needTSUpdate()
    {
        FormRun           formRunAE;
        Object            formObj;
        UnknownNoYes            updateTblAnswer;
        RPayAEFormController    formController;

        if (FormDataUtil::isFormDataSource(this))
        {
            formRunAE = FormDataUtil::getFormDataSource(this).formRun();
            if (formHasMethod(formRunAE, identifierStr(formController)))
            {
                formObj = formRunAE;
                formController  = formObj.formController();
                updateTblAnswer = formController.needTSUpdate();
            }
        }
        else
        {
            updateTblAnswer = UnknownNoYes::Unknown;
        }

        return updateTblAnswer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSickList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable nextSickList(boolean _lastRecalculation = false)
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        ;
        if (_lastRecalculation)
        {
            select firstonly rPayAverageEarnEmplPeriodTable
                order by SickListRecalcNumber
                where rPayAverageEarnEmplPeriodTable.PrevPaySickListId  == this.RpaySickListId &&
                      rPayAverageEarnEmplPeriodTable.EmplId             == this.EmplId         &&
                      ! rPayAverageEarnEmplPeriodTable.CorrectedSickListId;
        }

        if (! rPayAverageEarnEmplPeriodTable)
        {
            select firstonly rPayAverageEarnEmplPeriodTable
                where rPayAverageEarnEmplPeriodTable.PrevPaySickListId == this.RpaySickListId &&
                          rPayAverageEarnEmplPeriodTable.EmplId        == this.EmplId;
        }
        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payEmplName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display  EmplName payEmplName()
    {
        return RHRMEmplTable::find(this.EmplId).personTable().fio();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevFirstBusinessTrip</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable prevFirstBusinessTrip()
    {
        RPayAverageEarnEmplPeriodTable prevBusinessTrip;
        ;

        prevBusinessTrip = this.previousBusinessTrip();

        if (prevBusinessTrip)
        {
            prevBusinessTrip = prevBusinessTrip.prevFirstBusinessTrip();
        }
        else
        {
            prevBusinessTrip = this;
        }

        return prevBusinessTrip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevFirstVacation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable prevFirstVacation()
    {
        RPayAverageEarnEmplPeriodTable prevVacation;
        ;

        prevVacation = this.previousVacation();

        if (prevVacation)
        {
            prevVacation = prevVacation.prevFirstVacation();
        }
        else
        {
            prevVacation = this;
        }

        return prevVacation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousBusinessTrip</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable previousBusinessTrip()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        ;

        if (this.PrevBusinessTripStartDate)
        {
            select firstonly rPayAverageEarnEmplPeriodTable
                where rPayAverageEarnEmplPeriodTable.StartDate              == this.PrevBusinessTripStartDate           &&
                      rPayAverageEarnEmplPeriodTable.EmplId                 == this.EmplId                              &&
                      rPayAverageEarnEmplPeriodTable.Included               == NoYes::Yes                               &&
                      rPayAverageEarnEmplPeriodTable.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTrip &&
                      rPayAverageEarnEmplPeriodTable.AverageEarnCodeType    == this.AverageEarnCodeType;
        }

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousSickList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable previousSickList(boolean _lastRecalculation = false)
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;

        if (this.PrevPaySickListId)
        {
            if (_lastRecalculation)
            {
                select firstonly rPayAverageEarnEmplPeriodTable
                    order by SickListRecalcNumber
                    where rPayAverageEarnEmplPeriodTable.RecalcSickListId    == this.PrevPaySickListId &&
                          rPayAverageEarnEmplPeriodTable.EmplId              == this.EmplId            &&
                          ! rPayAverageEarnEmplPeriodTable.CorrectedSickListId;
            }

            if (! rPayAverageEarnEmplPeriodTable)
            {
                select firstonly rPayAverageEarnEmplPeriodTable
                    where rPayAverageEarnEmplPeriodTable.RpaySickListId == this.PrevPaySickListId &&
                          rPayAverageEarnEmplPeriodTable.Included       == NoYes::Yes             &&
                              rPayAverageEarnEmplPeriodTable.EmplId              == this.EmplId   &&
                              rPayAverageEarnEmplPeriodTable.CorrectedSickListId == this.CorrectedSickListId;
            }
        }
        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousSickListAccident</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable previousSickListAccident()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        ;
        select firstonly RecId from rPayAverageEarnEmplPeriodTable
            order by StartDate desc
            where rPayAverageEarnEmplPeriodTable.AverageEarnCodeType  == this.AverageEarnCodeType &&
                  rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode  == this.rPayAverageEarnCode &&
                  rPayAverageEarnEmplPeriodTable.EmplId               == this.EmplId &&
                  rPayAverageEarnEmplPeriodTable.StartDate            <  this.StartDate &&
                  rPayAverageEarnEmplPeriodTable.rPayDayHourCalc      == this.rPayDayHourCalc;

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousVacation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable previousVacation()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        ;

        if (this.PrevVacationStartDate)
        {
            select firstonly rPayAverageEarnEmplPeriodTable
                where rPayAverageEarnEmplPeriodTable.StartDate           == this.PrevVacationStartDate       &&
                      rPayAverageEarnEmplPeriodTable.EmplId              == this.EmplId                      &&
                      rPayAverageEarnEmplPeriodTable.Included            == NoYes::Yes                       &&
                      rPayAverageEarnEmplPeriodTable.VacationRecordType  == RPayVacationRecordType::Vacation &&
                      rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == this.AverageEarnCodeType;
        }

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcSickList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAverageEarnEmplPeriodTable recalcSickList()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;

        if (this.RecalcSickListId)
        {
            select firstonly rPayAverageEarnEmplPeriodTable
                where rPayAverageEarnEmplPeriodTable.RpaySickListId == this.RecalcSickListId &&
                      rPayAverageEarnEmplPeriodTable.Included       == NoYes::Yes            &&
                      rPayAverageEarnEmplPeriodTable.EmplId         == this.EmplId           &&
                      rPayAverageEarnEmplPeriodTable.RecId          != this.RecId            &&
                      ! rPayAverageEarnEmplPeriodTable.CorrectedSickListId;
        }

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseDeferrals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void reverseDeferrals()
    {
        RDeferralsTable deferralsTable;
        RDeferralsTrans deferralsTrans;
        RDeferralsBook  deferralsBook;

        RDeferralsTransactionReversal transReversal;

        ttsbegin;
        while select forupdate deferralsTrans
            where deferralsTrans.TransType == RDeferralsTransType::Receipt &&
                 !deferralsTrans.StornoRecId
            join deferralsTable
                where deferralsTable.DeferralsId == deferralsTrans.DeferralsId &&
                      deferralsTable.RefRecId    == this.RecId                 &&
                      deferralsTable.RefTableId  == this.TableId
        {
            if (RDeferralsTransactionReversal::allowReversTransType(deferralsTrans.TransType))
            {
                transReversal = RDeferralsTransactionReversal::construct(deferralsTrans);
                transReversal.parmReverseAllModels(NoYes::No);
                transReversal.runOperation();

                update_recordset deferralsBook setting Depreciate = NoYes::Yes
                    where deferralsBook.DeferralsBookId == deferralsTrans.DeferralsBookId &&
                          deferralsBook.DeferralsId     == deferralsTrans.DeferralsId;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sickListStartDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate sickListStartDate()
    {
        TransDate transDate;
        ;
        if (this.PrevPaySickListId)
        {
            transDate = this.previousSickList().sickListStartDate();
        }
        else
        {
            transDate = this.StartDate;
        }
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vacationBreaking</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean vacationBreaking(boolean _extension)
    {
        RPayAverageEarnEmplPeriodTable rpayAverageEarnEmplPeriodTableVacation, rpayAverageEarnEmplPeriodTableNew;
        TransLink_RU                   transLink;
        RPayAverageEarnEngine_Vacation rPayAverageEarnEngine_Vacation;
        RHRMEmplTable                  emplTable = RHRMEmplTable::find(this.EmplId);
        container                      con;
        int                            i;
        StartDate                      startDateLocal;
        EndDate                        endDateLocal, curEndDate;
        Days                           extensionDays;
        boolean                        first = true;
        rPayAverageEarnEngine_Vacation = new RPayAverageEarnEngine_Vacation(rpayAverageEarnEmplPeriodTableVacation.EmplId,
                                                                            rpayAverageEarnEmplPeriodTableVacation.rPayAverageEarnCode,
                                                                            rpayAverageEarnEmplPeriodTableVacation.AverageEarnCalcPeriod);

        while select rpayAverageEarnEmplPeriodTableVacation
            where rpayAverageEarnEmplPeriodTableVacation.AverageEarnCodeType  == RPayAverageEarnCodeType::Vacation &&
                  rpayAverageEarnEmplPeriodTableVacation.EmplId               == this.EmplId                       &&
                  rpayAverageEarnEmplPeriodTableVacation.StartDate            <= this.EndDate                      &&
                  rpayAverageEarnEmplPeriodTableVacation.EndDate              >= this.StartDate                    &&
                  rpayAverageEarnEmplPeriodTableVacation.VacationRecordType   == RPayVacationRecordType::Vacation
            #transLinkNotExistsReversed_RU(transLink, rpayAverageEarnEmplPeriodTableVacation)
        {
            rPayAverageEarnEngine_Vacation.rPayAverageEarnEmplPeriodTable(rpayAverageEarnEmplPeriodTableVacation);
            con = rPayAverageEarnEngine_Vacation.getVacationIntervals();

            for (i = 1 ; i <= conLen(con) ; i++)
            {
                startDateLocal = conPeek(conPeek(con,i),1);
                endDateLocal   = conPeek(conPeek(con,i),2);

                if (this.StartDate <= endDateLocal && this.EndDate >= startDateLocal)
                {
                    startDateLocal = max(this.StartDate, startDateLocal);
                    endDateLocal   = min(this.EndDate, endDateLocal);

                    rpayAverageEarnEmplPeriodTableNew.AverageEarnCodeType   = rpayAverageEarnEmplPeriodTableVacation.AverageEarnCodeType;
                    rpayAverageEarnEmplPeriodTableNew.rPayAverageEarnCode   = rpayAverageEarnEmplPeriodTableVacation.rPayAverageEarnCode;
                    rpayAverageEarnEmplPeriodTableNew.EmplId                = this.EmplId;
                    rpayAverageEarnEmplPeriodTableNew.VacationRecordType    = RPayVacationRecordType::VacationBreaking;
                    rpayAverageEarnEmplPeriodTableNew.PrevVacationStartDate = rpayAverageEarnEmplPeriodTableVacation.StartDate;
                    rpayAverageEarnEmplPeriodTableNew.VacationTypeId        = rpayAverageEarnEmplPeriodTableVacation.VacationTypeId;

                    rPayAverageEarnEngine_Vacation.rPayAverageEarnEmplPeriodTable(rpayAverageEarnEmplPeriodTableNew);
                    rPayAverageEarnEngine_Vacation.initFromPreviousVacation();
                    rPayAverageEarnEngine_Vacation.rPayAverageEarnEmplPeriodTable(rpayAverageEarnEmplPeriodTableNew);

                    rpayAverageEarnEmplPeriodTableNew.StartDate = startDateLocal;
                    rpayAverageEarnEmplPeriodTableNew.EndDate   = endDateLocal;

                    rPayAverageEarnEngine_Vacation.updateEndDate();

                    if (rPayAverageEarnEngine_Vacation.check())
                    {
                        rpayAverageEarnEmplPeriodTableNew.SourceSickListId = this.RpaySickListId;
                        rpayAverageEarnEmplPeriodTableNew.insert();
                        rPayAverageEarnEngine_Vacation.calculateNow();
                    }
                    else
                    {
                        return checkFailed(strFmt("@RUP2430", emplTable.EmployeeId, emplTable.name(), startDateLocal, endDateLocal));
                    }

                    RPayTblUpdater::updateTimesheetFromDocument(rpayAverageEarnEmplPeriodTableNew.StartDate,
                                                                rpayAverageEarnEmplPeriodTableNew.EndDate,
                                                                rpayAverageEarnEmplPeriodTableNew.EmplId);

                    if (_extension)
                    {
                        curEndDate = max(rpayAverageEarnEmplPeriodTableVacation.prevFirstVacation().vacationEndDate(), this.EndDate);

                        rpayAverageEarnEmplPeriodTableNew.VacationRecordType = RPayVacationRecordType::Vacation;

                        rpayAverageEarnEmplPeriodTableNew.StartDate = curEndDate + 1;
                        extensionDays = RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPayAverageEarnEngine_Vacation.getCalendarId(),
                                                                                            startDateLocal,
                                                                                            endDateLocal,
                                                                                            rpayAverageEarnEmplPeriodTableNew.VacationTypeId );
                        rpayAverageEarnEmplPeriodTableNew.DayNumber = extensionDays;
                        rPayAverageEarnEngine_Vacation.updateEndDate();

                        if (rPayAverageEarnEngine_Vacation.check())
                        {
                            rpayAverageEarnEmplPeriodTableNew.SourceSickListId = this.RpaySickListId;
                            rpayAverageEarnEmplPeriodTableNew.insert();
                            rPayAverageEarnEngine_Vacation.calculateNow();
                        }
                        else
                        {
                            return checkFailed(strFmt("@RUP2431", emplTable.EmployeeId, emplTable.name(), curEndDate + 1, extensionDays));
                        }

                        RPayTblUpdater::updateTimesheetFromDocument(rpayAverageEarnEmplPeriodTableNew.StartDate,
                                                                    rpayAverageEarnEmplPeriodTableNew.EndDate,
                                                                    rpayAverageEarnEmplPeriodTableNew.EmplId);
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vacationEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate vacationEndDate()
    {
        return RPayAverageEarnEmplPeriodTable::getExtendedAEEndDate(RPayAverageEarnCodeType::Vacation, this, this.EndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vacationsForSickListDeleteCheck</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean vacationsForSickListDeleteCheck()
    {
        boolean                        ret = true;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTableVacation;

        select firstonly rPayAverageEarnEmplPeriodTableVacation
            where rPayAverageEarnEmplPeriodTableVacation.SourceSickListId == this.RpaySickListId &&
                  rPayAverageEarnEmplPeriodTableVacation.EmplId           == this.EmplId         &&
                  rPayAverageEarnEmplPeriodTableVacation.Included         == NoYes::Yes;

        if (rPayAverageEarnEmplPeriodTableVacation)
        {
            ret = checkFailed("@RUP2433");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                         ret;
        TransLink_RU                    transLink;
        RPayAverageEarnEmplPeriodTable  rpayAverageEarnEmplPeriodTableLocal;
        RPayAverageEarnCodeType         averageEarnCodeType = RPayAverageEarnTable::find(this.rPayAverageEarnCode).RpayAverageEarnCodeType;
        RHRMEmplTable                   emplTable = RHRMEmplTable::find(this.EmplId);

        ret = super();

        if (ret && this.SourceSickListId)
        {
            if (averageEarnCodeType == RPayAverageEarnCodeType::Vacation)
                ret = checkFailed(strFmt("@RUP2434", this.SourceSickListId));

            if (averageEarnCodeType == RPayAverageEarnCodeType::BusinessTrip)
                ret = checkFailed(strFmt("@RUP2609", this.SourceSickListId));
        }

        if (averageEarnCodeType == RPayAverageEarnCodeType::Vacation
         || averageEarnCodeType == RPayAverageEarnCodeType::BusinessTrip)
        {
            if (ret
             && (this.VacationRecordType     == RPayVacationRecordType::VacationBreaking
              || this.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTripBreaking))
            {
                if (this.VacationRecordType == RPayVacationRecordType::VacationBreaking)
                {
                    select firstonly rpayAverageEarnEmplPeriodTableLocal
                        where rpayAverageEarnEmplPeriodTableLocal.EmplId               == this.EmplId                            &&
                              (rpayAverageEarnEmplPeriodTableLocal.AverageEarnCodeType == RPayAverageEarnCodeType::SickList      ||
                               rpayAverageEarnEmplPeriodTableLocal.AverageEarnCodeType == RPayAverageEarnCodeType::BusinessTrip) &&
                              rpayAverageEarnEmplPeriodTableLocal.StartDate            <= this.EndDate                           &&
                              rpayAverageEarnEmplPeriodTableLocal.EndDate              >= this.StartDate
                    notexists join transLink
                        where transLink.RefTableId == rpayAverageEarnEmplPeriodTableLocal.TableId &&
                              transLink.RefSec     == rpayAverageEarnEmplPeriodTableLocal.RecId   &&
                              transLink.Reversed;
                }

                if (this.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTripBreaking)
                {
                    select firstonly rpayAverageEarnEmplPeriodTableLocal
                        where rpayAverageEarnEmplPeriodTableLocal.EmplId               == this.EmplId                        &&
                              (rpayAverageEarnEmplPeriodTableLocal.AverageEarnCodeType == RPayAverageEarnCodeType::Vacation  ||
                               rpayAverageEarnEmplPeriodTableLocal.AverageEarnCodeType == RPayAverageEarnCodeType::SickList) &&
                              rpayAverageEarnEmplPeriodTableLocal.StartDate            <= this.EndDate                       &&
                              rpayAverageEarnEmplPeriodTableLocal.EndDate              >= this.StartDate
                        notexists join transLink
                            where transLink.RefTableId == rpayAverageEarnEmplPeriodTableLocal.TableId &&
                                  transLink.RefSec     == rpayAverageEarnEmplPeriodTableLocal.RecId   &&
                                  transLink.Reversed;
                }

                if (rpayAverageEarnEmplPeriodTableLocal)
                {
                    return checkFailed(strFmt("@RUP1888",
                                              emplTable.EmployeeId,
                                              emplTable.name(),
                                              rpayAverageEarnEmplPeriodTableLocal.AverageEarnCodeType,
                                              rpayAverageEarnEmplPeriodTableLocal.StartDate,
                                              rpayAverageEarnEmplPeriodTableLocal.EndDate));
                }
            }
        }

        if (ret && this.RpaySickListId)
        {
            select firstonly rpayAverageEarnEmplPeriodTableLocal
                where rpayAverageEarnEmplPeriodTableLocal.RecalcSickListId     == this.RpaySickListId               &&
                      rpayAverageEarnEmplPeriodTableLocal.AverageEarnCodeType  == RPayAverageEarnCodeType::SickList &&
                      rpayAverageEarnEmplPeriodTableLocal.RecId                != this.RecId;

            if (rpayAverageEarnEmplPeriodTableLocal)
            {
                ret = checkFailed("@RUP2699");
            }
        }

        if (ret)
        {
            ret = this.checkOriginalRow();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    #RpayModuleName
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;
        RPayAverageEarnTable            rPayAverageEarnTable = RPayAverageEarnTable::find(this.rPayAverageEarnCode);
        RHRMEmplTable                   emplTable;
        str                             moduleCode;

        ret = super(_fieldId);
        if (ret && rPayAverageEarnTable.RpayAverageEarnCodeType != RPayAverageEarnCodeType::Other)
        {
            switch (_fieldId)
            {
                case fieldNum(RPayAverageEarnEmplPeriodTable, StartDate):
                case fieldNum(RPayAverageEarnEmplPeriodTable, EndDate):
                case fieldNum(RPayAverageEarnEmplPeriodTable, EmplId):
                case fieldNum(RPayAverageEarnEmplPeriodTable, RpayIllType):
                case fieldNum(RPayAverageEarnEmplPeriodTable, rPayAverageEarnCode):

                    this.AverageEarnCalcPeriod = endmth(this.StartDate);

                    if (this.EndDate && this.StartDate > this.EndDate)
                    {
                         ret=checkFailed("@SYS16982");
                    }

                    if (ret)
                    {
                        if (rPayAverageEarnTable.RpayAverageEarnCodeType != RPayAverageEarnCodeType::SickList)
                        {
                            ret = true;
                        }
                        else
                        {
                            if (!this.isOpenSickList())
                            {
                                ret=checkFailed(strFmt("@RUP501","@GLS106118"));
                            }
                        }
                    }

                    if (_fieldId == fieldNum(RPayAverageEarnEmplPeriodTable,StartDate))
                    {
                        emplTable = RHRMEmplTable::find(this.EmplId);

                        if (emplTable.PayEmploymentDate > this.StartDate)
                        {
                            ret = checkFailed("@RUP3441");
                        }
                    }

                    break;

                case fieldNum(RPayAverageEarnEmplPeriodTable,Included):

                    ret = RPayController::canModuleChanged();
                    if (ret && this.EmplId)
                    {
                        switch (rPayAverageEarnTable.RpayAverageEarnCodeType)
                        {
                            case RPayAverageEarnCodeType::Vacation :
                                moduleCode = #ModuleNameVacation;
                                break;
                            case RPayAverageEarnCodeType::SickList :
                                moduleCode = #ModuleNameSickList;
                                break;
                            case RPayAverageEarnCodeType::BusinessTrip :
                                moduleCode = #ModuleNameBusinessTrip;
                                break;
                            default :
                                break;
                        }
                        RPayEmplCalculate::lastChangeAdd(this.EmplId, moduleCode);
                    }

                    if (this.RecId && !this.Included && !this.allowReverseDeferral())
                        ret = checkFailed("@RUP3105");
                    break;

                case fieldNum(RPayAverageEarnEmplPeriodTable, RecalcSickListId) :

                    if (this.RecalcSickListId && ! this.recalcSickList())
                    {
                        ret = checkFailed(strFmt("@GLS110754", this.RecalcSickListId, this.EmplId));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            if (this.rPayAverageTimeCalcType == RPayAverageTimeCalcType::Calendar &&
                this.rPayDayHourCalc         == RPayDayHourCalc::Hour)
            {
                ret = checkFailed("@RUP1077");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageEarnEmplPeriodTable find(RPayAverageEarnCode _rPayAverageEarnCode,
                                                      RHRMEmplId          _emplId,
                                                      ReportPeriod_RU     _averageEarnCalcPeriod,
                                                      boolean             _forUpdate = false)
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        ;
        rPayAverageEarnEmplPeriodTable.selectForUpdate(_forUpdate);

        select firstonly rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.rPayAverageEarnCode   == _rPayAverageEarnCode &&
                  rPayAverageEarnEmplPeriodTable.EmplId                == _emplId              &&
                  rPayAverageEarnEmplPeriodTable.AverageEarnCalcPeriod == _averageEarnCalcPeriod;

        return rPayAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageEarnEmplPeriodTable findRecId(RecId       recId,
                                                    boolean     _forUpdate = false )
    {
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        ;

        payAverageEarnEmplPeriodTable.selectForUpdate(_forUpdate);

        select firstonly payAverageEarnEmplPeriodTable
            where payAverageEarnEmplPeriodTable.RecId == recId;

        return payAverageEarnEmplPeriodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedAEEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the average earning end date.
    /// </summary>
    /// <param name="_aeType">
    /// The average earning type.
    /// </param>
    /// <param name="_parent">
    /// The parent employee average earnings calculation.
    /// </param>
    /// <param name="_transDateParent">
    /// The parent effective date.
    /// </param>
    /// <returns>
    /// The end date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public TransDate getExtendedAEEndDate(RPayAverageEarnCodeType _aeType, RPayAverageEarnEmplPeriodTable _parent, TransDate _transDateParent)
    {
        RPayAverageEarnEmplPeriodTable aeEmplPeriodTable;
        TransLink_RU                   transLink;

        TransDate transDate = _transDateParent;

        switch (_aeType)
        {
            case RPayAverageEarnCodeType::BusinessTrip:
                while select aeEmplPeriodTable
                    where aeEmplPeriodTable.BusinessTripRecordType    == RPayBusinessTripRecordType::BusinessTrip &&
                          aeEmplPeriodTable.PrevBusinessTripStartDate == _parent.StartDate                        &&
                          aeEmplPeriodTable.AverageEarnCodeType       == _parent.AverageEarnCodeType              &&
                          aeEmplPeriodTable.EmplId                    == _parent.EmplId
                    #transLinkNotExistsReversed_RU(transLink, aeEmplPeriodTable)
                {
                    if (aeEmplPeriodTable.EndDate > transDate)
                    {
                        transDate = aeEmplPeriodTable.EndDate;
                    }
                    transDate = RPayAverageEarnEmplPeriodTable::getExtendedAEEndDate(_aeType, aeEmplPeriodTable, transDate);
                }
                break;

            case RPayAverageEarnCodeType::Vacation:
                while select aeEmplPeriodTable
                    where aeEmplPeriodTable.VacationRecordType    == RPayVacationRecordType::Vacation &&
                          aeEmplPeriodTable.PrevVacationStartDate == _parent.StartDate              &&
                          aeEmplPeriodTable.AverageEarnCodeType   == _parent.AverageEarnCodeType    &&
                          aeEmplPeriodTable.EmplId                == _parent.EmplId
                    #transLinkNotExistsReversed_RU(transLink, aeEmplPeriodTable)
                {
                    if (aeEmplPeriodTable.EndDate > transDate)
                    {
                        transDate = aeEmplPeriodTable.EndDate;
                    }
                    transDate = RPayAverageEarnEmplPeriodTable::getExtendedAEEndDate(_aeType, aeEmplPeriodTable, transDate);
                }
                break;
        }

        return transDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RpayAverageEarn</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@RUP6112</DeveloperDocumentation>
	<Label>@RUP1061</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>EmplId</TitleField1>
	<TitleField2>RPayAverageEarnCode</TitleField2>
	<ClusteredIndex>RPayAverageEarnCodeEmplPeriodIdx</ClusteredIndex>
	<Modules>Obsolete</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RPayEmplPeriodTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RPayEmplPeriodTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpaySickListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpayIllType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpaySickListType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VacationTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Blocked</Name>
			<Label>@RUP133</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SumOnHandBlocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bonus</Name>
			<Label>@RUP1059</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BonusFund</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPayBonusAccountingCriterion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcBonusInProportion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BusinessTripTypeId</Name>
			<Label>@RUP2599</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusinessTripTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@RUP328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MonthForCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPayWeekDuration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPayAverageTimeCalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpayAverageFullMonthCalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RPayDayHourCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartTimeCoefficient</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dates</Name>
			<Label>@GLS106117</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DayNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Family</Name>
			<Label>@SYS90955</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FamilyRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FundGroup</Name>
			<Label>@RUP3179</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcByFund</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcByPrevYears</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecalcByPrevYears</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Hospital</Name>
			<Label>@RUP6226</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HospitalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hospital</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>hospitalName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RPayAverageEarnCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>averageEarnCodeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MROT</Name>
			<Label>@RUP3455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcByMROT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LimitByMROT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MROTStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MROTEndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NumericalParameters</Name>
			<Label>@RUP1058</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActuallyFund</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageFund</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RiseFactor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EmplId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrevPaySickListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpaySickListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpayIllType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RpaySickListType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VacationTypeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageEarnCalcPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MROTAmountAe</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfWorkedMonths</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddPaymFromPaymFund</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyRestriction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SheetTableRecid</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrevVacationStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VacationRecordType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceSickListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusinessTripRecordType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrevBusinessTripStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RecalcSickListId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SickListRecalcNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Recalculation</Name>
			<Label>@RUP2948</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SickListRecalcPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reverse</Name>
			<Label>@GLS112464</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedSickListId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@RUP500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Included</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumOnHand</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeParameters</Name>
			<Label>@RUP1057</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduleTimeGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActuallyTimeGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NonAppearanceTimeGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AverageTimeGroupCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VacationTypeId</Name>
			<Label>@RUP1497</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VacationTypeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MonthForCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayRateCode</ExtendedDataType>
			<Label>@RUP1041</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScheduleTimeGroupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RpayTimeGroupCode</ExtendedDataType>
			<Label>@RUP356</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActuallyFund</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCounterUnit</ExtendedDataType>
			<Label>@GLS106099</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActuallyTimeGroupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RpayTimeGroupCode</ExtendedDataType>
			<Label>@RUP1044</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AddPaymFromPaymFund</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAddPaymFromPaymFund</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP841</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyRestriction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RUP2063</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AverageEarnCalcPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>averageEarnCodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayAverageEarnCodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AverageFund</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCounterUnit</ExtendedDataType>
			<Label>@RUP1051</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AverageTimeGroupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RpayTimeGroupCode</ExtendedDataType>
			<Label>@RUP1048</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BonusFund</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCounterUnit</ExtendedDataType>
			<Label>@RUP1055</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BusinessTripRecordType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayBusinessTripRecordType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusinessTripTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RHRMBusinessTripTypeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcBonusInProportion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCalcBonusInProportion</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalcByFund</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayRateCode</ExtendedDataType>
			<Label>@RUP3179</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcByMROT</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@RUP3311</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcByPrevYears</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@RUP3178</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayCorrectedPeriod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrectedSickListId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySickListId</ExtendedDataType>
			<Label>@RUP2946</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DayNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Days</ExtendedDataType>
			<Label>@GLS105826</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmplId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RHRMEmplId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FamilyRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>RHRM</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Hospital</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@RUP6229</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HospitalType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayHospitalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Included</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RUP448</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LimitByMROT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@RUP3313</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MROTAmountAe</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP3449</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>MROTEndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@RUP3451</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>MROTStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@RUP3447</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NonAppearanceTimeGroupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RpayTimeGroupCode</ExtendedDataType>
			<Label>@RUP1046</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NumOfWorkedMonths</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayDayHour</ExtendedDataType>
			<Label>@RUP2065</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PartTimeCoefficient</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Factor</ExtendedDataType>
			<Label>@RUP3308</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PayPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PrevBusinessTripStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>RPayBusinessTrip</ConfigurationKey>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@RUP2592</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrevPaySickListId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySickListId</ExtendedDataType>
			<Label>@RUP2126</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PrevVacationStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@RUP2429</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecalcByPrevYears</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@RUP3161</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RecalcSickListId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySickListId</ExtendedDataType>
			<Label>@RUP2695</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RiseFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayRateCode</ExtendedDataType>
			<Label>@RUP1053</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RPayAverageEarnCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAverageEarnCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RpayAverageFullMonthCalcType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayAverageFullMonthCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RPayAverageTimeCalcType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayAverageTimeCalcType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RPayBonusAccountingCriterion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayBonusAccountingCriterion</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RPayDayHourCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayDayHourCalc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RpayIllType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayIllType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RpaySickListId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySickListId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RpaySickListType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPaySickListType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RPayWeekDuration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayWeekDuration</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SheetTableRecid</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SickListRecalcNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySickListRecalcNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SickListRecalcPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReportPeriod_RU</ExtendedDataType>
			<Label>@RUP2944</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceSickListId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPaySickListId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumOnHand</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RPayAmount</ExtendedDataType>
			<Label>@RUP642</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SumOnHandBlocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@RUP133</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VacationRecordType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RPayVacationRecordType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VacationTypeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RHRMVacationTypeId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RPayAverageEarnCodeEmplPeriodIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>averageEarnCodeType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RPayAverageEarnCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EmplId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AverageEarnCalcPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>StartDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>RPayReverseMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CorrectedPeriod</MapField>
					<MapFieldTo>CorrectedPeriod</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PayPeriod</MapField>
					<MapFieldTo>PayPeriod</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AverageEarnCodeType</MapField>
					<MapFieldTo>averageEarnCodeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DayNumber</MapField>
					<MapFieldTo>DayNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SumOnHand</MapField>
					<MapFieldTo>SumOnHand</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RpayIllType</MapField>
					<MapFieldTo>RpayIllType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VacationTypeId</MapField>
					<MapFieldTo>VacationTypeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BusinessTripTypeId</MapField>
					<MapFieldTo>BusinessTripTypeId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>HospitalCust</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Hospital</Name>
					<Field>Hospital</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>HospitalType</Name>
					<Field>HospitalType</Field>
					<ValueStr>RPayHospitalType::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HospitalVend</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>HospitalType</Name>
					<Field>HospitalType</Field>
					<ValueStr>RPayHospitalType::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Hospital</Name>
					<Field>Hospital</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RHRMBusinessTripType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RHRMBusinessTripType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RHRMBusinessTripType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessTripTypeId</Name>
					<SourceEDT>RHRMBusinessTripTypeId</SourceEDT>
					<Field>BusinessTripTypeId</Field>
					<RelatedField>BusinessTripTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RHRMEmplTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RHRMEmplTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayAverageEarnEmplPeriodTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RHRMEmplTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmplId</Name>
					<SourceEDT>RHRMEmplId</SourceEDT>
					<Field>EmplId</Field>
					<RelatedField>EmployeeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RHRMVacationType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RHRMVacationType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RHRMVacationType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VacationTypeId</Name>
					<SourceEDT>RHRMVacationTypeId</SourceEDT>
					<Field>VacationTypeId</Field>
					<RelatedField>VacationTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RHRMVirtualNetworkFamily</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RHRMVirtualNetworkFamily</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RHRMVirtualNetworkFamily</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FamilyRecId</Name>
					<Field>FamilyRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayAverageEarnTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayAverageEarnTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayAverageEarnTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RPayAverageEarnCode</Name>
					<SourceEDT>RPayAverageEarnCode</SourceEDT>
					<Field>RPayAverageEarnCode</Field>
					<RelatedField>RPayAverageEarnCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RPayAverageEarnCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayCounterTable_ActuallyFund</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayCounterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayCounterTable_ActuallyFund</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LineType_Extern</Name>
					<RelatedField>LineType</RelatedField>
					<ValueStr>RPayCtypeType::BaseTotal</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CounterType_Extern</Name>
					<RelatedField>CounterType</RelatedField>
					<ValueStr>RPayCounterType::Fund</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActuallyFund</Name>
					<SourceEDT>RPayCounterUnit</SourceEDT>
					<Field>ActuallyFund</Field>
					<RelatedField>CounterUnit</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayCounterTable_AverageFund</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayCounterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayCounterTable_AverageFund</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LineType_Extern</Name>
					<RelatedField>LineType</RelatedField>
					<ValueStr>RPayCtypeType::BaseTotal</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CounterType_Extern</Name>
					<RelatedField>CounterType</RelatedField>
					<ValueStr>RPayCounterType::Fund</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AverageFund</Name>
					<SourceEDT>RPayCounterUnit</SourceEDT>
					<Field>AverageFund</Field>
					<RelatedField>CounterUnit</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPayCounterTable_BonusFund</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPayCounterTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayCounterTable_BonusFund</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LineType_Extern</Name>
					<RelatedField>LineType</RelatedField>
					<ValueStr>RPayCtypeType::BaseTotal</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CounterType_Extern</Name>
					<RelatedField>CounterType</RelatedField>
					<ValueStr>RPayCounterType::Fund</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BonusFund</Name>
					<SourceEDT>RPayCounterUnit</SourceEDT>
					<Field>BonusFund</Field>
					<RelatedField>CounterUnit</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayRateTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayRateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayRateTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RiseFactor</Name>
					<SourceEDT>RPayRateCode</SourceEDT>
					<Field>RiseFactor</Field>
					<RelatedField>PayRate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PayRateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayRateTable_CalcByFund</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayRateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayRateTable_CalcByFund</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalcByFund</Name>
					<SourceEDT>RPayRateCode</SourceEDT>
					<Field>CalcByFund</Field>
					<RelatedField>PayRate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PayRateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayRateTable_MonthForCalc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayRateTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayRateTable_MonthForCalc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MonthForCalc</Name>
					<SourceEDT>RPayRateCode</SourceEDT>
					<Field>MonthForCalc</Field>
					<RelatedField>PayRate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PayRateIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RPaySheetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RPaySheetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPaySheetTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SheetTableRecid</Name>
					<Field>SheetTableRecid</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayTimeGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayTimeGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTimeGroupTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NonAppearanceTimeGroupCode</Name>
					<SourceEDT>RpayTimeGroupCode</SourceEDT>
					<Field>NonAppearanceTimeGroupCode</Field>
					<RelatedField>TimeGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TimeGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayTimeGroupTable_Actually</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayTimeGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTimeGroupTable_Actually</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActuallyTimeGroupCode</Name>
					<SourceEDT>RpayTimeGroupCode</SourceEDT>
					<Field>ActuallyTimeGroupCode</Field>
					<RelatedField>TimeGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TimeGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayTimeGroupTable_Average</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayTimeGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTimeGroupTable_Average</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AverageTimeGroupCode</Name>
					<SourceEDT>RpayTimeGroupCode</SourceEDT>
					<Field>AverageTimeGroupCode</Field>
					<RelatedField>TimeGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TimeGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RPayTimeGroupTable_Schedule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RPayTimeGroupTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RPayTimeGroupTable_Schedule</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RPayAverageEarnEmplPeriodTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScheduleTimeGroupCode</Name>
					<SourceEDT>RpayTimeGroupCode</SourceEDT>
					<Field>ScheduleTimeGroupCode</Field>
					<RelatedField>TimeGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TimeGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>