<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPrimaryLedgerDimensionAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetPrimaryLedgerDimensionAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.clearScopeCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.clearScopeCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        this.clearScopeCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearScopeCache</Name>
				<Source><![CDATA[
    private void clearScopeCache()
    {
        BudgetCache::clearScope(BudgetCacheScope::BudgetPrimaryLedgerDimensionAttribute);
        DimensionCache::clearScope(DimensionCacheScope::ConvertLedgerDimensionType);
        DimensionCache::clearScope(DimensionCacheScope::DefaultingCreateLedgerDimensionForType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        DimensionAttribute dimensionAttribute;
        BudgetControlDimensionAttribute budgetControlDimensionAttribute;
        BudgetAllowTransferRuleMemberCriteria budgetAllowTransferRuleMemberCriteria;

        ret = super();

        if (ret)
        {
            select firstonly RecId from budgetControlDimensionAttribute
                where budgetControlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute == this.RecId;

            if (budgetControlDimensionAttribute)
            {
                dimensionAttribute = DimensionAttribute::find(this.DimensionAttribute);
                ret = checkFailed(strfmt("@SYS314050", dimensionAttribute.localizedName()));
            }

            select firstonly RecId from budgetAllowTransferRuleMemberCriteria
                where budgetAllowTransferRuleMemberCriteria.BudgetPrimaryLedgerDimensionAttribute == this.RecId;

            if (budgetAllowTransferRuleMemberCriteria)
            {
                dimensionAttribute = DimensionAttribute::find(this.DimensionAttribute);
                ret = checkFailed(strfmt("@SYS320762", dimensionAttribute.localizedName()));
            }

            if (BudgetParameters::find().DeriveAccountStructureFromCombination)
            {
                DimensionAttributeRecId mainAccountAttributeRecId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

                if (this.DimensionAttribute == mainAccountAttributeRecID)
                {
                    ret = checkFailed("@Budget:MainAccountInUseToDefaultAccountStructure");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetDimensionsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the dimension attributes that are enabled for budget.
    /// </summary>
    /// <param name="_primaryLedger">
    ///    The ledger for which to retrieve the budget enabled dimensions; optional.
    /// </param>
    /// <returns>
    ///    A list of containers that each have a dimension attribute record ID and name.
    /// </returns>
    public static List budgetDimensionsList(LedgerRecId _primaryLedger = Ledger::current())
    {
        DimensionAttribute dimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        List budgetDimensionsList = new List(Types::Container);
        container packedList;

        packedList = BudgetCache::getValue(BudgetCacheScope::BudgetPrimaryLedgerDimensionAttribute, [_primaryLedger]);

        if (packedList == conNull())
        {
            // Find all the dimensions that are enabled for budget for the current primary ledger.
            while select * from dimensionAttribute
            exists join budgetPrimaryLedgerDimensionAttribute
                where budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == dimensionAttribute.RecId
                   && budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == _primaryLedger
            {
                budgetDimensionsList.addEnd([dimensionAttribute.RecId, dimensionAttribute.localizedName()]);
            }

            packedList = budgetDimensionsList.pack();

            BudgetCache::insertValue(BudgetCacheScope::BudgetPrimaryLedgerDimensionAttribute, [_primaryLedger], packedList);
        }

        return List::create(packedList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>BudgetPrimaryLedgerDimensionAttribute</c>
    ///    table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetPrimaryLedgerDimensionAttribute</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!BudgetPrimaryLedgerDimensionAttribute::exist(_recId))
        {
            isExisting = checkFailed(strfmt(BudgetPrimaryLedgerDimensionAttribute::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupBudgetDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the dimension attributes that are no longer in the current
    ///    primary ledger to be unavailable for budgeting.
    /// </summary>
    /// <returns>
    ///    true if at least one dimension attribute was removed as budget enabled; otherwise, false.
    /// </returns>
    public static boolean cleanupBudgetDimensions()
    {
        boolean                 ret;
        DimensionAttributeSetItem dimensionAttributeSetItem;
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        ttsbegin;

        LedgerRecId ledgerRecId = Ledger::current();
        DimensionEnumeration dimAttrSetRecId = DimensionCache::getDimensionAttributeSetForLedger(ledgerRecId);

        while select DimensionAttribute from budgetPrimaryLedgerDimensionAttribute
            where budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == ledgerRecId
            notExists join dimensionAttributeSetItem
                where dimensionAttributeSetItem.DimensionAttribute == budgetPrimaryLedgerDimensionAttribute.DimensionAttribute
                    && dimensionAttributeSetItem.DimensionAttributeSet == dimAttrSetRecId
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::find(budgetPrimaryLedgerDimensionAttribute.DimensionAttribute);

            warning(strfmt("@SYS314049", dimensionAttribute.localizedName()));
            ret = true;

            BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttributeDelete;

            delete_from budgetPrimaryLedgerDimensionAttributeDelete
                where budgetPrimaryLedgerDimensionAttributeDelete.PrimaryLedger == ledgerRecId &&
                      budgetPrimaryLedgerDimensionAttributeDelete.DimensionAttribute == budgetPrimaryLedgerDimensionAttribute.DimensionAttribute;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all of the <c>BudgetPrimaryLedgerDimensionAttribute</c> records for the specified dimension
    /// attribute.
    /// </summary>
    /// <param name="_dimensionAttributeId">
    /// The dimension attribute for which to remove all of the <c>BudgetPrimaryLedgerDimensionAttribute</c>
    /// records.
    /// </param>
    public static void deleteForDimensionAttribute(RecId _dimensionAttributeId)
    {
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        delete_from budgetPrimaryLedgerDimensionAttribute
            where budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == _dimensionAttributeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>BudgetPrimaryLedgerDimensionAttribute</c> table
    ///    exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>BudgetPrimaryLedgerDimensionAttribute</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        select firstonly
            RecId
        from
            budgetPrimaryLedgerDimensionAttribute
        where
            budgetPrimaryLedgerDimensionAttribute.RecId == _recId;

        return budgetPrimaryLedgerDimensionAttribute != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPrimaryLedgerDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Find and return a <c>BudgetPrimaryLedgerDimensionAttribute</c> record by primary ledger and dimension attribute.
    /// </summary>
    /// <param name = "_primaryLedgerRecId">
    ///     The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <param name = "_dimensionAttributeRecId">
    ///     The record ID of a <c>DimensionAttribute</c> record.
    /// </param>
    /// <param name = "_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option to use when you read the record; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>BudgetPrimaryLedgerDimensionAttribute</c> table; otherwise, an enmpty record.
    /// </returns>
    public static BudgetPrimaryLedgerDimensionAttribute findByPrimaryLedgerDimensionAttribute(
        LedgerRecId _primaryLedgerRecId,
        DimensionAttributeRecId _dimensionAttributeRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        if (_primaryLedgerRecId && _dimensionAttributeRecId)
        {
            budgetPrimaryLedgerDimensionAttribute.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                budgetPrimaryLedgerDimensionAttribute.concurrencyModel(_concurrencyModel);
            }

            select firstonly budgetPrimaryLedgerDimensionAttribute
                where budgetPrimaryLedgerDimensionAttribute.primaryLedger == _primaryLedgerRecId
                    && budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == _dimensionAttributeRecId;
        }

        return budgetPrimaryLedgerDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPrimaryLedgerDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the record in the <c>BudgetPrimaryLedgerDimensionAttribute</c> table exists.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <param name="_dimensionAttributeRecId">
    ///    The record ID of the <c>DimensionAttribute</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByPrimaryLedgerDimensionAttribute(LedgerRecId _primaryLedgerRecId, DimensionAttributeRecId _dimensionAttributeRecId)
    {
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        if (_primaryLedgerRecId && _dimensionAttributeRecId)
        {
            select firstonly RecId from budgetPrimaryLedgerDimensionAttribute
                where budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == _primaryLedgerRecId
                    && budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == _dimensionAttributeRecId;
        }

        return (budgetPrimaryLedgerDimensionAttribute.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the record in the <c>BudgetPrimaryLedgerDimensionAttribute</c> table specified
    ///    by a <c>DimensionHierarchy</c> and <c>Ledger</c> record exists.
    /// </summary>
    /// <param name="_accountStructure">
    ///    The record ID of the <c>DimensionHierarchy</c> record.
    /// </param>
    /// <param name="_ledger">
    ///    The record ID of the <c>Ledger</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByAccountStructure(RecId _accountStructure, RecId _ledger)
    {
        DimensionAttribute                      dimAttribute;
        DimensionHierarchyLevel                 dimHierarchyLevel;
        BudgetPrimaryLedgerDimensionAttribute   budgetPrimaryLedgerDimensionAttribute;

        select firstonly RecId from dimHierarchyLevel
            where dimHierarchyLevel.DimensionHierarchy == _accountStructure
            exists join dimAttribute where
                dimAttribute.RecId == dimHierarchyLevel.DimensionAttribute
            exists join budgetPrimaryLedgerDimensionAttribute where
                budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == dimAttribute.RecId &&
                budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == _ledger;

        return (dimHierarchyLevel.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetPrimaryLedgerDimensionAttribute</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BudgetPrimaryLedgerDimensionAttribute</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when you read the record; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>BudgetPrimaryLedgerDimensionAttribute</c> table if found; otherwise,
    /// an empty record.
    /// </returns>
    public static BudgetPrimaryLedgerDimensionAttribute find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;

        budgetPrimaryLedgerDimensionAttribute.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetPrimaryLedgerDimensionAttribute.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                budgetPrimaryLedgerDimensionAttribute
            where
                budgetPrimaryLedgerDimensionAttribute.RecId == _recId;

        return budgetPrimaryLedgerDimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetAccountStructureNamesForLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the names of account structures with budget-enabled dimensions.
    /// </summary>
    /// <param name = "_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name = "_userLanguageId">
    /// The user language ID.
    /// </param>
    /// <returns>
    /// The <c>List</c> of account structure names.
    /// </returns>
    public static List getBudgetAccountStructureNamesForLedger(
        LedgerRecId _primaryLedgerRecId,
        LanguageId _userLanguageId = Global::currentUserLanguage())
    {
        List names = new List(Types::String);
        BudgetAccountStructureView budgetAccountStructureView;

        while select DimensionHierarchyName from budgetAccountStructureView
            where budgetAccountStructureView.Ledger == _primaryLedgerRecId
                && budgetAccountStructureView.UserLanguageId == _userLanguageId
        {
            names.addEnd(budgetAccountStructureView.DimensionHierarchyName);
        }

        return names;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetDimensionAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget dimension attribute and value pairs from the source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The record ID of the source ledger dimension record.
    /// </param>
    /// <returns>
    /// A <c>Map</c> that contains the budget dimension attribute and value pairs.
    /// </returns>
    /// <remarks>
    /// The <c>Map</c> key is the <c>BudgetPrimaryLedgerDimensionAttribute</c> record ID and the <c>Map</c>
    /// value is the <c>DimensionAttributeValue</c> display value.
    /// </remarks>
    public static Map getBudgetDimensionAttributeValues(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        Map dimensionValues;

        DimensionAttributeLevelValueView attributeLevelValueView;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
        DimensionHierarchyLevel hierarchyLevel;

        RecId sourceAccountStructure;

        // Budget Dimension Attribute : Dimension Attribute Value
        dimensionValues = new Map(Types::Int64, Types::String);

        if (_ledgerDimension)
        {
            sourceAccountStructure = DimensionHierarchy::getAccountStructureFromDimensionCombination(_ledgerDimension).RecId;
        }

        if (_primaryLedgerRecId && sourceAccountStructure)
        {
            // Populate the dimension values map with the budget dimension attribute and value pairs
            // that exist in the source account structure.
            while select RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.PrimaryLedger == _primaryLedgerRecId
                join RecId from hierarchyLevel
                    where hierarchyLevel.DimensionAttribute == budgetDimensionAttribute.DimensionAttribute &&
                        hierarchyLevel.DimensionHierarchy == sourceAccountStructure
                outer join DisplayValue
                    from attributeLevelValueView
                    where attributeLevelValueView.ValueCombinationRecId == _ledgerDimension &&
                        attributeLevelValueView.DimensionAttribute == budgetDimensionAttribute.DimensionAttribute
            {
                // The attributeLevelValueView.DisplayValue may not be returned.
                // In this case the map value will be blank and treated like an optional value.
                dimensionValues.insert(budgetDimensionAttribute.RecId, attributeLevelValueView.DisplayValue);
            }
        }

        return dimensionValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetDimensionAttributeValueDisplayNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the segmented budget dimension attribute value names from the source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name="_dimensionHierarchyId">
    /// The record ID of the dimension hierarchy.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The record ID of the source ledger dimension record.
    /// </param>
    /// <returns>
    /// The segmented budget dimension attribute value names from the source ledger dimension.
    /// </returns>
    public static DimensionDisplayValue getBudgetDimensionAttributeValueDisplayNames(
        LedgerRecId _primaryLedgerRecId,
        DimensionHierarchyId _dimensionHierarchyId,
        LedgerDimensionBase _ledgerDimension)
    {
        DimensionAttributeLevelValueView      dimensionAttributeLevelValueView;
        DimensionHierarchyLevel               dimensionHierarchyLevel;
        BudgetPrimaryLedgerDimensionAttribute budgetPrimaryLedgerDimensionAttribute;
        boolean                               isFirstSegment = true;
        str                                   displayValue;
        str                                   delimiter = DimensionParameters::getDimensionSegmentDelimiter();

        while select RecId from dimensionHierarchyLevel
            order by dimensionHierarchyLevel.Level asc
            where dimensionHierarchyLevel.DimensionHierarchy == _dimensionHierarchyId
            outer join AttributeValueRecId from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute
                && dimensionAttributeLevelValueView.ValueCombinationRecId == _ledgerDimension
            exists join budgetPrimaryLedgerDimensionAttribute
                where budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute
                && budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == _primaryLedgerRecId
        {
            Name attributeValueName;

            if (dimensionAttributeLevelValueView.AttributeValueRecId)
            {
                // Find the dimension attribute value only if the segment value exists.
                attributeValueName = DimensionAttributeValue::find(dimensionAttributeLevelValueView.AttributeValueRecId).getName();
            }

            if (isFirstSegment)
            {
                displayValue = attributeValueName;
                isFirstSegment = false;
            }
            else
            {
                displayValue = displayValue + delimiter + attributeValueName;
            }
        }

        // Trim the display values in case the last segment is blank
        return strRTrim(displayValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionAttributeInList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record ID of a <c>DimensionAttribute</c> record is in the
    /// specified list.
    /// </summary>
    /// <param name="_dimensionAttributeId">
    /// The record ID of the <c>DimensionAttribute</c> record to look for in the list.
    /// </param>
    /// <param name="_dimensionAttributes">
    /// A <c>List</c> instance that contains the list of dimension attributes. Each container in the list
    /// should have a dimension attribute record ID as a key and a name as the value.
    /// </param>
    /// <returns>
    /// true if the record ID is found in the list; otherwise, false.
    /// </returns>
    public static boolean isDimensionAttributeInList(RecId _dimensionAttributeId, List _dimensionAttributes)
    {
        ListEnumerator listEnumerator;
        container dimAttribute;

        Debug::assert(_dimensionAttributes.typeId() == Types::Container);

        listEnumerator = _dimensionAttributes.getEnumerator();

        while (listEnumerator.moveNext())
        {
            dimAttribute = listEnumerator.current();
            if (conpeek(dimAttribute, 1) == _dimensionAttributeId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountInBudgetDimensionAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the main account dimension attribute is in the set of budget dimension attributes.
    /// </summary>
    /// <param name="_ledgerRecId">
    /// The record ID of the <c>Ledger</c> record.
    /// </param>
    /// <returns>
    /// true if the main account is in the set of budget dimension attributes; otherwise, false.
    /// </returns>
    public static boolean isMainAccountInBudgetDimensionAttributes(RecId _ledgerRecId)
    {
        boolean isMainAccountIn;

        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

        select firstonly RecId
            from budgetDimensionAttribute
                where budgetDimensionAttribute.PrimaryLedger == _ledgerRecId
                   && budgetDimensionAttribute.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        if (budgetDimensionAttribute)
        {
            isMainAccountIn = true;
        }

        return isMainAccountIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the lookup for the <c>DimensionHierarchy</c> records.
    /// </summary>
    /// <param name="_ctrl">
    ///    The form reference control for which to perform the lookup.
    /// </param>
    /// <param name="_currentDimensionHierarchy">
    ///    The record ID of the currently selected <c>DimensionHierarchy</c> record.
    /// </param>
    /// <returns>
    ///    The <c>DimensionHierarchy</c> record that was selected by the lookup.
    /// </returns>
    public static DimensionHierarchy lookupAccountStructure(
        FormControl _ctrl,
        RecId _currentDimensionHierarchy)
    {
        FormReferenceControl referenceControl;
        FormStringControl stringControl;
        DimensionHierarchy selectedRecord;

        Args budgetAccountStructureLookupArgs;
        FormRun budgetAcountStructureLookup;

        if (_ctrl is FormReferenceControl)
        {
            referenceControl = _ctrl as FormReferenceControl;
        }
        else if (_ctrl is FormStringControl)
        {
            stringControl = _ctrl as FormStringControl;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        budgetAccountStructureLookupArgs = new Args(formstr(BudgetAccountStructureLookup));
        budgetAccountStructureLookupArgs.caller(_ctrl);
        budgetAccountStructureLookupArgs.record(DimensionHierarchy::find(_currentDimensionHierarchy));

        budgetAcountStructureLookup = ClassFactory::formRunClassOnClient(budgetAccountStructureLookupArgs);
        budgetAcountStructureLookup.init();

        if (referenceControl)
        {
            referenceControl.performFormLookup(budgetAcountStructureLookup);
        }
        else if (stringControl)
        {
            stringControl.performFormLookup(budgetAcountStructureLookup);
        }

        selectedRecord = budgetAcountStructureLookup.selectRecordModeSelectedRecord() as DimensionHierarchy;

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notBudgetDimensionsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the dimension attributes that are not enabled for budget.
    /// </summary>
    /// <returns>
    ///    A list of containers that each have a dimension attribute record ID and name.
    /// </returns>
    public static List notBudgetDimensionsList()
    {
        List notBudgetDimensionsList = new List(Types::Container);

        DimensionAttribute                      dimAttribute;
        DimensionAttributeSetItem               dimAttributeSetItem;
        BudgetPrimaryLedgerDimensionAttribute   budgetPrimaryLedgerDimensionAttribute;

        LedgerRecId ledgerRecId = Ledger::current();
        DimensionEnumeration dimAttrSetRecId = DimensionCache::getDimensionAttributeSetForLedger(ledgerRecId);

        while select * from dimAttribute
            exists join dimAttributeSetItem
                where dimAttributeSetItem.DimensionAttribute == dimAttribute.RecId
                    && dimAttributeSetItem.DimensionAttributeSet == dimAttrSetRecId
            notExists join budgetPrimaryLedgerDimensionAttribute
                where budgetPrimaryLedgerDimensionAttribute.DimensionAttribute == dimAttribute.RecId
                    && budgetPrimaryLedgerDimensionAttribute.PrimaryLedger == ledgerRecId
        {
            notBudgetDimensionsList.addEnd([dimAttribute.RecId, dimAttribute.localizedName()]);
        }

        return notBudgetDimensionsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>BudgetPrimaryLedgerDimensionAttribute</c>
    ///    table does not exist.
    /// </summary>
    /// <returns>
    ///    The message that indicates that a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@SYS317158</DeveloperDocumentation>
	<FormRef>BudgetPrimaryLedgerDimensionAttribute</FormRef>
	<Label>@SYS314048</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>DimensionAttribute</TitleField1>
	<TitleField2>PrimaryLedger</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PrimaryLedgerDimensionAttributeIdx</ClusteredIndex>
	<Modules>Budget</Modules>
	<ReplacementKey>PrimaryLedgerDimensionAttributeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrimaryLedger</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionAttribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PrimaryLedger</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PrimaryLedgerDimensionAttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PrimaryLedger</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DimensionAttribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttribute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttribute_BudgetPrimaryLedgerDimensionAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionAttribute</Name>
					<Field>DimensionAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PrimaryLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Ledger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Ledger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Ledger_BudgetPrimaryLedgerDimensionAttribute</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PrimaryLedger</Name>
					<Field>PrimaryLedger</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>