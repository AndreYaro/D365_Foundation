<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCSolverTextValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCSolverTextValue extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        EcoResAttributeType                    domain;
        EcoResEnumerationAttributeTypeValue    enumerationAttributeTypeValue;
        PCSolverTextValue               solverTextValue;

        boolean ret;

        ret = super();

        // ensure that the solver text value is unique within the context of the enumeration
        select firstonly RecId from domain
            join enumerationAttributeTypeValue
                where   enumerationAttributeTypeValue.AttributeType   == domain.RecId &&
                        enumerationAttributeTypeValue.Value    == this.TextValue;

        // check if the solver text value already exists in the current enumeration
        select firstonly RecId from solverTextValue
            where solverTextValue.Value == this.Value
                join RecId from enumerationAttributeTypeValue
                    where enumerationAttributeTypeValue.Value  == solverTextValue.TextValue &&
                          enumerationAttributeTypeValue.AttributeType == domain.RecId;

        if (solverTextValue.RecId != 0 && solverTextValue.RecId != this.RecId)
        {
            ret = checkFailed("@SYS313115");
        }

        if (ret)
        {    // validate OML syntax
            ret = PCModelingLibrary::validateEnumerationValueAgainstOMLSyntax(this.Value);
            ret = ret ? true : checkFailed("@SYS315897");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCTextSolverValue</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether the record is selected for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCTextSolverValue</c> table; otherwise, an empty record.
    /// </returns>
    public static PCSolverTextValue find(RefRecId _recId, boolean _forupdate = false)
    {
        PCSolverTextValue record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAttributeTypeAndValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a solver value by a domain and value.
    /// </summary>
    /// <param name="_domain">
    ///    The record ID of a domain.
    /// </param>
    /// <param name="_solverValue">
    ///    A solver value.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether the record is selected for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCSolverTextValue</c> table; otherwise, an empty record.
    /// </returns>
    public static PCSolverTextValue findByAttributeTypeAndValue(RefRecId _domain, PCSolverValue _solverValue, boolean _forupdate = false)
    {
        EcoResEnumerationAttributeTypeValue    enumRelation;
        EcoResTextValue                 textValue;
        PCSolverTextValue               solverValue;

        solverValue.selectForUpdate(_forupdate);

        select firstonly solverValue
            where solverValue.Value == queryValue(_solverValue)
            join RecId from textValue
                where textValue.RecId == solverValue.TextValue
                join RecId from enumRelation
                    where   enumRelation.Value  == textValue.RecId &&
                            enumRelation.AttributeType == _domain;

        return solverValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTextValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCSolverTextValue</c> table.
    /// </summary>
    /// <param name="_textValue">
    /// The record ID of the related <c>EcoResTextValue</c> record.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to select the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCSolverTextValue</c> table; otherwise, an empty record.
    /// </returns>
    public static PCSolverTextValue findByTextValue(RefRecId _textValue, boolean _forupdate = false)
    {
        PCSolverTextValue record;

        if (!_textValue)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.TextValue == _textValue;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS317049</DeveloperDocumentation>
	<Label>@sys313125</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Value</TitleField1>
	<TitleField2>TextValue</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>TextValue</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@sys312535</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TextValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TextValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PCSolverValue</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TextValue</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TextValue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResTextValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResTextValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResTextValue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>EcoResTextValue_PCTextSolverValue</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TextValue</Name>
					<Field>TextValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>