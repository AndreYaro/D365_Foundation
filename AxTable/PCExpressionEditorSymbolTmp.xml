<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCExpressionEditorSymbolTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCExpressionEditorSymbolTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countSymbolsLike</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of symbols which are like the wildcard symbol parameter.
    /// </summary>
    /// <param name="_likeSymbol">
    /// The symbol.
    /// </param>
    /// <returns>
    /// The number of symbols which are like the symbol parameter.
    /// </returns>
    public int64 countSymbolsLike(PCExpressionEditorSymbol _likeSymbol)
    {
        PCExpressionEditorSymbolTmp record;

        record.setTmpData(this);

        select count(RecId) from record
            where record.Symbol like _likeSymbol;

        return record.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a symbol in the temporary table.
    /// </summary>
    /// <param name="_symbol">
    /// The symbol to find.
    /// </param>
    /// <returns>
    /// A symbol if one exists.
    /// </returns>
    public PCExpressionEditorSymbolTmp findSymbol(PCExpressionEditorSymbol _symbol)
    {
        PCExpressionEditorSymbolTmp record;

        record.setTmpData(this);
        select record where record.Symbol == _symbol;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>symbolExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a symbol exists with correct case and with the given type.
    /// </summary>
    /// <param name="_symbol">
    /// The symbol.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    /// <returns>
    /// true if the symbol exists with the given type; otherwise, false.
    /// </returns>
    public boolean symbolExists(PCExpressionEditorSymbol _symbol, PCExpressionEditorSymbolType _type)
    {
        PCExpressionEditorSymbolTmp record;

        record.setTmpData(this);

        select firstOnly RecId, Symbol from record
            where record.Symbol == _symbol
                && record.SymbolType == _type;

        return record.RecId != 0 && strCmp(record.Symbol, _symbol) == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS4004663</DeveloperDocumentation>
	<Label>@SYS4004662</Label>
	<TitleField1>Symbol</TitleField1>
	<TitleField2>SymbolType</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Order</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Symbol</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PCExpressionEditorSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SymbolType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>PCExpressionEditorSymbolType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OrderIndex</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Order</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>