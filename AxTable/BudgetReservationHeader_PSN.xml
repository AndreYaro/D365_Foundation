<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationHeader_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetReservationHeader_PSN extends common
{
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canFinalizeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the budget reservation document can be finalized.
    /// </summary>
    /// <returns>
    /// true if the header can be finalized; otherwise, false.
    /// </returns>
    public boolean canFinalizeDocument()
    {
        boolean canFinalizeDocument = this.DocumentStatus == BudgetReservationDocumentStatus_PSN::Posted
                                        && this.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Posted
                                        && this.getBudgetReservation().isBudgetReservationReferenced();
    
        return canFinalizeDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a budget reservation can be submitted to the workflow.
    /// </summary>
    /// <returns>
    /// true if a budget reservation can be submitted to the workflow by the user; otherwise, false.
    /// </returns>
    public boolean canSubmit()
    {
        boolean canSubmit = false;
    
        if ((this.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::Draft
                && this.DocumentStatus != BudgetReservationDocumentStatus_PSN::Rejected)
                && this.hasLines())
        {
            canSubmit = true;
        }
        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow(str _workflowType = 'BudgetReservationWorkflow_PSN')
    {
        boolean canSubmitToWorkFlow;
    
        if (this.isWorkflowEnabled())
        {
            canSubmitToWorkFlow = this.canSubmit();
        }
        else
        {
            canSubmitToWorkFlow = super(_workflowType);
        }
    
        return canSubmitToWorkFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccoutingDateForFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the change of the accounting date is allowed.
    /// </summary>
    /// <param name="_accountingDate">
    /// The <c>AccountingDate</c> value to test if it is OK to change the accounting date.
    /// </param>
    /// <returns>
    /// true if a change of the accounting date is allowed; otherwise false.
    /// </returns>
    public boolean checkAccoutingDateForFiscalYear(AccountingDate _accountingDate)
    {
        boolean dateIsValid = true;
    
        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdv2BudgetCtrl))
            && !FiscalCalendars::areDatesInSameFiscalYear(CompanyInfoHelper::fiscalCalendarRecId(), this.AccountingDate, _accountingDate))
        {
            dateIsValid = dateIsValid && !SourceDocumentHeaderProvider::isJournalized(this.SourceDocumentHeader);
            dateIsValid = dateIsValid && !SourceDocumentHeaderProvider::hasBudgetReservations(this.SourceDocumentHeader);
        }
    
        return dateIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanChangeAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the change of the accounting data is allowed.
    /// </summary>
    /// <returns>
    /// true if a change of the accounting data is allowed; otherwise false.
    /// </returns>
    public boolean checkCanChangeAccountingDate()
    {
        boolean isAccountingDateValid = true;
    
        if (!this.checkAccoutingDateForFiscalYear(this.orig().AccountingDate))
        {
            isAccountingDateValid = checkFailed("@Budgeting_BudgetReservationPS:BudgetReservationHeaderAccountingDateNotInTheSameFiscalYearError");
        }
    
        if (isAccountingDateValid && this.getBudgetReservation().isBudgetReservationReferenced())
        {
            isAccountingDateValid = checkFailed("@Budgeting_BudgetReservationPS:CannotChangeAccountingDateDocumentReferencedError");
        }

        if (isAccountingDateValid && !SourceDocumentHeaderProvider::allowAccountingDateChange(this.SourceDocumentHeader))
        {
            isAccountingDateValid = checkFailed("@SYS344799");
        }
    
        return isAccountingDateValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateFinancials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any field value on the budget reservation header which has a financial impact was modified or if the
    /// budget reservation reaches a state that causes financial impact.
    /// </summary>
    /// <returns>
    /// true if any field value which has a financial impact was modified or if budget reservation reaches a state that causes
    /// financial impact; otherwise, false.
    /// </returns>
    public boolean doUpdateFinancials()
    {   
        BudgetReservationHeader_PSN originalBudgetReservationHeader;
        boolean doUpdateFinancials, isPosting;
    
        originalBudgetReservationHeader = this.orig();
    
        doUpdateFinancials = originalBudgetReservationHeader.AccountingDate         != this.AccountingDate
            || originalBudgetReservationHeader.AccountingDistributionTemplate       != this.AccountingDistributionTemplate
            || originalBudgetReservationHeader.SourceDocumentHeader                 != this.SourceDocumentHeader
            || (originalBudgetReservationHeader.DocumentStatus                      == BudgetReservationDocumentStatus_PSN::Canceled
                && originalBudgetReservationHeader.DocumentStatus                   == this.DocumentStatus);
    
        SysGlobalCache globalCache = ClassFactory.globalCache();

        if (globalCache.isSet(tableId2Name(tableNum(BudgetReservationHeader_PSN)),
            int642str(this.RecId) + BudgetReservation_PSN::GBRPostCacheNameSuffix))
        {
            isPosting = true;
        }

        doUpdateFinancials = doUpdateFinancials && !isPosting;

        return doUpdateFinancials;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    /// Set to true if the reason code is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        ReasonCode      reasonCode = strLRTrim(_reasonCode);
        ReasonRefRecID  originalReasonRefRecID;
        FormDataSource  formBudgetReservationTable;
    
        if (_set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record, otherwise, update the existing record.
            if (this.ReasonTableRef == 0)
            {
                this.ReasonTableRef = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                if (reasonCode != '')
                {
                    // The reasonCode value is not blank.
                    // Save the current ReasonRefRecID for comparison.
                    originalReasonRefRecID = this.ReasonTableRef;
                    this.ReasonTableRef = ReasonTableRef::updateCode(reasonCode, this.ReasonTableRef);
    
                    if (this.ReasonTableRef == originalReasonRefRecID)
                    {
                        // The reason code has changed but the referenced record ID has not.
                        // Get the current form data source and set forceWrite() to true so that
                        // data validation (validateWrite()) is performed on the updated reason code.
                        formBudgetReservationTable = FormDataUtil::getFormDataSource(this);
    
                        if (formBudgetReservationTable)
                        {
                            formBudgetReservationTable.forceWrite(true);
                        }
                    }
                }
                else
                {
                    // The reasonCode is blank.
                    this.ReasonTableRef = ReasonTableRef::updateCode(reasonCode, this.ReasonTableRef);
                }
            }
    
            // Update the reason comment with the default comment value for the updated reason code.
            // A blank reason code value will result in a blank comment because a blank reason code value
            // will return an empty reason table buffer.
            this.editReasonComment(true, ReasonTable::find(_reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonTableRef).Reason;
        }
    
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="_set">
    /// Set to true if the reason comment is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        if (_set)
        {
            // If the ReasonTableRef is 0, then create a new ReasonTableRef record, otherwise, update the existing record.
            if (this.ReasonTableRef == 0)
            {
                this.ReasonTableRef = ReasonTableRef::createFromComment(_reasonComment);
            }
            else
            {
                this.ReasonTableRef = ReasonTableRef::updateComment(_reasonComment, this.ReasonTableRef);
            }
        }
        else
        {
            _reasonComment = ReasonTableRef::find(this.ReasonTableRef).ReasonComment;
        }
    
        return _reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizePurchaseRequisitionLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transitions all purchase requisition lines associated with the current budget reservation to a closed state and finalizes the lines.
    /// </summary>
    public void finalizePurchaseRequisitionLines()
    {
        BudgetReservationLine_PSN   budgetReservationLine;
    
        ttsBegin;
    
        while select purchReqLine from budgetReservationLine
            where budgetReservationLine.BudgetReservationHeader_PSN == this.RecId
                && budgetReservationLine.PurchReqLine != 0
        {
            PurchReqLine::find(budgetReservationLine.PurchReqLine, true).finalizePurchaseRequisitionLine(); 
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>BudgetReservation_PSN</c> class associated with the budget reservation header record.
    /// </summary>
    public BudgetReservation_PSN getBudgetReservation()
    {
        return BudgetReservation_PSN::newFromBudgetReservationHeader_PSN(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservationType_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget reservation type record for the current header record.
    /// </summary>
    /// <returns>
    /// The budget reservation type record related to the current header record.
    /// </returns>
    public BudgetReservationType_PSN getBudgetReservationType_PSN()
    {
        return BudgetReservationType_PSN::find(this.BudgetReservationType_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WorkflowVersionTable</c> table record that is associated with the <c>BudgetReservationType_PSN</c>
    /// table record.
    /// </summary>
    /// <returns>
    /// The <c>WorkflowVersionTable</c> table record associated with the <c>BudgetReservationType_PSN</c>
    /// table record.
    /// </returns>
    public WorkflowVersionTable getWorkflowVersionTable()
    {
        BudgetReservationType_PSN   budgetReservationType;
        WorkflowVersionTable        workflowVersionTable;
    
        budgetReservationType = BudgetReservationType_PSN::find(this.BudgetReservationType_PSN);
    
        if (BudgetReservationType_PSN::isWorkflowTableSequenceNumberValid(budgetReservationType.RecId))
        {
            workflowVersionTable = WorkflowVersionTable::findSequenceNumber(budgetReservationType.WorkflowTableSequenceNumber);
        }
    
        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowWorkItemForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pending <c>WorkflowWorkItemTable</c> record for the current budget reservation record
    /// and current user.
    /// </summary>
    /// <returns>
    /// The <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    public WorkflowWorkItemTable getWorkflowWorkItemForCurrentUser()
    {
        WorkflowWorkItemTable workflowWorkItemTable;
    
        select firstonly workflowWorkItemTable
            where workflowWorkItemTable.RefTableId == this.TableId &&
                workflowWorkItemTable.RefRecId == this.RecId &&
                workflowWorkItemTable.UserId == curUserId() &&
                workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending;
    
        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDraftReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any line on the budget reservation document has a reference document which is in draft state.
    /// </summary>
    /// <returns>
    /// true if any line on the budget reservation document has a draft document referenced; otherwise, false.
    /// </returns>
    public boolean hasDraftReferences()
    {
        AccountingDistribution  accountingDistributionBudgetReservation;
        AccountingDistribution  referenceAccountingDistribution;
        AccountingEvent         draftEvent;
    
        select firstonly RecId from accountingDistributionBudgetReservation
            where accountingDistributionBudgetReservation.SourceDocumentHeader == this.SourceDocumentHeader
            exists join referenceAccountingDistribution
                where referenceAccountingDistribution.ReferenceDistribution == accountingDistributionBudgetReservation.RecId
                    && referenceAccountingDistribution.ReferenceRole        == AccountingDistributionReferenceRole::Matching
            notExists join draftEvent
                where referenceAccountingDistribution.AccountingEvent == draftEvent.RecId
                    && (draftEvent.State    == AccountingEventState::Complete
                        || draftEvent.State == AccountingEventState::Journalized);
    
        return accountingDistributionBudgetReservation.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the budget reservation has lines associated with it.
    /// </summary>
    /// <returns>
    /// true if the budget reservation has lines; otherwise, false.
    /// </returns>
    public boolean hasLines()
    {
        return this.getBudgetReservation().hasLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        
        this.AccountingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.StartDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowAtRequestChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified user is a valid workflow user for the current workflow status.
    /// </summary>
    /// <returns>
    /// true if the user can modify the budget reservation record in the current workflow
    /// status; otherwise, false.
    /// </returns>
    public boolean isWorkflowAtRequestChange()
    {
        boolean                 isWorkflowInRequestChange = false;
        WorkflowWorkItemTable   workflowWorkItemTable;
    
        if (this.WorkflowStatus == BudgetReservationWorkflowStatus_PSN::InReview)
        {
            workflowWorkItemTable = this.getWorkflowWorkItemForCurrentUser();
    
            if (workflowWorkItemTable &&
                workflowWorkItemTable.Type == WorkflowWorkItemType::RequestChange)
            {
                isWorkflowInRequestChange = true;
            }
        }
    
        return isWorkflowInRequestChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a workflow is enabled for the budget reservation type.
    /// </summary>
    /// <returns>
    /// true if a workflow is enabled; otherwise, false.
    /// </returns>
    public boolean isWorkflowEnabled()
    {
        boolean isEnabled = false;
    
        if (BudgetReservationType_PSN::find(this.BudgetReservationType_PSN).WorkflowTableSequenceNumber != ""
            && BudgetReservationType_PSN::isWorkflowTableSequenceNumberValid(this.BudgetReservationType_PSN))
        {
            isEnabled = true;
        }
    
        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        BudgetReservationType_PSN   budgetReservationType_PSN;
    
        super(_fieldId);
    
        switch(_fieldId)
        {
            case (fieldNum(BudgetReservationHeader_PSN, BudgetReservationType_PSN)):
                budgetReservationType_PSN = this.getBudgetReservationType_PSN();
                this.RelievingDocumentType = budgetReservationType_PSN.RelievingDocument;
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header type name.
    /// </summary>
    /// <returns>
    /// Always returns <c>SourceDocument_BudgetReservation</c>.
    /// </returns>
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(BudgetReservation_SourceDocument_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header type enum value.
    /// </summary>
    /// <returns>
    /// Always returns <c>BudgetReservation_SourceDocument_PSN::BudgetReservation</c>.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return enum2int(BudgetReservation_SourceDocument_PSN::BudgetReservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header record associated with the current record.
    /// </summary>
    /// <returns>
    /// A <c>SourceDocumentHeader</c> buffer.
    /// </returns>
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader sourceDocumentHeader;
    
        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);
    
        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the title to be shown on the budget reservation list page preview pane.
    /// </summary>
    /// <returns>
    /// The title to be shown on the budget reservations list page preview pane.
    /// </returns>
    public display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.DocumentNumber, this.DocumentTitle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting status of the source document header corresponding to this record.
    /// </summary>
    /// <returns>
    /// The source document header accounting status.
    /// </returns>
    public display SourceDocumentAccountingStatus sourceDocumentStatus()
    {
        SourceDocumentHeader sourceDocumentHeader;
    
        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);
    
        return sourceDocumentHeader.AccountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total line amount in accounting currency for a budget reservation.
    /// </summary>
    /// <returns>
    /// Sum of all the line amounts in accounting currency.
    /// </returns>
    public Total totalLineAmount()
    {
        return this.getBudgetReservation().totalLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(boolean _lineDistributionUpdateNeeded = true)
    {
        if (this.doUpdateFinancials())
        {
            this.getBudgetReservation().updateDocumentStatusFields(BudgetReservationDocumentAction_PSN::DocumentEdit, false);            
        }
        else
        {
            _lineDistributionUpdateNeeded = false;
        }
    
        super();
    
        if (_lineDistributionUpdateNeeded)
        {
            SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(this, SourceDocumentLineAccountingStatus::FullyDistributed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid = super(_fieldIdToCheck);
    
        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BudgetReservationHeader_PSN, EndDate),
                     fieldNum(BudgetReservationHeader_PSN, StartDate):
                    isValid = this.getBudgetReservation().validateEffectivePeriod();
                    break;
    
                case fieldNum(BudgetReservationHeader_PSN, AccountingDate):
                    isValid = this.checkCanChangeAccountingDate();
                    isValid = isValid && LedgerFiscalCalendar::checkLedgerPeriodDateModule(Ledger::fiscalCalendar(CompanyInfo::current()),
                        this.AccountingDate,
                        SysModule::Ledger,
                        true);
                    break;
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForPost</Name>
				<Source><![CDATA[
    public void updateForPost()
    {
        SysGlobalCache globalCache = ClassFactory.globalCache();

        if (!globalCache.isSet(tableId2Name(tableNum(BudgetReservationHeader_PSN)),
            int642str(this.RecId) + ' - Posting'))
        {
            globalCache.set(tableId2Name(tableNum(BudgetReservationHeader_PSN)),
                int642str(this.RecId) + ' - Posting',
                true);
        }

        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     isValid = true;
        ReasonCode  reasonCode;
        ReasonTable reasonTable;
    
        isValid = super();
    
        if (isValid)
        {
            // Retrieve the Reason code from the reason reference table.
            reasonCode = ReasonTableRef::find(this.ReasonTableRef).Reason;
    
            if (reasonCode)
            {
                // General validation if reason code is used.
                reasonTable = ReasonTable::find(reasonCode);
    
                if (reasonTable.RecId == 0)
                {
                    isValid = checkFailed(strFmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
                }
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBudgetReservationForType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the provided budget reservation type is referenced on any budget reservations.
    /// </summary>
    /// <param name="_budgetReservationTypeRecId">
    /// The budget reservation type record ID to check.
    /// </param>
    /// <returns>
    /// true if the budget reservation type is referenced by a budget reservation; otherwise, false.
    /// </returns>
    public static boolean existBudgetReservationForType(BudgetReservationTypeRecId_PSN _budgetReservationTypeRecId)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
    
        if (_budgetReservationTypeRecId != 0)
        {
            select firstonly RecId from budgetReservationHeader
                where budgetReservationHeader.BudgetReservationType_PSN == _budgetReservationTypeRecId;
        }
    
        return budgetReservationHeader.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDraftOrPostedBudgetReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any budget reservations exist in draft or posted status.
    /// </summary>
    /// <returns>
    /// true if there are <c>BudgetReservation</c> records in draft or posted status; otherwise, false.
    /// </returns>
    public static boolean existDraftOrPostedBudgetReservations()
    {
        BudgetReservationHeader_PSN budgetReservationHeader_PSN;
    
        select firstonly RecId from budgetReservationHeader_PSN
            where budgetReservationHeader_PSN.DocumentStatus == BudgetReservationDocumentStatus_PSN::Draft
                || budgetReservationHeader_PSN.DocumentStatus == BudgetReservationDocumentStatus_PSN::Posted;
    
        return (budgetReservationHeader_PSN.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>BudgetReservationHeader_PSN</c> table.
    /// </summary>
    /// <param name="_budgetReservationRecId">
    /// The record ID of the <c>BudgetReservationHeader_PSN</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to be used when reading the record; optional.
    /// </param>
    /// <returns>
    /// The record of the <c>BudgetReservationHeader_PSN</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static BudgetReservationHeader_PSN find(
        BudgetReservationRecId_PSN  _budgetReservationRecId,
        boolean                     _forUpdate        = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetReservationHeader.concurrencyModel(_concurrencyModel);
        }
    
        if (_budgetReservationRecId)
        {
            budgetReservationHeader.selectForUpdate(_forUpdate);
    
            select firstonly budgetReservationHeader
                where budgetReservationHeader.RecId == _budgetReservationRecId;
        }
    
        return budgetReservationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>BudgetReservationHeader_PSN</c> table by document number.
    /// </summary>
    /// <param name="_documentNumber">
    /// The document number of the <c>BudgetReservationHeader_PSN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetReservationHeader_PSN</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetReservationHeader_PSN findByDocumentNumber(
        BudgetReservationDocumentNumber_PSN _documentNumber,
        boolean                             _forupdate = false,
        ConcurrencyModel                    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
    
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetReservationHeader.concurrencyModel(_concurrencyModel);
        }
    
        if (_documentNumber != "")
        {
            budgetReservationHeader.selectForUpdate(_forupdate);
    
            select firstonly budgetReservationHeader
                where budgetReservationHeader.DocumentNumber == _documentNumber;
        }
    
        return budgetReservationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the budget reservation header associated with the specified budget reservation line record ID.
    /// </summary>
    /// <param name="_budgetReservationLineRecId">
    /// The record ID of the budget reservation line to retrieve the associated budget reservation header for.
    /// </param>
    /// <returns>
    /// The budget reservation header that is associated with the specified budget reservation line record ID.
    /// </returns>
    public static BudgetReservationHeader_PSN findByLine(BudgetReservationLineRecId_PSN _budgetReservationLineRecId)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
        BudgetReservationLine_PSN   budgetReservationLine;
    
        select firstOnly budgetReservationHeader
            exists join budgetReservationLine
                where budgetReservationLine.RecId == _budgetReservationLineRecId
                    && budgetReservationHeader.RecId == budgetReservationLine.BudgetReservationHeader_PSN;
    
        return budgetReservationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BudgetReservationHeader_PSN</c> record by <c>SourceDocument</c>.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// A <c>SourceDocument</c> record id.
    /// </param>
    /// <param name="_forupdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>BudgetReservationHeader_PSN</c> record.
    /// </returns>
    public static BudgetReservationHeader_PSN findBySourceDocumentHeader(
        RefRecId            _sourceDocumentHeader,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BudgetReservationHeader_PSN budgetReservationHeader;
    
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            budgetReservationHeader.concurrencyModel(_concurrencyModel);
        }
    
        if (_sourceDocumentHeader != 0)
        {
            budgetReservationHeader.selectForUpdate(_forupdate);
    
            select firstonly budgetReservationHeader
                where budgetReservationHeader.SourceDocumentHeader == _sourceDocumentHeader;
        }
    
        return budgetReservationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPurchaseRequisitionLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the list of approved purchase requisitions in lookup dialog.
    /// </summary>
    /// <param name="_formControl">
    /// The form control that will host the lookup.
    /// </param>
    /// <param name="_accountingDate">
    /// The accounting date of the budget reservation document.
    /// </param>
    public static void showPurchaseRequisitionLookup(
        FormControl _formControl,
        TransDate   _accountingDate)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSourcePurchReqTable;
        QueryBuildRange         queryBuildRangeRequisitionStatus;
        QueryBuildRange         queryBuildRangePurchReqOnHold;
        QueryBuildRange         queryBuildRangePurchReqTransDate;
        QueryBuildRange         queryBuildRangePurchReqLineBudgetReservationLine;
        QueryBuildDataSource    queryBuildBudgetReservationLine;
        QueryBuildDataSource    queryBuildPurchReqLine;
    
        sysTableLookup = SysTableLookup::newParameters(tableNum(PurchReqTable), _formControl);
    
        sysTableLookup.addLookupfield(fieldNum(PurchReqTable, PurchReqId));
        sysTableLookup.addLookupfield(fieldNum(PurchReqTable, PurchReqName));
    
        query = new Query();
    
        queryBuildDataSourcePurchReqTable = query.addDataSource(tableNum(PurchReqTable));
        queryBuildDataSourcePurchReqTable.addGroupByField(fieldNum(PurchReqTable, PurchReqId));
        queryBuildDataSourcePurchReqTable.addGroupByField(fieldNum(PurchReqTable, PurchReqName));
    
        queryBuildRangePurchReqTransDate = SysQuery::findOrCreateRange(queryBuildDataSourcePurchReqTable, fieldNum(PurchReqTable, TransDate));
        queryBuildRangePurchReqTransDate.value(SysQuery::range(DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _accountingDate), DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(),_accountingDate)));
    
        queryBuildPurchReqLine = queryBuildDataSourcePurchReqTable.addDataSource(tableNum(PurchReqLine));
        queryBuildPurchReqLine.relations(true);
    
        queryBuildBudgetReservationLine = queryBuildPurchReqLine.addDataSource(tableNum(BudgetReservationLine_PSN));
        queryBuildBudgetReservationLine.relations(true);
        queryBuildBudgetReservationLine.joinMode(JoinMode::NoExistsJoin);
    
        queryBuildRangeRequisitionStatus = SysQuery::findOrCreateRange(queryBuildDataSourcePurchReqTable, fieldNum(PurchReqTable, RequisitionStatus));
        queryBuildRangeRequisitionStatus.value(queryValue(PurchReqRequisitionStatus::Approved));
    
        queryBuildRangePurchReqOnHold = SysQuery::findOrCreateRange(queryBuildDataSourcePurchReqTable, fieldNum(PurchReqTable, OnHold));
        queryBuildRangePurchReqOnHold.value(queryValue(NoYes::No));
        queryBuildRangePurchReqLineBudgetReservationLine = SysQuery::findOrCreateRange(queryBuildPurchReqLine, fieldNum(PurchReqLine, BudgetReservationLine_PSN));
        
        queryBuildRangePurchReqLineBudgetReservationLine.value(queryValue(0));
    
        sysTableLookup.parmQuery(query);
    
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBudgetReservationFinalized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>BudgetReservationHeader_PSN</c> record associated with the Purchase order is finalized.
    /// </summary>
    /// <param name="_accountingDistributionRecId">
    /// The record ID of the <c>AccountingDistribution</c> table.
    /// </param>
    /// <returns>
    /// True if the <c>BudgetReservationHeader_PSN</c> is finalized; otherwise false.
    /// </returns>
    public static boolean hasBudgetReservationFinalized(AccountingDistributionRecId _accountingDistributionRecId)
    {
        SourceDocumentHeader        sourceDocumentHeader;
        AccountingDistribution      accountingDistribution;
        AccountingDistributionRecId accountingDistributionRecId = _accountingDistributionRecId;
        boolean                     hasFinalized;
        BudgetReservationHeader_PSN budgetReservationHeader_PSN;

        while (accountingDistributionRecId)
        {
            select firstOnly SourceRelationType, RecId from sourceDocumentHeader
                join ReferenceDistribution from accountingDistribution
                where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
                    && accountingDistribution.RecId == accountingDistributionRecId;

            if (sourceDocumentHeader.SourceRelationType == tableNum(BudgetReservationHeader_PSN))
            {
                select DocumentStatus from budgetReservationHeader_PSN
                    where budgetReservationHeader_PSN.SourceDocumentHeader == sourceDocumentHeader.RecId;

                hasFinalized = (budgetReservationHeader_PSN.DocumentStatus == BudgetReservationDocumentStatus_PSN::Finalized);

                break;
            }
            else
            {
                accountingDistributionRecId = accountingDistribution.ReferenceDistribution;
            }
        }

        return hasFinalized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistributionFromBudgetReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the accounting distribution lies within the <c>BudgetReservationHeader_PSN</c> table hierarchy.
    /// </summary>
    /// <param name="_accountingDistributionRecId">
    /// The record ID of the <c>AccountingDistribution</c> table.
    /// </param>
    /// <returns>
    /// True if the accounting distribution is from the <c>BudgetReservationHeader_PSN</c> table's hierarchy; otherwise false.
    /// </returns>
    public static boolean isDistributionFromBudgetReservationHierarchy(AccountingDistributionRecId _accountingDistributionRecId)
    {
        SourceDocumentHeader sourceDocumentHeader;
        AccountingDistribution accountingDistribution;
        AccountingDistributionRecId accountingDistributionRecId = _accountingDistributionRecId;
        boolean isInHierarchy;

        while (accountingDistributionRecId)
        {
            select firstOnly SourceRelationType from sourceDocumentHeader
                join ReferenceDistribution from accountingDistribution
                where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
                    && accountingDistribution.RecId == accountingDistributionRecId;

            if (sourceDocumentHeader.SourceRelationType == tableNum(BudgetReservationHeader_PSN))
            {
                isInHierarchy = true;
                break;
            }
            else
            {
                accountingDistributionRecId = accountingDistribution.ReferenceDistribution;
            }
        }

        // Checks whether the budget reservation is linked with the purchase requisition.
        if (!isInHierarchy)
        {
            accountingDistribution = AccountingDistribution::find(_accountingDistributionRecId);

            sourceDocumentHeader = SourceDocumentHeader::find(accountingDistribution.SourceDocumentHeader);

            if (sourceDocumentHeader.SourceRelationType == tableNum(PurchReqTable))
            {
                while select SourceRelationType from sourceDocumentHeader
                    join RecId from accountingDistribution
                    where accountingDistribution.SourceDocumentHeader == sourceDocumentHeader.RecId
                        && accountingDistribution.ReferenceDistribution == _accountingDistributionRecId
                {
                    if (sourceDocumentHeader.SourceRelationType == tableNum(BudgetReservationHeader_PSN))
                    {
                        isInHierarchy = true;
                        break;
                    }
                }
            }
        }

        return isInHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentFinalizedOrInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the document is in process of finalization or already finalized.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The record ID of the <c>SourceDocumentHeader</c> table.
    /// </param>
    /// <param name="_finalizedAccountingEvent">
    /// The record ID of the finalized <c>AccountEvent</c> table.
    /// </param>
    /// <returns>
    /// true if the document is finalized or in process; else false.
    /// </returns>
    public static boolean isDocumentFinalizedOrInProcess(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId,  RecId _finalizedAccountingEvent)
    {
        TableId sourceRelationTypeId;
        AccountingEvent finalizedAccountingEvent;
        boolean isDocumentFinalizedOrInProcess;
        SourceDocumentHeaderRecId sourceDocumentHeaderRecIdForGBR;

        sourceRelationTypeId = SourceDocumentHeader::find(_sourceDocumentHeaderRecId).SourceRelationType;

        if (sourceRelationTypeId == tableNum(PurchReqTable)
            || sourceRelationTypeId == tableNum(BudgetReservationHeader_PSN))
        {
            if (_finalizedAccountingEvent)
            {
                isDocumentFinalizedOrInProcess = true;
            }
            else
            {
                sourceDocumentHeaderRecIdForGBR = _sourceDocumentHeaderRecId;

                if (sourceRelationTypeId == tableNum(PurchReqTable))
                {
                    sourceDocumentHeaderRecIdForGBR = BudgetReservationHeader_PSN::getBudgetReservationHeaderSourceDocumentHeaderRecId(_sourceDocumentHeaderRecId);
                }

                // Gets the finalized event associated with the source document header
                select firstOnly RecId from finalizedAccountingEvent
                    where finalizedAccountingEvent.Type == AccountingEventType::Finalize
                        && (finalizedAccountingEvent.SourceDocumentHeader == sourceDocumentHeaderRecIdForGBR
                        || finalizedAccountingEvent.SourceDocumentHeader == _sourceDocumentHeaderRecId);


                if (finalizedAccountingEvent.RecId != 0)
                {
                    isDocumentFinalizedOrInProcess = true;
                }
            }
        }
        else if (sourceRelationTypeId == tableNum(PurchTable))
        {
            if (_finalizedAccountingEvent)
            {
                isDocumentFinalizedOrInProcess = true;
            }
            else
            {
                // Gets the finalized event associated with the source document header
                select firstOnly RecId from finalizedAccountingEvent
                    where finalizedAccountingEvent.Type == AccountingEventType::Finalize
                        && finalizedAccountingEvent.SourceDocumentHeader == _sourceDocumentHeaderRecId
                        && finalizedAccountingEvent.State == AccountingEventState::Started;

                if (finalizedAccountingEvent.RecId != 0)
                {
                    isDocumentFinalizedOrInProcess = true;
                }
            }
        }

        return isDocumentFinalizedOrInProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetReservationHeaderSourceDocumentHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header record ID associated with the budget reservation header.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The record ID of the <c>SourceDocumentHeader</c> table.
    /// </param>
    /// <returns>
    /// The value of the <c>SourceDocumentHeaderRecId</c>.
    /// </returns>
    public static SourceDocumentHeaderRecId getBudgetReservationHeaderSourceDocumentHeaderRecId(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        PurchReqLine purchReqLine;
        PurchReqTable purchReqTable;
        BudgetReservationLine_PSN budgetReservationLine;
        BudgetReservationHeader_PSN budgetReservationHeader;

        select firstonly SourceDocumentHeader from budgetReservationHeader
            exists join budgetReservationLine
            where budgetReservationHeader.RecId == budgetReservationLine.BudgetReservationHeader_PSN
                exists join purchReqLine
                where budgetReservationLine.PurchReqLine == purchReqLine.RecId
                    exists join purchReqTable
                    where purchReqTable.RecId == purchReqLine.PurchReqTable
                        && purchReqTable.SourceDocumentHeader == _sourceDocumentHeaderRecId;

        return budgetReservationHeader.SourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPostingCache</Name>
				<Source><![CDATA[
    public void clearPostingCache()
    {
        SysGlobalCache globalCache = ClassFactory.globalCache();
 
        if (globalCache.isSet(tableId2Name(tableNum(BudgetReservationHeader_PSN)),
            int642str(this.RecId) + BudgetReservation_PSN::GBRPostCacheNameSuffix))
         {
            globalCache.remove(tableId2Name(tableNum(BudgetReservationHeader_PSN)),
                int642str(this.RecId) + BudgetReservation_PSN::GBRPostCacheNameSuffix);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateDelete()
    {
        boolean canDelete = super();

        if (canDelete)
        {
            BudgetReservation_PSN budgetReservation_PSN = BudgetReservation_PSN::newFromBudgetReservationHeader_PSN(this);

            if (budgetReservation_PSN.isDocumentFinalized())
            {
                canDelete = checkFailed(strFmt("@PublicSector:BudgetReservationDeleteErrorFinalized", this.DocumentNumber));
            }
            else if (budgetReservation_PSN.isDocumentPosted() || budgetReservation_PSN.hasBudgetResDocumentEverBeenPosted())
            {
                canDelete = checkFailed(strFmt("@PublicSector:BudgetReservationDeleteErrorPosted", this.DocumentNumber));
            }
        }

        return canDelete;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BudgetReservation_PSN</ConfigurationKey>
	<DeveloperDocumentation>@Budgeting_BudgetReservationPS:BudgetReservationHeaderDeveloper</DeveloperDocumentation>
	<Label>@Budgeting_BudgetReservationPS:BudgetReservationHeader</Label>
	<SingularLabel>@Budgeting_BudgetReservationPS:BudgetReservationHeader</SingularLabel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>DocumentNumber</TitleField1>
	<TitleField2>DocumentTitle</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>TransactionNumberIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetReservationType_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReasonCode</Name>
			<Label>@SYS81463</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonTableRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@Budgeting_BudgetReservationPS:BudgetReservationOtherReferences</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepartmentReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Settings</Name>
			<Label>@SYS309344</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelievingDocumentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS319505</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentTitle</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetReservationType_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AccountingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS189891</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AccountingDistributionTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDistributionTemplateRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BudgetReservationType_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationTypeRecId_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CancelDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationCancelDate_PSN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CarriedForwardBudgetTransactionHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepartmentReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationDepartmentReference_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationDocumentNumber_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetReservationDocumentStatus_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentTitle</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationDocumentTitle_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationEndDate_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationExternalReference_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FinalizeClosingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationFinalizeClosingDate_PSN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<RelationContext>ReasonTableRef</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RelievingDocumentType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetReservationRelievingDocument_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentHeaderRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BudgetReservationStartDate_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BudgetReservationWorkflowStatus_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastSavedAccountingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DocumentNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AccountingDistributionTemplate</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>AccountingDistributionTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountingDistributionTemplate</Name>
					<Field>AccountingDistributionTemplate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BudgetReservationType_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BudgetReservationType_PSN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetReservationType_PSN</Name>
					<Field>BudgetReservationType_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CarriedForwardBudgetTransactionHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetTransactionHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarriedForwardBudgetTransactionHeader</Name>
					<Field>CarriedForwardBudgetTransactionHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>