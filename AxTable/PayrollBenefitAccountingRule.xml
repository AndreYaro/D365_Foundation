<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollBenefitAccountingRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollBenefitAccountingRule extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a record ID exists in <c>PayrollBenefitAccountingRule</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    ///     The value of the record ID to check.
    /// </param>
    /// <returns>
    ///     true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean checkExist(PayrollBenefitAccountingRuleRecId _recId)
    {
        boolean ret = true;

        if (!PayrollBenefitAccountingRule::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollBenefitAccountingRule::txtNotExist(), tableStr(PayrollBenefitAccountingRule)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a record ID exists in <c>PayrollBenefitAccountingRule</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The value of the record ID to check.
    /// </param>
    /// <returns>
    ///     true if the record ID exists; otherwise, false.
    /// </returns>

    public static boolean exist(PayrollBenefitAccountingRuleRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollBenefitAccountingRule
                    where payrollBenefitAccountingRule.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record in the <c>PayrollBenefitAccountingRule</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    ///     The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    ///     A record from the <c>PayrollBenefitAccountingRule</c> table.
    /// </returns>

    public static PayrollBenefitAccountingRule find(
    PayrollBenefitAccountingRuleRecId         _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollBenefitAccountingRule payrollBenefitAccountingRule;

        payrollBenefitAccountingRule.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollBenefitAccountingRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollBenefitAccountingRule
             where payrollBenefitAccountingRule.RecId == _recId;

        return payrollBenefitAccountingRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBenefitPlanLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record in the <c>PayrollBenefitAccountingRule</c> table based on supplied values of the <c>BenefitPlan</c>, <c>LegalEntity</c> and <c>PayrollType</c> fields.
    /// </summary>
    /// <param name="_benefitPlan">
    ///     The value of the <c>BenefitPlan</c> field to find.
    /// </param>
    /// <param name="_legalEntity">
    ///     The value of the <c>LegalEntity</c> field to find.
    /// </param>
    /// <param name="_payrollType">
    ///     The value of the <c>PayrollType</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    ///     A record from the <c>PayrollBenefitAccountingRule</c> table.
    /// </returns>

    public static PayrollBenefitAccountingRule findByBenefitPlanLegalEntity(
    HcmBenefitPlanRecId _benefitPlan,
    CompanyInfoRecId    _legalEntity,
    PayrollType         _payrollType,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollBenefitAccountingRule payrollBenefitAccountingRule;

        payrollBenefitAccountingRule.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollBenefitAccountingRule.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollBenefitAccountingRule
            where payrollBenefitAccountingRule.BenefitPlan == _benefitPlan &&
                    payrollBenefitAccountingRule.LegalEntity == _legalEntity &&
                    payrollBenefitAccountingRule.PayrollType == _payrollType;

        return payrollBenefitAccountingRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the message to use when a specific record in the <c>PayrollBenefitAccountingRule</c>
    ///     table does not exist.
    /// </summary>
    /// <returns>
    ///     The message that indicates a record does not exist.
    /// </returns>

    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HRMAdministrationPayrollInfo</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollbenefitaccountingruleTableStoresAccountingRulesAss</DeveloperDocumentation>
	<Label>@Payroll:BenefitAccountingRule</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>LedgerDimension</TitleField1>
	<TitleField2>LegalEntity</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>PayrollBenefitAccountingRuleIdx_AK1</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BenefitPlan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BenefitPlan</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayrollType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerDimension</Name>
			<Label>@SYS139233</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BenefitPlan</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmBenefitPlanRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Label>@Payroll:LegalEntity</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayrollType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>PayrollType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CompanyInfoIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PayrollBenefitAccountingRuleIdx_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BenefitPlan</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LegalEntity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayrollType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmBenefitPlan</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmBenefitPlan</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BenefitPlan</Name>
					<Field>BenefitPlan</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>