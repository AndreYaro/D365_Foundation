<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBLedgerJournalTrans_FiscalBooks_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBLedgerJournalTrans_FiscalBooks_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAdjustmentByFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the adjustment by fiscal document is allowed
    /// </summary>
    /// <returns>
    ///     True if the adjustment by fiscal document is allowed, otherwise false
    /// </returns>
    public boolean allowAdjustmentByFiscalDocument()
    {
        return FBFiscalDocumentAdjustment_BR::allowAdjustmentByFiscalDocument(this.TaxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerCredit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true when the adjustment classification should generate a credit on the general ledger
    /// </summary>
    /// <returns>
    ///     True when the classififcation is related to debit of tax or credit reversal
    ///     False when the classification is related to a credit of that os debit reversal
    /// </returns>
    /// <remarks>
    ///     The semantics of debit and credit when read from tax perspective is the oposite of the general ledger
    ///     Credit of tax is a right to recover a given amount, producing a debit on the GL account related to the tax
    ///     Debit of tax is a liability to pay a given amount, producing a credit on the GL account related to the tax
    /// </remarks>

    public boolean isLedgerCredit()
    {
        boolean isCredit;
        FBGeneralAdjustmentCodeICMS_BR          generalAdjustmentCodeICMS;
        FBFiscalDocumentAdjustmentCodeICMS_BR   fiscalDocumentAdjustmentCode;
        FBGeneralAdjustmentCodeIPI_BR           generalAdjustmentcodeIPI;
        FBGeneralAdjustmentCodePISCOFINS_BR     generalAdjustmentCodePisCofins;

        if (this.GeneralAdjustmentCode)
        {
            switch (this.TaxType)
            {
                case TaxType_BR::ICMS :
                case TaxType_BR::ICMSST :
                case TaxType_BR::ICMSDiff :
                    select firstOnly generalAdjustmentCodeICMS
                        where generalAdjustmentCodeICMS.RecId == this.GeneralAdjustmentCode;

                    isCredit = generalAdjustmentCodeICMS.isLedgerCredit();
                    break;

                case TaxType_BR::IPI :
                    select firstOnly generalAdjustmentcodeIPI
                        where generalAdjustmentcodeIPI.RecId == this.GeneralAdjustmentCode;

                    isCredit = generalAdjustmentcodeIPI.isLedgerCredit();
                    break;

                case TaxType_BR::PIS:
                case TaxType_BR::COFINS:
                    select firstOnly generalAdjustmentCodePisCofins
                        where generalAdjustmentCodePisCofins.RecId == this.GeneralAdjustmentCode;

                    isCredit = generalAdjustmentCodePisCofins.isLedgerCredit();
                    break;

                default : throw error(error::wrongUseOfFunction(funcName()));
            }
        }
        else if (this.FiscalDocumentAdjustmentCodeICMS)
        {
            select firstOnly fiscalDocumentAdjustmentCode
                where fiscalDocumentAdjustmentCode.RecId == this.FiscalDocumentAdjustmentCodeICMS;

            isCredit = fiscalDocumentAdjustmentCode.isLedgerCredit();
        }

        return isCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true when the adjustment classification is a tax debit.
    /// </summary>
    /// <returns>
    /// True when the classification is related to debit of tax. False, otherwise.
    /// </returns>
    public boolean isTaxDebit()
    {
        boolean isTaxDebit;
        FBGeneralAdjustmentCodeICMS_BR          generalAdjustmentCodeICMS;
        FBFiscalDocumentAdjustmentCodeICMS_BR   fiscalDocumentAdjustmentCode;
        FBGeneralAdjustmentCodeIPI_BR           generalAdjustmentCodeIPI;
        FBGeneralAdjustmentCodePISCOFINS_BR     generalAdjustmentCodePisCofins;

        if (this.GeneralAdjustmentCode)
        {
            switch (this.TaxType)
            {
                case TaxType_BR::ICMS :
                case TaxType_BR::ICMSST :
                case TaxType_BR::ICMSDiff :
                    select firstOnly generalAdjustmentCodeICMS
                        where generalAdjustmentCodeICMS.RecId == this.GeneralAdjustmentCode;

                    isTaxDebit = generalAdjustmentCodeICMS.isTaxDebit();
                    break;

                case TaxType_BR::IPI :
                    select firstOnly generalAdjustmentCodeIPI
                        where generalAdjustmentCodeIPI.RecId == this.GeneralAdjustmentCode;

                    isTaxDebit = generalAdjustmentCodeIPI.isTaxDebit();
                    break;

                case TaxType_BR::PIS:
                case TaxType_BR::COFINS:
                    select firstOnly generalAdjustmentCodePisCofins
                        where generalAdjustmentCodePisCofins.RecId == this.GeneralAdjustmentCode;

                    isTaxDebit = generalAdjustmentCodePisCofins.isTaxDebit();
                    break;

                default : throw error(error::wrongUseOfFunction(funcName()));
            }
        }
        else if (this.FiscalDocumentAdjustmentCodeICMS)
        {
            select firstOnly fiscalDocumentAdjustmentCode
                where fiscalDocumentAdjustmentCode.RecId == this.FiscalDocumentAdjustmentCodeICMS;

            isTaxDebit = fiscalDocumentAdjustmentCode.isTaxDebit();
        }

        return isTaxDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when a field has been modified.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name of the field that is modified.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the modified field; optional.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(FBLedgerJournalTrans_FiscalBooks_BR, TaxType):
                if (this.allowAdjustmentByFiscalDocument() == false)
                {
                    this.AdjustmentType = FBTaxAssessmentAdjustmentType_BR::General;
                }

                this.setState();
                break;

            case fieldStr(FBLedgerJournalTrans_FiscalBooks_BR, FiscalEstablishment_BR):
                this.setState();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setState</Name>
				<Source><![CDATA[
    private void setState()
    {
        switch (this.TaxType)
        {
            case TaxType_BR::ICMS:
            case TaxType_BR::IPI:
                this.State = FiscalEstablishment_BR::find(this.FiscalEstablishment_BR).postalAddress().State;
                return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAdjustmentSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the type of source for IPI adjustments.
    /// </summary>
    /// <returns>
    /// true - if type of source valid for current adjustment; false - otherwise.
    /// </returns>
    public boolean validateAdjustmentSourceType()
    {
        boolean ret = true;

        if (this.TaxType == TaxType_BR::IPI
            && ((this.AdjustmentType == FBTaxAssessmentAdjustmentType_BR::FiscalDocument
                    && this.TaxAdjustmentSourceType != FBTaxAdjustmentSourceType_BR::FiscalDocument)
                || (this.AdjustmentType == FBTaxAssessmentAdjustmentType_BR::General
                    && this.TaxAdjustmentSourceType == FBTaxAdjustmentSourceType_BR::FiscalDocument)))
        {
            ret = checkFailed(strFmt("@FiscalBooks_SpedFiscal:ValidateAdjustmentSourceType", enum2str(this.AdjustmentType), enum2str(this.TaxAdjustmentSourceType)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(FBLedgerJournalTrans_FiscalBooks_BR, GeneralAdjustmentCode):
                ret = this.validateGeneralAdjustmentCode();
                break;

            case fieldNum(FBLedgerJournalTrans_FiscalBooks_BR, FiscalDocumentAdjustmentCodeICMS):
                ret = this.validateFiscalDocumentAdjustmentCode();
                break;

            case fieldNum(FBLedgerJournalTrans_FiscalBooks_BR, TaxValue):
                if (this.TaxValue > 100)
                {
                    ret = checkFailed(strFmt("@SYS4001542", 100));
                }
                break;

            case fieldNum(FBLedgerJournalTrans_FiscalBooks_BR, TaxAdjustmentSourceType) :
                ret = this.validateAdjustmentSourceType() && ret;
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalDocumentAdjustmentCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the Fiscal Document adjustment code
    /// </summary>
    /// <param name="_fiscalDocumentAdjustmentCodeRecId">
    /// The adjustment code to be validated
    /// </param>
    /// <returns>
    /// true if the Fiscal Document adjustment code is valid; otherwise, false
    /// </returns>
    public boolean validateFiscalDocumentAdjustmentCode(RecId _fiscalDocumentAdjustmentCodeRecId = this.FiscalDocumentAdjustmentCodeICMS)
    {
        boolean                                    ret = true;

        TransDate                                  transDate;
        FBFiscalDocumentAdjustmentCodeICMS_BR      fiscalDocumentAdjustmentCodeICMS;

        if (_fiscalDocumentAdjustmentCodeRecId == 0)
        {
            return true;
        }

        transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        fiscalDocumentAdjustmentCodeICMS = FBFiscalDocumentAdjustmentCodeICMS_BR::find(_fiscalDocumentAdjustmentCodeRecId);

        // validate tax type
        if (this.taxType != fiscalDocumentAdjustmentCodeICMS.TaxType)
        {
            ret = checkFailed(strFmt("@SYS4082084", this.taxType));
        }

        // validate  classification
        if (this.TaxType == TaxType_BR::ICMSDiff)
        {
            if (fiscalDocumentAdjustmentCodeICMS.ClassificationIcmsDif == FBGeneralClassificationICMS_BR::Information)
            {
                ret = checkFailed(strFmt("@FBK183", "@SYS4006767"));
            }
            else if (fiscalDocumentAdjustmentCodeICMS.Classification == FBFiscalDocumentClassificationICMS_BR::Information)
            {
                ret = checkFailed(strFmt("@FBK183", "@SYS4006767"));
            }
        }

        // validate state
        if (fiscalDocumentAdjustmentCodeICMS.State != this.State)
        {
            ret = checkFailed(strFmt("@SYS4083159", this.State));
        }

        // validate date fo fiscal adjustment code
        if (fiscalDocumentAdjustmentCodeICMS.ValidFrom > transDate || (fiscalDocumentAdjustmentCodeICMS.ValidTo && fiscalDocumentAdjustmentCodeICMS.ValidTo < transDate))
        {
            ret = checkFailed(strFmt("@SYS4006853", fiscalDocumentAdjustmentCodeICMS.AdjustmentCode, transDate));
        }

        if (fiscalDocumentAdjustmentCodeICMS.Table52)
        {
            ret = checkFailed(strFmt("@Brazil:FiscalDocumentAdjustmentCodeTable53FormatValidation", fiscalDocumentAdjustmentCodeICMS.AdjustmentCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGeneralAdjustmentCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the general adjustment code
    /// </summary>
    /// <param name="_generalAdjustmentCodeRecId">
    /// The adjustment code to be validated
    /// </param>
    /// <returns>
    /// true if the general adjustment code is valid; otherwise, false
    /// </returns>

    public boolean validateGeneralAdjustmentCode(RecId _generalAdjustmentCodeRecId = this.GeneralAdjustmentCode)
    {
        boolean ret = true;

        if (_generalAdjustmentCodeRecId != 0)
        {
            TransDate transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            FBGeneralAdjustmentCode_BR generalAdjustmentCode = FBGeneralAdjustmentCode_BR::find(_generalAdjustmentCodeRecId);
            FBGeneralTaxAdjustmentCode_BR adjustmentCode = generalAdjustmentCode.AdjustmentCode;

            if (this.taxType != generalAdjustmentCode.TaxType)
            {
                ret = checkFailed(strFmt("@SYS4082084", this.taxType));
            }
            else
            {
                switch (this.taxType)
                {
                    case TaxType_BR::ICMS:
                    case TaxType_BR::ICMSST:
                    case TaxType_BR::ICMSDiff:

                        FBGeneralAdjustmentCodeICMS_BR generalAjustmentCodeICMS = generalAdjustmentCode;

                        if (generalAjustmentCodeICMS.Classification == FBGeneralClassificationICMS_BR::Information)
                        {
                            ret = checkFailed(strFmt("@FBK183", "@SYS4006767"));
                        }

                        if (generalAjustmentCodeICMS.State != this.State)
                        {
                            ret = checkFailed(strFmt("@SYS4083159", this.State));
                        }

                        break;

                    case TaxType_BR::IPI:

                        FBGeneralAdjustmentCodeIPI_BR generalAdjustmentCodeIPI = generalAdjustmentCode;

                        if (this.AdjustmentType == FBTaxAssessmentAdjustmentType_BR::FiscalDocument
                            && !generalAdjustmentCodeIPI.IsFiscalDocument)
                        {
                            ret = checkFailed(strFmt("@FiscalBooks_SpedFiscal:ValidateAdjustmentCode", "@GLS50886"));
                        }
                        else if (this.AdjustmentType == FBTaxAssessmentAdjustmentType_BR::General 
                                && !generalAdjustmentCodeIPI.IsGeneral)
                        {
                            ret = checkFailed(strFmt("@FiscalBooks_SpedFiscal:ValidateAdjustmentCode", "@SYS35893"));
                        }

                        break;

                    case TaxType_BR::PIS:
                    case TaxType_BR::COFINS:
                        FBGeneralAdjustmentCodePISCOFINS_BR generalAdjustmentCodePISCOFINS = generalAdjustmentCode as FBGeneralAdjustmentCodePISCOFINS_BR;

                        if (generalAdjustmentCodePISCOFINS.isBaseAdjustmentType())
                        {
                            ret = checkFailed(strFmt("@FBK183", enum2str(generalAdjustmentCodePISCOFINS.AdjustmentType)));
                        }
                        break;

                    default:
                        break;
                }

                if (ret && (generalAdjustmentCode.ValidFrom > transDate || (generalAdjustmentCode.ValidTo && generalAdjustmentCode.ValidTo < transDate)))
                {
                    ret = checkFailed(strFmt("@SYS4006853", adjustmentCode, transDate));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMandatoryForAdjustmentSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the type of source for IPI adjustments.
    /// </summary>
    /// <returns>
    /// true - if type of source valid for current adjustment; false - otherwise.
    /// </returns>
    public boolean validateMandatoryForAdjustmentSourceType()
    {
        boolean ret = true;

        if (this.TaxType == TaxType_BR::IPI)
        {
            switch (this.TaxAdjustmentSourceType)
            {
                case FBTaxAdjustmentSourceType_BR::AdministrationProcess :
                case FBTaxAdjustmentSourceType_BR::JudicalProcess :
                case FBTaxAdjustmentSourceType_BR::PERDCOMP :

                    if (!this.TaxAdjustmentProcessNum)
                    {
                        ret = checkFailed(strFmt("@SYS84753", extendedTypeId2pname(extendedTypeNum(FBTaxAdjustmentProcessNum_BR))));
                    }

                    break;

                default :

                    if (this.TaxAdjustmentProcessNum)
                    {
                        ret = checkFailed(strFmt("@SYS119159", strFmt("@GLS111164", extendedTypeId2pname(extendedTypeNum(FBTaxAdjustmentProcessNum_BR)))));
                    }

                    break;
            }
        }


        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePisCofinsMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all mandatory fields, using predefined rules.
    /// </summary>
    /// <returns>
    /// True if all mandatory fields are filled, false otherwise
    /// </returns>
    public boolean validatePisCofinsMandatoryFields()
    {
        boolean                             ret = true;
        FBGeneralAdjustmentCode_BR          generalAdjustmentCode;
        FBGeneralAdjustmentCodePISCOFINS_BR generalAdjustmentCodePISCOFINS;

        generalAdjustmentCode = FBGeneralAdjustmentCode_BR::find(this.GeneralAdjustmentCode);

        generalAdjustmentCodePISCOFINS = generalAdjustmentCode as FBGeneralAdjustmentCodePISCOFINS_BR;

        if (FBTaxAssessmentAdjustment_BR::isCnpjMandatory(generalAdjustmentCodePISCOFINS.AdjustmentType)
            && this.DeductionCNPJ == '')
        {
            ret = checkFailed(strFmt("@SYS26332", "@GLS52"));
        }

        if (FBTaxAssessmentAdjustment_BR::isCreditTypeMandatory(generalAdjustmentCodePISCOFINS.AdjustmentType)
            && this.FBContribCreditType_BR == 0)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS23988"));
        }

        if (FBTaxAssessmentAdjustment_BR::isTaxationCodeMandatory(generalAdjustmentCodePISCOFINS.AdjustmentType)
            && this.TaxationCode == '')
        {
            ret = checkFailed(strFmt("@SYS26332", "@GLS60378"));
        }

        if (FBTaxAssessmentAdjustment_BR::isTaxValueMandatory(generalAdjustmentCodePISCOFINS.AdjustmentType)
            && this.TaxValue == 0)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS91805"));
        }

        if (FBTaxAssessmentAdjustment_BR::isTaxBaseAmountMandatory(generalAdjustmentCodePISCOFINS.AdjustmentType)
            && this.TaxBaseAmount == 0)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS73028"));
        }

        if (FBTaxAssessmentAdjustment_BR::isAssessmentPeriodMandatory(generalAdjustmentCodePISCOFINS.AdjustmentType)
            && this.ContribAssessmentPeriod == dateNull())
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYP4882617"));
        }

        if (FBTaxAssessmentAdjustment_BR::isTransDateMandatory(generalAdjustmentCodePISCOFINS.AdjustmentType)
            && this.ContribTransferredCreditPercentage == 0)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYP4882618"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if ((this.AdjustmentType == FBTaxAssessmentAdjustmentType_BR::FiscalDocument
                && ((this.TaxType != TaxType_BR::IPI && this.FiscalDocumentAdjustmentCodeICMS == 0)
                    || (this.TaxType == TaxType_BR::IPI && this.GeneralAdjustmentCode == 0)))
            || (this.AdjustmentType == FBTaxAssessmentAdjustmentType_BR::General && this.GeneralAdjustmentCode == 0))
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS4082174"));
        }

        #ISOCountryRegionCodes
        if (this.TaxType == TaxType_BR::ICMSST && !FiscalEstablishmentIEPerState_BR::findByFiscalEstablishmentState(this.FiscalEstablishment_BR, this.State, SysCountryRegionCode::getCountryRegionIdByIsoCode(#isoBR)))
        {
            FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::find(this.FiscalEstablishment_BR);

            ret = checkFailed(strFmt("@SYS4006948", fiscalEstablishment.Name, fiscalEstablishment.dataAreaId, this.State));
        }

        if (this.TaxType == TaxType_BR::PIS || this.TaxType == TaxType_BR::COFINS)
        {
            ret = this.validatePisCofinsMandatoryFields() && ret;
        }

        if (this.TaxType == TaxType_BR::IPI)
        {
            ret = this.validateAdjustmentSourceType() && this.validateMandatoryForAdjustmentSourceType() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger account and merge with the default dimension from the journal table
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    /// The default account.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The ledger transaction.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment related to the transaction.
    /// </param>
    /// <returns>
    /// The ledger account.
    /// </returns>
    public static LedgerDimensionAccount getLedgerDimension(LedgerDimensionDefaultAccount   _defaultLedgerDimension,
                                                            LedgerJournalTrans              _ledgerJournalTrans,
                                                            FiscalEstablishment_BR          _fiscalEstablishment)
    {
        LedgerDimensionAccount      mergedLedgerDimension;
        List                        dimensionSources;
        Map                         primaryDimensionSpecifiers;
        DimensionDefault            defaultDimension;
        DimensionAttributeValue     fiscalEstablishmentDimAttribValue;
        DimensionAttributeRecId     fiscalEstablishmentDimAttribRecId;
        DimensionAttribute          fiscalEstablishmentDimAttrib;

        if (_defaultLedgerDimension == 0)
        {
            return 0;
        }

        changecompany(_ledgerJournalTrans.Company)
        {
            // Get dimension values from the primary side
            dimensionSources = new List(Types::Class);
            primaryDimensionSpecifiers = null;
            if (_ledgerJournalTrans.Company == _ledgerJournalTrans.OffsetCompany)
            {
                fiscalEstablishmentDimAttribRecId   = BrazilParameters::find().FiscalEstablishmentDimensionAttribute;

                if (fiscalEstablishmentDimAttribRecId)
                {
                    fiscalEstablishmentDimAttrib        = DimensionAttribute::find(fiscalEstablishmentDimAttribRecId);
                    fiscalEstablishmentDimAttribValue   = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(fiscalEstablishmentDimAttrib, _fiscalEstablishment.FiscalEstablishmentId);

                    // Check if the financial dimension for fiscal establishment is directly related to FiscalEstablishment_BR table
                    // or if it is a custom financial dimension and its value is valid
                    if (    fiscalEstablishmentDimAttrib.BackingEntityTableName == tableStr(FiscalEstablishment_BR)
                        ||  (   fiscalEstablishmentDimAttrib.BackingEntityTableName == tableStr(DimensionFinancialTag)
                            &&  fiscalEstablishmentDimAttribValue))
                    {
                        defaultDimension = LedgerDimensionDefaultFacade::serviceReplaceAttributeValue(
                                                    _ledgerJournalTrans.ledgerJournalTable().DefaultDimension,
                                                    _fiscalEstablishment.getDefaultDimension(),
                                                    fiscalEstablishmentDimAttribRecId);
                    }
                    else
                    {
                        // Financial dimension value was not found
                        defaultDimension = _ledgerJournalTrans.ledgerJournalTable().DefaultDimension;
                    }
                }
                else
                {
                    defaultDimension = _ledgerJournalTrans.ledgerJournalTable().DefaultDimension;
                }

                primaryDimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(defaultDimension);
            }

            if (primaryDimensionSpecifiers)
            {
                dimensionSources.addEnd(primaryDimensionSpecifiers);
            }

            // Get dimensions from main account
            LedgerDimensionDefaultingEngine::addDefaultDimensionForLedgerDimension(dimensionSources, _defaultLedgerDimension);

            mergedLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(_defaultLedgerDimension, dimensionSources);
        }

        return mergedLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@FBK171</DeveloperDocumentation>
	<Label>@FBK170</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LedgerJournalTrans</TitleField1>
	<TitleField2>GeneralAdjustmentCode</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>FiscalBooksBrazil</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneralAdjustmentCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FBContribCreditType_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Adjustment</Name>
			<Label>@SYS4082086</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComplementaryDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjustmentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GeneralAdjustmentCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentAdjustmentCodeICMS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxationCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeductionCNPJ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FBContribCreditType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContribTransferredCreditPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContribAssessmentPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContribCreditBaseSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAdjustmentSourceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAdjustmentProcessNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amounts</Name>
			<Label>@SYS75670</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBaseAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountOther</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalDocument</Name>
			<Label>@GLS50886</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalDocument_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalDocumentLine_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ObservationCodeTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AdjustmentType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>FBTaxAssessmentAdjustmentType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ComplementaryDescription</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBAdjustmentDescription_BR</ExtendedDataType>
			<Label>@SYS4082144</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ContribAssessmentPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBContribAssessmentPeriod_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContribCreditBaseSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4860980</Label>
			<EnumType>FBNonFiscalOpCreditSourceCode_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ContribTransferredCreditPercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@SYP4882618</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeductionCNPJ</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CNPJNum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FBContribCreditType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBContribCreditTypeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentAdjustmentCodeICMS</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBFiscalDocumentAdjustmentCodeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentLine_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentLineRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocumentTaxTrans_BR</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalDocument_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalDocumentRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalEstablishment_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalEstablishmentRecId_BR</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GeneralAdjustmentCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBGeneralAdjustmentCodeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ObservationCodeTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBObservationCodeRecId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>State</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressStateId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBTaxAmount_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountOther</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBTaxAmount_BR</ExtendedDataType>
			<Label>@GLS490</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxAdjustmentProcessNum</Name>
			<ExtendedDataType>FBTaxAdjustmentProcessNum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAdjustmentSourceType</Name>
			<EnumType>FBTaxAdjustmentSourceType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxationCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxationCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBaseAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBTaxBaseAmount_BR</ExtendedDataType>
			<Label>@SYS73028</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBTaxValue_BR</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>LedgerJournalTrans</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FBContribCreditType_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FBContribCreditType_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FBContribCreditType_BR</Name>
					<Field>FBContribCreditType_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FBFiscalDocumentAdjustmentCodeICMS</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FBFiscalDocumentAdjustmentCodeICMS_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentAdjustmentCodeICMS</Name>
					<Field>FiscalDocumentAdjustmentCodeICMS</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FBGeneralAdjustmentCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FBGeneralAdjustmentCode_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GeneralAdjustmentCode</Name>
					<Field>GeneralAdjustmentCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocument</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocument_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocument_BR</Name>
					<Field>FiscalDocument_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentLine_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocumentLine_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentLine_BR</Name>
					<Field>FiscalDocumentLine_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalDocumentTaxTrans_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalDocumentTaxTrans_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalDocumentTaxTrans_BR</Name>
					<Field>FiscalDocumentTaxTrans_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalEstablishment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalEstablishment_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalEstablishment_BR</Name>
					<Field>FiscalEstablishment_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ObservationCodeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FBObservationCodeTable_BR</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ObservationCodeTable</Name>
					<Field>ObservationCodeTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>