<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OverdueJournalSettings_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class OverdueJournalSettings_W extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPeriodLabelValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the name of the current recording interval to determine the period of overdue debts
    /// </summary>
    /// <returns>
    /// Label value
    /// </returns>
    public LabelString getPeriodLabelValue()
    {
        LabelString     labelValue;

        switch (this.Condition)
        {
            case ComparisonCondition_W::Less:
                labelValue  = strFmt("@SYS4003966", this.PaymTermDays);
            break;
            case ComparisonCondition_W::MoreOrEqual:
                labelValue  = strFmt("@SYS4003967", this.PaymTermDays);
            break;
        }

        return labelValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (this.MaxDays && this.MaxDays < this.MinDays)
        {
            ret = checkFailed("@SYS4003584");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDueDateBeModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if due date can be modified in <c>CustVendTransOpen</c> record.
    /// </summary>
    /// <param name="_custVendTransOpen">
    /// <c>CustVendTransOpen</c> record.
    /// </param>
    /// <param name="_newDueDate">
    /// Due date set on record.
    /// </param>
    /// <param name="_originalDueDate">
    /// Original due date on record.
    /// </param>
    /// <returns>
    /// True if due date can be modified, otherwise false.
    /// </returns>
    /// <remarks>
    /// Due date can be modified only if <c>CustVendTrans</c> record was not present at the last overdue debt journal and should not be present at the current time,
    /// or if it was present and present at the current time.
    /// </remarks>
    public static boolean canDueDateBeModified(CustVendTransOpen _custVendTransOpen, DueDate _newDueDate, DueDate _originalDueDate)
    {
        #isoCountryRegionCodes
        boolean ret = true;

        SetEnumerator               journalTypesSE;
        OverdueJournalSettings_W    overdueJournalSettings;
        OverdueJournalTable_W       overdueJournalTable;
        boolean                     origIn, curIn,     //is original or current in period
                                    calcOrig, calcCur; //calculate if dates in period

        boolean isDueDateWithinPeriod(DueDate _date)
        {
            return (_date + overdueJournalSettings.MinDays <= overdueJournalTable.TransDate) &&
                   (!overdueJournalSettings.MaxDays || _date + overdueJournalSettings.MaxDays >= overdueJournalTable.TransDate);
        }
        ;
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            return ret;

        journalTypesSE = OverdueJournalSettings_W::journalTypesByTrans(_custVendTransOpen).getEnumerator();

        while (journalTypesSE.moveNext())
        {
            while select overdueJournalSettings
                where overdueJournalSettings.JournalType     == journalTypesSE.current() &&
                      overdueJournalSettings.ValidatePosting == NoYes::Yes            &&
                      overdueJournalSettings.CalcType        == OverdueCalcType_W::DueDate
            {
                calcOrig = true;
                calcCur  = true;
                origIn = false;
                curIn = false;

                overdueJournalTable = OverdueJournalTable_W::findLast(overdueJournalSettings.JournalType);

                if (overdueJournalSettings.PaymTermDays)
                {
                    switch (overdueJournalSettings.Condition)
                    {
                        case ComparisonCondition_W::Less:
                            if (_originalDueDate - _custVendTransOpen.TransDate >= overdueJournalSettings.PaymTermDays)
                            {
                                calcOrig = false;
                            }
                            if (_newDueDate - _custVendTransOpen.TransDate >= overdueJournalSettings.PaymTermDays)
                            {
                                calcCur = false;
                            }
                            break;
                        case ComparisonCondition_W::MoreOrEqual:
                            if (_originalDueDate - _custVendTransOpen.TransDate < overdueJournalSettings.PaymTermDays)
                            {
                                calcOrig = false;
                            }
                            if (_newDueDate - _custVendTransOpen.TransDate < overdueJournalSettings.PaymTermDays)
                            {
                                calcCur = false;
                            }
                            break;
                    }
                }

                if (calcOrig)
                {
                    origIn = isDueDateWithinPeriod(_originalDueDate);
                }
                if (calcCur)
                {
                    curIn = isDueDateWithinPeriod(_newDueDate);
                }

                if (origIn ^ curIn) //binary XOR - if was in period and not or vice versa.
                {
                    ret = checkFailed(strFmt("@SYS4003583", overdueJournalSettings.JournalType , overdueJournalTable.TransDate));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransactionBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates if transaction can be posted or settled.
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustVendTrans</c> record.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <param name="_dueDate">
    /// Due date.
    /// </param>
    /// <param name="_settlementDate">
    /// Date of settlement; Optional.
    /// </param>
    /// <returns>
    /// True if transaction can be posted. Otherwise false.
    /// </returns>
    /// <remarks>
    /// Transaction can be posted only if it must not present at last overdue debt journal(it doesn't become overdue straight after posting).
    /// Settlement can be made only if it doesn't change balance of transactions, which are present at the last journal.
    /// </remarks>
    public static boolean canTransactionBePosted(CustVendTrans _custVendTrans, TransDate _transDate, DueDate _dueDate, TransDate _settlementDate = dateNull())
    {
        #isoCountryRegionCodes
        boolean                     ret = true;
        OverdueJournalSettings_W    journalSettings;
        TransDate                   tmpDate;
        OverdueJournalTable_W       overdueJournalTable;
        SetEnumerator               setEnumerator;
        ;
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            return ret;

        setEnumerator = OverdueJournalSettings_W::journalTypesByTrans(_custVendTrans).getEnumerator();

        while (setEnumerator.moveNext())
        {
            while select journalSettings
                where journalSettings.JournalType     == setEnumerator.current() &&
                      journalSettings.ValidatePosting == NoYes::Yes
            {
                if (journalSettings.PaymTermDays)
                {
                    switch (journalSettings.Condition)
                    {
                        case ComparisonCondition_W::Less:
                            if (_dueDate - _transDate >= journalSettings.PaymTermDays)
                            {
                                continue;
                            }
                            break;
                        case ComparisonCondition_W::MoreOrEqual:
                            if (_dueDate - _transDate < journalSettings.PaymTermDays)
                            {
                                continue;
                            }
                            break;
                    }
                }

                switch (journalSettings.CalcType)
                {
                    case OverdueCalcType_W::InvoiceDate:
                        tmpDate = _transDate;
                        break;
                    case OverdueCalcType_W::DueDate:
                        tmpDate = _dueDate;
                        break;
                }

                overdueJournalTable = OverdueJournalTable_W::findLast(journalSettings.JournalType);

                if (tmpDate + journalSettings.MinDays <= overdueJournalTable.TransDate)
                {
                    if (!_settlementDate || _settlementDate <= overdueJournalTable.TransDate)
                    {
                        ret = checkFailed(strFmt("@SYS4003583", journalSettings.JournalType , overdueJournalTable.TransDate));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds first record related of journal type specified
    /// </summary>
    /// <param name="_overdueJournalType">
    /// Type of journal.
    /// </param>
    /// <param name="_recId">
    /// RecId of the previous record.
    /// </param>
    /// <returns>
    /// <c>OverdueJournalSettings_W</c> record.
    /// </returns>
    public static OverdueJournalSettings_W findJournalType(OverdueJournalType_W _overdueJournalType, RecId _recId  = 0)
    {
        OverdueJournalSettings_W overdueJournalSettings;

        select firstonly overdueJournalSettings
            order by RecId
            where overdueJournalSettings.JournalType == _overdueJournalType
               && (! _recId || (overdueJournalSettings.RecId > _recId));

        return overdueJournalSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTypesByTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns overdue journal types which are valid for type of journal specifed.
    /// </summary>
    /// <param name="_common">
    /// <c>CustVendTrans</c> or <c>CustVendTransOpen</c> record.
    /// </param>
    /// <returns>
    /// Set, which contains types of valid journals.
    /// </returns>
    public static Set journalTypesByTrans(Common _common)
    {
        Set journalTypesSet = new Set(Types::Enum);

        switch (_common.TableId)
        {
            case tableNum(CustTrans):
            case tableNum(CustTransOpen):
                journalTypesSet.add(OverdueJournalType_W::CustVATJournal);
                break;
            case tableNum(VendTrans):
            case tableNum(VendTransOpen):
                journalTypesSet.add(OverdueJournalType_W::VendVATJournal);
                journalTypesSet.add(OverdueJournalType_W::VendCITPITJournal);
                break;
        }
        return journalTypesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.LineId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>PL</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4003580</DeveloperDocumentation>
	<Label>@SYS4003579</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>JournalType</TitleField1>
	<TitleField2>MinDays</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>JournalTypeIdx</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustOverdueVATTurnJournalLine_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustOverdueVATTurnJournalLine_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustOverdueVATDebtJournalLine_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>CustOverdueVATDebtJournalLine_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendOverdueVATDebtJournalLine_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>VendOverdueVATDebtJournalLine_W</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>VendOverdueVATTurnJournalLine_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>VendOverdueVATTurnJournalLine_W</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTermDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Condition</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS31242</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Condition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTermDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidatePosting</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overdue</Name>
			<Label>@SYS4003582</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MinDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaxDays</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>OverdueCalcType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Condition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ComparisonCondition_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>OverdueJournalType_W</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaxDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OverdueMaxDays_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MinDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OverdueMinDays_W</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PaymTermDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Days</ExtendedDataType>
			<Label>@SYS4003585</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValidatePosting</Name>
			<Label>@SYS41362</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>