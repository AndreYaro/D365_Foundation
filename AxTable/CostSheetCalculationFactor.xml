<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetCalculationFactor</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostSheetCalculationFactor extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowActivate</Name>
				<Source><![CDATA[
    public boolean allowActivate()
    {
        return this.RecId &&
               this.CostingVersionStatus == CostingVersionStatus::Pending &&
               !CostingVersion::find(this.VersionId).BlockActivation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateInsert</Name>
				<Source><![CDATA[
    public boolean aosValidateInsert()
    {
        return super() && this.isLineIdOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>aosValidateUpdate</Name>
				<Source><![CDATA[
    public boolean aosValidateUpdate()
    {
        return super() && this.isLineIdOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>blocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the calculation factor is blocked for edition or deletion.
    /// </summary>
    /// <returns>
    ///    true if the record is blocked; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Although cost category prices can be neither edited or deleted if "blocked", costing sheet
    ///    calculation factors are still able to be deleted when the status is "Previous active". As a result,
    ///    old factors may be removed with time, so that the costing sheet will load faster.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Unknown version status is used.
    /// </exception>
    [SysClientCacheDataMethodAttribute(true)]
    display CostSheetCalculationFactorBlocked blocked()
    {
        boolean blocked;

        switch (this.CostingVersionStatus)
        {
            case CostingVersionStatus::Current:
                blocked = NoYes::Yes;
                break;

            case CostingVersionStatus::Previous:
                blocked = NoYes::No; // allow deletion of Previous factors, to optimize sheet loading process, if necessary
                break;

            case CostingVersionStatus::Pending:
                blocked = CostingVersion::find(this.VersionId).Blocked ? NoYes::Yes : NoYes::No;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return blocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the cost group ID of the calculation node that owns this calculation factor.
    /// </summary>
    /// <returns>
    ///    The cost group ID.
    /// </returns>

    display CostGroupId costGroupId()
    {
        CostSheetNodeTable costSheetNodeTableParentCostGroup;
        CostSheetNodeTable costSheetNodeTableCalculation;

        select firstonly RecId from costSheetNodeTableCalculation
            where costSheetNodeTableCalculation.SheetId == this.SheetId
               && costSheetNodeTableCalculation.NodeId   == this.NodeId
        join CostGroupId from costSheetNodeTableParentCostGroup
            where costSheetNodeTableParentCostGroup.SheetId == costSheetNodeTableCalculation.SheetId
               && costSheetNodeTableParentCostGroup.NodeId   == costSheetNodeTableCalculation.ParentNodeId;

        return costSheetNodeTableParentCostGroup.CostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costSheetNodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the calculation node that owns this calculation factor.
    /// </summary>
    /// <returns>
    ///    A costing sheet calculation node record.
    /// </returns>
    public CostSheetNodeTable costSheetNodeTable()
    {
        return CostSheetNodeTable::find(this.SheetId, this.NodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.isTmp())
        {
            super();
        }
        else
        {
            ttsbegin;

            CostingVersion::updateLastUpdated(this.VersionId);
            super();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionBlocked</Name>
				<Source><![CDATA[
    display CostingVersionBlocked displayVersionBlocked()
    {
        return CostingVersion::find(this.VersionId).Blocked ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVersionName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display CostingVersionName displayVersionName()
    {
        return CostingVersion::find(this.VersionId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCostSheetNodeCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the calculation node code to the node ID.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether the value is being set.
    /// </param>
    /// <param name="_costSheetNodeCode">
    ///    The calculation node code that should be converted to ID and assigned to the calculation factor.
    /// </param>
    /// <returns>
    ///    A calculation node code.
    /// </returns>

    public edit CostSheetNodeCode editCostSheetNodeCode(
        boolean             _set,
        CostSheetNodeCode  _costSheetNodeCode
        )
    {
        CostSheetNodeTable costSheetNodeTable;

        if (_set)
        {
            this.NodeId = (select firstonly NodeId from costSheetNodeTable
                               where costSheetNodeTable.SheetId == this.SheetId
                                  && costSheetNodeTable.Code     == _costSheetNodeCode).NodeId;
        }

        return CostSheetNodeTable::find(this.SheetId, this.NodeId).Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoActivePrice</Name>
				<Source><![CDATA[
    public boolean hasNoActivePrice(CostSheetNodeCode _costSheetNodeCode, boolean _showErrorMessage)
    {
        FromDate    currentFromDate;
        boolean     ret = true;

        currentFromDate = CostSheetCalculationFactor::findCurrent(this.NodeId,
                                                                   this.ItemCode,
                                                                   this.ItemRelation,
                                                                   this.InventSiteId,
                                                                   this).FromDate;
        if (this.FromDate >= currentFromDate)
            return true;

        if (_showErrorMessage)
        {
            if (this.InventSiteId != '')
            {
                checkFailed(strFmt("@SYS112796",
                                   _costSheetNodeCode,
                                   this.InventSiteId,
                                   this.FromDate,
                                   currentFromDate));
            }
            else
            {
                checkFailed(strFmt("@SYS112797",
                                   _costSheetNodeCode,
                                   this.FromDate,
                                   currentFromDate));
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectCostDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the description of the calculation node that owns this calculation factor.
    /// </summary>
    /// <returns>
    ///    The calculation node description.
    /// </returns>

    display CostSheetNodeDescription indirectCostDescription()
    {
        return (select firstonly costSheetNodeTable
                    where costSheetNodetable.SheetId == this.SheetId
                       && costSheetNodeTable.NodeId   == this.NodeId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ItemCode = TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.isTmp())
        {
            super();
        }
        else
        {
            ttsbegin;

            super();
            CostingVersion::updateLastUpdated(this.VersionId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineIdOK</Name>
				<Source><![CDATA[
    private boolean isLineIdOK()
    {
        boolean ret;

        switch (this.CostingVersionStatus)
        {
            case CostingVersionStatus::Pending :
                ret = this.LineId == 0 ? true : checkFailed("@SYS105578");
                break;

            case CostingVersionStatus::Current :
                ret = this.LineId == 1 ? true : checkFailed("@SYS104994");
                break;

            default :
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CostSheetCalculationFactor, ItemCode) :
                this.ItemRelation = '';
                break;

            case fieldNum(CostSheetCalculationFactor, ItemRelation) :
                if (this.ItemCode == TableGroupAll::All)
                {
                    this.ItemRelation = '';
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCurrentToPrevious</Name>
				<Source><![CDATA[
    public void moveCurrentToPrevious()
    {
        if (this.CostingVersionStatus != CostingVersionStatus::Current)
            return;

        this.CostingVersionStatus = CostingVersionStatus::Previous;
        this.LineId             = 1 + CostSheetCalculationFactor::maxOfLineId(this.NodeId,
                                                                               this.ItemCode,
                                                                               this.ItemRelation,
                                                                               this.VersionId,
                                                                               this.FromDate,
                                                                               this.InventSiteId,
                                                                               this);
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>movePendingToCurrent</Name>
				<Source><![CDATA[
    public void movePendingToCurrent()
    {
        if (this.CostingVersionStatus == CostingVersionStatus::Pending)
        {
            this.CostingVersionStatus   = CostingVersionStatus::Current;
            this.LineId                 = 1;
            this.FromDate               = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.isTmp())
        {
            super();
        }
        else
        {
            ttsbegin;

            super();
            CostingVersion::updateLastUpdated(this.VersionId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(CostSheetCalculationFactor, VersionId) :
                if (CostingVersion::find(this.VersionId).Blocked)
                {
                    ret = checkFailed("@SYS104062");
                }
                break;

            case fieldNum(CostSheetCalculationFactor, FromDate) :
                CostingVersion costingVersionFromDate = CostingVersion::find(this.VersionId);

                if (costingVersionFromDate.DefaultDate
                    && this.FromDate != costingVersionFromDate.DefaultDate)
                {
                    ret = checkFailed("@SYS106899");
                }
                break;

            case fieldNum(CostSheetCalculationFactor, InventSiteId) :
                CostingVersion costingVersionSite = CostingVersion::find(this.VersionId);

                if (costingVersionSite.InventSiteId
                    && this.InventSiteId != costingVersionSite.InventSiteId)
                {
                    ret = checkFailed("@SYS112795");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCostSheetNodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>CostSheetNodeTable</c>.
    /// </summary>
    /// <returns>true if the validation was successful; otherwise, false.</returns>
    protected boolean validateCostSheetNodeTable()
    {
        CostSheetNodeTable costSheetNodeTable = this.costSheetNodeTable();
        boolean ret = true;

        switch (costSheetNodeTable.Type)
        {
            case CostSheetNodeType::CalculationSurcharge:
                if (this.Amount != 0.00)
                {
                    ret = checkFailed(strFmt("@SYS123203",
                                             enum2str(CostSheetNodeType::CalculationSurcharge),
                                             fieldStr(CostSheetCalculationFactor, Percentage))) && ret;
                }
                break;

            case CostSheetNodeType::CalculationRate,
                 CostSheetNodeType::CalculationOutUnitBased,
                 CostSheetNodeType::CalculationInUnitBased,
                 CostSheetNodeType::CalculationPurchUnitBased:
                if (this.Percentage != 0.00)
                {
                    ret = checkFailed(strFmt("@SYS123203",
                                             enum2str(costSheetNodeTable.Type),
                                             fieldStr(CostSheetCalculationFactor, Amount))) && ret;
                }
                break;

            default:
                if (!CostSheetNodeCalculation::isCalculationNodeType(costSheetNodeTable.Type))
                {
                    ret = checkFailed("@SYS123204") && ret;
                }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.ItemCode != TableGroupAll::All && this.ItemRelation == '')
        {
            ret = checkFailed("@SYS24595") && ret;
        }

        /* When editing records directly on the database, then some more validations should be executed.
           When using the Costing Sheet Designer form (where all records are temporary) this validation
           is not needed: */
        if (!this.isTmp())
        {
            ret = ret && this.validateCostSheetNodeTable();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CostSheetCalculationFactor find(
        CostSheetNodeId            _calculationNodeId,
        TableGroupAll               _itemCode,
        CostItemRelation            _itemRelation,
        CostingVersionId              _versionId,
        FromDate                    _fromDate,
        Line                        _lineId,
        InventSiteId                _inventSiteId,
        CostSheetCalculationFactor _tmpCostSheetCalculationFactor,
        boolean                     _forUpdate = false,
        CostSheetId                _costSheetId = CostSheetTable::defaultCostSheetTable().SheetId
        )
    {
        CostSheetCalculationFactor costSheetCalculationFactor;

        if (!_costSheetId || !_calculationNodeId || !_versionId)
            return costSheetCalculationFactor;

        if (_tmpCostSheetCalculationFactor && _tmpCostSheetCalculationFactor.isTmp())
        {
            costSheetCalculationFactor.setTmp();
            costSheetCalculationFactor.setTmpData(_tmpCostSheetCalculationFactor); // when working with the Costing Sheet Designer, the table to use will be temporary
        }
        else
        {
            costSheetCalculationFactor.selectForUpdate(_forUpdate);
        }

        select firstonly costSheetCalculationFactor
            where costSheetCalculationFactor.SheetId      == _costSheetId
               && costSheetCalculationFactor.NodeId        == _calculationNodeId
               && costSheetCalculationFactor.ItemCode      == _itemCode
               && costSheetCalculationFactor.ItemRelation  == _itemRelation
               && costSheetCalculationFactor.VersionId     == _versionId
               && costSheetCalculationFactor.FromDate      == _fromDate
               && costSheetCalculationFactor.LineId        == _lineId
               && costSheetCalculationFactor.InventSiteId  == _inventSiteId;

        return costSheetCalculationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the most appropriate calculation factor for a set of parameters.
    /// </summary>
    /// <param name="_calculationNodeId">
    ///    The ID of the calculation node.
    /// </param>
    /// <param name="_itemId">
    ///    The Item ID.
    /// </param>
    /// <param name="_itemGroupId">
    ///    The Item group ID.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The Site name.
    /// </param>
    /// <param name="_versionId">
    ///    The Costing version ID.
    /// </param>
    /// <param name="_fromDate">
    ///    The date for which the nearest previous record should be found.
    /// </param>
    /// <param name="_tmpCostSheetCalculationFactor">
    ///    A record that will be used in the select statement if it is temporary.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_costSheetId">
    ///    A <c>costSheetId</c>, reserved for future releases, where multiple costing sheets will be used;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The most appropriate record for the specified version ID.
    /// </returns>
    public static CostSheetCalculationFactor findCostingVersion(
        CostSheetNodeId            _calculationNodeId,
        ItemId                      _itemId,
        ItemGroupId                 _itemGroupId,
        InventSiteId                _inventSiteId,
        CostingVersionId            _versionId,
        FromDate                    _fromDate,
        CostSheetCalculationFactor _tmpCostSheetCalculationFactor,
        boolean                     _forUpdate = false,
        CostSheetId                _costSheetId = CostSheetTable::defaultCostSheetTable().SheetId
        )
    {
        CostSheetCalculationFactor  costSheetCalculationFactor;

        void findPrice(InventSiteId _siteId)
        {
            select firstonly costSheetCalculationFactor
                order by ItemCode, FromDate desc, CostingVersionStatus
                where costSheetCalculationFactor.SheetId == _costSheetId
                   && costSheetCalculationFactor.NodeId == _calculationNodeId
                   && (  (costSheetCalculationFactor.ItemCode == TableGroupAll::Table   && costSheetCalculationFactor.ItemRelation == _itemId)
                      || (costSheetCalculationFactor.ItemCode == TableGroupAll::GroupId && costSheetCalculationFactor.ItemRelation == _itemGroupId)
                      || (costSheetCalculationFactor.ItemCode == TableGroupAll::All     && costSheetCalculationFactor.ItemRelation == '')  )
                   && costSheetCalculationFactor.InventSiteId == _siteId
                   && costSheetCalculationFactor.VersionId == _versionId
                   && costSheetCalculationFactor.FromDate <= _fromDate;
        }

        if (!_costSheetId || !_calculationNodeId)
            return costSheetCalculationFactor;

        if (_tmpCostSheetCalculationFactor && _tmpCostSheetCalculationFactor.isTmp())
        {
            costSheetCalculationFactor.setTmp();
            costSheetCalculationFactor.setTmpData(_tmpCostSheetCalculationFactor);
        }
        else
        {
            costSheetCalculationFactor.selectForUpdate(_forUpdate);
        }

        findPrice(_inventSiteId);

        if (_inventSiteId && !costSheetCalculationFactor)
        {
            findPrice('');
        }

        return costSheetCalculationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the current active calculation factor for a set of parameters.
    /// </summary>
    /// <param name="_calculationNodeId">
    ///    The ID of the calculation node.
    /// </param>
    /// <param name="_itemCode">
    ///    A <c>TableGroupAll</c> value: All, Group, or Item.
    /// </param>
    /// <param name="_itemRelation">
    ///    A <c>CostItemRelation</c> value: item ID, item group ID, or empty.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The name of the site.
    /// </param>
    /// <param name="_tmpCostSheetCalculationFactor">
    ///    The record that will be used in the select statement if it is temporary.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether the found record should be selected for update; optional.
    /// </param>
    /// <param name="_costSheetId">
    ///    Reserved for future releases, where multiple costing sheets will be used; optional.
    /// </param>
    /// <returns>
    ///    The record with the current active calculation factor.
    /// </returns>
    public static CostSheetCalculationFactor findCurrent(
        CostSheetNodeId            _calculationNodeId,
        TableGroupAll               _itemCode,
        CostItemRelation            _itemRelation,
        InventSiteId                _inventSiteId,
        CostSheetCalculationFactor _tmpCostSheetCalculationFactor,
        boolean                     _forUpdate = false,
        CostSheetId                _costSheetId = CostSheetTable::defaultCostSheetTable().SheetId
        )
    {
        CostSheetCalculationFactor  costSheetCalculationFactor;

        if (!_costSheetId || !_calculationNodeId)
            return costSheetCalculationFactor;

        if (_tmpCostSheetCalculationFactor && _tmpCostSheetCalculationFactor.isTmp())
        {
            costSheetCalculationFactor.setTmp();
            costSheetCalculationFactor.setTmpData(_tmpCostSheetCalculationFactor);
        }
        else
        {
            costSheetCalculationFactor.selectForUpdate(_forUpdate);
        }

        select firstonly costSheetCalculationFactor
            where costSheetCalculationFactor.SheetId              == _costSheetId
               && costSheetCalculationFactor.NodeId                == _calculationNodeId
               && costSheetCalculationFactor.ItemCode              == _itemCode
               && costSheetCalculationFactor.ItemRelation          == _itemRelation
               && costSheetCalculationFactor.InventSiteId          == _inventSiteId
               && costSheetCalculationFactor.CostingVersionStatus    == CostingVersionStatus::Current;

        return costSheetCalculationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentFlex</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returnes the most appropriate current active calculation factor for a set of parameters.
    /// </summary>
    /// <param name="_calculationNodeId">
    ///    The ID of the calculation node.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_itemGroupId">
    ///    The item group ID.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The site name.
    /// </param>
    /// <param name="_tmpCostSheetCalculationFactor">
    ///    A record that will be used in the select statement if it is temporary.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the found record should be selected for update; optional.
    /// </param>
    /// <param name="_costSheetId">
    ///    Reserved for future releases, where multiple costing sheets will be used; optional.
    /// </param>
    /// <returns>
    ///    A record with the current active calculation factor.
    /// </returns>
    /// <remarks>
    ///    If there is no appropriate record for <paramref name="_inventSiteId" />, the same select statement,
    ///    but with empty site name, will be used.
    /// </remarks>
    public static CostSheetCalculationFactor findCurrentFlex(
        CostSheetNodeId            _calculationNodeId,
        ItemId                      _itemId,
        ItemGroupId                 _itemGroupId,
        InventSiteId                _inventSiteId,
        CostSheetCalculationFactor _tmpCostSheetCalculationFactor,
        boolean                     _forUpdate = false,
        CostSheetId                _costSheetId = CostSheetTable::defaultCostSheetTable().SheetId
        )
    {
        CostSheetCalculationFactor  costSheetCalculationFactor;

        void findPrice(InventSiteId _siteId)
        {
            select firstonly costSheetCalculationFactor
                order by ItemCode
                where costSheetCalculationFactor.SheetId == _costSheetId
                   && costSheetCalculationFactor.NodeId == _calculationNodeId
                   && (  (costSheetCalculationFactor.ItemCode == TableGroupAll::Table   && costSheetCalculationFactor.ItemRelation == _itemId)
                      || (costSheetCalculationFactor.ItemCode == TableGroupAll::GroupId && costSheetCalculationFactor.ItemRelation == _itemGroupId)
                      || (costSheetCalculationFactor.ItemCode == TableGroupAll::All     && costSheetCalculationFactor.ItemRelation == '')  )
                   && costSheetCalculationFactor.InventSiteId == _siteId
                   && costSheetCalculationFactor.CostingVersionStatus == CostingVersionStatus::Current;
        }

        if (!_costSheetId || !_calculationNodeId)
            return costSheetCalculationFactor;

        if (_tmpCostSheetCalculationFactor && _tmpCostSheetCalculationFactor.isTmp())
        {
            costSheetCalculationFactor.setTmp();
            costSheetCalculationFactor.setTmpData(_tmpCostSheetCalculationFactor);
        }
        else
        {
            costSheetCalculationFactor.selectForUpdate(_forUpdate);
        }

        findPrice(_inventSiteId);

        if (_inventSiteId && !costSheetCalculationFactor)
        {
            findPrice('');
        }

        return costSheetCalculationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxOfLineId</Name>
				<Source><![CDATA[
    public static Line maxOfLineId(
        CostSheetNodeId            _calculationNodeId,
        TableGroupAll               _itemCode,
        CostItemRelation            _itemRelation,
        CostingVersionId              _versionId,
        FromDate                    _fromDate,
        InventSiteId                _inventSiteId,
        CostSheetCalculationFactor _tmpCostSheetCalculationFactor,
        CostSheetId                _costSheetId = CostSheetTable::defaultCostSheetTable().SheetId
        )
    {
        CostSheetCalculationFactor costSheetCalculationFactor;

        if (_tmpCostSheetCalculationFactor && _tmpCostSheetCalculationFactor.isTmp())
        {
            costSheetCalculationFactor.setTmp();
            costSheetCalculationFactor.setTmpData(_tmpCostSheetCalculationFactor);
        }

        select maxof(LineId) from costSheetCalculationFactor
            where costSheetCalculationFactor.SheetId      == _costSheetId
               && costSheetCalculationFactor.NodeId        == _calculationNodeId
               && costSheetCalculationFactor.ItemCode      == _itemCode
               && costSheetCalculationFactor.ItemRelation  == _itemRelation
               && costSheetCalculationFactor.VersionId     == _versionId
               && costSheetCalculationFactor.FromDate      == _fromDate
               && costSheetCalculationFactor.InventSiteId  == _inventSiteId;

        return costSheetCalculationFactor.LineId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOM</ConfigurationKey>
	<DeveloperDocumentation>@SYS123681</DeveloperDocumentation>
	<Label>@SYS112879</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemCode</TitleField1>
	<TitleField2>ItemRelation</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>IndexIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>IndexIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostingVersion</Name>
			<Label>@SYS1187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editCostSheetNodeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>indirectCostDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostingVersionRate</Name>
			<Label>@SYS4193</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editCostSheetNodeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>indirectCostDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostingVersionSurcharge</Name>
			<Label>@SYS105331</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editCostSheetNodeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>indirectCostDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FactorRate</Name>
			<Label>@SYS4193</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVersionName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FactorSurcharge</Name>
			<Label>@SYS105331</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VersionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVersionName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editCostSheetNodeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>indirectCostDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RateValue</Name>
			<Label>@SYS4193</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS36398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>blocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SurchargeValue</Name>
			<Label>@SYS105331</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidFor</Name>
			<Label>@SYS17743</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostSheetAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostingVersionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CostingVersionStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostItemRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LineId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Line</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostSheetNodeId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostSheetPercent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Reserved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SheetId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostSheetId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VersionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IndexIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SheetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NodeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CostingVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VersionId</Name>
					<Field>VersionId</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CostSheetNodeTableIndirect</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS115857</EntityRelationshipRole>
			<RelatedTable>CostSheetNodeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>CostSheetNodeType::CalculationSurcharge</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern_1</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>CostSheetNodeType::CalculationRate</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern_2</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>CostSheetNodeType::CalculationOutUnitBased</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern_3</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>CostSheetNodeType::CalculationInUnitBased</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern_4</Name>
					<RelatedField>Type</RelatedField>
					<ValueStr>CostSheetNodeType::CalculationPurchUnitBased</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NodeId</Name>
					<Field>NodeId</Field>
					<RelatedField>NodeId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SheetId</Name>
					<Field>SheetId</Field>
					<RelatedField>SheetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123682</EntityRelationshipRole>
			<RelatedTable>InventItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123682</EntityRelationshipRole>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>