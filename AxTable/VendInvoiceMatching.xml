<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceMatching</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceMatching extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initExpectedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the expected values and the price tolerance percentage for a <c>VendInvoiceMatching</c>
    ///    table.
    /// </summary>
    /// <param name="_parmTable">
    ///    The table for which the expected totals and tolerance percentages will be created.
    /// </param>
    /// <returns>
    ///    true if the values are initialized correctly; otherwise, false.
    /// </returns>
    protected boolean initExpectedValues(VendInvoiceInfoTable _parmTable)
    {
        // Only update if the invoice has not been deleted
        if (_parmTable)
        {
            // This is to solve tax integration update conflict issue. 
            // The data buffer is not passed during below construction, 
            // when tax integration is trying to update vendInvoiceInfoTable, it is updating a different buffer ref.
            // Then we will have update conflict. So we pass the original table buffer via below contex.
            using (var taxUpdateVendInvoiceInfoTableContext = TaxUpdateVendInvoiceInfoTableContext::construct())
            {
                taxUpdateVendInvoiceInfoTableContext.parmVendInvoiceInfoTable(_parmTable);

                PurchTotals purchTotals = PurchTotals_ParmTransExpected::construct(_parmTable, PurchUpdate::All, _parmTable.ParmId, '', _parmTable.Ordering);

                purchTotals.calc();

                if (purchTotals.recordListPurchLine().len() == 0)
                {
                    // There were no po-based lines, so there is no matching data
                    return false;
                }

                this.ExpectedBalance = purchTotals.purchBalance();
                this.ExpectedTotalDiscount = purchTotals.purchEndDisc();
                this.ExpectedMarkup = purchTotals.purchMarkup();
                this.ExpectedSalesTax = purchTotals.purchTaxTotal();
                this.ExpectedRoundOff = purchTotals.purchRoundOff();
                this.ExpectedDocumentAmount = purchTotals.purchTotalAmount();

                this.TotalPriceTolerancePercentage = VendTotalPriceTolerance::tolerancePercentage(_parmTable.OrderAccount);
                if (FeatureStateProvider::isFeatureEnabled(VendInvoiceTotalsMatchingDetailFeature::instance()))
                {
                    this.PriceTolerancePercentageForSubTotalAmount = VendTotalPriceTolerance::tolerancePercentageForSubTotalAmount(_parmTable.OrderAccount);
                    this.PriceTolerancePercentageForTotalDiscount = VendTotalPriceTolerance::tolerancePercentageForTotalDiscount(_parmTable.OrderAccount);
                    this.PriceTolerancePercentageForCharges = VendTotalPriceTolerance::tolerancePercentageForCharges(_parmTable.OrderAccount);
                    this.PriceTolerancePercentageForSalesTax = VendTotalPriceTolerance::tolerancePercentageForSalesTax(_parmTable.OrderAccount);
                    this.PriceTolerancePercentageForInvoiceAmount = VendTotalPriceTolerance::tolerancePercentageForInvoiceAmount(_parmTable.OrderAccount);
                    this.PriceToleranceAmountForInvoiceRoundOff = VendTotalPriceTolerance::toleranceAmountForInvoiceRoundOff(_parmTable.OrderAccount);
                }

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalPriceVarianceAboveToleranceForRoundOff</Name>
				<Source><![CDATA[
    public static boolean isTotalPriceVarianceAboveToleranceForRoundOff(AmountCur _orderRelatedRoundOffAmount, TotalPriceVarianceAmount _vendSpecificRoundOffAmount)
    {
        if (_orderRelatedRoundOffAmount == 0.0)
        {
            return false;
        }

        VendParameters vendParameters = vendParameters::find();
        AmountCur roundOffAmtToCompare = _vendSpecificRoundOffAmount ? _vendSpecificRoundOffAmount : vendParameters.PriceToleranceForRoundOff;

        if (_orderRelatedRoundOffAmount > roundOffAmtToCompare)
        {
            return true;
        }
        else if (abs(_orderRelatedRoundOffAmount) > roundOffAmtToCompare 
            && vendParameters.DisplayPriceMatchIconForRoundOff == DisplayTotalPriceMatchOption::GreaterOrLessThan)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPercentVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the percent of variance between the two amounts provided.
    /// </summary>
    /// <param name="_invoiceAmount">
    ///    The actual invoice amount to compare.
    /// </param>
    /// <param name="_expectedAmount">
    ///    The expected invoice amount to compare.
    /// </param>
    /// <param name="_negativeBalance">
    ///    A Boolean value that specifies whether this amount typically decreases the invoice total.
    /// </param>
    /// <returns>
    ///    The variance between the two amounts as a percentage.
    /// </returns>
    public static Percent calcPercentVariance(AmountCur _invoiceAmount, AmountCur _expectedAmount, boolean _negativeBalance = false)
    {
        PriceVariancePercent priceVariancePercent;

        //  NOTE: For the variance percentage, positive = bad; negative = good
        if (_invoiceAmount != _expectedAmount)
        {
            if (_expectedAmount == 0.0)
            {
                priceVariancePercent = Global::realMax();

                // Variance percentage should be negative (good) if:
                //   a) negative balance (like discount) value is positive, or
                //   b) positive balance (like tax) value is negative
                if ( (_negativeBalance && (_invoiceAmount > 0.0)) || (!_negativeBalance && (_invoiceAmount < 0.0)) )
                {
                    priceVariancePercent = priceVariancePercent * -1.0;
                }
            }
            else
            {
                priceVariancePercent = percent((_invoiceAmount - _expectedAmount), _expectedAmount);

                // Variance percentage should be reversed if:
                //   a) negative balance (like discount) expected value is positive, or
                //   b) positive balance (like tax) expected value is negative
                if ( (_negativeBalance && (_expectedAmount > 0.0)) || (!_negativeBalance && (_expectedAmount < 0.0)) )
                {
                    priceVariancePercent = priceVariancePercent * -1.0;
                }
            }
        }

        return priceVariancePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the expected invoice totals and tolerance percentages.
    /// </summary>
    /// <param name="_parmTable">
    /// A table from which the expected totals and tolerance percentages will be created.
    /// </param>
    /// <param name="_saveRecord">
    /// A Boolean value that indicates whether the current record is saved.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceMatching</c> record.
    /// </returns>
    public static VendInvoiceMatching create(VendInvoiceInfoTable _parmTable, boolean _saveRecord = true)
    {
        VendInvoiceMatching vendInvoiceMatching;

        // if feature is not enabled, just return
        if (VendParameters::find().UseTotalPriceMatching == NoYes::No)
        {
            return vendInvoiceMatching;
        }

        if (_parmTable.TableRefId != '')
        {
            vendInvoiceMatching.clear();
            if (vendInvoiceMatching.initExpectedValues(_parmTable))
            {
                vendInvoiceMatching.ParmId = _parmTable.ParmId;
                vendInvoiceMatching.TableRefId = _parmTable.TableRefId;
                if (_saveRecord)
                {
                    vendInvoiceMatching.insert();
                }
            }
        }
        return vendInvoiceMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsActive</Name>
				<Source><![CDATA[
    static boolean existsActive(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        return (VendInvoiceMatching::findActive(_parmId, _tableRefId) != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the invoice matching for the given <c>ParmId</c> and <c>TableRefId</c> fields.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> field to find.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> field to find.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceMatching</c> record.
    /// </returns>
    public static VendInvoiceMatching find(ParmId _parmId, TradeLineRefId _tableRefId, boolean _update = false)
    {
        VendInvoiceMatching vendInvoiceMatching;

        if (_update)
        {
            vendInvoiceMatching.selectForUpdate(_update);
        }

        select firstonly vendInvoiceMatching
            where vendInvoiceMatching.ParmId == _parmId
                && vendInvoiceMatching.TableRefId == _tableRefId;

        return vendInvoiceMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the invoice matching for the given <c>ParmId</c> and <c>TableRefId</c> fields.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> fields to find.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> fields to find.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceMatching</c> record.
    /// </returns>
    public static VendInvoiceMatching findActive(ParmId _parmId, TradeLineRefId _tableRefId, boolean _update = false)
    {
        VendInvoiceMatching vendInvoiceMatching;

        if ((_parmId != '') && (_tableRefId != ''))
        {
            vendInvoiceMatching = VendInvoiceMatching::find(_parmId, _tableRefId, _update);
        }

        return vendInvoiceMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSaved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the invoice matching for the given <c>TableRefId</c> field.
    /// </summary>
    /// <param name="_tableRefId">
    /// The <c>TableRefId</c> field to find.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceMatching</c> record.
    /// </returns>
    public static VendInvoiceMatching findSaved(TradeLineRefId _tableRefId, boolean _update = false)
    {
        VendInvoiceMatching vendInvoiceMatching;

        if (_tableRefId != '')
        {
            vendInvoiceMatching = VendInvoiceMatching::find('', _tableRefId, _update);
        }

        return vendInvoiceMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActiveVarianceApproved</Name>
				<Source><![CDATA[
    public static NoYes initActiveVarianceApproved(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceMatching savedInvoiceMatching, newInvoiceMatching;

        if (_vendInvoiceInfoTable.VarianceApproved == NoYes::Yes && _vendInvoiceInfoTable.ReCalculate)
        {
            // If the invoice is approved, but the PO's discount changed, unapprove the invoice
            savedInvoiceMatching = VendInvoiceMatching::findSaved(_vendInvoiceInfoTable.TableRefId);

            if (savedInvoiceMatching && newInvoiceMatching.initExpectedValues(_vendInvoiceInfoTable) &&
            savedInvoiceMatching.ExpectedTotalDiscount != newInvoiceMatching.ExpectedTotalDiscount)
            {
                _vendInvoiceInfoTable.clearVarianceApproved();
            }
        }

        return _vendInvoiceInfoTable.VarianceApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalPriceVarianceAboveTolerance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the provided total amounts have a variance larger than the tolerance.
    /// </summary>
    /// <param name="_invoiceAmount">
    ///    The actual invoice amount to be compared.
    /// </param>
    /// <param name="_expectedAmount">
    ///    The expected invoice amount to be compared.
    /// </param>
    /// <param name="_priceTolerancePercentage">
    ///    The percent of tolerance enabled.
    /// </param>
    /// <param name="_negativeBalance">
    ///    A Boolean value that specifies whether this amount typically decreases the invoice total.
    /// </param>
    /// <returns>
    ///    true if the variance between the amounts is larger than the tolerance; otherwise, false.
    /// </returns>
    public static boolean isTotalPriceVarianceAboveTolerance(AmountCur _invoiceAmount, AmountCur _expectedAmount, Percent _priceTolerancePercentage, boolean _negativeBalance = false)
    {
        PriceVariancePercent priceVariancePercent = VendInvoiceMatching::calcPercentVariance(_invoiceAmount, _expectedAmount, _negativeBalance);

        if (priceVariancePercent == 0.0)
        {
            return false;
        }
        else if (priceVariancePercent > _priceTolerancePercentage)
        {
            return true;
        }
        else if ((abs(priceVariancePercent) > _priceTolerancePercentage) && (VendParameters::find().DisplayTotalPriceMatchIcon == DisplayTotalPriceMatchOption::GreaterOrLessThan))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the invoice totals and tolerance percentages from one active invoice to another.
    /// </summary>
    /// <param name="_fromParmId">
    ///    The parameter ID of the old invoice.
    /// </param>
    /// <param name="_fromTableRefId">
    ///    The table reference ID of the old invoice.
    /// </param>
    /// <param name="_toParmId">
    ///    The parameter ID of the new invoice.
    /// </param>
    /// <param name="_toTableRefId">
    ///    The table reference ID of the new invoice.
    /// </param>
    public static void moveActive(ParmId _fromParmId, TradeLineRefId _fromTableRefId, ParmId _toParmId, TradeLineRefId _toTableRefId)
    {
        VendInvoiceMatching vendInvoiceMatching;

        // if feature is not enabled, just return
        if (VendParameters::find().UseTotalPriceMatching == NoYes::No)
        {
            return;
        }

        ttsbegin;
        vendInvoiceMatching = VendInvoiceMatching::findActive(_fromParmId, _fromTableRefId, true);

        if (vendInvoiceMatching)
        {
            vendInvoiceMatching.ParmId = _toParmId;
            vendInvoiceMatching.TableRefId = _toTableRefId;
            vendInvoiceMatching.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpectedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates expected values for the invoice.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    A <c>VendInvoiceInfoTable</c> record that represents the invoice.
    /// </param>
    /// <param name="_updateExpectedValues">
    ///    Indicates whether or not we need to update the expected <c>VendInvoiceMatching</c> records.
    ///    If automatic header matching is turned on, these values are updated regardless of this parameter value.
    /// </param>
    /// <param name="_prevParmId">
    ///    The previous <c>ParmId</c>, in case the invoice is transitioning from saved to active; optional.
    /// </param>
    public static void updateExpectedValues(VendInvoiceInfoTable _vendInvoiceInfoTable, boolean _updateExpectedValues = false, ParmId _prevParmId = '')
    {
        VendInvoiceMatching vendInvoiceMatching;

        if (!_updateExpectedValues && !VendParameters::find().editAutomaticHeaderMatching())
        {
            return;
        }

        if (_vendInvoiceInfoTable.TableRefId != '')
        {
            ttsbegin;

            if (prmisDefault(_prevParmId))
            {
                _prevParmId = _vendInvoiceInfoTable.ParmId;
            }

            vendInvoiceMatching = VendInvoiceMatching::find(_prevParmId, _vendInvoiceInfoTable.TableRefId, true);

            if (vendInvoiceMatching)
            {
                if (vendInvoiceMatching.initExpectedValues(_vendInvoiceInfoTable))
                {
                    vendInvoiceMatching.ParmId = _vendInvoiceInfoTable.ParmId;
                    vendInvoiceMatching.update();
                }
                else
                {
                    vendInvoiceMatching.delete();
                }
            }
            else
            {
                // VendInvoiceMatching record did not exist for some reason, create it
                VendInvoiceMatching::create(_vendInvoiceInfoTable);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpectedValuesForTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the expected totals for the invoice represented by the table and record IDs.
    /// </summary>
    /// <param name="_tableId">
    ///    The table ID of the line, sub-table, or header table that is a part of the invoice to be updated.
    /// </param>
    /// <param name="_recId">
    ///    The record ID of the line, sub-table, or header table record that is a part of the invoice to be
    ///    updated.
    /// <param name="_updateExpectedValues">
    ///    Indicates whether or not we need to update the expected <c>VendInvoiceMatching</c> records.
    ///    If automatic header matching is turned on, these values are updated regardless of this parameter value.
    /// </param>
    /// </param>
    public static void updateExpectedValuesForTable(TableId _tableId, RecId _recId, boolean _updateExpectedValues = false)
    {
        VendParameters vendParameters = VendParameters::find();
        VendInvoiceInfoTable parmTable;

        // if feature is not enabled we can just return.
        if (vendParameters.UseTotalPriceMatching == NoYes::No || (!_updateExpectedValues && !vendParameters.editAutomaticHeaderMatching()))
        {
            return;
        }

        switch (_tableId)
        {
            case (tableNum(VendInvoiceInfoLine)):
                parmTable = VendInvoiceInfoLine::findRecId(_recId).vendInvoiceInfoTable();
                break;

            case (tableNum(VendInvoiceInfoSubTable)):
                parmTable = VendInvoiceInfoSubTable::findRecId(_recId).vendInvoiceInfoTable();
                break;

            case (tableNum(VendInvoiceInfoTable)):
                parmTable = VendInvoiceInfoTable::findRecId(_recId);
                break;

            default:
                return;
        }

        VendInvoiceMatching::updateExpectedValues(parmTable, _updateExpectedValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>VendInvoiceMatching</c> records for a given invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> used to determine which <c>VendInvoiceMatching</c> to move.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceMatching</c> to move.
    /// </param>
    /// <param name="_newParmId">
    /// The new <c>ParmId</c> value; optional.
    /// </param>
    public static void updateParmId(ParmId _parmId, TradeLineRefId _tableRefId, ParmId _newParmId = '')
    {
        VendInvoiceMatching vendInvoiceMatching;

        vendInvoiceMatching.skipDataMethods(true);
        vendInvoiceMatching.skipEvents(true);
        vendInvoiceMatching.skipDatabaseLog(true);

        update_recordset vendInvoiceMatching setting ParmId = _newParmId
            where vendInvoiceMatching.ParmId == _parmId
                && vendInvoiceMatching.TableRefId == _tableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalPriceVarianceAboveToleranceForSubTotalAmount</Name>
				<Source><![CDATA[
    public static boolean isTotalPriceVarianceAboveToleranceForSubTotalAmount(AmountCur _invoiceAmount, AmountCur _expectedAmount, Percent _priceTolerancePercentage, boolean _negativeBalance = false)
    {
        PriceVariancePercent priceVariancePercent = VendInvoiceMatching::calcPercentVariance(_invoiceAmount, _expectedAmount, _negativeBalance);

        if (priceVariancePercent == 0.0)
        {
            return false;
        }
        else if (priceVariancePercent > _priceTolerancePercentage)
        {
            return true;
        }
        else if ((abs(priceVariancePercent) > _priceTolerancePercentage) && (VendParameters::find().DisplayPriceMatchIconForSubTotalAmount == DisplayTotalPriceMatchOption::GreaterOrLessThan))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalPriceVarianceAboveToleranceForTotalDiscount</Name>
				<Source><![CDATA[
    public static boolean isTotalPriceVarianceAboveToleranceForTotalDiscount(AmountCur _invoiceAmount, AmountCur _expectedAmount, Percent _priceTolerancePercentage, boolean _negativeBalance = false)
    {
        PriceVariancePercent priceVariancePercent = VendInvoiceMatching::calcPercentVariance(_invoiceAmount, _expectedAmount, _negativeBalance);

        if (priceVariancePercent == 0.0)
        {
            return false;
        }
        else if (priceVariancePercent > _priceTolerancePercentage)
        {
            return true;
        }
        else if ((abs(priceVariancePercent) > _priceTolerancePercentage) && (VendParameters::find().DisplayPriceMatchIconForTotalDiscount == DisplayTotalPriceMatchOption::GreaterOrLessThan))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalPriceVarianceAboveToleranceForCharges</Name>
				<Source><![CDATA[
    public static boolean isTotalPriceVarianceAboveToleranceForCharges(AmountCur _invoiceAmount, AmountCur _expectedAmount, Percent _priceTolerancePercentage, boolean _negativeBalance = false)
    {
        PriceVariancePercent priceVariancePercent = VendInvoiceMatching::calcPercentVariance(_invoiceAmount, _expectedAmount, _negativeBalance);

        if (priceVariancePercent == 0.0)
        {
            return false;
        }
        else if (priceVariancePercent > _priceTolerancePercentage)
        {
            return true;
        }
        else if ((abs(priceVariancePercent) > _priceTolerancePercentage) && (VendParameters::find().DisplayPriceMatchIconForCharges == DisplayTotalPriceMatchOption::GreaterOrLessThan))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalPriceVarianceAboveToleranceForSalesTax</Name>
				<Source><![CDATA[
    public static boolean isTotalPriceVarianceAboveToleranceForSalesTax(AmountCur _invoiceAmount, AmountCur _expectedAmount, Percent _priceTolerancePercentage, boolean _negativeBalance = false)
    {
        PriceVariancePercent priceVariancePercent = VendInvoiceMatching::calcPercentVariance(_invoiceAmount, _expectedAmount, _negativeBalance);

        if (priceVariancePercent == 0.0)
        {
            return false;
        }
        else if (priceVariancePercent > _priceTolerancePercentage)
        {
            return true;
        }
        else if ((abs(priceVariancePercent) > _priceTolerancePercentage) && (VendParameters::find().DisplayPriceMatchIconForSalesTax == DisplayTotalPriceMatchOption::GreaterOrLessThan))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalPriceVarianceAboveToleranceForInvoiceAmount</Name>
				<Source><![CDATA[
    public static boolean isTotalPriceVarianceAboveToleranceForInvoiceAmount(AmountCur _invoiceAmount, AmountCur _expectedAmount, Percent _priceTolerancePercentage, boolean _negativeBalance = false)
    {
        PriceVariancePercent priceVariancePercent = VendInvoiceMatching::calcPercentVariance(_invoiceAmount, _expectedAmount, _negativeBalance);

        if (priceVariancePercent == 0.0)
        {
            return false;
        }
        else if (priceVariancePercent > _priceTolerancePercentage)
        {
            return true;
        }
        else if ((abs(priceVariancePercent) > _priceTolerancePercentage) && (VendParameters::find().DisplayPriceMatchIconForInvoiceAmount == DisplayTotalPriceMatchOption::GreaterOrLessThan))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
	<DeveloperDocumentation>@SYS328524</DeveloperDocumentation>
	<Label>@SYS132044</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ExpectedBalance</TitleField1>
	<TitleField2>ExpectedDocumentAmount</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>AccountsPayable</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpectedDocumentAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedTotalDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalPriceTolerancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExpectedValues</Name>
			<Label>@SYS115395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpectedDocumentAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedTotalDiscount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedBalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalPriceTolerancePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedBalance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedDocumentAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedDocumentAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedMarkup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedMarkup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedRoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedSalesTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExpectedTotalDiscount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExpectedTotalDiscount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalPriceTolerancePercentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForSubTotalAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<Label>@SYS25311</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForTotalDiscount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<Label>@SYS6465</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForCharges</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<Label>@SYS114608</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<Label>@SYS334003</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceTolerancePercentageForInvoiceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceTolerancePercentage</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceToleranceAmountForInvoiceRoundOff</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TotalPriceVarianceAmount</ExtendedDataType>
			<FeatureClass>VendInvoiceTotalsMatchingDetailFeature</FeatureClass>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@AccountsPayable:VendInvoiceMatchingTotalsRoundOff</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_VendInvoiceInfoTable</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_PurchParmTable</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendInvoiceMatching</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TableRefIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>