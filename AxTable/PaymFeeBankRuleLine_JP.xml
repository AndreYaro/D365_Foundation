<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymFeeBankRuleLine_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymFeeBankRuleLine_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndAdjustCompareValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts a filled compare value that is determined by a field type.
    /// </summary>
    /// <param name="_type">
    /// The field type.
    /// </param>
    /// <param name="_value">
    /// The comparing value.
    /// </param>
    /// <returns>
    /// The adjusted value.
    /// </returns>
    private PaymFeeBankRuleValue_JP checkAndAdjustCompareValue(
        Types _type,
        PaymFeeBankRuleValue_JP _value)
    {
        PaymFeeBankRuleValue_JP adjustedValue;
        DictField   dictField;
        DictEnum    dictEnum;

        adjustedValue = _value;
        switch (_type)
        {
            case Types::Date:
                if (!str2Date(_value, -1))
                {
                    adjustedValue = '';
                }
                break;

            case Types::Real:
                try
                {
                    System.Convert::ToDouble(_value);
                }
                catch
                {
                    adjustedValue = '';
                }
                break;

            case Types::Integer:
                try
                {
                    System.Convert::ToInt32(_value);
                }
                catch
                {
                    adjustedValue = '';
                }
                break;

            case Types::Int64:
                try
                {
                    System.Convert::ToInt64(_value);
                }
                catch
                {
                    adjustedValue = '';
                }
                break;

            case Types::Enum:
                dictField = new DictField(this.CustVendTableId, this.CustVendFieldId);
                dictEnum = new DictEnum(dictField.enumId());
                adjustedValue = dictEnum.value2Name(dictEnum.name2Value(_value));
                break;
        }

        return adjustedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCompanyFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits a comparing field label for a bank document.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set field label value.
    /// </param>
    /// <param name="_value">
    /// A field label value.
    /// </param>
    /// <returns>
    /// The field label value.
    /// </returns>
    public edit FieldLabel editCompanyFieldLabel(
        boolean _set,
        FieldLabel _value)
    {
        if (_set)
        {
            this.CompanyFieldId = this.getFieldIdFromFieldLabel(this.CompanyTableId, _value);
            this.modifiedFieldValue(fieldStr(PaymFeeBankRuleLine_JP, CompanyFieldId));
        }

        return fieldId2pname(this.CompanyTableId, this.CompanyFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCustVendFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits a comparing field label for a bank document.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether to set field label value.
    /// </param>
    /// <param name="_value">
    /// A field label value.
    /// </param>
    /// <returns>
    /// The field label value.
    /// </returns>
    public edit FieldLabel editCustVendFieldLabel(
        boolean _set,
        FieldLabel _value)
    {
        if (_set)
        {
            this.CustVendFieldId = this.getFieldIdFromFieldLabel(this.CustVendTableId, _value);
            this.modifiedFieldValue(fieldStr(PaymFeeBankRuleLine_JP, CustVendFieldId));
        }

        return fieldId2pname(this.CustVendTableId, this.CustVendFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFromFieldLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a field ID that is based on a specified table and field label either by using a look up
    /// list or the manual input.
    /// </summary>
    /// <param name="_tableId">
    /// The specified table ID.
    /// </param>
    /// <param name="_fieldLabel">
    /// The specified field label.
    /// </param>
    /// <returns>
    /// The field ID.
    /// </returns>
    /// <remarks>
    /// The assumption is that the field label is unique; otherwise, returns the first matched field Id.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// There is no field that has the specified field label.
    /// </exception>
    private FieldId getFieldIdFromFieldLabel(
        TableId     _tableId,
        FieldLabel  _fieldLabel)
    {
        DictTable   dictTable = new DictTable(_tableId);
        DictField   dictField;
        Counter     counter;
        FieldId     fieldId;

        if (_fieldLabel)
        {
            for (counter = 1; counter <= dictTable.fieldCnt(); counter++)
            {
                dictField = new DictField(_tableId, dictTable.fieldCnt2Id(counter));
                //prerequisite is the field label is unique
                if (dictField.label() == _fieldLabel)
                {
                    fieldId = dictTable.fieldCnt2Id(counter);
                    break;
                }
            }

            if (!fieldId)
            {
                throw error("@GLS222256");
            }
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the base type of a <c>FieldId</c> or <c>CompareFieldId</c> value.
    /// </summary>
    /// <param name="_isCompanyField">
    /// Indicates whether to get the base type of <c>CompanyTableId</c> .
    /// </param>
    /// <returns>
    /// The base type.
    /// </returns>
    public Types getFieldType(boolean _isCompanyField = false)
    {
        TableId     tableId;
        FieldId     fieldId;
        DictField   dictField;

        if (_isCompanyField)
        {
            tableId = this.CompanyTableId;
            fieldId = this.CompanyFieldId;
        }
        else
        {
            tableId = this.CustVendTableId;
            fieldId = this.CustVendFieldId;
        }

        Debug::assert(fieldId);

        dictField = new DictField(tableId, fieldId);

        return dictField.baseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        // Currently the fields are limited to those in PaymFeeBankRuleView_JP view.
        this.CustVendTableId = tableNum(PaymFeeBankRuleView_JP);
        this.CompanyTableId = tableNum(PaymFeeBankRuleView_JP);
        this.LineId = newGuid();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperatorForStringTypeOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an operator can be used for string type only.
    /// </summary>
    /// <returns>
    /// true if the operator is for string type only; otherwise, false.
    /// </returns>
    private boolean isOperatorForStringTypeOnly()
    {
        return (this.Relation == BankReconciliationMatchOperatorType::Contains
            || this.Relation  == BankReconciliationMatchOperatorType::BeginWith
            || this.Relation  == BankReconciliationMatchOperatorType::EndWith);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean     isAdjustFormatNeeded = false;

        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(PaymFeeBankRuleLine_JP, Value):
                this.CompanyFieldId = 0;
                isAdjustFormatNeeded = true;
                break;

            case fieldStr(PaymFeeBankRuleLine_JP, CompanyFieldId):
                this.Value = '';
                break;

            case fieldStr(PaymFeeBankRuleLine_JP, CustVendFieldId):
                isAdjustFormatNeeded = true;
                break;
        }

        // Ajust the format of the input value .
        if (isAdjustFormatNeeded && this.Value && this.CustVendFieldId)
        {
            this.Value = this.checkAndAdjustCompareValue(this.getFieldType(), this.Value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // either company field or value must be specified.
        if (ret && !this.CompanyFieldId && !this.Value)
        {
            ret = checkFailed("@GLS222257");
        }

        // CustVend field and company field (if specified) must be string type for string operator
        if (ret &&this.isOperatorForStringTypeOnly())
        {
            if (this.getFieldType() != Types::String || (this.CompanyFieldId && this.getFieldType(true) != Types::String))
            {
                ret = checkFailed("@GLS222287");
            }
        }

        // both custvend field and company field (if specified) must be of the same type
        if (ret
            && this.CompanyFieldId
            && this.getFieldType() != this.getFieldType(true))
        {
            ret = checkFailed(strFmt(
                "@GLS222301",
                fieldId2pname(this.CustVendTableId, this.CustVendFieldId),
                fieldId2pname(this.CompanyTableId, this.CompanyFieldId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!this.LineId)
        {
            this.LineId = newGuid();
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>CN,JP</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4003235</DeveloperDocumentation>
	<FormRef>PaymFeeBankRule_JP</FormRef>
	<Label>@SYS4003240</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustVendFieldId</TitleField1>
	<TitleField2>CustVendTableId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Bank</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Relation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymFeeBankRule_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymFeeBankRule_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Relation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyField</Name>
			<Label>@SYS4003245</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustVendGroup</Name>
			<Label>@SYS4003243</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendFieldId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>LineId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysGuid</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CompanyFieldId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Label>@SYS4003245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CompanyTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Label>@SYS40298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CustVendFieldId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefFieldId</ExtendedDataType>
			<Label>@SYS4003243</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>CustVendTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
			<Label>@SYS40298</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PaymFeeBankRule_JP</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Relation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymFeeBankRuleOperatorType_JP</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>BankReconciliationMatchOperatorType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Value</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PaymFeeBankRuleValue_JP</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymFeeBankRule_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PaymFeeBankRule_JP</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymFeeBankRule_JP</Name>
					<Field>PaymFeeBankRule_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>