<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OperationTypeList_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class OperationTypeList_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean               ret = super();
        OperationTypeList_RU  operationTypeList;
        ;

        if (ret && this.OperationTypeDefault != FactureOperationTypeDefault_RU::None)
        {
            select firstonly RecId from operationTypeList
                    where operationTypeList.OperationTypeDefault == this.OperationTypeDefault
                       && operationTypeList.RecId                != this.RecId;

            if (operationTypeList.RecId)
            {
                ret = checkFailed(strFmt("@SYS4081925", this.OperationTypeDefault));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(OperationTypeListCode_RU _code)
    {
        if (!OperationTypeList_RU::exist(_code))
            return checkFailed(strFmt(OperationTypeList_RU::txtNotExist(), _code));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOperationTypeCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that specified codes exist.
    /// </summary>
    /// <param name="_operationTypeCodes">
    /// List of operation codes.
    /// </param>
    /// <returns>
    /// True, if all codes exist.
    /// </returns>
    public static boolean checkOperationTypeCodes(FactureOperationTypeCodes_RU _operationTypeCodes)
    {
        #define.correctingFactureSeparator('\\')
        FactureOperationTypeCodesDelimiter_RU   separator;
        str                                     operationCode;
        container                               con;
        int                                     i, len;
        boolean                                 ret = true;
        
        container splitStringBySeparators(str _s, str _separators)
        {
            int         startPos = 1, setPos, slen = strLen(_s);
            str         part;
            container   splitCon;

            do
            {
                setPos    =  strfind(_s, _separators, startPos, slen);
                part =  substr(_s, startPos, setPos ? setPos - startPos : slen + 1 - startPos);

                splitCon += part;

                startPos =  setPos + 1;
            }
            while (setPos);

            return splitCon;
        }

        if (!_operationTypeCodes)
        {
            return true;
        }

        separator = SalesPurchBookDataMap_RU::factureOperationTypeCodesDelimiter_RU();

        con = splitStringBySeparators(_operationTypeCodes, separator + #correctingFactureSeparator);
        len = conLen(con);

        for (i = 1; i <= len; i++)
        {
            operationCode   = conPeek(con, i);
            ret             = OperationTypeList_RU::checkExist(operationCode) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeByDefaultType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for <c>OperationTypeListCode_RU</c> code by given <c>FactureOperationTypeDefault_RU</c>
    /// </summary>
    /// <param name="_operationTypeDefault">
    /// <c>FactureOperationTypeDefault_RU</c> value.
    /// </param>
    /// <returns>
    /// <c>OperationTypeListCode_RU</c> value.
    /// </returns>
    static OperationTypeListCode_RU codeByDefaultType(FactureOperationTypeDefault_RU  _operationTypeDefault)
    {
        OperationTypeList_RU  operationTypeList;
        ;

        if (_operationTypeDefault != FactureOperationTypeDefault_RU::None)
        {
            select firstonly Code from operationTypeList
                where operationTypeList.OperationTypeDefault == _operationTypeDefault;
        }

        return operationTypeList.Code;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if record with given code exists in <c>OperationTypeList_RU</c> table.
    /// </summary>
    /// <param name="_code">
    /// <c>OperationTypeListCode_RU</c> to be checked.
    /// </param>
    /// <returns>
    /// True, if record exists, otherwise false.
    /// </returns>
    public static boolean exist(OperationTypeListCode_RU _code)
    {
        return _code
            && (select firstonly RecId from operationTypeList_RU
                where operationTypeList_RU.Code == _code).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for <c>OperationTypeList_RU</c> record by given code.
    /// </summary>
    /// <param name="_code">
    /// Code to look for.
    /// </param>
    /// <param name="_forupdate">
    /// Specify true, if record should be selected for update.
    /// </param>
    /// <returns>
    /// <c>OperationTypeList_RU</c> record.
    /// </returns>
    static OperationTypeList_RU find(OperationTypeListCode_RU _code, boolean _forupdate = false)
    {
        OperationTypeList_RU  operationTypeList;
        ;

        operationTypeList.selectForUpdate(_forupdate);

        if (_code)
        {
            select firstonly operationTypeList
                where operationTypeList.Code == _code;
        }

        return operationTypeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDefaultType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches <c>OperationTypeList_RU</c> record by given default operation type.
    /// </summary>
    /// <param name="_operationTypeDefault">
    /// <c>FactureOperationTypeDefault_RU</c> value.
    /// </param>
    /// <returns>
    /// Found <c>OperationTypeList_RU</c> record.
    /// </returns>
    static OperationTypeList_RU findByDefaultType(FactureOperationTypeDefault_RU  _operationTypeDefault)
    {
        OperationTypeList_RU  operationTypeList;
        ;

        if (_operationTypeDefault != FactureOperationTypeDefault_RU::None)
        {
            select firstonly operationTypeList
                where operationTypeList.OperationTypeDefault == _operationTypeDefault;
        }

        return operationTypeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInheritable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if specified operation type list code may be inherited.
    /// </summary>
    /// <param name="_code">
    /// Code to be checked.
    /// </param>
    /// <returns>
    /// True if code can be inherited, otherwise false.
    /// </returns>
    static boolean isInheritable(OperationTypeListCode_RU _code)
    {
        return OperationTypeList_RU::find(_code).Derive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return strFmt("@GLS105985", "%1", tableId2pname(tableNum(OperationTypeList_RU)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4081881</DeveloperDocumentation>
	<Label>@SYS4081809</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Code</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CodeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>CodeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS80470</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@GLS100606</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OperationTypeDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Derive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OperationTypeListCode_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Derive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS40134</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OperationTypeListName_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OperationTypeDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FactureOperationTypeDefault_RU</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DefaultTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OperationTypeDefault</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>