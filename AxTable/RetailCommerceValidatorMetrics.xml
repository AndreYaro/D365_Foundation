<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorMetrics</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorMetrics extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMetricsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate metrics list.
    /// Note:
    /// * MetricIds must have a maximum of 50 chraracters
    /// </summary>
    /// <returns>The map containing all metrics types and their descriptions.</returns>
    public static Map getMetricsList()
    {
        Map validationMetrics = new Map(Types::String, Types::Container);

        // General counters
        //                                                                                 <MetricId>                                                                      <KPIDescription>                                                               <Validation>    <BatchJob>  <Rule> <AutoUpdatedByMetricId>
        validationMetrics.insert(/*Number of validations created                        */ "@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId"          , ["@Retail:RetailCommerceValidatorNumberOfValidationsCreatedMetricId"          , false         , false     , false , '']);
        validationMetrics.insert(/*Number of tests created                              */ "@Retail:RetailCommerceValidatorValidationTotalTestsMetricId"                , ["@Retail:RetailCommerceValidatorValidationTotalTestsMetricId"                , false         , false     , false , '']);
        validationMetrics.insert(/*Number of Tests executed                             */ "@Retail:RetailCommerceValidatorValidationTestExecutionMetricId"             , ["@Retail:RetailCommerceValidatorValidationTestExecutionMetricId"             , false         , false     , false , '']);
        validationMetrics.insert(/*Number of Loaded Rules                               */ "@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId"                 , ["@Retail:RetailCommerceValidatorNumberOfLoadedRulesMetricId"                 , false         , false     , false , '']);
        validationMetrics.insert(/*Number of Loaded Entities                            */ "@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId"              , ["@Retail:RetailCommerceValidatorNumberOfLoadedEntitiesMetricId"              , false         , false     , false , '']);
        validationMetrics.insert(/*Number of Loaded Metrics                             */ "@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId"                     , ["@Retail:RetailCommerceValidatorNumberOfLoadedMetricsId"                     , false         , false     , false , '']);
        validationMetrics.insert(/*Number of entity records detected (All)              */ "@Retail:RetailCommerceValidatorNumberOfRecordsDetectedAll"                  , ["@Retail:RetailCommerceValidatorNumberOfRecordsDetectedAll"                  , false         , false     , false , "@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation"]);
        validationMetrics.insert(/*Number of Retail stores validated                    */ "@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated"               , ["@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated"               , false         , false     , false , '']);
        validationMetrics.insert(/*Number of Online stores validated                    */ "@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated"               , ["@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated"               , false         , false     , false , '']);
        validationMetrics.insert(/*Number of Retail stores validated                    */ "@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated"                 , ["@Retail:RetailCommerceValidatorNumberOfRetailStoresCreated"                 , false         , false     , false , '']);
        validationMetrics.insert(/*Number of Online stores validated                    */ "@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated"                 , ["@Retail:RetailCommerceValidatorNumberOfOnlineStoresCreated"                 , false         , false     , false , '']);
        validationMetrics.insert(/*Number of entity/rules combinations                  */ "@Retail:RetailCommerceValidatorNumberOfEntityRulesCombination"              , ["@Retail:RetailCommerceValidatorNumberOfEntityRulesCombination"              , false         , false     , false , "@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation"]);

        // Validation counters
        validationMetrics.insert(/*Total of issues                                      */ "@Retail:RetailCommerceValidatorGeneralCounterMetricId"                      , ["@Retail:RetailCommerceValidatorGeneralCounterMetricId"                      , false         , false     , false , "@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId"]);
        validationMetrics.insert(/*Total of issues per rule                             */ "@Retail:RetailCommerceValidatorCounterPerRuleMetricId"                      , ["@Retail:RetailCommerceValidatorCounterPerRuleMetricId"                      , false         , false     , true  , "@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId"]);
        validationMetrics.insert(/*Total of issues per validation                       */ "@Retail:RetailCommerceValidatorCounterPerValidationMetricId"                , ["@Retail:RetailCommerceValidatorCounterPerValidationMetricId"                , true          , true      , false , "@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId"]);
        validationMetrics.insert(/*Total of issues per validation & rule                */ "@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId"            , ["@Retail:RetailCommerceValidatorCounterPerValidationRuleMetricId"            , true          , true      , true  , '']);
        validationMetrics.insert(/*Number of entity records detected (Per validation)   */ "@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation"        , ["@Retail:RetailCommerceValidatorNumberOfRecordsDetectedPerValidation"        , true          , true      , false , '']);
        validationMetrics.insert(/*Number of entity/rules combinations (Per validation) */ "@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation" , ["@Retail:RetailCommerceValidatorNumberOfEntityRulesCombinationPerValidation" , true          , true      , false , '']);

        // Store counters
        validationMetrics.insert(/*Total stores                                         */ "@Retail:RetailCommerceValidatorTotalStoresMetricID"                         , ["@Retail:RetailCommerceValidatorTotalStoresMetricID"                         , false         , false     , false , '']);
        validationMetrics.insert(/*Total retail stores                                  */ "@Retail:RetailCommerceValidatorTotalRetailStoresMetricId"                   , ["@Retail:RetailCommerceValidatorTotalRetailStoresMetricId"                   , false         , false     , false , '']);
        validationMetrics.insert(/*Total online stores                                  */ "@Retail:RetailCommerceValidatorTotalOnlineStoresMetricId"                   , ["@Retail:RetailCommerceValidatorTotalOnlineStoresMetricId"                   , false         , false     , false , '']);
        validationMetrics.insert(/*Validated stores                                     */ "@Retail:RetailCommerceValidatorValidatedStoresMetricId"                     , ["@Retail:RetailCommerceValidatorValidatedStoresMetricId"                     , false         , false     , false , '']);
        validationMetrics.insert(/*Validated online stores                              */ "@Retail:RetailCommerceValidatorValidatedOnlineStoresMetricId"               , ["@Retail:RetailCommerceValidatorValidatedOnlineStoresMetricId"               , false         , false     , false , '']);

        return validationMetrics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// To load all the Metrics types
    /// </summary>
    /// <returns>The number of metrics created.</returns>
    public static int64 load()
    {
        return RetailCommerceValidatorMetrics::createMetricTypes(RetailCommerceValidatorMetrics::getMetricsList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMetricTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create Metrics types.
    /// </summary>
    /// <param name = "_metricsList">The Metric list map.</param>
    /// <returns>the number of metrics created.</returns>
    private static int64 createMetricTypes(Map _metricsList)
    {
        System.Exception exception;
        MapEnumerator  mapEnumerator = _metricsList.getEnumerator();
        RetailCommerceValidatorParameters parameters = RetailCommerceValidatorParameters::find();
        int counter = 0;

        try
        {
            ttsbegin;
            while (mapEnumerator.moveNext())
            {
                RetailCommerceValidatorMetricId searchKey = mapEnumerator.currentKey();
                RetailCommerceValidatorMetrics  retailCommerceValidatorMetrics = RetailCommerceValidatorMetrics::find(searchKey, true);
            
                retailCommerceValidatorMetrics.MetricId = mapEnumerator.currentKey();
                retailCommerceValidatorMetrics.KPIDescription = conPeek(mapEnumerator.currentValue(), 1);
                retailCommerceValidatorMetrics.saveValidationId = conPeek(mapEnumerator.currentValue(), 2);
                retailCommerceValidatorMetrics.saveBatchJobId = conPeek(mapEnumerator.currentValue(), 3);
                retailCommerceValidatorMetrics.saveRuleId = conPeek(mapEnumerator.currentValue(), 4);
                retailCommerceValidatorMetrics.AutoUpdateFromMetricId = conPeek(mapEnumerator.currentValue(), 5);

                if (retailCommerceValidatorMetrics)
                {
                    retailCommerceValidatorMetrics.update();
                }
                else
                {
                    retailCommerceValidatorMetrics.insert();
                    counter++;
                }
            }
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry('', strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorMetrics), 'createMetricTypes'), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry('', strFmt("@Retail:RetailCommerceValidatorInsertException", tableStr(RetailCommerceValidatorMetrics), 'createMetricTypes'), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record on the <c>RetailCommerceValidatorMetrics</c> table.
    /// </summary>
    /// <param name = "_metricId">The MetricId to be found.</param>
    /// <param name = "_forUpdate">Select for update? (Y/N). Default false.</param>
    /// <returns>A table buffer from <c>RetailCommerceValidatorMetrics</c> table.</returns>
    public static RetailCommerceValidatorMetrics find(RetailCommerceValidatorMetricId _metricId, boolean _forUpdate = false)
    {
        RetailCommerceValidatorMetrics retailCommerceValidatorMetrics;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        if (_metricId)
        {
            try
            {
                if (_forUpdate && !parameters.UsePessimisticLocks)
                {
                    select forupdate retailCommerceValidatorMetrics where retailCommerceValidatorMetrics.MetricId == _metricId;
                }
                else if (_forUpdate && parameters.UsePessimisticLocks)
                {
                    select pessimisticlock retailCommerceValidatorMetrics where retailCommerceValidatorMetrics.MetricId == _metricId;
                }
                else
                {
                    select retailCommerceValidatorMetrics where retailCommerceValidatorMetrics.MetricId == _metricId;
                }
            }
            catch (exception)
            {
                if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
                {
                    RetailCommerceValidatorExceptions::logRetry('', tableStr(RetailCommerceValidatorMetrics), xSession::currentRetryCount(), false, exception);
                }
                else
                {
                    RetailCommerceValidatorExceptions::logRetry('', tableStr(RetailCommerceValidatorMetrics), xSession::currentRetryCount(), true, exception);
                    retry;
                }
            }
        }

        return retailCommerceValidatorMetrics;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@Retail:RetailCommerceValidatorMetricsDevDocs</DeveloperDocumentation>
	<Label>@Retail:Metrics</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>MetricId</TitleField1>
	<TitleField2>KPIDescription</TitleField2>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MetricId</Name>
			<ExtendedDataType>RetailCommerceValidatorMetricId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KPIDescription</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYP230376</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>saveValidationId</Name>
			<Label>@Retail:RetailCommerceValidatorMetricSaveValidationId</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>saveBatchJobId</Name>
			<Label>@Retail:RetailCommerceValidatorMetricSavebatchJobId</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>saveRuleId</Name>
			<Label>@Retail:RetailCommerceValidatorMetricSaveRuleId</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AutoUpdateFromMetricId</Name>
			<ExtendedDataType>RetailCommerceValidatorMetricId</ExtendedDataType>
			<Label>@Retail:RetailCommerceValidatorMetricAutoUpdate</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>MetricIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MetricId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>