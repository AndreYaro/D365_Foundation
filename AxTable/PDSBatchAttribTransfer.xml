<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBatchAttribTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PDSBatchAttribTransfer extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating that this record is active.
    /// </summary>
    /// <returns>
    /// true if no other record for same value is active; otherwise, false.
    /// </returns>
    private boolean checkActive()
    {
        PDSBatchAttribTransfer  transfer;
        boolean                 ret = true;

        if (InventTable::find(this.EndItemId).PDSPotencyAttribRecording == PDSPotencyAttribRecordingEnum::Quality)
        {
            return checkFailed(strfmt("@PSC239", this.EndItemId));
        }

        select firstonly RecId, RawItemId
            from transfer
            where transfer.BOMId             == this.BOMId
                && transfer.Active
                && transfer.PdsBatchAttribId == this.PdsBatchAttribId
                && transfer.EndItemId        == this.EndItemId
                && transfer.RecId            != this.RecId;

        if (transfer)
        {
            return checkFailed(strfmt("@PSC222", this.PdsBatchAttribId, transfer.RawItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTolerance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the minimum, maximum, and multiple batch attribute values for both the raw and end item have matching tolerances.
    /// </summary>
    /// <returns>
    /// true if the batch attribute specifications are compatibile; otherwise, false.
    /// </returns>
    public boolean checkTolerance()
    {
        BOMVersion                      version = this.endItemVersion();
        PdsBatchAttrib                  batchAttrib;
        PdsBatchAttribMin               rawMin;
        PdsBatchAttribMin               endMin;
        PdsBatchAttribMax               rawMax;
        PdsBatchAttribMax               endMax;
        PdsBatchAttribMultiple          rawMultiple;
        PdsBatchAttribMultiple          endMultiple;
        PdsBatchAttribToleranceAction   rawAction;
        PdsBatchAttribToleranceAction   endAction;
        boolean                         ret = true;
        boolean                         breaksEndItemRange = false;

        if (!version)
        {
            return ret;
        }

        batchAttrib = PdsBatchAttrib::find(this.PdsBatchAttribId);

        if (!batchAttrib
            || (batchAttrib.PdsBatchAttribType      != PdsBatchAttribType::Integer
                && batchAttrib.PdsBatchAttribType   != PdsBatchAttribType::Realnumber))
        {
            return ret;
        }

        [rawMin, rawMax, rawAction, rawMultiple] = batchAttrib.getAttribRange(this.RawItemId);
        [endMin, endMax, endAction, endMultiple] = batchAttrib.getAttribRange(this.EndItemId);

        if (rawMin < endMin)
        {
            breaksEndItemRange = !checkFailed("@PSC192");
        }

        if (rawMin > endMax)
        {
            breaksEndItemRange = !checkFailed("@PSC193");
        }

        if (rawMax < endMin)
        {
            breaksEndItemRange = !checkFailed("@PSC194");
        }

        if (rawMax > endMax)
        {
            breaksEndItemRange = !checkFailed("@PSC212");
        }

        //
        // the warning should be shown whenever
        // but should only block the association of BatchInheritance
        // if the tolerance action of the end item is "not allowed"
        //
        if (breaksEndItemRange && (endAction == PdsBatchAttribToleranceAction::NotAllowed))
        {
            ret = false;
        }

        if (ret && rawMultiple < endMultiple)
        {
            ret = checkFailed("@PSC195");
        }

        if (ret && rawMultiple != 0 && decround(rawMultiple / endMultiple, 0) != (rawMultiple / endMultiple))
        {
            ret = checkFailed("@PSC196");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endItemVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record in the <c>BOMVersion</c> table related to the referenced BOM.
    /// </summary>
    /// <returns>
    /// The first record of the <c>BOMVersion</c> table found for the referenced BOM.
    /// </returns>
    public BOMVersion endItemVersion()
    {
        BOMVersion version;

        select firstonly version
            where version.BOMId == this.BOMId;

        return version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inherited attribute value for a given production order and transaction date.
    /// </summary>
    /// <param name="_prodId">
    /// The production order or batch order for which the value is to be fetched.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date the batch was created.
    /// </param>
    /// <returns>
    /// The batch value that will be inherited for the current attribute or an empty string if no value could be found.
    /// </returns>
    public PdsBatchAttribValue fromValue(
        ProdId      _prodId,
        TransDate   _transDate)
    {
        InventTrans             inventTrans;
        ProdTableJour           prodTableJour;
        PdsBatchAttribValue     fromValue;

        while select inventTrans
            order by DatePhysical
            where !inventTrans.PackingSlipReturned
                && inventTrans.DatePhysical <= _transDate
                && inventTrans.ItemId       == this.RawItemId
        exists join prodTableJour
            where prodTableJour.ProdId          == _prodId
                && prodTableJour.JournalType    == ProdJourType::Release
                && prodTableJour.TransDate      == inventTrans.DatePhysical
                && prodTableJour.Voucher        == inventTrans.VoucherPhysical
        {
            fromValue = PdsBatchAttributes::find(this.RawItemId, inventTrans.inventBatchId(), this.PdsBatchAttribId).PdsBatchAttribValue;

            if (fromValue)
            {
                return fromValue;
            }
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field.
    /// </param>
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PDSBatchAttribTransfer, Active):
                if (this.Active && !this.checkTolerance())
                {
                    this.Active = false;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionTypeDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the production type of the end item.
    /// </summary>
    /// <returns>
    /// A value of the <c>ProductionType</c> of the end item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PmfProductType productionTypeDisplay()
    {
        return InventTable::find(this.EndItemId).PmfProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(PDSBatchAttribTransfer, Active):
                if (ret && this.Active)
                {
                    ret = this.checkActive();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the record exists in the <c>PDSBatchAttribTransfer</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value to search for.
    /// </param>
    /// <param name="_endItemId">
    /// The <c>ItemId</c> value of the end item of the BOM.
    /// </param>
    /// <param name="_attribId">
    /// The <c>PDSBatchAttribId</c> value of the attribute desired.
    /// </param>
    /// <returns>
    /// true if the record exists in the <c>PDSBatchAttribTransfer</c> table; otherwise, false.
    /// </returns>
    public static boolean exist(
        RecId               _recId,
        ItemId              _endItemId,
        PdsBatchAttribId    _attribId)
    {
        return (select PDSBatchAttribTransfer
                    where PDSBatchAttribTransfer.BOMRefRecId        == _recId
                        && PDSBatchAttribTransfer.EndItemId         == _endItemId
                        && PDSBatchAttribTransfer.PdsBatchAttribId  == _attribId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveFromBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if there is an active transfer record for the forumla line.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> of the record in the <c>BOM</c> table associated with the attribute.
    /// </param>
    /// <returns>
    /// true if there is at least one active transfer; otherwise, false.
    /// </returns>
    public static boolean existActiveFromBOM(RefRecId _recId)
    {
        return (select PDSBatchAttribTransfer
                    where PDSBatchAttribTransfer.BOMRefRecId == _recId
                        && PDSBatchAttribTransfer.Active).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record of the <c>PDSBatchAttribTransfer</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> for a specific record in the <c>PDSBatchAttribTransfer</c> table.
    /// </param>
    /// <param name="_endItemId">
    /// The <c>ItemId</c> value of the end item.
    /// </param>
    /// <param name="_attribId">
    /// The <c>PdsBatchAttribId</c> value of the record to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    /// The found record of the <c>PDSBatchAttribTransfer</c> table or an empty buffer if no such record exists.
    /// </returns>
    public static PDSBatchAttribTransfer find(
        RefRecId            _recId,
        ItemId              _endItemId,
        PdsBatchAttribId    _attribId,
        boolean             _forUpdate = false)
    {
        PDSBatchAttribTransfer batchAttribTransfers;

        if (_forUpdate)
        {
            batchAttribTransfers.selectForUpdate(true);
        }

        select firstonly batchAttribTransfers
            where batchAttribTransfers.BOMRefRecId          == _recId
                && batchAttribTransfers.EndItemId           == _endItemId
                && batchAttribTransfers.PdsBatchAttribId    == _attribId;

        return batchAttribTransfers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active record of the <c>PDSBatchAttribTransfer</c> table based on the given key values.
    /// </summary>
    /// <param name="_bomId">
    /// The <c>BOMId</c> value for the end item formula.
    /// </param>
    /// <param name="_endItemId">
    /// The <c>ItemId</c> value of the manufactured end item.
    /// </param>
    /// <param name="_attribId">
    /// The <c>PdsBatchAttribId</c> value of the record to retrieve.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that determines if the record should be locked for update; optional.
    /// </param>
    /// <returns>
    /// The found record of the <c>PDSBatchAttribTransfer</c> table or an empty buffer if no such record exists.
    /// </returns>
    public static PDSBatchAttribTransfer findActive(
        BOMId               _bomId,
        ItemId              _endItemId,
        PdsBatchAttribId    _attribId,
        boolean             _forUpdate = false)
    {
        PDSBatchAttribTransfer batchAttribTransfers;

        if (_forUpdate)
        {
            batchAttribTransfers.selectForUpdate(true);
        }

        select firstonly batchAttribTransfers
            where batchAttribTransfers.BOMId                == _bomId
                && batchAttribTransfers.EndItemId           == _endItemId
                && batchAttribTransfers.PdsBatchAttribId    == _attribId;

        return batchAttribTransfers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttributeInherited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the attribute is inherited.
    /// </summary>
    /// <param name="_bomId">
    /// The formula ID for the end item formula.
    /// </param>
    /// <param name="_attribId">
    /// The batch attribute ID to check.
    /// </param>
    /// <param name="_finishGood">
    /// The item ID of the end item to check.
    /// </param>
    /// <returns>
    /// true if batch attribute <paramref name="_attribId"/> will be inherited for <paramref name="_finishGood"/>; otherwise, false.
    /// </returns>
    public static boolean isAttributeInherited(
        BOMId               _bomId,
        PdsBatchAttribId    _attribId,
        ItemId              _finishGood)
    {
        return (select PDSBatchAttribTransfer
                    where PDSBatchAttribTransfer.EndItemId          == _finishGood
                        && PDSBatchAttribTransfer.BOMId             == _bomId
                        && PDSBatchAttribTransfer.PdsBatchAttribId  == _attribId
                        && PDSBatchAttribTransfer.Active).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>PDSBatchAttribTransfer</c> table for a new common batch attribute that was not previously defined.
    /// </summary>
    /// <param name="_bom">
    /// The record of the <c>BOM</c> table for which the inheritance is defined.
    /// </param>
    /// <remarks>
    /// <para>This removes any obsolete transfer records.</para>
    /// </remarks>
    public static void sync(BOM _bom)
    {
        BOMVersion               version;

        if (!#PDSLotGenealogyEnabled)
        {
            return;
        }

        select firstonly version
            where version.BOMId      == _bom.BOMId
                && version.PmfTypeId == PmfBOMFormula::Formula;

        if (!version)
        {
            checkFailed(strfmt("@PSC190", _bom.BOMId));
        }

        ttsBegin;

        PDSBatchAttribTransfer::syncBOM(_bom, version);

        if (_bom.PDSInheritCoProductBatchAttrib)
        {
            PDSBatchAttribTransfer::syncCoProduct(_bom, version);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the attribute transfer records for any new shared attributes of the BOM item and formula version item.
    /// </summary>
    /// <param name="_bom">
    /// The record of the <c>BOM</c> table to synchronize the attribute transfers for.
    /// </param>
    /// <param name="_version">
    /// The record of the <c>BOMVersion</c> table to synchronize the attribute transfers for.
    /// </param>
    private static void syncBOM(BOM _bom, BOMVersion _version)
    {
        if (_bom.PDSInheritEndItemBatchAttrib)
        {
            PdsBatchAttribTransfer::createBatchAttributeTransfer(_bom, _version.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanObsoleteBatchAttributesBOM</Name>
				<Source><![CDATA[
    private static void cleanObsoleteBatchAttributesBOM(BOM _bom)
    {
        PDSBatchAttribTransfer transfers;
        PdsBatchAttribByItem rawAttrib;
        PdsBatchAttribByItem endAttrib;

        // delete obsolete transfers where the attributes have been removed from the ingredient item.
        delete_from transfers
            where transfers.BOMRefRecId             == _bom.RecId
            notexists join rawAttrib
            where rawAttrib.PdsBatchAttribItemId    == transfers.RawItemId
                && rawAttrib.PdsBatchAttribRelation == transfers.PdsBatchAttribId;

        // delete obsolete transfers where the attributes have been removed from the end item.
        delete_from transfers
            where transfers.BOMRefRecId             == _bom.RecId
            notexists join endAttrib
            where endAttrib.PdsBatchAttribItemId    == transfers.EndItemId
                && endAttrib.PdsBatchAttribRelation == transfers.PdsBatchAttribId;

        // delete obsolete transfers if the ingredient item ID has changed.
        delete_from transfers
            where transfers.BOMRefRecId     == _bom.RecId
                && transfers.RawItemId      != _bom.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchAttributeTransfer</Name>
				<Source><![CDATA[
    private static void createBatchAttributeTransfer(BOM _bom, ItemId _rafableItemId)
    {
        PDSBatchAttribTransfer  transfers;
        PdsBatchAttribByItem    rawAttrib;
        PdsBatchAttribByItem    endAttrib;

        while select PdsBatchAttribCode, PdsBatchAttribRelation
            from rawAttrib
            where rawAttrib.PdsBatchAttribItemId    == _bom.ItemId
            exists join endAttrib
            where endAttrib.PdsBatchAttribItemId    == _rafableItemId
                && endAttrib.PdsBatchAttribCode     == rawAttrib.PdsBatchAttribCode
                && endAttrib.PdsBatchAttribRelation == rawAttrib.PdsBatchAttribRelation
        {
            switch (rawAttrib.PdsBatchAttribCode)
            {
                case TableGroupAll::All:
                    PdsBatchAttribTransfer::createBatchAttributeTransferAll(_bom, _rafableItemId, rawAttrib);
                break;

                case TableGroupAll::GroupId:
                    PdsBatchAttribTransfer::createBatchAttributeTransferGroup(_bom, _rafableItemId, rawAttrib);
                break;

                case TableGroupAll::Table:
                    PdsBatchAttribTransfer::createBatchAttributeTransferDistinctAttribute(_bom, _rafableItemId, rawAttrib);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchAttributeTransferDistinctAttribute</Name>
				<Source><![CDATA[
    private static void createBatchAttributeTransferDistinctAttribute(BOM                  _bom,
                                                                      ItemId               _rafableItemId,
                                                                      PdsBatchAttribByItem _batchAttributesRawMaterial)
    {
        PdsBatchAttribByItem        batchAttributesRawMaterial, batchAttributesEndItem;
        PDSBatchAttribTransfer      batchAttributesTransfer, batchAttributesTransferNotExist;

        BOMId     bomId       = _bom.BOMId;
        ItemId    bomItemId   = _bom.ItemId;
        RecId     bomRecId    = _bom.RecId;
        LineNum   bomLineNum  = _bom.LineNum;

        insert_recordset batchAttributesTransfer(RawItemId, EndItemId, BOMId, LineNum, PdsBatchAttribId, BOMRefRecId)
            select bomItemId, _rafableItemId, bomId, bomLineNum, PdsBatchAttribRelation, bomRecId
                from batchAttributesRawMaterial
                where batchAttributesRawMaterial.PdsBatchAttribItemId   == _bom.ItemId
                   && batchAttributesRawMaterial.PdsBatchAttribCode     == _batchAttributesRawMaterial.PdsBatchAttribCode
                   && batchAttributesRawMaterial.PdsBatchAttribRelation == _batchAttributesRawMaterial.PdsBatchAttribRelation
                exists join batchAttributesEndItem
                    where batchAttributesEndItem.PdsBatchAttribItemId    == _rafableItemId
                        && batchAttributesEndItem.PdsBatchAttribCode     == batchAttributesRawMaterial.PdsBatchAttribCode
                        && batchAttributesEndItem.PdsBatchAttribRelation == batchAttributesRawMaterial.PdsBatchAttribRelation
                notExists join batchAttributesTransferNotExist
                    where batchAttributesTransferNotExist.BOMRefRecId       == bomRecId
                        && batchAttributesTransferNotExist.EndItemId        == _rafableItemId
                        && batchAttributesTransferNotExist.PdsBatchAttribId == batchAttributesRawMaterial.PdsBatchAttribRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchAttributeTransferGroup</Name>
				<Source><![CDATA[
    private static void createBatchAttributeTransferGroup(BOM                  _bom, 
                                                          ItemId               _rafableItemId,
                                                          PdsBatchAttribByItem _batchAttributesRawMaterial)
    {
        PdsBatchAttribByAttribGroup batchAttributesGroup;
        PdsBatchAttribByItem        batchAttributesEndItem;
        PDSBatchAttribTransfer      batchAttributesTransfer, batchAttributesTransferNotExist;

        BOMId     bomId       = _bom.BOMId;
        ItemId    bomItemId   = _bom.ItemId;
        RecId     bomRecId    = _bom.RecId;
        LineNum   bomLineNum  = _bom.LineNum;

        insert_recordset batchAttributesTransfer(RawItemId, EndItemId, BOMId, LineNum, PdsBatchAttribId, BOMRefRecId)
            select bomItemId, _rafableItemId, bomId, bomLineNum, PdsBatchAttribAttribId, bomRecId
                from batchAttributesGroup
                    where batchAttributesGroup.PdsBatchAttribGroupId     == _batchAttributesRawMaterial.PdsBatchAttribRelation
                exists join batchAttributesEndItem
                    where batchAttributesEndItem.PdsBatchAttribItemId    == _rafableItemId
                        && batchAttributesEndItem.PdsBatchAttribCode     == _batchAttributesRawMaterial.PdsBatchAttribCode
                        && batchAttributesEndItem.PdsBatchAttribRelation == batchAttributesGroup.PdsBatchAttribGroupId
                notexists join batchAttributesTransferNotExist
                    where batchAttributesTransferNotExist.BOMRefRecId       == bomRecId
                        && batchAttributesTransferNotExist.EndItemId        == _rafableItemId
                        && batchAttributesTransferNotExist.PdsBatchAttribId == batchAttributesGroup.PdsBatchAttribAttribId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchAttributeTransferAll</Name>
				<Source><![CDATA[
    private static void createBatchAttributeTransferAll(BOM                  _bom,
                                                        ItemId               _rafableItemId,
                                                        PdsBatchAttribByItem _batchAttributesRawMaterial)
    {
        PdsBatchAttrib              batchAttributes;
        PdsBatchAttribByItem        batchAttributesEndItem;
        PDSBatchAttribTransfer      batchAttributesTransfer, batchAttributesTransferNotExist;

        BOMId     bomId       = _bom.BOMId;
        ItemId    bomItemId   = _bom.ItemId;
        RecId     bomRecId    = _bom.RecId;
        LineNum   bomLineNum  = _bom.LineNum;

        insert_recordset batchAttributesTransfer(RawItemId, EndItemId, BOMId, LineNum, PdsBatchAttribId, BOMRefRecId)
            select bomItemId, _rafableItemId, bomId, bomLineNum, PdsBatchAttribId, bomRecId
                from batchAttributes
                exists join batchAttributesEndItem
                    where batchAttributesEndItem.PdsBatchAttribItemId    == _rafableItemId
                        && batchAttributesEndItem.PdsBatchAttribCode     == _batchAttributesRawMaterial.PdsBatchAttribCode
                        && batchAttributesEndItem.PdsBatchAttribRelation == _batchAttributesRawMaterial.PdsBatchAttribRelation
                notexists join batchAttributesTransferNotExist
                    where batchAttributesTransferNotExist.BOMRefRecId       == bomRecId
                        && batchAttributesTransferNotExist.EndItemId        == _rafableItemId
                        && batchAttributesTransferNotExist.PdsBatchAttribId == batchAttributes.PdsBatchAttribId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>PDSBatchAttribTransfer</c> table for new batch attribute that were not set already for all formula co-products.
    /// </summary>
    /// <param name="_bom">
    /// The record of the <c>BOM</c> table for which the inheritance is defined.
    /// </param>
    /// <param name="_version">
    /// The record of the <c>BOMVersion</c> table for which the inheritance is defined.
    /// </param>
    public static void syncCoProduct(BOM _bom, BOMVersion _version)
    {
        if (!_version)
        {
            return;
        }

        PmfFormulaCoBy coProduct;

        while select ItemId
            from coProduct
            where coProduct.BOMVersionRefRecId == _version.RecId
            &&    coProduct.ProductType        == PmfProductType::Co_Product
        {
            ItemId coItemId = coProduct.ItemId;

            PDSBatchAttribTransfer::createBatchAttributeTransfer(_bom, coItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>PDSBatchAttribTransfer</c> table for batch attributes that were not set already for the given item.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> for which list of inherited attribute will be synced.
    /// </param>
    public static void syncFromItem(ItemId _itemId)
    {
        BOM                     bom;
        BOMVersion              version;

        while select bom
            where (bom.PDSInheritEndItemBatchAttrib
                    || bom.PDSInheritCoProductBatchAttrib)
            join version
                where version.ItemId    == _itemId
                    && version.BOMId    == bom.BOMId
                    && version.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                    && (version.ToDate  >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                        || !version.ToDate)
        {
            ttsBegin;

            PDSBatchAttribTransfer::syncBOM(bom, version);

            if (bom.PDSInheritCoProductBatchAttrib)
            {
                PDSBatchAttribTransfer::syncCoProduct(bom, version);
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncVersionCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes records in the <c>PDSBatchAttribTransfer</c> table associated with a specified co-product item which, in turn, is associated with a specified <c>BOMVersion</c> record.
    /// </summary>
    /// <param name="_version">
    ///     The record of the <c>BOMVersion</c> table associated with all the <c>PDSBatchAttribTransfers</c> records to synchronize.
    /// </param>
    /// <param name="_coProductItemId">
    ///     The co-product item ID to synchronize against.
    /// </param>
    /// <remarks>
    ///     <para>This removes any obsolete transfer records associated with the specified co-product item ID.</para>
    /// </remarks>
    public static void syncVersionCoProduct(BOMVersion _version, ItemId _coProductItemId)
    {
        BOM                     bom;
        InventTable             endItem;
        PDSBatchAttribTransfer  xfer;

        if (#PDSLotGenealogyEnabled
            && _version.PmfTypeId == PmfBOMFormula::Formula)
        {
            ttsBegin;

            while select bom
                    where bom.BOMId == _version.BOMId
                        && bom.PDSInheritCoProductBatchAttrib
                    exists join xfer
                        where xfer.BOMRefRecId == bom.RecId
                            && xfer.EndItemId == _coProductItemId
                    exists join endItem
                        where endItem.ItemId == xfer.EndItemId
                            && endItem.PmfProductType == PmfProductType::Co_Product
            {
                PDSBatchAttribTransfer::syncCoProduct(bom, _version);
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PDSLotGenealogy</ConfigurationKey>
	<DeveloperDocumentation>@PSC542</DeveloperDocumentation>
	<FormRef>PDSBatchAttribTransfer</FormRef>
	<Label>@PSC183</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BOMId</TitleField1>
	<TitleField2>PdsBatchAttribId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BatchAttribTransferIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>BatchAttribTransferIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RawItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Genealogy</Name>
			<Label>@PSC182</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RawItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>productionTypeDisplay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PSC584</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BOMRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BOMRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EndItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@PSC198</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RawItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@PSC199</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BatchAttribTransferIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>EndItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribId</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AttribByEndItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsBatchAttribByItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BatchAttributeByItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BatchAttribTransferItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PdsBatchAttribCode_Extern</Name>
					<RelatedField>PdsBatchAttribCode</RelatedField>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribRelation</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndItemId</Name>
					<Field>EndItemId</Field>
					<RelatedField>PdsBatchAttribItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>AttribByRawItem</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsBatchAttribByItem</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BatchAttributeByRawItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BatchAttribTransferRawItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Active</Name>
					<Field>Active</Field>
					<ValueStr>boolean::true</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PdsBatchAttribCode_Extern</Name>
					<RelatedField>PdsBatchAttribCode</RelatedField>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribRelation</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RawItemId</Name>
					<Field>RawItemId</Field>
					<RelatedField>PdsBatchAttribItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOM</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BOM</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BatchAttribTransferBOM</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMRefRecId</Name>
					<SourceEDT>PDSBOMRefRecId</SourceEDT>
					<Field>BOMRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<SourceEDT>BOMId</SourceEDT>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BatchAttribTransfer</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>EndItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTableRaw</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTableRaw</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RawItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>RawItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>