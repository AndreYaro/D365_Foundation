<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlocking</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventBlocking extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustUnreserveBlockingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether unreservation of inventory blocking transactions must be done when updating
    /// the current inventory blocking record.
    /// </summary>
    /// <returns>
    /// true if unreservation must be done; otherwise, false.
    /// </returns>
    public boolean mustUnreserveBlockingTransaction()
    {
        return this.SkipUnreservation == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRereserveBlockingTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether rereservation of inventory blocking transactions must be done when updating
    /// the current inventory blocking record.
    /// </summary>
    /// <returns>
    /// true if reservation must be done; otherwise, false.
    /// </returns>
    public boolean mustRereserveBlockingTransaction()
    {
        return this.SkipRereservation == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustOnlyUnreservePhysicalReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether only physically reserved inventory blocking transactions must be unreserved when updating
    /// the current inventory blocking record.
    /// </summary>
    /// <returns>
    /// true if only physically reserved transactions must be unreserved; otherwise, false.
    /// </returns>
    public boolean mustOnlyUnreservePhysicalReserved()
    {
        return this.OnlyUnreservePhysicalReserved == NoYes::Yes && this.allowUnreservePhysicalReservedOnly();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithUnreservePhysicalOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory blocking record while only unreserving physically reserved transactions.
    /// </summary>
    public void updateWithUnreservePhysicalOnly()
    {
        try
        {
            this.OnlyUnreservePhysicalReserved = true;

            this.update();
        }
        finally
        {
            this.OnlyUnreservePhysicalReserved = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUnreservePhysicalReservedOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current inventory blocking type allows for unreservation of 
    /// physically reserved transactions only.
    /// </summary>
    /// <returns>
    /// true if the type allows unreservation; otherwise, false.
    /// </returns>
    public boolean allowUnreservePhysicalReservedOnly()
    {
        return this.type().allowUnreservePhysicalReservedOnly();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory blocking can be deleted by user.
    /// </summary>
    /// <returns>
    /// true if the inventory blocking can be deleted by user; otherwise, false.
    /// </returns>
    public boolean canBeDeletedByUser()
    {
        return this.type().canBeDeletedByUser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveBlockingAtStatusLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserve blocking at the inventory status level.
    /// </summary>
    [Hookable(false)]
    internal void reserveBlockingAtStatusLevel()
    {
        this.type().reserveBlockingAtStatusLevel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeEditedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory blocking can be edited by user.
    /// </summary>
    /// <returns>
    /// Returns true if the inventory blocking can be edited by user; otherwise, false.
    /// </returns>
    public boolean canBeEditedByUser()
    {
        return this.type().canBeEditedByUser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExpectedReceiptBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the expected receipt field value on the inventory blocking can be edited by user.
    /// </summary>
    /// <returns>
    /// true if the expected receipt field value on the inventory blocking can be edited by user; otherwise, false.
    /// </returns>
    public boolean canExpectedReceiptBeDeletedByUser()
    {
        return this.type().canExpectedReceiptBeDeletedByUser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the inventory blocking record and corresponding inventory transactions.
    /// </summary>
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        this.type().deleting();

        // Delete issue transaction
        this.type().deleteBlockingTransaction();

        // Delete receipt transaction if exists
        if (this.InventTransIdReceipt)
        {
            this.type().deleteBlockingTransaction(InventMovSubType::TransferReceipt);
        }

        super();

        this.type().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasExpectedReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an expected receipt is available for the inventory blocking record.
    /// </summary>
    /// <returns>
    /// true if an expected receipt is available; otherwise, false.
    /// </returns>
    public boolean hasExpectedReceipt()
    {
        return this.InventTransIdReceipt && this.ExpectReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current <c>InventBlocking</c> record from an item.
    /// </summary>
    public void initFromItem()
    {
        this.type().initFromItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory blocking from quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> table record.
    /// </param>
    public void initFromQualityOrderTable(InventQualityOrderTable  _inventQualityOrderTable)
    {
        this.BlockingType           = InventBlockingType::QualityOrder;        
        this.ItemId                 = _inventQualityOrderTable.ItemId;
        this.InventDimId            = _inventQualityOrderTable.inventDimForBlocking().inventDimId;
        
        if (WHSInventStatus::isBlockingStatus(_inventQualityOrderTable.inventDimForBlocking().InventStatusId))
        {
            this.ExpectedReceiptDate = dateNull();
            this.ExpectReceipt = NoYes::No;
        }
        else
        {
            this.ExpectedReceiptDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            this.ExpectReceipt          = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default inventory blocking values.
    /// </summary>
    public void initValue()
    {
        this.BlockingType               = InventBlockingType::Manual;
        this.ExpectReceipt              = NoYes::Yes;
        this.ExpectedReceiptDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Qty                        = 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an inventory blocking record and corresponding inventory transactions.
    /// </summary>
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        this.type().inserting();

        // create InventTransId for issue transaction
        this.InventTransIdIssue = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        // create issue transaction
        InventUpd_Estimated estimatedIssue = this.type().createOrUpdateBlockingTransaction();

        super();

        if (estimatedIssue)
        {
            estimatedIssue.updateOwnerRelationship();
        }

        // reserve inventory
        this.type().reserveBlockingTransaction();

        // create expected receipt transaction, if needed
        if (this.ExpectReceipt)
        {
            // research the latest blocking record
            this.reread();

            this.InventTransIdReceipt = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

            InventUpd_Estimated estimatedReceipt = this.type().createOrUpdateBlockingTransaction(InventMovSubType::TransferReceipt);

            if (estimatedReceipt)
            {
                estimatedReceipt.updateOwnerRelationship();
            }

            this.doUpdate();
        }

        this.type().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventMovement</c> object for the current inventory blocking record.
    /// </summary>
    /// <param name = "_inventMovSubType">
    /// An <c>InventMovSubType</c> enumeration value specifying whether the <c>InventMovement</c> object
    /// should be created for the issue or the receipt transactions.
    /// </param>
    /// <returns>
    /// The <c>InventMovement</c> object.
    /// </returns>
    public InventMovement inventMovement(InventMovSubType _inventMovSubType)
    {
        InventMovement movement = InventMovement::construct(this, _inventMovSubType);

        if (InventBlockingRelatedTransactionInfoSingleton::instance().isCurrent())
        {
            movement.inventDim(InventBlockingRelatedTransactionInfoSingleton::instance().inventDim());
        }

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin inventory transaction ID.
    /// </summary>
    /// <returns>
    /// The origin inventory transaction ID.
    /// </returns>
    public InventTransRefId inventTransRefId()
    {
        return this.type().inventTransRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransRefSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sign of the referred origin inventory transactions.
    /// </summary>
    /// <returns>
    /// An integer that represents the referred origin inventory transactions sign.
    /// </returns>
    public Integer inventTransRefSign()
    {
        return this.type().inventTransRefSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(InventBlocking, ItemId):
                this.Qty = InventTable::applyRoundingToInventQty(this.Qty, this.itemId);

                if (PdsGlobal::pdsIsCWItem(this.ItemId))
                {
                    if (!this.PdsCWQty)
                    {
                        this.PdsCWQty = 1;
                    }
                    this.Qty = PdsCatchWeight::minInventQty(this.ItemId, this.PdsCWQty);
                }
                else
                {
                    this.PdsCWQty = 0;
                }
                break;
            case fieldStr(InventBlocking, Qty):
                this.Qty = InventTable::applyRoundingToInventQty(this.Qty, this.itemId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBlockedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory should be blocked physically.
    /// </summary>
    /// <returns>
    /// true if the inventory should be blocked physically; otherwise, false.
    /// </returns>
    public NoYes mustBeBlockedPhysically()
    {
        return this.type().mustBeBlockedPhysically();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory blocking record and corresponding inventory transactions without the reservation.
    /// </summary>
    public void pdsAdjustInventoryQuantity()
    {
        try
        {
            this.SkipUnreservation = true;
            this.SkipRereservation = true;

            this.update();
        }
        finally
        {
            this.SkipUnreservation = false;
            this.SkipRereservation = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the disposition code of the batch of the item.
    /// </summary>
    /// <returns>
    /// The disposition code of the batch of the item.
    /// </returns>
    display PdsDispositionCode pdsDispositionCode()
    {
        return InventBatch::find(InventDim::find(this.InventDimId).InventBatchId, this.ItemId).PdsDispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDispositionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the disposition status of the batch of the item.
    /// </summary>
    /// <returns>
    /// The disposition status of the batch of the item.
    /// </returns>
    display PdsBatchDispositionStatus pdsDispositionStatus()
    {
        return InventBatch::find(InventDim::find(this.InventDimId).InventBatchId, this.ItemId).pdsDispositionStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryValueInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a string representation of the <c>queryValue</c> method that displays inventory transactions related to the inventory blocking.
    /// </summary>
    /// <returns>
    /// A string representation of the <c>queryValue</c> method.
    /// </returns>
    public str queryValueInventTransId()
    {
        str ret;

        // String representation of the query to display related issue and receipt transactions
        ret = strFmt(
            '((%1 == \"%2\") || (%3 == \"%4\"))',
            fieldStr(InventTransOrigin, InventTransId),
            this.InventTransIdIssue,
            fieldStr(InventTransOrigin, InventTransId),
            this.InventTransIdReceipt
            );

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a specific <c>InventBlockingTableType</c> class instance depending on the inventory blocking type.
    /// </summary>
    /// <returns>
    /// An instance of <c>InventBlockingTableType</c> class.
    /// </returns>
    public InventBlockingTableType type()
    {
        return InventBlockingTableType::newFromInventBlocking(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory blocking record and corresponding inventory transactions.
    /// </summary>
    public void update()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        InventBlocking inventBlocking_Orig = this.orig();

        this.type().updating();

        InventBlockingMarkingSync                   inventBlockingMarkingSync;
        InventBlockingExpectedReceiptMarkingUpdate  expectedReceiptMarkingUpdate;
        InventBlockingIssueReservationUpdate        issueReservationUpdate;
        InventQty                                   deltaBlockingQty = this.Qty - inventBlocking_Orig.Qty;
        PdsCWInventQty                              cwDeltaBlockingQty = this.PdsCWQty - inventBlocking_Orig.PdsCWQty;

        if (this.Qty != inventBlocking_Orig.Qty)
        {
            inventBlockingMarkingSync = InventBlockingMarkingSync::newFromInventBlocking(this, deltaBlockingQty
                                                    , InventTransOrigin::findByInventTransId(this.inventTransRefId()).RecId
                                                    , this.inventTransRefSign()
                                                    , cwDeltaBlockingQty
                                                    );
        
            inventBlockingMarkingSync.parmReceiptCanHaveOnlyDimAboveLocation(this.type().canReceiptOnlyHaveDimensionAboveLocation());
            
            container cacheValueCon = InventBlockingQualityOrderSync::getContainerValueFromCache(
                InventBlockingQualityOrderSync::transactionScopeCacheKey(this.RecId));           

            if (cacheValueCon != conNull())
            {
                boolean allowOriginalIssueReservPhys, unmark;
                [allowOriginalIssueReservPhys, unmark] = cacheValueCon;

                // Quarantine order cannot be created if physical reservation happened on issue inventTrans
                inventBlockingMarkingSync.parmAllowOriginalIssueReservPhys(allowOriginalIssueReservPhys);
                inventBlockingMarkingSync.parmUnmark(unmark);
            }           
            inventBlockingMarkingSync.unmark();
        }

        // Remove reservation prior to update.
        if (this.mustUnreserveBlockingTransaction())
        {
            if (inventBlockingMarkingSync && inventBlockingMarkingSync.parmCanUnreserve())
            {
                issueReservationUpdate = InventBlockingIssueReservationUpdate::newFromInventBlocking(this);
                issueReservationUpdate.unreserveIssueTransaction();
            }

            this.type().unreserveBlockingTransaction();

            // Receipt transaction should be deleted since it will be recreated if required after the reservation
            if (this.InventTransIdReceipt)
            {
                // store existing markings for the current receipt. This data can be used later for new recreated expected receipt
                expectedReceiptMarkingUpdate = InventBlockingExpectedReceiptMarkingUpdate::newFromInventBlocking(this);
                expectedReceiptMarkingUpdate.storeExpectedReceiptMarking();

                this.type().deleteBlockingTransaction(InventMovSubType::TransferReceipt);

                if (this.type().mustRecreateReceiptAfterUpdate())
                {
                    // Set expected receipt to false to trigger recreation of inventory transactions after update
                    this.ExpectReceipt = NoYes::No;
                }
                else
                {
                    // Remove the current receipt Lot ID, as it will not be reused.
                    this.InventTransIdReceipt = '';
                }
            }
        }
        // Create or update blocking issue transaction
        this.type().createOrUpdateBlockingTransaction();

        // The inventory blocking record should be saved prior to reservation
        super();

        if (this.mustRereserveBlockingTransaction())
        {
            using (var context = WHSInventBlockingUpdateContext::newFromDeltaBlockingQty(deltaBlockingQty, cwDeltaBlockingQty))
            {
                this.type().reserveBlockingTransaction();
            }

            // Create an expected receipt if needed
            if (this.type().mustCreateReceiptAfterUpdate())
            {
                boolean restoreMarking = false;

                // research the latest blocking record
                this.reread();

                if (!this.InventTransIdReceipt)
                {
                    // There were no receipt transaction previously. It should be created since receipt is expected now.
                    this.InventTransIdReceipt = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
                }
                else
                {
                    this.ExpectReceipt = NoYes::Yes;
                    restoreMarking = true;
                }

                var estimatedReceipt = this.type().createOrUpdateBlockingTransaction(InventMovSubType::TransferReceipt);

                if (estimatedReceipt)
                {
                    InventTrans inventTransReceipt = InventTrans::findTransId(this.InventTransIdReceipt, true);
                    InventTrans inventTransIssue = InventTrans::findTransId(this.InventTransIdIssue);
                    estimatedReceipt.updateTransDimReceipt(inventTransReceipt, inventTransReceipt.inventDim(), inventTransIssue.inventDim(), inventTransReceipt.Qty);

                    estimatedReceipt.updateOwnerRelationship();

                    if (restoreMarking && expectedReceiptMarkingUpdate)
                    {
                        expectedReceiptMarkingUpdate.restoreExpectedReceiptMarking();
                    }
                }

                this.doUpdate();
            }
        }

        if (issueReservationUpdate)
        {
            issueReservationUpdate.reserveIssueTransaction();
        }

        if (inventBlockingMarkingSync)
        {
            // find latest and updated blocking (as the expected receipt has been recreated)
            this.reread();
            inventBlockingMarkingSync.parmInventBlocking(this);
            inventBlockingMarkingSync.init();

            inventBlockingMarkingSync.mark();
        }

        this.type().updated(inventBlocking_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates fields for the <c>InventBlocking</c> record by using the <c>InventBlockingTableType</c>
    ///    class hierarchy.
    /// </summary>
    /// <param name="_fieldName">
    ///    The field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    ///    The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    ///    true if the call to the <c>InventBlockingTableType</c> method returns true; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex)
            && this.type().validateFieldValue(_fieldName, _arrayIndex);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventBlocking</c> table.
    /// </summary>
    /// <param name="_inventBlocking">
    /// The ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventBlocking</c> table if it exists; otherwise, an empty record.
    /// </returns>
    public static InventBlocking find(
        RecId   _inventBlocking,
        boolean _forUpdate = false)
    {
        InventBlocking  inventBlocking;

        inventBlocking.selectForUpdate(_forUpdate);

        select firstonly inventBlocking
            where inventBlocking.RecId == _inventBlocking;

        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransIdIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>InventBlocking</c> table.
    /// </summary>
    /// <param name="_transIdIssue">
    /// The identifier of the issuing transaction.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventBlocking</c> table if it exists; otherwise, an empty record.
    /// </returns>
    public static InventBlocking findByTransIdIssue(InventTransId _transIdIssue, boolean _forUpdate = false)
    {
        InventBlocking inventBlocking;

        if (_transIdIssue)
        {
            inventBlocking.selectForUpdate(_forUpdate);

            select firstonly inventBlocking
                where inventBlocking.InventTransIdIssue == _transIdIssue;
        }

        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIssueInventoryTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the issue inventory transaction for the specified <c>InventBlocking</c> record.
    /// </summary>
    /// <param name="_inventBlocking">The inventory blocking record for which to find the issue inventory transaction.</param>
    /// <param name="_statusIssue">The issue type to find.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>InventTrans</c> table if it exists; otherwise, an empty record.</returns>
    [Hookable(false)]
    internal static InventTrans findIssueInventoryTransaction(
        InventBlocking  _inventBlocking,
        StatusIssue     _statusIssue,
        boolean         _forUpdate = false)
    {
        InventTrans         inventTrans;

        if (_inventBlocking
            && _inventBlocking.InventTransIdIssue)
        {
            InventTransOrigin   inventTransOrigin;

            inventTrans.selectForUpdate(_forUpdate);

            select firstonly inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         ==  inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == _inventBlocking.InventTransIdIssue
                       && InventTrans.StatusIssue == _statusIssue;
        }

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByItemDimType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first record in the <c>InventBlocking</c> table that matches the specified parameters.
    /// </summary>
    /// <param name="_itemId">
    /// The item identifier
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension identifier
    /// </param>
    /// <param name="_inventBlockingType">
    /// The inventory blocking type
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventBlocking</c> table if it exists; otherwise, an empty record.
    /// </returns>
    public static InventBlocking findFirstByItemDimType(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        InventBlockingType  _inventBlockingType,
        boolean             _forUpdate = false)
    {
        InventBlocking inventBlocking;

        if (_itemId)
        {
            QueryRun queryRun = new QueryRun(InventBlocking::buildFindFirstByItemDimTypeQuery(_itemId, _inventDimId, _inventBlockingType, _forUpdate));

            if (queryRun.next())
            {
                inventBlocking = queryRun.get(tableNum(InventBlocking));
            }
        }

        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFindFirstByItemDimTypeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to find the first record in the <c>InventBlocking</c> table that matches the specified parameters.
    /// </summary>
    /// <param name="_itemId">The item identifier</param>
    /// <param name="_inventDimId">The inventory dimension identifier</param>
    /// <param name="_inventBlockingType">The inventory blocking type</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether to read the record for update.</param>
    /// <returns>
    /// A record in the <c>InventBlocking</c> table if it exists; otherwise, an empty record.
    /// </returns>
    [Wrappable(true)]
    internal static Query buildFindFirstByItemDimTypeQuery(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        InventBlockingType  _inventBlockingType,
        boolean             _forUpdate = false)
    {
        Query query = new Query();
        query.firstOnly1(true);

        QueryBuildDataSource qbds = query.addDataSource(tableNum(InventBlocking));
        qbds.update(_forUpdate);

        qbds.addRange(fieldNum(InventBlocking, ItemId)).value(queryValue(_itemId));
        qbds.addRange(fieldNum(InventBlocking, InventDimId)).value(queryValue(_inventDimId));
        qbds.addRange(fieldNum(InventBlocking, BlockingType)).value(queryValue(_inventBlockingType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (!this.canBeDeletedByUser())
        {
            ret = checkFailed("@SCM:BlockingOrderLinkedToQuanlityOrder");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS321433</DeveloperDocumentation>
	<FormRef>InventBlocking</FormRef>
	<Label>@SYS130215</Label>
	<SingularLabel>@SYS130215</SingularLabel>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Qty</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>InventTransIdIssueIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransIdIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>History</Name>
			<Label>@SYS35017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransIdIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectedReceiptDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Settings</Name>
			<Label>@SYS37997</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpectReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS40147</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS318405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpectReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BlockingType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventBlockingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ExpectedReceiptDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateExpected</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExpectReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBlockingExpectReceipt</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdIssue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Label>@SYS130224</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdReceipt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Label>@SYS130225</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBlockingQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipUnreservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipRereservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnlyUnreservePhysicalReserved</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdIssueIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdIssue</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventTransIdReceiptIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransIdReceipt</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemDimTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BlockingType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IssueInventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IssueInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBlocking</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdIssue</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransIdIssue</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReceiptInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReceiptInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventBlocking</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdReceipt</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransIdReceipt</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>