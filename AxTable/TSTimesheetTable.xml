<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSTimesheetTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TSTimesheetTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approvalStatus</Name>
				<Source><![CDATA[
    public str approvalStatus()
    {
        return enum2str(this.ApprovalStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowedToSubmitWorkflow</Name>
				<Source><![CDATA[
	protected boolean statusAllowedToSubmitWorkflow(TSAppStatus _status)
    {
        return _status == TSAppStatus::Create;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    public boolean canSubmitToWorkflow(str workflowType = '')
    {
        boolean canSubmit = this.statusAllowedToSubmitWorkflow(this.ApprovalStatus) && this.hasLines() &&
                            TSPolicyEvalEngine::evaluatePoliciesForTimesheet(this, SysPolicyTypeEnum::TimesheetPolicy);
        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowedToCancelWorkflow</Name>
				<Source><![CDATA[
	protected boolean statusAllowedToCancelWorkflow(TSAppStatus _status)
    {
        return _status != TSAppStatus::Ledger && _status != TSAppStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// An workflow can be cancelled if the timesheet status is not approved neither posted.
    /// </summary>
    /// <returns>True if the timesheet can be cancelled, otherwise; false.</returns>
    public boolean canCancelWorkflow()
    {
        boolean result = this.statusAllowedToCancelWorkflow(this.ApprovalStatus);

        if (!this.TimesheetNbr)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResource</Name>
				<Source><![CDATA[
    public boolean checkResource(TSResourceRecId _resourceRecId)
    {
        boolean result = true;

        if (!_resourceRecId)
        {
            //Employee %1 is not found
            result = checkFailed(strFmt("@SYS183978", ResourceFacade::getName(_resourceRecId)));
        }

        ProjPeriodId periodId = ResourceFacade::getPeriodId(_resourceRecId);

        if (result && !ProjPeriodTimesheetWeek::findFromPeriod(periodId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
        {
            //Timesheet Periods have not been created for: %1
            result = checkFailed(strFmt("@Timesheet:TimeSheetsNotCreated", curExt(), ResourceFacade::getName(_resourceRecId)));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDelegation</Name>
				<Source><![CDATA[
    public boolean checkDelegation(TSResourceRecId _resourceRecId)
    {
        boolean result = true;

        if (result && !TSTimesheetValidation::userHasAccessToTimesheet(this))
        {
            //%1 cannot enter timesheets for employee %2 for this period %3
            result = checkFailed(strFmt("@SYS183900", 
								 UserInfoHelp::userName(curUserId()),
                                 ResourceFacade::getName(_resourceRecId),
                                 this.PeriodFrom));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommitmentCostRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates commitment records for timesheet transaction
    /// </summary>
    public void createCommitmentCostRecords()
    {
        TSTimesheetLine tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        TSTimesheetTrans tsTimesheetTrans;

        while select tsTimesheetTrans
            exists join tsTimesheetLineWeek
                where tsTimesheetLineWeek.RecId == tsTimesheetTrans.tsTimesheetLineWeek
            exists join tsTimesheetLine
                where tsTimesheetLine.RecId        == tsTimesheetLineWeek.tsTimesheetLine
                   && tsTimesheetLine.TimesheetNbr == this.TimesheetNbr
        {
            if (   !CostControlTransCommittedCost::existOpenBySourceDocumentLine(tsTimesheetTrans.SourceDocumentLine)
                && AccountingDistribution::existSourceDocumentLine(tsTimesheetTrans.SourceDocumentLine))
            {
                SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(tsTimesheetTrans);
                ProjectCommitmentFacade::updateProjectCommitments(sourceDocumentLineItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdByWorkerName</Name>
				<Source><![CDATA[
    public display HcmWorkerName createdByWorkerName()
    {
        return HcmWorker::find(DirPersonUserEx::worker(DirPersonUser::find(this.CreatedBy))).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjParameters projParameters = ProjParameters::find();

        ttsbegin;

        // When change reason is on, the log will be created in the dataset
        if (projParameters.TimesheetAuditTrail && !projParameters.TimesheetChangeReason)
        {
            //Doing a find here to ensure all fields are selected in the table buffer
            TSTimesheetTableLog::createTableLog(TSTimesheetTable::findRecId(this.RecId), '', TsTimesheetChangeType::Delete);
        }

        super();

        if (this.ApprovalStatus == TSAppStatus::Create)
        {
            NumberSeq::releaseNumber(ProjParameters::numRefTimesheetNbr().NumberSequenceId, this.TimesheetNbr);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCommitmentCostRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes commitment records for timesheet transaction
    /// </summary>
    public void deleteCommitmentCostRecords()
    {
        TSTimesheetLine                 tsTimesheetLine;
        TSTimesheetLineWeek             tsTimesheetLineWeek;
        TSTimesheetTrans                tsTimesheetTrans;

        while select SourceDocumentLine from tsTimesheetTrans
            exists join tsTimesheetLineWeek
                where tsTimesheetLineWeek.RecId == tsTimesheetTrans.tsTimesheetLineWeek
            exists join tsTimesheetLine
                where tsTimesheetLine.RecId        == tsTimesheetLineWeek.tsTimesheetLine
                   && tsTimesheetLine.TimesheetNbr == this.TimesheetNbr
        {
            if (   CostControlTransCommittedCost::existOpenBySourceDocumentLine(tsTimesheetTrans.SourceDocumentLine)
                && AccountingDistribution::existSourceDocumentLine(tsTimesheetTrans.SourceDocumentLine))
            {
                ProjectCommitmentFacade::deleteProjectCommitments(tsTimesheetTrans.SourceDocumentLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTimesheetPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string representation of the period from and to dates, formatted for display purposes.
    /// </summary>
    /// <returns>
    /// A string that contains the formatted date interval.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display TSTimesheetPeriod displayTimesheetPeriod()
    {
        return TSTimesheetTable::startDateEndDate(this.PeriodFrom, this.PeriodTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTimesheetWeek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string representation of the period from and to dates, formatted for display purposes.
    /// </summary>
    /// <returns>
    /// A string that contains the formatted date interval.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display String50 displayTimesheetWeek()
    {
        String50 result;
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

        select firstonly RecId,PeriodFrom,PeriodTo from projPeriodTimesheetWeek
            where projPeriodTimesheetWeek.RecId == this.ProjPeriodTimesheetWeek;

        if (projPeriodTimesheetWeek.RecId != 0)
        {
            result = TSTimesheetTable::startDateEndDate(projPeriodTimesheetWeek.PeriodFrom, projPeriodTimesheetWeek.PeriodTo);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the units to show for timesheets.
    /// </summary>
    /// <returns>
    /// The string to show for units.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display UnitIDBase displayUnit()
    {
        return SysLabel::labelId2String2("@SYS4007717");
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableWorkWeekSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the work week selection should be enabled.
    /// </summary>
    /// <returns>
    /// true, if the work week selection should be enabled.
    /// </returns>
    public display boolean enableWorkWeekSelection()
    {
        ProjPeriodTable projPeriodTable;
        boolean         result = true;

        select  firstonly RecId, TimesheetFrequency from projPeriodTable
            where projPeriodTable.PeriodId == this.ProjPeriodId;

        if (projPeriodTable.RecId != 0 && projPeriodTable.TimesheetFrequency == TSPeriodFrequency::Week)
        {
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDraftOrReturnedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current timesheet contains at least one Draft or Returned line.
    /// </summary>
    /// <returns>
    /// True if current timesheet contains at least one Draft or Returned line;
    /// otherwise, false.
    /// </returns>
    public boolean hasDraftOrReturnedLine()
    {
        TSTimesheetLine tsTimesheetLine;

        select firstonly RecId from tsTimesheetLine
            where tsTimesheetLine.TimesheetNbr    == this.TimesheetNbr
               && (tsTimesheetLine.ApprovalStatus == TSAppStatus::Create
               ||  tsTimesheetLine.ApprovalStatus == TSAppStatus::Returned);

        return tsTimesheetLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLines</Name>
				<Source><![CDATA[
    public boolean hasLines()
    {
        TSTimesheetLine tsTimesheetLine;

        select firstonly RecId from tsTimesheetLine
            where tsTimesheetLine.TimesheetNbr == this.TimesheetNbr;

        return tsTimesheetLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ApprovalStatus = TSAppStatus::Create;
        this.PostStatus     = TSPostStatus::NotTransferred;
        this.Resource       = ResourceFacade::findByCurrentWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called on insert of the <c>TSTimesheetTable</c> record.
    /// </summary>
    /// <remarks>
    /// This is overriden in order to set the source document header record id of the <c>TSTimesheetTable</c> record
    /// </remarks>
    public void insert()
    {
        if (!this.TimesheetNbr)
        {
            this.TimesheetNbr = TSTimesheetTable::newTimesheetNbr();
        }

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current timesheet document is editable, based on the current workflow status.
    /// </summary>
    /// <returns>
    /// true if the status is either a <c>Create(Not Submitted)</c> or <c>Returned</c> value; otherwise,
    /// false.
    /// </returns>
    public display boolean isEditable()
    {
        boolean result = true;

        switch (this.ApprovalStatus)
        {
            case TSAppStatus::Approved:
            case TSAppStatus::Ledger:
            case TSAppStatus::Pending:
            case TSAppStatus::Submitted:
            case TSAppStatus::Ready:
            case TSAppStatus::All:
                result = false;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (this.(_fieldId) != this.orig().(_fieldId))
        {
            switch (_fieldId)
            {
                case fieldNum(TSTimesheetTable, Resource):
                    ProjPeriodLine projPeriodLine = TSTimesheetTable::getValidResourcePeriod(this.Resource);
                    this.ProjPeriodId             = projPeriodLine.PeriodId;
                    this.PeriodFrom               = projPeriodLine.PeriodFrom;
                    this.PeriodTo                 = projPeriodLine.PeriodTo;

                    ProjPeriodTimesheetWeek projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                    this.ProjPeriodTimesheetWeek                    = projPeriodTimesheetWeek.RecId;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header type name.
    /// </summary>
    /// <returns>
    /// The <c>SourceDocument_ProjectTimesheets</c> value.
    /// </returns>
    public EnumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_ProjectTimesheets);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document header type enumeration value.
    /// </summary>
    /// <returns>
    /// Always returns a <c>SourceDocument_ProjectTimesheets::Timesheets</c> enumeration value.
    /// </returns>
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_ProjectTimesheets::Timesheets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    public display Description previewPaneTitle()
    {
        return "@SYS339037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalHours</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display TSHoursTotal totalHours()
    {
        TSTimesheetLineWeek  tsTimesheetLineWeek;

        select sum(Hours) from tsTimesheetLineWeek
             where tsTimesheetLineWeek.TimesheetNbr == this.TimesheetNbr;

        return  tsTimesheetLineWeek.Hours[1] +
                tsTimesheetLineWeek.Hours[2] +
                tsTimesheetLineWeek.Hours[3] +
                tsTimesheetLineWeek.Hours[4] +
                tsTimesheetLineWeek.Hours[5] +
                tsTimesheetLineWeek.Hours[6] +
                tsTimesheetLineWeek.Hours[7];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportHeaderApproval</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display int getSupportHeaderApproval()
    {
        const int supportHeaderApproval = 1;
        const int notSupportHeaderApproval = 0;
        WorkflowWorkItemTable workItemTable;

        select firstonly RecId from  workItemTable where workItemTable.RefTableId == tableNum(TSTimesheetTable) &&
                                                             workItemTable.RefRecId == this.RecId &&
                                                             workItemTable.Status == WorkflowWorkItemStatus::Pending;

        if (workItemTable.RecId != 0)
        {
            return supportHeaderApproval;
        }
        else
        {
            return notSupportHeaderApproval;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalHoursBillable</Name>
				<Source><![CDATA[
    public display TSHoursTotalBillable totalHoursBillable()
    {
        TSTimesheetSummaryLine  summaryLine;
        ProjLineProperty        projLineProperty;
        TSHoursTotal            hours;

        //Get all the hours that are 'ToBeInvoiced' based on a LinePropertyId, from all the timesheet lines across companies.

        //The TSTimesheetSummaryLine view and the ProjLineProperty tables both have their SaveDataPerCompany set to true.
        //Hence a join on ProjLineProperty's LinePropertyId, for a different company (other than what the timesheet is created in)
        //does not give the correct result.
        while select sum(Hours), TimesheetNbr, LinePropertyId, ProjectDataAreaId from summaryLine
            group by TimesheetNbr, LinePropertyId, ProjectDataAreaId
            where summaryLine.TimesheetNbr == this.TimesheetNbr
        {
            container conCompanies = [summaryLine.ProjectDataAreaId];
            select firstonly crosscompany:conCompanies ToBeInvoiced from projLineProperty
                where projLineProperty.LinePropertyId == summaryLine.LinePropertyId;

            if (projLineProperty.ToBeInvoiced)
            {
                hours += summaryLine.Hours[1] +
                         summaryLine.Hours[2] +
                         summaryLine.Hours[3] +
                         summaryLine.Hours[4] +
                         summaryLine.Hours[5] +
                         summaryLine.Hours[6] +
                         summaryLine.Hours[7];
            }
        }

        return hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        if (this.orig().Resource != this.Resource)
        {
            TSTimesheetLine tsTimesheetLine;

            tsTimesheetLine.skipDataMethods(true);

            update_recordset tsTimesheetLine
                setting Resource = this.Resource
                where tsTimesheetLine.TimesheetNbr == this.TimesheetNbr;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the project budget that is used in all timesheet lines for the current timesheet record.
    /// </summary>
    /// <returns>
    /// true if the timesheet is on budget range; otherwise, false.
    /// </returns>
    public boolean validateBudget()
    {
        TSTimesheetTrans    tsTimesheetTrans;
        boolean             result = true;

        SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(this);

        BudgetSource budgetSource;

        select firstonly RecId from tsTimesheetTrans
            where tsTimesheetTrans.TimesheetNbr == this.TimesheetNbr
            join CheckResult from budgetSource
                where budgetSource.SourceDocumentLine == tsTimesheetTrans.SourceDocumentLine
                   && budgetSource.BudgetSourceType   == BudgetSourceType::SourceDocumentLine
                   && budgetSource.CheckResult        == BudgetCheckResult::Failed;

        result = tsTimesheetTrans.RecId == 0;

        if (result)
        {
            ProjBudgetStatus projBudgetStatus;

            select firstonly RecId from tsTimesheetTrans
                where tsTimesheetTrans.TimesheetNbr == this.TimesheetNbr
                    exists join projBudgetStatus
                        where projBudgetStatus.SourceDocumentLine == tsTimesheetTrans.SourceDocumentLine
                           && projBudgetStatus.BudgetCheckResult  == ProjBudgetCheckResult::Failed;

            result = tsTimesheetTrans.RecId == 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusAllowsDelete</Name>
				<Source><![CDATA[
	protected boolean statusAllowsDelete(TSAppStatus _approvalStatus)
    {
        boolean returnValue = false;

        if (_approvalStatus == TSAppStatus::Create)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean result = super();

        if (result && !this.statusAllowsDelete(this.ApprovalStatus))
        {
            result = checkFailed("@SYS190521");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean result = super(_fieldIdToCheck);

        if (result)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TSTimesheetTable, Resource):
                    result =    this.checkResource(this.Resource)
                             && TSResource::resourceIsWorkerInCurrentCompany(this.Resource);
                    if (!result)
                    {
                        this.Resource = this.orig().Resource;
                    }
                    break;

                case fieldNum(TSTimesheetTable, PeriodFrom):
                    result = result && TSTimesheetTable::checkMaxTimesheets(this.PeriodFrom, this.Resource);
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the date is within a given valid period
    /// </summary>
    /// <param name="_date">
    /// The date chosen
    /// </param>
    /// <param name="_showInfolog">
    /// Boolean to indicate if the infolog should be displayed to the user
    /// </param>
    /// <returns>
    /// Boolean for the validation condition
    /// </returns>
    public boolean validatePeriodDate(
        ProjPeriodFrom _date,
        boolean        _showInfolog = false)
    {
        ProjPeriodLine  projPeriodLine = ProjPeriodLine::findFromPeriod(this.ProjPeriodId, _date);
        boolean         result         = true;

        if (   projPeriodLine.RecId == 0
            || projPeriodLine.PeriodTo < _date)
        {
            result = _showInfolog ? checkfailed(strFmt("@SYS343972", _date)) : false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and submits the timesheet document.
    /// </summary>
    /// <param name="_showInfolog">
    /// A Boolean value that indicates whether to display the validation error messages.
    /// </param>
    /// <returns>
    /// true if the timesheet document is valid; otherwise, false.
    /// </returns>
    public boolean validateSubmit(boolean _showInfolog = true)
    {

        TSTimesheetLine tsTimesheetLine;
        boolean         result = true;

        TSTimesheetInstrumentationLogger workflowSubmissionLogger = TSTimesheetInstrumentationLogger::createLogger('TsTimesheetTable');
        TSTimesheetInstrumentationActivities submissionActivities = TSTimesheetInstrumentationActivities::construct(workflowSubmissionLogger);
        using (var submitContext = submissionActivities.validateSubmitContext())
        {
            ttsbegin;
            while select forupdate tsTimesheetLine
                where tsTimesheetLine.TimesheetNbr == this.TimesheetNbr
            {
                result = tsTimesheetLine.validateSubmit(_showInfolog) && result;
            }

            select firstonly RecId from tsTimesheetLine
                where tsTimesheetLine.TimesheetNbr == this.TimesheetNbr;

            workflowSubmissionLogger.logInformation(strFmt('Check first timesheet line RecId: %1', tsTimesheetLine.RecId));

            //Check if no record exists or record exist with a line has all 0 hours - for both conditions returning the same warning.
            if (tsTimesheetLine.RecId == 0)
            {
                result = checkFailed("@SYS341807");
            }

            // Check the return value
            if (result)
            {
                ttscommit;
            }
            else
            {
                ttsabort;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean result = super();

        result = result && TSResource::resourceIsWorkerInCurrentCompany(this.Resource);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceName</Name>
				<Source><![CDATA[
    public display Name resourceName()
    {
        return ResourceFacade::getName(this.Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(TSTimesheetNbr _timesheetNbr)
    {
        boolean result = true;

        if (_timesheetNbr && !TSTimesheetTable::exist(_timesheetNbr))
        {
            result = checkFailed(strFmt(TSTimesheetTable::txtNotExist(), _timesheetNbr));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAccountTotalsBeChecked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether we check hours for the inserted timesheet lines or not.
    /// </summary>
    /// <returns>
    ///     true if the check hours for the inserted timesheet lines can be called; otherise, false.
    /// </returns>
    protected static boolean shouldAccountTotalsBeChecked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHours</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the current timesheet lines against the max working hours and calender.
    /// </summary>
    /// <param name = "_timesheetNbr">
    ///     An instance of <c>TSTimesheetNbr</c> table buffer.
    /// </param>
    /// <param name = "_displayInfo">
    ///     Value to determine if info is required, Optional.
    /// </param>
    /// <returns>
    ///     true if the <c>checkHours</c> can be called; otherise, false.
    /// </returns>
    public static boolean checkHours(
        TSTimesheetNbr _timesheetNbr,
        boolean        _displayInfo = true)
    {
        TmpAccountSum       tmpAccountSum;
        TSTimesheetTable    timesheetTable  = TSTimesheetTable::find(_timesheetNbr);
        ResourceSetup       resourceSetup   = ResourceSetup::find(timesheetTable.Resource);
        boolean             ok              = true;
        boolean             hasMaxHours     = false;

        for (int i = 1; i <= 7; i++)
        {
            if (resourceSetup.MaxWorkingHours[i] != 0)
            {
                hasMaxHours = true;
                break;
            }
        }

        if (!hasMaxHours && !resourceSetup.MaxHoursCalendar)
        {
            return ok;
        }

        TransDate transDate = timesheetTable.PeriodFrom;

        if (TSTimesheetTable::shouldAccountTotalsBeChecked())
        {
            // insert all lines to be checked into tmp table
            while (transDate <= timesheetTable.PeriodTo)
            {
                tmpAccountSum.TransDate = transDate;
                tmpAccountSum.insert();

                transDate++;
            }

            while select tmpAccountSum
                order by TransDate
            {
                // max hours
                if (!hasMaxHours && resourceSetup.MaxHoursCalendar)
                {
                    WorkCalendarDate    workCalendarDate;

                    while select workCalendarDate
                        where workCalendarDate.CalendarId      == resourceSetup.maxHoursCalendarId()
                           && workCalendarDate.TransDate       == tmpAccountSum.TransDate
                           && (workCalendarDate.WorkTimeControl != WorkTimeControl::Closed || workCalendarDate.WorkTimeControl != WorkTimeControl::Holiday)
                    {
                        tmpAccountSum.Balance02 = WorkCalendarDate::calcDefinedHours(workCalendarDate.CalendarId, workCalendarDate.TransDate);
                    }
                }
                else
                {
                    tmpAccountSum.Balance02 = resourceSetup.MaxWorkingHours[dayOfWk(tmpAccountSum.TransDate)];
                }

                // actual hours
                TSTimesheetTrans timesheetTrans;

                select sum(Hours) from timesheetTrans
                    where timesheetTrans.TimesheetNbr  == timesheetTable.TimesheetNbr
                       && timesheetTrans.ProjTransDate == tmpAccountSum.TransDate;

                tmpAccountSum.Balance03 = timesheetTrans.Hours;
                tmpAccountSum.update();
            }

            // print results
            while select tmpAccountSum
                order by TransDate
            {
                if (tmpAccountSum.Balance01 > tmpAccountSum.Balance03)
                {
                    if (_displayInfo)
                    {
                        if (ok)
                        {
                            //Recorded Hours differ from defined Working Hours for the day.
                            warning("@SYS190511");
                        }

                        //Date: %1 - Recorded Hours: %2 - Working Hours: %3 - Difference: %4
                        warning(strFmt("@SYS183943", tmpAccountSum.TransDate, tmpAccountSum.Balance03, tmpAccountSum.Balance01, tmpAccountSum.Balance01-tmpAccountSum.Balance03));
                    }
                    ok = false;
                }

                if (tmpAccountSum.Balance02 && tmpAccountSum.Balance02 < tmpAccountSum.Balance03)
                {
                    if (_displayInfo)
                    {
                        if (ok)
                        {
                            //Recorded Hours differ from defined Working Hours for the day.
                            warning("@SYS190511");
                        }

                        //Date: %1 - Recorded Hours: %2 - Working Hours: %3 - Difference: %4
                        warning(strFmt("@SYS183943", tmpAccountSum.TransDate, tmpAccountSum.Balance03, tmpAccountSum.Balance02, tmpAccountSum.Balance03-tmpAccountSum.Balance02));
                    }

                    ok = false;
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaxTimesheets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the maximum limit of timesheets for a certain period and resource has been reached
    /// </summary>
    /// <param name="_periodFrom">
    /// The date of the start of the period
    /// </param>
    /// <param name="_resourceRecId">
    /// The resource record ID.
    /// </param>
    /// <param name="_showInfolog">
    /// Boolean to indicate if the infolog should be displayed
    /// </param>
    /// <returns>
    /// Boolean indicating if the max limit is reached
    /// </returns>
    public static boolean checkMaxTimesheets(
        ProjPeriodFrom  _periodFrom,
        TSResourceRecId _resourceRecId,
        boolean         _showInfolog = false)
    {
        TSTimesheetTable    timesheetTable;
        boolean             ok              = true;
        int                 maxPerPeriod    = ProjParameters::find().MaxTimesheets;

        select count(RecId) from timesheetTable
            where timesheetTable.Resource   == _resourceRecId
               && timesheetTable.PeriodFrom == _periodFrom;

        int iTtlPrdExist =  int642int(timesheetTable.RecId);

        if (iTtlPrdExist > 0 && maxPerPeriod > 0)
        {
            if (iTtlPrdExist >= maxPerPeriod) //existing timesheets >= max parameter.  raise error and stop execution
            {
                ok = false;
                if (_showInfolog)
                {
                    //%1 timesheet(s) for this employee and period already exist.  Maximum allowed per employee and period is %2.
                    error(strFmt("@SYS183902",num2str(any2int(iTtlPrdExist),1,0,1,0),num2str(maxPerPeriod,1,0,1,0)));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the timesheet can be approved or posted based on the related project status and the project status rules.
    /// </summary>
    /// <returns>
    /// Returns true if the timesheet can be posted or approved based on the project status and project rules; otherwise, returns false.
    /// </returns>
    public boolean checkProjId()
    {
        TSTimesheetLine timesheetLine;

        while select timesheetLine
            where timesheetLine.TimesheetNbr == this.TimesheetNbr
        {
            if (!timesheetLine.checkProjId())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TSTimesheetNbr _timesheetNbr)
    {
        return    _timesheetNbr
               && (select firstonly RecId from tsTimesheetTable
                      where tsTimesheetTable.TimesheetNbr == _timesheetNbr).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TSTimesheetTable find(
        TSTimesheetNbr _timesheetNbr,
        boolean        _forupdate = false)
    {
        TSTimesheetTable tsTimesheetTable = null;

        tsTimesheetTable.selectForUpdate(_forupdate);

        if (_timesheetNbr)
        {
            select firstonly tsTimesheetTable
                where tsTimesheetTable.TimesheetNbr == _timesheetNbr;
        }

        return tsTimesheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TSTimesheetTable</c> record that has a specified record ID of a
    /// <c>SourceDocumentHeader</c> record.
    /// </summary>
    /// <param name="_sourceDocument">
    /// The record ID of the <c>SourceDocumentHeader</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>TSTimesheetTable</c> record.
    /// </returns>
    public static TSTimesheetTable findBySourceDocument(
        RecId   _sourceDocument,
        boolean _forUpdate = false)

    {
        TSTimesheetTable    tsTimesheetTable;
        CompanyInfo         companyInfo;
        ProjParameters      projParameters;

        container c = [curext()];

        while select crossCompany DataArea from companyInfo
            exists join projParameters
                where projParameters.DataAreaId                  == companyInfo.DataArea
                  &&  projParameters.EnableIntercompanyTimesheet == NoYes::Yes
        {
            if (companyInfo.DataArea != curext())
            {
                c += [companyInfo.DataArea];
            }
        }

        if (_sourceDocument)
        {
            tsTimesheetTable.selectForUpdate(_forUpdate);

            select firstonly crossCompany:c tsTimesheetTable
                where tsTimesheetTable.SourceDocumentHeader == _sourceDocument;
        }

        return tsTimesheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static TSTimesheetTable findRecId(
        RecId   _recId,
        boolean _forUpdate = false)

    {
        TSTimesheetTable tsTimesheetTable;

        if (_recId)
        {
            tsTimesheetTable.selectForUpdate(_forUpdate);

            select firstonly tsTimesheetTable
                where tsTimesheetTable.RecId == _recId;
        }

        return tsTimesheetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetNumberFromResourceAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Find a timesheet number for the given resource and date.
    /// </summary>
    /// <param name="_resource">
    ///     The <c>RecId</c> of the resource.
    /// </param>
    /// <param name="_timesheetDate">
    ///     The date for the Timesheet in a timesheet period
    /// </param>
    /// <returns>
    ///     A <c>TSTimesheetNbr</c> object.
    /// </returns>
    internal static TSTimesheetNbr getTimesheetNumberFromResourceAndDate(ResourceRecId _resource, TSDate _timesheetDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TSTimesheetTable tsTimesheetTable;
        select firstonly TimesheetNbr from tsTimesheetTable
            where tsTimesheetTable.Resource == _resource
                && tsTimesheetTable.PeriodFrom <= _timesheetDate
                && TSTimesheetTable.PeriodTo >= _timesheetDate;

        return tsTimesheetTable.TimesheetNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAlternateKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the alternate key for <c>TSTimesheetTable</c> including the company Id.
    /// </summary>
    /// <param name="_recId">
    /// The record Id to search for.
    /// </param>
    /// <returns>
    /// A container value of the company Id and alternate key.
    /// </returns>
    public static container getAlternateKey(RecId _recId)
    {
        TSTimesheetTable tsTimesheetTable;

        select firstonly crossCompany TimesheetNbr from tsTimesheetTable
            where tsTimesheetTable.RecId == _recId;

        return [tsTimesheetTable.DataAreaId, tsTimesheetTable.TimesheetNbr];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimesheetQuery</Name>
				<Source><![CDATA[
    public static Query getTimesheetQuery(
        TSTimesheetNbr  _excludeTimesheet,
        TSResourceRecId _resourceRecId,
        ProjPeriodId    _periodId,
        TSDate          _periodFrom,
        TSDate          _periodTo)
    {
        Query                query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(TSTimesheetTable));

        qbds.addRange(fieldNum(TSTimesheetTable, TimesheetNbr)).value(SysQuery::valueNot(_excludeTimesheet));
        qbds.addRange(fieldNum(TSTimesheetTable, Resource)).value(queryValue(_resourceRecId));
        qbds.addRange(fieldNum(TSTimesheetTable, ProjPeriodId)).value(queryValue(_periodId));
        qbds.addRange(fieldNum(TSTimesheetTable, PeriodFrom)).value(queryRange(_periodFrom, _periodTo));
        qbds.addRange(fieldNum(TSTimesheetTable, PeriodTo)).value(queryRange(_periodFrom, _periodTo));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidResourcePeriod</Name>
				<Source><![CDATA[
    public static ProjPeriodLine getValidResourcePeriod(
        TSResourceRecId _resourceRecId,
        TSPeriodFrom    _selectedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ResourceSetup   resourceSetup = ResourceSetup::find(_resourceRecId);
        ProjPeriodLine  projPeriod    = ProjPeriodLine::findFromPeriod(resourceSetup.periodId(), _selectedDate);

        if (projPeriod.RecId == 0)
        {
            checkFailed(strFmt("@Timesheet:TimeSheetsNotCreated", curExt(), TSResource::worker(_resourceRecId).name()));
        }

        return projPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnyValidResourcePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get any resource period regardless of legal entity
    /// </summary>
    /// <param name = "_resourceRecId">ResourceID for worker</param>
    /// <param name = "_selectedDate">Date range to check</param>
    /// <returns>Project period id for resource/date range</returns>
    public static ProjPeriodLine getAnyValidResourcePeriod(
        TSResourceRecId _resourceRecId,
        TSPeriodFrom    _selectedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        ResourceSetup   resourceSetup;

        select firstonly resourceSetup
            where resourceSetup.Resource == _resourceRecId;

        ProjPeriodLine  projPeriod = ProjPeriodLine::findFromPeriod(resourceSetup.periodId(), _selectedDate);

        return projPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether budget control for project is enabled for the specified timesheet.
    /// </summary>
    /// <param name="_sourceDocumentHeaderRecId">
    /// The record ID of the source document header of timesheets
    /// </param>
    /// <returns>
    /// true if the budget control for the project is enabled for the specified timesheets; otherwise,
    /// false.
    /// </returns>
    public static boolean isProjectBudgetControlEnabled(RecId _sourceDocumentHeaderRecId)
    {
        AccountingDistribution  accountingDistribution;

        if (_sourceDocumentHeaderRecId)
        {
            ProjectAccountingDistribution   projectAccountingDistribution;
            ProjTable                       projTable;

            select firstonly RecId from accountingDistribution
                where accountingDistribution.SourceDocumentHeader == _sourceDocumentHeaderRecId
                exists join projectAccountingDistribution
                    where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
                exists join projTable
                    where projTable.RecId        == projectAccountingDistribution.ProjTable
                       && projTable.UseBudgeting == NoYes::Yes;
        }

        return accountingDistribution.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTimesheetNbr</Name>
				<Source><![CDATA[
    public static TSTimesheetNbr newTimesheetNbr()
    {
        NumberSeq numberSeq = NumberSeq::newGetNum(ProjParameters::numRefTimesheetNbr(),true);

        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDateEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string representation of an interval of dates, formatted for display purposes.
    /// </summary>
    /// <param name="_fromDate">
    /// The starting date of the interval.
    /// </param>
    /// <param name="_toDate">
    /// The ending date of the interval.
    /// </param>
    /// <returns>
    /// A string that contains the formatted date interval.
    /// </returns>
    /// <remarks>
    /// The dates are formatted according to the regional settings of the client.
    /// </remarks>
    public static DateInterval startDateEndDate(
        PeriodDate _fromDate,
        PeriodDate _toDate)
    {
        return strFmt('%1 - %2', date2StrUsr(_fromDate, DateFlags::FormatAll), date2StrUsr(_toDate, DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS190437";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineStatus</Name>
				<Source><![CDATA[
    public static void updateLineStatus(
        TSTimesheetNbr _timesheetNbr,
        TSAppStatus    _status)
    {
        TSTimesheetLine     timesheetLine;
        TSTimesheetTrans    timesheetTrans;

        ttsbegin;
        update_recordset timesheetLine setting ApprovalStatus = _status
            where timesheetLine.TimesheetNbr == _timesheetNbr;

        update_recordset timesheetTrans setting ApprovalStatus = _status
            where timesheetTrans.TimesheetNbr == _timesheetNbr;
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@sys318122</DeveloperDocumentation>
	<Label>@SYS333852</Label>
	<SingularLabel>@SYS138979</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>Resource</TitleField1>
	<TitleField2>TimesheetNbr</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TimesheetIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<CreatedTransactionId>Yes</CreatedTransactionId>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<ModifiedTransactionId>Yes</ModifiedTransactionId>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>TimesheetIdx</PrimaryIndex>
	<ReplacementKey>TimesheetIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>TSPolicyViolationsCache</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TSPolicyViolationsCache</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeSheetDetails</Name>
			<Label>@SYS190447</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovalStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workflow</Name>
			<Label>@SYS103643</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TimesheetNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>totalHours</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowSummary</Name>
			<Label>@SYS319419</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>totalHours</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTimesheetPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TSAppStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWorkflowToBeResubmitted</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodFrom</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSPeriodFrom</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PeriodTo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSPeriodTo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostStatus</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>TSPostStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPeriodId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjPeriodId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjPeriodTimesheetWeek</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TimesheetNbr</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TSTimesheetNbr</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TSResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TimesheetIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjPeriodTimesheetWeekIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjPeriodTimesheetWeek</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceTimesheetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TimesheetNbr</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourcePeriodIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPeriodId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreatedTransactionIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedTransactionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPeriodId</Name>
					<SourceEDT>ProjPeriodId</SourceEDT>
					<Field>ProjPeriodId</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjPeriodTimesheetWeek</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjPeriodTimesheetWeek</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPeriodTimesheetWeek</Name>
					<Field>ProjPeriodTimesheetWeek</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentHeader</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SourceDocumentHeader_ProjectTimesheets</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TSTimesheetApprovalSummary</Name>
			<RelatedTable>TSTimesheetApprovalSummary</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TimesheetNbr</Name>
					<Field>TimesheetNbr</Field>
					<RelatedField>TimesheetNbr</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TSTimesheetEntryTotalsPart</Name>
			<RelatedTable>TSTimesheetEntryTotalsPart</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>Resource</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPeriodTimesheetWeek</Name>
					<Field>ProjPeriodTimesheetWeek</Field>
					<RelatedField>ProjPeriodTimesheetWeek</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WorkerResourceView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WorkerResourceView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceWorkerView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceWorkerView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>