<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationProfile</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetDepreciationProfile extends common
{
    #IsoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accrualCalendar</Name>
				<Source><![CDATA[
    edit AssetAccrualCalendar accrualCalendar(
        boolean                 _set,
        AssetAccrualCalendar    _accrualCalendar)
    {
        AssetAccrualCalendar    assetAccrualCalendar;
        AssetAccrual            assetAccrual;

        if (_set)
        {
            assetAccrual = this.getAssetAccrual(_accrualCalendar);
        }

        if (_set)
        {
            assetAccrual = this.updateProfile(assetAccrual, this.Accrual);
        }

        assetAccrualCalendar = this.getAssetAccrualCalendar();

        return assetAccrualCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>AssetAccrual</c> value.
    /// </summary>
    /// <param name="_accrualCalendar">
    /// The <c>AssetAccrualCalendar</c> value.
    /// </param>
    /// <returns>
    /// Returns the <c>AssetAccrual</c> value.
    /// </returns>
    [Wrappable(true)]
    protected final AssetAccrual getAssetAccrual(AssetAccrualCalendar _accrualCalendar)
    {
        AssetAccrual assetAccrual;

        // Set the local Accrual field so we can pass it into these methods.
        switch (_accrualCalendar)
        {
            case AssetAccrualCalendar::Daily:
                assetAccrual = AssetAccrual::Daily;
                break;

            case AssetAccrualCalendar::Monthly:
                assetAccrual = AssetAccrual::Monthly;
                break;

            case AssetAccrualCalendar::Quarterly:
                assetAccrual = AssetAccrual::Quarterly;
                break;

            case AssetAccrualCalendar::HalfYearly:
                assetAccrual = AssetAccrual::HalfYearly;
                break;

            default:
                assetAccrual = AssetAccrual::Yearly;
        }

        return assetAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetAccrualCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>AssetAccrualCalendar</c> value.
    /// </summary>
    /// <returns>
    /// Returns the <c>AssetAccrualCalendar</c> value.
    /// </returns>
    [Wrappable(true)]
    protected final AssetAccrualCalendar getAssetAccrualCalendar()
    {
        AssetAccrualCalendar assetAccrualCalendar;

        switch (this.Accrual)
        {
            case AssetAccrual::Daily:
                assetAccrualCalendar = AssetAccrualCalendar::Daily;
                break;

            case AssetAccrual::Monthly:
                assetAccrualCalendar = AssetAccrualCalendar::Monthly;
                break;

            case AssetAccrual::Quarterly:
                assetAccrualCalendar = AssetAccrualCalendar::Quarterly;
                break;

            case AssetAccrual::HalfYearly:
                assetAccrualCalendar = AssetAccrualCalendar::HalfYearly;
                break;

            default:
                assetAccrualCalendar = AssetAccrualCalendar::Yearly;
        }

        return assetAccrualCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accrualFiscal</Name>
				<Source><![CDATA[
    edit AssetAccrualFiscal accrualFiscal(
        boolean             _set,
        AssetAccrualFiscal  _accrualFiscal)
    {
        AssetAccrual assetAccrual;

        if (_set)
        {
            switch (_accrualFiscal)
            {
                case AssetAccrualFiscal::FiscalPeriod:
                    assetAccrual = AssetAccrual::FiscalPeriod;
                    break;

                // <GJP>
                case AssetAccrualFiscal::Quarterly:
                    assetAccrual = AssetAccrual::Quarterly;
                    break;
                // </GJP>

                default:
                    assetAccrual = AssetAccrual::Yearly;
            }
        }

        if (_set)
        {
            assetAccrual = this.updateProfile(assetAccrual, this.Accrual);
        }

        switch (this.Accrual)
        {
            case AssetAccrual::FiscalPeriod:
                return AssetAccrualFiscal::FiscalPeriod;

            // <GJP>
            case AssetAccrual::Quarterly:
                return AssetAccrualFiscal::Quarterly;
            // </GJP>

            default:
                return AssetAccrualFiscal::Yearly;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProfile</Name>
				<Source><![CDATA[
    private AssetAccrual updateProfile(AssetAccrual _assetAccrual, AssetAccrual _originalAssetAccrual)
    {
        if (_originalAssetAccrual && _assetAccrual !=  _originalAssetAccrual)
        {
            if (Box::okCancel("@FixedAssets:FA_Message_ActionButton_UpdatePeriodFrequency", DialogButton::Cancel) == DialogButton::Ok)
            {
                this.updateBasedOnAccrual(_assetAccrual, _originalAssetAccrual);
                this.updateLifeTime();
            }
            else
            {
                return _originalAssetAccrual;
            }
        }
        else
        {
            this.updateBasedOnAccrual(_assetAccrual, _originalAssetAccrual);
        }
        return _assetAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnAccrual</Name>
				<Source><![CDATA[
    private boolean updateBasedOnAccrual(AssetAccrual _assetAccrual, AssetAccrual _originalAssetAccrual)
    {
        boolean returnValue = true;

        //Fiscal
        if (this.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            if (_assetAccrual == AssetAccrual::Daily
                || _assetAccrual == AssetAccrual::Monthly
                || _assetAccrual == AssetAccrual::HalfYearly)
            {
                returnValue = false;
                checkFailed(strFmt("@FixedAssets:FA_MessageError_InvalidCalendarValue", this.Profile));
            }

            if (_originalAssetAccrual != _assetAccrual)
            {
                if (!AssetBookTable::validateAccrualAndYearOnProfile(this.Profile, this.DepreciationYear, _assetAccrual))
                {
                    returnValue = false;
                    checkFailed(strfmt("@FixedAssets:FA_MessageError_PeriodFrequencyCannotBeChanged", this.Profile));
                }
                else
                {
                    this.Accrual = _assetAccrual;
                }

                // <GJP>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
                {
                    if (_assetAccrual != AssetAccrual::FiscalPeriod
                        && this.SmoothDepForTheYearOver95_JP == NoYes::Yes)
                    {
                        this.SmoothDepForTheYearOver95_JP = NoYes::No;
                    }
                }
                // </GJP>
            }
        }
        else
        {
            if (_assetAccrual == AssetAccrual::FiscalPeriod)
            {
                returnValue = false;
                checkFailed(strFmt("@FixedAssets:FA_MessageError_InvalidFiscalValue", this.Profile));
            }

            //Calendar
            if (_originalAssetAccrual != _assetAccrual)
            {
                if (_assetAccrual == AssetAccrual::Daily &&
                    (this.Method == AssetDepreciationMethod::Consumption ||
                    this.Method == AssetDepreciationMethod::Factor ||
                    this.Method == AssetDepreciationMethod::Manual ||
                    this.Method == AssetDepreciationMethod::LowValuePool))
                {
                    returnValue = false;
                    checkFailed(strfmt("@FixedAssets:FA_MessageError_DailyAccrualNotSupported", this.Profile));
                }
                else
                {
                    if (!AssetBookTable::validateAccrualAndYearOnProfile(this.Profile, this.DepreciationYear, _assetAccrual))
                    {
                        returnValue = false;
                        checkFailed(strfmt("@FixedAssets:FA_MessageError_PeriodFrequencyCannotBeChanged", this.Profile));
                    }
                    else
                    {
                        this.Accrual = _assetAccrual;

                        // <GJP>
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                        && this.Accrual == AssetAccrual::Yearly)
                        {
                            this.SmoothDepForTheYearOver95_JP = NoYes::No;
                        }
                        // </GJP>
                    }
                }
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLifeTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will update the depreciation periods on AssetGroupBooksetup
    /// when period frequency is modified on the depreciation profile.
    /// </summary>
    private void updateLifeTime()
    {
        AssetGroupBookSetup assetGroupBookSetup;

        ttsbegin;

        while select forupdate assetGroupBookSetup
            where assetGroupBookSetup.DepreciationProfile == this.Profile
        {
            assetGroupBookSetup.calcLifeTime(this);
            assetGroupBookSetup.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLifeTime</Name>
				<Source><![CDATA[
    public boolean checkLifeTime()
    {
        boolean ret = false;

        // <GEEPL>
        if (this.RecId && this.Method != AssetDepreciationMethod::StraightLinePercentage_PL)
        // </GEEPL>
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteShiftDepreciation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to delete the shift Depreciation lines from AssetShiftDepreciationProfile_IN, AssetBookTableShiftDepreciation_IN,AssetBookShiftDepreciation_IN
    /// </summary>
    public void deleteShiftDepreciation_IN()
    {
        //<GIN>
        AssetShiftDepreciationProfile_IN    assetShiftDepreciationProfile_IN;
        AssetBookTableShiftDepreciation_IN  assetBookTableShiftDepreciation_IN;
        AssetBookShiftDepreciation_IN       assetBookShiftDepreciation_IN;
        AssetBookTable                      assetBookTable;
        AssetBook                           assetBook;

        delete_from assetShiftDepreciationProfile_IN
            where assetShiftDepreciationProfile_IN.Profile == this.Profile;

        delete_from assetBookTableShiftDepreciation_IN
        exists join assetBookTable
            where assetBookTable.BookId              == assetBookTableShiftDepreciation_IN.BookId
               && assetBookTable.DepreciationProfile == this.Profile;

        delete_from assetBookShiftDepreciation_IN
        exists join assetBook
            where assetBook.AssetId             == assetBookShiftDepreciation_IN.AssetId
               && assetBook.BookId              == assetBookShiftDepreciation_IN.BookId
               && assetBook.DepreciationProfile == this.Profile;
        //</GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinDepType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determins the depreciation type.
    /// </summary>
    /// <returns>
    /// The depreciation type.
    /// </returns>
    public AssetDepType_JP determinDepType_JP()
    {
        AssetDepType_JP     ret = AssetDepType_JP::OrdinaryDepreciation;
        if (this.Method == AssetDepreciationMethod::AdditionalDepreciation_JP)
        {
            ret = (this.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
                ? AssetDepType_JP::AdditionalDepreciationWithDirectOff
                : AssetDepType_JP::AdditionalDepreciationWithReserve;
        }
        else if (this.Method == AssetDepreciationMethod::SpecialDepreciation_JP)
        {
            ret = (this.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
                ? AssetDepType_JP::SpecialDepreciationWithDirectOff
                : AssetDepType_JP::SpecialDepreciationWithReserve;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewShiftDepreciationMethod_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This methods checks for the Method attached is of StraightLine Or StraightLineLifeRemaining.
    /// </summary>
    /// <returns>
    /// Returns true, if Method attached is of StraightLine Or StraightLineLifeRemaining otherwise false.
    /// </returns>
    /// <remarks>
    /// New depreciation provisions of 2013 Act are made applicable w.e.f. 1st April,2014.
    /// the provisions should be complied right from April, 2014 mandatorily as the carrying cost is to be depreciated in remaining
    /// useful life of an asset as per Schedule II, and where remaining useful life is Nil, carrying cost (after retaining residual value) is to
    /// be recognized in opening balance of retained earnings.
    /// Hence two below methods are made available for India depreciation calculation.
    /// </remarks>

    public boolean isNewShiftDepreciationMethod_IN()
    {
        // <GIN>
        boolean ret;

        if (this.Method == AssetDepreciationMethod::StraightLine
            || this.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
        {
            ret = true;
        }

        return ret;
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShiftDepreciationMethod_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if DayBased depreciation calculation is applicable for the attached method.
    /// </summary>
    /// <returns>
    /// Returns true if DayBased depreciation calculation is applicable for the attached method.
    /// </returns>
    public boolean isShiftDepreciationMethod_IN()
    {
        // <GIN>
        boolean ret;

        if (this.Method == AssetDepreciationMethod::ReducingBalance
            || this.Method == AssetDepreciationMethod::StraightLinePercentage_IN
            || this.Method == AssetDepreciationMethod::StraightLine
            || this.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
        {
            ret = true;
        }

        return ret;
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearValues</Name>
				<Source><![CDATA[
    private void clearValues()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            this.NumOfYearsEquallyDivided_JP = 0;
            this.AssetDepRateSchedule_JP = 0;
            this.SpecialDepAccountingMethod_JP = AssetSpecialDepAccountingMethod_JP::DirectOff;
            this.SpecialDepApplyNumOfPeriods_JP = 0;
            this.SpecialDepBaseRatio_JP = 0;
            this.SpecialDepRate_JP = 0;
            this.SmoothDepForTheYearOver95_JP = 0;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAU]))
        {
            this.lvpLowValueCost_AU = 0;
            this.lvpPercentage_AU = 0;
            this.lvpFirstYearPercentage_AU = 0;
        }

        this.DepreciationYear = AssetDepreciationYear::Calendar;
        this.interval = AssetDepreciationInterval::Monthly;
        this.AssetEndDependOnServiceLife = 0;
        this.calculationBase = AssetDepreciationCalculationBase::Days;
        this.Percentage = 0;
        this.Accrual = AssetAccrual::Yearly;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDE]))
        {
            this.FullYearDepreciation_DE = NoYes::No;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAT]))
        {
            this.HalfYearDepreciation_AT = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        AssetParameters                 assetParameters;
        AssetParametersDeprRates_DE     assetParametersDeprRates;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(AssetDepreciationProfile, Percentage):
                this.Percentage = min(100,max(0, this.Percentage));
                break;
            case fieldNum(AssetDepreciationProfile, lvpFirstYearPercentage_AU):
                this.lvpFirstYearPercentage_AU = min(100,max(0, this.lvpFirstYearPercentage_AU));
                break;
            case fieldNum(AssetDepreciationProfile, lvpPercentage_AU):
                this.lvpPercentage_AU = min(100,max(0, this.lvpPercentage_AU));
                break;
            case fieldNum(AssetDepreciationProfile, DepreciationYear):
                if (this.DepreciationYear != this.orig().DepreciationYear)
                {
                this.Accrual = AssetAccrual::Yearly;
                }
                // <GIN>
                if (AssetParameters::isDepreciationCompaniesActEnable_IN())
                {
                    if (this.Method == AssetDepreciationMethod::StraightLinePercentage_IN
                        || this.Method == AssetDepreciationMethod::ReducingBalance)
                    {
                        this.ShiftDepreciation_IN = (this.DepreciationYear == AssetDepreciationYear::Fiscal);
                    }
                }
                // </GIN>

                break;
            case fieldNum(AssetDepreciationProfile, Method):

                if (this.Method != this.orig().Method)
                {
                    this.clearValues();
                }

                // If the depreciation method is Reducing Balance and we are checking for maximum RB percentage
                assetParameters             = AssetParameters::find();
                assetParametersDeprRates    = AssetParametersDeprRates_DE::findByDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                if (this.Method == AssetDepreciationMethod::ReducingBalance
                    && assetParameters.CheckMaxPercentRB
                    && assetParametersDeprRates.MaxPercentRB)
                {
                    // Set the percentage to the max allowed initially
                    this.Percentage = assetParametersDeprRates.MaxPercentRB;
                }

                // <GIN>
                if (AssetParameters::isDepreciationCompaniesActEnable_IN()
                    && this.Method != this.orig().Method)
                {
                    if (this.Method == AssetDepreciationMethod::StraightLinePercentage_IN)
                    {
                        this.DepreciationYear = AssetDepreciationYear::Fiscal;
                    }

                    if (this.Method == AssetDepreciationMethod::StraightLine
                        || this.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
                    {
                        this.ShiftDepreciation_IN = NoYes::No;
                    }
                    else if ((this.Method == AssetDepreciationMethod::StraightLinePercentage_IN
                            || this.Method == AssetDepreciationMethod::ReducingBalance) && this.DepreciationYear == AssetDepreciationYear::Fiscal)
                    {
                        this.ShiftDepreciation_IN = NoYes::Yes;
                    }
                }
                // </GIN>
                // <GJP>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                    && AssetDepreciationProfile::isDepMethod_JP(this.Method))
                {
                    if (this.Method == AssetDepreciationMethod::ElectronicDepreciation_JP)
                    {
                        this.DepreciationYear               = AssetDepreciationYear::Calendar;
                        this.Accrual                        = AssetAccrual::Yearly;
                        this.SmoothDepForTheYearOver95_JP   = NoYes::No;
                    }
                    else
                    {
                    this.DepreciationYear   = AssetDepreciationYear::Fiscal;
                    this.Accrual            = AssetAccrual::FiscalPeriod;
                    }
                }
                // </GJP>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAT]))
                {
                    if (AssetTableDepConv_HalfYearStart::isHalfYearDepreciationMethod_AT(this.Method))
                    {
                        this.HalfYearDepreciation_AT = assetParameters.HalfYearDepreciation_AT;
                    }
                    else
                    {
                        if (this.HalfYearDepreciation_AT)
                        {
                            this.HalfYearDepreciation_AT = false;
                        }
                    }
                    if (this.HalfYearDepreciation_AT)
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceAT00007, funcName());
                    }
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDE]))
                {
                    if (this.Method != AssetDepreciationMethod::StraightLineLifeRemaining && this.FullYearDepreciation_DE)
                    {
                        this.FullYearDepreciation_DE = false;
                    }
                }

                break;
            case fieldNum(AssetDepreciationProfile, lvpPercentage_AU):
                this.lvpPercentage_AU = min(100,max(0, this.lvpPercentage_AU));
                break;
            case fieldNum(AssetDepreciationProfile, lvpFirstYearPercentage_AU):
                this.lvpFirstYearPercentage_AU = min(100,max(0, this.lvpFirstYearPercentage_AU));
                break;
            // <GJP>
            case fieldNum(AssetDepreciationProfile, Accrual):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                    && this.Accrual == AssetAccrual::Yearly)
                {
                    this.SmoothDepForTheYearOver95_JP = NoYes::No;
                }
                break;
            // </GJP>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean         ret;

        ret = super(_p1);

        if (ret)
        {
            switch (_p1)
            {
                case fieldNum(AssetDepreciationProfile, Method):
                    if (!AssetBookTable::validateDepreciationMethodOnProfile(this.Profile, this.Method) ||
                       !AssetGroupBookSetup::validateDepreciationMethodOnProfile(this.Profile, this.Method) ||
                       !AssetBook::validateDepreciationMethodOnProfile(this.Profile, this.Method))
                    {
                        ret = checkFailed("@SYS99535");
                    }

                    break;

                case fieldNum(AssetDepreciationProfile, DepreciationYear):

                    if (!AssetBookTable::validateAccrualAndYearOnProfile(this.Profile, this.DepreciationYear, this.Accrual) ||
                       !AssetGroupBookSetup::validateAccrualAndYearOnProfile(this.Profile, this.DepreciationYear, this.Accrual) ||
                       !AssetBook::validateAccrualAndYearOnProfile(this.Profile, this.DepreciationYear, this.Accrual))
                        {
                            ret = checkFailed("@SYS99536");
                        }

                    break;

                case fieldNum(AssetDepreciationProfile, AssetEndDependOnServiceLife):

                    // French Derogatory depreciation requires Full Depreciation to be marked for derogatory
                    // related value models and reducing balance depreciation profiles.
                    if (AssetDepreciationProfile::isReducingBalanceDepreciationMethod(this.Method) &&
                        !this.AssetEndDependOnServiceLife &&
                        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
                    {
                        AssetBookTable      assetBookTable;
                        AssetGroupBookSetup assetGroupBookSetup;
                        AssetBook           assetBook;

                        select firstonly RecId from assetBookTable
                            where (assetBookTable.DepreciationProfile    == this.Profile
                                || assetBookTable.DepreciationAltProfile == this.Profile)
                               && (assetBookTable.AssetDerogatoryModel_FR
                                || assetBookTable.IsDerogatoryBook_FR);

                        if (!assetBookTable.RecId)
                        {
                            AssetBookTable assetBookTableJoin;

                            // AssetGroupBookSetup table doesn't contain FR derogatory fields,
                            // so validating it in join with AssetBookTable.
                            select firstonly RecId from assetGroupBookSetup
                                where assetGroupBookSetup.DepreciationProfile    == this.Profile
                                   || assetGroupBookSetup.DepreciationAltProfile == this.Profile
                            join RecId from assetBookTableJoin
                                where assetBookTableJoin.BookId == assetGroupBookSetup.BookId
                                   && (assetBookTableJoin.AssetDerogatoryModel_FR
                                    || assetBookTableJoin.IsDerogatoryBook_FR);
                        }

                        if (!assetBookTable.RecId && !assetGroupBookSetup.RecId)
                        {
                            select firstonly RecId from assetBook
                                where (assetBook.DepreciationProfile    == this.Profile
                                    || assetBook.DepreciationAltProfile == this.Profile)
                                   && (assetBook.AssetDerogatoryModel_FR
                                    || assetBook.IsDerogatoryBook_FR);
                        }

                        // If there is a value model that references this depreciation profile,
                        // inform a user that full depreciation cannot be unselected.
                        if (assetBookTable.RecId || assetGroupBookSetup.RecId || assetBook.RecId)
                        {
                            // This profile is used for derogatory depreciation. You cannot clear the Full depreciation check box.
                            ret = checkFailed("@SYS112595");
                        }
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the field value of the instance of the <c>AssetDepreciationProfile</c> class.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean             ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(AssetDepreciationProfile, Method):
                        // <GCN>
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN])
                            && !AssetParameters::isDepreciationMethodsEnabled()
                            && conFind([AssetDepreciationMethod::SumYearDigits_CN,
                                     AssetDepreciationMethod::DoubleReduceBalance_CN],
                                     this.Method))
                        {
                            ret = checkFailed("@GLS61013");
                        }
                        // </GCN>
                        // <GIN>
                        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
                        {
                            if (this.orig().Method  != this.Method
                                && !this.isShiftDepreciationMethod_IN()
                                && AssetShiftDepreciationProfile_IN::existByProfileId(this.Profile))
                            {
                                ret = checkFailed(strFmt("@SYS4000968", this.Method, this.DepreciationYear));
                            }

                            if (this.Method == AssetDepreciationMethod::StraightLinePercentage_IN)
                            {
                                if (this.checkBookCalendarIsNotDayBased_IN(tableNum(AssetBookTable),      fieldNum(AssetBookTable, DepreciationProfile),      fieldNum(AssetBookTable, BookId)) ||
                                    this.checkBookCalendarIsNotDayBased_IN(tableNum(AssetGroupBookSetup), fieldNum(AssetGroupBookSetup, DepreciationProfile), fieldNum(AssetGroupBookSetup, BookId)) ||
                                    this.checkBookCalendarIsNotDayBased_IN(tableNum(AssetBook),           fieldNum(AssetBook, DepreciationProfile),           fieldNum(AssetBook, BookId)))
                                {
                                    ret = checkFailed("@FixedAssets:FA_MessageValidation_CannotChangeToStraightLinePercentageMethod");
                                }
                            }
                        }
                        else
                        {
                            if (this.Method == AssetDepreciationMethod::StraightLinePercentage_IN)
                            {
                                ret = checkFailed("@SYS4081924");
                            }
                        }
                        // </GIN>
                    break;
                case fieldStr(AssetDepreciationProfile, DepreciationYear):
                        // <GIN>
                        if (this.orig().DepreciationYear != this.DepreciationYear
                            && this.DepreciationYear     == AssetDepreciationYear::Calendar
                            && this.Method               == AssetDepreciationMethod::ReducingBalance
                            && AssetParameters::isDepreciationCompaniesActEnable_IN()
                            && AssetShiftDepreciationProfile_IN::existByProfileId(this.Profile))
                        {
                            ret = checkFailed(strFmt("@SYS4000968", this.Method, this.DepreciationYear));
                        }
                        // </GIN>
                    break;
	            // <GJP>
	            case fieldStr(AssetDepreciationProfile, SpecialDepBaseRatio_JP):
	                if (this.SpecialDepBaseRatio_JP < 0 || this.SpecialDepBaseRatio_JP > 1)
	                {
	                    ret = checkFailed(strFmt("@SYS344093", "@FixedAssetsIncentiveDepreciation:SYP4880101", 0, 1));
	            }
	                break;
	            case fieldStr(AssetDepreciationProfile, SpecialDepRate_JP):
	                if (this.SpecialDepRate_JP < 0 || this.SpecialDepRate_JP > 1)
	                {
	                    ret = checkFailed(strFmt("@SYS344093", "@FixedAssetsIncentiveDepreciation:SYP4880103", 0, 1));
	                }
	            // </GJP>
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBookCalendarIsNotDayBased_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the record has a value model that contains fiscal calendar with type other than day based.
    /// </summary>
    /// <param name = "_tableId"></param>
    /// <param name = "_depreciationProfileFieldId"></param>
    /// <param name = "_bookFieldId"></param>
    /// <returns></returns>
    private boolean checkBookCalendarIsNotDayBased_IN(TableId _tableId, FieldId _depreciationProfileFieldId, FieldId _bookFieldId)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTable = query.addDataSource(_tableId);
        qbdsTable.addRange(_depreciationProfileFieldId).value(this.Profile);

        QueryBuildDataSource qbdsAssetBookTable = qbdsTable.addDataSource(tableNum(AssetBookTable));
        qbdsAssetBookTable.addLink(_bookFieldId, fieldNum(AssetBookTable,BookId));
        qbdsAssetBookTable.addRange(fieldNum(AssetBookTable, CurrentOperationsTax)).value(SysQuery::valueNot(CurrentOperationsTax::Current));

        QueryBuildDataSource qbdsFiscalCalendar_IN = qbdsAssetBookTable.addDataSource(tableNum(FiscalCalendar_IN));
        qbdsFiscalCalendar_IN.joinMode(JoinMode::ExistsJoin);
        qbdsFiscalCalendar_IN.addLink(fieldNum(AssetBookTable, FiscalCalendar), fieldNum(FiscalCalendar_IN, RecId));
        qbdsFiscalCalendar_IN.addRange(fieldNum(FiscalCalendar_IN, CalendarType)).value(SysQuery::valueNot(CalendarType_IN::DayBased));

        QueryRun queryRun = new QueryRun(query);

        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConventionAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the convention can be modified based on the method from the current record.
    /// </summary>
    /// <returns>
    ///    true if the depreciation method allows modification of conventions; otherwise, false.
    /// </returns>
    public boolean isConventionAllowed()
    {
        boolean ret = AssetDepreciationProfile::isConventionAllowedForMethod(this.Method);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConventionAllowedForMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the convention can be modified based on the method received.
    /// </summary>
    /// <returns>
    ///    true if the depreciation method allows modification of conventions; otherwise, false.
    /// </returns>
    public static boolean isConventionAllowedForMethod(AssetDepreciationMethod _depreciationMethod)
    {
        boolean     ret = true;

        if (_depreciationMethod == AssetDepreciationMethod::Consumption ||
            _depreciationMethod == AssetDepreciationMethod::Factor ||
            _depreciationMethod == AssetDepreciationMethod::Manual ||
            _depreciationMethod == AssetDepreciationMethod::RBSL ||
            // <GEEPL>
            _depreciationMethod == AssetDepreciationMethod::ReducingBalance_PL ||
            _depreciationMethod == AssetDepreciationMethod::StraightLine_PL ||
            _depreciationMethod == AssetDepreciationMethod::StraightLinePercentage_PL ||
            // </GEEPL>
            // <GEEHU>
            _depreciationMethod == AssetDepreciationMethod::Factor_HU ||
            _depreciationMethod == AssetDepreciationMethod::MultiplicationFactor_HU ||
            _depreciationMethod == AssetDepreciationMethod::ReducingBalance_HU ||
            _depreciationMethod == AssetDepreciationMethod::StraightLine_HU ||
            // </GEEHU>
            _depreciationMethod == AssetDepreciationMethod::LowValuePool)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether the given depreciation parameters are applicable for the given depreciation profile.
    /// </summary>
    /// <param name="_assetDepreciationProfileId">The depreciation profile for which to be checked.</param>
    /// <param name="_assetLifeTime">The depreciation periods.</param>
    /// <param name="_assetDepreciationPercentage">The depreciation percentage; optional.</param>
    /// <param name="_profileMustExist">If true, check and show an error if the given depreciation profile doesn't exist; optional.</param>
    /// <param name="_assetUse">The depreciation output/mileage; optional.</param>
    /// <param name="_rate">The depreciation rate; optional.</param>
    /// <returns>
    ///   True if the depreciation profile is Ok; otherwise, false.
    /// </returns>
    public static boolean check(
        AssetDepreciationProfileId   _assetDepreciationProfileId,
        AssetLifeTime                _assetLifeTime,
        AssetDepreciationPercentage  _assetDepreciationPercentage = 0,
        boolean                      _profileMustExist = true,
        // <GEERU>
        real                         _assetUse            = 0,
        RAssetDepreciationRate       _rate                = 0
        // </GEERU>
        )
    {
        AssetDepreciationProfile    assetDepreciationProfile    = AssetDepreciationProfile::find(_assetDepreciationProfileId);
        AssetDepreciationPercentage assetDepreciationPercentage = _assetDepreciationPercentage;

        boolean ret = true;

        if (!_profileMustExist && !assetDepreciationProfile)
        {
            return ret;
        }
        if (!assetDepreciationProfile)
        {
            return checkFailed(strFmt("@SYS68303", _assetDepreciationProfileId));
        }

        if (!assetDepreciationPercentage)
        {
            assetDepreciationPercentage = assetDepreciationProfile.Percentage;
        }

        switch (assetDepreciationProfile.Method)
        {
            // <GEEPL>
            case AssetDepreciationMethod::StraightLinePercentage_PL:
                if (assetDepreciationPercentage <= 0)
                {
                    ret = checkFailed(strFmt("@SYS68355", AssetDepreciationMethod::StraightLinePercentage_PL));
                }
                // no break

            // </GEEPL>
            case AssetDepreciationMethod::StraightLine:
            case AssetDepreciationMethod::StraightLineLifeRemaining:
            case AssetDepreciationMethod::Factor:
            case AssetDepreciationMethod::RBSL:
            // <GCN>
            case AssetDepreciationMethod::DoubleReduceBalance_CN:
            case AssetDepreciationMethod::SumYearDigits_CN:
            // </GCN>
            // <GEEPL>
            case AssetDepreciationMethod::StraightLine_PL:
            // </GEEPL>
            // <GEEHU>
            case AssetDepreciationMethod::Factor_HU:
            case AssetDepreciationMethod::StraightLine_HU:
            // </GEEHU>
            // <GEERU>
            case AssetDepreciationMethod::SumYears_RU:
            case AssetDepreciationMethod::TaxNonLinearGroup_RU:
            // </GEERU>
                if (_assetLifeTime <= 0)
                {
                    ret = checkFailed(strFmt("@SYS68354", assetDepreciationProfile.Method));
                }
                // <GEERU>
                if (ret && _rate <= 0 && assetDepreciationProfile.Method == AssetDepreciationMethod::TaxNonLinearGroup_RU)
                {
                    ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_RateMustBeGreater", assetDepreciationProfile.Method));
                }
                // </GEERU>
                break;

            case AssetDepreciationMethod::ReducingBalance:
            // <GEEPL>
            case AssetDepreciationMethod::ReducingBalance_PL:
            // </GEEPL>
                if (assetDepreciationPercentage <= 0)
                {
                    ret = checkFailed(strFmt("@SYS68355", assetDepreciationProfile.Method));
                }
                break;
            // <GEERU>
            case AssetDepreciationMethod::Value_RU:
                if (_assetUse <= 0)
                {
                    ret = checkFailed(strFmt("@FixedAssets:FA_MessageValidation_MileageMustBeGreater", assetDepreciationProfile.Method));
                }
                break;
            // </GEERU>
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(AssetDepreciationProfileId  _assetDepreciationProfileId)
    {
        boolean ret = true;

        if (!AssetDepreciationProfile::exist(_assetDepreciationProfileId))
        {
            ret = checkFailed(strFmt(AssetDepreciationProfile::txtNotExist(), _assetDepreciationProfileId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(AssetDepreciationProfileId  _assetDepreciationProfileId)
    {
        boolean found;

        found = (select firstonly
                    RecId
                 from
                    assetDepreciationProfile
                 where
                    assetDepreciationProfile.Profile == _assetDepreciationProfileId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetDepreciationProfile find(
        AssetDepreciationProfileId  _assetDepreciationProfileId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDepreciationProfile assetDepreciationProfile;

        assetDepreciationProfile.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetDepreciationProfile.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetDepreciationProfile
        where
            assetDepreciationProfile.Profile == _assetDepreciationProfileId;

        return assetDepreciationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the specified record in the <c>AssetDepreciationProfile</c> table.
    /// </summary>
    /// <param name="_profileRecId">The record ID of the <c>AssetDepreciationProfile</c> table.</param>
    /// <param name="_forUpdate">A boolean value that indicates whether to read the record for update; optional.</param>
    /// <param name="_concurrencyModel">The concurrency model option to use when it reads the record; optional.</param>
    /// <returns>
    /// A record in the <c>AssetDepreciationProfile</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetDepreciationProfile findByRecId(
        RefRecId            _profileRecId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetDepreciationProfile assetDepreciationProfile;

        assetDepreciationProfile.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetDepreciationProfile.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetDepreciationProfile
            where assetDepreciationProfile.RecId == _profileRecId;

        return assetDepreciationProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoDeprAllowedForProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the auto depreciation is allowed for the depreciation profile.
    /// </summary>
    /// <param name="_depreciationProfile">
    ///    The ID of the depreciation profile to check.
    /// </param>
    /// <returns>
    ///    true if the depreciation method allows auto depreciation; otherwise, false.
    /// </returns>
    public static boolean isAutoDeprAllowedForProfile(AssetDepreciationProfileId _depreciationProfile)
    {
        AssetDepreciationProfile depreciationProfile = AssetDepreciationProfile::find(_depreciationProfile);
        boolean retValue = false;

        if (depreciationProfile
            && (depreciationProfile.Method == AssetDepreciationMethod::StraightLine
                || depreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining
                // <GJP>
                || depreciationProfile.Method == AssetDepreciationMethod::OldStraightLine_JP
                || depreciationProfile.Method == AssetDepreciationMethod::OldDecliningBalance_JP
                || depreciationProfile.Method == AssetDepreciationMethod::NewStraightLine_JP
                || depreciationProfile.Method == AssetDepreciationMethod::NewDecliningBalance250_JP
                || depreciationProfile.Method == AssetDepreciationMethod::NewDecliningBalance200_JP
                // </GJP>
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance125
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance150
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance175
                || depreciationProfile.Method == AssetDepreciationMethod::ReducingBalance200))
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConventionAllowedForProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the convention can be modified based on the method used by the depreciation profile.
    /// </summary>
    /// <param name="_depreciationProfile">
    ///    The ID of the depreciation profile to check.
    /// </param>
    /// <returns>
    ///    true if the depreciation method allows modification of conventions; otherwise, false.
    /// </returns>
    static boolean isConventionAllowedForProfile(AssetDepreciationProfileId _depreciationProfile)
    {
        AssetDepreciationProfile depreciationProfile = AssetDepreciationProfile::find(_depreciationProfile);
        boolean     ret = true;

        if (depreciationProfile && !depreciationProfile.isConventionAllowed())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciationMethodForCzech</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified depreciation method is a Czech depreciation method.
    /// </summary>
    /// <param name="_assetDepreciationMethod">
    /// The specified depreciation method.
    /// </param>
    /// <returns>
    /// true if it is a Czech depreciation method; otherwise, return false.
    /// </returns>
    public static boolean isDepreciationMethodForCzech(AssetDepreciationMethod _assetDepreciationMethod)
    {
        boolean ret = false;

        if (_assetDepreciationMethod == AssetDepreciationMethod::Accelerated_CZ
            || _assetDepreciationMethod == AssetDepreciationMethod::Regular_CZ)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepMethod_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified depreciation method is a Japan depreciation method.
    /// </summary>
    /// <param name="_assetDepreciationMethod">
    /// The specified depreciation method.
    /// </param>
    /// <returns>
    /// true if it is a Japan depreciation method; otherwise, return false.
    /// </returns>
    public static boolean isDepMethod_JP(AssetDepreciationMethod _assetDepreciationMethod)
    {
        boolean     ret = false;

        if (_assetDepreciationMethod    == AssetDepreciationMethod::OldStraightLine_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::OldDecliningBalance_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::NewStraightLine_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::NewDecliningBalance250_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::NewDecliningBalance200_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::EquallyDivided_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::Accelerated_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::SpecialDepreciation_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::AdditionalDepreciation_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::ElectronicDepreciation_JP)
        {
            ret = true;
        }

        return ret;
	  }

]]></Source>
			</Method>
			<Method>
				<Name>isDepMethodAllowAdditionalDep_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified depreciation method is allowed to use additional depreciation metod
    /// </summary>
    /// <param name="_depreciationMehod">
    /// The specified depreciation method.
    /// </param>
    /// <returns>
    /// true if it can be applied by additional depreciation; otherwise, return false.
    /// </returns>
    public static boolean isDepMethodAllowAdditionalDep_JP(AssetDepreciationMethod _depreciationMehod)
    {
        boolean ret;

        if (_depreciationMehod == AssetDepreciationMethod::NewStraightLine_JP
            || _depreciationMehod == AssetDepreciationMethod::NewDecliningBalance200_JP
            || _depreciationMehod == AssetDepreciationMethod::NewDecliningBalance250_JP)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepMethodAllowChangeCalendar_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified depreciation method is allowed to change calendar.
    /// </summary>
    /// <param name="_assetDepreciationMethod">
    /// The specified depreciation method.
    /// </param>
    /// <returns>
    /// true if it is allowed to change calendar; otherwise, return false.
    /// </returns>
    public static boolean isDepMethodAllowChangeCalendar_JP(AssetDepreciationMethod _assetDepreciationMethod)
    {
        boolean     ret;

        if (_assetDepreciationMethod    == AssetDepreciationMethod::OldStraightLine_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::OldDecliningBalance_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::NewStraightLine_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::NewDecliningBalance250_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::NewDecliningBalance200_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::EquallyDivided_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::Accelerated_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::SpecialDepreciation_JP
            || _assetDepreciationMethod == AssetDepreciationMethod::AdditionalDepreciation_JP)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciationMethodForCatchupMethod_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified depreciation method is allowed to use catch up method.
    /// </summary>
    /// <param name="_assetDepreciationMethod">
    /// The specified depreciation method.
    /// </param>
    /// <returns>
    /// true if it is allowed to use catch up method; otherwise, return false.
    /// </returns>
    public static boolean isDepreciationMethodForCatchupMethod_JP(AssetDepreciationMethod _assetDepreciationMethod)
    {
        boolean     ret;

        ret = AssetDepreciationProfile::isDepMethod_JP(_assetDepreciationMethod);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLowValuePoolDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the depreciation method used by the depreciation profile is of a low value pool type.
    /// </summary>
    /// <param name="_depreciationProfile">
    ///    The ID of the depreciation profile to check.
    /// </param>
    /// <returns>
    ///    true if the depreciation method is of a low value pool type; otherwise, false.
    /// </returns>
    static boolean isLowValuePoolDepreciationMethod(AssetDepreciationProfileId _depreciationProfile)
    {
        AssetDepreciationProfile depreciationProfile = AssetDepreciationProfile::find(_depreciationProfile);
        boolean     retValue = false;

        if (depreciationProfile && depreciationProfile.Method == AssetDepreciationMethod::LowValuePool)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProfilePolishDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the deprecation method is used for the Polish depreciation.
    /// </summary>
    /// <param name="_assetDepreciationMethod">
    /// A depreciation method to verify.
    /// </param>
    /// <returns>
    /// Returns true if the depreciation method is used for Polish deprecation, otherwise false.
    /// </returns>
    public static boolean isProfilePolishDepreciationMethod(AssetDepreciationMethod _assetDepreciationMethod)
    {
        boolean returnValue;

        if (_assetDepreciationMethod == AssetDepreciationMethod::StraightLinePercentage_PL
            || _assetDepreciationMethod == AssetDepreciationMethod::ReducingBalance_PL
            || _assetDepreciationMethod == AssetDepreciationMethod::StraightLine_PL)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReducingBalanceDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the depreciation method is of a reducing balance depreciation type.
    /// </summary>
    /// <param name="_depreciationMethod">
    ///    The depreciation method for which to be checked.
    /// </param>
    /// <returns>
    ///    true if the depreciation method is reducing method; otherwise; false.
    /// </returns>
    static boolean isReducingBalanceDepreciationMethod(AssetDepreciationMethod _depreciationMethod)
    {
        boolean     retValue = false;

        if (_depreciationMethod == AssetDepreciationMethod::ReducingBalance
            || _depreciationMethod == AssetDepreciationMethod::ReducingBalance125
            || _depreciationMethod == AssetDepreciationMethod::ReducingBalance150
            || _depreciationMethod == AssetDepreciationMethod::ReducingBalance175
            || _depreciationMethod == AssetDepreciationMethod::ReducingBalance200)
            {
                retValue = true;
            }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStraightLineDepreciationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the depreciation method is of a straight line depreciation type.
    /// </summary>
    /// <param name="_depreciationMethod">
    ///    The depreciation method for which to be checked.
    /// </param>
    /// <returns>
    ///    true if the depreciation method is reducing method; otherwise; false.
    /// </returns>  
    internal static boolean isStraightLineDepreciationMethod(AssetDepreciationMethod _depreciationMethod)
    {
        boolean retValue = false;

        if (_depreciationMethod == AssetDepreciationMethod::StraightLine
            || _depreciationMethod == AssetDepreciationMethod::StraightLineLifeRemaining)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecialDepMethod_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified depreciation method is special depreciation method
    /// </summary>
    /// <param name="_depreciationMehod">
    /// The specified depreciation method.
    /// </param>
    /// <returns>
    /// true if it is special depreciation method; otherwise, return false.
    /// </returns>
    public static boolean isSpecialDepMethod_JP(AssetDepreciationMethod _depreciationMehod)
    {
        boolean ret;

        if (_depreciationMehod == AssetDepreciationMethod::SpecialDepreciation_JP
            || _depreciationMehod == AssetDepreciationMethod::AdditionalDepreciation_JP)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAcceleratedDepProfile_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a look up form for accelerated depreciation profile
    /// </summary>
    /// <param name="_ctrl">
    /// FormControl which are applied by the look up form
    /// </param>
    public static void lookupAcceleratedDepProfile_JP(FormControl _ctrl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(AssetDepreciationProfile), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDepProfileDS;

        queryBuildDepProfileDS = query.addDataSource(tableNum(AssetDepreciationProfile));
        queryBuildDepProfileDS.addRange(fieldNum(AssetDepreciationProfile, Method))
            .value(SysQuery::value(AssetDepreciationMethod::Accelerated_JP));

        sysTableLookup.addLookupfield(fieldNum(AssetDepreciationProfile, Profile));
        sysTableLookup.addLookupfield(fieldNum(AssetDepreciationProfile, Method));
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS68303";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProfileForAltProfileCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the depreciation method can be used for the combination for primary and alternative depreciations.
    /// </summary>
    /// <param name = "_assetDepreciationMethod">Depreciationat method to verify</param>
    /// <returns>True if the deprecation can used; otherwise false</returns>
    public static boolean  isValidProfileForAltProfileCombination(AssetDepreciationMethod _assetDepreciationMethod)
    {
        boolean returnValue = true;

        if (   _assetDepreciationMethod != AssetDepreciationMethod::StraightLine
            && _assetDepreciationMethod != AssetDepreciationMethod::StraightLineLifeRemaining
            // <GEEHU>
            && _assetDepreciationMethod != AssetDepreciationMethod::StraightLine_HU
            && _assetDepreciationMethod != AssetDepreciationMethod::ReducingBalance_HU
            // </GEEHU>
            && _assetDepreciationMethod != AssetDepreciationMethod::ReducingBalance
            && _assetDepreciationMethod != AssetDepreciationMethod::ReducingBalance125
            && _assetDepreciationMethod != AssetDepreciationMethod::ReducingBalance150
            && _assetDepreciationMethod != AssetDepreciationMethod::ReducingBalance175
            && _assetDepreciationMethod != AssetDepreciationMethod::ReducingBalance200)
        {
            returnValue = false;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.updateBasedOnAccrual(this.Accrual, this.orig().Accrual) & ret;

        ret = this.validateDepreciationMethodFields() && ret;

        // reducing balance must have percentage
        if (ret)
        {
            // <GIN>
            if (AssetParameters::checkAssetParameters_IN())
            {
                if ((this.Method == AssetDepreciationMethod::StraightLinePercentage_IN
                    || this.Method == AssetDepreciationMethod::ReducingBalance)
                    && (this.Percentage <= 0
                        || this.Percentage > 100))
                {
                    ret = checkFailed("@SYS67342");
                }
            }
            else
            {
            // </GIN>

                // <GEEPL>
                if (((this.Method == AssetDepreciationMethod::ReducingBalance  ||
                    this.Method == AssetDepreciationMethod::ReducingBalance_PL ||
                    this.Method == AssetDepreciationMethod::StraightLinePercentage_PL) &&
                // </GEEPL>
                    (this.Percentage <= 0 || this.Percentage > 100)) ||
                    (this.Method     == AssetDepreciationMethod::LowValuePool &&
                    (this.lvpFirstYearPercentage_AU <= 0 || this.lvpFirstYearPercentage_AU > 100))||
                    (this.Method     == AssetDepreciationMethod::LowValuePool &&
                    (this.lvpPercentage_AU <= 0 || this.lvpPercentage_AU > 100)))
                {
                    ret = checkFailed("@SYS67342");
                }

            // <GIN>
            }
            // </GIN>
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationMethodFields</Name>
				<Source><![CDATA[
    protected boolean validateDepreciationMethodFields()
    {
        boolean isValid = true;

        isValid = this.validateFullYearDepreciationDE() && isValid;
        isValid = this.validateHalfYearDepreciationAT() && isValid;

        switch (this.Method)
        {
            case AssetDepreciationMethod::StraightLine:
            case AssetDepreciationMethod::StraightLineLifeRemaining:
            // <GEEU>
            case AssetDepreciationMethod::Regular_CZ:
            case AssetDepreciationMethod::StraightLinePercentage_PL:
            case AssetDepreciationMethod::StraightLine_PL:
            case AssetDepreciationMethod::StraightLine_HU:
            // </GEEU>
            case AssetDepreciationMethod::DoubleReduceBalance_CN:
            case AssetDepreciationMethod::SumYearDigits_CN:
                isValid = this.validateStraightLine() && isValid;
                break;

            case AssetDepreciationMethod::ReducingBalance:
            // <GEEU>
            case AssetDepreciationMethod::ReducingBalance_PL:
            case AssetDepreciationMethod::ReducingBalance_HU:
            // </GEEU>
                isValid = this.validateReducingBalance() && isValid;
                break;

            case AssetDepreciationMethod::ReducingBalance125:
            case AssetDepreciationMethod::ReducingBalance150:
            case AssetDepreciationMethod::ReducingBalance175:
            case AssetDepreciationMethod::ReducingBalance200:
                isValid = this.validateReducingBalancePercentage() && isValid;
                break;

            case AssetDepreciationMethod::Manual:
                isValid = this.validateManual() && isValid;
                break;

            case AssetDepreciationMethod::Factor:
            // <GEEU>
            case AssetDepreciationMethod::Factor_HU:
            // </GEEU>
                isValid = this.validateFactor() && isValid;
                break;

            case AssetDepreciationMethod::Consumption:
                isValid = this.validateConsumption() && isValid;
                break;
            case AssetDepreciationMethod::RBSL:
                isValid = this.validateRBSL() && isValid;
                break;
            case AssetDepreciationMethod::LowValuePool:
                isValid = this.validateLowValuePool() && isValid;
                break;

            // <GJP>
            case AssetDepreciationMethod::OldStraightLine_JP:
            case AssetDepreciationMethod::OldDecliningBalance_JP:
                isValid = this.validateOldDepreciationMethodJP() && isValid;
                break;
            case AssetDepreciationMethod::NewStraightLine_JP:
            case AssetDepreciationMethod::NewDecliningBalance200_JP:
            case AssetDepreciationMethod::NewDecliningBalance250_JP:
                isValid = this.validateNewStraightLineJP() && isValid;
                break;
            case AssetDepreciationMethod::EquallyDivided_JP:
                isValid = this.validateEquallyDividedJP() && isValid;
                break;
            case AssetDepreciationMethod::SpecialDepreciation_JP:
                isValid = this.validateSpecialDepreciationJP() && isValid;
                break;
            case AssetDepreciationMethod::AdditionalDepreciation_JP:
                isValid = this.validateAdditionalDepreciationJP() && isValid;
                break;
            case AssetDepreciationMethod::ElectronicDepreciation_JP:
                isValid = this.validateElectronicDepreciationJP() && isValid;
                break;
            case AssetDepreciationMethod::Accelerated_JP:
                isValid = this.validateAcceleratedJP() && isValid;
                break;
            // </GJP>
            // <GEERU>
            case AssetDepreciationMethod::TaxNonLinearGroup_RU:
                isValid = this.validateTaxNonLinearGroupRU() && isValid;
                break;
            // </GEERU>
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJPFieldsNotSet</Name>
				<Source><![CDATA[
    private boolean validateJPFieldsNotSet()
    {
        boolean isValid = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            isValid = this.validateNumOfYearsEquallyDivided_JPNotSet() && isValid;

            isValid = this.validateAssetDepRateSchedule_JPNotSet() && isValid;

            isValid = this.validateSmoothDepForTheYearOver95_JPNotSet() && isValid;

            isValid = this.validateSpecialDepAccountingMethod_JPNotSet() && isValid;

            isValid = this.validateSpecialDepApplyNumOfPeriods_JPNotSet() && isValid;

            isValid = this.validateSpecialDepBaseRatio_JPNotSet() && isValid;

            isValid = this.validateSpecialDepRate_JPNotSet() && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumOfYearsEquallyDivided_JPNotSet</Name>
				<Source><![CDATA[
    private boolean validateNumOfYearsEquallyDivided_JPNotSet()
    {
        if (this.NumOfYearsEquallyDivided_JP != 0)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, NumOfYearsEquallyDivided_JP), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetDepRateSchedule_JPNotSet</Name>
				<Source><![CDATA[
    private boolean validateAssetDepRateSchedule_JPNotSet()
    {
        if (this.AssetDepRateSchedule_JP != 0)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, AssetDepRateSchedule_JP), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSmoothDepForTheYearOver95_JPNotSet</Name>
				<Source><![CDATA[
    private boolean validateSmoothDepForTheYearOver95_JPNotSet()
    {
        if (this.SmoothDepForTheYearOver95_JP != NoYes::No)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, SmoothDepForTheYearOver95_JP), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecialDepAccountingMethod_JPNotSet</Name>
				<Source><![CDATA[
    private boolean validateSpecialDepAccountingMethod_JPNotSet()
    {
        if (this.SpecialDepAccountingMethod_JP != AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, SpecialDepAccountingMethod_JP), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecialDepApplyNumOfPeriods_JPNotSet</Name>
				<Source><![CDATA[
    private boolean validateSpecialDepApplyNumOfPeriods_JPNotSet()
    {
        if (this.SpecialDepApplyNumOfPeriods_JP != 0)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, SpecialDepApplyNumOfPeriods_JP), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecialDepBaseRatio_JPNotSet</Name>
				<Source><![CDATA[
    private boolean validateSpecialDepBaseRatio_JPNotSet()
    {
        if (this.SpecialDepBaseRatio_JP != 0)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, SpecialDepBaseRatio_JP), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecialDepRate_JPNotSet</Name>
				<Source><![CDATA[
    private boolean validateSpecialDepRate_JPNotSet()
    {
        if (this.SpecialDepRate_JP != 0)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, SpecialDepRate_JP), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFullYearDepreciationDE</Name>
				<Source><![CDATA[
    private boolean validateFullYearDepreciationDE()
    {
        if (this.FullYearDepreciation_DE != NoYes::No
            && this.Method != AssetDepreciationMethod::StraightLineLifeRemaining)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, FullYearDepreciation_DE), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHalfYearDepreciationAT</Name>
				<Source><![CDATA[
    private boolean validateHalfYearDepreciationAT()
    {
        if (this.HalfYearDepreciation_AT != NoYes::No
            && !AssetTableDepConv_HalfYearStart::isHalfYearDepreciationMethod_AT(this.Method))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceAT00007, funcName());
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, HalfYearDepreciation_AT), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationYearNotSet</Name>
				<Source><![CDATA[
    private boolean validateDepreciationYearNotSet()
    {
        if (this.DepreciationYear != AssetDepreciationYear::Calendar)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, DepreciationYear), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePercentageNotSet</Name>
				<Source><![CDATA[
    private boolean validatePercentageNotSet()
    {
        if (this.Percentage != 0)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, Percentage), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetEndDependOnServiceLifeNotSet</Name>
				<Source><![CDATA[
    private boolean validateAssetEndDependOnServiceLifeNotSet()
    {
        if (this.AssetEndDependOnServiceLife != 0)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, AssetEndDependOnServiceLife), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccrualNotSet</Name>
				<Source><![CDATA[
    private boolean validateAccrualNotSet()
    {
        if (!this.isYearlyAccrual())
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, Accrual), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isYearlyAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the asset accrual type is yearly accrual.
    /// </summary>
    /// <returns>
    /// true if the asset accrual is yearly; otherwise, false.
    /// </returns>
    protected boolean isYearlyAccrual()
    {
        return (this.Accrual == AssetAccrual::Yearly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCalculationBaseNotSet</Name>
				<Source><![CDATA[
    private boolean validateCalculationBaseNotSet()
    {
        if (this.CalculationBase != AssetDepreciationCalculationBase::Days)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, CalculationBase), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIntervalNotSet</Name>
				<Source><![CDATA[
    private boolean validateIntervalNotSet()
    {
        if (this.Interval != AssetDepreciationInterval::Monthly)
        {
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, Interval), this.Profile));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLVPFieldsNotSet</Name>
				<Source><![CDATA[
    private boolean validateLVPFieldsNotSet()
    {
        boolean isValid = true;

        if (this.LVPLowValueCost_AU != 0)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, LVPLowValueCost_AU), this.Profile)) && isValid;
        }

        if (this.LVPPercentage_AU != 0)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, LVPPercentage_AU), this.Profile)) && isValid;
        }

        if (this.LVPFirstYearPercentage_AU != 0)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, LVPFirstYearPercentage_AU), this.Profile)) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStraightLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates Depreciation profile fields.
    /// </summary>
    /// <returns>
    /// Returns true if validation is successful; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean validateStraightLine()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        // <GEEU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            isValid = this.validatePercentageNotSet() && isValid;
        }
        // </GEEU>

        this.Interval = AssetDepreciationInterval::Yearly;

        isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;

        isValid = this.validateCalculationBaseNotSet() && isValid;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReducingBalance</Name>
				<Source><![CDATA[
    private boolean validateReducingBalance()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            isValid = this.validatePercentageNotSet() && isValid;
        }
        // </GEEU>

        this.Interval = AssetDepreciationInterval::Yearly;

        if (this.Method != AssetDepreciationMethod::ReducingBalance)
        {
            isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;
        }

        isValid = this.validateCalculationBaseNotSet() && isValid;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReducingBalancePercentage</Name>
				<Source><![CDATA[
    private boolean validateReducingBalancePercentage()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        this.Interval = AssetDepreciationInterval::Yearly;

        isValid = this.validateCalculationBaseNotSet() && isValid;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateManual</Name>
				<Source><![CDATA[
    private boolean validateManual()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        isValid = this.validateIntervalNotSet() && isValid;

        if (this.DepreciationYear != AssetDepreciationYear::Calendar || this.Accrual != AssetAccrual::Yearly)
        {
            this.CalculationBase = AssetDepreciationCalculationBase::Days;
        }

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFactor</Name>
				<Source><![CDATA[
    private boolean validateFactor()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        isValid = this.validateDepreciationYearNotSet() && isValid;

        isValid = this.validateAccrualNotSet() && isValid;

        isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;

        isValid = this.validateCalculationBaseNotSet() && isValid;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConsumption</Name>
				<Source><![CDATA[
    private boolean validateConsumption()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        this.Interval = AssetDepreciationInterval::Yearly;

        isValid = this.validatePercentageNotSet() && isValid;

        isValid = this.validateDepreciationYearNotSet() && isValid;

        isValid = this.validateAccrualNotSet() && isValid;

        isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;

        isValid = this.validateCalculationBaseNotSet() && isValid;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRBSL</Name>
				<Source><![CDATA[
    private boolean validateRBSL()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        this.Interval = AssetDepreciationInterval::Monthly;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLowValuePool</Name>
				<Source><![CDATA[
    private boolean validateLowValuePool()
    {
        boolean isValid = true;

        // <GJP>
        isValid = this.validateJPFieldsNotSet() && isValid;
        // </GJP>

        isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;

        isValid = this.validateIntervalNotSet() && isValid;

        isValid = this.validateCalculationBaseNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonJPFieldsForJPMethods</Name>
				<Source><![CDATA[
    private boolean validateNonJPFieldsForJPMethods()
    {
        boolean isValid = true;

        isValid = this.validatePercentageNotSet() && isValid;

        isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;

        isValid = this.validateCalculationBaseNotSet() && isValid;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOldDepreciationMethodJP</Name>
				<Source><![CDATA[
    private boolean validateOldDepreciationMethodJP()
    {
        boolean isValid = true;

        this.DepreciationYear = AssetDepreciationYear::Fiscal;

        isValid = this.validateNonJPFieldsForJPMethods() && isValid;

        isValid = this.validateSpecialDepAccountingMethod_JPNotSet() && isValid;

        isValid = this.validateSpecialDepApplyNumOfPeriods_JPNotSet() && isValid;

        isValid = this.validateSpecialDepBaseRatio_JPNotSet() && isValid;

        isValid = this.validateSpecialDepRate_JPNotSet() && isValid;

        if (this.DepreciationYear != AssetDepreciationYear::Fiscal)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, DepreciationYear), this.Profile)) && isValid;
        }

        if (this.Accrual != AssetAccrual::FiscalPeriod)
        {
            isValid = this.validateSmoothDepForTheYearOver95_JPNotSet() && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewStraightLineJP</Name>
				<Source><![CDATA[
    private boolean validateNewStraightLineJP()
    {
        boolean isValid = true;

        this.DepreciationYear = AssetDepreciationYear::Fiscal;

        isValid = this.validateNonJPFieldsForJPMethods() && isValid;

        isValid = this.validateNumOfYearsEquallyDivided_JPNotSet() && isValid;

        isValid = this.validateSmoothDepForTheYearOver95_JPNotSet() && isValid;

        isValid = this.validateSpecialDepAccountingMethod_JPNotSet() && isValid;

        isValid = this.validateSpecialDepApplyNumOfPeriods_JPNotSet() && isValid;

        isValid = this.validateSpecialDepBaseRatio_JPNotSet() && isValid;

        isValid = this.validateSpecialDepRate_JPNotSet() && isValid;

        if (this.DepreciationYear != AssetDepreciationYear::Fiscal)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, DepreciationYear), this.Profile)) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEquallyDividedJP</Name>
				<Source><![CDATA[
    private boolean validateEquallyDividedJP()
    {
        boolean isValid = true;

        this.DepreciationYear = AssetDepreciationYear::Fiscal;

        isValid = this.validateAssetDepRateSchedule_JPNotSet() && isValid;

        isValid = this.validateSmoothDepForTheYearOver95_JPNotSet() && isValid;

        isValid = this.validateSpecialDepAccountingMethod_JPNotSet() && isValid;

        isValid = this.validateSpecialDepApplyNumOfPeriods_JPNotSet() && isValid;

        isValid = this.validateSpecialDepBaseRatio_JPNotSet() && isValid;

        isValid = this.validateSpecialDepRate_JPNotSet() && isValid;

        if (this.DepreciationYear != AssetDepreciationYear::Fiscal)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, DepreciationYear), this.Profile)) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSpecialDepreciationJP</Name>
				<Source><![CDATA[
    private boolean validateSpecialDepreciationJP()
    {
        boolean isValid = true;

        this.DepreciationYear = AssetDepreciationYear::Fiscal;

        isValid = this.validateNumOfYearsEquallyDivided_JPNotSet() && isValid;

        isValid = this.validateAssetDepRateSchedule_JPNotSet() && isValid;

        isValid = this.validateSmoothDepForTheYearOver95_JPNotSet() && isValid;

        if (this.DepreciationYear != AssetDepreciationYear::Fiscal)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, DepreciationYear), this.Profile)) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAdditionalDepreciationJP</Name>
				<Source><![CDATA[
    private boolean validateAdditionalDepreciationJP()
    {
        boolean isValid = true;

        this.DepreciationYear = AssetDepreciationYear::Fiscal;

        isValid = this.validateNumOfYearsEquallyDivided_JPNotSet() && isValid;

        isValid = this.validateAssetDepRateSchedule_JPNotSet() && isValid;

        isValid = this.validateSmoothDepForTheYearOver95_JPNotSet() && isValid;

        isValid = this.validateSpecialDepBaseRatio_JPNotSet() && isValid;

        if (this.DepreciationYear != AssetDepreciationYear::Fiscal)
        {
            isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, DepreciationYear), this.Profile)) && isValid;
        }

        if (this.Accrual == AssetAccrual::FiscalPeriod)
        {
            this.SpecialDepAccountingMethod_JP = AssetSpecialDepAccountingMethod_JP::DirectOff;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateElectronicDepreciationJP</Name>
				<Source><![CDATA[
    private boolean validateElectronicDepreciationJP()
    {
        boolean isValid = true;

        isValid = this.validateNumOfYearsEquallyDivided_JPNotSet() && isValid;

        this.DepreciationYear = AssetDepreciationYear::Calendar;

        this.Accrual = AssetAccrual::Yearly;

        isValid = this.validateSpecialDepAccountingMethod_JPNotSet() && isValid;

        isValid = this.validateSpecialDepApplyNumOfPeriods_JPNotSet() && isValid;

        isValid = this.validateSpecialDepBaseRatio_JPNotSet() && isValid;

        isValid = this.validateSpecialDepRate_JPNotSet() && isValid;

        if (this.Accrual == AssetAccrual::Yearly)
        {
            isValid = this.validateSmoothDepForTheYearOver95_JPNotSet() && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAcceleratedJP</Name>
				<Source><![CDATA[
    private boolean validateAcceleratedJP()
    {
        boolean isValid = true;

        if (!FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            this.DepreciationYear = AssetDepreciationYear::Fiscal;
        }

        isValid = this.validateJPFieldsNotSet() && isValid;

        isValid = this.validateIntervalNotSet() && isValid;

        if (!FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            if (this.DepreciationYear != AssetDepreciationYear::Fiscal)
            {
                isValid = checkFailed(strfmt("@FixedAssets:FA_MessageError_InvalidFieldSetForMethod", fieldPName(AssetDepreciationProfile, DepreciationYear), this.Profile)) && isValid;
            }
        }

        isValid = this.validatePercentageNotSet() && isValid;

        isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;

        isValid = this.validateCalculationBaseNotSet() && isValid;

        isValid = this.validateLVPFieldsNotSet() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxNonLinearGroupRU</Name>
				<Source><![CDATA[
    // <GEERU>
    private boolean validateTaxNonLinearGroupRU()
    {
        boolean isValid = true;

        isValid = this.validatePercentageNotSet() && isValid;
        isValid = this.validateAssetEndDependOnServiceLifeNotSet() && isValid;
        isValid = this.validateCalculationBaseNotSet() && isValid;
        isValid = this.validateAccrualNotSet() && isValid;
        isValid = this.validateIntervalNotSet() && isValid;

        if (isValid
            && (select firstonly RecId from assetDepreciationProfile
                    where assetDepreciationProfile.Method == AssetDepreciationMethod::TaxNonLinearGroup_RU
                        && assetDepreciationProfile.RecId  != this.RecId).RecId)
        {
            isValid = checkFailed("@GLS117110");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    // </GEERU>

    public void initValue()
    {
        super();
        this.CalculationBase = AssetDepreciationCalculationBase::Days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepMethodFormular</Name>
				<Source><![CDATA[
    // <GCN>
    /// <summary>
    /// The formula for the given Depreciation method.
    /// </summary>
    /// <returns>The depreciation method</returns>
    display str getDepMethodFormular()
    {
        str formular;

        switch (this.Method)
        {
            case AssetDepreciationMethod::StraightLine:
                //Monthly depreciation amount = Acquisition amount * (1- expected scrap value %) / Service life
                formular = "@GLS222938";
                break;

            case AssetDepreciationMethod::ReducingBalance:
                //Monthly depreciation amount = Asset net book value at year beginning * reduce rate% / 12
                formular = "@GLS222949";
                break;

            case AssetDepreciationMethod::Manual:
                //Manual
                formular = '';
                break;

            case AssetDepreciationMethod::Factor:
                //Monthly depreciation amount = (Acquisition amount * (1- expected scrap value %) / Service life) * (Interval number Exp Factor)
                formular = "@GLS222960";
                break;

            case AssetDepreciationMethod::Consumption:
                //Monthly depreciation amount = Quantity * Asset acquisition amount / Estimated consumption
                formular = "@GLS222971";
                break;
            case AssetDepreciationMethod::StraightLineLifeRemaining:
                //Monthly depreciation amount = Acquisition amount * (1- expected scrap value %) / Service life
                formular = "@GLS222938";
                break;

            case AssetDepreciationMethod::ReducingBalance200:
                //Monthly depreciation amount = Asset net book value at year beginning * 200%  / (Service life * 12)
                formular = "@GLS222982";
                break;

            case AssetDepreciationMethod::ReducingBalance175:
                //Monthly depreciation amount = Asset net book value at year beginning * 175%  / (Service life * 12)
                formular = "@GLS222993";
                break;

            case AssetDepreciationMethod::ReducingBalance150:
                //Monthly depreciation amount = Asset net book value at year beginning * 150%  / (Service life * 12)
                formular = "@GLS223004";
                break;

            case AssetDepreciationMethod::ReducingBalance125:
                //Monthly depreciation amount = Asset net book value at year beginning * 125%  / (Service life * 12)
                formular = "@GLS223015";
                break;

            case AssetDepreciationMethod::SumYearDigits_CN:
                //standard formula
                formular = "@GLS223022";
                break;

            case AssetDepreciationMethod::DoubleReduceBalance_CN:
                //standard formula
                formular = "@GLS223022";
                break;

            default:
                formular = '';
                break;
        }

        return formular;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationProfilesHaveSameDepreciationYear_JP</Name>
				<Source><![CDATA[
    // </GCN>

    internal static boolean validateDepreciationProfilesHaveSameDepreciationYear_JP(
        AssetDepreciationProfileId _depreciationProfileId,
        AssetDepreciationAcceleratedProfileId_JP _acceleratedDepreciationProfile)
    {
        boolean isValid = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
            && _depreciationProfileId != ''
            && _acceleratedDepreciationProfile != '')
        {
            AssetDepreciationYear depreciationYear = AssetDepreciationProfile::find(_depreciationProfileId).DepreciationYear;
            AssetDepreciationYear acceleratedDepreciationYear = AssetDepreciationProfile::find(_acceleratedDepreciationProfile).DepreciationYear;

            if (depreciationYear != acceleratedDepreciationYear)
            {
                isValid = checkFailed(strFmt("@FixedAssets:DepreciationYearMustBeTheSameJP",
                    _acceleratedDepreciationProfile,
                    acceleratedDepreciationYear,
                    _depreciationProfileId,
                    depreciationYear));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@FixedAssets:FA_MessageDeveloper_AssetDepreciationProfile</DeveloperDocumentation>
	<FormRef>AssetDepreciationProfile</FormRef>
	<Label>@FixedAssets:FA_TableTitle_AssetDepreciationProfiles</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>Profile</TitleField1>
	<TitleField2>Method</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>DeprProfileIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>DeprProfileIdx</PrimaryIndex>
	<ReplacementKey>DeprProfileIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetShiftDepreciationProfile_IN</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetShiftDepreciationProfile_IN</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetDepreciationProfileSpec</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetDepreciationProfileSpec</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetDepreciationGroup_W</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetDepreciationGroup_W</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetLifeHist</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RAssetLifeHist</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Method</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Method</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accrual</Name>
			<Label>@SYS82964</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Accrual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Method</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Interval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepreciationYear</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetEndDependOnServiceLife</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HalfYearDepreciation_AT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FullYearDepreciation_DE</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation_JP</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetDepRateSchedule_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumOfYearsEquallyDivided_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmoothDepForTheYearOver95_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Profile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LowValuePool</Name>
			<Label>@SYS113681</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LVPLowValueCost_AU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LVPFirstYearPercentage_AU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LVPPercentage_AU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShiftDepreciation_IN</Name>
			<Label>@GLS5965</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShiftDepreciation_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SpecialDepreciation_JP</Name>
			<Label>@FixedAssetsIncentiveDepreciation:SYP4880108</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SpecialDepAccountingMethod_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepApplyNumOfPeriods_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepBaseRatio_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialDepRate_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationBase_RU</Name>
			<Label>@GLS117078</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationBase_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Accrual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetAccrual</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AssetDepRateSchedule_JP</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS4002705</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetEndDependOnServiceLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetEndDependOnServiceLife</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalculationBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDepreciationCalculationBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DepreciationYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDepreciationYear</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FullYearDepreciation_DE</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FullYearDepreciation_DE</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HalfYearDepreciation_AT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetAdditionalAcqDepreciation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Interval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDepreciationInterval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LVPFirstYearPercentage_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLowValuePoolFirstYearPercentage_AU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LVPLowValueCost_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLowValueCost_AU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LVPPercentage_AU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetLowValuePoolPercentage_AU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Method</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetDepreciationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationProfileName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumOfYearsEquallyDivided_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepNumOfYearsEquallyDivided_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationPercentage</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Profile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepreciationProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShiftDepreciation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5965</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SmoothDepForTheYearOver95_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetDepSmoothDepForTheYearOver95_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SpecialDepAccountingMethod_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetSpecialDepAccountingMethod_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialDepApplyNumOfPeriods_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepApplyNumOfPeriods_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SpecialDepBaseRatio_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepBaseRatio_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SpecialDepRate_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetSpecialDepRate_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DepreciationBase_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>RAssetDeprSumBase</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DeprProfileIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Profile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetDepRateSchedule_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetDepRateSchedule_JP</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetDepRateSchedule_JP</Name>
					<Field>AssetDepRateSchedule_JP</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>