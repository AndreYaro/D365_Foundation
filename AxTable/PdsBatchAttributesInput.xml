<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttributesInput</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsBatchAttributesInput extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.PdsBatchAttribAssignedToBatch = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeBatchAttribSpecifiedDirectOnLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cascades the <c>PdsbatchAttributesInput</c> values specified directly on the main batch to the other batches related with the current order line.
    /// </summary>
    /// <param name="_purchParmLine">
    ///     The source purchase line delivered.
    /// </param>
    /// <param name="_mainInventBatchId">
    ///     The main ID of the batch containing the attributes to cascade.
    /// </param>
    private static void cascadeBatchAttribSpecifiedDirectOnLine(Common _common, InventBatchId _mainInventBatchId)
    {
        PdsBatchAttributes      pdsBatchAttributesExistingOnTarget;
        PdsBatchAttributes      pdsBatchAttributesDirectBatch;
        PdsBatchAttributes      pdsBatchAttributes;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventBatch             inventBatch;
        InventBatchId           inventBatchIdTarget;
        InventTransId           inventTransId;
        ItemId                  itemId;

        switch (_common.tableId)
        {
            case tableNum(PurchParmLine):
                PurchParmLine purchParmLine = _common as PurchParmLine;
                PurchLine purchLine = purchParmLine.purchLine();

                inventTransId = purchLine.InventTransId;
                itemId = purchLine.ItemId;
                break;
                
            case tableNum(ConsignmentDraftReplenishmentOrderJournalLine):
                ConsignmentDraftReplenishmentOrderJournalLine consignmentDraftReplenishmentOrderJournalLine = _common as ConsignmentDraftReplenishmentOrderJournalLine;
                ConsignmentReplenishmentOrderLine consignmentReplenishmentOrderLine = consignmentDraftReplenishmentOrderJournalLine.replenishmentOrderLine();

                inventTransId = consignmentReplenishmentOrderLine.InventTransId;
                itemId = consignmentReplenishmentOrderLine.ItemId;
                break;

            default: throw error(error::wrongUseOfFunction(funcName()));
        }

        ttsBegin;

        if (PdsBatchAttributesInputCorrectItemIdConditionFlight::instance().isEnabled())
        {
            while select inventBatchId
            from inventBatch
            where inventBatch.itemId                == itemId
               && inventBatch.inventBatchId         != _mainInventBatchId
            exists join recId from inventTransOrigin
                where inventTransOrigin.InventTransId == inventTransId
            exists join recId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            exists join inventBatchId from inventDim
                where   inventTrans.inventDimId     == inventDim.inventDimId
                    &&  inventDim.inventBatchId     == inventBatch.inventBatchId
            //
            // cannot overwrite on this case, only if they are not specified
            // as it would overwrite any batch created/updated during registration
            //
            notExists join RecId from pdsBatchAttributesExistingOnTarget
                where pdsBatchAttributesExistingOnTarget.ItemId          == itemId
                    && pdsBatchAttributesExistingOnTarget.InventBatchId  == inventBatch.inventBatchId
            {
                inventBatchIdTarget   = inventBatch.inventBatchId;
                insert_recordset pdsBatchAttributes(ItemId, PdsBatchAttribId, PdsBatchAttribValue, InventBatchId)
                select ItemId, PdsBatchAttribId, PdsBatchAttribValue, inventBatchIdTarget
                    from pdsBatchAttributesDirectBatch
                    where pdsBatchAttributesDirectBatch.ItemId          == itemId
                        && pdsBatchAttributesDirectBatch.InventBatchId  == _mainInventBatchId;
            }
        }
        else
        {
            while select inventBatchId
            from inventBatch
            where inventBatch.inventBatchId         != _mainInventBatchId
            exists join recId from inventTransOrigin
                where inventTransOrigin.InventTransId == inventTransId
            exists join recId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            exists join inventBatchId from inventDim
                where   inventTrans.inventDimId     == inventDim.inventDimId
                    &&  inventDim.inventBatchId     == inventBatch.inventBatchId
                    &&  inventBatch.itemId          == itemId
            //
            // cannot overwrite on this case, only if they are not specified
            // as it would overwrite any batch created/updated during registration
            //
            notExists join RecId from pdsBatchAttributesExistingOnTarget
                where pdsBatchAttributesExistingOnTarget.ItemId          == itemId
                    && pdsBatchAttributesExistingOnTarget.InventBatchId  == inventBatch.inventBatchId
            {
                inventBatchIdTarget   = inventBatch.inventBatchId;
                insert_recordset pdsBatchAttributes(ItemId, PdsBatchAttribId, PdsBatchAttribValue, InventBatchId)
            select ItemId, PdsBatchAttribId, PdsBatchAttribValue, inventBatchIdTarget
                from pdsBatchAttributesDirectBatch
                where pdsBatchAttributesDirectBatch.ItemId          == itemId
                    && pdsBatchAttributesDirectBatch.InventBatchId  == _mainInventBatchId;
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeBatchAttribSpecifiedOnReceiptPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cascades the <c>PdsbatchAttributesInput</c> values specified during posting of receipts to the batches associated with the current order.
    /// </summary>
    /// <param name="_purchParmLine">
    ///     The source purchase line delivered.
    /// </param>
    private static void cascadeBatchAttribSpecifiedOnReceiptPost(Common _common)
    {
        PdsBatchAttributesInput pdsBatchAttributesInput;
        PdsBatchAttributes      pdsBatchAttributes;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventBatch             inventBatch;
        InventBatchId           inventBatchId;
        boolean                 anyBatchUpdated;
        InventTransId           inventTransId;
        ItemId                  itemId;
        RefTableId              refTableId;
        RefRecId                refRecId;

        switch (_common.tableId)
        {
            case tableNum(PurchParmLine):
                PurchParmLine purchParmLine = _common as PurchParmLine;
                PurchLine purchLine = purchParmLine.purchLine();

                inventTransId = purchLine.InventTransId;
                itemId = purchLine.ItemId;
                refTableId = purchParmLine.TableId;
                refRecId = purchParmLine.RecId;
                break;
                
            case tableNum(ConsignmentDraftReplenishmentOrderJournalLine):
                ConsignmentDraftReplenishmentOrderJournalLine consignmentDraftReplenishmentOrderJournalLine = _common as ConsignmentDraftReplenishmentOrderJournalLine;
                ConsignmentReplenishmentOrderLine consignmentReplenishmentOrderLine = consignmentDraftReplenishmentOrderJournalLine.replenishmentOrderLine();

                inventTransId = consignmentReplenishmentOrderLine.InventTransId;
                itemId = consignmentReplenishmentOrderLine.ItemId;
                refTableId = consignmentDraftReplenishmentOrderJournalLine.TableId;
                refRecId = consignmentDraftReplenishmentOrderJournalLine.RecId;
                break;

            default: throw error(error::wrongUseOfFunction(funcName()));
        }
        
        ttsBegin;
        if (PdsBatchAttributesInputCorrectItemIdConditionFlight::instance().isEnabled())
        {
            while select inventBatchId
            from inventBatch
                where inventBatch.itemId == itemId
            exists join recId from inventTransOrigin
                where inventTransOrigin.InventTransId == inventTransId
            exists join recId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            exists join inventBatchId from inventDim
                where   inventTrans.inventDimId     == inventDim.inventDimId
                    &&  inventDim.inventBatchId     == inventBatch.inventBatchId
            {
                inventBatchId   = inventBatch.inventBatchId;
                anyBatchUpdated = true;

                // clearing records
                delete_from pdsBatchAttributes
                where pdsBatchAttributes.InventBatchId == InventBatchId
                    && pdsBatchAttributes.itemId       == itemId;

                insert_recordset pdsBatchAttributes(ItemId, PdsBatchAttribId, PdsBatchAttribValue, InventBatchId)
                select ItemId, PdsBatchAttribId, PdsBatchAttribValue, inventBatchId
                    from pdsBatchAttributesInput
                    where pdsBatchAttributesInput.RefRecId                          == refRecId
                        && pdsBatchAttributesInput.RefTableId                       == refTableId
                        && pdsBatchAttributesInput.PdsBatchAttribAssignedToBatch    == NoYes::No;
            }
        }
        else
        {
            while select inventBatchId
            from inventBatch
            exists join recId from inventTransOrigin
                where inventTransOrigin.InventTransId == inventTransId
            exists join recId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            exists join inventBatchId from inventDim
                where   inventTrans.inventDimId     == inventDim.inventDimId
                    &&  inventDim.inventBatchId     == inventBatch.inventBatchId
                    &&  inventBatch.itemId          == itemId
            {
                inventBatchId   = inventBatch.inventBatchId;
                anyBatchUpdated = true;

                // clearing records
                delete_from pdsBatchAttributes
                where pdsBatchAttributes.InventBatchId == InventBatchId
                    && pdsBatchAttributes.itemId       == itemId;

                insert_recordset pdsBatchAttributes(ItemId, PdsBatchAttribId, PdsBatchAttribValue, InventBatchId)
                select ItemId, PdsBatchAttribId, PdsBatchAttribValue, inventBatchId
                    from pdsBatchAttributesInput
                    where pdsBatchAttributesInput.RefRecId                          == refRecId
                        && pdsBatchAttributesInput.RefTableId                       == refTableId
                        && pdsBatchAttributesInput.PdsBatchAttribAssignedToBatch    == NoYes::No;
            }
        }

        if (anyBatchUpdated)
        {
            update_recordSet pdsBatchAttributesInput
                    setting PdsBatchAttribAssignedToBatch = NoYes::Yes
                    where pdsBatchAttributesInput.RefRecId                              == refRecId
                            && pdsBatchAttributesInput.RefTableId                       == refTableId
                            && pdsBatchAttributesInput.PdsBatchAttribAssignedToBatch    == NoYes::No;
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cascadeDetailsToBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cascades the batch attribute input values to the batch attribute records associated with it.
    /// </summary>
    /// <param name="_common">The source line.</param>
    public static void cascadeDetailsToBatchAttributes(Common _common)
    {
        InventDim   inventDimDirect;
        ItemId      itemId;

        switch (_common.tableId)
        {
            case tableNum(PurchParmLine):
                PurchParmLine purchParmLine = _common as PurchParmLine;

                inventDimDirect = purchParmLine.inventDim();
                itemId = purchParmLine.ItemId;
                break;
                
            case tableNum(ConsignmentDraftReplenishmentOrderJournalLine):
                ConsignmentDraftReplenishmentOrderJournalLine consignmentDraftReplenishmentOrderJournalLine = _common as ConsignmentDraftReplenishmentOrderJournalLine;

                inventDimDirect = consignmentDraftReplenishmentOrderJournalLine.inventDim();
                itemId = consignmentDraftReplenishmentOrderJournalLine.ItemId;
                break;

            default: throw error(error::wrongUseOfFunction(funcName()));
        }

        if (PdsBatchAttributesInput::existsAny(_common.RecId, _common.TableId))
        {
            //
            // there is batch attribute information specified on the PurchParmLine (posting line)
            // and that one has batch attributes
            //
            PdsBatchAttributesInput::cascadeBatchAttribSpecifiedOnReceiptPost(_common);
        }
        else if (inventDimDirect.inventBatchId
            && PdsBatchAttributes::existsAny(itemId, inventDimDirect.inventBatchId))
        {
            //
            // there is a batch number specified directly on the purchase order line
            // and that one has batch attributes
            //
            PdsBatchAttributesInput::cascadeBatchAttribSpecifiedDirectOnLine(_common, inventDimDirect.inventBatchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RefRecId _refRecId,
                            RefTableId _refTableId,
                            PdsBatchAttribId _pdsBatchAttribId)
    {
        return _refRecId
            && _refTableId
            && (select firstonly RecId
                    from   pdsBatchAttributesInput
                    where  pdsBatchAttributesInput.RefRecId == _refRecId
                        && pdsBatchAttributesInput.RefTableId == _refTableId
                        && pdsBatchAttributesInput.PdsBatchAttribId
                            == _pdsBatchAttribId
                ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAny</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether any attribute exists with the specified reference.
    /// </summary>
    /// <param name="_refRecId">
    ///     The reference to an ID of a record.
    /// </param>
    /// <param name="_refTableId">
    ///     The reference to an ID of a table.
    /// </param>
    /// <returns>
    ///     true if any attribute exists linked to the specified arguments; otherwise, false.
    /// </returns>
    public static boolean existsAny(RefRecId _refRecId, RefTableId _refTableId)
    {
        PdsBatchAttributesInput pdsBatchAttributesInput;

        if (!_refRecId || !_refTableId)
        {
            return false;
        }

        select firstonly RecId
            from   pdsBatchAttributesInput
            where  pdsBatchAttributesInput.RefRecId == _refRecId
                && pdsBatchAttributesInput.RefTableId == _refTableId;

        return (pdsBatchAttributesInput.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsBatchAttributesInput find(
                RefRecId _refRecId,
                RefTableId _refTableId,
                PdsBatchAttribId _pdsBatchAttribId,
                boolean _forUpdate = false)
    {
        PdsBatchAttributesInput pdsBatchAttributesInput;

        if (!prmisDefault(_forUpdate))
        {
            pdsBatchAttributesInput.selectForUpdate(_forUpdate);
        }

        select firstonly pdsBatchAttributesInput
            where  pdsBatchAttributesInput.RefRecId == _refRecId
                && pdsBatchAttributesInput.RefTableId == _refTableId
                && pdsBatchAttributesInput.PdsBatchAttribId == _pdsBatchAttribId;

        return pdsBatchAttributesInput;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@PDS1070</DeveloperDocumentation>
	<Label>@PRO1607</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>PdsBatchAttribReference</TitleField1>
	<TitleField2>PdsBatchAttribId</TitleField2>
	<ClusteredIndex>PdsBatchAttributesIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>PdsBatchAttributesIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttributes</Name>
			<Label>@PRO1588</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@PRO1834</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribAssignedToBatch</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribAssignedToBatch</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RefTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PdsBatchAttributesIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RefTableId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventBatch</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalProd</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProdJournalProd</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchParmLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchParmLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefTableId</Name>
					<Field>RefTableId</Field>
					<RelatedField>TableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>