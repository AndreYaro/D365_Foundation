<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateAgreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TAMVendRebateAgreement extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the vendor rebate agreement can be submitted to workflow or not.
    /// </summary>
    /// <param name="_workflowType">
    /// The workflow type for which the record is being validated; optional.
    /// </param>
    /// <returns>
    /// true if the vendor rebate agreement can be submitted to workflow; otherwise, false.
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        return this.RecId != 0
            && this.wfApprovalStatus == TAMVendRebateApprovalStatus::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfLineExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the agreement has existing related <c>TAMVendRebateAgreementLine</c> record.
    /// </summary>
    /// <param name="throwError">
    /// If true an error is thrown on check failure.
    /// </param>
    /// <returns>
    /// true if any related <c>TAMVendRebateAgreementLine</c> record exists; otherwise false.
    /// </returns>
    public boolean checkIfLineExists(boolean throwError = true)
    {
        TAMVendRebateAgreementLine  line;
        boolean                     ret = true;

        select firstonly RecId from line
            where line.RebateAgreementRefRecId == this.RecId;

        if (!line.RecId)
        {
            if (throwError)
            {
            ret = checkFailed("@PDS1987");
        }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateAmountRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the Rebate amount satisfies the Rebate mimimum amount requirements.
    /// </summary>
    /// <param name="_rebateAmount">
    /// The rebate amount.
    /// </param>
    /// <param name="_currency">
    /// The currency on the rebate.
    /// </param>
    /// <returns>
    /// true if Rebate amount satisfies the rebate minimum amount requirements; otherwise, false.
    /// </returns>
    public boolean checkRebateAmountRequirements(real           _rebateAmount,
                                                CurrencyCode    _currency)
    {
        boolean     ret = true;
        real        rebateAmount = _rebateAmount;

        if (_currency != this.RebateCurrency)
        {
            rebateAmount = CurrencyExchangeHelper::curAmount2CurAmount(rebateAmount, _currency, this.RebateCurrency);
        }

        if (abs(rebateAmount) < abs(this.RebateMinAmt))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateQtyRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate quantity satisfies the rebate minimum quantity requiremets.
    /// </summary>
    /// <param name="_rebateQty">
    /// The rebate quantity.
    /// </param>
    /// <param name="_purchUnit">
    /// The purchase unit on the transaction.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> for which to check requirements.
    /// </param>
    /// <returns>
    /// true if the rebate quantity satisfies rebate minimum quantity requiremets; otherwise, false.
    /// </returns>
    public boolean checkRebateQtyRequirements(
        SalesQty    _rebateQty,
        PurchUnit   _purchUnit,
        ItemId      _itemId = '')
    {
        return this.checkProductRebateQuantityRequirements(
            _rebateQty,
            _purchUnit,
            _itemId,
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductRebateQuantityRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate quantity satisfies the rebate minimum quantity requiremets.
    /// </summary>
    /// <param name="_rebateQty">
    /// The rebate quantity.
    /// </param>
    /// <param name="_purchUnit">
    /// The purchase unit on the transaction.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> for which to check requirements.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> for which to check requirements.
    /// </param>
    /// <returns>
    /// true if the rebate quantity satisfies rebate minimum quantity requiremets; otherwise, false.
    /// </returns>
    public boolean checkProductRebateQuantityRequirements(
        SalesQty    _rebateQty,
        PurchUnit   _purchUnit,
        ItemId      _itemId,
        InventDimId _inventDimId)
    {
        real rebateQty = _rebateQty;
        boolean ret = true;

        if (_purchUnit != this.RebateUnit)
        {
            if (this.RebateUOMOption == TAMRebateUOMOption::Convert)
            {
                EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                                        _itemId,
                                                                                        _inventDimId,
                                                                                        _purchUnit,
                                                                                        this.RebateUnit,
                                                                                        NoYes::No,
                                                                                        NoYes::No);
                if (ecoResProductUnitConverter.canValueBeConverted())
                {
                    rebateQty = ecoResProductUnitConverter.convertValue(_rebateQty);
                }
                else
                {
                    ret = false;
                }
            }
            else
            {
                ret = false;
            }
        }

        if (ret
            && abs(rebateQty) < abs(this.RebateMinQty))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRebateRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the vendor rebate agreement requirements for the passed in parameters.
    /// </summary>
    /// <param name="_rebateAmount">
    /// The rebate amount that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_rebateQty">
    /// The rebate quantity that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_purchUnit">
    /// The purchase unit that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_currency">
    /// The currency code that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> that should be validated against the rebate requirements; optional.
    /// </param>
    /// <returns>
    /// true if the vendor rebate is valid based on the passed in parameters; otherwise, false.
    /// </returns>
    public boolean checkRebateRequirements(
        real             _rebateAmount,
        PurchQty        _rebateQty,
        PurchUnit       _purchUnit,
        CurrencyCode    _currency,
        ItemId          _itemId = '')
    {
        return this.checkProductRebateRequirements(
            _rebateAmount,
            _rebateQty,
            _purchUnit,
            _currency,
            _itemId,
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductRebateRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the vendor rebate agreement requirements for the passed in parameters.
    /// </summary>
    /// <param name="_rebateAmount">
    /// The rebate amount that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_rebateQty">
    /// The rebate quantity that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_purchUnit">
    /// The purchase unit that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_currency">
    /// The currency code that should be validated against the rebate requirements.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> that should be validated against the rebate requirements; optional.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> for which to check requirements.
    /// </param>
    /// <returns>
    /// true if the vendor rebate is valid based on the passed in parameters; otherwise, false.
    /// </returns>
    public boolean checkProductRebateRequirements(
        real            _rebateAmount,
        PurchQty        _rebateQty,
        PurchUnit       _purchUnit,
        CurrencyCode    _currency,
        ItemId          _itemId,
        InventDimId     _inventDimId)
    {
        boolean ret = true;

        if (!this.RebateMinAmt
            && !this.RebateMinQty)
        {
            ret = checkFailed("@PRO1351");
        }
        else if (this.RebateMinAmt != 0)
        {
            ret = this.checkRebateAmountRequirements(_rebateAmount, _currency);
        }
        else if (this.RebateMinQty != 0)
        {
            ret = this.checkProductRebateQuantityRequirements(_rebateQty, _purchUnit, _itemId, _inventDimId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedRebateTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate agreement is assigned to the <c>TAMVendRebateTable</c> table.
    /// </summary>
    /// <returns>
    /// true if the Rebate agreement is assigned to the <c>TAMVendRebateTable</c>; otherwise, false.
    /// </returns>
    public boolean checkRelatedRebateTransExist()
    {
        return (select firstonly RecId from tamVendRebateTable
                    where tamVendRebateTable.VendRebateAgreementRefRecId == this.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUOMConvert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the unit of measure conversion method is valid according to the <c>TAMVendRebateAgreementLine</c> records.
    /// </summary>
    /// <returns>
    /// false if there is a quantity overlap; otherwise, true.
    /// </returns>
    public boolean checkUOMConvert()
    {
        TAMVendRebateAgreementLine  tamVendRebateAgreementLine;
        boolean                     ok = true;

        if (this.RebateUOMOption == TAMRebateUOMOption::Convert)
        {
            select firstonly RecId
                from tamVendRebateAgreementLine
                where tamVendRebateAgreementLine.RebateAgreementRefRecId == this.RecId
                    && tamVendRebateAgreementLine.RebateUnit             != this.RebateUnit;

            if (tamVendRebateAgreementLine.RecId)
            {
                ok = checkFailed("@PDS1906");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the date is within the date effective range.
    /// </summary>
    /// <param name="_date">
    /// The date to validate based on the date effective range.
    /// </param>
    /// <returns>
    /// True if the date is within the date effective range; otherwise false.
    /// </returns>
    public boolean checkValidDate(date _date)
    {
        boolean ret = true;

        if (this.ValidFrom
            && this.ValidTo)
        {
            if (this.ValidFrom > _date
                || this.ValidTo < _date)
            {
                ret = false;
            }
        }
        else if (this.ValidFrom)
        {
            if (this.ValidFrom > _date)
            {
                ret = false;
            }
        }
        else if (this.ValidTo)
        {
            if (this.ValidTo < _date)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the standard currency for the company.
    /// </summary>
    /// <returns>
    /// The company standard currency.
    /// </returns>
    public display CurrencyCode companyCurrencyCode()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.CumulatePurchaseBy = TAMCumulationPeriod::Invoice;
        this.RebateCurrency     = this.rebateCurrencyCode();
        this.ApprovalRequired   = true;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateRebateAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invalidates the vendor rebate agreement.
    /// </summary>
    /// <param name="_forceUpdate">
    /// A <c>Boolean</c> value that specifies whether to update the record or not; optional.
    /// </param>
    public void invalidateRebateAgreement(boolean _forceUpdate = false)
    {
        this.Validated          = false;
        this.Verifier           = 0;
        this.wfApprovalStatus   = TAMVendRebateApprovalStatus::NotSubmitted;

        if (_forceUpdate)
        {
            this.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            this.doUpdate();
        }
        info("@PDS1408");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the vendor rebate agreement is Validated.
    /// </summary>
    /// <returns>
    /// true if the vendor rebate agreement is validated; otherwise, false.
    /// </returns>
    public boolean isValidated()
    {
        return this.Validated
               && (this.Verifier
                   || this.WFApprovalStatus == TAMVendRebateApprovalStatus::Approved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic based on the changed field value.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field being changed.
    /// </param>
    /// <param name="_arrayIndex">
    /// A integer denoting the index of the passed array.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        TAMVendRebate               tamVendRebate;
        super(_fieldName, _arrayIndex);

         switch (_fieldName)
        {
            case fieldStr(TAMVendRebateAgreement, RebateProgramId):
                tamVendRebate = TAMVendRebate::find(this.RebateProgramId);
                this.LedgerDimension = tamVendRebate.LedgerDimension;
                this.OffsetLedgerDimension = tamVendRebate.OffsetLedgerDimension;
                break;

            case fieldStr(TAMVendRebateAgreement, CumulatePurchaseBy):
                if (this.CumulatePurchaseBy != TAMCumulationPeriod::CustomizedPeriod)
                {
                    this.RebateCustomizedPeriodType = '';
                }
                break;
        }

        // If a field other than the TAMCustRebateApprovalStatus has been changed
        // and the workflow is in a status other than NotSubmitted, change the workflow
        // status to NotSubmitted which will require the user to submit their changes to
        // the workflow before validating.
        if (this.wfApprovalStatus == TAMVendRebateApprovalStatus::Approved
            && _fieldName != fieldStr(TAMVendRebateAgreement, wfApprovalStatus))
        {
            this.wfApprovalStatus = TAMVendRebateApprovalStatus::NotSubmitted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the vendor rebate currency code.
    /// </summary>
    /// <returns>
    /// The currency code on the vendor rebate.
    /// </returns>
    public display CurrencyCode rebateCurrencyCode()
    {
        CurrencyCode currencyCode;

        currencyCode = this.companyCurrencyCode();

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalcDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date used for comparison based on the calculation date
    /// selected on the vendor rebate agreement.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record for which to find the comparison date.
    /// </param>
    /// <returns>
    /// The date that will be used for comparison based on the calculation date field.
    /// </returns>
    public date setCalcDate(PurchLine  _purchLine)
    {
        date    retDate;

        if (this.VendRebateCalcDateType == TAMVendRebateCalcDateType::CreatedDate)
        {
            retDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else if (this.VendRebateCalcDateType == TAMVendRebateCalcDateType::RequestedDeliveryDate)
        {
            retDate = _purchLine.DeliveryDate;
        }

        return retDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TAMVendRebateAgreement</c> record.
    /// </summary>
    /// <param name="_invalidate">
    /// true if the record should be invalided; otherwise, false.
    /// </param>
    public void update(boolean _invalidate = true)
    {
        TAMVendRebateAgreementLine tamVendRebateAgreementLine;

        if (_invalidate && this.orig().isValidated() && this.WFApprovalStatus != TAMVendRebateApprovalStatus::Approved)
        {
            this.invalidateRebateAgreement();
            info("@PDS1408");
        }

        this.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        if (this.orig().RebateCurrency != this.RebateCurrency
            || this.orig().RebateUnit != this.RebateUnit)
        {
            tamVendRebateAgreementLine.skipDataMethods(true);
            update_recordSet tamVendRebateAgreementLine
                setting Currency   = this.RebateCurrency,
                        RebateUnit = this.RebateUnit
            where tamVendRebateAgreementLine.RebateAgreementRefRecId == this.RecId
                && (tamVendRebateAgreementLine.Currency   != this.RebateCurrency
                    || tamVendRebateAgreementLine.RebateUnit != this.RebateUnit);
            tamVendRebateAgreementLine.skipDataMethods(false);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>TAMVendRebateAgreement</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
            case fieldStr(TAMVendRebateAgreement, RebateMinAmt):
                if (this.RebateMinAmt < 0)
                {
                    ret = checkFailed("@SYS134947");
                }
                break;

            case fieldStr(TAMVendRebateAgreement, RebateMinQty):
                if (this.RebateMinQty < 0)
                {
                    ret = checkFailed("@SYS134947");
                }
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret
            && !this.VendRebateRelation
            && (this.VendRebateCode == TableGroupAll::GroupId
             || this.VendRebateCode == TableGroupAll::Table))
        {
            ret = checkFailed("@MCR40277");
        }

        if (ret
            && !this.ItemRebateRelation
            && (this.ItemRebateCode == TAMVendRebateItemCode::GroupId
             || this.ItemRebateCode == TAMVendRebateItemCode::Table))
        {
            ret = checkFailed("@PRO38");
        }

        if (ret
            && !this.checkRebateRequirements(
                    this.RebateMinAmt,
                    this.RebateMinQty,
                    this.RebateUnit,
                    this.RebateCurrency))
        {
            ret = false;
        }

        if (ret
            && this.CumulatePurchaseBy != TAMCumulationPeriod::Invoice
            && this.ApprovalRequired == NoYes::No)
        {
            ret = checkFailed("@PRO1526");
        }

        if (ret)
        {
            if (this.ItemRebateCode == TAMVendRebateItemCode::Table
                && !PdsGlobal::pdsIsCWItem(this.ItemRebateRelation)
                && this.UnitType == TAMRebateUnitType::CWUnit)
            {
                ret = checkFailed("@PDS1048");
            }
        }

        if (ret)
        {
            if (this.CumulatePurchaseBy == TAMCumulationPeriod::CustomizedPeriod
                && !this.RebateCustomizedPeriodType)
            {
                ret = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(TAMVendRebateAgreement), fieldNum(TAMVendRebateAgreement, RebateCustomizedPeriodType))));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a vendor rebate agreement exists with the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value for which to search the vendor rebate agreement table.
    /// </param>
    /// <returns>
    /// true if a vendor rebate agreement exists with the passed in <c>RecId</c>; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId
            && (select firstonly RecId from tamVendRebateAgreement
                    where tamVendRebateAgreement.RecId == _recId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a vendor rebate agreement based on the passed in <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> value for which to search the vendor rebate agreement table.
    /// </param>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether to select the record for update or not; optional.
    /// </param>
    /// <returns>
    /// The vendor rebate agreement that was found based on the passed in <c>RecId</c>.
    /// </returns>
    public static TAMVendRebateAgreement find(RecId     _recId,
                                            boolean     _forUpdate = false)
    {
        TAMVendRebateAgreement   tamVendRebateAgreement;
        date fromDate = dateNull();
        date toDate = dateMax();

        if (_recId)
        {
            tamVendRebateAgreement.selectForUpdate(_forUpdate);

            select firstonly validTimeState(fromDate, toDate) tamVendRebateAgreement
                where tamVendRebateAgreement.RecId == _recId;
        }

        return tamVendRebateAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status for an approval status.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>TAMVendRebateAgreement</c> record for which to set the workflow status.
    /// </param>
    /// <param name="_approvalStatus">
    /// The workflow status to set.
    /// </param>
    public static void setWorkflowStatus(RecId _recId, TAMVendRebateApprovalStatus _approvalStatus)
    {
        TAMVendRebateAgreement tamVendRebateAgreement = TAMVendRebateAgreement::find(_recId, true);

        ttsbegin;
        tamVendRebateAgreement.wfApprovalStatus = _approvalStatus;
        tamVendRebateAgreement.update(false);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the agreement line breaks are valid.
    /// </summary>
    /// <returns>
    /// false if one of the line breaks is invalid; otherwise, true.
    /// </returns>
    public boolean checkLineBreaks()
    {
        TAMVendRebateAgreementLine  tamVendRebateAgreementLine;
        InventDimId                 prevInventDimId;
        CurrencyCode                prevCurrency;
        UnitOfMeasureSymbol         prevUOM;
        TAMToValue                  prevToValue = 0;
        TAMRebateAmtType            prevRebateAmtType;
        boolean                     ok        = true;
        boolean                     firstLine = true;

        while select tamVendRebateAgreementLine order by InventdimId, Currency, RebateUnit, FromValue
            where tamVendRebateAgreementLine.RebateAgreementRefRecId  == this.RecId
        {
            if (firstLine)
            {
                firstLine = false;
            }
            else
            {
                if (tamVendRebateAgreementLine.InventdimId   != prevInventDimId
                    || tamVendRebateAgreementLine.Currency   != prevCurrency
                    || tamVendRebateAgreementLine.RebateUnit != prevUOM)
                {
                    ok = this.groupChangeCheckValid(prevRebateAmtType, prevToValue, this.RebateLineBreakType);
                }
                else
                {
                    ok = !TAMVendRebateAgreement::lineValueHasGapOrOverlap(tamVendRebateAgreementLine.FromValue, prevToValue);
                }
            }

            if (!ok)
            {
                return ok;
            }

            prevInventDimId   = tamVendRebateAgreementLine.InventdimId;
            prevCurrency      = tamVendRebateAgreementLine.Currency;
            prevUOM           = tamVendRebateAgreementLine.RebateUnit;
            prevToValue       = tamVendRebateAgreementLine.toValue();
            prevRebateAmtType = tamVendRebateAgreementLine.RebateAmtType;
        }

        // check for the last line if any lines exist
        if (!firstLine)
        {
            ok = this.groupChangeCheckValid(prevRebateAmtType, prevToValue, this.RebateLineBreakType);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupChangeCheckValid</Name>
				<Source><![CDATA[
    private boolean groupChangeCheckValid(TAMRebateAmtType          _prevRebateAmtType,
                                            TAMToValue              _prevToValue,
                                            TAMRebateLineBreakType  _lineBreakType)
    {
        boolean ok = true;

        ok = TAMVendRebateAgreement::rebateAmtTypeForUpperThresCheckValid(_prevRebateAmtType, _prevToValue, _lineBreakType);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValueHasGapOrOverlap</Name>
				<Source><![CDATA[
    private static boolean lineValueHasGapOrOverlap(TAMFromValue _currentFromValue, TAMToValue _previousToValue)
    {
        if (_currentFromValue == _previousToValue)
        {
            return false;
        }

        if (_currentFromValue < _previousToValue)
        {
            checkFailed("@PDS1425");
        }
        else
        {
            checkFailed("@PDS1424");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebateAmtTypeForUpperThresCheckValid</Name>
				<Source><![CDATA[
    private static boolean rebateAmtTypeForUpperThresCheckValid(TAMRebateAmtType        _rebateAmountType,
                                                                TAMToValue              _toValue,
                                                                TAMRebateLineBreakType  _lineBreakType)
    {
        boolean checkValid = true;

        if ((_rebateAmountType == TAMRebateAmtType::Percentage)
            && _lineBreakType == TAMRebateLineBreakType::Quantity
            && (_toValue != realMax()))
        {
            checkValid = checkFailed(strFmt("@SYS4010202", TAMRebateLineBreakType::Quantity,
                                                           TAMRebateAmtType::Percentage,
                                                           _toValue,
                                                            SysDictField::findFieldById(tableNum(TAMVendRebateAgreementLine),
                                                                                        fieldNum(TAMVendRebateAgreementLine,
                                                                                                 ToValue)).label()));
        }
        else if ((_rebateAmountType == TAMRebateAmtType::AmountPerUnit)
            && _lineBreakType == TAMRebateLineBreakType::Amount
            && (_toValue != realMax()))
        {
            checkValid = checkFailed(strFmt("@SYS4010202", TAMRebateLineBreakType::Amount,
                                                           TAMRebateAmtType::AmountPerUnit,
                                                           _toValue,
                                                           SysDictField::findFieldById(tableNum(TAMVendRebateAgreementLine),
                                                                                       fieldNum(TAMVendRebateAgreementLine,
                                                                                                ToValue)).label()));
        }

        return checkValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts rebate agrement lines values from the old to new currency set on the rebate agreement.
    /// </summary>
    public void convertCurrencyCode()
    {
        TAMVendRebateAgreementLine  tamVendRebateAgreementLine;

        ttsBegin;
        while select forUpdate tamVendRebateAgreementLine
            where tamVendRebateAgreementLine.RebateAgreementRefRecId == this.RecId
        {
            tamVendRebateAgreementLine.Currency    = this.RebateCurrency;
            
            tamVendRebateAgreementLine.RebateValue = TAMVendRebateAgreement::convertRebateValue(tamVendRebateAgreementLine.RebateValue, tamVendRebateAgreementLine.RebateAmtType, this.orig().RebateCurrency, this.RebateCurrency);

            if (this.RebateLineBreakType == TAMRebateLineBreakType::Amount)
            {
                tamVendRebateAgreementLine.FromValue = CurrencyExchangeHelper::curAmount2CurAmount(tamVendRebateAgreementLine.FromValue, this.orig().RebateCurrency, this.RebateCurrency);
                tamVendRebateAgreementLine.ToValue   = CurrencyExchangeHelper::curAmount2CurAmount(tamVendRebateAgreementLine.ToValue, this.orig().RebateCurrency, this.RebateCurrency);
            }
            tamVendRebateAgreementLine.doUpdate();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertRebateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a rebate value from one currency to another currency.
    /// </summary>
    /// <param name = "_rebateValue">
    /// A rebate value to convert.
    /// </param>
    /// <param name = "_rebateAmountType">
    /// The type of the rebate value
    /// </param>
    /// <param name = "_fromCurrencyCode">
    /// A currency to convert from.
    /// </param>
    /// <param name = "_toCurrencyCode">
    /// A currency to convert to.
    /// </param>
    /// <returns>
    /// The converted rebate value.
    /// </returns>
    static public TAMRebateValue convertRebateValue(TAMRebateValue      _rebateValue,
                                                    TAMRebateAmtType    _rebateAmountType,
                                                    CurrencyCode        _fromCurrencyCode, 
                                                    CurrencyCode        _toCurrencyCode)
    {
        TAMRebateValue rebateValue = _rebateValue;

        switch (_rebateAmountType)
        {
            case TAMRebateAmtType::AmountPerUnit :
                rebateValue = ExchangeRateHelper::curPrice2CurPrice(_rebateValue, _fromCurrencyCode, _toCurrencyCode);
                break;

            case TAMRebateAmtType::FixedAmount:
                rebateValue = CurrencyExchangeHelper::curAmount2CurAmount(_rebateValue, _fromCurrencyCode, _toCurrencyCode);
                break;
        }

        return rebateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        switch (_fieldId)
        {
            case fieldNum(TAMVendRebateAgreement, VendRebateCode):
                this.VendRebateRelation = '';
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>TAMVendorRebate</ConfigurationKey>
	<DeveloperDocumentation>@MCR40076</DeveloperDocumentation>
	<FormRef>TAMVendRebateAgreements</FormRef>
	<Label>@PRO1319</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>VendRebateCode</TitleField1>
	<TitleField2>VendRebateRelation</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TAMVendRebateAgreementSeqIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>TAMVendRebateAgreementSeqIdx</ReplacementKey>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRebateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRebateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRebateRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WFApprovalStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateProgramId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRebateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRebateRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRebateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRebateRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Accounts</Name>
			<Label>@SYS11800</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approval</Name>
			<Label>@SYS2453</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovalRequired</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cumulate</Name>
			<Label>@PRO1294</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CumulatePurchaseBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateCustomizedPeriodType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@PDS1409</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Date</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRebateCalcDateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemRebateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemRebateRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineBreaks</Name>
			<Label>@MCR40136</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateLineBreakType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Notes</Name>
			<Label>@SYS70989</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS55132</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateTakenFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CumulatePurchaseBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateTakenFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Rebate</Name>
			<Label>@PRO39</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateMinQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateMinAmt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RebateProgram</Name>
			<Label>@PRO1304</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateProgramId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Unit</Name>
			<Label>@SYS40864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RebateUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RebateUOMOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Validation</Name>
			<Label>@PDS1411</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Validated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Verifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS8079</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendRebateCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendRebateRelation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workflow</Name>
			<Label>@SYS103643</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WFApprovalStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Taxes</Name>
			<Label>@SYS333961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsTaxable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApprovalRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@PRO1328</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CumulatePurchaseBy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMCumulationPeriod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemRebateCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMVendRebateItemCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRebateRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMItemRebateRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@PDS1901</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Note</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@PDS1903</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateCustomizedPeriodType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateCustomizedPeriodType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateLineBreakType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMRebateLineBreakType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RebateMinAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateMinAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RebateMinQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateMinQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateProgramId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateProgramId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateTakenFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMVendRebateTakenFrom</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RebateUOMOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMRebateUOMOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TAMRebateUnitType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Validated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateValidated</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@SYS35856</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Label>@PDS805</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendRebateCalcDateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMVendRebateCalcDateType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendRebateCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendRebateRelation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Verifier</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMRebateVerifier</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WFApprovalStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TAMVendRebateApprovalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTaxable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS55140</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RebateCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TAMVendRebateAgreementSeqIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RebateProgramId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendRebateCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendRebateRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRebateCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRebateRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RebateUnit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RebateCurrency</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomizedPeriodType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjPeriodTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateCustomizedPeriodType</Name>
					<SourceEDT>TAMRebateCustomizedPeriodType</SourceEDT>
					<Field>RebateCustomizedPeriodType</Field>
					<RelatedField>PeriodId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRebateRelation</Name>
					<Field>ItemRebateRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRebateCode</Name>
					<Field>ItemRebateCode</Field>
					<ValueStr>TAMVendRebateItemCode::Table</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationDefault</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_RebateAgreementDimension</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombinationOffset</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_RebateAgreementOffsetDimension</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RebateUnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateUnit</Name>
					<Field>RebateUnit</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SymbolIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMItemVendRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMItemVendRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRebateCode</Name>
					<Field>ItemRebateCode</Field>
					<ValueStr>TAMVendRebateItemCode::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRebateRelation</Name>
					<SourceEDT>TAMItemVendRebateGroupId</SourceEDT>
					<Field>ItemRebateRelation</Field>
					<RelatedField>ItemVendRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TAMVendRebate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TAMVendRebate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateProgramId</Name>
					<Field>RebateProgramId</Field>
					<RelatedField>RebateProgramId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProgramIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMVendRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMVendRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>VendRebateCode</Name>
					<Field>VendRebateCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRebateRelation</Name>
					<SourceEDT>TAMVendRebateGroupId</SourceEDT>
					<Field>VendRebateRelation</Field>
					<RelatedField>VendRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>VendRebateCode</Name>
					<Field>VendRebateCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendRebateRelation</Name>
					<Field>VendRebateRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Verifier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Verifier</Name>
					<Field>Verifier</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RebateCurrency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>RebateCurrency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemRebateCode</Name>
					<Field>ItemRebateCode</Field>
					<ValueStr>TAMVendRebateItemCode::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>