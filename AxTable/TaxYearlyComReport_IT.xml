<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxYearlyComReport_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxYearlyComReport_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxReportAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calcTaxReportAmount(TaxYearlyComReport_IT _taxYearlyComReport_IT)
    {
        Amount calcTaxAmount;
        TaxYearlyComSetup_IT setupField;
        TaxYearlyComTaxCodes_IT setupTaxCodes;
        TaxYearlyComTotal_IT setupComTotal;
        TaxReportLine_IT reportLine;
        LineNum nextLineNum;
        TaxReportLine_IT reportLineTotal;

        TransDate periodStart = mkDate(1, 1,_taxYearlyComReport_IT.Year);
        TransDate periodEnd = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), periodStart);

        ttsbegin;

        select maxof(LineNum) from reportLine
            where reportLine.TaxReportHeader == _taxYearlyComReport_IT.TaxReportHeader;
        nextLineNum = reportLine.LineNum + 1;

        while select setupField
        {
            reportLine = TaxReportLine_IT::findFieldID(_taxYearlyComReport_IT.TaxReportHeader, setupField.FieldID, true);

            if (!reportLine)
            {
                reportLine.TaxReportHeader = _taxYearlyComReport_IT.TaxReportHeader;
                reportLine.FieldID = setupField.FieldID;
                reportLine.FieldDescription = setupField.FieldDescription;
                reportLine.FieldFormat = setupField.FieldFormat;
                reportLine.LineNum = nextLineNum;
                nextLineNum++;
            }

            switch (setupField.Calculation)
            {
                case TaxYearlyComCalculation_IT::Tax:
                    calcTaxAmount = 0;

                    while select setupTaxCodes
                        where setupTaxCodes.TaxYearlyComSetup == setupField.RecId
                    {
                        calcTaxAmount += setupField.Sign * this.getAmount(
                            setupField.TaxReportingAmount,
                            setupField.getQuery(),
                            periodStart,
                            periodEnd,
                            _taxYearlyComReport_IT.atecofinCode,
                            setupTaxCodes.getExclusionsQuery(),
                            setupTaxCodes.TaxCode,
                            setupField.IncludeTaxInCostPrice);
                    }

                    reportLine.FieldValue = TaxReport770Writer_IT::valueNonPosNum(calcTaxAmount, setupField.FieldFormat);
                    break;

                case TaxYearlyComCalculation_IT::Manual:
                    reportLine.FieldValue = setupField.FieldValue;
                    break;

                case TaxYearlyComCalculation_IT::Total:
                    reportLine.FieldValue = '';
                    break;
            }

            reportLine.write();
        }

        while select setupField
            where setupField.Calculation == TaxYearlyComCalculation_IT::Total
        {
            reportLineTotal = TaxReportLine_IT::findFieldID(_taxYearlyComReport_IT.TaxReportHeader, setupField.FieldID, true);

            calcTaxAmount = 0;

            while select FieldID, Sign from setupComTotal
                where setupComTotal.TaxYearlyComSetup_IT == setupField.RecId
            {
                reportLine = TaxReportLine_IT::findFieldID(_taxYearlyComReport_IT.TaxReportHeader, setupComTotal.FieldID);
                calcTaxAmount += setupComTotal.Sign * TaxReport770Writer_IT::getNumFromNonPosValue(reportLine.FieldValue, reportLine.FieldFormat);
            }

            calcTaxAmount = calcTaxAmount * setupField.Sign;

            reportLineTotal.FieldValue = TaxReport770Writer_IT::valueNonPosNum(calcTaxAmount, setupField.FieldFormat);

            reportLineTotal.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void create(TaxYearlyCom_IT _taxYearlyCom)
    {
        TaxYearlyComReport_IT taxYearlyComReport;
        CompanyInfo companyInfo = CompanyInfo::find();

        ttsbegin;

        select firstonly taxYearlyComReport
            where taxYearlyComReport.atecofinCode == _taxYearlyCom.atecofinCode &&
                  taxYearlyComReport.Year == _taxYearlyCom.Year;

        if (! taxYearlyComReport)
        {
            taxYearlyComReport.atecofinCode = _taxYearlyCom.atecofinCode;
            taxYearlyComReport.TaxYearlyComId = _taxYearlyCom.TaxYearlyComId;
            taxYearlyComReport.Year = _taxYearlyCom.Year;
            taxYearlyComReport.CompanyName = companyInfo.name();
            taxYearlyComReport.CompanyFiscalCode = companyInfo.FiscalCode_IT;
            taxYearlyComReport.insert();

            this.calcTaxReportAmount(taxYearlyComReport);
            taxYearlyComReport.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the reporting amount of the field.
    /// </summary>
    /// <param name="_reportingAmount">
    /// The type of the reporting amount - either tax amount or tax base amount.
    /// </param>
    /// <param name="_queryHeader">
    /// The header filter query; usually specifies tax direction, can be edited by the user.
    /// </param>
    /// <param name="_periodStart">
    /// The start date of the reporting period.
    /// </param>
    /// <param name="_periodEnd">
    /// The end date of the reporting period.
    /// </param>
    /// <param name="_atecofinCode">
    /// The ATECOFIN code of the report.
    /// </param>
    /// <param name="_queryLines">
    /// The taxes posting filter query; can be empty; can contain filters on main accounts that should be excluded from the report.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_includeTaxInCostPrice">
    /// Pass true, if the sales tax charge should affect the tax amount.
    /// </param>
    /// <returns>
    /// The calculated reporting amount.
    /// </returns>
    private Amount getAmount(
        TaxReportingAmount_IT _reportingAmount,
        Query _queryHeader,
        TransDate _periodStart,
        TransDate _periodEnd,
        ATECOFINCode_IT _atecofinCode,
        Query _queryLines,
        TaxCode _taxCode,
        boolean _includeTaxInCostPrice)
    {
        boolean includeTaxInCostPrice = _includeTaxInCostPrice;
        Query query = new Query(_queryHeader);

        QueryBuildDataSource qbdsTaxBook = query.dataSourceTable(tableNum(TaxBook));
        findOrCreateRange_W(qbdsTaxBook, fieldNum(TaxBook, atecofinCode_IT), _atecofinCode);

        QueryBuildDataSource qbdsTaxTrans = query.dataSourceTable(tableNum(TaxTrans));

        if (_reportingAmount == TaxReportingAmount_IT::TaxAmount)
        {
            qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxAmount), SelectionField::Sum);
        }
        else
        {
            qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxBaseAmount), SelectionField::Sum);
            qbdsTaxTrans.addGroupByField(fieldNum(TaxTrans, TaxDirection));
            qbdsTaxTrans.addGroupByField(fieldNum(TaxTrans, Voucher));
            qbdsTaxTrans.addGroupByField(fieldNum(TaxTrans, TransDate));

            if (includeTaxInCostPrice && _reportingAmount == TaxReportingAmount_IT::TaxBase)
            {
                qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxAmount), SelectionField::Sum);
            }
        }

        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxInCostPriceMST), SelectionField::Sum);

        if (TaxParameters::reportUseVatDueDate_W())
        {
            QueryBuildDataSource qbdsTaxTrans_W = query.dataSourceTable(tableNum(TaxTrans_W));
            TaxYearlyComSetup_IT::setDefaultDateRange(qbdsTaxTrans_W, _periodStart, _periodEnd);
        }
        else
        {
            TaxYearlyComSetup_IT::setDefaultDateRange(qbdsTaxTrans, _periodStart, _periodEnd);
        }
        findOrCreateRange_W(qbdsTaxTrans, fieldNum(TaxTrans, TaxCode), _taxCode);

        if (SysQuery::queryHasRanges(_queryLines))
        {
            if (_reportingAmount == TaxReportingAmount_IT::TaxBase)
            {
                includeTaxInCostPrice = false;
            }

            QueryBuildDataSource qbdsTaxTransGJAE;
            qbdsTaxTransGJAE = qbdsTaxTrans.addDataSource(tableNum(TaxTransGeneralJournalAccountEntry));
            qbdsTaxTransGJAE.relations(true);
            if (TaxParameters::reportUseVatDueDate_W())
            {
                qbdsTaxTransGJAE.fetchMode(QueryFetchMode::One2One);
            }
            findOrCreateRange_W(qbdsTaxTransGJAE, fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship), SysQuery::value(TaxTransRelationshipType::TransactionLineAccount));

            QueryBuildDataSource qbdsGJAE;
            qbdsGJAE = qbdsTaxTransGJAE.addDataSource(tableNum(GeneralJournalAccountEntry));
            qbdsGJAE.relations(true);

            QueryBuildDataSource qbdsDimAttributeVC_GJAE;
            qbdsDimAttributeVC_GJAE = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimAttributeVC_GJAE.relations(true);

            QueryBuildDataSource qbdsMainAccount_GJAE;
            qbdsMainAccount_GJAE = qbdsDimAttributeVC_GJAE.addDataSource(tableNum(MainAccount));
            qbdsMainAccount_GJAE.relations(false);
            qbdsMainAccount_GJAE.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));
            qbdsMainAccount_GJAE.joinMode(JoinMode::NoExistsJoin);

            TaxYearlyComTaxCodes_IT::mergeQueries(qbdsMainAccount_GJAE, _queryLines);
        }

        Amount sumTaxAmount;

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(TaxTrans)))
            {
                TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));

                if (_reportingAmount == TaxReportingAmount_IT::TaxAmount)
                {
                    sumTaxAmount += taxTrans.TaxAmount;
                }
                else
                {
                    sumTaxAmount += taxTrans.TaxBaseAmount;
                }

                if (includeTaxInCostPrice)
                {
                    if (_reportingAmount == TaxReportingAmount_IT::TaxAmount)
                    {
                        sumTaxAmount -= taxTrans.TaxInCostPriceMST;
                    }
                    else if (_reportingAmount == TaxReportingAmount_IT::TaxBase && taxTrans.TaxAmount)
                    {
                        sumTaxAmount -= CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmount * (taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST) / taxTrans.TaxAmount);
                    }
                    else if (taxTrans.TaxDirection != TaxDirection::UseTax)
                    {
                        sumTaxAmount += taxTrans.TaxInCostPriceMST;
                    }
                }

                if (sumTaxAmount && _reportingAmount != TaxReportingAmount_IT::TaxAmount)
                {
                    GeneralJournalAccountEntry              generalJournalAccountEntry;
                    GeneralJournalEntry                     generalJournalEntry;
                    SubledgerVoucherGeneralJournalEntry     subledgerVoucherGeneralJournalEntry;

                    select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                        where generalJournalAccountEntry.PostingType == LedgerPostingType::MSTDiff
                    exists join generalJournalEntry
                        where generalJournalEntry.RecId    == generalJournalAccountEntry.GeneralJournalEntry
                            && generalJournalEntry.Ledger  == Ledger::current()
                    exists join subledgerVoucherGeneralJournalEntry
                        where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry  == generalJournalEntry.RecId
                            && subledgerVoucherGeneralJournalEntry.Voucher             == taxTrans.Voucher
                            && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId   == taxTrans.DataAreaId
                            && subledgerVoucherGeneralJournalEntry.AccountingDate      == taxTrans.TransDate;

                    sumTaxAmount += generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            }
        }

        return sumTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        TaxReportHeader_IT taxReportHeader;
        taxReportHeader.insert();
        this.TaxReportHeader = taxReportHeader.RecId;

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>IT</CountryRegionCodes>
	<DeveloperDocumentation>@SYS318827</DeveloperDocumentation>
	<FormRef>TaxYearlyComReport_IT</FormRef>
	<Label>@SYS125622</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ATECOFINCode</TitleField1>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>ModuleYearCode</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ATECOFINCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Year</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Year</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ATECOFINCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FieldSetup</Name>
			<Label>@SYS54714</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyInformation</Name>
			<Label>@SYS81121</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyCoRegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyFiscalCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Import</Name>
			<Label>@SYS1052</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Header</Name>
			<Label>@SYS4925</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ATECOFINCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxYearlyComId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Year</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseOperation</Name>
			<Label>@SYS125646</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesOperation</Name>
			<Label>@SYS125647</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxPayer</Name>
			<Label>@SYS96721</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Writer</Name>
			<Label>@SYS125609</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WriterFiscalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriterRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriterTaxNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ATECOFINCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ATECOFINCode_IT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyCoRegNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyCoRegNum</ExtendedDataType>
			<Label>@SYS125640</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyFiscalCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>FiscalCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxYearlyComId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxYearlyComId_IT</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WriterFiscalCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>FiscalCode</ExtendedDataType>
			<Label>@SYS343573</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WriterRole</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WriterRole</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WriterTaxNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>IVACode</ExtendedDataType>
			<Label>@SYS125645</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Year</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Yr</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxReportHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ModuleYearCode</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Year</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ATECOFINCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TaxYearlyCom_IT</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxYearlyCom_IT</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxYearlyCommunications</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxYearlyCommunicationReport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Year</Name>
					<Field>Year</Field>
					<RelatedField>Year</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ATECOFINCode</Name>
					<Field>ATECOFINCode</Field>
					<RelatedField>ATECOFINCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxYearlyComId</Name>
					<Field>TaxYearlyComId</Field>
					<RelatedField>TaxYearlyComId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxReportHeader_IT</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>TaxReportHeader_IT</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxReportHeader</Name>
					<Field>TaxReportHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>