<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailPeriodCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDayInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds days in period.
    /// </summary>
    /// <param name="_periodDate">
    /// The period date.
    /// </param>
    /// <param name="_oprDate">
    /// The opration date.
    /// </param>
    /// <returns>
    /// The result date.
    /// </returns>
    date addDayInPeriod(date _periodDate,date _oprDate)
    {
        date            periodDate;
        date            periodEndDate;
        int             addDays;
        int             periodDateDays;
        RecId           calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        addDays = _oprDate - LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId, _oprDate);
        periodEndDate = LedgerFiscalCalendar::findPeriodEndDateByDateWithIndex(calendarRecId, _periodDate);

        if (addDays)
        {
             periodDateDays = periodEndDate - _periodDate;
        }

        if ((_periodDate + addDays) <= periodEndDate && addDays == periodDateDays)
        {
            periodDate = _periodDate + addDays;
        }
        else
        {
            periodDate = periodEndDate;
        }

        return periodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a certain number of units to an initial date.
    /// </summary>
    /// <param name="_initDate">
    /// The initial date.
    /// </param>
    /// <param name="_periodUnit">
    /// The unit.
    /// </param>
    /// <param name="_change">
    /// The added quantity.
    /// </param>
    /// <returns>
    /// The result date.
    /// </returns>
    TransDate addToDate(TransDate       _initDate,
                        PeriodUnitCalc  _periodUnit,
                        int             _change )
    {
        TransDate   ret;

        switch (_periodUnit)
        {
            case PeriodUnitCalc::Day :
                ret = _initDate + _change;
                break;

            case PeriodUnitCalc::Month :
                ret = dateMthFwd(_initDate, _change);
                break;

            case PeriodUnitCalc::Year :
                ret = dateMthFwd(_initDate, _change*12);
                break;

            case PeriodUnitCalc::Period :
                ret = this.datePeriodFwd(_initDate, _change);
                break;

            default:
                ret = _initDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date based on the transaction date, the function, the ledger period type.
    /// </summary>
    /// <param name="transactionDate">
    /// The transaction date.
    /// </param>
    /// <param name="function">
    /// The fucntion (e.g. Start, End).
    /// </param>
    /// <param name="period">
    /// The ledger period type.
    /// </param>
    /// <returns>
    /// The result date.
    /// </returns>
    TransDate dateFunction(TransDate         transactionDate,
                           StartEnd          function,
                           LedgerPeriodType  period)
    {
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (period)
        {
            switch (function)
            {
                case StartEnd::None:
                    return transactionDate;

                case StartEnd::Start:
                    switch (period)
                    {
                        case LedgerPeriodType::FiscalYear:
                            return LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId,transactionDate);

                        case LedgerPeriodType::Period:
                            return LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId,transactionDate);

                        case LedgerPeriodType::Year:
                            return mkdate(01,01,year(transactionDate));

                        case LedgerPeriodType::SixMths:
                            return mkdate(01,(mthofyr(transactionDate) >= 7 ? 7 : 1),year(transactionDate));

                        case LedgerPeriodType::Tertial:
                            return mkdate(01,(mthofyr(transactionDate) >= 9 ? 9 :
                                              mthofyr(transactionDate) >= 5 ? 5 : 1),year(transactionDate));

                        case LedgerPeriodType::Quarter:
                            return mkdate(01,(mthofyr(transactionDate) >= 10 ? 10 :
                                              mthofyr(transactionDate) >=  7 ?  7 :
                                              mthofyr(transactionDate) >=  4 ?  4 : 1),year(transactionDate));

                        case LedgerPeriodType::Month:
                            return mkdate(01,mthofyr(transactionDate),year(transactionDate));

                        case LedgerPeriodType::Week:
                            return transactionDate- dayofwk(transactionDate) + 1;

                        default:
                    }

                case StartEnd::End:
                    switch (period)
                    {
                        case LedgerPeriodType::FiscalYear:
                            return LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId,transactionDate);

                        case LedgerPeriodType::Period:
                            return LedgerFiscalCalendar::findPeriodEndDateByDateWithIndex(calendarRecId,transactionDate);

                        case LedgerPeriodType::Year:
                            return mkdate(31,12,year(transactionDate));

                        case LedgerPeriodType::SixMths:
                            return endmth(mkdate(01,(mthofyr(transactionDate) >= 7 ? 12: 6)  ,year(transactionDate)));

                        case LedgerPeriodType::Tertial:
                            return endmth(mkdate(01,(mthofyr(transactionDate) >= 9 ? 12 :
                                                     mthofyr(transactionDate) >= 5 ?  8 : 4) ,year(transactionDate)));

                        case LedgerPeriodType::Quarter:
                            return endmth(mkdate(01,(mthofyr(transactionDate) >= 10 ? 12 :
                                                     mthofyr(transactionDate) >=  7 ?  9 :
                                                     mthofyr(transactionDate) >=  4 ?  6 : 3),year(transactionDate)));

                        case LedgerPeriodType::Month:
                            return endmth(transactionDate);

                        case LedgerPeriodType::Week:
                            return transactionDate - dayofwk(transactionDate) + 7;

                        default:
                    }
                default :
            }
        }

        return transactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datePeriodFwd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the start date of the next N fiscal calendar periods.
    /// Or, finds the end date of the previous N fiscal calendar periods.
    /// N is the number of the periods. It can be both postive or negative.
    /// </summary>
    /// <param name="_transDate">
    /// The basis date.
    /// </param>
    /// <param name="_qty">
    /// The number of the fiscal calendar periods.
    /// </param>
    /// <returns>
    /// The result date.
    /// </returns>
    date datePeriodFwd(date _transDate, int _qty)
    {
        date            periodDate;
        date            tmpDate;
        int             qty;
        RecId           calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        periodDate = _transDate;
        qty        = _qty;

        if (qty)
        {
            while (qty > 0)
            {
                tmpDate = FiscalCalendars::nextPeriodStartDateByDate(calendarRecId,periodDate);
                if (tmpDate)
                    periodDate = tmpDate;

                qty--;
            }

            while (qty < 0)
            {
                tmpDate = FiscalCalendars::findPrevPeriodEndDateByDate(calendarRecId,periodDate);
                if (tmpDate)
                    periodDate = tmpDate;

                qty++;
            }

            periodDate = LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId,periodDate);
            periodDate = this.addDayInPeriod(periodDate,_transDate);
        }

        return periodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caculates the from date of the date interval.
    /// </summary>
    /// <param name="_basis">
    /// The basis date.
    /// </param>
    /// <returns>
    /// The from date.
    /// </returns>
    display FromDate fromDate(TransDate _basis = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate   fromDate;

        if (this.StartFixedDate)
        {
            // Use the fixed start date
            fromDate = this.StartFixedDate;
        }
        else
        {
            // compute the adjusted start date
            fromDate= this.dateFunction(_basis, this.StartFunction1, this.StartPeriod1);
            fromDate = this.addToDate(fromDate, this.StartUnit, this.StartChange);
            fromDate= this.dateFunction(fromDate, this.StartFunction2, this.StartPeriod2);
        }

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caculates the from date of the date interval with adjustment but without secondary ledger period.
    /// </summary>
    /// <param name="_basis">
    /// The basis date.
    /// </param>
    /// <returns>
    /// The from date.
    /// </returns>
    display FromDate fromDateAdded(TransDate _basis = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       fromDate;

        if (this.StartFixedDate)
        {
            // Use the fixed start date
            fromDate = this.StartFixedDate;
        }
        else
        {
            // Compute the adjusted date
            fromDate = this.dateFunction(_basis, this.StartFunction1, this.StartPeriod1);
            fromDate = this.addToDate(fromDate, this.StartUnit, this.StartChange);
        }

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caculates the from (start) date of the date interval before adjustment, without secondary ledger period.
    /// </summary>
    /// <param name="_basis">
    /// The basis date.
    /// </param>
    /// <returns>
    /// The from date.
    /// </returns>
    display FromDate fromDateBefore(TransDate _basis = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       result;

        if (this.StartFixedDate)
        {
            // Use the fixed start date
            result = this.StartFixedDate;
        }
        else
        {
            // Compute the adjusted start date
            result = this.dateFunction(_basis, this.StartFunction1, this.StartPeriod1);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets date interval based on the basis date.
    /// </summary>
    /// <param name="basis">
    /// The basis date.
    /// </param>
    /// <returns>
    /// The date interval [fromDate, toDate].
    /// </returns>
    container initInterval(TransDate basis = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       fromDate;
        TransDate       toDate;

        fromDate =   this.fromDate(basis);
        toDate   =   this.toDate(basis);

        return [fromDate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caculates the to date of the date interval.
    /// </summary>
    /// <param name="_basis">
    /// The basis date.
    /// </param>
    /// <returns>
    /// The to date.
    /// </returns>
    display ToDate toDate(TransDate _basis = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       toDate;

        if (this.EndFixedDate)
        {
            // Use the fixed end date
            toDate  = this.EndFixedDate;
        }
        else
        {
            // Compute the adjusted end date
            toDate  = this.dateFunction(_basis, this.EndFunction1, this.EndPeriod1);
            toDate  = this.addToDate(toDate, this.EndUnit, this.EndChange);
            toDate  = this.dateFunction(toDate, this.EndFunction2, this.EndPeriod2);
        }

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caculates the to date of the date interval with adjustment but without secondary ledger period.
    /// </summary>
    /// <param name="_basis">
    /// The basis date.
    /// </param>
    /// <returns>
    /// The to date.
    /// </returns>
    display ToDate toDateAdded(TransDate _basis = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       toDate;

        if (this.EndFixedDate)
        {
            // Use the fixed end date
            toDate = this.EndFixedDate;
        }
        else
        {
            // Compute the adjusted end date
            toDate  = this.dateFunction(_basis, this.EndFunction1, this.EndPeriod1);
            toDate  = this.addToDate(toDate,this.EndUnit,this.EndChange);
        }

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateBefore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caculates the to (end) date of the date interval before adjustment, without secondary ledger period.
    /// </summary>
    /// <param name="_basis">
    /// The basis date.
    /// </param>
    /// <returns>
    /// The to date.
    /// </returns>
    display ToDate toDateBefore(TransDate _basis = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate result;

        if (this.EndFixedDate)
        {
            // Use the fixed end date
            result = this.EndFixedDate;
        }
        else
        {
            // Compute the adjusted end date
            result = this.dateFunction(_basis, this.EndFunction1, this.EndPeriod1);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(DateCode _code)
    {
        boolean ret = true;

        if (!RetailPeriodCode::exist(_code))
        {
            ret = checkFailed(strfmt(RetailPeriodCode::txtNotExist(), _code));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the date interval exists by date code.
    /// </summary>
    /// <param name="_code">
    /// The date code.
    /// </param>
    /// <returns>
    /// The flag indicating the result.
    /// </returns>
    public static boolean exist(DateCode _code)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     retailPeriodCode
                 where
                     retailPeriodCode.Code == _code).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the date interval by date code.
    /// </summary>
    /// <param name="_code">
    /// The date code.
    /// </param>
    /// <param name="_forupdate">
    /// The flag indicating whether to select the record for update.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model.
    /// </param>
    /// <returns>
    /// The record found.
    /// </returns>
    public static RetailPeriodCode find(
        DateCode _code,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        RetailPeriodCode retailPeriodCode;

        retailPeriodCode.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            retailPeriodCode.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            retailPeriodCode
            where
            retailPeriodCode.Code == _code;

        return retailPeriodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS940";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX4160058</DeveloperDocumentation>
	<Label>@REX4160057</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Code</TitleField1>
	<TitleField2>Txt</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>CodeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Merchandising</Modules>
	<PrimaryIndex>CodeIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartPeriod1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndPeriod1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdjustEndDate</Name>
			<Label>@REX4520111</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndChange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdjustStartDate</Name>
			<Label>@REX4520108</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartChange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EndDate</Name>
			<Label>@REX4520110</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndFixedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndPeriod1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndFunction1</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EndSecondaryInterval</Name>
			<Label>@REX4520109</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EndPeriod2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndFunction2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StartDate</Name>
			<Label>@REX4520107</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartFixedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartPeriod1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartFunction1</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>StartSecondaryInterval</Name>
			<Label>@REX4520109</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartPeriod2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartFunction2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>EndChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Periods</ExtendedDataType>
			<Label>@SYS23742</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndFixedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS8977</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndFunction1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1595</Label>
			<EnumType>StartEnd</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndFunction2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1595</Label>
			<EnumType>StartEnd</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndPeriod1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4244</Label>
			<EnumType>LedgerPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndPeriod2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22816</Label>
			<EnumType>LedgerPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS83771</Label>
			<EnumType>PeriodUnitCalc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>StartChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Periods</ExtendedDataType>
			<Label>@SYS23742</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartFixedDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS15662</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartFunction1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1595</Label>
			<EnumType>StartEnd</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartFunction2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS1595</Label>
			<EnumType>StartEnd</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartPeriod1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4244</Label>
			<EnumType>LedgerPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartPeriod2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22816</Label>
			<EnumType>LedgerPeriodType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StartUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS83771</Label>
			<EnumType>PeriodUnitCalc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>