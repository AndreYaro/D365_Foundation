<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipmentTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSShipmentTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allWorkCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all work are created for a shipment.
    /// </summary>
    /// <returns>
    /// True if all work is created for the line.
    /// </returns>
    boolean allWorkCreate()
    {
        WHSLoadLine loadLine;

        select firstonly RecId from loadLine
            where loadLine.WorkCreatedQty < loadLine.InventQty &&
                  loadLine.ShipmentId == this.ShipmentId;

        return loadLine.RecId > 0 ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>carrierName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display shipment carrier name of the customer.
    /// </summary>
    /// <returns>
    /// The shipment carrier name of the customer.
    /// </returns>
    display ShipCarrierName carrierName()
    {
        return ShipCarrierTable::find(CustTable::find(this.AccountNum).ShipCarrierId).CarrierName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCrossDocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the shipment has any planned cross docking quantity on it.
    /// </summary>
    /// <returns>true if the shipment has planned cross docking quantity; otherwise, false</returns>
    [SysClientCacheDataMethodAttribute(true),
     Hookable(false)]
    internal display boolean hasCrossDocking()
    {
        WHSLoadLine loadLine;

        select firstonly RecId from loadLine
            where loadLine.ShipmentId == this.ShipmentId
               && loadLine.CrossDockQuantity != 0;
        
        return loadLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of lines in the shipment.
    /// </summary>
    /// <returns>
    /// The number of lines in the shipment.
    /// </returns>
    int countShipmentLines()
    {
        WHSLoadLine     loadLine;

        select count(RecId) from loadLine
            where loadLine.ShipmentId == this.ShipmentId;

        return int642int(loadLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new load based on shipment information
    /// </summary>
    /// <returns>
    /// Load id tied to new load
    /// </returns>
    public WHSLoadId createNewLoad()
    {
        WHSLoadTable loadTable;

        ttsbegin;

        loadTable.setLoadId();
        loadTable.initFromShipment(this);
        loadTable.LoadPaysFreight = TMSDlvTerm::find(this.DlvTermId).TransferChargesToOrder;

        if (!loadTable.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSLoadTable)));
        }

        loadTable.insert();

        ttscommit;

        return loadTable.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates copies of the <c>DocuRef</c> records for the owner and relates them to the shipment.
    /// </summary>
    /// <param name="_docuRefOwner">
    /// The owner of the <c>DocuRef</c> records.
    /// </param>
    public void createShipmentNotes(Common _docuRefOwner)
    {
        DocuRef     docuRef;

        if (!_docuRefOwner.RecId)
        {
            return;
        }

        while select docuRef
            where docuRef.RefRecId     == _docuRefOwner.RecId
            &&    docuRef.RefTableId   == _docuRefOwner.TableId
            &&    docuRef.RefCompanyId == _docuRefOwner.DataAreaId
        {
            if (this.mustCopyShipmentNote(docuRef))
            {
                DocuRef::createFromDocuRef(docuRef, this.RecId, this.TableId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCopyShipmentNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a shipment document note must be copied and associated with the current record.
    /// </summary>
    /// <param name = "_docuRef">
    /// The <c>DocuRef</c> record to potentially copy.
    /// </param>
    /// <returns>
    /// true if the record must be copied; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean mustCopyShipmentNote(DocuRef _docuRef)
    {
        DocuRef identicalDocuRef;

        // Prevent copying identical notes
        while select Notes from identicalDocuRef
            where identicalDocuRef.RefTableId == this.TableId
                && identicalDocuRef.RefRecId == this.RecId
                && identicalDocuRef.RefCompanyId == this.DataAreaId
                && identicalDocuRef.TypeId == _docuRef.TypeId
        {
            // We cannot compare Memo fields through the select itself due to platform / ODBC limitation
            if (identicalDocuRef.Notes == _docuRef.Notes)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUsePreallocatedPackingSlip</Name>
				<Source><![CDATA[
    internal boolean canUsePreallocatedPackingSlip()
    {
        return this.LoadDirection == WHSLoadDirection::Outbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the delivery address based on the shipment
    /// </summary>
    /// <returns>
    ///    Delivery address
    /// </returns>
    public TMSAddressPhone deliveryAddress()
    {
        TMSAddressPhone             ret = new TMSAddressPhone();
        LogisticsPostalAddress      postalAddress;
        TMSName                     name;
        Phone                       phone;
        VendTable                   vendTable;
        CustTable                   custTable;

        postalAddress = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);

        if (this.LoadDirection == WHSLoadDirection::Inbound)
        {
            vendTable = VendTable::find(this.AccountNum);
            name = this.DeliveryName != '' ? this.DeliveryName : vendTable.name();
            phone = vendTable.phone();
        }
        else
        {
            custTable = CustTable::find(this.AccountNum);
            name = this.DeliveryName != '' ? this.DeliveryName : custTable.name();
            phone = custTable.phone();
        }

        ret.setLogisticsPostalAddress(postalAddress);
        ret.parmName(name);
        ret.parmPhone(phone);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display account number of the record.
    /// </summary>
    /// <returns>
    /// The account number of the record.
    /// </returns>
    display AccountNum displayAccountNum()
    {
        return this.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCarrierAndService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display carrier and service information.
    /// </summary>
    /// <returns>
    /// The carrier code and service code of the record.
    /// </returns>
    display String255 displayCarrierAndService()
    {
        String255 ret;

        ret = this.CarrierCode + ' / ' + this.CarrierServiceCode;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCarrierCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display carrier code of the record.
    /// </summary>
    /// <returns>
    /// The carrier code of the record.
    /// </returns>
    display WHSCarrierCode displayCarrierCode()
    {
        return this.CarrierCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCustName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays customer name for outbound loads
    /// </summary>
    /// <returns>
    /// Customer name for non-inbound loads
    /// </returns>
    display CustName displayCustName()
    {
        return this.LoadDirection != WHSLoadDirection::Inbound ? CustTable::find(this.AccountNum).name() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDeliveryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display delivery name of the shipment.
    /// </summary>
    /// <returns>
    /// The delivery name of the shipment.
    /// </returns>
    display WHSDeliveryName displayDeliveryName()
    {
        return this.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDlvTermTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display delivery term text of the outbound loads.
    /// </summary>
    /// <returns>
    /// The delivery term text of the outbound loads.
    /// </returns>
    display Description displayDlvTermTxt()
    {
        WHSLoadLine     loadLine;
        SalesTable      salesTable;
        Description     dlvTermTxt;

        loadLine = WHSLoadLine::findFirstForShipmentId(this.ShipmentId);

        if (loadLine.RecId)
        {
            salesTable = loadLine.orderHeader() as SalesTable;

            if (salesTable.RecId)
            {
                dlvTermTxt = DlvTerm::find(salesTable.DlvTerm).Txt;
            }
        }

        return dlvTermTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayShipmentDateTime</Name>
				<Source><![CDATA[
    /// <returns>
    /// Returns <c>TransDateTime</c> object.
    /// </returns>
    [SysClientCacheDataMethod]
    /// <summary>
    /// Displays the date and time when the shipment leaves/arrives at our warehouse.
    /// </summary>
    public display TransDateTime displayShipmentDateTime()
    {
        TransDateTime shipmentDateTime;
        switch (this.LoadDirection)
        {
            case WHSLoadDirection::Outbound:
                shipmentDateTime = this.whsLoadTable().LoadSchedShipUTCDateTime;
                if (!shipmentDateTime)
                {
                    TransDate shipmentDate = this.displayPickUpDate();
                    shipmentDateTime = DateTimeUtil::newDateTime(shipmentDate, 0, this.timeZoneSite());
                }
                break;
            case WHSLoadDirection::Inbound:
                shipmentDateTime = this.ShipmentArrivalUTCDateTime;
                break;
            default: // Do nothing, return blank date and time.
                break;
        }
        return shipmentDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDropOffDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the Drop off date for the shipment header.
    /// </summary>
    /// <returns>
    ///     The Drop off date for the shipment header.
    /// </returns>
    public display TransDate displayDropOffDate()
    {
        TransDate dropOffDate;

        if (this.LoadDirection == WHSLoadDirection::Inbound)
        {
            dropOffDate = this.shipmentArrivalDate();
        }
        else if (this.LoadDirection == WHSLoadDirection::Outbound)
        {
            dropOffDate = this.getOutboundDropOffDate();
        }

        return dropOffDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutboundDropOffDate</Name>
				<Source><![CDATA[
    private TransDate getOutboundDropOffDate()
    {
        TransDate           dropOffDate;
        WHSLoadLine         loadLine;
        SalesLine           confirmedSalesLine;
        SalesLine           requestedSalesLine;
        InventTransferLine  inventTransferLine;

        boolean inventTransTypeSalesRefactoringFlightIsEnabled = WHSInventTransTypeSalesRefactoringFlight::instance().isEnabled();

        if (!inventTransTypeSalesRefactoringFlightIsEnabled || this.WorkTransType == WHSWorkTransType::Sales)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
            {
                select minof(ReceiptDateConfirmed),count(RecId)
                from confirmedSalesLine
                    where confirmedSalesLine.ReceiptDateConfirmed   != dateNull()
                join TableId
                    from loadLine
                    where loadLine.ShipmentId       == this.ShipmentId
                        && loadLine.InventTransId    == confirmedSalesLine.InventTransId
                        && loadLine.InventTransType  == InventTransType::Sales;

                select minof(ReceiptDateRequested),count(RecId)
                from requestedSalesLine
                where requestedSalesLine.ReceiptDateConfirmed   == dateNull()
                join TableId
                    from loadLine
                    where loadLine.ShipmentId       == this.ShipmentId
                        && loadLine.InventTransId    == requestedSalesLine.InventTransId
                        && loadLine.InventTransType  == InventTransType::Sales;

                if (requestedSalesLine.RecId > 0)
                {
                    if (requestedSalesLine.ReceiptDateRequested)
                    {
                        dropOffDate = requestedSalesLine.ReceiptDateRequested;
                    }
                }
                if (confirmedSalesLine.RecId > 0)
                {
                    if (!dropOffDate || confirmedSalesLine.ReceiptDateConfirmed < dropOffDate)
                    {
                        dropOffDate = confirmedSalesLine.ReceiptDateConfirmed;
                    }
                }

                if (inventTransTypeSalesRefactoringFlightIsEnabled)
                {
                    return dropOffDate;
                }
            }
        }
        
        if (!inventTransTypeSalesRefactoringFlightIsEnabled || this.WorkTransType == WHSWorkTransType::TransferIssue)
        {
            select minof(ReceiveDate),count(RecId)
            from inventTransferLine
                where inventTransferLine.ReceiveDate    != dateNull()
            join TableId
                from loadLine
                where loadLine.ShipmentId       == this.ShipmentId
                    && loadLine.InventTransId    == inventTransferLine.InventTransId
                    && loadLine.InventTransType  == InventTransType::TransferOrderShip;

            if (inventTransferLine.RecId > 0)
            {
                if (!dropOffDate || inventTransferLine.ReceiveDate < dropOffDate)
                {
                    dropOffDate = inventTransferLine.ReceiveDate;
                
                    if (inventTransTypeSalesRefactoringFlightIsEnabled)
                    {
                        return dropOffDate;
                    }
                }
            }
        }

        return this.getOutboundDropOffDateDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutboundDropOffDateDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for the default case in getOutboundDropOffDate
    /// </summary>
    /// <returns>Drop off date for outbound load direction.</returns>
    [Wrappable(true)]
    internal TransDate getOutboundDropOffDateDefault()
    {
        TransDate dropOffDate;
        return dropOffDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDropOffLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Drop off location for the shipment header.
    /// </summary>
    /// <returns>
    /// The Drop off location for the shipment header.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Addressing displayDropOffLoc()
    {
        TMSAddressPhone dropOffAddress = this.getDropOffAddress();

        return dropOffAddress.getAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDropOffName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Drop off name for the shipment header.
    /// </summary>
    /// <returns>
    /// The Drop off name for the shipment header.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSName displayDropOffName()
    {
        return this.getDropOffAddress().parmName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFinalLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the final location for the shipment header.
    /// </summary>
    /// <returns>
    /// The final location for the shipment header.
    /// </returns>
    display WMSLocationId displayFinalLoc()
    {
        return WHSLoadTable::find(this.LoadId).getFinalLoc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display customer invoice account number.
    /// </summary>
    /// <returns>
    /// The customer invoice account number.
    /// </returns>
    display AccountNum displayInvoiceAccount()
    {
        WHSLoadLine     loadLine;
        SalesTable      salesTable;
        AccountNum      invoiceAccount;

        loadLine = WHSLoadLine::findFirstForShipmentId(this.ShipmentId);

        if (loadLine.RecId)
        {
            salesTable = loadLine.orderHeader() as SalesTable;

            if (salesTable.RecId)
            {
                invoiceAccount = salesTable.InvoiceAccount;
            }
        }

        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInvoiceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display customer invoice address.
    /// </summary>
    /// <returns>
    /// The customer invoice address.
    /// </returns>
    display Addressing displayInvoiceAddress()
    {
        WHSLoadLine     loadLine;
        SalesTable      salesTable;
        Addressing      invoiceAddress;

        loadLine = WHSLoadLine::findFirstForShipmentId(this.ShipmentId);

        if (loadLine.RecId)
        {
            salesTable = loadLine.orderHeader() as SalesTable;

            if (salesTable.RecId)
            {
                invoiceAddress = salesTable.custTable_InvoiceAccount().address();
            }
        }

        return invoiceAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNumberOfContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display number of containers in the shipment.
    /// </summary>
    /// <returns>
    /// The number of containers in the shipment.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display WHSNumOfContainers displayNumberOfContainers()
    {
        WHSContainerTable   containerTable;

        select count(ContainerNum) from containerTable
            where containerTable.ShipmentId == this.ShipmentId;

        return containerTable.ContainerNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNumberOfLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display number of load lines in the shipment.
    /// </summary>
    /// <returns>
    /// The number of load lines in the shipment.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display WHSNumOfLoadLines displayNumberOfLoadLines()
    {
        return (select count(RecId) from whsLoadLine where whsLoadLine.ShipmentId == this.ShipmentId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPaymTermDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display payment term description of the outbound loads.
    /// </summary>
    /// <returns>
    /// Payment term description of the outbound loads.
    /// </returns>
    display Description displayPaymTermDesc()
    {
        WHSLoadLine     loadLine;
        SalesTable      salesTable;
        Description     paymTermDescription;

        loadLine = WHSLoadLine::findFirstForShipmentId(this.ShipmentId);

        if (loadLine.RecId)
        {
            salesTable = loadLine.orderHeader() as SalesTable;

            if (salesTable.RecId)
            {
                paymTermDescription = PaymTerm::find(salesTable.Payment).Description;
            }
        }

        return paymTermDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPickUpDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Displays the Pick up date for the shipment header.
    /// </summary>
    /// <returns>
    ///     The Pick up date for the shipment header.
    /// </returns>
    public display TransDate displayPickUpDate()
    {
        TransDate pickUpDate;

        if (this.LoadDirection == WHSLoadDirection::Inbound)
        {
            pickUpDate = this.shipmentArrivalDate();
        }
        else if (this.LoadDirection == WHSLoadDirection::Outbound)
        {
            pickUpDate = this.getOutboundPickUpDate();
        }

        return pickUpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutboundPickUpDate</Name>
				<Source><![CDATA[
    private TransDate getOutboundPickUpDate()
    {
        TransDate           pickUpDate;
        WHSLoadLine         loadLine;
        SalesLine           confirmedSalesLine;
        SalesLine           requestedSalesLine;
        SalesTable          requestedSalesTable;
        InventTransferLine  inventTransferLine;

        boolean inventTransTypeSalesRefactoringFlightIsEnabled = WHSInventTransTypeSalesRefactoringFlight::instance().isEnabled();
        
        if (!inventTransTypeSalesRefactoringFlightIsEnabled || this.WorkTransType == WHSWorkTransType::Sales)
        {
            select minof(ShippingDateConfirmed),count(RecId)
                from confirmedSalesLine
                    where confirmedSalesLine.ShippingDateConfirmed  != dateNull()
                join TableId
                    from loadLine
                        where loadLine.ShipmentId       == this.ShipmentId
                           && loadLine.InventTransId    == confirmedSalesLine.InventTransId
                           && loadLine.InventTransType  == InventTransType::Sales;

            select minof(ShippingDateRequested),count(RecId)
                from requestedSalesLine
                    where requestedSalesLine.ShippingDateConfirmed  == dateNull()
                join TableId
                    from loadLine
                        where loadLine.ShipmentId       == this.ShipmentId
                           && loadLine.InventTransId    == requestedSalesLine.InventTransId
                           && loadLine.InventTransType  == InventTransType::Sales
                join minof(ShippingDateRequested), minof(ShippingDateConfirmed)
                    from requestedSalesTable
                        where requestedSalesTable.SalesId   == requestedSalesLine.SalesId;

            if (requestedSalesLine.RecId > 0)
            {
                if (requestedSalesTable.ShippingDateConfirmed)
                {
                    pickUpDate = requestedSalesTable.ShippingDateConfirmed;
                }
                else
                {
                    if (requestedSalesLine.ShippingDateRequested)
                    {
                        pickUpDate = requestedSalesLine.ShippingDateRequested;
                    }
                    else
                    {
                        if (requestedSalesTable.ShippingDateRequested)
                        {
                            pickUpDate = requestedSalesTable.ShippingDateRequested;
                        }
                    }
                }
            }

            if (confirmedSalesLine.RecId > 0)
            {
                if (!pickUpDate || confirmedSalesLine.ShippingDateConfirmed < pickUpDate)
                {
                    pickUpDate = confirmedSalesLine.ShippingDateConfirmed;
                }
            }

            if (inventTransTypeSalesRefactoringFlightIsEnabled)
            {
                return pickUpDate;
            }
        }
        
        if (!inventTransTypeSalesRefactoringFlightIsEnabled || this.WorkTransType == WHSWorkTransType::TransferIssue)
        {
            select minof(ShipDate),count(RecId)
                from inventTransferLine
                    where inventTransferLine.ShipDate   != dateNull()
                join TableId
                    from loadLine
                        where loadLine.ShipmentId       == this.ShipmentId
                           && loadLine.InventTransId    == inventTransferLine.InventTransId
                           && loadLine.InventTransType  == InventTransType::TransferOrderShip;

            if (inventTransferLine.RecId)
            {
                if (!pickUpDate || inventTransferLine.ShipDate < pickUpDate)
                {
                    pickUpDate = inventTransferLine.ShipDate;

                    if (inventTransTypeSalesRefactoringFlightIsEnabled)
                    {
                        return pickUpDate;
                    }
                }
            }
        }

        return this.getOutboundPickUpDateDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutboundPickUpDateDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for the default case in getOutboundPickUpDate
    /// </summary>
    /// <returns>Pick up date for outbound load direction.</returns>
    [Wrappable(true)]
    internal TransDate getOutboundPickUpDateDefault()
    {
        TransDate dropOffDate;
        return dropOffDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPickUpLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display pickup location of the shipment.
    /// </summary>
    /// <returns>
    /// The pickup location of the shipment.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Addressing displayPickUpLoc()
    {
        TMSAddressPhone pickUpAddress = this.getPickUpAddress();

        return pickUpAddress.getAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPickUpName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display name of the pickup address of the shipment.
    /// </summary>
    /// <returns>
    /// The name of the pickup address of the shipment.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSName displayPickUpName()
    {
        return this.getPickUpAddress().parmName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display sales order number of the shipment.
    /// </summary>
    /// <returns>
    /// The sales order number of the shipment.
    /// </returns>
    display Description displaySalesId()
    {
        WHSLoadLine     loadLine;

        select firstonly RecId from loadLine
            where loadLine.ShipmentId == this.ShipmentId
                && loadLine.InventTransType == InventTransType::Sales
                && loadline.TransportRequest == NoYes::No;

        if (!loadLine.RecId)
        {
            return '';
        }

        return loadLine.OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayStagingLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display staging location for the outbound loads.
    /// </summary>
    /// <returns>
    /// The staging location for the outbound loads.
    /// </returns>
    display WMSLocationId displayStagingLoc()
    {
        return WHSLoadTable::find(this.LoadId).getStagingLoc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total amount of the shipment.
    /// </summary>
    /// <returns>
    /// The total amount of item in the shipment.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Amount displayTotalValue()
    {
        Amount          ret;
        WHSLoadLine     loadLine;

        while select loadLine
            where loadLine.ShipmentId == this.ShipmentId
        {
            ret += loadLine.displayTotalValue();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total volume of the shipment.
    /// </summary>
    /// <returns>
    /// The total volume of the shipment.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Volume displayTotalVolume()
    {
        Volume          volume;
        WHSLoadLine     loadLine;

        if (this.ShipmentId)
        {
            while select ItemId, UOM, Qty, InventQty, InventDimId from loadLine
                where loadLine.ShipmentId == this.ShipmentId
            {
                volume += loadLine.displayItemVolume();
            }
        }
        return volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display total weight of the shipment.
    /// </summary>
    /// <returns>
    /// The total weight of the shipment.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display Weight displayTotalWeight()
    {
        Weight          weight;
        WHSLoadLine     loadLine;

        // To prevent loadlines from being included that don't have a shipmentId
        // we must first check to see if we have a shipment Id to filter on.
        if (this.ShipmentId)
        {
            while select loadLine
                where loadLine.ShipmentId    == this.ShipmentId
            {
                weight += loadLine.displayItemWeight();
            }
        }

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWaveLabelIsPrinted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display if wave label is printed.
    /// </summary>
    /// <returns>
    /// The wave label is printed.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display NoYes displayWaveLabelIsPrinted()
    {
        WHSShipmentWaveLabelDetails shipmentWaveLabelDetails;

        select firstonly WaveLabelsPrinted from shipmentWaveLabelDetails
            order by WaveLabelsPrintedDateTime desc
            where shipmentWaveLabelDetails.ShipmentId == this.ShipmentId;

        return shipmentWaveLabelDetails.WaveLabelsPrinted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWaveLabelPrintedBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display wave label is printed by.
    /// </summary>
    /// <returns>
    /// The wave label is printed by.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display SysUserId displayWaveLabelPrintedBy()
    {
        WHSShipmentWaveLabelDetails shipmentWaveLabelDetails;

        select firstonly WaveLabelsPrintedBy from shipmentWaveLabelDetails
            order by WaveLabelsPrintedDateTime desc
            where shipmentWaveLabelDetails.ShipmentId == this.ShipmentId;

        return shipmentWaveLabelDetails.WaveLabelsPrintedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWaveLabelPrintedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display wave label printed datetime.
    /// </summary>
    /// <returns>
    /// The latest wave label printed datetime.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display WHSWaveLabelPrintedDateTime displayWaveLabelPrintedDateTime()
    {
        WHSShipmentWaveLabelDetails shipmentWaveLabelDetails;

        select firstonly maxOf(WaveLabelsPrintedDateTime) from shipmentWaveLabelDetails
            where shipmentWaveLabelDetails.ShipmentId == this.ShipmentId;

        return shipmentWaveLabelDetails.WaveLabelsPrintedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTrailerNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display trailer number of the outbound loads.
    /// </summary>
    /// <returns>
    /// The trailer number of the outbound loads.
    /// </returns>
    display WHSTrailerNumber displayTrailerNumber()
    {
        return WHSLoadTable::find(this.LoadId).TrailerNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWorkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display work status of the shipment.
    /// </summary>
    /// <returns>
    /// The work status of the shipment.
    /// </returns>
    display WHSLoadUserDef1 displayWorkStatus()
    {
        WHSLoadLine     loadLine;
        Qty             totalLines;
        Qty             totalCompleted;
        str             ret;

        while select loadLine
            where loadLine.ShipmentId == this.ShipmentId
        {
            totalLines      += loadLine.displayWorkLineTotal();
            totalCompleted  += loadLine.displayWorkLineCompleted();
        }

        if (totalLines)
        {
            ret = strFmt("@WAX1799", totalCompleted, totalLines);
        }
        else
        {
            ret = "@WAX1674";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropOffDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculate the Drop off date at midnight in the time zone of the site on the shipment.
    /// </summary>
    /// <returns>
    ///     The Drop off date and time in UTC when it is midnight on the drop off date on the site on the shipment.
    /// </returns>
    public TransDateTime dropOffDateTime()
    {
        return DateTimeUtil::newDateTime(this.displayDropOffDate(), 0, this.timeZoneSite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDropOffAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the drop-off address based on direction: outbound/inbound/none.
    /// </summary>
    /// <returns>
    /// An address record specifying drop-off address.
    /// </returns>
    public TMSAddressPhone getDropOffAddress()
    {
        TMSAddressPhone dropOffAddress = new TMSAddressPhone();

        if (this.LoadDirection == WHSLoadDirection::Outbound)
        {
            // in outbound scenario goods travel  WH -> Address
            dropOffAddress = this.deliveryAddress();
        }
        else if (this.LoadDirection == WHSLoadDirection::Inbound)
        {
            // in inbound scenario goods travel  Address -> WH
            dropOffAddress = TMSAddressPhone::initFromInventLocation(InventLocation::find(this.InventLocationId));
        }

        // WHSLoadDirection::None
        return dropOffAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickUpAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pickup address based on direction: outbound/inbound/none.
    /// </summary>
    /// <returns>
    /// An address record specifying pickup address.
    /// </returns>
    public TMSAddressPhone getPickUpAddress()
    {
        TMSAddressPhone         pickUpAddress = new TMSAddressPhone();
        InventTransferTable     inventTransferTable;

        if (this.LoadDirection == WHSLoadDirection::Outbound)
        {
            if (this.WorkTransType == WHSWorkTransType::TransferIssue)
            {
                inventTransferTable = inventTransferTable::find(this.OrderNum);
            }
            // in outbound scenario goods travel  WH -> Address
            pickUpAddress = TMSAddressPhone::initFromInventLocation(InventLocation::find(this.InventLocationId), false, inventTransferTable.FromPostalAddress);
        }
        else if (this.LoadDirection == WHSLoadDirection::Inbound)
        {
            // in inbound scenario goods travel  Address -> WH
            pickUpAddress = this.deliveryAddress();
        }

        return pickUpAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a shipment id.
    /// </summary>
    /// <returns>
    /// The generated shipment id.
    /// </returns>
    WHSShipmentId getShipmentId()
    {
        return NumberSeq::newGetNum(WHSParameters::numRefWHSShipmentId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a work created for the shipment.
    /// </summary>
    /// <returns>
    /// True if there is work created for the shipment; otherwise, false.
    /// </returns>
    public boolean hasWork()
    {
        return (select firstonly RecId from WHSLoadLine
                where WHSLoadLine.ShipmentId == this.ShipmentId
                && WHSLoadLine.WorkCreatedQty > 0).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTemporaryWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are temporary work lines.
    /// </summary>
    /// <returns>
    /// True if there are temporary work lines
    /// for the shipment; otherwise, false.
    /// </returns>
    public boolean hasTemporaryWorkLines()
    {
        return (select firstonly RecId from WHSTmpWorkLine
                where WHSTmpWorkLine.ShipmentId == this.ShipmentId
                && WHSTmpWorkLine.InventQty > 0).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWorkOrTemporaryWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the shipment currently has work or
    /// has temporary work lines.
    /// </summary>
    /// <returns>True if the shipment has work or temporary
    ///  work lines; otherwise, false</returns>
    public boolean hasWorkOrTemporaryWorkLines()
    {
        return this.hasWork() || this.hasTemporaryWorkLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display image index for work status of the shipment.
    /// </summary>
    /// <param name="_shipment">
    /// Shipment record that has work created.
    /// </param>
    /// <returns>
    /// The image index for work status of the shipment.
    /// </returns>
    display int imageIdx(WHSShipmentTable _shipment)
    {
        WHSLoadLine         loadLine;
        Qty                 totalLines;
        Qty                 totalCompleted;
        int                 ret;
        real                percentage = 0.75;

        while select loadLine
            where loadLine.ShipmentId    == _shipment.ShipmentId
        {
            totalLines      += loadLine.displayWorkLineTotal();
            totalCompleted  += loadLine.displayWorkLineCompleted();
        }

        switch (true)
        {
            case totalLines == 0:
                ret = 0;
                break;

            case (totalCompleted / totalLines) >= percentage:
                ret = 2;
                break;

            case (totalCompleted / totalLines) == 1:
                ret = 3;
                break;

            default:
                ret = 1;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertShipmentIdNotBlank</Name>
				<Source><![CDATA[
    private void assertShipmentIdNotBlank()
    {
        if (this.ShipmentId == '')
        {
            throw error("@WAX:Error_BlankShipmentId");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        TMSRoute        route;
        WHSLoadTable    loadTable;

        this.assertShipmentIdNotBlank();

        if (this.LoadId)
        {
            select firstOnly route
                exists join loadTable
                    where loadTable.RouteCode == route.RouteCode
                    &&    loadTable.LoadId    == this.LoadId;
        }

        if (!this.ProNum && this.CarrierCode)
        {
            this.ProNum = TMSNumberSequence::getNextProNumberForCarrier(this.CarrierCode);
        }

        this.initShipmentCreatedUTCDateTime();
        this.initOrderLineInventTransLinkType();

        super();

        if (route)
        {
            // Assign a stop number if the route is a scheduledRoute
            route.addShipmentToSegments(this.ShipmentId, route.RouteSchedule != 0);
        }

        // Create history record for shipment R2W event
        WHSHistory::createHistoryRecord(WHSHistoryType::Shipment,
                                        this.ShipmentId,
                                        WHSHistoryEvent::ReleasetoWarehouse);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentCreatedUTCDateTime</Name>
				<Source><![CDATA[
    private void initShipmentCreatedUTCDateTime()
    {
        this.ShipmentCreatedUTCDateTime = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOrderLineInventTransLinkType</Name>
				<Source><![CDATA[
    private void initOrderLineInventTransLinkType()
    {
        if (this.mustUsePickingRouteOrderLineInventTransLinkType())
        {
            this.OrderLineInventTransLinkType = WHSShipmentOrderLineInventTransLinkType::PickingRoute;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUsePickingRouteOrderLineInventTransLinkType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustUsePickingRouteOrderLineInventTransLinkType()
    {
        return this.isWorkTransTypeSuportingPickingRouteOrderLineInventTransLinkType()
            && WHSParameters::isSalesLoadLinePickingRouteEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkTransTypeSuportingPickingRouteOrderLineInventTransLinkType</Name>
				<Source><![CDATA[
    private boolean isWorkTransTypeSuportingPickingRouteOrderLineInventTransLinkType()
    {
        return this.WorkTransType == WHSWorkTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWaveAutoCreationAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines wheather a <c>WHSWaveTable</c> shold be created for the shipment.
    /// </summary>
    /// <returns>
    /// true, if <c>WHSWaveTable</c> should be AUTO created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Decission is made based on analysis of shipment lines. If there are no shipment lines with items that are WHS enabled
    /// (all shipment lines contain items that are TRAX-ONLY),
    /// wave for such shipment should not be created autpmatically (method returns false).
    /// </remarks>
    boolean isWaveAutoCreationAllowed()
    {
        WHSLoadLine loadLine;
        WHSInventEnabled whsInventEnabled;

        select firstonly RecId from loadLine
            where loadLine.ShipmentId == this.ShipmentId
            exists join whsInventEnabled
            where whsInventEnabled.ItemId == loadLine.ItemId;

        return (loadLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillOfLadingId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a new bill of lading id to the shipment.
    /// </summary>
    public void setBillOfLadingId()
    {
        this.BillOfLadingId = WHSNumberSeqExt::newGetNum(WHSParameters::numRefWHSBillOfLadingId()).num(WHSNumberSeqExtParameters::emptyParameters());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentArrivalDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the arrival date only from the arrival date and time.
    /// </summary>
    /// <returns>
    ///    The arrival date.
    /// </returns>
    /// <remarks>
    ///    The arrival date is calculated in the time zone of the site associated with the shipment.
    /// </remarks>
    public WHSShipmentArrivalDate shipmentArrivalDate()
    {
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.ShipmentArrivalUTCDateTime, this.timeZoneSite()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates open work lines to skipped where the work lines are associated with the loads referenced by the current shipment.
    /// </summary>
    public void skipWorkLines()
    {
        this.whsLoadTable().skipWorkLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeZoneSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the time zone associated with the site on the current shipment.
    /// </summary>
    /// <returns>
    ///    The site time zone.
    /// </returns>
    public display Timezone timeZoneSite()
    {
        return InventSite::timeZoneSite(this.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayCarrierCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display carrier code of the outbound loads in the shipment.
    /// </summary>
    /// <returns>
    /// The carrier code of the outbound loads.
    /// </returns>
    display TMSCarrierCode tmsDisplayCarrierCode()
    {
        TMSCarrierCode      ret;
        TMSRouteSegment     routeSegment;
        TMSRouteSegmentLoad load;
        WHSLoadLine         loadLine;

        while select routeSegment
            group by routeSegment.CarrierCode
            join Id from load
            join ShipmentId from loadLine
            where routeSegment.RouteCode == load.RouteCode    &&
                  routeSegment.Sequence  == load.Sequence     &&
                  load.Id                == loadLine.LoadId   &&
                  loadLine.ShipmentId    == this.ShipmentId
        {
            switch (true)
            {
                case ret == '':
                    ret = routeSegment.CarrierCode;
                    break;

                case ret != routeSegment.CarrierCode:
                    ret = "@SYS78137";
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayCarrierGroupCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display carrier group code of the outbound loads in the shipment.
    /// </summary>
    /// <returns>
    /// The carrier group code of the outbound loads.
    /// </returns>
    display TMSCarrierGroupCode tmsDisplayCarrierGroupCode()
    {
        TMSCarrierGroupCode     ret;
        TMSRouteSegment         routeSegment;
        TMSRouteSegmentLoad     load;
        WHSLoadLine             loadLine;

        while select routeSegment
            group by routeSegment.CarrierGroupCode
            join Id from load
            join ShipmentId from loadLine
            where routeSegment.RouteCode == load.RouteCode    &&
                  routeSegment.Sequence  == load.Sequence     &&
                  load.Id                == loadLine.LoadId   &&
                  loadLine.ShipmentId    == this.ShipmentId
        {
            switch (true)
            {
                case ret == '':
                    ret = routeSegment.CarrierGroupCode;
                    break;

                case ret != routeSegment.CarrierGroupCode:
                    ret = "@SYS78137";
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayCarrierServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display carrier service code of the outbound loads in the shipment.
    /// </summary>
    /// <returns>
    /// The carrier service code of the outbound loads.
    /// </returns>
    display TMSCarrierServiceCode tmsDisplayCarrierServiceCode()
    {
        TMSCarrierServiceCode       ret;
        TMSRouteSegment             routeSegment;
        TMSRouteSegmentLoad         load;
        WHSLoadLine                 loadLine;

        while select routeSegment
            group by routeSegment.CarrierServiceCode
            join Id from load
            join ShipmentId from loadLine
            where routeSegment.RouteCode == load.RouteCode    &&
                  routeSegment.Sequence  == load.Sequence     &&
                  load.Id                == loadLine.LoadId   &&
                  loadLine.ShipmentId    == this.ShipmentId
        {
            switch (true)
            {
                case ret == '':
                    ret = routeSegment.CarrierServiceCode;
                    break;

                case ret != routeSegment.CarrierServiceCode:
                    ret = "@SYS78137";
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayEquipmentCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display equipment code of the load template of the outbound loads.
    /// </summary>
    /// <returns>
    /// The equipment code of the load template.
    /// </returns>
    display TMSEquipmentCode tmsDisplayEquipmentCode()
    {
        return WHSLoadTemplate::find(WHSLoadTable::find(this.LoadId).LoadTemplateId).EquipmentCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayModeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display mode code of the route segments of the outbound loads in the shipment.
    /// </summary>
    /// <returns>
    /// The mode code of the route segment of the outbound loads.
    /// </returns>
    display TMSModeCode tmsDisplayModeCode()
    {
        TMSModeCode             ret;
        TMSRouteSegment         routeSegment;
        TMSRouteSegmentLoad     load;
        WHSLoadLine             loadLine;

        while select routeSegment
            group by routeSegment.ModeCode
            join Id from load
            join ShipmentId from loadLine
            where routeSegment.RouteCode == load.RouteCode    &&
                  routeSegment.Sequence  == load.Sequence     &&
                  load.Id                == loadLine.LoadId   &&
                  loadLine.ShipmentId    == this.ShipmentId
        {
            switch (true)
            {
                case ret == '':
                    ret = routeSegment.ModeCode;
                    break;

                case ret != routeSegment.ModeCode:
                    ret = "@SYS78137";
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsDisplayRouteCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display route code of the outbound loads in shipment.
    /// </summary>
    /// <returns>
    /// The route code of the outbound loads
    /// </returns>
    display TMSRouteCode tmsDisplayRouteCode()
    {
        return (select firstonly RouteCode from tmsRouteSegmentLoad
                    where tmsRouteSegmentLoad.Id == this.LoadId).RouteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalClosedContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total number of closed containers in the shipment.
    /// </summary>
    /// <returns>
    /// The number of the closed containers in the shipment.
    /// </returns>
    RecId totalClosedContainers()
    {
        WHSContainerTable   containerTable;

        select count(RecId) from containerTable
            where containerTable.ShipmentId      == this.ShipmentId &&
                  containerTable.ContainerStatus == WHSContainerStatus::Closed;

        return containerTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferNotes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Takes docuRef notes from a consolidated shipment and puts them on the base shipment.
    /// </summary>
    /// <param name="_consolidatedShipment">
    /// The <c>WHSShipmentTable</c> record of the shipment being consolidated.
    /// </param>
    void transferNotes(WHSShipmentTable _consolidatedShipment)
    {
        DocuRef docuRef;

        ttsbegin;
        Docu::copy(_consolidatedShipment, this);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers this shipment to a new load.
    /// </summary>
    /// <param name="_newLoadId">
    /// The <c>LoadId</c> that the shipment is transferred to.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if either load is already shipped or received.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the loading strategy is not valid.
    /// </exception>
    void transferShipment(WHSLoadId _newLoadId)
    {
        if (this.validatesInventTransTypeMatchesNewLoad(_newLoadId))
        {
            this.validateTransferLoadStatusNeitherShippedNorReceived(this.LoadId);

            this.validateNewLoad(_newLoadId);

            ttsbegin;
            this.transferLoad(this.LoadId, _newLoadId);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers an old load to a new load.
    /// </summary>
    /// <param name = "_oldLoadId">
    /// The old load's <c>LoadId</c>.
    /// </param>
    /// <param name = "_newLoadId">
    /// The new load's <c>LoadId</c>.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if either load is already shipped or received.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the loading strategy is not valid.
    /// </exception>
    protected void transferLoad(WHSLoadId _oldLoadId, WHSLoadId _newLoadId)
    {
        using (var perfTask = WHSInstrumentationTransferShipmentToLoadPerformanceTask::newFromTransferShipmentToLoad(this))
        {
            if (_oldLoadId == _newLoadId)
            {
                return;
            }

            ttsbegin;
            
            WHSLoadTable newLoadTable = WHSLoadTable::find(_newLoadId, true);
            if (!newLoadTable)
            {
                throw error("@WAX5526");
            }
            perfTask.setToLoad(newLoadTable);

            WHSLoadTable oldLoadTable = WHSLoadTable::find(_oldLoadId, true);
            perfTask.setFromLoad(oldLoadTable);

            WHSShipmentTable::validateLoadingStrategyForTransferShipment(oldLoadTable.LoadingStrategy, newLoadTable.LoadingStrategy);

            WHSShipmentTable::addShipmentToLoadTable(this.ShipmentId, newLoadTable);
            
            this.reread();

            newLoadTable = WHSLoadTable::find(_newLoadId, true);
            newLoadTable.LoadStatus = newLoadTable.findStatus();
            newLoadTable.update();

            oldLoadTable = WHSLoadTable::find(_oldLoadId, true);
            if (oldLoadTable)
            {
                var oldLoadTableUpdater = WHSLoadTableUpdater::newFromAddLoadLinesToLoad(oldLoadTable);
                oldLoadTableUpdater.modifyAfterRemovingShipment(this.ShipmentId);
            }

            // Update outbound sorting positions if necessary.
            WHSOutboundSortingPositionAssignmentUpdater sortingPositionAssignmentUpdater = WHSOutboundSortingPositionAssignmentUpdater::construct();
            sortingPositionAssignmentUpdater.updateSortPositionForTransferShipment(this.ShipmentId, newLoadTable.LoadId);
            WHSWorkTable::updateLoadId(_oldLoadId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadingStrategyForTransferShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the partial load shipping is allowed for either old or new load.
    /// </summary>
    /// <param name = "_oldLoadTableLoadingStrategy">
    /// Loading strategy of the old load table record.
    /// </param>
    /// <param name = "_newLoadTableLoadingStrategy">
    /// Loading strategy of the new load table record.
    ///</param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the loading strategy is not valid.
    /// </exception>
    private static void validateLoadingStrategyForTransferShipment(
        WHSLoadingStrategy _oldLoadTableLoadingStrategy,
        WHSLoadingStrategy _newLoadTableLoadingStrategy)
    {
        if (_oldLoadTableLoadingStrategy    == WHSLoadingStrategy::PartialLoadShippingAllowed
            || _newLoadTableLoadingStrategy == WHSLoadingStrategy::PartialLoadShippingAllowed)
        {
            throw error("@WAX:Error_TransferShipmentNotAllowedForTransportLoads");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds shipment to load.
    /// </summary>
    /// <param name="_shipmentId">
    ///    The shipment ID to add.
    /// </param>
    /// <param name="_loadId">
    ///    The Load ID the shipment should be added to.
    /// </param>
    public static void addShipmentToLoad(WHSShipmentId _shipmentId, WHSLoadId _loadId)
    {
        WHSShipmentTable::addShipmentToLoadTable(_shipmentId, WHSLoadTable::find(_loadId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds shipment to load.
    /// </summary>
    /// <param name="_shipmentId">
    ///    The shipment ID to add.
    /// </param>
    /// <param name="_whsLoadTable">
    ///    The <c>WHSLoadTable</c> record the shipment should be added to.
    /// </param>
    public static void addShipmentToLoadTable(WHSShipmentId _shipmentId, WHSLoadTable _whsLoadTable)
    {
        WHSShipmentTable    shipmentTable;
        WHSLoadLine         loadLine;
        WHSWaveLine         waveLine;
        WHSWaveTable        waveTable;
        WHSWorkTable        workTable;
        WHSWorkLine         workLine;

        ttsbegin;

        shipmentTable = WHSShipmentTable::find(_shipmentId, true);
        shipmentTable.LoadId                = _whsLoadTable.loadId;
        shipmentTable.CarrierCode           = _whsLoadTable.CarrierCode;
        shipmentTable.CarrierServiceCode    = _whsLoadTable.CarrierServiceCode;
        shipmentTable.ModeCode              = _whsLoadTable.ModeCode;
        shipmentTable.BrokerCode            = _whsLoadTable.BrokerCode;
        shipmentTable.StopNum               = WHSLoadTable::nextStopNum(shipmentTable.LoadId);

        if (!shipmentTable.validatesInventTransTypeMatchesNewLoad(_whsLoadTable.loadId))
        {
            throw error("@SYS86327");
        }

        shipmentTable.update();

        shipmentTable.moveShipmentLinesToLoad(_whsLoadTable);

        update_recordset waveLine
            setting LoadId = _whsLoadTable.loadId
            where waveLine.ShipmentId   == shipmentTable.ShipmentId;

        workLine.skipDataMethods(true);
        update_recordset workLine
            setting LoadId = _whsLoadTable.loadId
            where workLine.ShipmentId == shipmentTable.ShipmentId;
        
        WHSWorkTable::updateLoadId(_whsLoadTable.loadId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveShipmentLinesToLoad</Name>
				<Source><![CDATA[
    private void moveShipmentLinesToLoad(WHSLoadTable _loadTable)
    {
        if (!_loadTable)
        {
            throw error(Error::missingRecord(tablePName(WHSLoadTable)));
        }

        var loadTableUpdater = WHSLoadTableUpdater::newFromAddLoadLinesToLoad(_loadTable);
        using (var insertParameters = WHSLoadLineInsertMethodParameters::newSkipLoadTableUpdate())
        {
            WHSLoadLine loadLine;
            while select forupdate loadLine
                where loadLine.ShipmentId == this.ShipmentId
            {
                WHSLoadLine origLoadLine = loadLine.data();

                loadLine.LoadId = _loadTable.loadId;
                loadLine.update();

                loadTableUpdater.modifyOnLoadLineUpdate(loadLine, origLoadLine);
            }
        }
        loadTableUpdater.updateAfterAddingLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfAllowedToModify</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void validateIfAllowedToModify()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.validateIfAllowedToModify();

        this.assertShipmentIdNotBlank();

        boolean statusChange = this.orig().ShipmentStatus != this.ShipmentStatus;

        super();

        if (statusChange)
        {
            switch (this.ShipmentStatus)
            {
                case WHSShipmentStatus::Open:
                    WHSHistory::createHistoryRecord(WHSHistoryType::Shipment,
                                                    this.ShipmentId,
                                                    WHSHistoryEvent::ReleasetoWarehouse);
                    break;

                case WHSShipmentStatus::Shipped:
                    this.updateRelatedWaveStatuses();

                    WHSHistory::createHistoryRecord(WHSHistoryType::Shipment,
                                                    this.ShipmentId,
                                                    WHSHistoryEvent::ShipConfirm);
                    
                    this.handleReturnDetails();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReturnDetails</Name>
				<Source><![CDATA[
    private void handleReturnDetails()
    {
        if(!this.hasContainer())
        {
            WHSConfirmShipmentReturnDetailCreator returnDetailCreator = WHSConfirmShipmentReturnDetailCreator::newFromShipment(this);
            returnDetailCreator.createReturnDetails();
        }
        else
        {
            WHSShipConfirmReturnDetailUpdater returnDetailUpdater = WHSShipConfirmReturnDetailUpdater::newFromShipment(this);
            returnDetailUpdater.updateReturnDetails();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>hasContainer</Name>
				<Source><![CDATA[
    private boolean hasContainer()
    {
        WHSContainerTable containerTable;
        select firstonly RecId from containerTable 
            where containerTable.ShipmentId == this.ShipmentId;

        return containerTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatesInventTransTypeMatchesNewLoad</Name>
				<Source><![CDATA[
    public boolean validatesInventTransTypeMatchesNewLoad(WHSLoadId _newLoadId)
    {
        WHSLoadLine shipLoadLine = WHSLoadLine::findFirstForShipmentId(this.ShipmentId);
        return WHSLoadTable::validateInventTransTypeMatches(_newLoadId, shipLoadLine.InventTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void validateNewLoad(WHSLoadId _newLoadId)
    {
        this.validateTransferLoadStatusNeitherShippedNorReceived(_newLoadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransferLoadStatusNeitherShippedNorReceived</Name>
				<Source><![CDATA[
    private void validateTransferLoadStatusNeitherShippedNorReceived(WHSLoadId _loadId)
    {
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId);

        if (loadTable.LoadStatus == WHSLoadStatus::Shipped)
        {
            throw error("@WAX2967");
        }

        if (loadTable.LoadStatus == WHSLoadStatus::Received)
        {
            throw error("@WAX5796");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validForNewWaveLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the shipment can be put on new wave or not.
    ///     The shipment can be put on a new wave if not all work is created and it doesn't exist on a non-executed wave.
    /// </summary>
    /// <returns>
    ///     true if the shipment can be put on a new wave; otherwise, false.
    /// </returns>
    public boolean validForNewWaveLine()
    {
        WHSWaveLine     waveLine;
        WHSWaveTable    waveTable;

        if (WHSShipmentValidForNewWaveLineCheckCreatedWavesFlight::instance().isEnabled())
        {
            select firstonly RecId from waveLine
                where waveLine.ShipmentId == this.ShipmentId
            exists join waveTable
                where waveTable.WaveId == waveLine.WaveId
                    && waveTable.WaveStatus == WHSWaveStatus::Created;
        }
        else
        {
            select firstonly RecId from waveLine
                where waveLine.ShipmentId == this.ShipmentId
            exists join waveTable
                where waveTable.WaveId == waveLine.WaveId
                    && waveTable.WaveStatus <= WHSWaveStatus::Held;
        }

        return (!this.allWorkCreate() && waveLine.RecId == 0 && InventLocation::find(this.InventLocationId).whsEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the realted <c>WHSLoadTable</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that defines if the record is select for update; optional.
    /// </param>
    /// <returns>
    ///    The related <c>WHSLoadTable</c> record; otherwise an empty buffer.
    /// </returns>
    public WHSLoadTable whsLoadTable(boolean _forUpdate = false)
    {
        return WHSLoadTable::find(this.LoadId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockingReasonsNotAllowingLocationChange</Name>
				<Source><![CDATA[
    private static Set blockingReasonsNotAllowingLocationChange()
    {
        Set set = new Set(Types::Enum);

        set.add(WHSWorkBlockingReasonType::SplitWork);
        set.add(WHSWorkBlockingReasonType::DeferredPutOperation);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the location of either the stagging or final location, based on parameters, for all non-executed work that is associated with the shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment ID.
    /// </param>
    /// <param name="_inventLocationId">
    /// The location ID.
    /// </param>
    /// <param name="_newLocation">
    /// The new warehouse location ID.
    /// </param>
    /// <param name="_locType">
    /// The location type.
    /// </param>
    public static void changeLocation(WHSShipmentId _shipmentId, InventLocationId _inventLocationId, WMSLocationId _newLocation, WHSLocType _locType)
    {
        WHSWorkLine         workLine;
        WHSWorkLine         stagePickWorkLine;
        WMSLocation         wmsLocation;
        WHSLocationProfile  locationProfile;
        WHSWorkTable        workTable;
        int                 locCount;
        WHSParameters       parameters = WHSParameters::find();

        if (_locType != parameters.StageLocType && _locType != parameters.ShipFinalLocType)
        {
            throw error("@WAX2189");
        }

        ttsbegin;

        select firstonly workLine
            where workLine.ShipmentId == _shipmentId;

        if (!WHSDockManagement::validateDockMgmtMixing(WMSLocation::find(_newLocation, _inventLocationId), workLine))
        {
            throw error("@WAX3915");
        }

        Set blockingReasonsNotAllowingLocationChange = WHSShipmentTable::blockingReasonsNotAllowingLocationChange();

        while select ShipmentId from workTable
             where workTable.ShipmentId   == _shipmentId
        join forupdate workLine
             where workLine.WorkId        == workTable.WorkId
             &&    workLine.WorkStatus    == WHSWorkStatus::Open
             &&    workLine.WorkType      == WHSWorkType::Put
        exists join wmsLocation
            where wmsLocation.wmsLocationId     == workLine.wmsLocationId
            &&    wmsLocation.InventLocationId  == _inventLocationId
        exists join locationProfile
            where locationProfile.LocProfileId  == wmsLocation.LocProfileId
            &&    locationProfile.LocType       == _locType
        {
            if (parameters.StageLocType == _locType)
            {
                select forupdate stagePickWorkLine
                    where stagePickWorkLine.WorkId        == workLine.WorkId
                    &&    stagePickWorkLine.WorkType      == WHSWorkType::Pick
                    &&    stagePickWorkLine.wmsLocationId == workLine.wmsLocationId
                    &&    stagePickWorkLine.LineNum       >  workLine.LineNum;

                stagePickWorkLine.wmsLocationId = _newLocation;
                
                if (!stagePickWorkLine.validateWrite())
                {
                    throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSWorkLine)));
                }
                else
                {
                    stagePickWorkLine.update();
                }
            }

            workLine.wmsLocationId =_newLocation;
            
            if (!workLine.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSWorkLine)));
            }
            else
            {
                if (WHSSHipmentTable::isWorkBlockedByReasons(workLine.WorkId, blockingReasonsNotAllowingLocationChange))
                {
                    throw error(strFmt("@WAX:WHSLocationChangeErrorDueToWorkBeingBlockedByReasons", workLine.WorkId, blockingReasonsNotAllowingLocationChange.toString()));
                }
                
                workLine.update();
            }
            ++locCount;
        }

        if (locCount == 0)
        {
            info(strFmt("@WAX1997", _locType));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkBlockedByReasons</Name>
				<Source><![CDATA[
    private static boolean isWorkBlockedByReasons(WHSWorkId _workId, Set _blockingReasons)
    {
        return (WHSWorkBlocking::newFromWorkId(_workId).isBlockedByOneOfReasonTypes(_blockingReasons));
               
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeWorkPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes priority of the works associated with the shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    /// <param name="_priority">
    /// Priority to be assigned.
    /// </param>
    public static void changeWorkPriority(WHSShipmentId _shipmentId, WHSWorkPriority _priority)
    {
        WHSWorkTable    workTable;

        if (_shipmentId)
        {
            update_recordset workTable
                setting WorkPriority = _priority
                where workTable.ShipmentId == _shipmentId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeWorkUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes work users of the works associated with the shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    /// <param name="_userId">
    /// Id of the uer to be assigned.
    /// </param>
    public static void changeWorkUser(WHSShipmentId _shipmentId, WHSUserId _userId)
    {
        WHSWorkTable    workTable;

        if (_shipmentId && _userId)
        {
            update_recordset workTable
                setting LockedUser = _userId,
                        UserManuallyAssigned = NoYes::Yes
                where workTable.ShipmentId == _shipmentId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidates a shipment with other shipments.
    /// </summary>
    /// <param name="_baseShipmentId">
    /// The base shipment's id.
    /// </param>
    /// <param name="_shipmentIds">
    /// Container containing ids of the shipments to be consolidated with.
    /// </param>
    /// <param name="_updateScheduledShipDateTime">
    /// true if load shipping date, time to requested ship date, and time on order should be updated; otherwise, false.
    /// </param>
    public static void consolidateShipments(WHSShipmentId _baseShipmentId, container _shipmentIds, boolean _updateScheduledShipDateTime = false)
    {
        WHSShipmentTable baseShipment = WHSShipmentTable::find(_baseShipmentId, true);

        WHSShipmentTable::validateLoadingStrategyForConsolidateShipments(baseShipment);
        WHSShipmentTable::validateStatusForConsolidateShipments(baseShipment);

        WHSShipConsolidationValidateBase whsConsolidateShipments;
        WHSShipmentTableConsolidateShipmentsContext shipmentTableConsolidateShipmentsContext = WHSShipmentTableConsolidateShipmentsContext::current();
        
        if (shipmentTableConsolidateShipmentsContext && shipmentTableConsolidateShipmentsContext.shipConsolidationProposedShipment.RecId)
        {
            whsConsolidateShipments = WHSShipConsolidationValidateWorkbench::newWorkbench(shipmentTableConsolidateShipmentsContext.shipConsolidationProposedShipment, WHSShipConsolidationValidationMode::Default);
        }
        else
        {
            whsConsolidateShipments = WHSShipConsolidationValidate::newStandard(baseShipment, _shipmentIds);
        }

        whsConsolidateShipments.run();

        ttsbegin;

        boolean hasConsolidationOccured;
        int len = conLen(_shipmentIds);
        for (int i = 1; i <= len; ++i)
        {
            WHSShipmentId shipmentId = conPeek(_shipmentIds, i);
            if (shipmentId == _baseShipmentId)
            {
                continue; // Do not consolidate shipment with itself
            }
            WHSShipmentTable shipment = WHSShipmentTable::find(shipmentId, true);
            if (!shipment)
            {
                warning(strFmt("@WAX2187", shipmentId));
            }
            else
            {
                WHSShipmentTable::consolidateShipment(baseShipment, shipment, _updateScheduledShipDateTime);

                hasConsolidationOccured = true;

                if (shipmentTableConsolidateShipmentsContext && shipmentTableConsolidateShipmentsContext.shipConsolidationProposedShipment.RecId)
                {
                    WHSShipConsolidationProposedShipment shipConsolidationProposedShipment;

                    delete_from shipConsolidationProposedShipment
                        where shipConsolidationProposedShipment.RecId == shipmentTableConsolidateShipmentsContext.shipConsolidationProposedShipment.RecId;
                }
            }
        }

        if (hasConsolidationOccured)
        {
            WHSShipmentTable::removeWaveLineOrderNumIfMixedOrders(baseShipment);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeWaveLineOrderNumIfMixedOrders</Name>
				<Source><![CDATA[
    private static void removeWaveLineOrderNumIfMixedOrders(WHSShipmentTable _baseShipment)
    {
        if (WHSShipmentTable::hasMixedOrderTypes(_baseShipment))
        {
            WHSWaveLine waveLine;
            update_recordset waveLine
                setting OrderNum = ''
                where waveLine.ShipmentId == _baseShipment.ShipmentId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMixedOrderTypes</Name>
				<Source><![CDATA[
    internal static boolean hasMixedOrderTypes(WHSShipmentTable _baseShipment)
    {
        WHSLoadLine loadLines;

        SysDaQueryExpression shipmentIdExpression =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(loadLines, fieldStr(WHSLoadLine, ShipmentId)),
                new SysDaValueExpression(_baseShipment.ShipmentId));

        SysDaQueryExpression hasMixedOrderTypesExpression =
            new SysDaNotEqualsExpression(
                new SysDaFieldExpression(loadLines, fieldStr(WHSLoadLine, OrderNum)),
                new SysDaValueExpression(_baseShipment.OrderNum));

        InventTransType inventTransType = WHSShipmentTable::getSupportedInventTransTypeByWorkTransType(_baseShipment.WorkTransType);
        if (inventTransType != -1)
        {
            hasMixedOrderTypesExpression = hasMixedOrderTypesExpression.or(
                new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(loadLines, fieldStr(WHSLoadLine, InventTransType)),
                    new SysDaValueExpression(inventTransType)));
        }

        SysDaQueryExpression whereExpression = shipmentIdExpression.and(hasMixedOrderTypesExpression);

        SysDaQueryObject queryObject = new SysDaQueryObject(loadLines);
        queryObject.projection().add(fieldStr(WHSLoadLine, RecId));
        queryObject.whereClause(whereExpression);
        queryObject.firstOnlyHint = true;

        SysDaFindObject findObject = new SysDaFindObject(queryObject);
        new SysDaFindStatement().find(findObject);

        return loadLines.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportedInventTransTypeByWorkTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static InventTransType getSupportedInventTransTypeByWorkTransType(WHSWorkTransType _workTransType)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::Sales:
                return InventTransType::Sales;

            case WHSWorkTransType::Purch:
                return InventTransType::Purch;

            case WHSWorkTransType::TransferIssue:
                return InventTransType::TransferOrderShip;
        }
        
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidate a shipment with another shipment.
    /// </summary>
    /// <param name = "_baseShipment">
    /// The base shipment.
    /// </param>
    /// <param name = "_shipment">
    /// The other shipment.
    /// </param>
    /// <param name = "_updateScheduledShipDateTime">
    /// true if load shipping date, time to requested ship date and time on order should be updated; otherwise, false.
    /// </param>
    protected static void consolidateShipment(WHSShipmentTable _baseShipment, WHSShipmentTable _shipment, boolean _updateScheduledShipDateTime = false)
    {
        Map prevWorkTables = new Map(Types::String, Types::Integer);

        WHSShipmentTable::validateLoadingStrategyForConsolidateShipments(_shipment);
        WHSShipmentTable::validateStatusForConsolidateShipments(_shipment);

        // Update outbound sorting positions if necessary.
        WHSOutboundSortingPositionAssignmentUpdater sortingPositionAssignmentUpdater = WHSOutboundSortingPositionAssignmentUpdater::construct();
        sortingPositionAssignmentUpdater.updateSortPositionForCombineShipment(_shipment.ShipmentId, _baseShipment.ShipmentId);

        boolean putLineLocationChanged;
        boolean locTypeCheck = WHSShipmentTableConsolidationWorkLineLocTypeCheckFlight::instance().isEnabled();

        // Loop over all workLines that are directly related to the shipment being consolidated.
        WHSWorkLine workLine;
        WHSWorkTable workTable;
        while select forupdate workLine
                    join forupdate workTable
                    order by workLine.LineNum desc
                    where workLine.ShipmentId == _shipment.ShipmentId &&
                          workTable.WorkId    == workLine.WorkId          &&
                          workLine.WorkStatus != WHSWorkStatus::Cancelled
        {
            WHSWaveLine waveLine;
            WHSWaveTable baseWave;
            select firstonly ShipmentId, WaveId from waveLine
                    order by waveLine.WaveId desc
                    join forupdate baseWave
                    where baseWave.WaveId     == waveLine.WaveId &&
                          waveLine.ShipmentId == _baseShipment.ShipmentId;

            if (!prevWorkTables.exists(workTable.WorkId))
            {
                prevWorkTables.insert(workTable.WorkId, 1);

                if (baseWave.WaveId != workTable.WaveId)
                {
                    WHSShipmentTable::setStatusAndUpdate(baseWave, workTable);
                }
                
                // Update workLines to point to same final location (Pending)
                WHSWorkLine curFinalWorkLine;
                select firstonly curFinalWorkLine
                            order by curFinalWorkLine.LineNum desc
                            where curFinalWorkLine.WorkId == workTable.WorkId;
                
                WHSWorkTable baseWorkTable;
                WHSWorkLine baseFinalWorkLine;

                select firstonly baseFinalWorkLine
                    order by baseFinalWorkLine.LineNum desc
                    join LoadId, ShipmentId, WaveId from baseWorkTable
                        where baseWorkTable.ShipmentId == _baseShipment.ShipmentId
                            && baseWorkTable.WorkTransType == workTable.WorkTransType
                            && baseWorkTable.WorkId == baseFinalWorkLine.WorkId;

                if (!baseFinalWorkLine)
                {
                    select firstonly baseFinalWorkLine
                            order by baseFinalWorkLine.LineNum desc
                            join LoadId,ShipmentId,WaveId from baseWorkTable
                            where baseWorkTable.ShipmentId == _baseShipment.ShipmentId &&
                                    baseWorkTable.WorkId     == baseFinalWorkLine.WorkId;
                }

                if(WHSConsolidateShipmentsWorkLinePreventWMSLocationChangeFlight::instance().isEnabled())
                {
                    if (baseFinalWorkLine.wmsLocationId != curFinalWorkLine.wmsLocationId
                        && baseFinalWorkLine.WorkStatus < WHSWorkStatus::Closed)
                    {
                        if (!locTypeCheck 
                            || (baseFinalWorkLine.getLocType() == WHSParameters::find().ShipFinalLocType))
                        {
                            WHSShipmentTable::changeLocation(_shipment.ShipmentId,
                                                                    _shipment.InventLocationId,
                                                                    baseFinalWorkLine.wmsLocationId,
                                                                    WHSParameters::find().ShipFinalLocType);
                            putLineLocationChanged = true;
                        }
                    }
                }
                else
                {
                    if (baseFinalWorkLine.wmsLocationId != curFinalWorkLine.wmsLocationId)
                    {
                        WHSShipmentTable::changeLocation(_shipment.ShipmentId,
                                                                _shipment.InventLocationId,
                                                                baseFinalWorkLine.wmsLocationId,
                                                                WHSParameters::find().ShipFinalLocType);
                        putLineLocationChanged = true;
                    }
                }

                // Update shipmentId, loadId, and waveId on work if they were filled in before.
                // Also freeze or unfreeze work to match wave status
                workTable.LoadId = workTable.LoadId ? _baseShipment.LoadId : '';
                workTable.WaveId = baseWave.WaveId;
                workTable.ShipmentId = workTable.ShipmentId ? _baseShipment.ShipmentId : '';
                workTable.doUpdate();
            }

            if (putLineLocationChanged
                && workLine.WorkType == WHSWorkType::Put
                && workLine.WorkStatus == WHSWorkStatus::Open)
            {
                workLine.reread();
            }

            // Update shipmentId and LoadId on the workLines
            workLine.ShipmentId = _baseShipment.ShipmentId;
            workLine.LoadId = _baseShipment.LoadId;
            workLine.update();
        }
        // End of while loop over work Lines

        // Update any containers tied to the shipment
        WHSContainerTable containerTable;
        update_recordset containerTable
                    setting ShipmentId = _baseShipment.ShipmentId
                    where containerTable.ShipmentId == _shipment.ShipmentId;

        // Transfer DocuRef from the consolidated shipment.
        _baseShipment.transferNotes(_shipment);
        
        // Loop over loadLines for the shipment and update their loadId and shipmentId
        WHSLoadLine loadLine;
        while select forupdate loadLine
                    where loadLine.ShipmentId == _shipment.ShipmentId
        {
            loadLine.LoadId = _baseShipment.LoadId;
            loadLine.ShipmentId = _baseShipment.ShipmentId;
            loadLine.update(true, _updateScheduledShipDateTime);
        }

        // Route code could be removed from base shipment when Route segment load line is deleted
        _baseShipment.reread();

        // Update Shipment Status.
        _baseShipment.consolidateShipmentStatus(_shipment);

        WHSShipmentTableConsolidateShipmentsContext shipmentTableConsolidateShipmentsContext = WHSShipmentTableConsolidateShipmentsContext::current();
        WHSShipConsolidationPolicy                  shipConsolidationPolicy;

        if (shipmentTableConsolidateShipmentsContext && shipmentTableConsolidateShipmentsContext.shipConsolidationPolicy.RecId == _baseShipment.ShipConsolidationPolicy)
        {
            shipConsolidationPolicy = shipmentTableConsolidateShipmentsContext.shipConsolidationPolicy;
        }
        else
        {
            shipConsolidationPolicy = WHSShipConsolidationPolicy::findByRecId(_baseShipment.ShipConsolidationPolicy);
        }

        _baseShipment.consolidateLineShipmentForPolicy(_shipment, shipConsolidationPolicy);

        _baseShipment.update();

        _shipment.reread();
        if (_shipment)
        {
            _shipment.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusAndUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets status of the base wave and updates it.
    /// </summary>
    /// <param name = "_baseWave">Base wave to update.</param>
    /// <param name = "_workTable">Instance of <c>WHSWorkTable</c>.</param>
    protected static void setStatusAndUpdate(WHSWaveTable _baseWave, WHSWorkTable _workTable)
    {
        if (_workTable.WorkStatus != WHSWorkStatus::Closed)
        {
            _baseWave.WaveStatus = _baseWave.WaveStatus == WHSWaveStatus::Held ? WHSWaveStatus::Held : WHSWaveStatus::Released;
        }

        _baseWave.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateShipmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates shipment status when shipments are being consolidated.
    /// </summary>
    /// <param name = "_shipment">Consolidated shipment.</param>
    internal void consolidateShipmentStatus(WHSShipmentTable _shipment)
    {
        this.ShipmentStatus = _shipment.ShipmentStatus < this.ShipmentStatus ? _shipment.ShipmentStatus : this.ShipmentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadingStrategyForConsolidateShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the partial load shipping is allowed on a shipment.
    /// </summary>
    /// <param name = "_shipment">
    /// The shipment table record.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the loading strategy is not valid.
    /// </exception>
    private static void validateLoadingStrategyForConsolidateShipments(WHSShipmentTable _shipment)
    {
        if (WHSLoadTable::find(_shipment.LoadId).LoadingStrategy == WHSLoadingStrategy::PartialLoadShippingAllowed)
        {
            throw error("@WAX:Error_ConsolidateShipmentNotAllowedForTransportLoad");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusForConsolidateShipments</Name>
				<Source><![CDATA[
    private static void validateStatusForConsolidateShipments(WHSShipmentTable _shipment)
    {
        if (_shipment.ShipmentStatus == WHSShipmentStatus::Shipped)
        {
            throw error("@WAX:Error_ConsolidateShipmentNotAllowedForStatusShipped");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>whsShipmentTable</c> record exists.
    /// </summary>
    /// <param name="_shipmentId">
    /// The parameter of type <c>WHSShipmentId</c>.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSShipmentId _shipmentId)
    {
        return _shipmentId &&
            (select firstonly RecId from whsShipmentTable
                where whsShipmentTable.ShipmentId == _shipmentId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existForOrderLineInventTransLinkType</Name>
				<Source><![CDATA[
    internal static boolean existForOrderLineInventTransLinkType(WHSShipmentOrderLineInventTransLinkType _orderLineInventTransLinkType)
    {
        return (select firstonly RecId from WHSShipmentTable
            where WHSShipmentTable.OrderLineInventTransLinkType == _orderLineInventTransLinkType).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSShipmentTable</c> record with given parameters.
    /// </summary>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <param name="_disableCache">
    /// Determines if the <c>WHSShipmentTable</c> record is allowed to be selected using cache or not.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSShipmentTable find(WHSShipmentId _shipmentId,
                                        boolean       _forupdate = false,
                                        boolean       _disableCache = false)
    {
        WHSShipmentTable    shipmentTable;

        if (_shipmentId)
        {
            shipmentTable.selectForUpdate(_forupdate);
            shipmentTable.disableCache(_disableCache);

            select firstonly shipmentTable
                where shipmentTable.ShipmentId == _shipmentId;
        }

        return shipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSShipmentTable</c> record with given parameters.
    /// </summary>
    /// <param name="_loadId">
    /// Load id of the shipment.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSShipmentTable findByLoadId(WHSLoadId   _loadId,
                                                boolean     _forupdate = false)
    {
        WHSShipmentTable    shipmentTable;

        if (_loadId)
        {
            shipmentTable.selectForUpdate(_forupdate);

            select firstonly shipmentTable
                where shipmentTable.LoadId == _loadId;
        }

        return shipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the shipment has container with an open status.
    /// </summary>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    /// <param name="_excludeContainerId">
    /// Container id to be excluded.
    /// </param>
    /// <returns>
    /// True if the shipment has a container with an open status.
    /// </returns>
    public static boolean hasOpenContainer(WHSShipmentId _shipmentId, WHSContainerId _excludeContainerId = '')
    {
        WHSContainerTable   containerTable;

        if (_excludeContainerId)
        {
            select firstonly RecId from containerTable
                where containerTable.ShipmentId       == _shipmentId                  &&
                      containerTable.ContainerStatus  != WHSContainerStatus::Closed   &&
                      containerTable.ContainerId      != _excludeContainerId;
        }
        else
        {
            select firstonly RecId from containerTable
                where containerTable.ShipmentId      == _shipmentId      &&
                      containerTable.ContainerStatus != WHSContainerStatus::Closed;
        }

        return containerTable.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllQtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all qty is picked on the shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment Id of the shipment being evalauted.
    /// </param>
    /// <returns>
    /// true if all qty on the shipment is in a picked status; otherwise, false.
    /// </returns>
    public static boolean isAllQtyPicked(WHSShipmentId _shipmentId)
    {
        WHSLoadLine loadLine;

        if (_shipmentId)
        {
            select firstonly RecId from loadLine
                where loadLine.ShipmentId == _shipmentId
                &&    loadLine.PickedQty  != loadLine.InventQty;
        }

        return _shipmentId && loadLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse shipment status to open if the shipment is waved.
    /// </summary>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    [Replaceable(true)]
    public static void reverseShipment(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable    shipmentTable;
        WHSWaveLine         waveLine;

        if (_shipmentId)
        {
            ttsbegin;

            shipmentTable = WHSShipmentTable::find(_shipmentId, true);

            shipmentTable.WaveId = '';
            shipmentTable.ShipmentStatus = shipmentTable.ShipmentStatus > WHSShipmentStatus::Waved ? shipmentTable.ShipmentStatus : WHSShipmentStatus::Open;
            
            if (!shipmentTable.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSShipmentTable)));
            }
            else
            {
                shipmentTable.update();
            }

            delete_from waveLine
                where waveLine.ShipmentId == _shipmentId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates status of a shipment.
    /// </summary>
    /// <param name="_shipmentId">
    /// Id of the shipment.
    /// </param>
    /// <param name="_shipmentStatus">
    /// New status of the shipment.
    /// </param>
    /// <param name="_disableCache">
    /// Determines if the <c>WHSShipmentTable</c> record is allowed to be selected using cache or not.
    /// </param>
    public static void updateShipmentStatus(
        WHSShipmentId       _shipmentId,
        WHSShipmentStatus   _shipmentStatus,
        boolean             _disableCache = false)
    {
        if (_shipmentId)
        {
            ttsbegin;

            WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId, true, _disableCache);

            if (shipmentTable.ShipmentStatus != _shipmentStatus)
            {
                shipmentTable.ShipmentStatus = _shipmentStatus;
                shipmentTable.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentStatus_legacy</Name>
				<Source><![CDATA[
    private static void updateShipmentStatus_legacy(
        WHSShipmentId       _shipmentId,
        WHSShipmentStatus   _shipmentStatus,
        boolean             _disableCache = false)
    {
        WHSShipmentTable    shipmentTable;

        if (_shipmentId)
        {
            ttsbegin;
            shipmentTable = WHSShipmentTable::find(_shipmentId, true, _disableCache);
            shipmentTable.ShipmentStatus = _shipmentStatus;
            shipmentTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedWaveStatuses</Name>
				<Source><![CDATA[
    // For each wave associated with this shipment
    // try to update its status to shipped.
    private void updateRelatedWaveStatuses()
    {
        if (!this.WaveId)
        {
            // a missing waveId indicates that this shipment
            // could be associated with more than one waves

            WHSWaveLine whsWaveLine;

            // find all waves associated with this shipment
            while select WaveId from whsWaveLine
                group by WaveId
                where whsWaveLine.ShipmentId == this.ShipmentId
            {
                // for each waveId check if we can update the waveStatus
                if (WHSWaveTable::canWaveBeShipped(whsWaveLine.WaveId))
                {
                    WHSWaveTable::updateWaveStatus(whsWaveLine.WaveId, WHSWaveStatus::Shipped);
                }
            }
        }
        else if (WHSWaveTable::canWaveBeShipped(this.WaveId))
        {
            WHSWaveTable::updateWaveStatus(this.WaveId, WHSWaveStatus::Shipped);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipmentCanBeLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the shipment can be loaded.
    /// </summary>
    /// <param name="_shipmentId">
    /// The current shipment ID.
    /// </param>
    /// <param name="_excludeContainerId">
    /// The ID of the container to be excluded when searching for a container with open status.
    /// </param>
    /// <returns>
    /// true if the shipment qualifies to be in a loaded status; otherwise, false.
    /// </returns>
    public static boolean validateShipmentCanBeLoaded(WHSShipmentId _shipmentId, WHSContainerId _excludeContainerId = '')
    {
        return !WHSShipmentTable::hasOpenContainer(_shipmentId, _excludeContainerId) && WHSShipmentTable::isAllQtyPicked(_shipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTargetLicensePlateRange</Name>
				<Source><![CDATA[
    private static void addTargetLicensePlateRange(QueryBuildDataSource _qbdsShipmentTable, WHSTargetLicensePlateId _targetLicensePlateId)
    {
        QueryBuildDataSource qbdsWorkLine = _qbdsShipmentTable.addDataSource(tableNum(WHSWorkLine));
        qbdsWorkLine.joinMode(JoinMode::ExistsJoin);
        qbdsWorkLine.addLink(fieldNum(WHSShipmentTable, ShipmentId), fieldNum(WHSWorkLine, ShipmentId));
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, ShipmentId)).value(SysQuery::valueNotEmptyString());
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, WorkStatus)).value(SysQuery::valueNot(WHSWorkStatus::Cancelled));

        QueryBuildDataSource qbdsWorkTable = qbdsWorkLine.addDataSource(tableNum(WHSWorkTable));
        qbdsWorkTable.relations(true);
        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, TargetLicensePlateId)).value(queryValue(_targetLicensePlateId));
        qbdsWorkTable.addSortField(fieldNum(WHSWorkTable,WorkClosedUTCDateTime),SortOrder::Descending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupShipmentByShipmentIdOrLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup shipment by id or license plate.
    /// </summary>
    /// <param name = "_formControl">
    /// The control to open the lookup for.
    /// </param>
    /// <param name = "_value">
    /// The license plate id.
    /// </param>
    public static void lookupShipmentByShipmentIdOrLP(FormControl _formControl, WHSTargetLicensePlateId  _value)
    {
        const int ShipmentCountThreshold = 500;

        boolean isShipmentId = false;

        Query query = new Query();

        if (WHSShipmentTable::exist(_value))
        {
            isShipmentId = true;
        }

        QueryBuildDataSource qbdsShipmentTable = query.addDataSource(tableNum(WHSShipmentTable));
        qbdsShipmentTable.addRange(fieldNum(WHSShipmentTable, ShipmentStatus)).value(SysQuery::valueNot(WHSShipmentStatus::Shipped));

        if (isShipmentId)
        {
            qbdsShipmentTable.addRange(fieldNum(WHSShipmentTable, ShipmentId)).value(_value);
        }
        else
        {
            if (!WHSWorkTable::existsWithLoadLineDetailsForTagetLicensePlate(_value, WHSWorkStatus::Closed))
            {
                // there are no consolidated work for this target LP, add simple lookup range
                WHSShipmentTable::addTargetLicensePlateRange(qbdsShipmentTable, _value);
            }
            else
            {
                container packedShipmentIdSet;
                [packedShipmentIdSet] = (new WhsPackForm()).getShipmentIdsByTargetLicensePlate(_value);

                Set            shipmentIdSet = Set::create(packedShipmentIdSet);
                SetEnumerator  shipmentIdSetEnumerator = shipmentIdSet.getEnumerator();
                str            shipmentIdQueryRange;
                int            shipmentCount = 0;

                while (shipmentIdSetEnumerator.moveNext())
                {
                    shipmentIdQueryRange = queryRangeConcat(shipmentIdQueryRange, queryValue(shipmentIdSetEnumerator.current()));
                    shipmentCount++;
                }

                if (shipmentCount > ShipmentCountThreshold)
                {
                    // query range may fail due to large amount of shipments, add warning
                    warning(strFmt("@WAX:TooManyShipmentsForLP", _value));
                }

                qbdsShipmentTable.addRange(fieldNum(WHSShipmentTable, ShipmentId)).value(shipmentIdQueryRange);
            }
            
        }

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSShipmentTable),_formControl);

        sysTableLookup.addLookupfield(fieldNum(WHSShipmentTable,ShipmentId));
        sysTableLookup.addLookupfield(fieldNum(WHSShipmentTable,ShipmentStatus));
        sysTableLookup.addLookupfield(fieldNum(WHSShipmentTable,WaveId));
        sysTableLookup.addLookupfield(fieldNum(WHSShipmentTable,OrderNum));
        sysTableLookup.addLookupfield(fieldNum(WHSShipmentTable,StopNum));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalUnmanifestedClosedContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total number of closed containers in the shipment that are not manifested
    /// </summary>
    /// <returns>
    /// The number of the closed containers in the shipment that are not manifested
    /// </returns>
    public RecIdCount totalUnmanifestedClosedContainers()
    {
        WHSContainerTable   containerTable;

        select count(RecId) from containerTable
            where containerTable.ShipmentId             == this.ShipmentId &&
                  containerTable.ContainerStatus        == WHSContainerStatus::Closed &&
                  containerTable.MasterTrackingNum      == '';

        return containerTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalClosedContainersInShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total number of containers in the shipment
    /// </summary>
    /// <returns>
    /// The number of the containers in the shipment
    /// </returns>
    public RecIdCount totalClosedContainersInShipment()
    {
        WHSContainerTable   containerTable;

        select count(RecId) from containerTable
            where containerTable.ShipmentId             == this.ShipmentId &&
                  containerTable.ContainerStatus        == WHSContainerStatus::Closed;

        return containerTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manifestClosedContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manifest all closed containers on a shipment by setting the shipment tracking id
    /// </summary>
    /// <param name="_shipmentTrackingNumber">
    /// The tracking number of the shipment used for manifesting
    /// </param>
    /// <param name="_manifestWeight">
    /// Weight of the shipment used for manifesting
    /// </param>
    /// <param name="_manifestWeightUOM">
    /// Weight UOM of the shipment used for manifesting
    /// </param>
    public void manifestClosedContainers(WHSMasterTrackingNum _shipmentTrackingNumber,
                                         Weight               _manifestWeight,
                                         WHSWeightUOM         _manifestWeightUOM)
    {
        WHSContainerTable containerTable;

        ttsbegin;

        update_recordset containerTable
            setting MasterTrackingNum = _shipmentTrackingNumber
            where containerTable.ShipmentId             == this.ShipmentId &&
                  containerTable.ContainerStatus        == WHSContainerStatus::Closed &&
                  containerTable.MasterTrackingNum      == '';

        this.selectForUpdate(true);
        this.ManifestedWeight    = _manifestWeight;
        this.ManifestedWeightUOM = _manifestWeightUOM;
        this.update();

        info(strFmt("@WAX:ShipmentHasBeenManifestedWithTrackingNumber", this.ShipmentId, _shipmentTrackingNumber));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manifest</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void manifest(WHSManifestRequirement   _manifestRequirement,
                           WHSMasterTrackingNum     _shipmentTrackingNumber,
                           Weight                   _manifestWeight,
                           WHSWeightUOM             _manifestWeightUOM)
    {
        if (this.checkShipmentCanBeManifested())
        {
            switch (_manifestRequirement)
            {
                case WHSManifestRequirement::TransportationManagement:
                    WHSContainerTable::closeShipment(this.ShipmentId);
                    break;
                
                case WHSManifestRequirement::Manual:
                    this.manifestClosedContainers(_shipmentTrackingNumber,
                                                  _manifestWeight,
                                                  _manifestWeightUOM);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmanifest</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void unmanifest(WHSContainerTable _containerTable)
    {
        if (this.canShipmentBeUnmanifested())
        {
            if (WHSCloseContainerProfile::find(_containerTable.CloseContainerProfileId).ManifestRequirementsForShipment == WHSManifestRequirement::TransportationManagement)
            {
                this.unManifestContainersOnShipmentTransportManagement(_containerTable);
            }
            else
            {
                this.unManifestContainersOnShipmentManual(_containerTable.MasterTrackingNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unManifestContainersOnShipmentManual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unmanifest all containers on a shipment with the specified shipment tracking id
    /// </summary>
    /// <param name="_shipmentTrackingNumber">
    /// The tracking number used for unmanifesting all shipment
    /// </param>
    public void unManifestContainersOnShipmentManual(WHSMasterTrackingNum _shipmentTrackingNumber)
    {
        WHSContainerTable containerTable;

        ttsbegin;

        update_recordset containerTable
            setting MasterTrackingNum = ''
            where containerTable.ShipmentId             == this.ShipmentId &&
                  containerTable.MasterTrackingNum      == _shipmentTrackingNumber;

        this.selectForUpdate(true);
        this.ManifestedWeight       = 0;
        this.ManifestedWeightUOM    = '';
        this.update();

        info(strFmt("@WAX:ShipmentWithMasterTrackingNumberIsUnmanifested", this.ShipmentId, _shipmentTrackingNumber));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unManifestContainersOnShipmentTransportManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unmanifest and void all containers on a shipment with the specified shipment tracking id.
    /// </summary>
    /// <param name="_containerTable">
    /// The tracking number used for unmanifesting all shipment
    /// </param>
    [Hookable(false)]
    internal void unManifestContainersOnShipmentTransportManagement(WHSContainerTable _containerTable)
    {
        WHSCloseContainerProfile containerProfile = WHSCloseContainerProfile::find(_containerTable.CloseContainerProfileId);
        
        if (containerProfile.ManifestRequirementsForShipment == WHSManifestRequirement::TransportationManagement)
        {
            TmsShipmentProcess  shipmentProcess = new TmsShipmentProcess();
            shipmentProcess.parmMasterTrackingNum(_containerTable.MasterTrackingNum);
            shipmentProcess.parmshipmentId(this.ShipmentId);
            shipmentProcess.voidAllContainer();

            _containerTable.removeTrackingNumbersFromAllContainersRelatedToMasterTrackingNum();
            this.unManifestContainersOnShipmentManual(_containerTable.MasterTrackingNum);

            if (conLen(shipmentProcess.parmErrors()) > 0)
            {
                container errorContainer = shipmentProcess.parmErrors();

                for (int i = 1; i <= conLen(errorContainer); ++i)
                {
                    warning (strFmt('%1', conPeek(errorContainer, i)));
                }

                throw error("@WAX3327");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveContainerToFinalLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves all the containers on a shipment to the final location.
    /// </summary>
    /// <param name = "_shipmentId">The shipment ID.</param>
    [Hookable(false)]
    internal static void moveContainerToFinalLocation(WHSShipmentId _shipmentId)
    {
        WHSContainerTable        containerTable;
        WHSCloseContainerProfile closeContainerProfile;

        while select containerTable
            join closeContainerProfile
            where  containerTable.ShipmentId == _shipmentId
                && containerTable.CloseContainerProfileId == closeContainerProfile.CloseContainerProfileId
                && closeContainerProfile.ContainerClosingWorkCreationProcess  == WHSWarehouseContainerClosingWorkCreationProcess::None
        {
            WHSContainerTable::closeContainer(_shipmentId, containerTable.ContainerId, containerTable.Weight, containerTable.WeightUOM, containerTable.defaultFinalShipmentLocationId(closeContainerProfile), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfShipmentCanBeReleased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all requirements for releasing a shipment are met.
    /// </summary>
    /// <returns>
    /// True if all containers on a shipment can be released; otherwise false
    /// </returns>
    public boolean checkIfShipmentCanBeReleased()
    {
        WHSContainerTable containerTable;

        while select containerTable
            where containerTable.ShipmentId         == this.ShipmentId
            &&    containerTable.ContainerReleased  == NoYes::No
            &&    containerTable.ContainerBuildId   == ''
        {
            if (!containerTable.checkIfContainerCanBeReleased())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseContainersOnShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Release all containers on a shipment
    /// </summary>
    public void releaseContainersOnShipment()
    {
        WHSContainerTable                   containerTable;
        WHSContainerGroupingLicensePlateId  processedContainerGroup;
        Integer                             numberOfContainersReleased;

        ttsbegin;

        if (!this.checkIfShipmentCanBeReleased())
        {
            throw error(strfmt("@WAX:ShipmentCannotBeReleased", this.ShipmentId));
        }

        while select forupdate containerTable
            order by containerTable.ContainerGroupingLicensePlateId
            where containerTable.ShipmentId         == this.ShipmentId
            &&    containerTable.ContainerReleased  == NoYes::No
            &&    containerTable.ContainerBuildId   == ''
        {
            if (containerTable.ContainerGroupingLicensePlateId == '' || processedContainerGroup != containerTable.ContainerGroupingLicensePlateId)
            {
                if (WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId).ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::Automatic)
                {
                    containerTable.releaseContainerWithWorkCreation();
                    numberOfContainersReleased++;
                }

                // Is the container part of a container group
                if (containerTable.ContainerGroupingLicensePlateId != '')
                {
                    // Mark the container group as processed to ensure that the group is only released once
                    processedContainerGroup = containerTable.ContainerGroupingLicensePlateId;
                }
            }
        }

        if (numberOfContainersReleased == 0)
        {
            throw error(strfmt("@WAX:ShipmentCannotBeReleased", this.ShipmentId));
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesContainerOnShipmentHasNonWorkCreationPackingPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any container on a shipment has a packing policy what is not using work creation
    /// </summary>
    /// </param>
    /// <param name="_shipmentId">
    /// Shipment id of the shipment of check
    /// </param>
    /// <returns>
    /// True if at least one container on the shipment have a policy that uses work creation; otherwise false
    /// </returns>
    public static boolean doesContainerOnShipmentHasNonWorkCreationPackingPolicy(WHSShipmentId _shipmentId)
    {
        WHSContainerTable           containerTable;
        WHSCloseContainerProfile    containerProfile;

        select firstonly RecId from containerTable
            exists join containerProfile
            where containerTable.ShipmentId                             == _shipmentId
            &&    containerTable.CloseContainerProfileId                == containerProfile.CloseContainerProfileId
            &&    containerProfile.ContainerClosingWorkCreationProcess  == WHSWarehouseContainerClosingWorkCreationProcess::None;

        return (containerTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipmentCanBeManifested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all requirements are met in order for the shipment to be manifested
    /// </summary>
    /// <returns>
    /// True if the shipment is ready to be manifested; otherwise false
    /// </returns>
    public boolean checkShipmentCanBeManifested()
    {
        boolean                     canShipmentBeManifested = true;

        if (this.ShipmentStatus != WHSShipmentStatus::Loaded)
        {
            if (!this.CarrierCode || !this.CarrierServiceCode)
            {
                canShipmentBeManifested = checkFailed("@WAX:CarrierInformationMustBeSpecifiedInOrderToManifestTheShipment");
            }
            else if (this.isManifested())
            {
                canShipmentBeManifested = checkFailed("@WAX:ShipmentIsAlreadyManifested");
            }
            else
            {
                WHSContainerTable containerTable;

                while select containerTable where
                    containerTable.ShipmentId == this.ShipmentId
                {
                    if (containerTable.ContainerStatus != WHSContainerStatus::Closed)
                    {
                        canShipmentBeManifested = checkFailed(strFmt("@WAX:ContainerIsNotClosed", containerTable.ContainerId));
                    }
                    else if (!containerTable.ShipCarrierTrackingNum && !containerTable.isContainerManifestRequirementsMet())
                    {
                        canShipmentBeManifested = checkFailed(strFmt("@WAX:ManifestRequirementsForContainerAreNotMet", containerTable.ContainerId));
                    }
                    else if (containerTable.ContainerGroupingLicensePlateId && !containerTable.isContainerGroupManifestRequirementsMet())
                    {
                        canShipmentBeManifested = checkFailed(strFmt("@WAX:ManifestGroupRequirementsForContainerAreNotMet", containerTable.ContainerId));
                    }
                }
            }
        }
        else
        {
            canShipmentBeManifested = checkFailed("@WAX:ShipmentIsLoadedAndCannotBeManifested");
        }

        return canShipmentBeManifested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipmentBeUnmanifested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all requirements are met in order for the shipment to be unmanifested
    /// </summary>
    /// <returns>
    /// True if the shipment can be unmanifested; otherwise false
    /// </returns>
    public boolean canShipmentBeUnmanifested()
    {
        WHSContainerTable           containerTable;
        boolean                     canShipmentBeUnmanifested = true;

        while select containerTable
            where containerTable.ShipmentId == this.ShipmentId &&
                  containerTable.ContainerReleased == NoYes::Yes
        {
            canShipmentBeUnmanifested = checkFailed(strFmt("@WAX:ContainerIsAlreadyReleasedFromThePackingStation", containerTable.ContainerId));
        }

        if (!canShipmentBeUnmanifested)
        {
            canShipmentBeUnmanifested = this.promptForceUnmanifest();
        }

        return canShipmentBeUnmanifested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForceUnmanifest</Name>
				<Source><![CDATA[
    [Replaceable]
    protected boolean promptForceUnmanifest()
    {
        if (appl.ttsLevel() == 0)
        {
            return Box::yesNo("@WAX:WHSShipmentUnmanifestPrompt", DialogButton::No) == DialogButton::Yes;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShippedOrLoaded</Name>
				<Source><![CDATA[
    private static boolean isShippedOrLoaded(WHSShipmentId _shipmentId)
    {
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId);

        return shipmentTable.ShipmentStatus == WHSShipmentStatus::Shipped
            || shipmentTable.ShipmentStatus == WHSShipmentStatus::Loaded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipmentInProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if shipment with the provided shipmentId is in progress (not shipped and not loaded).
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id of the shipment to check
    /// </param>
    /// <returns>
    /// True if shipment is in progress; False otherwise
    /// </returns>
    [Hookable(false)]
    internal static boolean isShipmentInProgress(WHSShipmentId _shipmentId)
    {
        if (_shipmentId)
        {
            return !WHSShipmentTable::isShippedOrLoaded(_shipmentId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canNewContainersBeAddedToShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a new container can be added to the shipment
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id of the shipment of check
    /// </param>
    /// <param name="_packingPolicy">
    /// The parameter of type <c>WHSCloseContainerProfileId</c>.
    /// </param>
    /// <returns>
    /// True if the container can be added to the shipment; otherwise false
    /// </returns>
    public static boolean canNewContainersBeAddedToShipment(WHSShipmentId              _shipmentId,
                                                            WHSCloseContainerProfileId _packingPolicy = '')
    {
        if (!WHSShipmentTable::isShipmentInProgress(_shipmentId))
        {
            // no need for further checks if shipment is already shipped or loaded (not in progress)
            return checkFailed(strFmt("@WAX:ShipmentIsShippedOrLoaded", _shipmentId));
        }

        WHSContainerTable containerTable;
        boolean           canNewContainersBeAddedToShipment = true;

        select firstonly RecId from containerTable
            where containerTable.ShipmentId        == _shipmentId
            &&    containerTable.MasterTrackingNum != '';

        if (containerTable.RecId != 0)
        {
            canNewContainersBeAddedToShipment = checkFailed("@WAX:NewContainersCantBeAddedAsShipmentIsManifested");
        }

        if (_packingPolicy && !WHSContainerTable::checkContainerPackingPolicyCompliesWithPoliciesInShipment(_packingPolicy, _shipmentId))
        {
            canNewContainersBeAddedToShipment = checkFailed("@WAX:ContainerCantBeAddedAsThePackingPolicyOfTheNewContainerIsNotCompatibleWithThePoliciesOnTheShipment");
        }

        return canNewContainersBeAddedToShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentManifestTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the shipment tracking number for a shipment
    /// </summary>
    /// <returns>
    /// Shipment tracking number
    /// </returns>
    public display WHSMasterTrackingNum shipmentManifestTrackingNumber()
    {
        WHSMasterTrackingNum shipmentManifestTrackingNumber;
        WHSContainerTable    containerTable;

        if (this.isManifested())
        {
            select firstonly MasterTrackingNum from containerTable
                where containerTable.ShipmentId == this.ShipmentId;

            shipmentManifestTrackingNumber = containerTable.MasterTrackingNum;
        }

        return shipmentManifestTrackingNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManifested</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isManifested()
    {
        return this.ManifestedWeight != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstContainerOnShipment</Name>
				<Source><![CDATA[
    public static WHSContainerTable findFirstContainerOnShipment(WHSShipmentId _shipmentId, boolean _selectForUpdate = false)
    {
        WHSContainerTable containerTable;

        select firstonly containerTable
            where containerTable.ShipmentId == _shipmentId;

        containerTable.selectForUpdate(_selectForUpdate);

        return containerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidates <paramref name="_salesLine" /> into the shipment.
    /// </summary>
    /// <param name = "_salesLine">A sales line.</param>
    /// <param name = "_salesTable">A sales order.</param>
    public void consolidateSalesLine(SalesLine _salesLine, SalesTable _salesTable = _salesLine.salesTable())
    {
        this.OrderNum      = this.OrderNum != _salesLine.SalesId ? '' : _salesLine.SalesId;
        this.CustomerRef   = this.CustomerRef != _salesTable.CustomerRef ? '' : _salesTable.CustomerRef;
        this.CustomerReq   = this.CustomerReq != _salesTable.PurchOrderFormNum ? '' : _salesTable.PurchOrderFormNum;
        this.DlvTermId     = this.DlvTermId   != _salesLine.DlvTerm ? '' : _salesLine.DlvTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentWithoutIdForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the shipment for a sales order. The shipment Id is not initialized.
    /// </summary>
    /// <param name = "_salesOrderParameters">Sales order shipment parameters.</param>
    public void initShipmentWithoutIdForSalesOrder(WHSWarehouseReleaseSalesOrderParameters _salesOrderParameters)
    {
        // The fields from this method should be consolidated in the consolidateSalesLineShipmentForPolicy method.

        this.WorkTransType         = WHSWorkTransType::Sales;
        this.OrderNum              = _salesOrderParameters.SalesLine.SalesId;
        this.AccountNum            = _salesOrderParameters.SalesLine.CustAccount;
        this.DeliveryName          = _salesOrderParameters.SalesLine.DeliveryName;
        this.DeliveryPostalAddress = _salesOrderParameters.ShippingAddress.RecId;
        this.CountryRegionISOCode  = LogisticsAddressCountryRegion::find(_salesOrderParameters.ShippingAddress.CountryRegionId).isOcode;
        this.Address               = _salesOrderParameters.ShippingAddress.Address;
        this.InventSiteId          = _salesOrderParameters.InventDim.InventSiteId;
        this.InventLocationId      = _salesOrderParameters.InventDim.InventLocationId;

        if (_salesOrderParameters.SalesLine.DlvMode != '')
        {
            this.CarrierCode           = _salesOrderParameters.CarrierService.CarrierCode;
            this.CarrierServiceCode    = _salesOrderParameters.CarrierService.CarrierServiceCode;
        }
        else
        {
            this.CarrierCode           = _salesOrderParameters.TmsSalesTable.CarrierCode;
            this.CarrierServiceCode    = _salesOrderParameters.TmsSalesTable.CarrierServiceCode;
        }
        this.ModeCode              = _salesOrderParameters.TransportationModeCode;
        this.CarrierGroupCode      = _salesOrderParameters.TmsSalesTable.CarrierGroupCode;
        this.BrokerCode            = _salesOrderParameters.TmsSalesTable.BrokerCode;
        this.LoadDirection         = WHSLoadDirection::Outbound;
        this.DlvTermId             = _salesOrderParameters.SalesLine.DlvTerm ? _salesOrderParameters.SalesLine.DlvTerm : _salesOrderParameters.SalesOrder.DlvTerm;
        this.CustomerRef           = _salesOrderParameters.SalesOrder.CustomerRef;
        this.CustomerReq           = _salesOrderParameters.SalesOrder.PurchOrderFormNum;
        this.ShipConsolidationPolicy = _salesOrderParameters.ShipConsolidationPolicyData ? _salesOrderParameters.ShipConsolidationPolicyData.parmShipConsolidationPolicy().RecId : 0;
        this.RouteCode               = _salesOrderParameters.TmsSalesTable.RouteConfigCode;

        if (WHSPropagateShipmentProcessingPolicyFlight::instance().isEnabled())
        {
            this.OutboundShipmentProcessingPolicy = WHSOutboundShipmentProcessingPolicyProvider::initFromSourceOrder(WHSSourceOrderDocumentType::SalesOrder)
                .getOutboundShipmentProcessingPolicy(_salesOrderParameters.SalesLine.SalesId)
                    .RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the shipment for a sales order.
    /// </summary>
    /// <param name = "_salesOrderParameters">Sales order shipment parameters.</param>
    public void initShipmentForSalesOrder(WHSWarehouseReleaseSalesOrderParameters _salesOrderParameters)
    {
        this.initShipmentWithoutIdForSalesOrder(_salesOrderParameters);
        this.initShipmentId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentWithoutIdForTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the shipment for a transfer order. The shipment Id is not initialized.
    /// </summary>
    /// <param name = "_transferOrderParameters">Transfer order shipment parameters.</param>
    public void initShipmentWithoutIdForTransferOrder(WHSWarehouseReleaseTransferOrderParameters _transferOrderParameters)
    {
        // The fields from this method should be consolidated in the consolidateTransferLineShipmentForPolicy method.

        LogisticsPostalAddress address;
        if (_transferOrderParameters.TransferOrder.ToPostalAddress)
        {
            address = LogisticsPostalAddress::findRecId(_transferOrderParameters.TransferOrder.ToPostalAddress);
        }
        else
        {
            address = InventLocation::find(_transferOrderParameters.TransferOrder.InventLocationIdTo).logisticsPostalAddress();
        }

        TMSInventTransferTable tmsInventTransferTable = TMSInventTransferTable::find(_transferOrderParameters.TransferOrderLine.TransferId);

        this.WorkTransType         = WHSWorkTransType::TransferIssue;
        this.OrderNum              = _transferOrderParameters.TransferOrderLine.TransferId;
        this.DeliveryName          = LogisticsLocation::find(address.Location).Description;
        this.DeliveryPostalAddress = address.RecId;
        this.CountryRegionISOCode  = LogisticsAddressCountryRegion::find(address.CountryRegionId).isOcode;
        this.Address               = address.Address;
        InventLocation fromInventLocation = InventLocation::find(_transferOrderParameters.TransferOrder.InventLocationIdFrom);
        this.InventSiteId          = fromInventLocation.InventSiteId;
        this.InventLocationId      = fromInventLocation.InventLocationId;
        this.CarrierCode           = tmsInventTransferTable.CarrierCode;
        this.CarrierServiceCode    = tmsInventTransferTable.CarrierServiceCode;
        this.ModeCode              = tmsInventTransferTable.ModeCode;
        this.CarrierGroupCode      = tmsInventTransferTable.CarrierGroupCode;
        this.DlvTermId             = _transferOrderParameters.TransferOrder.DlvTermId;
        this.LoadDirection         = WHSLoadDirection::Outbound;
        this.ShipConsolidationPolicy = _transferOrderParameters.ShipConsolidationPolicyData ? _transferOrderParameters.ShipConsolidationPolicyData.parmShipConsolidationPolicy().RecId : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentForTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the shipment for a transfer order.
    /// </summary>
    /// <param name = "_transferOrderParameters">Transfer order shipment parameters.</param>
    public void initShipmentForTransferOrder(WHSWarehouseReleaseTransferOrderParameters _transferOrderParameters)
    {
        this.initShipmentWithoutIdForTransferOrder(_transferOrderParameters);
        this.initShipmentId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignSiteAndWarehouse</Name>
				<Source><![CDATA[
    internal void assignSiteAndWarehouse(InventDim _inventDim)
    {
        this.InventSiteId = _inventDim.InventSiteId;
        this.InventLocationId = _inventDim.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignOriginInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign the origin information on the shipment header.
    /// </summary>
    /// <param name="_loadLineAddRemove">
    ///     The <c>AddRemove</c> enum value describing whether a load line has just been added or removed.
    /// </param>
    /// <returns>
    ///    true if <c>WHSShipmentTable</c> buffer was modified; otherwise, false.
    /// </returns>
    internal boolean assignOriginInfo(AddRemove _loadLineAddRemove)
    {
        return WHSShipmentTableAssignOriginInfo::newFromShipmentTable(this).assign(_loadLineAddRemove);
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateSalesLineShipmentForPolicy2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidates new sales shipment into the current shipment based on a policy.
    /// </summary>
    /// <param name = "_shipmentTable">A new shipment.</param>
    /// <param name = "_shipConsolidationPolicy">A shipment consolidation policy.</param>
    public void consolidateSalesLineShipmentForPolicy2(WHSShipmentTable _shipmentTable, WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        // Fields from the initShipmentWithoutIdForSalesOrder method should be consolidated.

        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, OrderNum), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, AccountNum), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, DeliveryName), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, DeliveryPostalAddress), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CountryRegionISOCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, Address), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, InventSiteId), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, InventLocationId), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CarrierCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CarrierServiceCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, ModeCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CarrierGroupCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, BrokerCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, LoadDirection), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, DlvTermId), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CustomerRef), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CustomerReq), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, RouteCode), _shipConsolidationPolicy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidates <paramref name="_inventTransferLine" /> into the shipment.
    /// </summary>
    /// <param name = "_inventTransferLine">A transfer line.</param>
    /// <param name = "_inventTransferTable">A transfer header.</param>
    public void consolidateTransferLine(InventTransferLine _inventTransferLine, InventTransferTable _inventTransferTable)
    {
        this.OrderNum = this.OrderNum != _inventTransferTable.TransferId ? '' : _inventTransferTable.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateTransferLineShipmentForPolicy2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidates new transfer issue shipment into the current shipment based on a policy.
    /// </summary>
    /// <param name = "_shipmentTable">A new shipment.</param>
    /// <param name = "_shipConsolidationPolicy">A shipment consolidation policy.</param>
    public void consolidateTransferLineShipmentForPolicy2(WHSShipmentTable _shipmentTable, WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        // Fields from the initShipmentWithoutIdForTransferOrder method should be consolidated.

        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, OrderNum), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, DeliveryName), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, DeliveryPostalAddress), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CountryRegionISOCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, Address), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, InventSiteId), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, InventLocationId), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CarrierCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CarrierServiceCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, ModeCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, CarrierGroupCode), _shipConsolidationPolicy);
        this.consolidateShipmentFieldForPolicy2(_shipmentTable, fieldNum(WHSShipmentTable, DlvTermId), _shipConsolidationPolicy);

        if (!WHSShipSkipFinalizingConsolidatedTransferShipmentContext::shouldSkipFinalizingConsolidatedTransferShipment())
        {
            this.finalizeConsolidatedTransferShipmentForPolicy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateShipmentFieldForPolicy2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidates a new shipment field into the current shipment field based on a policy.
    /// </summary>
    /// <param name = "_shipmentTable">A new shipment.</param>
    /// <param name = "_fieldId">A shipment field Id.</param>
    /// <param name = "_shipConsolidationPolicy">A shipment consolidation policy.</param>
    [Replaceable]
    public void consolidateShipmentFieldForPolicy2(WHSShipmentTable _shipmentTable, FieldId _fieldId, WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        if (_shipConsolidationPolicy.ShipConsolidationPolicyType != WHSShipConsolidationPolicyType::None)
        {
            FieldName fieldName = fieldId2Name(tableNum(WHSShipmentTable), _fieldId);

            if (this.getFieldValue(fieldName) != _shipmentTable.getFieldValue(fieldName))
            {
                anytype nullValue = nullValueBaseType(typeOf(this.getFieldValue(fieldName)));

                if (this.getFieldValue(fieldName) != nullValue)
                {
                    if (!WHSShipConsolidationPolicyTypeProvider::singletonFromType(_shipConsolidationPolicy.ShipConsolidationPolicyType).mandatoryShipConsolidationPolicyFields(_shipConsolidationPolicy).in([this.TableId, _fieldId]))
                    {
                        this.setFieldValue(fieldName, nullValue);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateLineShipmentForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Consolidates a new shipment into a base shipment based on a policy.
    /// </summary>
    /// <param name = "_shipmentTable">A new shipment.</param>
    /// <param name = "_shipConsolidationPolicy">A shipment consolidation policy.</param>
    internal void consolidateLineShipmentForPolicy(WHSShipmentTable _shipmentTable, WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        switch (_shipmentTable.WorkTransType)
        {
            case WHSWorkTransType::Sales:
                this.consolidateSalesLineShipmentForPolicy2(_shipmentTable, _shipConsolidationPolicy);
                return;

            case WHSWorkTransType::TransferIssue:
                this.consolidateTransferLineShipmentForPolicy2(_shipmentTable, _shipConsolidationPolicy);
                return;

            default:
                boolean implemented = this.consolidateLineShipmentForPolicyDefault(_shipmentTable, _shipConsolidationPolicy);
                if (implemented)
                {
                    return;
                }
        }

        throw error("@SYS6144");
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateLineShipmentForPolicyDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extension point for implementing shipment consolidation for additional WHSWorkTransTypes.
    /// </summary>
    /// <param name = "_shipmentTable">The shipment being consolidated.</param>
    /// <param name = "_shipConsolidationPolicy">The shipment consolidation policy being used.</param>
    /// <returns>True if the method has been implemented by an extender; otherwise false.</returns>
    protected boolean consolidateLineShipmentForPolicyDefault(
        WHSShipmentTable            _shipmentTable,
        WHSShipConsolidationPolicy  _shipConsolidationPolicy)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the shipment Id.
    /// </summary>
    public void initShipmentId()
    {
        this.ShipmentId = this.getShipmentId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferShipmentAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if transfer shipment is allowed on the load.
    /// </summary>
    /// <returns>
    /// true if transfer shipment is allowed on the load; otherwise false
    /// </returns>
    public boolean isTransferShipmentAllowed()
    {
        return this.LoadDirection == WHSLoadDirection::Outbound &&
               (this.ShipmentStatus == WHSShipmentStatus::Open
                || this.ShipmentStatus == WHSShipmentStatus::InProcess
                || this.ShipmentStatus == WHSShipmentStatus::Waved
                || this.ShipmentStatus == WHSShipmentStatus::Loaded)
                && WHSLoadTable::find(this.LoadId).LoadingStrategy != WHSLoadingStrategy::PartialLoadShippingAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConsolidateShipmentsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if consolidate shipments is allowed on the load.
    /// </summary>
    /// <returns>
    /// true if consolidate shipments is allowed on the load; otherwise false
    /// </returns>
    public boolean isConsolidateShipmentsAllowed()
    {
        return this.LoadDirection == WHSLoadDirection::Outbound &&
               (this.ShipmentStatus == WHSShipmentStatus::Open
                || this.ShipmentStatus == WHSShipmentStatus::InProcess
                || this.ShipmentStatus == WHSShipmentStatus::Waved
                || this.ShipmentStatus == WHSShipmentStatus::Loaded)
                && WHSLoadTable::find(this.LoadId).LoadingStrategy != WHSLoadingStrategy::PartialLoadShippingAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTMSActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if TMS actions can be used.
    /// </summary>
    /// <returns>
    /// true if TMS actions can be used; otherwise, false.
    /// </returns>
    public boolean canUseTMSActions()
    {
        if (TMSGlobal::skipTMS())
        {
            return false;
        }

        boolean ret = true;

        if (this.LoadId)
        {
            ret = WHSLoadTable::find(this.LoadId).canUseTMSActions();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record from another shipment.
    /// </summary>
    /// <param name="_shipmentTable">
    /// Shipment table record to initialize from.
    /// </param>
    [Hookable(false)]
    internal void initFromShipment(WHSShipmentTable _shipmentTable)
    {
        buf2Buf(_shipmentTable, this);
        this.ShipmentId = this.getShipmentId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMSetMultimodalDGId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets MMDG DocumentId
    /// </summary>
    public void HMIMSetMultimodalDGId()
    {
        this.HMIMMultimodalDGId = NumberSeq::newGetNum(WHSParameters::HMIMNumRefMultimodalDGId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMSetCarrOfMerchByRoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets CMR Document Id
    /// </summary>
    public void HMIMSetCarrOfMerchByRoadId()
    {
        this.HMIMCarrOfMerchByRoadId = NumberSeq::newGetNum(WHSParameters::HMIMNumRefCarrOfMerchByRoadId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMSetAirWayBillId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets AirWayBillNum Id
    /// </summary>
    public void HMIMSetAirWayBillId()
    {
        this.HMIMAirWayBillNum = NumberSeq::newGetNum(WHSParameters::HMIMNumRefAirWayBillId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMGetRegCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// find the Hazardous materials regulation code associated with the shipment
    /// </summary>
    /// <returns>Hazardous material regulation code for the shipment</returns>
    public HMIMRegCode HMIMGetRegCode()
    {
        HMIMShipMode      shipMode;
        TMSCarrierService tmsCarrierService;

        select firstonly RegCode from shipMode
            join tmsCarrierService
                where tmsCarrierService.CarrierServiceCode == this.CarrierServiceCode
                    && tmsCarrierService.CarrierCode       == this.CarrierCode
                    && tmsCarrierService.DlvModeId         == shipMode.DlvModeId
                    && shipMode.DlvModeDataAreaId          == curExt2dataareaid(tableNum(DlvMode));

        return shipMode.RegCode ? shipMode.RegCode: WHSParameters::find().HMIMDefaultRegCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMADRPointsTotalForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates ADR Hazardous material points total for shipment.
    /// </summary>
    /// <returns>ADR points total</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Amount HMIMADRPointsTotalForShipment()
    {
        WHSLoadLine      loadLine;
        InventTable      inventTable;
        HMIMItemMaterial itemMaterial;
        Amount           calcPoints;

        while select loadLine
            where loadLine.ShipmentId == this.ShipmentId
        join RecId from inventTable
            where inventTable.ItemId == loadLine.ItemId
            && inventTable.HMIMIndicator == NoYes::Yes
        join itemMaterial
            where itemMaterial.ItemId == inventTable.ItemId
                && itemMaterial.RegCode == this.HMIMGetRegCode()
        {
            calcPoints += loadLine.HMIMHandlingQty() * itemMaterial.Qty *  itemMaterial.Multiplier;
        }

        return calcPoints;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WHSShippingContainerId</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSShippingContainerId WHSShippingContainerId()
    {
        return TMSAppointment::find(WHSLoadTable::find(this.LoadId).tmsDisplayAppointmentId()).WHSShippingContainerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIMLimitedQtyNetWeightForShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Limited Quantity Net Weight for shipment.
    /// </summary>
    /// <returns>Limited Quantity Net Weight</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Amount HMIMLimitedQtyNetWeightForShipment()
    {
        WHSLoadLine         loadLine;
        InventTable         inventTable;
        HMIMItemMaterial    itemMaterial;
        ItemNetWeight       limitedQtyNetWeight;

        while select loadLine
            where loadLine.ShipmentId == this.ShipmentId
        join NetWeight from inventTable
            where inventTable.ItemId == loadLine.ItemId
            && inventTable.HMIMIndicator == NoYes::Yes
        exists join itemMaterial
            where itemMaterial.ItemId == inventTable.ItemId
                && itemMaterial.RegCode == this.HMIMGetRegCode()
                && itemMaterial.LimitedQty == NoYes::Yes
        {
            limitedQtyNetWeight += loadLine.displayInventQty() * inventTable.NetWeight;
        }

        return limitedQtyNetWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printContainerShippingLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints container shipping labels for all the containers of a shipment.
    /// </summary>
    [Hookable(false)]
    final internal void printContainerShippingLabels()
    {
        boolean isPrintContainerShippingLabelForManifestShipmentFlightEnabled = WHSPrintContainerShippingLabelForManifestShipmentFlight::instance().isEnabled();

        WHSContainerTable containerTable;
        WHSCloseContainerProfile closeContainerProfile;

        while select containerTable
            where  containerTable.ShipmentId == this.ShipmentId
                && containerTable.ShipCarrierTrackingNum != ''
            join closeContainerProfile
                where closeContainerProfile.CloseContainerProfileId == containerTable.CloseContainerProfileId
                    && containerTable.CloseContainerProfileId != ''
        {
            if (!containerTable.checkContainerShippingLabelReceived())
            {
                warning(strFmt("@TRX:NoContainerShippingLabelReceived", containerTable.ContainerId));
            }

            if (isPrintContainerShippingLabelForManifestShipmentFlightEnabled)
            {
                containerTable.printContainerShippingLabelForManifestShipment(closeContainerProfile);
            }
            else
            {
                containerTable.printContainerShippingLabel(closeContainerProfile);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.validateIfAllowedToModify();

        ttsbegin;

        super();
        this.deleteTMSAppointments();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWaveLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes wave lines of open waves, connected to shipment.
    /// </summary>
    [Hookable(false)]
    internal void deleteWaveLines()
    {
        WHSWaveLine     waveLine;
        WHSWaveTable    wave;

        delete_from waveLine
            where waveLine.ShipmentId == this.ShipmentId
            exists join wave
                where wave.WaveId == waveLine.WaveId
                    && wave.WaveStatus == WHSWaveStatus::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeConsolidatedTransferShipmentForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies current consolidated transfer shipment based on a policy.
    /// </summary>
    /// <returns>true if discrepancy has been found and the shipment has been changed and should be updated; otherwise false.</returns>    
    public boolean finalizeConsolidatedTransferShipmentForPolicy()
    {
        boolean ret;

        if (!this.DeliveryPostalAddress)
        {
            WHSLoadLine         loadLine;
            InventTransferTable inventTransferTable;

            select firstonly InventLocationIdTo from inventTransferTable
            exists join loadLine
                where loadLine.ShipmentId      == this.ShipmentId
                &&    loadLine.InventTransType == InventTransType::TransferOrderShip
                &&    loadLine.OrderNum        == inventTransferTable.TransferId;
            
            if (inventTransferTable)
            {
                LogisticsLocation logisticsLocation = InventTransferTable::defaultLogisticsLocation(inventTransferTable.InventLocationIdTo, LogisticsLocationRoleType::Delivery);

                if (logisticsLocation)
                {
                    this.DeliveryPostalAddress = LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocation.RecId);
                    this.DeliveryName          = logisticsLocation.Description;

                    ret = true;
                }
            }
        }
        else if (!this.DeliveryName)
        {
            LogisticsPostalAddress postalAddress = LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress);
            
            if (postalAddress)
            {
                this.DeliveryName = LogisticsLocation::find(postalAddress.Location).Description;

                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsInitCarrierServiceFromLoad</Name>
				<Source><![CDATA[
    public void tmsInitCarrierServiceFromLoad()
    {
        if (this.LoadId && TMSShipmentInitCarrierServiceFromLoadFlight::instance().isEnabled())
        {
            WHSLoadTable loadTable  = WHSLoadTable::find(this.LoadId);
            this.CarrierCode        = loadTable.CarrierCode;
            this.CarrierServiceCode = loadTable.CarrierServiceCode;
            this.ModeCode           = TMSCarrier::find(loadTable.CarrierCode).ModeCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the shipment can have work.
    /// </summary>
    /// <returns>true if the shipment can have work; otherwise false.</returns>
    [Hookable(false)]
    internal boolean canHaveWork()
    {
        return this.ShipmentStatus > WHSShipmentStatus::Open
            || this.LoadDirection == WHSLoadDirection::Inbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the WHSModule that applied to the shipment.
    /// </summary>
    /// <param name = "_shipmentId">The shipment ID that module needs to be determined for.</param>
    /// <returns>The determined module, unknown if an unexpected InventTransType was found.</returns>
    [Replaceable(true)]
    protected internal static WHSModule module(WHSShipmentId _shipmentId)
    {
        WHSLoadLine loadLine = WHSLoadLine::findFirstForShipmentId(_shipmentId);

        return WHSShipmentTable::moduleByInventTransType(loadLine.InventTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleByInventTransType</Name>
				<Source><![CDATA[
    [Wrappable, Replaceable]
    internal static WHSModule moduleByInventTransType(InventTransType _inventTransType)
    {
        switch (_inventTransType)
        {
            case InventTransType::Sales:
                return WHSModule::Sales;

            case InventTransType::Purch:
                return WHSModule::Purch;

            case InventTransType::InventTransfer:
                return WHSModule::Transfer;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countOfWorksRelatedToLoadLine</Name>
				<Source><![CDATA[
    internal int countOfWorksRelatedToLoadLine(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSWorkTable    workTable;
        WHSWorkLine     workLine;

        select count(RecId) from workTable
            where workTable.ShipmentId == this.ShipmentId
        exists join workLine
            where workTable.WorkId            == workLine.WorkId
                && workLine.LoadLineRefRecId  == _loadLineRecId;

        return workTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countOfContainersReleatedToLoadLine</Name>
				<Source><![CDATA[
    internal int countOfContainersReleatedToLoadLine(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSContainerTable    containerTable;
        WHSContainerLine     containerLine;

        select count(RecId) from containerTable
            where containerTable.ShipmentId == this.ShipmentId
        exists join containerLine
            where containerLine.ContainerId == containerTable.ContainerId
                && containerLine.LoadLine   == _loadLineRecId;

        return containerTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstShipmentWithoutReceivingCompletedData</Name>
				<Source><![CDATA[
    internal static WHSShipmentTable findFirstShipmentWithoutReceivingCompletedData(WHSLoadId _loadId)
    {
        WHSShipmentTable shipmentTable;
        select firstonly shipmentTable
            where shipmentTable.LoadId == _loadId
                && shipmentTable.ReceivingCompletedDocumentDate == dateNull()
                && shipmentTable.ReceivingCompletedPackingSlipId == '';
    
        return shipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceivingCompletedData</Name>
				<Source><![CDATA[
    internal static void setReceivingCompletedData(WHSShipmentId _shipmentId, WHSReceivingCompletedPackingSlipId _packingSlipId, DocumentDate _documentDate)
    {
        ttsbegin;
        WHSShipmentTable shipment = WHSShipmentTable::find(_shipmentId, true);
        shipment.ReceivingCompletedPackingSlipId = _packingSlipId;
        shipment.ReceivingCompletedDocumentDate = _documentDate == dateNull()
            ? DateTimeUtil::getSystemDate(DateTimeUtil::getClientMachineTimeZone())
            : _documentDate;
        shipment.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTMSAppointments</Name>
				<Source><![CDATA[
    private void deleteTMSAppointments()
    {
        TMSAppointment  appointment;
        WHSLoadLine     loadLine;
        delete_from appointment
            where appointment.ApptRefNum   == this.LoadId
                && appointment.ApptRefType == TMSApptRefType::Load
            notexists join loadLine
                where loadLine.LoadId      == this.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldFillEntireShipment</Name>
				<Source><![CDATA[
    internal boolean shouldFillEntireShipment()
    {
        if (WhsWorkTransactionType::singletonFromType(this.WorkTransType).supportsShipmentProcessingPolicy())
        {
            WHSOutboundShipmentProcessingPolicy shipmentProcessingPolicy = WHSOutboundShipmentProcessingPolicy::find(this.OutboundShipmentProcessingPolicy);
            if (this.WorkTransType == WHSWorkTransType::Sales
                && (!shipmentProcessingPolicy
                    || shipmentProcessingPolicy.FillEntireShipment == WHSFillEntireShipment::RespectCustomerSettings))
            {
                return WHSCustTable::find(this.AccountNum).FillEntireOrder;
            }
            else
            {
                return shipmentProcessingPolicy.FillEntireShipment == WHSFillEntireShipment::Enabled;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX3099</DeveloperDocumentation>
	<FormRef>whsshipmentdetails</FormRef>
	<Label>@WAX428</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ShipmentId</TitleField1>
	<TitleField2>LoadId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ShipmentIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ShipmentIdx</PrimaryIndex>
	<ReplacementKey>ShipmentIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfLadingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Address</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightTermCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WayBill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SCAC</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionISOCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropOffUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentArrivalUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConfirmUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfLadingId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Address</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightTermCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WayBill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerReq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipCarrierAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StopNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SCAC</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BrokerCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionISOCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DropOffUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentArrivalUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConfirmUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManifestedWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManifestedWeightUOM</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveLabelsPrintedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveLabelsPrintedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveLabelsPrinted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PackingSlipParameters</Name>
			<Label>@WAX:WHSPackingSlipPostingParameters</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PreallocatedPackingSlipId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PreallocatedPackingSlipDocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OutboundShipmentProcessingPolicy</Name>
			<Label>@WAX:OutboundShipmentProcessingPolicy</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Address</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Addressing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillOfLadingId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSBillOfLadingId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BrokerCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSBrokerCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierGroupCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierGroupCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierServiceCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierServiceCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionISOCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCountryRegionISOCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerRef</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerReq</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSDeliveryName</ExtendedDataType>
			<Label>@WAX5408</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTermId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DropOffUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDropOffUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightTermCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSFreightTermCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadDirection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSLoadDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSModeCode</ExtendedDataType>
			<Label>@TRX2356</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSProNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReference</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SCAC</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSSCAC</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipCarrierAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ShipCarrier</ConfigurationKey>
			<ExtendedDataType>ShipCarrierAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ShipConfirmUTCDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipConfirmUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ShipmentArrivalUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentArrivalUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ShipmentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSShipmentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>StopNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSStopNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WayBill</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSWayBill</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSWorkTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ManifestedWeight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
			<Label>Manifested weight</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ManifestedWeightUOM</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWeightUOM</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>WaveLabelsPrintedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveLabelPrintedDateTime</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveLabelsPrintedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysUserId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@WAX:WaveLabelPrintedBy</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WaveLabelsPrinted</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@WAX:WaveLabelPrinted</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipConsolidationPolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSShipConsolidationPolicyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMIMMultimodalDGId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HMIMMultimodalDGId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMIMCarrOfMerchByRoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HMIMCarrOfMerchByRoadId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMIMAirWaybillNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>HMIMAirWaybillNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ShipmentCreatedUTCDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSShipmentCreatedUTCDateTime</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReceivingCompletedPackingSlipId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReceivingCompletedPackingSlipId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReceivingCompletedDocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OrderLineInventTransLinkType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>WHSShipmentOrderLineInventTransLinkType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PreallocatedPackingSlipId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPreallocatedPackingSlipId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PreallocatedPackingSlipDocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPreallocatedPackingSlipDocumentDate</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OutboundShipmentProcessingPolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundShipmentProcessingPolicyRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ShipmentIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipmentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ShipmentStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ShipmentStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WaveIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>WaveId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StopNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>StopNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderLineInventTransLinkTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderLineInventTransLinkType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTermId</Name>
					<SourceEDT>DlvTermId</SourceEDT>
					<Field>DlvTermId</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_WHSShipmentTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>WorkTransType</Name>
					<Field>WorkTransType</Field>
					<ValueStr>WHSWorkTransType::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderNum</Name>
					<Field>OrderNum</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>WorkTransType</Name>
					<Field>WorkTransType</Field>
					<ValueStr>WHSWorkTransType::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderNum</Name>
					<Field>OrderNum</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSBroker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BrokerCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Broker</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BrokerCode</Name>
					<SourceEDT>TMSBrokerCode</SourceEDT>
					<Field>BrokerCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<SourceEDT>TMSCarrierCode</SourceEDT>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrierGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSCarrierGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierGroupCode</Name>
					<SourceEDT>TMSCarrierGroupCode</SourceEDT>
					<Field>CarrierGroupCode</Field>
					<RelatedField>CarrierGroupCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ModeCode</Name>
					<SourceEDT>TMSModeCode</SourceEDT>
					<Field>ModeCode</Field>
					<RelatedField>ModeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteCode</Name>
					<SourceEDT>TMSRouteCode</SourceEDT>
					<Field>RouteCode</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Transfer</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>WorkTransType</Name>
					<Field>WorkTransType</Field>
					<ValueStr>WHSWorkTransType::TransferIssue</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderNum</Name>
					<Field>OrderNum</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<SourceEDT>WHSLoadId</SourceEDT>
					<Field>LoadId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSShipConsolidationPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSShipConsolidationPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipConsolidationPolicy</Name>
					<Field>ShipConsolidationPolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWaveTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSWaveTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveId</Name>
					<SourceEDT>WHSWaveId</SourceEDT>
					<Field>WaveId</Field>
					<RelatedField>WaveId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrierService</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSCarrierService</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierServiceCode</Name>
					<Field>CarrierServiceCode</Field>
					<RelatedField>CarrierServiceCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OutboundShipmentProcessingPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSOutboundShipmentProcessingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutboundShipmentProcessingPolicy</Name>
					<Field>OutboundShipmentProcessingPolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>