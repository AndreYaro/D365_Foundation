<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdReportPeriod_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdReportPeriod_TH extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the dates specified for the <c>TaxWithholdFromDate</c> and
    /// <c>TaxWithholdToDate</c> values are correct.
    /// </summary>
    /// <returns>
    /// true if the validation is successful ; otherwise false.
    /// </returns>
    private boolean checkDateInterval()
    {
        TaxWithholdReportPeriod_TH     period;

        if (this.TaxWithholdFromDate > this.TaxWithholdToDate)
        {
            return checkFailed("@SYS6631");
        }

        period.clear();
        period  = TaxWithholdReportPeriod_TH::findOther(this.TaxWithholdPeriodHead_TH, this.TaxWithholdFromDate, this.RecId);

        if (period.RecId  != 0 && period.RecId  != this.RecId)
        {
            return checkFailed("@SYS22009");
        }

        period.clear();
        period  = TaxWithholdReportPeriod_TH::findOther(this.TaxWithholdPeriodHead_TH, this.TaxWithholdToDate, this.RecId);

        if (period.RecId  != 0 && period.RecId  != this.RecId)
        {
            return checkFailed("@SYS22010");
        }

        if (this.RecId)
        {
            if (TaxWithholdReportPeriod_TH::existOther(this.TaxWithholdPeriodHead_TH,
                                                       this.TaxWithholdFromDate,
                                                       this.TaxWithholdToDate,
                                                       this.RecId))
            {
                return checkFailed("@SYS7553");
            }
        }
        else
        {
            if (TaxWithholdReportPeriod_TH::exist(this.TaxWithholdPeriodHead_TH,
                                            this.TaxWithholdFromDate,
                                            this.TaxWithholdToDate))
            {
                return checkFailed("@SYS7553");
            }
            if (TaxWithholdReportPeriod_TH::dateIsInPeriod(this.TaxWithholdPeriodHead_TH, this.TaxWithholdFromDate))
            {
                return checkFailed("@SYS22009");
            }
            if (TaxWithholdReportPeriod_TH::dateIsInPeriod(this.TaxWithholdPeriodHead_TH, this.TaxWithholdToDate))
            {
                return checkFailed("@SYS22010");
            }
            if (TaxWithholdReportPeriod_TH::existIntervalInDates(this.TaxWithholdPeriodHead_TH,
                                                                 this.TaxWithholdFromDate,
                                                                 this.TaxWithholdToDate))
            {
                return checkFailed("@SYS22011");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntervalInUse</Name>
				<Source><![CDATA[
    private boolean checkIntervalInUse()
    {
        ;
        if (this.orig().RecId)
        {
            if (this.TaxWithholdPeriodHead_TH == this.orig().TaxWithholdPeriodHead_TH)
            {
                if (this.TaxWithholdFromDate > this.orig().TaxWithholdFromDate &&
                    TaxWithholdTrans::existPeriod_TH(this.orig().TaxWithholdFromDate,
                                                     this.TaxWithholdFromDate,
                                                     this.orig().TaxWithholdPeriodHead_TH))
                {
                    return checkFailed("@SYS21998");
                }

                if (this.TaxWithholdToDate   <  this.orig().TaxWithholdToDate &&
                    TaxWithholdTrans::existPeriod_TH(this.TaxWithholdToDate,
                                                     this.orig().TaxWithholdToDate,
                                                     this.orig().TaxWithholdPeriodHead_TH))
                {
                    return checkFailed("@SYS21999");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        boolean  returnValue;

        returnValue = this.checkDateInterval();

        if (returnValue)
        {
            super();
        }
        else
        {
            throw error("@SYS15885");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ok = true;

        ok = super();

        if (ok)
        {
            if (this.orig().RecId)
            {
                if (! this.checkIntervalInUse())
                {
                    return checkFailed("@SYS15885");
                }
            }
            if (! this.checkDateInterval())
            {
                return checkFailed("@SYS15885");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIsInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record already occurs for the specified settlement period and actual date.
    /// </summary>
    /// <param name="_taxWithholdPeriodRecId">
    /// The ID of the settlement record.
    /// </param>
    /// <param name="_taxWithholdPeriodDate">
    /// The date of the record to search.
    /// </param>
    /// <returns>
    /// true if a record is found that meets search criteria; otherwise false.
    /// </returns>
    private static boolean dateIsInPeriod(TaxWithholdPeriodId_TH _taxWithholdPeriodRecId,
                                        TaxWithholdPeriodDate_TH  _taxWithholdPeriodDate)
    {
        return _taxWithholdPeriodRecId
                && _taxWithholdPeriodDate
                && (select firstonly RecId from taxWithholdReportPeriod_TH
                    where taxWithholdReportPeriod_TH.TaxWithholdPeriodHead_TH == _taxWithholdPeriodRecId
                        && taxWithholdReportPeriod_TH.TaxWithholdFromDate <= _taxWithholdPeriodDate
                        && taxWithholdReportPeriod_TH.TaxWithholdToDate   >= _taxWithholdPeriodDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdReportPeriod_TH</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxWithholdPeriodRecId">
    /// The record id of withholding tax period.
    /// </param>
    /// <param name="_taxWithholdFromDate">
    /// The from date of withholding tax period.
    /// </param>
    /// <param name="_taxWithholdToDate">
    /// The to date of withholding tax period.
    /// </param>
    /// <returns>
    /// Returns true if record exists; otherwise, false.
    /// </returns>
    static boolean exist(TaxWithholdPeriodId_TH _taxWithholdPeriodRecId,
                         TaxWithholdPeriodDate_TH  _taxWithholdFromDate,
                         TaxWithholdPeriodDate_TH  _taxWithholdToDate)
    {
        return _taxWithholdPeriodRecId
            && _taxWithholdFromDate
            && _taxWithholdToDate
            && (select firstonly RecId from taxWithholdReportPeriod_TH
                    where taxWithholdReportPeriod_TH.TaxWithholdPeriodHead_TH == _taxWithholdPeriodRecId
                        && taxWithholdReportPeriod_TH.TaxWithholdFromDate     == _taxWithholdFromDate
                        && taxWithholdReportPeriod_TH.TaxWithholdToDate       == _taxWithholdToDate
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existIntervalInDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record in the <c>TaxWithholdReportPeriod_TH</c> table is in a specified date
    /// range and settlement period.
    /// </summary>
    /// <param name="_taxWithholdPeriodRecId">
    /// The ID of the settlement period record.
    /// </param>
    /// <param name="_taxWithholdFromDate">
    /// The start date of the search
    /// </param>
    /// <param name="_taxWithholdToDate">
    /// The end date of the search.
    /// </param>
    /// <returns>
    /// true if a record is found that meets search criteria; otherwise false.
    /// </returns>
    private static boolean existIntervalInDates(TaxWithholdPeriodId_TH _taxWithholdPeriodRecId,
                                        TaxWithholdPeriodDate_TH  _taxWithholdFromDate,
                                        TaxWithholdPeriodDate_TH  _taxWithholdToDate)
    {
        TaxWithholdReportPeriod_TH taxWithholdReportPeriod_TH;

        return _taxWithholdPeriodRecId
            && _taxWithholdFromDate
            && _taxWithholdToDate
            && (select firstonly RecId from taxWithholdReportPeriod_TH
                    where taxWithholdReportPeriod_TH.TaxWithholdPeriodHead_TH == _taxWithholdPeriodRecId
                        && taxWithholdReportPeriod_TH.TaxWithholdFromDate > _taxWithholdFromDate
                        && taxWithholdReportPeriod_TH.TaxWithholdToDate   < _taxWithholdToDate).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record in the <c>TaxWithholdReportPeriod_TH</c> table is in a specified date
    /// range and settlement period and is not the current record.
    /// </summary>
    /// <param name="_taxWithholdPeriodRecId">
    /// The ID of the settlement period record.
    /// </param>
    /// <param name="_taxWithholdFromDate">
    /// The start date of the search
    /// </param>
    /// <param name="_taxWithholdToDate">
    /// The end date of the search.
    /// </param>
    /// <param name="_recId">
    /// The ID of the current record that is not included in the search.
    /// </param>
    /// <returns>
    /// true if a record is found that meets search criteria; otherwise false.
    /// </returns>
    private static boolean existOther(TaxWithholdPeriodId_TH _taxWithholdPeriodRecId,
                              TaxWithholdPeriodDate_TH  _taxWithholdFromDate,
                              TaxWithholdPeriodDate_TH  _taxWithholdToDate,
                              recId                     _recId)
    {
        return _taxWithholdPeriodRecId
            && _taxWithholdFromDate
            && _taxWithholdToDate
            && _recId
            && (select firstonly RecId from taxWithholdReportPeriod_TH
                    where taxWithholdReportPeriod_TH.TaxWithholdPeriodHead_TH == _taxWithholdPeriodRecId
                        && taxWithholdReportPeriod_TH.TaxWithholdFromDate     == _taxWithholdFromDate
                        && taxWithholdReportPeriod_TH.TaxWithholdToDate       == _taxWithholdToDate
                        && taxWithholdReportPeriod_TH.RecId                   != _recId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWithholdReportPeriod_TH</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when you read the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxWithholdReportPeriod_TH</c> table.
    /// </returns>
    public static TaxWithholdReportPeriod_TH find(
        recId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdReportPeriod_TH taxWithholdReportPeriod_TH;

        taxWithholdReportPeriod_TH.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdReportPeriod_TH.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdReportPeriod_TH
            where
                taxWithholdReportPeriod_TH.RecId == _recId;

        return taxWithholdReportPeriod_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPeriodWithholdDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWithholdReportPeriod_TH</c> table.
    /// </summary>
    /// <param name="_taxWithholdPeriodRecId">
    /// The period record id of withholing tax is used to find record.
    /// </param>
    /// <param name="_taxWithholddate">
    /// The date of withholing tax is used to find record.
    /// </param>
    /// <returns>
    /// A record from the <c>TaxWithholdReportPeriod_TH</c> table.
    /// </returns>
    static TaxWithholdReportPeriod_TH findByPeriodWithholdDate(TaxWithholdPeriodId_TH  _taxWithholdPeriodRecId,
                                           TaxWithholdPeriodDate_TH _taxWithholddate)
    {
        TaxWithholdReportPeriod_TH     taxWithholdReportPeriod_TH;

        if (_taxWithholdPeriodRecId && _taxWithholddate)
        {
            select firstonly taxWithholdReportPeriod_TH
                where taxWithholdReportPeriod_TH.TaxWithholdPeriodHead_TH == _taxWithholdPeriodRecId
                    && taxWithholdReportPeriod_TH.TaxWithholdFromDate <=  _taxWithholddate
                    && taxWithholdReportPeriod_TH.TaxWithholdToDate   >=  _taxWithholddate;
        }
        return taxWithholdReportPeriod_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>TaxWithholdReportPeriod_TH</c> record by using the specified date and settlement period
    /// and that is not the current record.
    /// </summary>
    /// <param name="_taxWithholdPeriodId_TH">
    /// The ID of the settlement period record.
    /// </param>
    /// <param name="_taxWithholdDate">
    /// The date to use for the search.
    /// </param>
    /// <param name="_recId">
    /// The ID of the current record that will be excluded from the search.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxWithholdReportPeriod_TH</c> table that meets search criteria; otherwise, an
    /// empty <c>TaxWithholdReportPeriod_TH</c> buffer.
    /// </returns>
    private static TaxWithholdReportPeriod_TH findOther(TaxWithholdPeriodId_TH     _taxWithholdPeriodId_TH,
                                                TaxWithholdPeriodDate_TH _taxWithholdDate,
                                                recId                    _recId)

    {
        TaxWithholdReportPeriod_TH     taxWithholdReportPeriod_TH;

        if (_taxWithholdPeriodId_TH && _taxWithholdDate && _recId)
        {
            select firstonly taxWithholdReportPeriod_TH
                index hint TaxPeriodIdx
                where taxWithholdReportPeriod_TH.TaxWithholdPeriodHead_TH   ==  _taxWithholdPeriodId_TH
                    && taxWithholdReportPeriod_TH.TaxWithholdFromDate <=  _taxWithholdDate
                    && taxWithholdReportPeriod_TH.TaxWithholdToDate   >=  _taxWithholdDate
                    && taxWithholdReportPeriod_TH.RecId               !=  _recId;
        }

        return taxWithholdReportPeriod_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new record for <c>TaxWithholdReportPeriod_TH</c> table.
    /// </summary>
    /// <param name="_taxWithholdPeriodRecId">
    /// The period record id of withholding tax is used to find record.
    /// </param>
    static void  newPeriod(TaxWithholdPeriodId_TH _taxWithholdPeriodRecId)
    {
        TaxWithholdPeriodHead_TH    taxWithholdPeriodHead_TH;
        TaxWithholdReportPeriod_TH  taxWithholdReportPeriod_TH;
        TaxWithholdReportPeriod_TH  lastPeriod;
        Futures                     futures;

        select PeriodUnit, QtyUnit
            from taxWithholdPeriodHead_TH
            where taxWithholdPeriodHead_TH.RecId == _taxWithholdPeriodRecId;

        if (taxWithholdPeriodHead_TH.QtyUnit == 0)
        {
            throw error("@SYS56375");
        }

        select maxof(TaxWithholdToDate)
            from lastPeriod
            where lastPeriod.TaxWithholdPeriodHead_TH == _taxWithholdPeriodRecId;

        if (lastPeriod.TaxWithholdToDate)
        {
            taxWithholdReportPeriod_TH.TaxWithholdPeriodHead_TH   = _taxWithholdPeriodRecId;
            taxWithholdReportPeriod_TH.TaxWithholdFromDate = lastPeriod.TaxWithholdToDate + 1;
            futures = Futures::construct(taxWithholdReportPeriod_TH.TaxWithholdFromDate,
                                  taxWithholdPeriodHead_TH.QtyUnit,
                                  taxWithholdPeriodHead_TH.PeriodUnit);

            taxWithholdReportPeriod_TH.TaxWithholdToDate = futures.next() - 1;
            taxWithholdReportPeriod_TH.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS320027</DeveloperDocumentation>
	<FormRef>TaxWithholdPeriod_TH</FormRef>
	<Label>@SYS314141</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdPeriodHead_TH</TitleField1>
	<TitleField2>TaxWithholdFromDate</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxPeriodIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>TaxTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRepVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Corrections</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRepVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Corrections</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Corrections</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS314142</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxRepVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxRepVersion</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxWithholdFromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdFromDate_TH</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdPeriodHead_TH</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdPeriodId_TH</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxWithholdToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdToDate_TH</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxPeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdPeriodHead_TH</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdPeriodHead_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdPeriodHead_TH</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdPeriodHead_TH</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>TaxWithholdPeriodHead_TH_TaxWithholdReportPeriod_TH</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdPeriodHead_TH</Name>
					<Field>TaxWithholdPeriodHead_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>