<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAIndirectComponentTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAIndirectComponentTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
        public display ProjTurnover transTurnover()
    {
        return ProjTrans::PSANewProjEmplIndirecTrans(this).transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>componentTransExist</Name>
				<Source><![CDATA[
        public static boolean componentTransExist(PSAIndirectComponentId _sId)
    {
        return (select firstonly PSAIndirectComponentTrans where PSAIndirectComponentTrans.IndirectComponentId == _sId).recId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>componentTransExistGrp</Name>
				<Source><![CDATA[
        public static boolean componentTransExistGrp(PSAIndirectComponentGroupId _sId)
    {
        return (select firstonly PSAIndirectComponentTrans where PSAIndirectComponentTrans.IndirectComponentGroup == _sId).recId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static PSAIndirectComponentTrans find(RefRecId _recId,boolean _bForupdate = false)
    {
        PSAIndirectComponentTrans   tIndirectComponentTrans;

        tIndirectComponentTrans.selectForUpdate(_bForupdate);
        if (_recId)
        {
            select firstonly tIndirectComponentTrans where tIndirectComponentTrans.RecId == _recId;
        }

        return tIndirectComponentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransId</Name>
				<Source><![CDATA[
        public static PSAIndirectComponentTrans findByTransId(ProjTransIdBase           _sTransId,
                                                          PSAIndirectComponentType  _eIndirectComponentType = PSAIndirectComponentType::Cost,
                                                          boolean                   _bForupdate             = false)
    {
        PSAIndirectComponentTrans   tIndirectComponentTrans;

        tIndirectComponentTrans.selectForUpdate(_bForupdate);
        select firstonly tIndirectComponentTrans
                   where tIndirectComponentTrans.TransId                == _sTransId    &&
                         tIndirectComponentTrans.IndirectComponentType  == _eIndirectComponentType;

        return tIndirectComponentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCostAmount</Name>
				<Source><![CDATA[
        public static void insertCostAmount(ProjJournalTrans          _tJournalTrans,
                                        PSAIndirectComponentId    _sId,
                                        List                      _fundingSourceList,
                                        boolean                   _costUseOrig = false)
    {
        PSAIndirectComponentTrans       indirectComponentTrans;
        PSAIndirectComponentTrans       newIndirectComponentTrans;
        PSAIndirectCostCalculation      oCalculation;
        MapEnumerator                   fundingAllocationEnumerator;
        AmountCur                       amountCur;

        oCalculation = new PSAIndirectCostCalculation();

        indirectComponentTrans.ProjId                    = _tJournalTrans.ProjId;
        indirectComponentTrans.ActivityId                = _tJournalTrans.ActivityNumber;
        indirectComponentTrans.CategoryId                = PSAIndirectComponent::find(_sId).ComponentCategory;
        indirectComponentTrans.CurrencyId                = _tJournalTrans.CurrencyId;
        indirectComponentTrans.IndirectComponentId       = _sId;
        indirectComponentTrans.TransId                   = _tJournalTrans.TransId;
        indirectComponentTrans.IndirectComponentGroup    = _tJournalTrans.PSAIndirectComponentGroup;
        indirectComponentTrans.IndirectComponentType     = PSAIndirectComponentType::Cost;
        indirectComponentTrans.TransDate                 = _tJournalTrans.ProjTransDate;
        indirectComponentTrans.insert();

        newIndirectComponentTrans.data(indirectComponentTrans);

        if (!_costUseOrig)
        {
            amountCur = oCalculation.calculate(_tJournalTrans.CostPrice,
                                                _tJournalTrans.PSAIndirectComponentGroup,
                                                PSAIndirectComponentType::Cost,
                                                _sId,
                                                _tJournalTrans.ProjTransDate, //  Add trans date as a parameter to the search
                                                indirectComponentTrans.RecId, //  Add RecId as a parameter for logging
                                                _tJournalTrans.Qty);
        }
        else
        {
            ProjEmplTrans             projemplTrans;
            PSAIndirectComponentTrans origIndirectComponentTrans;

            boolean isAssociatedToMultipleFundingSourcesContract = ProjFundingSource::numberOfFundingSources(ProjTable::find(_tJournalTrans.ProjId).ProjInvoiceProjId) > 1;

            // Get the indirect cost if the funding source list having single funding source and contract having multiple funding sources.
            if (_fundingSourceList.elements() == 1
                && isAssociatedToMultipleFundingSourcesContract
                && ProjEmplTrans::find(_tJournalTrans.TransId).TransactionOrigin == ProjOrigin::Timesheet)
            {
                ListEnumerator fundingSourceListEnumeratorLoc = _fundingSourceList.getEnumerator();
                fundingSourceListEnumeratorLoc.moveNext();
                ProjSplitAllocation projSplitAllocationLoc = fundingSourceListEnumeratorLoc.current();
                ProjFundingSourceRefId projFundingSourceRefIdLoc = projSplitAllocationLoc.parmFundingSourceRefRecId();

                select sum(Amount) from origIndirectComponentTrans
                    exists join projemplTrans
                        where origIndirectComponentTrans.TransId == projemplTrans.TransIdRef &&
                            origIndirectComponentTrans.ProjFundingSource == projFundingSourceRefIdLoc &&
                            origIndirectComponentTrans.IndirectComponentId == _sId &&
                            origIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost &&
                            projemplTrans.TransId == _tJournalTrans.TransId &&
                            projemplTrans.PSAIndirectComponentGroup == _tJournalTrans.PSAIndirectComponentGroup;
            }
            else
            {
                select sum(Amount) from origIndirectComponentTrans
                    exists join projemplTrans
                        where origIndirectComponentTrans.TransId == projemplTrans.AdjRefTransId &&
                            origIndirectComponentTrans.IndirectComponentId == _sId &&
                            origIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost &&
                            projemplTrans.TransId == _tJournalTrans.TransId &&
                            projemplTrans.PSAIndirectComponentGroup == _tJournalTrans.PSAIndirectComponentGroup;
            }

            amountCur = -origIndirectComponentTrans.Amount;
        }

        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(_fundingSourceList,amountCur,_tJournalTrans.CurrencyId).getEnumerator();

        fundingAllocationEnumerator.moveNext();
        indirectComponentTrans.ProjFundingSource = fundingAllocationEnumerator.currentKey();
        indirectComponentTrans.Amount = fundingAllocationEnumerator.currentValue();
        indirectComponentTrans.update();

        while (fundingAllocationEnumerator.moveNext())
        {
            newIndirectComponentTrans.ProjFundingSource         = fundingAllocationEnumerator.currentKey();
            newIndirectComponentTrans.Amount                    = fundingAllocationEnumerator.currentValue();
            newIndirectComponentTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceAmount</Name>
				<Source><![CDATA[
    public static void insertInvoiceAmount(ProjJournalTrans         _tJournalTrans,
                                           PSAIndirectComponentId   _sId,
                                           List                     _fundingSourceList)
    {
        PSAIndirectComponentTrans::insertIndirectInvoiceAmount(_tJournalTrans, _sId, _fundingSourceList, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRevenueAmount</Name>
				<Source><![CDATA[
    public static void insertRevenueAmount(ProjJournalTrans         _tJournalTrans,
                                           PSAIndirectComponentId   _sId,
                                           List                     _fundingSourceList)
    {
        PSAIndirectComponentTrans::insertIndirectRevenueAmount(_tJournalTrans, _sId, _fundingSourceList, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIndirectInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and updates existing indirect component transaction for the Invoice revenue rate defined
    /// </summary>
    /// <param name = "_tJournalTrans">Project journal transaction for which indirect component transaction is created</param>
    /// <param name = "_sId"> The indirect component id</param>
    /// <param name = "_fundingSourceList">Funding source associated with the project contract to be used</param>
    /// <param name = "_salesUseOrig">Boolean value which indicates to use sales original</param>
    public static void insertIndirectInvoiceAmount(ProjJournalTrans _tJournalTrans,
                                                PSAIndirectComponentId _sId,
                                                List _fundingSourceList,
                                                boolean _salesUseOrig = false)
    {
        PSAIndirectComponentTrans       indirectComponentTrans;
        PSAIndirectComponentTrans       newIndirectComponentTrans;
        PSAIndirectCostCalculation      oCalculation;
        MapEnumerator                   fundingAllocationEnumerator;
        AmountCur                       amountCur;

        oCalculation      = new PSAIndirectCostCalculation();

        indirectComponentTrans.ProjId                    = _tJournalTrans.ProjId;
        indirectComponentTrans.ActivityId                = _tJournalTrans.ActivityNumber;
        indirectComponentTrans.CategoryId                = PSAIndirectComponent::find(_sId).ComponentCategory;
        indirectComponentTrans.CurrencyId                = _tJournalTrans.CurrencyId;
        indirectComponentTrans.IndirectComponentId       = _sId;
        indirectComponentTrans.TransId                   = _tJournalTrans.TransId;
        indirectComponentTrans.IndirectComponentGroup    = _tJournalTrans.psaIndirectComponentGroup;
        indirectComponentTrans.IndirectComponentType     = PSAIndirectComponentType::Invoice;
        indirectComponentTrans.TransDate                 = _tJournalTrans.ProjTransDate;
        indirectComponentTrans.insert();

        newIndirectComponentTrans.data(indirectComponentTrans);

        if (!_salesUseOrig)
        {
            amountCur = oCalculation.calculate(_tJournalTrans.SalesPrice,
                                              _tJournalTrans.psaIndirectComponentGroup,
                                              PSAIndirectComponentType::Invoice,
                                              _sId,
                                              _tJournalTrans.ProjTransDate, //  Add trans date as a parameter to the search
                                              indirectComponentTrans.RecId, //  Add RecId as a parameter for logging
                                              _tJournalTrans.Qty);

        }
        else
        {
            ProjEmplTrans             projemplTrans;
            PSAIndirectComponentTrans origIndirectComponentTrans;

            boolean isAssociatedToMultipleFundingSourcesContract = ProjFundingSource::numberOfFundingSources(ProjTable::find(_tJournalTrans.ProjId).ProjInvoiceProjId) > 1;

            // Get the indirect invoice if the funding source list having single funding source and contract having multiple funding sources.
            if (_fundingSourceList.elements() == 1
                && isAssociatedToMultipleFundingSourcesContract
                && ProjEmplTrans::find(_tJournalTrans.TransId).TransactionOrigin == ProjOrigin::Timesheet)
            {
                ListEnumerator fundingSourceListEnumeratorLoc = _fundingSourceList.getEnumerator();
                fundingSourceListEnumeratorLoc.moveNext();
                ProjSplitAllocation projSplitAllocationLoc = fundingSourceListEnumeratorLoc.current();
                ProjFundingSourceRefId projFundingSourceRefIdLoc = projSplitAllocationLoc.parmFundingSourceRefRecId();

                select sum(Amount) from origIndirectComponentTrans
                    exists join projemplTrans
                        where origIndirectComponentTrans.TransId == projemplTrans.TransIdRef &&
                            origIndirectComponentTrans.ProjFundingSource == projFundingSourceRefIdLoc &&
                            origIndirectComponentTrans.IndirectComponentId == _sId &&
                            origIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Invoice &&
                            projemplTrans.TransId == _tJournalTrans.TransId &&
                            projemplTrans.PSAIndirectComponentGroup == _tJournalTrans.PSAIndirectComponentGroup;
            }
            else
            {
                select sum(Amount) from origIndirectComponentTrans
                    exists join projemplTrans
                        where origIndirectComponentTrans.TransId == projemplTrans.AdjRefTransId &&
                            origIndirectComponentTrans.IndirectComponentId == _sId &&
                            origIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Invoice &&
                            projemplTrans.TransId == _tJournalTrans.TransId &&
                            projemplTrans.PSAIndirectComponentGroup == _tJournalTrans.PSAIndirectComponentGroup;
            }

            amountCur = -origIndirectComponentTrans.Amount;
        }

        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(_fundingSourceList,amountCur,_tJournalTrans.CurrencyId).getEnumerator();
        fundingAllocationEnumerator.moveNext();
        indirectComponentTrans.ProjFundingSource = fundingAllocationEnumerator.currentKey();
        indirectComponentTrans.Amount = fundingAllocationEnumerator.currentValue();
        indirectComponentTrans.update();

        while (fundingAllocationEnumerator.moveNext())
        {
            newIndirectComponentTrans.ProjFundingSource         = fundingAllocationEnumerator.currentKey();
            newIndirectComponentTrans.Amount                    = fundingAllocationEnumerator.currentValue();
            newIndirectComponentTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIndirectRevenueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and updates existing indirect component transaction for the Revenue revenue rate defined
    /// </summary>
    /// <param name = "_tJournalTrans">Project journal transaction for which indirect component transaction is created</param>
    /// <param name = "_sId"> The indirect component id</param>
    /// <param name = "_fundingSourceList">Funding source associated with the project contract to be used</param>
    /// <param name = "_salesUseOrig">Boolean value which indicates to use sales original</param>
    public static void insertIndirectRevenueAmount(ProjJournalTrans _tJournalTrans,
                                                PSAIndirectComponentId _sId,
                                                List _fundingSourceList,
                                                boolean _salesUseOrig = false)
    {
        PSAIndirectComponentTrans       indirectComponentTrans;
        PSAIndirectComponentTrans       newIndirectComponentTrans;
        PSAIndirectCostCalculation      oCalculation;
        MapEnumerator                   fundingAllocationEnumerator;
        AmountCur                       amountCur;

        oCalculation = new PSAIndirectCostCalculation();

        indirectComponentTrans.ProjId                    = _tJournalTrans.ProjId;
        indirectComponentTrans.ActivityId                = _tJournalTrans.ActivityNumber;
        indirectComponentTrans.CategoryId                = PSAIndirectComponent::find(_sId).ComponentCategory;
        indirectComponentTrans.CurrencyId                = _tJournalTrans.CurrencyId;
        indirectComponentTrans.IndirectComponentId       = _sId;
        indirectComponentTrans.TransId                   = _tJournalTrans.TransId;
        indirectComponentTrans.IndirectComponentGroup    = _tJournalTrans.PSAIndirectComponentGroup;
        indirectComponentTrans.IndirectComponentType     = PSAIndirectComponentType::Revenue;
        indirectComponentTrans.TransDate                 = _tJournalTrans.ProjTransDate;
        indirectComponentTrans.insert();

        newIndirectComponentTrans.data(indirectComponentTrans);

        if (!_salesUseOrig)
        {
            amountCur = oCalculation.calculate(_tJournalTrans.SalesPrice,
                                              _tJournalTrans.PSAIndirectComponentGroup,
                                              PSAIndirectComponentType::Revenue,
                                              _sId,
                                              _tJournalTrans.ProjTransDate, //  Add trans date as a parameter to the search
                                              indirectComponentTrans.RecId, //  Add RecId as a parameter for logging
                                              _tJournalTrans.Qty);

        }
        else
        {
            ProjEmplTrans             projemplTrans;
            PSAIndirectComponentTrans origIndirectComponentTrans;

            boolean isAssociatedToMultipleFundingSourcesContract = ProjFundingSource::numberOfFundingSources(ProjTable::find(_tJournalTrans.ProjId).ProjInvoiceProjId) > 1;
   
            // Get the indirect revenue if the funding source list having single funding source and contract having multiple funding sources.
            if (_fundingSourceList.elements() == 1
                && isAssociatedToMultipleFundingSourcesContract
                && ProjEmplTrans::find(_tJournalTrans.TransId).TransactionOrigin == ProjOrigin::Timesheet)
            {
                ListEnumerator fundingSourceListEnumeratorLoc = _fundingSourceList.getEnumerator();
                fundingSourceListEnumeratorLoc.moveNext();
                ProjSplitAllocation projSplitAllocationLoc = fundingSourceListEnumeratorLoc.current();
                ProjFundingSourceRefId projFundingSourceRefIdLoc = projSplitAllocationLoc.parmFundingSourceRefRecId();

                select sum(Amount) from origIndirectComponentTrans
                    exists join projemplTrans
                        where origIndirectComponentTrans.TransId == projemplTrans.TransIdRef &&
                            origIndirectComponentTrans.ProjFundingSource == projFundingSourceRefIdLoc &&
                            origIndirectComponentTrans.IndirectComponentId == _sId &&
                            origIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Revenue &&
                            projemplTrans.TransId == _tJournalTrans.TransId &&
                            projemplTrans.PSAIndirectComponentGroup == _tJournalTrans.PSAIndirectComponentGroup;
            }
            else
            {
                select sum(Amount) from origIndirectComponentTrans
                    exists join projemplTrans
                        where origIndirectComponentTrans.TransId == projemplTrans.AdjRefTransId &&
                            origIndirectComponentTrans.IndirectComponentId == _sId &&
                            origIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Revenue &&
                            projemplTrans.TransId == _tJournalTrans.TransId &&
                            projemplTrans.PSAIndirectComponentGroup == _tJournalTrans.PSAIndirectComponentGroup;
            }

            amountCur = -origIndirectComponentTrans.Amount;
        }

        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(_fundingSourceList,amountCur,_tJournalTrans.CurrencyId).getEnumerator();
        fundingAllocationEnumerator.moveNext();
        indirectComponentTrans.ProjFundingSource = fundingAllocationEnumerator.currentKey();
        indirectComponentTrans.Amount = fundingAllocationEnumerator.currentValue();
        indirectComponentTrans.update();

        while (fundingAllocationEnumerator.moveNext())
        {
            newIndirectComponentTrans.ProjFundingSource = fundingAllocationEnumerator.currentKey();
            newIndirectComponentTrans.Amount = fundingAllocationEnumerator.currentValue();
            newIndirectComponentTrans.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@PSA10802</DeveloperDocumentation>
	<FormRef>PSAIndirectComponentTrans</FormRef>
	<Label>@PSA2423</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TransId</TitleField1>
	<TitleField2>IndirectComponentId</TitleField2>
	<Modules>ProjectManagementAndAccounting</Modules>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndirectComponentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndirectComponentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndirectComponentGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS6928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Date</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IndirectComponentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndirectComponentGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndirectComponentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjectInfo</Name>
			<Label>@PSA3307</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Amount</ExtendedDataType>
			<Label>@SYS41302</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IndirectComponentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAIndirectComponentGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IndirectComponentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAIndirectComponentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IndirectComponentType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PSAIndirectComponentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>IndirectComponentTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>IndirectComponentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IndirectComponentType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_PSAIndirectComponentTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjActivity_PSAIndirectComponentTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityId</Name>
					<Field>ActivityId</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjEmplTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjEmplTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjEmplTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PSAIndirectComponentTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransId</Name>
					<Field>TransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAIndirectComponent</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PSAIndirectComponent</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IndirectComponentId</Name>
					<SourceEDT>PSAIndirectComponentId</SourceEDT>
					<Field>IndirectComponentId</Field>
					<RelatedField>ComponentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ComponentIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>