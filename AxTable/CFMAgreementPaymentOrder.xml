<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAgreementPaymentOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CFMAgreementPaymentOrder extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseCodeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return origin payment code's name from requisite company.
    /// </summary>
    /// <returns>
    /// Return origin payment code's name from requisite company.
    /// </returns>
    public display Name baseCodeName()
    {
        changeCompany(this.RequisitesDataAreaId)
        {
            return PaymentOrderPaymBaseCodeTable_RU::find(this.BaseCode).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetReceiptClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return budget revenue class's name from requisite company.
    /// </summary>
    /// <returns>
    /// Return budget revenue class's name from requisite company.
    /// </returns>
    public display Name budgetReceiptClassName()
    {
        changeCompany(this.RequisitesDataAreaId)
        {
            return PaymentOrderBudgetReceiptClassTable_RU::find(this.BudgetReceiptClassCode).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetReceiptJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open budget revenue class form from central payment company.
    /// </summary>
    public void budgetReceiptJumpRef()
    {
        changecompany(this.getCentralizedPaymentCompany())
        {
            PaymentOrderBudgetReceiptClassTable_RU budgetTable = PaymentOrderBudgetReceiptClassTable_RU::find(this.BudgetReceiptClassCode);
            MenuFunction budgetCode = new MenuFunction(menuitemDisplayStr(PaymentOrderBudgetReceiptClassTable_RU), MenuItemType::Display);
            Args args = new Args(budgetCode.object());

            if (budgetTable)
            {
                args.record(budgetTable);
            }

            budgetCode.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetReceiptLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// lookup budget revenue class values form from central payment company.
    /// </summary>
    public void budgetReceiptLookup(FormStringControl _budgetReceiptCtrl)
    {
        Query query = new Query();

        query.allowCrossCompany(true);
        query.addCompanyRange(this.getCentralizedPaymentCompany());

        query.addDataSource(tableNum(PaymentOrderBudgetReceiptClassTable_RU));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PaymentOrderBudgetReceiptClassTable_RU), _budgetReceiptCtrl);
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(PaymentOrderBudgetReceiptClassTable_RU, PaymentOrderBudgetReceiptClassCode));
        sysTableLookup.addLookupfield(fieldNum(PaymentOrderBudgetReceiptClassTable_RU, Name));
        sysTableLookup.addLookupfield(fieldNum(PaymentOrderBudgetReceiptClassTable_RU, SSGS));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyPeriodCode</Name>
				<Source><![CDATA[
    private boolean emptyPeriodCode()
    {
        return this.PeriodCode == PaymentOrderPeriodCode_RU::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyPeriodNumber</Name>
				<Source><![CDATA[
    private boolean emptyPeriodNumber()
    {
        if (this.PeriodCode == PaymentOrderPeriodCode_RU::AnnualPayment)
            return this.PeriodNumber < 0;

        return this.PeriodNumber <= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyPeriodYear</Name>
				<Source><![CDATA[
    private boolean emptyPeriodYear()
    {
        return this.Year == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyTaxPeriodDate</Name>
				<Source><![CDATA[
    private boolean emptyTaxPeriodDate()
    {
        return this.TaxPeriodDate == dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCentralizedPaymentCompany</Name>
				<Source><![CDATA[
    private SelectableDataArea getCentralizedPaymentCompany()
    {
        CompanyInfo companyInfo = CompanyInfo::findDataArea(curext());

        Array organizationHierarchyRecIds = OMMultipleHierarchy::FindOrganizationHierarchies(CompanyInfo::findDataArea(curext()).RecId, HierarchyPurpose::CentralizedPayments, DateTimeUtil::getSystemDateTime(), DateTimeUtil::maxValue());

        if (organizationHierarchyRecIds.lastIndex())
        {
            RefRecId omHierarchyTypeRecId = organizationHierarchyRecIds.value(1);

            if (omHierarchyTypeRecId)
            {
                OMMultipleHierarchy multiplyHierarchy = OMMultipleHierarchy::construct(OMHierarchyType::find(omHierarchyTypeRecId).Name);

                OMOrganizationHierarchy orgHierarchy = new OMOrganizationHierarchy(multiplyHierarchy);
                OMOrganizationNode rootNode = orgHierarchy.rootNode();

                if (rootNode.isLegalEntity())
                {
                    companyInfo = CompanyInfo::findRecId(rootNode.parmID());
                }
            }
        }

        return companyInfo.DataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.RequisitesDataAreaId = this.getCentralizedPaymentCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CFMAgreementPaymentOrder, TaxPeriodDate):
                this.paymOrderTransTaxPeriodDateModified();
                break;

            case fieldNum(CFMAgreementPaymentOrder, PeriodCode):
                this.paymOrderTransPeriodCodeModified();
                break;

            case fieldNum(CFMAgreementPaymentOrder, PeriodNumber):
                this.paymOrderTransPeriodCodeModified();
                break;

            case fieldNum(CFMAgreementPaymentOrder, Year):
                this.paymOrderTransPeriodCodeModified();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originPaymentJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open origin payment code's form from central payment company.
    /// </summary>
    public void originPaymentJumpRef()
    {
        changecompany(this.getCentralizedPaymentCompany())
        {
            PaymentOrderPaymBaseCodeTable_RU baseCodeTable = PaymentOrderPaymBaseCodeTable_RU::find(this.BaseCode);
            MenuFunction baseCode = new MenuFunction(menuitemDisplayStr(PaymentOrderPaymBaseCodeTable_RU), MenuItemType::Display);
            Args args = new Args(baseCode.object());

            if (baseCodeTable)
            {
                args.record(baseCodeTable);
            }

            baseCode.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originPaymentLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup origin payment code values from central payment company.
    /// </summary>
    public void originPaymentLookup(FormStringControl _originPaymentCtrl)
    {
        Query query = new Query();

        query.allowCrossCompany(true);
        query.addCompanyRange(this.getCentralizedPaymentCompany());

        query.addDataSource(tableNum(PaymentOrderPaymBaseCodeTable_RU));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PaymentOrderPaymBaseCodeTable_RU), _originPaymentCtrl);
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(PaymentOrderPaymBaseCodeTable_RU, PaymentOrderPaymBaseCode));
        sysTableLookup.addLookupfield(fieldNum(PaymentOrderPaymBaseCodeTable_RU, Name));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentTypeJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open payment order type form from central payment company.
    /// </summary>
    public void paymentTypeJumpRef()
    {
        changecompany(this.getCentralizedPaymentCompany())
        {
            PaymentOrderTypeTable_RU typeCodeTable = PaymentOrderTypeTable_RU::find(this.TypeCode);
            MenuFunction typeCode = new MenuFunction(menuitemDisplayStr(PaymentOrderTypeTable_RU), MenuItemType::Display);
            Args args = new Args(typeCode.object());

            if (typeCodeTable)
            {
                args.record(typeCodeTable);
            }

            typeCode.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentTypeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup payment order type values from central payment company.
    /// </summary>
    public void paymentTypeLookup(FormStringControl _paymentTypeCtrl)
    {
        Query query = new Query();

        query.allowCrossCompany(true);
        query.addCompanyRange(this.getCentralizedPaymentCompany());

        query.addDataSource(tableNum(PaymentOrderTypeTable_RU));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PaymentOrderTypeTable_RU), _paymentTypeCtrl);
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(PaymentOrderTypeTable_RU, PaymentOrderPaymTypeCode));
        sysTableLookup.addLookupfield(fieldNum(PaymentOrderTypeTable_RU, Name));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderTransPeriodCodeModified</Name>
				<Source><![CDATA[
    private void paymOrderTransPeriodCodeModified()
    {
        if (!this.emptyPeriodCode() ||
            !this.emptyPeriodNumber() ||
            !this.emptyPeriodYear())
        {
            this.TaxPeriodDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymOrderTransTaxPeriodDateModified</Name>
				<Source><![CDATA[
    private void paymOrderTransTaxPeriodDateModified()
    {
        if (!this.emptyTaxPeriodDate())
        {
            this.PeriodCode = PaymentOrderPeriodCode_RU::None;
            this.PeriodNumber = 0;
            this.Year = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusCodeJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open payment order status form from central payment company.
    /// </summary>
    public void statusCodeJumpRef()
    {
        changecompany(this.getCentralizedPaymentCompany())
        {
            PaymentOrderStatusTable_RU statusTable = PaymentOrderStatusTable_RU::find(this.StatusCode);
            MenuFunction statusCode = new MenuFunction(menuitemDisplayStr(PaymentOrderStatusTable_RU), MenuItemType::Display);
            Args args = new Args(statusCode.object());

            if (statusTable)
            {
                args.record(statusTable);
            }

            statusCode.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusCodeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup payment order status values from central payment company.
    /// </summary>
    public void statusCodeLookup(FormStringControl _statusCodeCtrl)
    {
        Query query = new Query();

        query.allowCrossCompany(true);
        query.addCompanyRange(this.getCentralizedPaymentCompany());

        query.addDataSource(tableNum(PaymentOrderStatusTable_RU));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PaymentOrderStatusTable_RU), _statusCodeCtrl);
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(PaymentOrderStatusTable_RU, PaymentOrderStatusCode));
        sysTableLookup.addLookupfield(fieldNum(PaymentOrderStatusTable_RU, Name));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return payment order status name from requisite company.
    /// </summary>
    /// <returns>
    /// Return payment order status name from requisite company.
    /// </returns>
    public display Name statusName()
    {
        changeCompany(this.RequisitesDataAreaId)
        {
            return PaymentOrderStatusTable_RU::find(this.StatusCode).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return payment order type name from requisite company.
    /// </summary>
    /// <returns>
    /// Return payment order type name from requisite company.
    /// </returns>
    public display Name typeName()
    {
        changeCompany(this.RequisitesDataAreaId)
        {
            return PaymentOrderTypeTable_RU::find(this.TypeCode).Name;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        if (this.StatusCode && ! this.BudgetReceiptClassCode)
        {
            ret = checkFailed(strfmt("@GLS102641", fieldpname(CFMAgreementPaymentOrder, BudgetReceiptClassCode)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByAgreement</Name>
				<Source><![CDATA[
    public static boolean existByAgreement(RefRecId _agreementRecId, SalesPurch _accountType)
    {
        CFMAgreementPaymentOrder agreementPaymentOrder;

        if (_agreementRecId)
        {
            select firstOnly RecId from agreementPaymentOrder 
                where agreementPaymentOrder.AgreementRefRecId == _agreementRecId &&
                      agreementPaymentOrder.AgreementType == _accountType;
        }

        return agreementPaymentOrder.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgreement</Name>
				<Source><![CDATA[
    public static CFMAgreementPaymentOrder findByAgreement(RefRecId _agreementRecId, SalesPurch _accountType, boolean _forUpdate = false)
    {
        CFMAgreementPaymentOrder agreementPaymentOrder;

        if (_agreementRecId)
        {
            agreementPaymentOrder.selectForUpdate(_forUpdate);

            select firstOnly agreementPaymentOrder 
                where agreementPaymentOrder.AgreementRefRecId == _agreementRecId &&
                      agreementPaymentOrder.AgreementType == _accountType;
        }

        return agreementPaymentOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static CFMAgreementPaymentOrder exist(RefRecId _refRecId)
    {
        CFMAgreementPaymentOrder agreementPaymentOrder;

        if (_refRecId)
        {
            select firstOnly RecId from agreementPaymentOrder
                where agreementPaymentOrder.RecId == _refRecId;
        }

        return agreementPaymentOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CFMAgreementPaymentOrder find(RefRecId _refRecId, boolean _forUpdate = false)
    {
        CFMAgreementPaymentOrder agreementPaymentOrder;

        if (_refRecId)
        {
            agreementPaymentOrder.selectForUpdate(_forUpdate);

            select firstOnly agreementPaymentOrder
                where agreementPaymentOrder.RecId == _refRecId;
        }

        return agreementPaymentOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMethodOfPaymentRu</Name>
				<Source><![CDATA[
	/// <summary>
    /// Check if method of payment  is intended for Russia for source record.
    /// </summary>
    /// <param name = "_sourceRecord">Source record.</param>
    /// <param name = "_paymMode">Method of payment.</param>
    /// <returns>true if method of payment is intended for Russia; false if otherwise.</returns>
    public static boolean isMethodOfPaymentRu(Common _sourceRecord, PaymMode _paymMode)
    {
        boolean show;

        if (_paymMode)
        {
            CustVendPaymModeTable custVendPaymModeTable = CustVendPaymModeTable::findCommon(_sourceRecord);

            if (custVendPaymModeTable)
            {
                show = custVendPaymModeTable.ClassId == classnum(CustOutPaym_MST_RU) || custVendPaymModeTable.ClassId == classnum(VendOutPaym_MST_RU);
            }
        }

        return show;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CFMCashflowManagement</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@CashFlowManagement:AgrPaymentOrderTableContainsPOReq</DeveloperDocumentation>
	<FormRef>CFMAgreementPaymentOrder</FormRef>
	<Label>@CashFlowManagement:PaymentOrderRequisites</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>OrderOfPayment</TitleField1>
	<TitleField2>AgreementRefRecId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AgreementIdx</ClusteredIndex>
	<Modules>RCashFlowManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderOfPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintKPP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetReceiptClassCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BaseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>year</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequisitesDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BudgetClassification</Name>
			<Label>Budget classification</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetReceiptClassCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DataAreaId</Name>
			<Label>Legal entities</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RequisitesDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Document</Name>
			<Label>Document</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OriginPayment</Name>
			<Label>Origin payment</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BaseCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentOrder</Name>
			<Label>Payment order</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderOfPayment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintKPP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentType</Name>
			<Label>Payment type</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UIN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PeriodCode</Name>
			<Label>Period code</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PeriodNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>year</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PeriodDate</Name>
			<Label>Period date</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurposeText</Name>
			<Label>Purpose text</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Recipient</Name>
			<Label>Recipient</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecipientRCOAD</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Source</Name>
			<Label>Source</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>Status</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StatusCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AgreementRefRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@CashFlowManagement:SourceOfPurchSaleOrderRequisites</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AgreementType</Name>
			<HelpText>@SYS92819</HelpText>
			<Mandatory>Yes</Mandatory>
			<EnumType>SalesPurch</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankPurposeText</Name>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BaseCode</Name>
			<ExtendedDataType>PaymentOrderPaymBaseCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetReceiptClassCode</Name>
			<ExtendedDataType>PaymentOrderBudgetReceiptClassCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocDate</Name>
			<ExtendedDataType>PaymentOrderDocDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocNum</Name>
			<ExtendedDataType>PaymentOrderPaymDocNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderOfPayment</Name>
			<ExtendedDataType>BankOrderOfPayment_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PeriodCode</Name>
			<EnumType>PaymentOrderPeriodCode_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PeriodNumber</Name>
			<ExtendedDataType>PaymentOrderPeriodNumber_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintKPP</Name>
			<HelpText>@GLS102966</HelpText>
			<Label>@GLS102965</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RecipientRCOAD</Name>
			<HelpText>@GLS102616</HelpText>
			<Label>@GLS107033</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequisitesDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>SelectableDataArea</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatusCode</Name>
			<ExtendedDataType>PaymentOrderStatusCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxPeriodDate</Name>
			<ExtendedDataType>PaymentOrderTaxPeriodDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TypeCode</Name>
			<ExtendedDataType>PaymentOrderPaymTypeCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UIN</Name>
			<ExtendedDataType>UIN_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>year</Name>
			<ExtendedDataType>Yr</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AgreementIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AgreementType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>PaymentOrderBudgetReceiptClassTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentOrderBudgetReceiptClassTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequisitesDataAreaId</Name>
					<Field>RequisitesDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetReceiptClassCode</Name>
					<Field>BudgetReceiptClassCode</Field>
					<RelatedField>PaymentOrderBudgetReceiptClassCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentOrderPaymBaseCodeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentOrderPaymBaseCodeTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequisitesDataAreaId</Name>
					<Field>RequisitesDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BaseCode</Name>
					<Field>BaseCode</Field>
					<RelatedField>PaymentOrderPaymBaseCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentOrderStatusTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentOrderStatusTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequisitesDataAreaId</Name>
					<Field>RequisitesDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatusCode</Name>
					<Field>StatusCode</Field>
					<RelatedField>PaymentOrderStatusCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentOrderTypeTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymentOrderTypeTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RequisitesDataAreaId</Name>
					<Field>RequisitesDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TypeCode</Name>
					<Field>TypeCode</Field>
					<RelatedField>PaymentOrderPaymTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AgreementType</Name>
					<Field>AgreementType</Field>
					<ValueStr>SalesPurch::Purch</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementRefRecId</Name>
					<Field>AgreementRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesAgreementHeader</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AgreementType</Name>
					<Field>AgreementType</Field>
					<ValueStr>SalesPurch::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AgreementRefRecId</Name>
					<Field>AgreementRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>