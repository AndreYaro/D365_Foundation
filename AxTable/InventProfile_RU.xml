<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProfile_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventProfile_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        InventProfileRelation_RU  inventProfileRelation;
        ttsbegin;

        super();

        delete_from inventProfileRelation
            where inventProfileRelation.InventProfileId        == this.InventProfileId
               || inventProfileRelation.InventProfileIdRelated == this.InventProfileId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory profile has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the inventory profile has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    public boolean hasOpenInventSumQuantity()
    {
        InventSum   inventSum;
        InventDim   inventDim;

        select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventProfileId_RU  == this.InventProfileId
        join TableId from inventSum
            where inventSum.InventDimId         == inventDim.InventDimId    &&
                  inventSum.ClosedQty           == NoYes::No;

        return inventDim.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.SelectionSkip = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        InventProfile_RU   inventProfileLast;
        ttsbegin;

        select firstonly forupdate inventProfileLast
            order by SelectionPriority desc;
        this.SelectionPriority = inventProfileLast.SelectionPriority + 1.0;

        this.setInventOwner();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventOwner</Name>
				<Source><![CDATA[
    void setInventOwner()
    {
        this.InventOwnerIdCheckSalesOrder   = NoYes::No;
        this.InventOwnerIdSplitSalesInvoice = NoYes::No;

        switch (this.InventProfileType)
        {
            case InventProfileType_RU::CommissionAgent:
                this.InventOwnerIdInit  = NoYes::Yes;
                this.LockCostAdjustment = NoYes::Yes;
                this.LockMarkupCustVend = NoYes::Yes;
                this.InventOwnerIdCheckPurchOrder = NoYes::Yes;
                break;
            case InventProfileType_RU::CommissionPrincipalAgent:
                this.InventOwnerIdInit  = NoYes::Yes;
                this.LockCostAdjustment = NoYes::Yes;
                this.LockMarkupCustVend = NoYes::Yes;
                this.InventOwnerIdSplitSalesInvoice = NoYes::Yes;
                this.InventOwnerIdCheckPurchOrder   = NoYes::Yes;
                break;
            case InventProfileType_RU::Bailee:
                this.InventOwnerIdInit  = NoYes::Yes;
                this.LockCostAdjustment = NoYes::Yes;
                this.LockMarkupCustVend = NoYes::Yes;
                this.InventOwnerIdCheckSalesOrder = NoYes::Yes;
                this.InventOwnerIdCheckPurchOrder = NoYes::Yes;
                break;
            case InventProfileType_RU::General :
                this.InventOwnerIdInit  = NoYes::No;
                this.LockCostAdjustment = NoYes::No;
                this.LockMarkupCustVend = NoYes::No;
                this.InventOwnerIdSplitSalesInvoice = NoYes::No;
                this.InventOwnerIdCheckPurchOrder   = NoYes::No;
                break;
        }

        if (this.StockInTransit == StockInTransit_RU::BoughtInTransit)
        {
            this.InventOwnerIdInit = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitDocumentByInventOwnerId</Name>
				<Source><![CDATA[
    NoYes splitDocumentByInventOwnerId(DocumentStatus _documentStatus)
    {
        if (_documentStatus == DocumentStatus::Invoice ||
            _documentStatus == DocumentStatus::Facture_RU)
        {
            return this.InventOwnerIdSplitSalesInvoice;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxUpdateIncoming</Name>
				<Source><![CDATA[
    display TaxUpdateIncoming_RU taxUpdateIncoming()
    {
        switch (this.InventProfileType)
        {
            case InventProfileType_RU::Bailee:
                return TaxUpdateMode_RU::NoCalc;
            case InventProfileType_RU::CommissionPrincipalAgent:
            case InventProfileType_RU::CommissionAgent:
                return TaxUpdateMode_RU::NoPost;
            default:
                break;
        }
        return TaxUpdateMode_RU::Standard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxUpdateOutgoing</Name>
				<Source><![CDATA[
    display TaxUpdateOutgoing_RU taxUpdateOutgoing()
    {
        switch (this.InventProfileType)
        {
            case InventProfileType_RU::Bailee:
            case InventProfileType_RU::CommissionPrincipalAgent:
                return TaxUpdateMode_RU::NoCalc;
            case InventProfileType_RU::CommissionAgent:
                return TaxUpdateMode_RU::NoPost;
            default:
                break;
        }
        return TaxUpdateMode_RU::Standard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ok = super();
        if (this.hasOpenInventSumQuantity())
        {
            ok = checkFailed("@GLS113754");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.InventProfileType == InventProfileType_RU::NotSpecified)
            {
                ret = checkFailed(strFmt("@SYS84753", fieldId2pname(this.TableId, fieldNum(InventProfile_RU, InventProfileType))));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(InventProfileId_RU _inventProfileId)
    {
        if (_inventProfileId && ! InventProfile_RU::exist(_inventProfileId))
        {
            return checkFailed(strFmt(InventProfile_RU::txtNotExist(), _inventProfileId));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGITProfileType</Name>
				<Source><![CDATA[
    static boolean checkGITProfileType(InventProfileType_RU _profileType)
    {
        boolean   ret = true;
        container incompatibleTypes = [ InventProfileType_RU::CommissionAgent,
                                        InventProfileType_RU::CommissionPrincipalAgent,
                                        InventProfileType_RU::Bailee ];

        if (conFind(incompatibleTypes, _profileType) > 0)
        {
            ret = checkFailed(strFmt("@GLS114807", _profileType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventProfileId_RU _inventProfileId)
    {
        return _inventProfileId
            && (select inventProfile_RU
                    where inventProfile_RU.InventProfileId == _inventProfileId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static InventProfile_RU find(InventProfileId_RU _inventProfileId, boolean _forUpdate = false)
    {
        InventProfile_RU   inventProfile;
        inventProfile.selectForUpdate(_forUpdate);

        if (_inventProfileId)
        {
            select firstonly inventProfile
                where inventProfile.InventProfileId == _inventProfileId;
        }
        return inventProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static InventProfile_RU findRecId(RecId _recId, boolean _forUpdate = false)
    {
        InventProfile_RU inventProfile;
        inventProfile.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly inventProfile
                where inventProfile.RecId == _recId;
        }
        return inventProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventProfileId</Name>
				<Source><![CDATA[
    static void lookupInventProfileId(FormStringControl _formStringControl, InventProfileType_RU _inventProfileType)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(InventProfile_RU), _formStringControl);
        Query                   query           = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(InventProfile_RU));

        sysTableLookup.addLookupfield(fieldNum(InventProfile_RU, InventProfileId));
        sysTableLookup.addLookupfield(fieldNum(InventProfile_RU, InventProfileName));
        if (_inventProfileType != InventProfileType_RU::NotSpecified)
        {
            qbds.addRange(fieldNum(InventProfile_RU, InventProfileType)).value(queryValue(_inventProfileType));
        }
        else
        {
            sysTableLookup.addLookupfield(fieldNum(InventProfile_RU, InventProfileType));
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeInventProfileCostAdjAllowed</Name>
				<Source><![CDATA[
    static Range rangeInventProfileCostAdjAllowed()
    {
        InventProfile_RU    inventProfile;
        Range               queryRange = SysQuery::valueEmptyString();

        while select InventProfileId from inventProfile
            where inventProfile.LockCostAdjustment == NoYes::No
        {
            queryRange = queryRangeConcat(queryRange, inventProfile.InventProfileId);
        }

        return queryRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@GLS113770";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventTrackingGTDProfileOwner</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS113761</DeveloperDocumentation>
	<FormRef>InventProfile_RU</FormRef>
	<Label>@GLS113761</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InventProfileId</TitleField1>
	<TitleField2>InventProfileName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>InventProfileIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>InventProfileIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventPosting</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventPosting</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventProfileCustVendLedger_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventProfileCustVendLedger_RU</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>InventProfileRelation_RU</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventProfileRelation_RU</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventOwner</Name>
			<Label>@GLS115599</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventOwnerIdInit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerIdSplitSalesInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerIdCheckPurchOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventOwnerIdCheckSalesOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectionSkip</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StockInTransit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AlcoholActivityType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfileName</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Locking</Name>
			<Label>@SYS50247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LockCostAdjustment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LockMarkupCustVend</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Selection</Name>
			<Label>@GLS113758</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SelectionPriority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectionSkip</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax</Name>
			<Label>@GLS107809</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>taxUpdateIncoming</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxUpdateOutgoing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AlcoholActivityType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AlcoholActivityType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventOwnerIdCheckPurchOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115587</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventOwnerIdCheckSalesOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115585</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventOwnerIdInit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS115590</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventOwnerIdSplitSalesInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115575</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LockCostAdjustment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115595</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LockMarkupCustVend</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS115593</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SelectionPriority</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileSelectionPriority_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelectionSkip</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS113753</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StockInTransit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>StockInTransit_RU</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventProfileIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventProfileId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventProfilePriorityIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>SelectionPriority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>