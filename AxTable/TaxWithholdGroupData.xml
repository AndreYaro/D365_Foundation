<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdGroupData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdGroupData extends common
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>taxWithholdGroupName</Name>
				<Source><![CDATA[
    display Description taxWithholdGroupName()
    {
        return TaxWithholdGroupHeading::find(this.TaxWithholdGroup).TaxWithholdGroupName ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        ;

        ret = super();

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters()
            &&TaxWithholdDesignerTable_IN::exist(this.TaxWithholdGroup, this.TaxWithholdCode))
        {
            ret = ret && checkFailed(strfmt("@GLS5291", "@SYS67084"));
        }
        // </GIN>
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean                 ret;
        // <GJP>
        TaxWithholdGroupData    taxWithholdGroupData;
        TaxWithholdTable        taxWithholdTableThis;
        TaxWithholdTable        taxWithholdTableOthers;
        // </GJP>

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(TaxWithholdGroupData, TaxWithholdCode):
                // <GIN>
                if (TaxWithholdParameters_IN::checkTaxParameters() && this.TaxWithholdCode)
                {
                    if (TaxWithholdGroupHeading::find(this.TaxWithholdGroup).TaxType_IN != TaxWithholdTable::find(this.TaxWithholdCode).TaxType_IN)
                    {
                        ret = ret && checkFailed(strfmt("@GLS5458", this.TaxWithholdCode, TaxWithholdGroupHeading::find(this.TaxWithholdGroup).TaxType_IN));
                    }
                }
                // </GIN>

                // <GJP>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                    && this.TaxWithholdCode
                    && ret )
                {
                    select firstonly RecId from taxWithholdTableThis
                        where taxWithholdTableThis.TaxWithholdCode == this.TaxWithholdCode
                        exists join RecId from taxWithholdGroupData
                            where taxWithholdGroupData.TaxWithholdGroup == this.TaxWithholdGroup
                            exists join RecId from taxWithholdTableOthers
                                where taxWithholdTableOthers.TaxWithholdCode    == taxWithholdGroupData.TaxWithholdCode
                                    && taxWithholdTableOthers.TaxCalcMethod_JP  != taxWithholdTableThis.TaxCalcMethod_JP;

                    if (taxWithholdTableThis)
                    {
                        // @Tax:WithholdingTaxGroupCalculationMethodValidationError: Withholding tax codes of different calculation methods cannot be attached in a single Withholding tax group
                        ret = checkFailed("@Tax:WithholdingTaxGroupCalculationMethodValidationError");
                    }
                }
                // </GJP>
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The validation of what tax codes can be selected in the withholding tax group will depend on the selection of "Tax applicability" lookup.
    ///  1.If the selection is IT Act, both Resident and Non Resident type tax codes can be selected in the group. The restriction is, it can either be all Resident or all non-resident. User cannot mix and match.
    ///  2. If the selection is DTAA, only the tax codes type Non-Resident can be selected in that group.
    /// </summary>
    /// <returns>
    /// true if validate, otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret;
        TaxWithholdTable                    taxWithholdTable;
        TaxWithholdGroupHeading             taxWithholdGroupHeading;
        TaxWithholdGroupData                taxWithholdGroupData;
        TaxWithholdComponentTable_IN        taxWithholdComponentTable;
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroupTable;
        TaxWithholdComponentStatus_IN       curComponentStatus;

        ret = super();

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(CRSEIndia)))
        {
            select firstOnly Status from taxWithholdComponentGroupTable
                exists join RecId from taxWithholdComponentTable
                    where taxWithholdComponentTable.TaxWithholdComponentGroup == taxWithholdComponentGroupTable.RecId
                        exists join RecId from taxWithholdTable
                            where taxWithholdTable.TaxWithholdComponent_IN == taxWithholdComponentTable.RecId
                                && taxWithholdTable.TaxWithholdCode == this.TaxWithholdCode;

            curComponentStatus = taxWithholdComponentGroupTable.Status;

            select firstOnly Status, RecId from taxWithholdComponentGroupTable
                where taxWithholdComponentGroupTable.Status != curComponentStatus
                exists join RecId from taxWithholdComponentTable
                    where taxWithholdComponentTable.TaxWithholdComponentGroup == taxWithholdComponentGroupTable.RecId
                    exists join RecId from taxWithholdTable
                        where taxWithholdTable.TaxWithholdComponent_IN == taxWithholdComponentTable.RecId
                        exists join RecId from taxWithholdGroupData
                            where taxWithholdGroupData.TaxWithholdCode == taxWithholdTable.TaxWithholdCode
                                &&  taxWithholdGroupData.TaxWithholdGroup == this.TaxWithholdGroup;

            if (taxWithholdComponentGroupTable.RecId)
            {
                ret = checkFailed("@SYS4004222");
            }

            if (ret)
            {
                taxWithholdGroupHeading = TaxWithholdGroupHeading::find(this.TaxWithholdGroup);
                if ((taxWithholdGroupHeading.TaxApplicability_IN == TaxWithholdTaxApplicability_IN::DTAA)
                    && (curComponentStatus != TaxWithholdComponentStatus_IN::NonResident))
                {
                    ret = checkFailed("@SYS4004221");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxWithholdGroup _taxWithholdGroup, TaxWithholdCode _taxWithholdCode )
    {
        boolean ret = true;
        ;

        if (!TaxWithholdGroupData::exist(_taxWithholdGroup, _taxWithholdCode))
        {
            ret = checkFailed(strfmt(TaxWithholdGroupData::txtNotExist(), _taxWithholdGroup, _taxWithholdCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxWithholdGroup _taxWithholdGroup, TaxWithholdCode _taxWithholdCode )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     TaxWithholdGroupData
                 where
                     TaxWithholdGroupData.TaxWithholdGroup == _taxWithholdGroup &&
                    TaxWithholdGroupData.TaxWithholdCode == _taxWithholdCode).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxWithholdGroupData find(
        TaxWithholdGroup _taxWithholdGroup,
        TaxWithholdCode _taxWithholdCode ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdGroupData TaxWithholdGroupData;
        ;

        TaxWithholdGroupData.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            TaxWithholdGroupData.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            TaxWithholdGroupData
            where
            TaxWithholdGroupData.TaxWithholdGroup == _taxWithholdGroup &&
                    TaxWithholdGroupData.TaxWithholdCode == _taxWithholdCode;

        return TaxWithholdGroupData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTaxCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdCode</c> field.
    /// </summary>
    /// <param name="_formStringControl">
    /// The calling form control.
    /// </param>
    /// <param name="_taxGroup">
    /// Build query based on passed withhold tax group.
    /// </param>
    public static void lookupTaxCode_IN(FormStringControl   _formStringControl,
                                               TaxWithholdGroup    _taxGroup)
    {
        Query                   query          = new Query();
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    queryBuildDataSource;
        SysTableLookup          sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tablenum(TaxWithholdGroupData), _formStringControl);
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdGroupData, TaxWithholdCode));

        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdGroupData));

        queryBuildRange = queryBuildDataSource.addRange(fieldnum(TaxWithholdGroupData, TaxWithholdGroup));
        queryBuildRange.value(_taxGroup);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102257";
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        TaxWithholdCache::clearScope(TaxWithholdCacheScope::IntersectionData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        TaxWithholdCache::clearScope(TaxWithholdCacheScope::IntersectionData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        TaxWithholdCache::clearScope(TaxWithholdCacheScope::IntersectionData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicWithholdingTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126140</DeveloperDocumentation>
	<Label>@SYS81696</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdGroup</TitleField1>
	<TitleField2>TaxWithholdCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TaxWithholdGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxWithholdGroupIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation_IN</Name>
			<Label>@SYS31242</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Exempt_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverlookThreshold_IN</Name>
			<Label>@GLS5361</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverlookTax_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Exempt_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdExempt_IN</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverlookTax_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5361</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWithholdGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>