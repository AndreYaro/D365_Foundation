<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(VendTable, PaymSched),
                    [fieldNum(VendTable, PaymTermId)]],
            [fieldNum(VendTable, PaymTermId),
                    [fieldNum(VendTable, VendGroup)]],
            [fieldNum(VendTable, OffsetAccountType),
                    [fieldNum(VendTable, VendGroup)]],
            [fieldNum(VendTable, OffsetLedgerDimension),
                    [fieldNum(VendTable, VendGroup)]],
            [fieldNum(VendTable, TaxGroup),
                    [fieldNum(VendTable, VendGroup)]],
            [fieldNum(VendTable, PaymSpec),
                    [fieldNum(VendTable, PaymMode)]],
            [fieldNum(VendTable, BankCentralBankPurposeText),
                    [fieldNum(VendTable, BankCentralBankPurposeCode)]],
            [fieldNum(VendTable, InventSiteId),
                    [fieldNum(VendTable, InventLocation)]],
            [fieldNum(VendTable, InventLocation),
                    [fieldNum(VendTable, InventSiteId)]],
            [fieldNum(VendTable, Rfc_MX),
                    [fieldNum(VendTable, CompanyType_MX)]],
            [fieldNum(VendTable, Curp_MX),
                    [fieldNum(VendTable, CompanyType_MX)]],
            [fieldNum(VendTable, StateInscription_MX),
                    [fieldNum(VendTable, CompanyType_MX)]],
            [fieldNum(VendTable, ForeignTaxRegistration_MX),
                    [fieldNum(VendTable, VendorType_MX)]],
            [fieldNum(VendTable, Nationality_MX),
                    [fieldNum(VendTable, VendorType_MX)]],
            [fieldNum(VendTable, DiotCountryCode_MX),
                    [fieldNum(VendTable, VendorType_MX)]],
            [fieldNum(VendTable, OperationType_MX),
                    [fieldNum(VendTable, VendorType_MX)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymSched</Name>
				<Source><![CDATA[
    private void defaultPaymSched()
    {
        this.PaymSched = PaymTerm::find(this.PaymTermId).PaymSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymTermId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the PaymTermId field.
    /// </summary>
    /// <param name = "_vendGroup">The <c>VendGroup</c> record to default the PaymTermId field with.</param>
    protected void defaultPaymTermId(VendGroup _vendGroup = VendGroup::find(this.VendGroup))
    {
        if (_vendGroup.PaymTermId)
        {
            if (this.isFieldSet(fieldNum(VendTable, VendGroup)))
            {
                this.PaymTermId = _vendGroup.PaymTermId;
            }
        }

        if (PublicSectorUtils::isFrenchRegulatoryEnabled() && !this.PaymTermId)
        {
            PaymTerm paymTerm = PaymTerm::getDefaultPaymTerm();

            if (paymTerm.RecId)
            {
                this.PaymTermId = paymTerm.PaymTermId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccountType</Name>
				<Source><![CDATA[
    private void defaultOffsetAccountType(VendDefaultAccounts _vendDefaultAccounts = VendDefaultAccounts::findDefault(this.AccountNum, curext(), this.VendGroup))
    {
        if (_vendDefaultAccounts)
        {
            this.OffsetAccountType      = _vendDefaultAccounts.LedgerJournalACType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetLedgerDimension</Name>
				<Source><![CDATA[
    private void defaultOffsetLedgerDimension(VendDefaultAccounts _vendDefaultAccounts = VendDefaultAccounts::findDefault(this.AccountNum, curext(), this.VendGroup))
    {
        if (_vendDefaultAccounts)
        {
            this.OffsetLedgerDimension  = _vendDefaultAccounts.parmLedgerDimension();
        }
        else
        {
            this.OffsetLedgerDimension = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroup</Name>
				<Source><![CDATA[
    private void defaultTaxGroup(VendGroup _vendGroup = VendGroup::find(this.VendGroup))
    {
        if (_vendGroup.TaxGroupId && (this.isFieldSet(fieldNum(VendTable, VendGroup))))
        {
            this.TaxGroup = _vendGroup.TaxGroupId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPaymSpec</Name>
				<Source><![CDATA[
    private void defaultPaymSpec()
    {
        this.CustVendTable::paymModeModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBankCentralBankPurposeText</Name>
				<Source><![CDATA[
    private void defaultBankCentralBankPurposeText()
    {
        this.CustVendTable::modifiedBankCentralBankPurposeCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventSiteId</Name>
				<Source><![CDATA[
    private void defaultInventSiteId()
    {
        this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocation</Name>
				<Source><![CDATA[
    private void defaultInventLocation()
    {
        this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>birthDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get birth date for vendor.
    /// </summary>
    /// <returns>Birth date for vendor.</returns>
    public BirthDate birthDate()
    {
        return DirPerson::find(this.Party).birthDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        this.defaultFieldWithChangeControl(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldWithChangeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies defaulting logic to a given field, while respecting change control settings. 
    /// Fields that are change-controlled will not be defaulted unless an optional bypass parameter is passed as true.
    /// </summary>
    /// <param name = "_fieldId">The id of the field to default.</param>
    /// <param name = "_bypassChangeControl">This parameter allows bypassing change control and applying defaulting to a change-controlled field.</param>
    public void defaultFieldWithChangeControl(FieldId _fieldId, boolean _bypassChangeControl = false)
    {
        switch (_fieldId)
        {
            case fieldNum(VendTable, PaymSched): this.defaultPaymSched(); break;
            case fieldNum(VendTable, PaymTermId): 
                if (_bypassChangeControl || !VendTableChangeProposalFieldEnablement::isEnabledFor(VendTableChangeProposalField::PaymTermId))
                {
                    this.defaultPaymTermId();
                }
                break;
            case fieldNum(VendTable, OffsetAccountType): this.defaultOffsetAccountType(); break;
            case fieldNum(VendTable, OffsetLedgerDimension): this.defaultOffsetLedgerDimension(); break;
            case fieldNum(VendTable, TaxGroup): this.defaultTaxGroup(); break;
            case fieldNum(VendTable, PaymSpec):
                if (_bypassChangeControl || !VendTableChangeProposalFieldEnablement::isEnabledFor(VendTableChangeProposalField::PaymSpec))
                {
                    this.defaultPaymSpec();
                }
                break;
            case fieldNum(VendTable, BankCentralBankPurposeText): this.defaultBankCentralBankPurposeText(); break;
            case fieldNum(VendTable, InventSiteId): this.defaultInventSiteId(); break;
            case fieldNum(VendTable, InventLocation): this.defaultInventLocation(); break;
            case fieldNum(VendTable, Rfc_MX): this.Rfc_MX = ''; break;
            case fieldNum(VendTable, Curp_MX): this.Curp_MX = ''; break;
            case fieldNum(VendTable, StateInscription_MX): this.StateInscription_MX = ''; break;
            case fieldNum(VendTable, ForeignTaxRegistration_MX): this.ForeignTaxRegistration_MX = ''; break;
            case fieldNum(VendTable, Nationality_MX): this.Nationality_MX = ''; break;
            case fieldNum(VendTable, DiotCountryCode_MX): this.DiotCountryCode_MX = ''; break;
            case fieldNum(VendTable, OperationType_MX): this.OperationType_MX = VendorOperationType_MX::Blank; break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceAllCurrency</Name>
				<Source><![CDATA[
    display AmountCur balanceAllCurrency(CustCurrencyCode _currencyCode = this.Currency)
    {
        return this.CustVendTable::balanceAllCurrency(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceCurPerDate</Name>
				<Source><![CDATA[
    AmountCur balanceCurPerDate(TransDate    _transactionDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                       CurrencyCode _currencyCode       = Ledger::accountingCurrency(CompanyInfo::current()))
    {
        return this.CustVendTable::balanceCurrency(dateNull(), _transactionDate, _currencyCode, _currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceCurrency</Name>
				<Source><![CDATA[
    AmountCur balanceCurrency(TransDate     _fromDate       = dateNull(),
                              TransDate     _toDate         = dateMax(),
                              CurrencyCode  _fromCurrency   = '',
                              CurrencyCode  _toCurrency     = '')
    {
        return this.CustVendTable::balanceCurrency(_fromDate,
                                                   _toDate,
                                                   _fromCurrency,
                                                   _toCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceMarked_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates pending (marked, but not not settled yet) settlement amounts for vendor for current document with regards to contract (agreement)
    /// </summary>
    /// <param name="_tableId">
    /// Document table ID
    /// </param>
    /// <param name="_recId">
    /// Document record ID
    /// </param>
    /// <param name="_agreementClassificationId">
    /// Agreement reference to limit marked amounts to specified agreement only.
    /// </param>
    /// <returns>
    /// Pending settlement amounts for vendor for current document with regards to contract (agreement)
    /// </returns>
    public AmountMST balanceMarked_RU(
        TableId       _tableId,
        RecId         _recId,
        RefRecId      _agreementClassificationId)
    {
        AmountMST       balanceMarked;
        SpecTrans       specTrans;
        VendTrans       vendTrans;
        CustVendSettle  custVendSettle;
        SettleDatePrinc currentDatePrinciple;
        TransDate       settleDate;
        Query           query;
        QueryBuildDataSource qbds;
        QueryRun        qr;
        RecId           dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        if (!dimAttrRecId)
        {
            return 0;
        }

        custVendSettle = CustVendSettle::construct(SysModule::Vend);
        currentDatePrinciple = CustVendSettle::construct(SysModule::Vend).datePrinciple();

        query = new Query();
        qbds  = query.addDataSource(tableNum(SpecTrans));
        qbds.addRange(fieldNum(SpecTrans, SpecTableId)).value(queryValue(_tableId));
        qbds.addRange(fieldNum(SpecTrans, SpecRecId)).value(queryValue(_recId));
        qbds.addSelectionField(fieldNum(SpecTrans, Balance01));

        qbds = qbds.addDataSource(tableNum(VendTransOpen));
        qbds.addLink(fieldNum(SpecTrans, RefTableId), fieldNum(VendTransOpen, TableId));
        qbds.addLink(fieldNum(SpecTrans, RefRecId), fieldNum(VendTransOpen, RecId));
        qbds.addRange(fieldNum(VendTransOpen, AmountCur)).value('0..');
        qbds.addSelectionField(fieldNum(VendTransOpen, TableId));

        QueryBuildDataSource qbdsVendTrans = qbds.addDataSource(tableNum(VendTrans));
        qbdsVendTrans.addLink(fieldNum(VendTransOpen, RefRecId), fieldNum(VendTrans, RecId));
        qbdsVendTrans.addSelectionField(fieldNum(VendTrans, CurrencyCode));
        qbdsVendTrans.addSelectionField(fieldNum(VendTrans, TransDate));

        DimensionAttribute dimAttr = DimensionAttribute::find(dimAttrRecId);
        DimensionProvider dimProvider = DimensionProviderFactory::getDimensionProviderForDimensionField(qbdsVendTrans, fieldStr(VendTrans, DefaultDimension));

        dimProvider.addDataSourceToQuery(query, qbdsVendTrans.name(), fieldStr(VendTrans, DefaultDimension), DimensionComponent::DimensionAttribute, dimAttr.Name);

        qr = new QueryRun(query);
        while (qr.next())
        {
            str dimValue = dimProvider.getDimensionValueFromQueryRun(qr, qbdsVendTrans.name(), fieldStr(VendTrans, DefaultDimension),
                DimensionComponent::DimensionAttribute, dimAttr.Name);

            if (dimValue && PurchAgreementHeader::findAgreementId(dimValue).AgreementClassification != _agreementClassificationId)
            {
                continue;
            }

            specTrans = qr.get(tableNum(SpecTrans));
            vendTrans = qr.get(tableNum(VendTrans));

            switch (currentDatePrinciple)
            {
                case SettleDatePrinc::DaysDate:
                    settleDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    break;
                case SettleDatePrinc::SelectDate:
                    settleDate = custVendSettle.saveDate();
                    break;
                case SettleDatePrinc::DateOfPayment:
                    settleDate = vendTrans.TransDate;
                    break;
            }

            balanceMarked += CurrencyExchangeHelper::amountCur2MST(specTrans.Balance01, vendTrans.CurrencyCode, 0, settleDate);
        }

        return -balanceMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceMST</Name>
				<Source><![CDATA[
    display AmountMST balanceMST(FromDate   _fromDate   = dateNull(),
                                 ToDate     _toDate     = dateMax())
    {
        return this.CustVendTable::balanceMST(_fromDate, _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>balancePerDate</Name>
				<Source><![CDATA[
    AmountMST balancePerDate(TransDate _transactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.CustVendTable::balanceMST(dateNull(), _transactionDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the account number of the bank account that is referenced by the <c>BankAccount</c> field
    /// in this table.
    /// </summary>
    /// <returns>
    /// A bank account number; otherwise, an empty string.
    /// </returns>
    /// <remarks>
    /// If the current user does not have access to the <c>AccountNum</c> field in the
    /// <c>VendBankAccount</c> table, this display method returns an empty string.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    display BankAccount bankAccountNum()
    {
        VendBankAccount vendBankAccount;
        BankAccount ret;

        // Only make database call when the AccountNum and bankAccount is not empty.
        if (this.AccountNum != '' && this.BankAccount != '')
        {
            vendBankAccount = VendBankAccount::find(this.AccountNum, this.BankAccount);
            DictField field = new DictField(tableNum(VendBankAccount), fieldNum(VendBankAccount, AccountNum));
            if (field!=null)
            {
                if ( field.rights() >= AccessType::View )
                {
                    ret = vendBankAccount.AccountNum;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockedReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>ReasonCode</c> value for the most recent update of the
    /// <c>OfficeAddinAccountStructureView</c> blocked field.
    /// </summary>
    /// <returns>
    /// The reason code ID for the most recent update.
    /// </returns>
    display ReasonCode blockedReasonCode()
    {
        ReasonCode          reasonCode;
        VendOnHoldHistory   vendOnHoldHistory;

        vendOnHoldHistory = VendOnHoldHistory::findLast(this.AccountNum);
        if (vendOnHoldHistory.RecId)
        {
            reasonCode = vendOnHoldHistory.ReasonCode;
        }
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAutoCreatePurchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether change management enabling is mandatory for purchase orders created for the
    /// vendor.
    /// </summary>
    /// <returns>
    /// true if purchase orders can be created without enabling of change request; otherwise, false.
    /// </returns>
    public boolean canAutoCreatePurchOrder()
    {
        if (PurchParameters::find().ChangeRequestAllowOverride)
        {
            if (this.ChangeRequestOverride)
            {
                if (this.ChangeRequestAllowOverride)
                {
                    return true;
                }

                return !this.ChangeRequestEnabled;
            }
        }

        return !PurchParameters::find().ChangeRequestEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeManagementEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether change management is enabled for the vendor, either via override on the vendor, or based on procurement parameters
    /// </summary>
    /// <returns>
    /// true if change management is enabled for the vendor; otherwise, false.
    /// </returns>
    public boolean isChangeManagementEnabled()
    {
        PurchParameters purchParameters = PurchParameters::find();

        if (purchParameters.ChangeRequestAllowOverride && this.ChangeRequestOverride)
        {
            return this.ChangeRequestEnabled;
        }

        return purchParameters.ChangeRequestEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscName</Name>
				<Source><![CDATA[
    display VendCashDiscName cashDiscName()
    {
        return CashDisc::find(this.CashDisc).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the vendor account for possible vendor hold.
    /// </summary>
    /// <param name="amountCur">
    /// The invoice amount to be checked.
    /// </param>
    /// <param name="_transDate">
    /// The invoice transaction date passed for comparison; optional.
    /// </param>
    /// <param name="_ledgerJournalType">
    /// The ledger journal type passed for comparison; optional.
    /// </param>
    /// <param name="_custVendPaymStatus">
    /// The Vendor Payment Status; optional.
    /// </param>
    /// <returns>
    /// true if the vendor is not on hold; otherwise, false.
    /// </returns>
    boolean checkAccountBlocked(
        AmountCur amountCur,
        InvoiceReleaseDate _transDate = utcDateTimeNull(),
        LedgerJournalType _ledgerJournalType = -1,
        CustVendPaymStatus _custVendPaymStatus = CustVendPaymStatus::None)
    {
        boolean                ret = true;
        boolean                isVendReleaseDateExpired;
        VendBlockedReleaseDate vendReleaseDate;
        CustVendorBlocked      vendBlocked;

        vendReleaseDate = this.BlockedReleaseDate;
        vendBlocked     = this.Blocked;
        isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(this.AccountNum, _transDate);

        if (vendBlocked == CustVendorBlocked::All
            || (vendBlocked == CustVendorBlocked::Invoice && amountCur < 0)
            || (vendBlocked == CustVendorBlocked::Payment && _custVendPaymStatus == CustVendPaymStatus::None && amountCur > 0 && this.isPaymentJournalType(_ledgerJournalType)))
        {
            if (!vendReleaseDate)
            {
                ret = checkFailed(strFmt("@SYS128411", this.AccountNum, vendBlocked));
            }
            else if (!isVendReleaseDateExpired)
            {
                ret = checkFailed(strFmt("@SYS128412", this.AccountNum, vendBlocked, DateTimeUtil::date(vendReleaseDate)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBlockedAll</Name>
				<Source><![CDATA[
    boolean  checkBlockedAll()
    {
        boolean ret = true;

        if (this.Blocked == CustVendorBlocked::All)
        {
            ret = checkFailed(strFmt("@SYS22005", this.AccountNum, CustVendorBlocked::All));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountIsNotBlockedForAllDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the vendor account is not blocked (on hold) for all documents.
    /// </summary>
    /// <returns>
    /// true if the vendor is not on hold; otherwise, false.
    /// </returns>
    public boolean checkAccountIsNotBlockedForAllDocuments()
    {
        boolean ret = true;

        if (this.Blocked == CustVendorBlocked::All)
        {
            VendBlockedReleaseDate blockedReleaseDateWithUserTimeZone = DateTimeUtil::applyTimeZoneOffset(this.BlockedReleaseDate, DateTimeUtil::getUserPreferredTimeZone());

            if (!blockedReleaseDateWithUserTimeZone)
            {
                ret = checkFailed(strFmt("@SYS128411", this.AccountNum, CustVendorBlocked::All));
            }
            else
            {
                boolean isVendReleaseDateExpired = blockedReleaseDateWithUserTimeZone != utcDateTimeNull()
                                                && blockedReleaseDateWithUserTimeZone <= DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone());;

                if (!isVendReleaseDateExpired)
                {
                    ret = checkFailed(strFmt("@SYS128412", this.AccountNum, CustVendorBlocked::All, DateTimeUtil::date(blockedReleaseDateWithUserTimeZone)));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoice</Name>
				<Source><![CDATA[
    boolean checkInvoice(InvoiceId          _invoiceId,
                         TransDate          _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                         boolean            _silentMode = false)
    {
        TransDate           fromDate;
        TransDate           toDate;
        VendInvoiceJour     vendInvoiceJour;
        RecId               calendarRecId;
        ReuseVoucher        reuseVoucher;
        boolean             ret = true;

        if (!_invoiceId || !this.AccountNum)
        {
            return true;
        }

        reuseVoucher = VendParameters::find().CheckInvoice;

        switch (reuseVoucher)
        {
            case ReuseVoucher::NoDuplicateInYear :
                calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
                fromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _transDate);
                toDate = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _transDate);

                select maxof(InvoiceDate), sum(InvoiceAmount) from vendInvoiceJour
                    where vendInvoiceJour.InvoiceId == _invoiceId
                        && vendInvoiceJour.InvoiceAccount == this.AccountNum
                        && (!calendarRecId ||
                                (vendInvoiceJour.InvoiceDate >= fromDate
                             && vendInvoiceJour.InvoiceDate <= toDate));

                ret = VendTable::checkZeroAmount(vendInvoiceJour.InvoiceAmount, _invoiceId, vendInvoiceJour.InvoiceDate);

                break;

            case ReuseVoucher::WarnDuplicate :
                calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
                fromDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _transDate);
                toDate = LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _transDate);
                
                select firstonly InvoiceDate from vendInvoiceJour
                    where vendInvoiceJour.InvoiceId == _invoiceId
                        && vendInvoiceJour.InvoiceAccount == this.AccountNum
                        && (!calendarRecId ||
                                (vendInvoiceJour.InvoiceDate >= fromDate
                             && vendInvoiceJour.InvoiceDate <= toDate));

                if (vendInvoiceJour)
                {
                    if (_silentMode)
                    {
                        ret = false;
                    }
                    else
                    {
                        // this should never be an error, so just display a warning
                        warning(strFmt("@SYS50887", _invoiceId, date2StrUsr(vendInvoiceJour.InvoiceDate, DateFlags::FormatAll)));
                        ret = true;
                    }
                }

                break;
            
            case ReuseVoucher::AcceptDuplicate :
                ret = true;

                break;
            
            case ReuseVoucher::NoDuplicate :
                select maxof(InvoiceDate), sum(InvoiceAmount)
                    from vendInvoiceJour
                    where vendInvoiceJour.InvoiceAccount == this.AccountNum
                        && vendInvoiceJour.InvoiceId == _invoiceId;

                ret = VendTable::checkZeroAmount(vendInvoiceJour.InvoiceAmount, _invoiceId, vendInvoiceJour.InvoiceDate);
                   
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPackingSlip</Name>
				<Source><![CDATA[
    boolean checkPackingSlip(PackingSlipId  packingSlipId,
                             TransDate      transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) )
    {
        boolean isValidProductReceipt = true;
        VendPackingSlipJour vendPackingSlipJour = this.getPackingSlipJour(packingSlipId, transDate);

        if (vendPackingSlipJour)
        {
            isValidProductReceipt = checkFailed(strFmt("@SYS50926", packingSlipId, date2StrUsr(vendPackingSlipJour.DeliveryDate, DateFlags::FormatAll)));
        }

        return isValidProductReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackingSlipJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product receipt for the voucher type.
    /// </summary>
    /// <param name = "_packingSlipId">
    /// The product receipt ID.
    /// </param>
    /// <param name = "_transDate">
    /// The vendor transaction date.
    /// </param>
    /// <returns>
    /// A <c>VendPackingSlipJour</c> record.
    /// </returns>
    [Wrappable(true)]
    protected final VendPackingSlipJour getPackingSlipJour(PackingSlipId _packingSlipId, TransDate _transDate)
    {
        VendPackingSlipJour vendPackingSlipJour;
        VendPackingSlipVersion vendPackingSlipVersion;
        RecId calendarRecId;

        switch (PurchParameters::find().CheckPackingSlip)
        {
            case ReuseVoucher::NoDuplicate :
                select firstonly DeliveryDate
                    from vendPackingSlipJour
                    index hint PackingSlipIdx
                    where vendPackingSlipJour.InvoiceAccount == this.AccountNum &&
                          vendPackingSlipJour.PackingSlipId == _packingSlipId &&
                          vendPackingSlipJour.PurchaseType != PurchaseType::Journal
                    notexists join RecId from vendPackingSlipVersion
                        where vendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJour.RecId
                            && vendPackingSlipVersion.Qty == 0;
                break;

            case ReuseVoucher::NoDuplicateInYear :
                calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
                select firstonly DeliveryDate
                    from vendPackingSlipJour
                    index hint PackingSlipIdx
                    where vendPackingSlipJour.InvoiceAccount == this.AccountNum &&
                          vendPackingSlipJour.PackingSlipId == _packingSlipId &&
                          vendPackingSlipJour.PurchaseType != PurchaseType::Journal &&
                          vendPackingSlipJour.DeliveryDate >= LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _transDate) &&
                          vendPackingSlipJour.DeliveryDate <= LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _transDate)
                    notexists join RecId from vendPackingSlipVersion
                        where vendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJour.RecId
                            && vendPackingSlipVersion.Qty == 0;
                break;

            case ReuseVoucher::AcceptDuplicate :
                return vendPackingSlipJour;

            case ReuseVoucher::WarnDuplicate:
                if (appl.ttsLevel() == 0)
                {
                    select firstonly DeliveryDate
                        from vendPackingSlipJour
                        index hint PackingSlipIdx
                        where vendPackingSlipJour.InvoiceAccount == this.AccountNum &&
                              vendPackingSlipJour.PackingSlipId == _packingSlipId &&
                              vendPackingSlipJour.PurchaseType != PurchaseType::Journal
                        notexists join RecId from vendPackingSlipVersion
                            where vendPackingSlipVersion.VendPackingSlipJour == vendPackingSlipJour.RecId
                                && vendPackingSlipVersion.Qty == 0;

                    if (vendPackingSlipJour)
                    {
                        warning(strFmt("@SYS50926", _packingSlipId, date2StrUsr(vendPackingSlipJour.DeliveryDate, DateFlags::FormatAll)));
                        vendPackingSlipJour = null;
                    }
                }
                break;
        }

        return vendPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if intercompany agreement exists.
    /// </summary>
    /// <returns>
    /// false if related agreement exists.
    /// </returns>
    public boolean checkRelatedAgreement_RU()
    {
        PurchAgreementHeader purchAgreementHeader;
        SalesAgreementHeader salesAgreementHeader;
        AgreementReference   agreementReference;
        CompanyInfo          companyInfo;
        boolean              checkOk = true;

        setPrefix("@GLS115652");

        while select purchAgreementHeader
        join TableId from companyInfo
                where purchAgreementHeader.VendAccount        == this.AccountNum
                    && purchAgreementHeader.BuyingLegalEntity == companyInfo.RecId
                    && companyInfo.DataArea                   == curext()
            exists join agreementReference
                where (   agreementReference.SourceAgreement == purchAgreementHeader.RecId
                       || agreementReference.DerivedAgreement == purchAgreementHeader.RecId)
                   && agreementReference.IsIntraCompany_RU
        {
            salesAgreementHeader = purchAgreementHeader.salesAgreementHeader_RU();

            checkOk = checkFailed(strFmt("@GLS115654",
                                         purchAgreementHeader.PurchNumberSequence,
                                         purchAgreementHeader.VendAccount,
                                         salesAgreementHeader.SalesNumberSequence,
                                         salesAgreementHeader.CustAccount));
        }

        return checkOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether specified tax invoice number can be used.
    /// </summary>
    /// <param name="_taxInvoiceId">
    ///     Tax invoice number
    /// </param>
    /// <param name="_taxInvoiceDate">
    ///     Tax invoice date
    /// </param>
    /// <param name="_silentMode">
    ///     Indicate whether warning message will be shown.
    /// </param>
    /// <returns>
    ///     Returns true if tax invoice number can be used. Otherwise, returns false.
    /// </returns>
    boolean checkTaxInvoice(
        TaxUnrealizedPurchTaxInvoiceId      _taxInvoiceId,
        TaxUnrealizedPurchTaxInvoiceDate    _taxInvoiceDate,
        boolean                             _silentMode = false)
    {
        TransDate           fromDate;
        TransDate           toDate;
        boolean             found;
        TaxTrans            taxTrans;
        TaxTransExtensionTH taxTransExtensionTH;
        VendInvoiceJour     vendInvoiceJour;
        RecId               calendarRecId;

        if (!_taxInvoiceId)
        {
            return true;
        }

        switch (VendParameters::find().CheckTaxInvoice)
        {
            case ReuseVoucher::NoDuplicate :
                select firstonly TaxInvoiceDate, RecId from taxTransExtensionTH
                    exists join taxTrans
                        where taxTrans.RecId == taxTransExtensionTH.TaxTrans
                    exists join InvoiceAccount from vendInvoiceJour
                        where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher
                            && taxTrans.TransDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceJour.InvoiceAccount == this.AccountNum
                            && taxTransExtensionTH.TaxInvoiceId == _taxInvoiceId;
                if (taxTransExtensionTH)
                {
                    found = true;
                }
                break;

            case ReuseVoucher::NoDuplicateInYear :
                calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
                fromDate =  LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _taxInvoiceDate);
                toDate   =  LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _taxInvoiceDate);
                select firstonly TaxInvoiceDate, RecId from taxTransExtensionTH
                    exists join taxTrans
                        where taxTrans.RecId == taxTransExtensionTH.TaxTrans
                    exists join InvoiceAccount from vendInvoiceJour
                        where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher
                            && taxTrans.TransDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceJour.InvoiceAccount == this.AccountNum
                            && taxTransExtensionTH.TaxInvoiceId == _taxInvoiceId
                            && taxTransExtensionTH.TaxInvoiceDate >= fromDate
                            && taxTransExtensionTH.TaxInvoiceDate <= toDate;
                if (taxTransExtensionTH)
                {
                    found = true;
                }
                break;

            case ReuseVoucher::AcceptDuplicate :
                found = false;
                break;

            case ReuseVoucher::WarnDuplicate :
                calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
                fromDate =  LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _taxInvoiceDate);
                toDate   =  LedgerFiscalCalendar::findClosingPeriodEndDateByDate(calendarRecId, _taxInvoiceDate);
                select firstonly TaxInvoiceDate, RecId from taxTransExtensionTH
                    exists join taxTrans
                        where taxTrans.RecId == taxTransExtensionTH.TaxTrans
                    exists join InvoiceAccount from vendInvoiceJour
                        where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher
                            && taxTrans.TransDate == vendInvoiceJour.InvoiceDate
                            && vendInvoiceJour.InvoiceAccount == this.AccountNum
                            && taxTransExtensionTH.TaxInvoiceId == _taxInvoiceId
                            && taxTransExtensionTH.TaxInvoiceDate >= fromDate
                            && taxTransExtensionTH.TaxInvoiceDate <= toDate;
                if (taxTransExtensionTH)
                {
                    if (_silentMode)
                    {
                        return false;
                    }
                    else // this should never be an error, so just display a warning
                    {
                        found = false;
                        warning(strFmt("@SYS50887", _taxInvoiceId, date2StrUsr(taxTransExtensionTH.TaxInvoiceDate, DateFlags::FormatAll)));
                    }
                }
                break;
        }

        if (found)
        {
            return checkFailed(strFmt("@SYS50887", _taxInvoiceId, date2StrUsr(taxTransExtensionTH.TaxInvoiceDate, DateFlags::FormatAll)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATNumUsed</Name>
				<Source><![CDATA[
    boolean checkVATNumUsed()
    {
        boolean    ret = true;
        VendTable  tmpVendTable;

        if (this.vatNum && !this.allowMultipleVendorsWithSameVATNum())
        {
            select firstonly  RecId,vatNum from tmpVendTable
            where tmpVendTable.RecId  != this.RecId  &&
            tmpVendTable.vatNum == this.vatNum;
            
            if (tmpVendTable.RecId)
            {
                ret = checkFailed(strFmt("@SYS79301",fieldPName(VendTable, vatNum)));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMultipleVendorsWithSameVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if multiple vendors with same VAT number allowed.
    /// </summary>
    /// <returns>true if multiple vendors with same VAT number allowed; otherwise, false.</returns>
    [Replaceable]
    protected boolean allowMultipleVendorsWithSameVATNum()
    {
        #ISOCountryRegionCodes
        return !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear ledger dimension for a given account.
    /// </summary>
    /// <param name = "_vendPostingProfile">The vendor posting profile.</param>
    /// <param name = "_accountNum">The account number.</param>
    /// <returns>The ledger dimension default account that is cleared.</returns>
    public LedgerDimensionDefaultAccount clearingLedgerDimension(
        VendPostingProfile  _vendPostingProfile =  VendParameters::find().PostingProfile,
        CustVendAC          _accountNum = this.AccountNum)
    {
        return this.CustVendTable::clearingLedgerDimension(_vendPostingProfile, _accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimensionGroup</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount clearingLedgerDimensionGroup(VendAccount _vendAccount,
        VendPostingProfile _vendPostingProfile =  VendParameters::find().PostingProfile)
    {
        VendLedgerAccounts  vendLedgerAccounts;

        return CustVendLedgerDimensions::clearingLedgerDimension(_vendAccount,
                                                       _vendPostingProfile,
                                                       vendLedgerAccounts,
                                                       TableGroupAll::GroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingPeriod</Name>
				<Source><![CDATA[
    VendClearingPeriod clearingPeriod()
    {
        return (this.ClearingPeriod ? this.ClearingPeriod : VendGroup::find(this.VendGroup).clearingPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>CompanyInfo</c> record that is associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>compositionScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax related composite scheme information.
    /// </summary>
    /// <returns>
    /// The tax related composite scheme information.
    /// </returns>
    public NoYes compositionScheme()
    {
        return this.getTaxInformationVendTable_IN().CompositionScheme;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonPhone</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the phone for the contact person.
    /// </summary>
    /// <returns>
    ///    The phone for the contact person.
    /// </returns>
    public display ContactPersonPhone contactPersonPhone()
    {
        return this.contactPerson().phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInfoFromParty</Name>
				<Source><![CDATA[
    private void copyInfoFromParty()
    {
        Set sourceFieldGroups = new Set(Types::Class);
        sourceFieldGroups.add(new SysDictFieldGroup(tableNum(CustTable), tableFieldgroupStr(CustTable, MexicanSharedInfoByParty)));
        sourceFieldGroups.add(new SysDictFieldGroup(tableNum(VendTable), tableFieldgroupStr(VendTable, MexicanSharedInfoByParty)));

        SysDictFieldGroup targetFieldGroup = new SysDictFieldGroup(tableNum(VendTable), tableFieldgroupStr(VendTable, MexicanSharedInfoByParty));

        DirPartyInformationCopy::copyInfoFromEntitiesThatShareSameParty(this.Party, sourceFieldGroups, targetFieldGroup, this, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInfoToParty</Name>
				<Source><![CDATA[
    private void copyInfoToParty()
    {
        SysDictFieldGroup sourceFieldGroup = new SysDictFieldGroup(tableNum(VendTable), tableFieldgroupStr(VendTable, MexicanSharedInfoByParty));

        Set targetFieldGroups = new Set(Types::Class);
        targetFieldGroups.add(new SysDictFieldGroup(tableNum(CustTable), tableFieldgroupStr(CustTable, MexicanSharedInfoByParty)));
        targetFieldGroups.add(new SysDictFieldGroup(tableNum(VendTable), tableFieldgroupStr(VendTable, MexicanSharedInfoByParty)));

        DirPartyInformationCopy::copyInfoToEntitiesThatShareSameParty(this.Party, sourceFieldGroup, this, targetFieldGroups);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CountryRegionId</c> value from the <c>logisticsPostalAddress</c> table.
    /// </summary>
    /// <returns>
    /// The <c>CountryRegionId</c> value from the <c>logisticsPostalAddress</c> table.
    /// </returns>
    LogisticsAddressCountryRegionId countryRegionId()
    {
        return this.postalAddress().CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionName</Name>
				<Source><![CDATA[
    display LogisticsAddressCountryRegionShortName countryRegionName()
    {
        return LogisticsAddressCountryRegionTranslation::find(this.postalAddress().CountryRegionId).ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countyName</Name>
				<Source><![CDATA[
    display LogisticsAddressCountyName countyName()
    {
        LogisticsPostalAddress  postalAddress = this.postalAddress();
        return LogisticsAddressCounty::find(postalAddress.CountryRegionId, postalAddress.State, postalAddress.County).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMaxCur</Name>
				<Source><![CDATA[
    display VendCreditMaxCur creditMaxCur()
    {
        return CurrencyExchangeHelper::curAmount(this.CreditMax, this.Currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyName</Name>
				<Source><![CDATA[
    display CurrencyName currencyName()
    {
        return Currency::find(this.Currency).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerAccountName</Name>
				<Source><![CDATA[
    display CustInvoiceAccountName customerAccountName()
    {
        return DirPartyTable::findRec(this.Party).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        VendRequestAddVendor vendRequestAddVendor;
        VendRequestAddVendor vendRequestAddVendorNativeCompany;

        ttsbegin;

        smmBusRelTable::deleteFromCustVend(this.TableId,this.Party);

        InventPosting::deleteFromVend(this.AccountNum);
        if (PurchParameters::find().PurchaseCycle)
        {
            SalesPurchCycle::deleteFromVend(this.AccountNum);
        }

        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.AccountNum));
        }

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        VendBankAccount::deleteFromVend(this);

        super();

        DirPartyRelationship::removeLegalEntityRelationship(this.Party, DirSystemRelationshipType::Vendor);

        // Auto delete party at backend
        DirParty::autoDeleteParty(this.Party);

        // Ensure cross-company cascade delete from VendRequestAddVendor table.
        select firstonly crossCompany RecId, VendAccountNum, DataAreaId from vendRequestAddVendor
            where vendRequestAddVendor.Company == this.DataAreaId
               && vendRequestAddVendor.VendAccountNum == this.AccountNum;
        if (vendRequestAddVendor.RecId)
        {
            // The corresponded record in VendRequestAddVendor table exists and have to be deleted here manually
            // as cross-company cascade delete is not supported by the framework.
            // If not deleted, this record will prevent re-creation of vendor currently being deleted in the future!
            //
            // Change company to the required context
            changecompany(vendRequestAddVendor.DataAreaId)
            {
                // Do delete record (inside correct transaction scope)
                delete_from vendRequestAddVendorNativeCompany
                    where vendRequestAddVendorNativeCompany.Company == this.DataAreaId
                       && vendRequestAddVendorNativeCompany.VendAccountNum == this.AccountNum;
            }
        }

        TaxBusinessService::deleteTaxIdentificationDimension(this.TableId, this.RecId);
                
        // Clean up SpecTrans for Vendor being deleted
        SpecTransManager manager = SpecTransManager::newFromSpec(this, false);
        manager.deleteAll();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery address of the vendor.
    /// </summary>
    /// <returns>
    /// The delivery address of the vendor.
    /// </returns>
    public LogisticsPostalAddress deliveryAddress()
    {
        LogisticsLocationRecId logisticsLocationRecId = DirPartyTable::getLocationFromRole(this.dirPartyTable().RecId, LogisticsLocationRoleType::Delivery);

        return LogisticsPostalAddress::findByLocation(logisticsLocationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the vendor account for the current purchase agreement header record.
    /// </summary>
    /// <param name="_vendTable">
    /// A <c>VendTable</c> table buffer.
    /// </param>
    /// <returns>
    /// A String that contains the name of the Vendor.
    /// </returns>
    public display VendName displayVendName(VendTable _vendTable)
    {
        VendTable       vendTable;
        DirPartyTable   partyTable;

        if (this.AccountNum)
        {
            select firstonly Party from vendTable
                where vendTable.AccountNum == _vendTable.AccountNum
            join Name from partyTable
                where partyTable.RecId == vendTable.Party;
        }

        return partyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvModeName</Name>
				<Source><![CDATA[
    display VendDlvModeName dlvModeName()
    {
        return DlvMode::find(this.DlvMode).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBlockedReasonCode</Name>
				<Source><![CDATA[
    public edit ReasonCode editBlockedReasonCode(boolean set, ReasonCode _reasonCode)
    {
        VendOnHoldHistory vendOnHoldHistory;

        if (set)
        {
            ttsbegin;
            vendOnHoldHistory = VendOnHoldHistory::find(this.AccountNum, true);
            vendOnHoldHistory.ReasonCode = _reasonCode;
            vendOnHoldHistory.update();
            ttscommit;
        }
        else
        {
            _reasonCode = VendOnHoldHistory::find(this.AccountNum).ReasonCode;
        }

        return _reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    public edit VendContactPersonName editContactPersonName(boolean _set, ContactPersonName _name)
    {
        return this.CustVendTable::editContactPersonName(_set, _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the customer account number associated with the current vendor.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates whether the value should be stored.
    /// </param>
    /// <param name="_custAccount">
    /// A customer account number.
    /// </param>
    /// <returns>
    /// A customer account number.
    /// </returns>
    public edit CustAccount editCustAccount(boolean set, CustAccount _custAccount)
    {
        CustTable newCustTable;
        CustTable origCustTable;

        if (set)
        {
            ttsbegin;
            origCustTable = CustTable::findByVendor(this.AccountNum, true);
            newCustTable = CustTable::find(_custAccount, true);
            if (origCustTable.RecId != newCustTable.RecId) // changed the associated customer
            {
                if (origCustTable) // remove the old association if there was one
                {
                    origCustTable.VendAccount = '';
                    origCustTable.update();
                }
                if (_custAccount) // setup the new association if there is one
                {
                    newCustTable.VendAccount = this.AccountNum;
                    newCustTable.update();
                }
            }
            ttscommit;
        }
        else
        {
            newCustTable = CustTable::findByVendor(this.AccountNum);
        }

        return newCustTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editVendExceptionGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the <c>VendInvoiceExceptionGroup</c> table.
    /// </summary>
    /// <param name="set">
    /// A Boolean value that indicates if the <c>VendInvoiceExceptionGroup</c> table is set.
    /// </param>
    /// <param name="_vendInvoiceGroupId">
    /// The new <c>VendInvoiceGroupId</c> value when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <returns>
    /// The <c>VendInvoiceExceptionGroup</c> table of the record in the <c>VendExceptionGroup</c> table.
    /// </returns>
    public edit VendInvoiceExceptionGroup editVendExceptionGroupId(boolean set, VendInvoiceExceptionGroup _vendInvoiceGroupId)
    {
        if (set)
        {
            this.VendExceptionGroup = VendExceptionGroup::findByVendGroup(_vendInvoiceGroupId).RecId;
        }
        else
        {
            _vendInvoiceGroupId = VendExceptionGroup::find(this.VendExceptionGroup).VendExceptionGroup;
        }

        return _vendInvoiceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>email</Name>
				<Source><![CDATA[
    display Email email()
    {
        LogisticsElectronicAddress electronicAddress;

        electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Email);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscName</Name>
				<Source><![CDATA[
    display EndDiscName endDiscName()
    {
        return PriceDiscGroup::find(ModuleInventCustVend::Vend,
                                    PriceGroupType::EndDiscGroup,
                                    this.EndDisc).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceedMax</Name>
				<Source><![CDATA[
    AmountMST exceedMax(AmountMST   _nowBalance)
    {
        return (this.CreditMax ? -this.CreditMax - _nowBalance : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstOpenPayment</Name>
				<Source><![CDATA[
    CustVendTransOpen firstOpenPayment()
    {
        VendTransOpen vendTransOpen = this.CustVendTable::firstOpenPayment();

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstSettledPayment</Name>
				<Source><![CDATA[
    CustVendSettlement firstSettledPayment()
    {
        VendSettlement vendSettlement = this.CustVendTable::firstSettledPayment();

        return vendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeValueCur</Name>
				<Source><![CDATA[
    display VendCreditFreeValueCur freeValueCur(AmountMST _adjustment = 0)
    {
        return this.CustVendTable::freeValueCur(_adjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>freeValueMST</Name>
				<Source><![CDATA[
    display VendCreditFreeValueMST freeValueMST(AmountMST _adjustment = 0)
    {
        return this.CustVendTable::freeValueMST(_adjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTaxInformation_TH</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get default tax information of current vendor's invoice address.
    /// </summary>
    /// <returns>
    /// The tax information from vendor's invoice address.
    /// </returns>
    /// <remarks>
    /// If vendor has no invoice address, the primary address will be returned.
    /// </remarks>
    public TaxInformation_TH getDefaultTaxInformation_TH()
    {
        TaxInformation_TH       taxInformation_TH;
        LogisticsPostalAddress  invoiceAddress;

        invoiceAddress = this.invoiceAddress();

        if (invoiceAddress)
        {
            select firstonly taxInformation_TH
                where taxInformation_TH.LogisticsLocation == invoiceAddress.Location;
        }

        return taxInformation_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTaxRegistration_TH</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get default tax registration of current vendor's invoice address.
    /// </summary>
    /// <param name="_transDate">
    /// The effective date of tax registration, default is today.
    /// </param>
    /// <returns>
    /// The tax registration from vendor's invoice address.
    /// </returns>
    /// <remarks>
    /// If vendor has no invoice address, the primary address will be returned.
    /// </remarks>
    public TaxRegistration getDefaultTaxRegistration_TH(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        DirPartyLocation                        dirPartyLocation;
        TaxRegistration                         taxRegistration;
        TaxRegistrationTypeApplicabilityRule    taxRegistrationTypeApplicabilityRule;

        if (_transDate)
        {
            dirPartyLocation = DirPartyLocation::findByPartyLocation(
                this.Party,
                this.invoiceAddress().Location);

            if (dirPartyLocation)
            {
                select firstonly validTimeState(_transDate) taxRegistration
                    where taxRegistration.DirPartyLocation == dirPartyLocation.RecId
                    join RecId from taxRegistrationTypeApplicabilityRule
                        order by taxRegistrationTypeApplicabilityRule.IsPrimaryAddressRestricted desc
                        where taxRegistration.TaxRegistrationTypeApplicabilityRule == taxRegistrationTypeApplicabilityRule.RecId;
            }
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleDate</Name>
				<Source><![CDATA[
    public TransDate getSettleDate(SettleDatePrinc    _saveDatePrinciple      = SettleDatePrinc::DateOfPayment,
                                   TransDate          _saveDate               = dateNull())
    {
        return this.CustVendTable::getSettleDate(_saveDatePrinciple, _saveDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStructDepartment_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implementation of \Data Dictionary\Maps\CustVendTable\Methods\getStructDepartment_RU
    /// </summary>
    /// <returns>
    /// Returns current structure department
    /// </returns>
    public StructDepartment_RU getStructDepartment_RU()
    {
        return this.StructDepartment_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInformationVendTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// get TaxInformation of Vend.
    /// </summary>
    /// <param name="_forUpdate">
    /// whether the record can be update.
    /// </param>
    /// <returns>
    /// the Vend taxInformation transaction.
    /// </returns>
    public  TaxInformationVendTable_IN getTaxInformationVendTable_IN(boolean  _forUpdate = false)
    {
        TaxInformationVendTable_IN taxInformationVendTable_IN;

        taxInformationVendTable_IN.selectForUpdate(_forUpdate);

        select firstonly taxInformationVendTable_IN
            where taxInformationVendTable_IN.VendTable == this.AccountNum;

        return taxInformationVendTable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the withholding tax group of current vendor.
    /// </summary>
    /// <returns>
    /// The withholding tax group.
    /// </returns>
    /// <remarks>
    /// For Thailand, if the "Calculate withholding tax" is not checked, then always return empty.
    /// </remarks>
    public TaxWithholdGroup getTaxWithholdGroup()
    {
        if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled()
            && this.TaxWithholdCalculate == NoYes::No)
        {
            return '';
        }
        else
        {
            return this.TaxWithholdGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCurrentActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last <c>VendTable</c> record transaction date.
    /// </summary>
    /// <param name="_latestPossibleDate">
    /// The latest possible date for this instance of a vendor activity.
    /// </param>
    /// <returns>
    /// true if activity is found; otherwise, false.
    /// </returns>
    public boolean hasCurrentActivity(TransDateTime _latestPossibleDate)
    {
        boolean             hasActivity = false;
        TransDateTime       activityDate;
        VendInvoiceJour     vendInvoiceJour;
        PurchTable          purchTable;
        PurchRFQReplyTable  purchRFQReplyTable;
        VendRFQJour         vendRFQJour;

        //Last invoice journal
        select firstonly InvoiceDate from vendInvoiceJour
            order by InvoiceDate desc, InvoiceId desc
            where vendInvoiceJour.InvoiceAccount == this.AccountNum   &&
                  vendInvoiceJour.InvoiceId;

        activityDate = DateTimeUtil::newDateTime(vendInvoiceJour.InvoiceDate,0);
        hasActivity = (activityDate && activityDate >= _latestPossibleDate);

        //Last payment
        if (! hasActivity)
        {
            activityDate = DateTimeUtil::newDateTime(this.lastPayment().TransDate,0);
            hasActivity = (activityDate && activityDate >= _latestPossibleDate);
        }

        //Open purch req
        if (! hasActivity)
        {
            activityDate = PurchReqTable::earliestOpenVendActivity(this.AccountNum, this.DataAreaId);
            hasActivity = (activityDate && activityDate >= _latestPossibleDate);
        }

        //Open PO
        if (! hasActivity)
        {
            hasActivity = PurchTable::existVendOpenOrder(this.AccountNum);
        }

        //Last PO
        if (! hasActivity)
        {
            select firstonly CreatedDateTime from purchTable
                order by CreatedDateTime desc
                where purchTable.VendorRef == this.AccountNum;

            activityDate = purchTable.CreatedDateTime;
            hasActivity = (activityDate && activityDate >= _latestPossibleDate);
        }

        //Last RFQ Reply
        if (! hasActivity)
        {
            select firstonly CreatedDateTime from purchRFQReplyTable
                order by CreatedDateTime desc
                where purchRFQReplyTable.VendRef == this.AccountNum;

            activityDate = purchRFQReplyTable.CreatedDateTime;
            hasActivity = (activityDate && activityDate >= _latestPossibleDate);
        }

        //Last RFQ Sent
        if (! hasActivity)
        {
            select firstonly CreatedDateTime from vendRFQJour
                order by CreatedDateTime desc
                where vendRFQJour.VendAccount == this.AccountNum;

            activityDate = vendRFQJour.CreatedDateTime;
            hasActivity = (activityDate && activityDate >= _latestPossibleDate);
        }

        return hasActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasForecastPurch</Name>
				<Source><![CDATA[
    display ForecastHasPurch hasForecastPurch()
    {
        return (select forecastPurch
                    where forecastPurch.VendAccountId == this.AccountNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventOwnerTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if related owner transactions exist.
    /// </summary>
    /// <returns>
    /// true if related owner transactions exist.
    /// </returns>
    boolean hasInventOwnerTrans_RU()
    {
        InventOwner_RU  inventOwner;
        InventTrans     inventTrans;
        InventDim       inventDim;

        select firstonly RecId from inventOwner
            where inventOwner.AccountType       == InventOwnerAccountType_RU::Vend
               && inventOwner.AccountNum        == this.AccountNum
        join TableId from inventDim
            where inventDim.InventOwnerId_RU    == inventOwner.InventOwnerId
        join TableId from inventTrans
            where inventTrans.InventDimId       == inventDim.InventDimId;

        if (   !inventOwner.RecId
            && WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            WHSInventReserve inventReserve;

            select firstonly RecId from inventOwner
                where inventOwner.AccountType == InventOwnerAccountType_RU::Vend
                   && inventOwner.AccountNum == this.AccountNum
            exists join inventReserve
                where  inventReserve.InventOwnerId_RU == inventOwner.InventOwnerId
                    && inventReserve.AvailPhysical != 0;
        }

        return inventOwner.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the highest balance available for a selected vendor.
    /// </summary>
    /// <param name="_vendTable">
    /// A <c>VendTable</c> table buffer of the selected vendor.
    /// </param>
    /// <returns>
    /// The highest balance for the specified vendor.
    /// </returns>
    display Amount highestBalance(VendTable _vendTable)
    {
        return VendTable::calcHighestBalance(_vendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendGroup</Name>
				<Source><![CDATA[
    void initFromVendGroup(VendGroup _vendGroup)
    {
        #ISOCountryRegionCodes

        VendDefaultAccounts vendDefaultAccounts = VendDefaultAccounts::findDefault(this.AccountNum, curext(), this.VendGroup);

        this.defaultPaymTermId(_vendGroup);
        this.defaultPaymSched();

        this.defaultOffsetAccountType(vendDefaultAccounts);
        this.defaultOffsetLedgerDimension(vendDefaultAccounts);

        this.defaultTaxGroup(_vendGroup);

        //<GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.TaxPeriodPaymentCode_PL = _vendGroup.TaxPeriodPaymentCode_PL ?
                                           _vendGroup.TaxPeriodPaymentCode_PL :
                                           VendParameters::find().TaxPeriodPaymentCode_PL;
        }
        //</GEEPL>

        if (_vendGroup.DefaultDimension)
        {
            this.DefaultDimension = _vendGroup.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendTable</c> table record from a <c>smmBusRelTable</c> table record.
    /// </summary>
    /// <param name = "_smmBusRelTable">The <c>smmBusRelTable</c> table record from which to Initialize the <c>VendTable</c> record.</param>
    public void initFromSmmBusRelTable(smmBusRelTable _smmBusRelTable)
    {
        this.DefaultDimension   = _smmBusRelTable.DefaultDimension;
        this.VendGroup          = _smmBusRelTable.VendGroup;
        this.Currency           = _smmBusRelTable.Currency;
        this.CompanyNAFCode     = _smmBusRelTable.CompanyNAFCode;
        this.CompanyIdSiret     = _smmBusRelTable.CompanyIdSiret;
        this.Blocked            = _smmBusRelTable.Blocked;
        this.OneTimeVendor      = _smmBusRelTable.OneTimeRelation;
        this.CreditMax          = _smmBusRelTable.CreditMax;
        this.CreditRating       = _smmBusRelTable.CreditRating;
        this.DlvTerm            = _smmBusRelTable.DlvTerm;
        this.DlvMode            = _smmBusRelTable.DlvMode;
        this.FreightZone        = _smmBusRelTable.FreightZone;
        this.DestinationCodeId  = _smmBusRelTable.DestinationCodeId;
        this.SegmentId          = _smmBusRelTable.Segment;
        this.SubsegmentId       = _smmBusRelTable.Subsegment;
        this.CompanyChainId     = _smmBusRelTable.CompanyChain;
        this.MainContactWorker  = HcmWorker::find(_smmBusRelTable.MainContactWorker).RecId;
        this.Memo               = _smmBusRelTable.Memo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes account number with number sequence specified on vendor group if there is, else with number sequence specified on AP parameter.
    /// </summary>
    /// <param name = "_vendGroup">
    /// Vendor group.
	/// </param>
	public void initAccountNum(VendGroup _vendGroup = VendGroup::find(this.VendGroup))
    {
        if (_vendGroup.VendAccountNumSeq)
        {
            this.AccountNum = NumberSeq::newGetNumFromId(_vendGroup.VendAccountNumSeq).num();
        }
        else
        {
            this.AccountNum = SmmParameters::getNumber(smmNumbSeqUsed::Vendor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProspectiveVendorRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendTable</c> table record from a <c>VendProspectiveVendorRegistration</c> table record.
    /// </summary>
    /// <param name = "_vendorRegistration">
    /// The <c>VendProspectiveVendorRegistration</c> table record from which to Initialize the <c>VendTable</c> record.
    /// </param>
    public void initFromProspectiveVendorRegistration(VendProspectiveVendorRegistration _vendorRegistration)
    {
        this.initValue();
        this.VendGroup                    = _vendorRegistration.VendorGroup;

        this.initAccountNum();
        this.initFromVendGroup(VendGroup::find(this.VendGroup));

        this.Currency                     = _vendorRegistration.Currency;
        this.Party                        = _vendorRegistration.VendorParty;
        this.CompanyIdSiret               = _vendorRegistration.CompanyIdSiret;
        this.CompanyNAFCode               = _vendorRegistration.CompanyNAFCode;
        this.SmallBusiness                = _vendorRegistration.SmallBusiness;
        this.PaymTermId                   = _vendorRegistration.PaymTerm;
        this.LineOfBusinessId             = _vendorRegistration.LineOfBusinessId;
        this.FiscalCode                   = _vendorRegistration.FiscalCode;
        this.dba                          = _vendorRegistration.dba;
        this.ForeignEntityIndicator       = _vendorRegistration.ForeignOwnership;
        this.OrgId                        = _vendorRegistration.OrganizationIdentifier;
        this.Tax1099Fields                = _vendorRegistration.Tax1099Fields;

        unchecked(Uncheck::TableSecurityPermission)
        {
            this.vatNum                   = _vendorRegistration.vatNumber;
            this.Tax1099RegNum            = _vendorRegistration.Federal1099Number;
            this.TaxIDType                = _vendorRegistration.Federal1099NumberType;
            this.Tax1099NameChoice        = _vendorRegistration.Tax1099NameChoice;
            this.MinorityOwned            = _vendorRegistration.MinorityOwned;
            this.FemaleOwned              = _vendorRegistration.FemaleOwned;
            this.LocallyOwned             = _vendorRegistration.LocallyOwned;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.Party = 0;            // Reset PartyId, it might be set when templates are used

        // If the languageId and Currency are empty strings a blank new vendor is created in the table and thus
        // the following values should be initialized with default values. If the languageId and Currency are non-empty
        // the customer is created from a template and the values should not be touched.
        if (this.Currency == "")
        {
            this.Currency                   = Ledger::accountingCurrency(CompanyInfo::current());
            this.PurchAmountPurchaseOrder   = PurchParameters::find().PrintAmountOnPurchaseOrder;
        }

        //Check If W9-Validation is checked, if yes then set the W9Included to "checked" by default.
        if (VendParameters::find().w9Validation == NoYes::Yes)
        {
            this.w9Included = NoYes::Yes;
        }

        if (BrazilParameters::isEnabled())
        {
            this.initValue_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes brazilian field
    /// </summary>
    private void initValue_BR()
    {
        this.ICMSContributor_BR = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        
        ttsbegin;

        // <GEERU>
        if (countryRegion_RU)
        {
            this.setInventProfileId_RU();
        }
        // </GEERU>

        // Check if not associated to Party
        if (!this.Party)
        {
            DirPartyType partyType;
        
            // Create a Party entry for customer
            switch (DirAppParameters::find().VendDefaultPartyType)
            {
                case DirPartyBaseType::Person :
                    partyType = DirPartyType::Person;
                    break;
                case DirPartyBaseType::Organization :
                    partyType = DirPartyType::Organization;
                    break;
                default :
                    partyType = DirPartyType::None;
            }
            this.Party = DirPartyTable::createNew(partyType, this.AccountNum).RecId;
        }
        else
        {
            if (!this.VATNum && !VendParameters::find().VendTableCopyTaxRegistionNumAsTaxExemptNum)
            {
                this.copyPrimaryRegistrationNumberToVATMap(this);
            }
        }

        DictField field = new DictField(tableNum(VendTable), fieldNum(VendTable, Tax1099RegNum));
        if (field!=null)
        {
            if (field.rights() >= AccessType::Edit
                && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
            {
                // if user does not have access to the field, then it is presumable not inserted,
                // and if it is not inserted then it presumably does not need to be reformatted.
                this.Tax1099RegNum = Tax1099ElectronicCheck::formatTIN(this.Tax1099RegNum, this.TaxIDType);
            }
        }

        super();

        DirPartyRelationship::createLegalEntityRelationship(this.Party, this.DataAreaId, DirSystemRelationshipType::Vendor);

        smmTransLog::initTrans(this, smmLogAction::insert);
        // <GEERU>
        if (countryRegion_RU)
        {
            this.updateInventOwnerRelation_RU();
        }
        // </GEERU>

        // Create default location if using existing party
        LogisticsLocationDefaultAppUtil::createDefaultForExistingParty(this);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            FiscalInformationCopy_BR::copyFiscalInfoToCustVend(this);
        }
        // </GBR>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.copyInfoToParty();
        }

        if (this.Blocked)
        {
            VendOnHoldHistory::createHistoryRecord(this.AccountNum, this.Blocked);
        }

        if (this.OffsetLedgerDimension)
        {
            this.insertIntoVendDefaultAccounts(this.OffsetLedgerDimension);
        }
        
        DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(this, fieldNum(VendTable, AccountNum), this, fieldNum(VendTable, DefaultDimension));

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoVendDefaultAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts vendor default dimension record into <c>VendDefaultAccounts</c> table.
    /// </summary>
    /// <param name = "_offsetLedgerDimension">
    /// Ledger dimension value to be inserted.
    /// </param>
    private void insertIntoVendDefaultAccounts(LedgerDimensionBase _offsetLedgerDimension)
    {
        VendDefaultAccounts vendDefaultAccounts;

        if (_offsetLedgerDimension)
        {
            select firstonly RecId from vendDefaultAccounts
                where vendDefaultAccounts.VendAccount == this.AccountNum &&
                    vendDefaultAccounts.LedgerJournalACType == this.OffsetAccountType &&
                    vendDefaultAccounts.LedgerDimension == _offsetLedgerDimension;
        
            if (!vendDefaultAccounts.RecId)
            {
                DimensionAttributeValueCombination dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(_offsetLedgerDimension);
                container data = str2con(dimensionAttributeValueCombination.DisplayValue, ',', false);
                VendDefaultAccounts::writeFromPackedAccount(data, this.OffsetAccountType, this.AccountNum, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingPartner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InterCompanyTradingPartner</c> table that is based on the
    /// current vendor.
    /// </summary>
    /// <returns>
    /// A record in the <c>InterCompanyTradingPartner</c> table; otherwise, an empty record.
    /// </returns>
    public InterCompanyTradingPartner interCompanyTradingPartner()
    {
        return InterCompanyTradingPartner::findVendor(this.Party,
                                                      this.company()
                                                      );
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingPartnerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the account ID of the corresponding customer for the current vendor intercompany trading
    /// relation.
    /// </summary>
    /// <returns>
    /// A customer account ID of the corresponding customer intercompany trading partner.
    /// </returns>
    display CustAccount interCompanyTradingPartnerAccount()
    {
        InterCompanyTradingPartner  interCompanyTradingPartnerCustomer;
        InterCompanyTradingRelation interCompanyTradingRelation = this.interCompanyTradingPartner().interCompanyTradingRelation();

        if (interCompanyTradingRelation)
        {
            interCompanyTradingPartnerCustomer = InterCompanyTradingPartner::find(interCompanyTradingRelation.InterCompanyTradingCustomer);
        }

        return interCompanyTradingPartnerCustomer.custTable().AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingPartnerCompanyID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the company ID of the corresponding customer for the current vendor intercompany trading
    /// relation.
    /// </summary>
    /// <returns>
    /// A company ID of the corresponding customer intercompany trading partner.
    /// </returns>
    display InterCompanyCompanyId interCompanyTradingPartnerCompanyID()
    {
        InterCompanyTradingPartner  interCompanyTradingPartnerCustomer;
        InterCompanyTradingRelation interCompanyTradingRelation = this.interCompanyTradingPartner().interCompanyTradingRelation();

        if (interCompanyTradingRelation)
        {
            interCompanyTradingPartnerCustomer = InterCompanyTradingPartner::find(interCompanyTradingRelation.InterCompanyTradingCustomer);
        }

        return interCompanyTradingPartnerCustomer.CustomerDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingPartnerCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the trading partner for the corresponding customer of the current vendor intercompany trading
    /// relation.
    /// </summary>
    /// <returns>
    /// A <c>InterCompanyTradingPartner</c> record.
    /// </returns>
    public InterCompanyTradingPartner interCompanyTradingPartnerCustomer()
    {
        InterCompanyTradingPartner  interCompanyTradingPartnerCustomer;
        InterCompanyTradingRelation interCompanyTradingRelation = this.interCompanyTradingPartner().interCompanyTradingRelation();

        if (interCompanyTradingRelation)
        {
            interCompanyTradingPartnerCustomer = InterCompanyTradingPartner::find(interCompanyTradingRelation.InterCompanyTradingCustomer);
        }

        return interCompanyTradingPartnerCustomer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTradingRelationActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current vendor is in an active intercompany trading relation.
    /// </summary>
    /// <returns>
    /// true if the vendor is in an active intercompany trading relation; otherwise, false.
    /// </returns>
    display InterCompanyTradingActive interCompanyTradingRelationActive()
    {
        InterCompanyTradingRelation interCompanyTradingRelation = this.interCompanyTradingPartner().interCompanyTradingRelation();

        return (interCompanyTradingRelation && interCompanyTradingRelation.Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice location of the vendor.
    /// </summary>
    /// <returns>
    /// The invoice location of the vendor.
    /// </returns>
    public LogisticsLocationEntity invoiceAccountLocation()
    {
        LogisticsLocationDefault    defaults            = LogisticsLocationDefault::construct(this);
        LogisticsLocation           location, defaultLocation;
        LogisticsLocationEntity     locationEntity;
        LogisticsLocation           primaryLocation;
        LogisticsLocationRole       role                = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice);
        
        //Retrieve the default location for the invoice role type if it exists
        defaultLocation = defaults.getDefaultLocation(role);
        if (defaults.defaultExists(role)
            && (!VendTableSalesTaxTransactionBusinessAddressDefaultFlight::instance().isEnabled()
            || LogisticsLocation::isLocationActive(defaultLocation.RecId)))
        {
            location = defaultLocation;
        }

        //If there isn't a default location for the Invoice role, then look to see if the Primary postal address also has a role of Invoice.
        if (!location.RecId && defaults.primaryPostalExists())
        {
            primaryLocation = defaults.getPrimaryPostalLocation();
            if (primaryLocation.isRole(role.Type))
            {
                location = primaryLocation;
            }
        }

        //If we still don't have a location at this point, use the first address location that is of type Invoice.
        if (!location.RecId)
        {
            locationEntity = DirParty::location(this.Party, role.Type);
        }
        else
        {
            locationEntity = LogisticsLocationEntity::constructFromLocationRecId(location.RecId);
        }

        //Finally, if the Location has yet to be found, use the Primary address
        //The reason that we need to check each condition all the way to getPostalAddress() is that when we have a date effective
        //address that is no longer active, the LogisticsLocationEntity can still come back with a RecId, but will not have a valid postal address
        if ((!locationEntity.parmLocationRecId() || !locationEntity.getPostalAddress()) && primaryLocation.RecId)
        {
            locationEntity = LogisticsLocationEntity::constructFromLocationRecId(primaryLocation.RecId);
        }

        return locationEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccountName</Name>
				<Source><![CDATA[
    display VendInvoiceAccountName invoiceAccountName()
    {
        return VendTable::find(this.InvoiceAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress invoiceAddress()
    {
        LogisticsLocationEntity location;
        LogisticsPostalAddress  address
        ;
        location = this.invoiceAccountLocation();
        if (location)
        {
            address = location.getPostalAddress();
        }
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the average amount of invoices for a selected vendor.
    /// </summary>
    /// <param name="_vendTable">
    /// A <c>VendTable</c> table buffer of the selected vendor.
    /// </param>
    /// <returns>
    /// The average invoice amount of the selected vendor.
    /// </returns>
    display Amount invoiceAverage(VendTable _vendTable)
    {
        return VendTable::calcInvoiceAverage(_vendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a vendor is foreign.
    /// </summary>
    /// <returns>
    /// true if the vendor is foreign; otherwise, false.
    /// </returns>
    public NoYes isForeign()
    {
        return this.getTaxInformationVendTable_IN().IsForeign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeigner_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a vendor is identified as foreigner based on primary postal address and company
    /// </summary>
    /// <returns>
    /// true if a vendor is a foreigner; otherwise, false.
    /// </returns>
    public boolean isForeigner_BR()
    {
        boolean isForeigner = false;

        if (this.postalAddress().CountryRegionId != CompanyInfo::find().postalAddress().CountryRegionId)
        {
            isForeigner = true;
        }

        return isForeigner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGTA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a vendor is GTA.
    /// </summary>
    /// <returns>
    /// true if the vendor is GTA; otherwise, false.
    /// </returns>
    public NoYes isGTA()
    {
        return this.getTaxInformationVendTable_IN().IsGTA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymFeeCovered_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether bank fee is covered from vendor.
    /// </summary>
    /// <returns>
    /// True if vendor covers the bank fee; otherwise, false.
    /// </returns>
    public boolean isPaymFeeCovered_JP()
    {
        return (VendPaymFeeUtil_JP::isVendorPaymFeeEnabled()
                && this.IsPaymFeeCovered_JP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreferential</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a vendor is a Preferential.
    /// </summary>
    /// <returns>
    /// true if a vendor is a Preferential; otherwise, false.
    /// </returns>
    public NoYes isPreferential()
    {
        return this.getTaxInformationVendTable_IN().IsPreferential;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSSI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a vendor is SSI.
    /// </summary>
    /// <returns>
    /// true if the vendor is SSI; otherwise, false.
    /// </returns>
    public NoYes isSSI()
    {
        return this.getTaxInformationVendTable_IN().IsSSI;
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    LanguageId languageId()
    {
        return DirPartyTable::findRec(this.Party).LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the last invoice.
    /// </summary>
    /// <param name = "_vendInvoiceJour">The vendor invoice journal record.</param>
    /// <param name = "_invoiceCustomer">True if invoice is a customer account record.</param>
    /// <returns>The vendor invoice journal record.</returns>
    CustVendInvoiceJour lastInvoice(
        CustVendInvoiceJour _vendInvoiceJour,
        NoYes               _invoiceCustomer = NoYes::Yes)
    {
        return this.CustVendTable::lastInvoice(_vendInvoiceJour, _invoiceCustomer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last invoice date for the selected vendor.
    /// </summary>
    /// <returns>
    /// The last invoice date for the selected vendor.
    /// </returns>
    display InvoiceDate lastInvoiceDate()
    {
        VendInvoiceJour vendInvoiceJour;

        select firstonly InvoiceDate from vendInvoiceJour
            order by InvoiceDate desc , InvoiceId desc
            where vendInvoiceJour.InvoiceAccount == this.AccountNum
                && vendInvoiceJour.InvoiceId;

        return vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInvoiceTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice amount on the last date for the selected vendor.
    /// </summary>
    /// <returns>
    /// The invoice amount for the selected vendor.
    /// </returns>
    display Amount lastInvoiceTotal()
    {
        VendInvoiceJour vendInvoiceJour;

        select firstonly InvoiceAmount, CurrencyCode, InvoiceDate, Triangulation, ExchRate, ExchRateSecondary  from vendInvoiceJour
            order by InvoiceDate desc , InvoiceId desc
            where vendInvoiceJour.InvoiceAccount == this.AccountNum
                && vendInvoiceJour.InvoiceId;

        return  vendInvoiceJour.amountMST(vendInvoiceJour.InvoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPayment</Name>
				<Source><![CDATA[
    VendTrans lastPayment()
    {
        VendTrans  vendTrans;

        select firstonly vendTrans
            index hint AccountDateIdx
            order by TransDate desc, Voucher desc
            where vendTrans.AccountNum  == this.AccountNum  &&
                  vendTrans.Invoice == '';

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount last paid by the selected vendor.
    /// </summary>
    /// <returns>
    /// The amount last paid for the specified vendor.
    /// </returns>
    display Amount lastPaymentAmount()
    {
        return this.lastPayment().AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPaymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date on which the last payment was made for the selected vendor.
    /// </summary>
    /// <returns>
    /// The last transaction date for a specified vendor.
    /// </returns>
    display TransDate lastPaymentDate()
    {
        return this.lastPayment().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscName</Name>
				<Source><![CDATA[
    display LineDiscName lineDiscName()
    {
        return PriceDiscGroup::find(ModuleInventCustVend::Vend,
                                    PriceGroupType::LineDiscGroup,
                                    this.LineDisc).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the postal address of the vendor.
    /// </summary>
    /// <returns>
    /// The postal address of the vendor.
    /// </returns>
    public display LogisticsAddressing mcrAddress()
    {
        return this.postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDefaultDeliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default postal address record on the vendor.
    /// </summary>
    /// <returns>
    /// The default postal address record on the vendor.
    /// </returns>
    public LogisticsPostalAddress mcrDefaultDeliveryPostalAddress()
    {
        LogisticsLocationEntity location = LogisticsLocationEntity::constructFromLocationRecId(LogisticsLocationDefault::findSimpleDefaultByRoleType(this,LogisticsLocationRoleType::Delivery).RecId);

        return location.getPostalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the vendor.
    /// </summary>
    /// <returns>
    /// The name of the vendor.
    /// </returns>
    public display DirPartyName mcrDisplayPartyName()
    {
        DirPartyTable dirPartyTable  = DirPartyTable::findRec(this.Party);

        if (dirPartyTable)
        {
            return dirPartyTable.Name;
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDisplayPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the primary postal address of the vendor.
    /// </summary>
    /// <returns>
    /// The primary postal address of the vendor.
    /// </returns>
    public display LogisticsAddressing mcrDisplayPostalAddress()
    {
        return DirParty::primaryPostalAddress(this.Party).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrFindOrCreateEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the email of the <c>VendTable</c> record.
    /// </summary>
    /// <param name="_emailToCreate">
    /// The email address to assign to the <c>VendTable</c> record if one does not already exist.
    /// </param>
    /// <returns>
    /// The email address of the <c>VendTable</c> record.
    /// If an email already exists for this location, find it and return it.
    /// Otherwise, we'll create the email passed in as a parameter.
    /// </returns>
    public Email mcrFindOrCreateEmail(Email _emailToCreate)
    {
        LogisticsLocationEntity location = DirParty::primaryElectronicAddressLocation(this.Party, LogisticsElectronicAddressMethodType::Email);

        Email foundEmail = location.getEmail();
        if (foundEmail)
        {
            return foundEmail;
        }

        location.setElectronicAddressOn(LogisticsElectronicAddressMethodType::Email, _emailToCreate);

        return _emailToCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        #ISOCountryRegionCodes

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendTable, OrgId) :
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS]))
                {
                    if (this.RecId == 0
                        && (this.AccountNum == '' || Box::yesNo("@SYS113287", DialogButton::Yes) == DialogButton::Yes))
                    {
                        this.AccountNum = this.OrgId;
                    }
                    else
                    {
                        if (strCmp(this.OrgId, subStr(this.AccountNum, 1, strLen(this.OrgId))) != 0
                            && Box::yesNo(strFmt("@SYS113288", this.AccountNum), DialogButton::Yes) == DialogButton::Yes)
                        {
                            this.OrgId = this.orig().OrgId;
                        }
                    }
                }
                break;

            // <GEERU>
            case fieldNum(VendTable, InventProfileType_RU):
                this.setInventProfileId_RU();
                break;
            // </GEERU>

            case fieldNum(VendTable, VendorType_MX) :
                if (this.VendorType_MX == VendorType_MX::ForeignVendor)
                {
                    this.Rfc_MX = '';
                }
                break;

            case fieldNum(VendTable, Party):
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    this.copyInfoFromParty();
                }
                break;
            case fieldNum(VendTable, VendGroup):
                this.initFromVendGroup(VendGroup::find(this.VendGroup));
                break;
        }

        if (BrazilParameters::isEnabled())
        {
            this.modifiedField_BR(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs different actions depending on the field that was modified.
    /// </summary>
    /// <param name="_fieldId">
    /// Field identifier
    /// </param>
    private void modifiedField_BR(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(VendTable, InclTax):
                if (this.InclTax)
                {
                    info("@GLS390");
                }
                break;
            case fieldNum(VendTable, insscei_br):
                this.insscei_br = FiscalInformationUtil_BR::formatINSSCEI(this.insscei_br);
                break;
            case fieldNum(VendTable, nit_br):
                this.nit_br = FiscalInformationUtil_BR::formatNIT(this.nit_br);
                break;
            case fieldNum(VendTable, Party):
                FiscalInformationCopy_BR::copyFiscalInfoFromCustVend(this);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiLineDiscName</Name>
				<Source><![CDATA[
    display MultiLineDiscName multiLineDiscName()
    {
        return PriceDiscGroup::find(ModuleInventCustVend::Vend,
                                    PriceGroupType::MultiLineDiscGroup,
                                    this.MultiLineDisc).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the party associated with the current record.
    /// </summary>
    /// <returns>The name of the party.</returns>
    /// <remarks>
    /// Use this method to get party name when <c>DirPartyTable</c> is joined.
    /// </remarks>
    display VendName name()
    {
        DirPartyTable   dirPartyTable;
        VendName        vendName;
        boolean         isSet = false;
        try
        {

            if (this.hasRelatedTable(identifierStr(DirPartyTable_FK)))
            {
                dirPartyTable = this.relatedTable(identifierStr(DirPartyTable_FK)) as DirPartyTable;

                //Check to make sure the fields we are accessing are selected.
                if (dirPartyTable && dirPartyTable.isFieldDataRetrieved(fieldStr(DirPartyTable, Name)))
                {
                    vendName = dirPartyTable.Name;
                    isSet = true;
                }
            }
        }
        catch (Exception::Error)
        {
            isSet = false;
        }

        //If we aren't joined to DirPartyTable or it isn't selected, then do a query to get it.
        if (!isSet)
        {
            vendName = this.vendorName();
        }

        return vendName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the party associated with the current record.
    /// </summary>
    /// <returns>The name of the party.</returns>
    /// <remarks>
    /// The method has been added to get vendor name when <c>DirPartyTable</c> is not joined.
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    display VendName vendorName()
    {
        return DirPartyTable::getName(this.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameWithoutJoinedPartyRecord</Name>
				<Source><![CDATA[
    [SysObsolete("The method is no longer used.", false, 30\06\2018)]
    display VendName nameWithoutJoinedPartyRecord(boolean _tryToUseJoinedPartyRecord = true)
    {
        return this.vendorName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameAlias</Name>
				<Source><![CDATA[
    display NameAlias nameAlias()
    {
        DirPartyTable   dirPartyTable;
        NameAlias       nameAlias;
        boolean         isSet = false;

        if (this.hasRelatedTable(identifierStr(DirPartyTable_FK)))
        {
            dirPartyTable = this.relatedTable(identifierStr(DirPartyTable_FK));

            if (dirPartyTable)
            {
                //Check to make sure the fields we are accessing are selected.
                if (dirPartyTable.isFieldDataRetrieved(fieldStr(DirPartyTable, NameAlias)))
                {
                    nameAlias = dirPartyTable.NameAlias;
                    isSet = true;
                }
            }
        }

        //If we aren't joined to DirPartyTable or it isn't selected, then do a query to get it.
        if (!isSet)
        {
            nameAlias = DirPartyTable::findRec(this.Party).NameAlias;
        }

        return nameAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceCur</Name>
				<Source><![CDATA[
    public AmountCur openBalanceCur(TransDate      _fromDate       = dateNull(),
                                    TransDate      _toDate         = dateMax(),
                                    TransDate      _assessmentDate = dateNull(),
                                    CurrencyCode   _currency       = CompanyInfoHelper::standardCurrency())
    {
        return this.CustVendTable::openBalanceCur(_fromDate, _toDate, _assessmentDate, _currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceMST</Name>
				<Source><![CDATA[
    display AmountMST openBalanceMST(FromDate   _fromDate       = dateNull(),
                                     ToDate     _toDate         = dateMax(),
                                     TransDate  _assessmentDate = dateNull())
    {
        return this.CustVendTable::openBalanceMST(_fromDate, _toDate, _assessmentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceMSTDoc</Name>
				<Source><![CDATA[
    AmountMST openBalanceMSTDoc(TransDate   _transDate  = dateNull(),
                                FromDate    _fromDate   = dateNull(),
                                ToDate      _toDate     = dateMax())
    {
        return this.CustVendTable::openBalanceMSTDoc(_transDate, _fromDate, _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceMSTDue</Name>
				<Source><![CDATA[
    AmountMST openBalanceMSTDue(TransDate   _transDate  = dateNull(),
                                FromDate    _fromDate   = dateNull(),
                                ToDate      _toDate     = dateMax())
    {
        return this.CustVendTable::openBalanceMSTDue(_transDate, _fromDate, _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openBalanceMSTPerAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate open vendor balance with regards to contract (agreement)
    /// </summary>
    /// <param name="_agreementId">
    /// Agreement ID
    /// </param>
    /// <returns>
    /// Open vendor balance with regards to contract (agreement)
    /// </returns>
    public AmountMST openBalanceMSTPerAgreement_RU(AgreementId_RU _agreementId)
    {
        return CustVendOpenBalancePerAgreementCalc_RU::construct(CustVendACType::Vend, this.AccountNum).calc(_agreementId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInvoiceBalanceMST</Name>
				<Source><![CDATA[
    AmountMST openInvoiceBalanceMST(FromDate   _fromDate       = dateNull(),
                                    ToDate     _toDate         = dateMax(),
                                    TransDate  _assessmentDate = dateNull())
    {
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        VendSettlement  vendSettlement;
        AmountMST       openBalanceMST = 0;

        if (_assessmentDate)
        {
            select sum(SettleAmountMST),sum(ExchAdjustment) from vendSettlement
                group by AccountNum
                where vendSettlement.AccountNum == this.AccountNum
                   && vendSettlement.TransDate  >  _assessmentDate
            join vendTrans
                where vendTrans.RecId       == vendSettlement.TransRecId
                   && vendTrans.TransDate   >= _fromDate
                   && vendTrans.TransDate   <= _toDate
                   && (vendTrans.Invoice    != ''
                   || (vendTrans.Invoice    == '' && vendTrans.AmountMST    < 0));

            openBalanceMST  = vendSettlement.SettleAmountMST + vendSettlement.ExchAdjustment;
            openBalanceMST += this.openInvoiceBalanceMST(_fromDate, _toDate);
        }
        else
        {
            vendTrans       = this.transBuffer();
            vendTransOpen   = this.transOpenBuffer();

            while select sum(AmountMST) from vendTransOpen
            group by RefRecId
                where vendTransOpen.AccountNum  == this.AccountNum
                   && vendTransOpen.TransDate   >= _fromDate
                   && vendTransOpen.TransDate   <= _toDate
                join  vendTrans
                    where vendTrans.RecId       == vendTransOpen.RefRecId
                       && (vendTrans.Invoice    != ''
                       || (vendTrans.Invoice    == '' && vendTrans.AmountMST    < 0))
            {
                openBalanceMST += vendTransOpen.AmountMST;
            }
        }

        return openBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInvoiceBalanceMSTDoc</Name>
				<Source><![CDATA[
    AmountMST openInvoiceBalanceMSTDoc(TransDate   _transDate  = dateNull(),
                                       FromDate    _fromDate   = dateNull(),
                                       ToDate      _toDate     = dateMax())
    {
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        AmountMST       amountMST = 0;

        while select sum(AmountMST) from vendTransOpen
            order by RefRecId
            where vendTransOpen.AccountNum  == this.AccountNum
               && vendTransOpen.TransDate   <= _transDate
        exists join vendTrans
            where vendTrans.RecId           == vendTransOpen.RefRecId
               && ((vendTrans.DocumentDate
               &&   vendTrans.DocumentDate  >= _fromDate
               &&   vendTrans.DocumentDate  <= _toDate)
               ||  (!vendTrans.DocumentDate
               &&    vendTrans.TransDate    >= _fromDate
               &&    vendTrans.TransDate    <= _toDate))
               &&  (vendTrans.Invoice     != ''
               ||  (vendTrans.Invoice     == '' && vendTrans.AmountMST        < 0))
        {
            amountMST += vendTransOpen.AmountMST;
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInvoiceBalanceMSTDue</Name>
				<Source><![CDATA[
    AmountMST openInvoiceBalanceMSTDue(TransDate   _transDate  = dateNull(),
                                       FromDate    _fromDate   = dateNull(),
                                       ToDate      _toDate     = dateMax())
    {
        VendTransOpen   vendTransOpen;
        VendTrans       vendTrans;
        AmountMST       amountMST = 0;

        while select sum(AmountMST) from vendTransOpen
        group by RefRecId
            where vendTransOpen.AccountNum  == this.AccountNum
               && vendTransOpen.TransDate   <= _transDate
               && vendTransOpen.DueDate     >= _fromDate
               && vendTransOpen.DueDate     <= _toDate
            join RecId,Invoice,AmountMST from vendTrans
                where vendTrans.RecId       == vendTransOpen.RefRecId
                   && (vendTrans.Invoice    != ''
                   || (vendTrans.Invoice    == '' && vendTrans.AmountMST < 0))
        {
            amountMST += vendTransOpen.AmountMST;
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openPaymentBalanceMST</Name>
				<Source><![CDATA[
    AmountMST openPaymentBalanceMST(FromDate   _fromDate       = dateNull(),
                                    ToDate     _toDate         = dateMax(),
                                    TransDate  _assessmentDate = dateNull())
    {
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        VendSettlement  vendSettlement;
        AmountMST       openBalanceMST;

        if (_assessmentDate)
        {
            select sum(SettleAmountMST),sum(ExchAdjustment) from vendSettlement
                group by AccountNum
                where vendSettlement.AccountNum == this.AccountNum
                   && vendSettlement.TransDate  >  _assessmentDate
            join vendTrans
                where vendTrans.RecId       == vendSettlement.TransRecId
                   && vendTrans.TransDate   >= _fromDate
                   && vendTrans.TransDate   <= _toDate
                   && vendTrans.AmountMST    > 0
                   && vendTrans.Invoice     == '';
            openBalanceMST  = vendSettlement.SettleAmountMST + vendSettlement.ExchAdjustment;
            openBalanceMST += this.openPaymentBalanceMST(_fromDate, _toDate);
        }
        else
        {
            vendTrans       = this.transBuffer();
            vendTransOpen   = this.transOpenBuffer();

            while select sum(AmountMST) from vendTransOpen
            group by RefRecId
                where vendTransOpen.AccountNum  == this.AccountNum
                  &&  vendTransOpen.TransDate   >= _fromDate
                  &&  vendTransOpen.TransDate   <= _toDate
                join  vendTrans
                    where vendTrans.RecId       == vendTransOpen.RefRecId
                       && vendTrans.AmountMST    > 0
                       && vendTrans.Invoice     == ''
            {
                openBalanceMST += vendTransOpen.AmountMST;
            }
        }

        return openBalanceMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openPaymentBalanceMSTDoc</Name>
				<Source><![CDATA[
    AmountMST openPaymentBalanceMSTDoc(TransDate   _transDate  = dateNull(),
                                       FromDate    _fromDate   = dateNull(),
                                       ToDate      _toDate     = dateMax())
    {
        VendTrans       vendTrans;
        VendTransOpen   vendTransOpen;
        AmountMST       amountMST = 0;

        while select sum(AmountMST) from vendTransOpen
            order by RefRecId
            where vendTransOpen.AccountNum  == this.AccountNum  &&
                  vendTransOpen.TransDate   <= _transDate
         exists join vendTrans
            where vendTrans.RecId            == vendTransOpen.RefRecId  &&
                ((vendTrans.DocumentDate                                &&
                  vendTrans.DocumentDate     >= _fromDate               &&
                  vendTrans.DocumentDate     <= _toDate)                ||
                 (!vendTrans.DocumentDate                               &&
                  vendTrans.DocumentDate     >= _fromDate               &&
                  vendTrans.DocumentDate     <= _toDate))               &&
                  vendTrans.AmountMST         > 0                       &&
                  vendTrans.Invoice          == ''
        {
            amountMST += vendTransOpen.AmountMST;
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openPaymentBalanceMSTDue</Name>
				<Source><![CDATA[
    AmountMST openPaymentBalanceMSTDue(TransDate   _transDate  = dateNull(),
                                       FromDate    _fromDate   = dateNull(),
                                       ToDate      _toDate     = dateMax())
    {
        VendTransOpen   vendTransOpen;
        VendTrans       vendTrans;
        AmountMST       amountMST = 0;

        while select sum(AmountMST) from vendTransOpen
        group by RefRecId
            where vendTransOpen.AccountNum  == this.AccountNum
               && vendTransOpen.TransDate   <= _transDate
               && vendTransOpen.DueDate     >= _fromDate
               && vendTransOpen.DueDate     <= _toDate
            join RecId, AmountMST,Invoice from vendTrans
                where vendTrans.RecId  == vendTransOpen.RefRecId
                   && vendTrans.AmountMST    > 0
                   && vendTrans.Invoice     == ' '
        {
            amountMST += vendTransOpen.AmountMST;
        }
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the organization number for the vendor.
    /// </summary>
    /// <returns>
    /// The organization number if the vendor is of type organization; otherwise, an empty string.
    /// </returns>
    display DirOrganizationNumber organizationNumber()
    {
        DirOrganization organization = DirOrganization::find(this.Party);

        return organization.RecId ? organization.OrgNumber : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccount</Name>
				<Source><![CDATA[
    public DimensionDisplayValue parmOffsetAccount(DimensionDisplayValue _offsetAccount = '', LedgerJournalACType _offsetAccountType = this.OffsetAccountType)
    {
        DimensionAttributeValueCombination  ledgerDimension;
        DimensionDisplayValue               offsetAccount;

        if (!prmisDefault(_offsetAccountType))
        {
            this.OffsetAccountType = _offsetAccountType;
        }

        // If offsetAccount has been changed, update the backing ledger dimension value
        if (!prmisDefault(_offsetAccount))
        {
            if (_offsetAccount)
            {
                this.OffsetLedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_offsetAccount, _offsetAccountType);
                offsetAccount = _offsetAccount;
            }
            else
            {
                offsetAccount = '';
                this.OffsetLedgerDimension = 0;
            }
        }
        else if (this.OffsetLedgerDimension)
        {
            // If the offsetAccount has not been changed, then pull the value from ledger dimension as the master
            select firstonly DisplayValue from ledgerDimension where ledgerDimension.RecId == this.OffsetLedgerDimension;
            offsetAccount = ledgerDimension.DisplayValue;
        }

        return offsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyINN_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes.
    /// </summary>
    /// <returns>
    /// Value of INN property for the current party.
    /// </returns>
    public INN_RU partyINN_RU()
    {
        return this.partyINNasOfDate_RU(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyINNasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fetched.
    /// </param>
    /// <returns>
    /// Value of INN property for the current party and date.
    /// </returns>
    public INN_RU partyINNasOfDate_RU(TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(this.Party, TaxRegistrationTypesList::INN, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyKPPasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fetched.
    /// </param>
    /// <returns>
    /// Value of KPP property for the current party and date.
    /// </returns>
    public KPPU_RU partyKPPasOfDate_RU(TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(this.Party, TaxRegistrationTypesList::KPP, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKATOasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fetched.
    /// </param>
    /// <returns>
    /// Value of OKATO property for the current party and date.
    /// </returns>
    public OKATO_RU partyOKATOasOfDate_RU(TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(this.Party, TaxRegistrationTypesList::OKATO, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKDPasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fethed.
    /// </param>
    /// <returns>
    /// Value of OKDP property for the current party and date.
    /// </returns>
    public OKDP_RU partyOKDPasOfDate_RU(TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(this.Party, TaxRegistrationTypesList::OKDP, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKPO_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes.
    /// </summary>
    /// <returns>
    /// Value of OKPO property for the current party.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public KPPU_RU partyOKPO_RU()
    {
        return this.partyOKPOasOfDate_RU(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKPOasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fetched.
    /// </param>
    /// <returns>
    /// Value of OKPO property for the current party and date.
    /// </returns>
    public OKPO_RU partyOKPOasOfDate_RU(TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(this.Party, TaxRegistrationTypesList::OKPO, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyType</Name>
				<Source><![CDATA[
    DirPartyType partyType()
    {
        return DirPartyTable::findRec(this.Party).type();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of payment associated with the selected method of payment.
    /// </summary>
    /// <returns>
    /// An associated payment type for the selected method of payment.
    /// </returns>
    /// <remarks>
    /// If the user modifies the method of payment, this method will display the payment type associated
    /// with the selected method of payment.
    /// </remarks>
    display PaymType paymentType()
    {
        VendPaymModeTable vendPaymMode;
        str paymentType;

        select firstonly vendPaymMode
            where this.PaymMode == vendPaymMode.PaymMode;
        if (vendPaymMode)
        {
            paymentType = enum2str(vendPaymMode.PaymentType);
        }

        return paymentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymName</Name>
				<Source><![CDATA[
    display Description paymName()
    {
        return this.CustVendTable::paymName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>phone</Name>
				<Source><![CDATA[
    display Phone phone()
    {
        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Phone);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>phoneLocal</Name>
				<Source><![CDATA[
    display PhoneLocal phoneLocal()
    {
        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Phone);

        return electronicAddress ? electronicAddress.LocatorExtension : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddress</Name>
				<Source><![CDATA[
    LogisticsPostalAddress postalAddress()
    {
        return DirParty::primaryPostalAddress(this.Party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    display Name previewPaneTitle()
    {
        Name title;
        VendTable vendTable;
        DirPartyTable dirPartyTable;

        select firstonly AccountNum,Party from vendTable join RecId, Name from dirPartyTable where vendTable.Party == dirPartyTable.RecId && vendTable.RecId == this.RecId;
        title = vendTable.AccountNum + " : " + dirPartyTable.Name;

        return title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscGroupName</Name>
				<Source><![CDATA[
    display PriceDiscName priceDiscGroupName()
    {
        return PriceDiscGroup::find(ModuleInventCustVend::Vend,
                                    PriceGroupType::PriceGroup,
                                    this.PriceGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount purchLedgerDimension(VendPostingProfile _vendPostingProfile = VendParameters::find().PostingProfile)
    {
        LedgerDimensionDefaultAccount purchLedgerDimension;

        if (VendTransSummaryAndArrivalAccountsFlight::instance().isEnabled())
        {
            purchLedgerDimension = VendLedgerAccounts::purchasingLedgerDimensionV2(this.AccountNum, _vendPostingProfile);
        }
        else
        {
            purchLedgerDimension = VendLedgerAccounts::purchasingLedgerDimension(this.AccountNum, _vendPostingProfile);
        }

        return purchLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchOffsetLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount purchOffsetLedgerDimension(VendPostingProfile _vendPostingProfile = VendParameters::find().PostingProfile)
    {
        return VendLedgerAccounts::purchasingOffsetLedgerDimension(this.AccountNum, _vendPostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the foreign keys in other tables according to the change of the corresponding primary key
    /// value in this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        vendVendorInstrumentationLogger instrumentationLogger = vendVendorInstrumentationLogger::createLogger(tableStr(VendTable));
        
        using (var activity = instrumentationLogger.vendorActivities().renamePrimaryKey(this))
        {
            DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, this.orig());
            rename.syncRenamedValuePreSuper();

            using (var context = VendTableRenamePrimaryKeyContext::instance())
            {
                context.parmNewVendTable(this);
                context.parmOldVendTable(this.orig());

                super();

                if (VendTableRenameVendAccountForPurchAgreementFlight::instance().isEnabled()
                    && context.parmNewVendTable()
                    && context.parmOldVendTable())
                {
                    this.renamePrimaryKeyAgreementCrossCompany(context.parmNewVendTable(), context.parmOldVendTable());
                }
            }

            rename.syncRenamedValuePostSuper();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Inventory profile based on Inventory profile type
    /// </summary>
    public void setInventProfileId_RU()
    {
        if (this.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
            this.InventProfileType_RU != InventProfile_RU::find(this.InventProfileId_RU).InventProfileType)
        {
            this.InventProfileId_RU = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementBuffer</Name>
				<Source><![CDATA[
    VendSettlement settlementBuffer()
    {
        VendSettlement  vendSettlement;

        return vendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showContactPerson</Name>
				<Source><![CDATA[
    display ContactPersonName showContactPerson()
    {
        return ContactPerson::find(this.ContactPersonId).personName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPartyMatchIcon</Name>
				<Source><![CDATA[
    display DirPartyMatchIcon showPartyMatchIcon()
    {
        return DirParty::showPartyMatchIcon(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateName</Name>
				<Source><![CDATA[
    display LogisticsAddressStatename stateName()
    {
        LogisticsPostalAddress postalAddress = this.postalAddress();
        return LogisticsAddressState::find(postalAddress.CountryRegionId, postalAddress.State).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscriptionType_BR</Name>
				<Source><![CDATA[
    display CNPJCPFNum_BR subscriptionType_BR()
    {
        DirPartyTable dirPartyTable = DirPartyTable::findRec(this.Party);

        if (dirPartyTable.type() == DirPartyType::Organization)
        {
            return '02';
        }
        else if (dirPartyTable.type() == DirPartyType::Person)
        {
            return '01';
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount summaryLedgerDimension(VendPostingProfile _vendPostingProfile = VendParameters::find().PostingProfile)
    {
        return VendLedgerAccounts::summaryLedgerDimension(this.AccountNum, _vendPostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroupName</Name>
				<Source><![CDATA[
    display TaxGroupName taxGroupName()
    {
        return TaxGroupHeading::find(this.TaxGroup).TaxGroupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>telefax</Name>
				<Source><![CDATA[
    display TeleFax telefax()
    {
        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Fax);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>telex</Name>
				<Source><![CDATA[
    display Telex telex()
    {
        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Telex);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transBuffer</Name>
				<Source><![CDATA[
    VendTrans transBuffer()
    {
        VendTrans   vendTrans;

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpenBuffer</Name>
				<Source><![CDATA[
    VendTransOpen transOpenBuffer()
    {
        VendTransOpen   vendTransOpen;

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update(boolean _updateSmmBusRelTable = true, boolean _updateParty = true)
    {
        // <GEERU>
        #ISOCountryRegionCodes

        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        VendTable       this_Orig    = this.orig();
        ForecastPurch   forecastPurch;

        ttsbegin;

        // <GEERU>
        if (countryRegion_RU)
        {
            this.setInventProfileId_RU();
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        {
            DictField field = new DictField(tableNum(VendTable), fieldNum(VendTable, Tax1099RegNum));

            if ((field!=null) && (field.rights() >= AccessType::Edit))
            {
                // if user does not have access to the field, then it is presumable not modified,
                // and if it is not modified then it presumably does not need to be reformatted.
                this.Tax1099RegNum = Tax1099ElectronicCheck::formatTIN(this.Tax1099RegNum, this.TaxIDType);
            }
            else
            {
                // if you do not have access to Tax1099RegNum, ensure that you have not modified TaxIDType.
                if (this.TaxIDType != this_Orig.TaxIDType)
                {
                    // "You cannot change %1 from %2 to %3 because you do not have permission to update %4.  %1 has been changed back to %2."
                    checkFailed( strFmt( "@SYS327721" , fieldPName(VendTable,TaxIDType), this_Orig.TaxIDType, this.TaxIDType, fieldPName(VendTable,Tax1099RegNum) ) );
                    this.TaxIDType = this_Orig.TaxIDType;
                    throw Exception::Error;
                }
            }
        }

        if (this.orig().Blocked != this.Blocked)
        {
            VendOnHoldHistory::createHistoryRecord(this.AccountNum, this.Blocked);
        }

        super();

        if (_updateSmmBusRelTable)
        {
            smmBusRelTable::updateFromVendTableSFA2(this, '', false);
        }

        smmTransLog::initTrans(this, smmLogAction::update);
        // <GEERU>
        if (countryRegion_RU)
        {
            this.updateInventOwnerRelation_RU();
        }
        // </GEERU>

        if (this_Orig.VendGroup != this.VendGroup)
        {
            while select forupdate forecastPurch
                where forecastPurch.VendAccountId   == this.AccountNum      &&
                      forecastPurch.VendGroupId     == this_Orig.VendGroup  &&
                      forecastPurch.ExpandId        == 0
            {
                forecastPurch.VendGroupId = this.VendGroup;
                forecastPurch.update();
            }
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (!CustVendTableFiscalInformationCopyCheckFlight::instance().isEnabled() || !FiscalInformationCopy_BR::twoCustVendTableHaveSameFiscalInformation(this_Orig, this))
            {
                FiscalInformationCopy_BR::copyFiscalInfoToCustVend(this);
            }
        }
        // </GBR>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) && _updateParty)
        {
            this.copyInfoToParty();
        }

        if (this_Orig.OffsetLedgerDimension != this.OffsetLedgerDimension)
        {
            this.insertIntoVendDefaultAccounts(this.OffsetLedgerDimension);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventOwnerRelation_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update owner-customer relation for the customer that refers to the same party as current vendor
    /// </summary>
    public void updateInventOwnerRelation_RU()
    {
        InventOwner_RU  inventOwner;
        CustAccount     newCustAccount = CustTable::findByPartyRecId(this.Party).AccountNum;

        ttsbegin;

        update_recordset inventOwner
            setting AccountNumRelated = newCustAccount
            where inventOwner.AccountType   == InventOwnerAccountType_RU::Vend
               && inventOwner.AccountNum    == this.AccountNum;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOffsetAccount</Name>
				<Source><![CDATA[
    void updateOffsetAccount()
    {
        Counter             numOfDefaultAccounts;
        VendDefaultAccounts vendDefaultAccounts;

        ttsbegin;

        numOfDefaultAccounts = VendDefaultAccounts::numOfVendAccount(this.AccountNum);

        if (numOfDefaultAccounts > 1)
        {
            select firstonly vendDefaultAccounts
                where vendDefaultAccounts.VendAccount == this.AccountNum &&
                      vendDefaultAccounts.IsDefault;

            if (vendDefaultAccounts)
            {
                this.OffsetAccountType      = vendDefaultAccounts.LedgerJournalACType;
                this.OffsetLedgerDimension  = vendDefaultAccounts.parmLedgerDimension();
            }
            else
            {
                this.OffsetAccountType      = LedgerJournalACType::Ledger;
                this.OffsetLedgerDimension  = 0;
            }
        }
        else
        {
            if (numOfDefaultAccounts == 1)
            {
                vendDefaultAccounts         = VendDefaultAccounts::findVend(this.AccountNum);
                this.OffsetAccountType      = vendDefaultAccounts.LedgerJournalACType;
                this.OffsetLedgerDimension  = vendDefaultAccounts.parmLedgerDimension();
            }
            else
            {
                this.OffsetAccountType      = LedgerJournalACType::Ledger;
                this.OffsetLedgerDimension  = 0;
            }
        }

        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>url</Name>
				<Source><![CDATA[
    display URL url()
    {
        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::URL);

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCNAE_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate if CNAE information is correctly informed
    /// </summary>
    /// <returns>
    /// returns true if the information is correct.
    /// </returns>
    public boolean validateCNAE_BR()
    {
        boolean ret = FiscalInformationUtil_BR::isCNAEValid(this.cnae_br);

        if (ret)
        {
            this.cnae_br = FiscalInformationUtil_BR::formatCNAE(this.cnae_br);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCNPJCPF_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate if CNPJCFPF information is correctly informed
    /// </summary>
    /// <returns>
    /// returns true if the information is correct.
    /// </returns>
    private boolean validateCNPJCPF_BR()
    {
        DirPartyTable   dirPartyTable;
        FormObjectSet   formObjectSet;
        FormRun         formRun;
        VendTable       vendTable;

        if (FormDataUtil::isFormDataSource(this))
        {
            formObjectSet   = FormDataUtil::getFormDataSource(this);
            formRun         = formObjectSet.formRun();
            formObjectSet   = formRun.dataSource(tableStr(DirPartyTable));
            dirPartyTable   = formObjectSet.cursor();
        }
        else
        {
            dirPartyTable   = DirPartyTable::findRec(this.Party);
        }

        boolean ret = FiscalInformationUtil_BR::validateCNPJCPFNumByType(dirPartyTable.type(), this.cnpjcpfNum_BR);

        if (ret)
        {
            this.cnpjcpfNum_BR = FiscalInformationUtil_BR::formatCNPJCPF(dirPartyTable.type(), this.cnpjcpfNum_BR);
        }

        if (ret)
        {
            select firstonly vendTable
                where vendTable.cnpjcpfNum_BR  == this.cnpjcpfNum_BR &&
                        vendTable.AccountNum   != this.AccountNum;

            if (vendTable)
            {
                ret = checkFailed(strFmt("@GLS41", vendTable.AccountNum, vendTable.name()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        VendTable       vendTable;

        boolean ret = super();

        if (this.AccountNum)
        {
            // Verify that there are no other vendors linked to this vendor            
            select firstonly RecId from vendTable
                where vendTable.InvoiceAccount == this.AccountNum
                    && vendTable.AccountNum != this.AccountNum;

            if (vendTable.RecId)
            {
                ret = checkFailed("@SYS67134");
            } 
            else 
            {
                // Verify that there are no transactions posted for this vendor
                VendTrans vendTrans;
                select firstonly RecId from vendTrans
                    where vendTrans.AccountNum == this.AccountNum;

                if (vendTrans.RecId)
                {
                    ret = checkFailed("@SCM:VendorDeletionTransactionError");
                }

                // Verify that there are no 1099 transactions posted for this vendor
                VendSettlementTax1099 vendSettlementTax1099;
                select firstonly RecId from vendSettlementTax1099
                    where vendSettlementTax1099.VendAccount == this.AccountNum;

                if (vendSettlementTax1099.RecId)
                {
                    ret = checkFailed("@SCM:VendorDeletionTax1099TransactionError");
                }
            }

        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.hasInventOwnerTrans_RU())
            {
                ret = checkFailed(strFmt("@GLS115684", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
            }
        }
        // </GEERU>

        if (ret)
        {
            ret = CustVendNetAgreementRelationship::validatePartyAssociationNotInCustVendNetAgreementRelationship(this);
        }
        
        if (ret && this.CustVendTable::isRelatedToIncompleteWorkflowWorkItems())
        {
            ret = checkFailed("@SCM:VendorDeletionWorkflowWorkItemError");
        }

        // verify that this vendor is associated to any Commerce product hierarchy
        RetailAttributesLegalEntityLookup retailAttributesLegalEntityLookup;

        select firstonly retailAttributesLegalEntityLookup
            where retailAttributesLegalEntityLookup.PrimaryVendorId == this.AccountNum
                && retailAttributesLegalEntityLookup.LegalEntity == CompanyInfo::current();

        if (retailAttributesLegalEntityLookup)
        {
            return checkFailed(strfmt(("@Retail:RetailAttributesLegalEntityLookupPropertiesDeleteValidation"), this.AccountNum, EcoResCategory::find(retailAttributesLegalEntityLookup.Category).Name));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        #isoCountryRegionCodes

        const str CorrectVendCISVerificationNum = 'V########## or V##########& or V##########&&';
        const str CorrectVendCISNationalInsuranceNum = '&&######&';

        boolean ret = super(p1);
        TaxRegistrationValidator_MX taxRegistrationValidator;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            taxRegistrationValidator = TaxRegistrationValidator_MX::construct(this);
        }

        if (ret)
        {
            switch (p1)
            {
                case fieldNum(VendTable, vatNum):
                    ret = TaxVATNumTable::checkVATNum(this.vatNum, this, p1);
                    if (this.vatNum &&
                        LogisticsAddressCountryRegion::find(this.postalAddress().CountryRegionId).isOcode == #isoBE &&
                        SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
                    {
                        ret = ret && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(this.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID), this.vatNum, true);
                    }
                    if (ret)
                    {
                        this.checkVATNumUsed();
                    }
                    break;

                case fieldNum(VendTable, CreditMax) :
                    if (this.CreditMax < 0)
                    {
                        ret = checkFailed("@SYS69970");
                    }
                    // <GEERU>
                    else if (VendParameters::find().AgreementCreditLine_RU)
                    {
                        ret = AgreementHeaderExt_RU::checkCreditLimitWithoutAgreement(ModuleSalesPurch::Purch, this.AccountNum, this.CreditMax);
                    }
                    // </GEERU>
                    break;

                case fieldNum(VendTable, Tax1099RegNum):
                    if (CompanyInfo::find().Validate1099OnEntry && this.Tax1099RegNum != '')
                    {
                        ret = Tax1099ElectronicCheck::validateTINIRS(this.Tax1099RegNum, tablePName(VendTable), fieldPName(VendTable, Tax1099RegNum), false, this.AccountNum); // writeToFile
                    }
                    break;

                case fieldNum(VendTable, InventLocation) :
                    ret = this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                    break;

                case fieldNum(VendTable, OrgId) :
                    GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
                        [ [#isoIS, GlobalizationConstants::FeatureReferenceIS00002] ],
                        funcName()
                    );
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIS])
                    && CustVendSSNValidation_IS::checkSSN(this.OrgId) == false)
                    {
                        ret = checkFailed("@SYS113286");
                    }
                    break;

                case fieldNum(VendTable, BlockedReleaseDate) :
                    if (this.BlockedReleaseDate     != utcDateTimeNull() 
                        && this.BlockedReleaseDate  != this.orig().BlockedReleaseDate // Should be validated only when the date was changed to allow editing blocked records
                        && this.BlockedReleaseDate  < DateTimeUtil::utcNow())
                    {
                        ret = checkFailed("@SYS114595");
                    }
                    break;

                case fieldNum(VendTable, MatchingPolicy) :
                    if (!this.RecId || this.MatchingPolicy != this.orig().MatchingPolicy)
                    {
                        if (!PurchMatchingPolicyManager::canMatchingPolicyWithNotSetBeChanged(this.MatchingPolicy))
                        {
                            ret = checkFailed(strFmt("@SYS130454", VendParameters::find().MatchingPolicy));
                        }
                    }
                    break;

                // <GIN>
                case fieldNum(VendTable, TaxWithholdGroup):
                    if (this.TaxWithholdGroup
                        && TaxWithholdParameters_IN::checkTaxParameters()
                        && TaxWithholdGroupHeading::find(this.TaxWithholdGroup).TaxType_IN != TaxWithholdCodeType_IN::None)
                    {
                        ret = checkFailed(strFmt("@GLS5461", this.TaxWithholdGroup, TaxWithholdCodeType_IN::None));
                    }
                    break;
                // </GIN>
                case fieldNum(VendTable, Rfc_MX) :
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                    {
                        ret =  TaxRegistrationValidator_MX::construct(this).validateRFC(this.Rfc_MX, this.CompanyType_MX);
                    }
                    break;

                // <GJP>
                case fieldNum(VendTable, ConsDay_JP) :
                    if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled()
                        && !this.CustVendTable::isConsDayValid_JP())
                    {
                        // The value is out of its valid range - it must be between %1 and %2
                        ret = checkFailed(strFmt("@SYS87701", '0', '31'));
                    }
                    break;
                // </GJP>
                case fieldNum(VendTable, Curp_MX) :
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                    {
                        ret =  TaxRegistrationValidator_MX::construct(this).validateCurp(this.Curp_MX, this.CompanyType_MX);
                    }
                    break;

                case (fieldNum(VendTable, LegalRepresentativeName_MX)):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                    {
                         ret = taxRegistrationValidator.validateLegalRepresentativeName(this.LegalRepresentativeName_MX);
                    }
                    break;

                case (fieldNum(VendTable, LegalRepresentativeRfc_MX)):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) && this.LegalRepresentativeRfc_MX)
                    {
                        ret = taxRegistrationValidator.validateRepresentativeInformation();
                    }
                    break;

                case (fieldNum(VendTable, LegalRepresentativeCurp_MX)):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]) && this.LegalRepresentativeCurp_MX)
                    {
                        ret = taxRegistrationValidator.validateRepresentativeInformation();
                    }
                    break;
                
                case fieldNum(VendTable, StateInscription_MX):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                    {
                        ret =  TaxRegistrationValidator_MX::construct(this).validateStateInscription(this.StateInscription_MX);
                    }
                    break;

                case fieldNum(VendTable, OperationType_MX) :
                    if (   this.OperationType_MX == VendorOperationType_MX::RentLease
                        && this.VendorType_MX    == VendorType_MX::ForeignVendor
                        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                    {
                        ret = checkFailed(strFmt("@SYS312599", this.OperationType_MX));
                    }
                    break;

                case fieldNum(VendTable, ForeignTaxRegistration_MX):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                    {
                        ret =  TaxRegistrationValidator_MX::construct(this).validateForeignTaxRegistration(this.ForeignTaxRegistration_MX);
                    }
                    break;

                case fieldNum(VendTable, Nationality_MX):
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                    {
                        ret =  TaxRegistrationValidator_MX::construct(this).validateNationality(this.Nationality_MX);
                    }
                    break;

                case fieldNum(VendTable, cisVerificationNum):
                    if (this.cisVerificationNum != ''
                        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoIE])
                        && !VendTable::validateCISVerificationNum(this.cisVerificationNum))
                    {
                        ret = checkFailed(strFmt("@SYS4000254",  extendedTypeId2pname(extendedTypeNum(VendCISVerificationNum)), CorrectVendCISVerificationNum));
                    }
                    break;

                case fieldNum(VendTable, cisNationalInsuranceNum):
                    if (this.cisNationalInsuranceNum != ''
                        && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoIE])
                        && !VendTable::validateCISNationalInsuranceNum(this.cisNationalInsuranceNum))
                    {
                        ret = checkFailed(strFmt("@SYS4000254",  extendedTypeId2pname(extendedTypeNum(VendCISNationalInsuranceNum)), CorrectVendCISNationalInsuranceNum));
                    }
                    break;

                case fieldNum(VendTable, DefaultInventStatusId):
                    if (this.DefaultInventStatusId && WHSInventStatus::isBlockingStatus(this.DefaultInventStatusId))
                    {
                        ret = checkFailed("@WAX3363");
                    }
                    break;
                case fieldNum(VendTable, TaxVendorChargeTaxToleranceAmount):
                    if (this.TaxVendorChargeTaxToleranceAmount < 0)
                    {
                        ret = checkFailed("@TaxIntegration:ToleranceAmountCheckFailedLabel");
                    }
                    break;
                case fieldNum(VendTable, TaxVendorChargeTaxTolerancePercent):
                    if (this.TaxVendorChargeTaxTolerancePercent < 0)
                    {
                        ret = checkFailed("@TaxIntegration:TolerancePercentCheckFailedLabel");
                    }
                    break;
            }
        }

        ret = ret && this.validateField_BR(p1);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates brazilian fields
    /// </summary>
    /// <param name="_fieldId">
    /// Field identifier
    /// </param>
    /// <returns>
    /// True if field validation is ok otherwise false
    /// </returns>
    private boolean validateField_BR(FieldId _fieldId)
    {
        // Call to BrazilParameters::isEnabled() must happen inside each case so it is only called when necessary. Even if the call is cheap, it adds up if called for all fields.
        switch (_fieldId)
        {
            case fieldNum(VendTable, cnpjcpfNum_BR):
                if (this.cnpjcpfNum_BR
                    && BrazilParameters::isEnabled())
                {
                    return this.validateCNPJCPF_BR();
                }
                break;

            case fieldNum(VendTable, cnae_br):
                if (this.cnae_br
                    && BrazilParameters::isEnabled())
                {
                    return this.validateCNAE_BR();
                }
                break;

            case fieldNum(VendTable, ieNum_BR):
                if (this.ieNum_BR
                    && BrazilParameters::isEnabled())
                {
                    return this.validateIENum_BR();
                }
                break;

            case fieldNum(VendTable, ForeignerId_BR):
                if (this.ForeignerId_BR
                    && BrazilParameters::isEnabled())
                {
                    return this.validateForeignerId_BR();
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForeignerId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if Foreigner ID inforamtion is correctly informed
    /// </summary>
    /// <returns>
    /// true if the information is correct; otherwise, false.
    /// </returns>
    private boolean validateForeignerId_BR()
    {
        return FiscalInformationUtil_BR::isForeignerIdValid(this.ForeignerId_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIENum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate if IE information is correctly informed
    /// </summary>
    /// <returns>
    /// returns true if the information is correct.
    /// </returns>
    protected boolean validateIENum_BR()
    {
        DirPartyTable   dirPartyTable;
        FormObjectSet   formObjectSet;
        FormRun         formRun;

        if (FormDataUtil::isFormDataSource(this))
        {
            formObjectSet   = FormDataUtil::getFormDataSource(this);
            formRun         = formObjectSet.formRun();
            formObjectSet   = formRun.dataSource(tableStr(DirPartyTable));
            dirPartyTable   = formObjectSet.cursor();
        }
        else
        {
            dirPartyTable   = DirPartyTable::findRec(this.Party);
        }

        return FiscalInformationUtil_BR::validateIENum(dirPartyTable.type(), this.ieNum_BR, this.AccountNum, this.postalAddress().State);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIRSData</Name>
				<Source><![CDATA[
    boolean validateIRSData(boolean writeToFile = false)
    {
        boolean                 ret;
        boolean                 nameOK;
        boolean                 streetOK;
        boolean                 cityOK;
        boolean                 stateOK;
        boolean                 zipCodeOK;
        boolean                 tax1099RegNumOK;
        LogisticsPostalAddress  postalAddress;

        setPrefix(strFmt("@SYS84735", "@SYS84767"));

        nameOK = Tax1099ElectronicCheck::validateForIRS(this.name(), tablePName(VendTable), fieldPName(DirPartyTable, Name), writeToFile, this.AccountNum);

        postalAddress = this.postalAddress();
        streetOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.Street, tablePName(VendTable), fieldPName(LogisticsPostalAddress, Street), writeToFile, this.AccountNum);

        cityOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.City, tablePName(VendTable), fieldPName(LogisticsPostalAddress, City), writeToFile, this.AccountNum);

        stateOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.State, tablePName(VendTable), fieldPName(LogisticsPostalAddress, State), writeToFile, this.AccountNum);

        zipCodeOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.ZipCode, tablePName(VendTable), fieldPName(LogisticsPostalAddress, ZipCode), writeToFile, this.AccountNum);

        // Assume that Tax1099RegNum is valid if no access to the field
        // because no access to field implies we could not have modified it.
        DictField field = new DictField(tableNum(VendTable), fieldNum(VendTable, Tax1099RegNum));
        if (field!=null)
        {
            tax1099RegNumOK = !(field.rights() >= AccessType::View)
            || Tax1099ElectronicCheck::validateTINIRS(this.Tax1099RegNum, tablePName(VendTable), fieldPName(VendTable, Tax1099RegNum), writeToFile, this.AccountNum);
        }

        ret = nameOK && streetOK && cityOK && stateOK && zipCodeOK && tax1099RegNumOK;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendContactPerson</Name>
				<Source><![CDATA[
    private boolean validateVendContactPerson()
    {
        boolean ret = false;
        ContactPerson contactPerson = null;

        if (this.ContactPersonId && this.AccountNum)
        {
            select firstonly contactPerson
                index hint ContactPersonId
                where contactPerson.ContactPersonId == this.ContactPersonId &&
                      contactPerson.ContactForParty == this.Party;

            ret = (contactPerson != null);
        }
        else if (!this.ContactPersonId)
        {
            // ContactPerson is not required so if _contactPersonId is null, return valid
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite()
    {
        #isoCountryRegionCodes

        boolean ret = super();

        if (ret)
        {
            DictField field = new DictField(tableNum(VendTable), fieldNum(VendTable, Tax1099RegNum));

            if (   (this.Tax1099Reports == NoYes::Yes && !this.Tax1099RegNum)
                && (field.rights() >= AccessType::View)
                && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]) )
            {
                // Federal tax ID hasn't been specified for vendor %1
                checkFailed(strFmt("@SYS104370", this.AccountNum));
            }

            if (!this.OneTimeVendor && TaxVATNumTable::isVATNumMandatory(VendParameters::find().MandatoryVATNum, this))
            {
                ret = checkFailed("@SYS54494");
            }
            // <GIN>
            if (!TaxWithholdParameters_IN::checkTaxParameters())
            {
                // if India withholding tax is enable, the validation is handled at TaxinformationVendTable_IN
                //</GIN>
                if (this.TaxWithholdCalculate && this.TaxWithholdGroup == '')
                {
                    ret = checkFailed(strFmt("@SYS81766",
                                             fieldId2pname(tableNum(VendTable), fieldNum(VendTable, TaxWithholdCalculate)),
                                             fieldId2pname(tableNum(VendTable), fieldNum(VendTable, TaxWithholdGroup))));
                }
                // <GIN>
            }
            // </GIN>
        }

        if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        {
            if (CompanyInfo::find().Validate1099OnEntry && this.Tax1099Reports == NoYes::Yes)
            {
                ret = this.validateIRSData(false);
            }
        }

        if (ret)
        {
            if (!this.validateVendContactPerson())
            {
                ret =  checkFailed("@SYS136784");
            }
        }

        // Verify if MandatoryTaxGroup check is set on VendParameters.
        if (ret && !this.TaxGroup && VendParameters::find().MandatoryTaxGroup)
        {
            ret = checkFailed("@SYS113298");
        }

        // <GEERU>
        if (ret && this.vatTaxAgent_RU && ! this.vatOperationCode_RU)
        {
            ret = checkFailed("@GLS112883");
        }
        
        VendTable this_orig = this.orig();
        
        if (ret
            && this_orig.Party
            && this_orig.Party != this.Party
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            )
        {
            if (! this.checkRelatedAgreement_RU())
            {
                ret = checkFailed("@GLS115694");
            }
        }

        if (   this.SeparateDivisionId_RU
            && Branches_RU::find(this.SeparateDivisionId_RU).VendAccount != this.AccountNum)
        {
            ret = checkFailed("@SYS4002843");
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            TaxRegistrationValidator_MX taxRegistrationValidator = TaxRegistrationValidator_MX::construct(this);
            ret = taxRegistrationValidator.validateVendorTaxRegistration() && ret;
        }

        if (ret && !CustVendTable::validateContactForParty(true, this.ContactPersonId, this.Party))
        {
            ret = checkFailed("@SCM:InvalidPrimaryContactErrorMessage");
        }

        if (ret
            && VendBankAccountChangeProposalFeature::instance().isEnabled()
            && VendBankAccount::validateIsDraft(this.AccountNum, this.BankAccount, this.company()))
        {
            ret = checkFailed(strFmt("@AccountsPayable:VendBankAccountValidateIsDraftError", this.BankAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBankAccount_BR</Name>
				<Source><![CDATA[
    display BankAccountNum_BR vendBankAccount_BR()
    {
        return VendBankAccount::find(this.AccountNum, this.BankAccount).account_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBankAgency_BR</Name>
				<Source><![CDATA[
    display BankAgency_BR vendBankAgency_BR()
    {
        return VendBankAccount::find(this.AccountNum, this.BankAccount).agency_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBankcode_BR</Name>
				<Source><![CDATA[
    display BankCode_BR vendBankcode_BR()
    {
        return VendBankAccount::find(this.AccountNum, this.BankAccount).bankcode_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBankDAC_BR</Name>
				<Source><![CDATA[
    display BankDAC_BR vendBankDAC_BR()
    {
        return VendBankAccount::find(this.AccountNum, this.BankAccount).dac_br();
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCNPJ_BR</Name>
				<Source><![CDATA[
    display CNPJCPFNum_BR vendCNPJ_BR()
    {
        return strAlpha(this.cnpjcpfNum_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterToExcludeBlockedForPurchasing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the query range filters to the specified query to filter out vendors that are blocked for
    /// purchasing.
    /// </summary>
    /// <param name="_query">
    /// The query to which to add filters. The data sources of the query must include the <c>VendTable</c>
    /// table exactly one time.
    /// </param>
    public static void addFilterToExcludeBlockedForPurchasing(Query _query)
    {
        // vendors must not be Blocked for Purchasing, which means:
        // - either
        //   -- not blocked for All,
        //   -- not blocked for Requisition,
        // - or
        //   -- blocking has been released/lifted as of now or earlier
        QueryBuildDataSource    qbdsVendTable = _query.dataSourceTable(tableNum(VendTable));
        QueryBuildRange         rangeBlocked  = CatDisplayHelper::addHiddenRange(qbdsVendTable, fieldNum(VendTable, Blocked));

        rangeBlocked.value(
            strFmt( '(((%1 != %2) && (%1 != %3)) || (%4 <= %5))',
                strFmt('%1.%2',
                    qbdsVendTable.name(),
                    fieldStr(VendTable, Blocked)
                ),
                enum2int(CustVendorBlocked::All),
                enum2int(CustVendorBlocked::Requisition),
                strFmt('%1.%2',
                    qbdsVendTable.name(),
                    fieldStr(VendTable, BlockedReleaseDate)
                ),
                DateTimeUtil::toStr((DateTimeUtil::utcNow()))
            )
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>blocked</Name>
				<Source><![CDATA[
    static CustVendorBlocked blocked(VendAccount vendAccount)
    {
        CustVendorBlocked ret = VendTable::find(vendAccount).Blocked;
        return (ret == CustVendorBlocked::Never) ? CustVendorBlocked::No : ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockedReleaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BlockedReleaseDate</c> field value.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number.
    /// </param>
    /// <returns>
    /// The UTC <c>Date</c> value.
    /// </returns>
    static VendBlockedReleaseDate blockedReleaseDate(VendAccount _vendAccount)
    {
        return VendTable::find(_vendAccount).BlockedReleaseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHighestBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the highest balance available for a selected vendor.
    /// </summary>
    /// <param name="_vendTable">
    /// A <c>VendTable</c> table buffer of the selected vendor.
    /// </param>
    /// <returns>
    /// The highest balance of the specified vendor.
    /// </returns>
    public static Amount calcHighestBalance(VendTable _vendTable)
    {
        VendTrans               vendTrans;
        AmountMST               balance;
        Amount                  highestBalance;

        while select sum(AmountMST) from vendTrans
            group by TransDate
            where vendTrans.AccountNum == _vendTable.AccountNum
        {
            balance -= vendTrans.AmountMST;
            highestBalance = max(highestBalance,balance);
        }

        return highestBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceAverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the average amount of invoices for a selected vendor.
    /// </summary>
    /// <param name="_vendTable">
    /// A <c>VendTable</c> table buffer of the selected vendor.
    /// </param>
    /// <returns>
    /// The average invoice amount of the selected vendor.
    /// </returns>
    public static Amount calcInvoiceAverage(VendTable _vendTable)
    {
        VendInvoiceJour         vendInvoiceJour;
        Counter                 numOfInvoices;
        Amount                  invoiceAverage;
        NoYes                   invoiceCustomer;

        numOfInvoices = 0;
        invoiceCustomer = NoYes::Yes;

        while select vendInvoiceJour
            where ((vendInvoiceJour.InvoiceAccount == _vendTable.AccountNum && invoiceCustomer)  ||
                (vendInvoiceJour.OrderAccount == _vendTable.AccountNum && !invoiceCustomer))
        {
            numOfInvoices++;
            invoiceAverage += vendInvoiceJour.amountMST(vendInvoiceJour.SalesBalance);
        }

        invoiceAverage = numOfInvoices  ? invoiceAverage/ numOfInvoices : 0;

        return invoiceAverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canVendorBeUpdated</Name>
				<Source><![CDATA[
    static boolean canVendorBeUpdated(VendAccount           _vendAccount,
                                      VendInvoiceAccount    _invoiceAccount,
                                      DocumentStatus        _documentStatus = DocumentStatus::None)
    {
        boolean                  ok;
        boolean                  isVendReleaseDateExpired;
        CustVendorBlocked        blockedVendAccount;
        CustVendorBlocked        blockedInvoiceAccount;

        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        //initializations to local variables
        ok = true;
        VendTable vendTableLoc = VendTable::find(_vendAccount);
        VendBlockedReleaseDate vendReleaseDate = vendTableLoc.BlockedReleaseDate;
        blockedVendAccount = VendTable::blocked(_vendAccount);
        blockedInvoiceAccount = VendTable::blocked(_invoiceAccount);
        isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(_vendAccount);

        // <GEERU>
        if (_documentStatus == DocumentStatus::Invoice ||
            _documentStatus == DocumentStatus::Facture_RU)
        // </GEERU>
        {
            if(blockedInvoiceAccount == CustVendorBlocked::Invoice || blockedInvoiceAccount == CustVendorBlocked::All)
            {
                if (!vendReleaseDate || !isVendReleaseDateExpired)
                {
                    ok = false;
                }
            }
            if (ok && !isVendReleaseDateExpired 
                && blockedVendAccount != CustVendorBlocked::Payment
                && blockedVendAccount != CustVendorBlocked::No 
                && blockedInvoiceAccount != CustVendorBlocked::No)
            {
                ok = blockedInvoiceAccount == CustVendorBlocked::Payment
                    || (blockedInvoiceAccount == CustVendorBlocked::Requisition
                        && (blockedVendAccount == CustVendorBlocked::Invoice || blockedVendAccount == CustVendorBlocked::Requisition))
                    || (blockedInvoiceAccount == CustVendorBlocked::PurchOrder
                            && (blockedVendAccount == CustVendorBlocked::Invoice || blockedVendAccount == CustVendorBlocked::PurchOrder));
            }
        }
        else
        {
            if (isVendReleaseDateExpired && blockedVendAccount == CustVendorBlocked::All)
            {
                ok = true;
            }
            else
            {
                ok = !(blockedVendAccount == CustVendorBlocked::All);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimit</Name>
				<Source><![CDATA[
    static boolean checkCreditLimit(VendAccount          _vendAccount,
                                           TypeOfCreditmaxCheck _check,
                                           AmountMST            _amountMST = 0,
                                           PurchId              _excludePurchId = '',
                                           AgreementHeaderExtRecId_RU _agreementHeaderExtRecId = 0,
                                           TableId              _tableId        = 0,
                                           RecId                _recId          = 0)
    {
        VendTable   vendTable = VendTable::find(_vendAccount);
        AmountMST   openBalanceMst;
        
        // <GEERU>
        #ISOCountryRegionCodes

        AmountMST   agreementCreditLimitMax;
        boolean     checkAgreementLimit = VendParameters::find().AgreementCreditLine_RU;
        PurchAgreementHeaderExt_RU purchAgreementHeaderExt;
        // </GEERU>

        if (vendTable.CreditMax > 0)
        {
            // <GEERU>
            if (checkAgreementLimit)
            {
                if (_agreementHeaderExtRecId)
                {
                    purchAgreementHeaderExt = PurchAgreementHeaderExt_RU::find(_agreementHeaderExtRecId);
                    agreementCreditLimitMax = purchAgreementHeaderExt.CreditMax;
                }
                else
                {
                    agreementCreditLimitMax = vendTable.CreditMax - PurchAgreementHeaderExt_RU::creditLimitPerVendAccount(vendTable.AccountNum);
                }
            }
            else
            {
                agreementCreditLimitMax = vendTable.CreditMax;
            }
            // </GEERU>
            if (_check != TypeOfCreditmaxCheck::None)
            {
                // <GEERU>
                if (checkAgreementLimit)
                {
                    openBalanceMst = -vendTable.openBalanceMSTPerAgreement_RU(purchAgreementHeaderExt.AgreementId) +
                        vendTable.balanceMarked_RU(_tableId,_recId,
                            AgreementHeader::find(purchAgreementHeaderExt.AgreementHeader).AgreementClassification);
                }
                else
                {
                    // </GEERU>
                    openBalanceMst = -vendTable.openBalanceMST();
                    // <GEERU>
                }
                // </GEERU>
            }

            return VendTable::checkCreditLimitForCreditMaxCheck(_vendAccount, _check, openBalanceMst, agreementCreditLimitMax, checkAgreementLimit, _amountMST, _excludePurchId, _agreementHeaderExtRecId);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditLimitForCreditMaxCheck</Name>
				<Source><![CDATA[
    [Hookable(true)]
    protected static boolean checkCreditLimitForCreditMaxCheck(
        VendAccount                 _vendAccount,
        TypeOfCreditmaxCheck        _check,
        AmountMST                   _openBalanceMST,
        AmountMST                   _agreementCreditLimitMax,
        boolean                     _checkAgreementLimit,
        AmountMST                   _amountMST,
        PurchId                     _excludePurchId,
        AgreementHeaderExtRecId_RU  _agreementHeaderExtRecId)
    {
        boolean checkCreditLimit;
        AmountMST purchBalanceMst;

        switch (_check)
        {
            case TypeOfCreditmaxCheck::None :
                checkCreditLimit = true;
                break;

            case TypeOfCreditmaxCheck::Balance :
                purchBalanceMst = _amountMST;
                // <GEERU>
                if (_openBalanceMST + purchBalanceMst > _agreementCreditLimitMax)
                    // </GEERU>
                {
                    checkCreditLimit = checkFailed(strFmt("@SYS21487", _openBalanceMST, purchBalanceMst,
                    // <GEERU>
                    _openBalanceMST + purchBalanceMst, _agreementCreditLimitMax));
                    // </GEERU>
                }
                else
                {
                    checkCreditLimit = true;
                }
                break;

            case TypeOfCreditmaxCheck::BalanceAll :
                // <GEERU>
                purchBalanceMst = PurchTable::balanceAmountNotInvoiced(_vendAccount, _excludePurchId, _checkAgreementLimit, _agreementHeaderExtRecId) + _amountMST;
                if (_openBalanceMST + purchBalanceMst > _agreementCreditLimitMax)
                    // </GEERU>
                {
                    checkCreditLimit = checkFailed(strFmt("@SYS25668", _openBalanceMST, purchBalanceMst,
                    // <GEERU>
                    _openBalanceMST + purchBalanceMst, _agreementCreditLimitMax,
                        (_openBalanceMST + purchBalanceMst) - _agreementCreditLimitMax));
                    // </GEERU>
                }
                else
                {
                    checkCreditLimit = true;
                }
                break;

            case TypeOfCreditmaxCheck::BalanceDelivered :
                // <GEERU>
                purchBalanceMst = PurchTable::balanceAmountDelivered(_vendAccount, _excludePurchId, _checkAgreementLimit, _agreementHeaderExtRecId) + _amountMST;
                if (_openBalanceMST + purchBalanceMst > _agreementCreditLimitMax)
                    // </GEERU>
                {
                    checkCreditLimit = checkFailed(strFmt("@SYS25668", _openBalanceMST, purchBalanceMst,
                        // <GEERU>
                        _openBalanceMST + purchBalanceMst, _agreementCreditLimitMax,
                        (_openBalanceMST + purchBalanceMst) - _agreementCreditLimitMax));
                    // </GEERU>
                }
                else
                {
                    checkCreditLimit = true;
                }
                break;
        }

        return checkCreditLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(VendAccount _vendAccount )
    {
        boolean ret = true;

        if (!VendTable::exist(_vendAccount))
        {
            ret = checkFailed(strFmt(VendTable::txtNotExist(), _vendAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistAndOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the vendor account against the vendor hold and also if the account exists.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number.
    /// </param>
    /// <param name="_amountMST">
    /// The transaction amount.
    /// </param>
    /// <param name="_ledgerTransType">
    /// The ledger transaction type.
    /// </param>
    /// <param name="_transDate">
    /// The invoice transaction date; optional.
    /// </param>
    /// <param name="_ledgerJournalType">
    /// The parameter holds the ledger journal type; optional.
    /// </param>
    /// <returns>
    /// true if the vendor is not on hold for an <c>Invoice</c> value, a <c>Payment</c> value, or an
    /// <c>All</c>; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>vendTable::checkStoppedReleaseDate</c> method returns true if the vendor stopped release
    /// date and invoice release date has been expired and not blank when compared with invoice transaction
    /// date; otherwise, false.
    /// </remarks>
    static boolean checkExistAndOpen(VendAccount        _vendAccount,
                                     AmountMST          _amountMST,
                                     LedgerTransType    _ledgerTransType,
                                     InvoiceReleaseDate _transDate = utcDateTimeNull(),
                                     LedgerJournalType  _ledgerJournalType = -1)
    {
        #LedgerJournalFaults

        boolean                ret = true;
        boolean                isVendReleaseDateExpired;
        VendTable              vendTable;
        VendBlockedReleaseDate vendReleaseDate;

        vendTable = VendTable::find(_vendAccount);

        vendReleaseDate = vendTable.BlockedReleaseDate;
        isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(_vendAccount,_transDate);

        if (!vendTable)
        {
            ret = AifFault::checkFailedLogFault(strFmt("@SYS11817", _vendAccount), #VendorAccountDoesNotExist);
        }
        else
        {
            if (vendTable.Blocked   == CustVendorBlocked::All      ||
                (vendTable.Blocked   == CustVendorBlocked::Invoice  &&
                _amountMST           > 0                            &&
                _ledgerTransType    != LedgerTransType::Interest))
            {
                if (!vendReleaseDate)
                {
                    ret = AifFault::checkFailedLogFault(strFmt("@SYS128411", _vendAccount, vendTable.Blocked), #VendorIsOnHold);
                }
                else if (!isVendReleaseDateExpired)
                {
                    ret = AifFault::checkFailedLogFault(strFmt("@SYS128412", _vendAccount, vendTable.Blocked, DateTimeUtil::date(vendReleaseDate)), #VendorIsOnHold);
                }
            }
            // Check for payment journal and promissory note journals
            else if (vendTable.Blocked == CustVendorBlocked::Payment   &&
                    (_ledgerTransType == LedgerTransType::Payment ||
                    _ledgerJournalType == LedgerJournalType::VendPromissoryNoteDraw ||
                    _ledgerJournalType == LedgerJournalType::VendPaymRemittance ||
                    _ledgerJournalType == LedgerJournalType::VendPromissoryNoteRedraw ||
                    _ledgerJournalType == LedgerJournalType::VendPromissoryNoteSettle))

            {
                if (!vendReleaseDate)
                {
                    ret = AifFault::checkFailedLogFault(strFmt("@SYS128411", _vendAccount, CustVendorBlocked::Payment), #VendorIsOnHold);
                }
                else if (!isVendReleaseDateExpired)
                {
                    ret = AifFault::checkFailedLogFault(strFmt("@SYS128412", _vendAccount,CustVendorBlocked::Payment, DateTimeUtil::date(vendReleaseDate)), #VendorIsOnHold);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkW9Received</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the W9 form has been received for the vendor with the vendor account passed in.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account.
    /// </param>
    /// <param name="_insertError">
    /// This parameter indicates an error in insertion in the Infolog; optional.
    /// </param>
    /// <returns>
    /// true if the check passed; otherwise, false.
    /// </returns>
    public static boolean checkW9Received(VendAccount _vendAccount,boolean _insertError = true)
    {
        SysInfoAction_FormrunQuery action;
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        VendTable       vendTable;

        if (VendParameters::find().w9Validation == NoYes::Yes)
        {
            select firstonly w9Included, w9 from vendTable
            where vendTable.AccountNum == _vendAccount;

            if (vendTable.w9Included == NoYes::Yes && vendTable.w9 == NoYes::No)
            {
                if (_insertError)
                {
                    queryBuildDataSource = query.addDataSource(tableNum(VendTable));
                    queryBuildDataSource.addRange(fieldNum(VendTable,AccountNum)).value(_vendAccount);
                    action = SysInfoAction_FormrunQuery::newFormnameQuery(formStr(VendTable), query);
                    return checkFailed(strFmt("@SYS131114",_vendAccount),"",action);
                }

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compositionSchemeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the composite scheme status.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table ID.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record ID.
    /// </param>
    /// <returns>
    /// A composite scheme status.
    /// </returns>
    public static NoYes compositionSchemeEnabled(
        TableId     _sourceTableId,
        RecId       _sourceRecId)
    {
        NoYes                   ret;
        PurchLine               purchLine;
        PurchRFQLine            purchRFQLine;
        PurchReqLine            purchReqLine;
        PurchParmLine           purchParmLine;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceTrans        vendInvoiceTrans;
        LedgerJournalTrans      ledgerJournalTrans;
        VendAccount             vendAccount;

        switch (_sourceTableId)
        {
            case tableNum(PurchLine):
                purchLine = PurchLine::findRecId(_sourceRecId);
                vendAccount = purchLine.VendAccount;
                break;
            case tableNum(PurchRFQLine):
                purchRFQLine = PurchRFQLine::findRecId(_sourceRecId);
                vendAccount = purchRFQLine.vendAccount();
                break;
            case tableNum(PurchReqLine):
                purchReqLine = PurchReqLine::find(_sourceRecId);
                vendAccount = purchReqLine.VendAccount;
                break;
            case tableNum(PurchParmLine):
                purchParmLine = PurchParmLine::findRecId(_sourceRecId);
                vendAccount = purchParmLine.OrderAccount;
                break;
            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(_sourceRecId);
                purchLine = PurchLine::findRecId(vendInvoiceInfoLine.PurchLineRecId);
                vendAccount = purchLine.VendAccount;
                break;
            case tableNum(VendInvoiceTrans):
                vendInvoiceTrans = VendInvoiceTrans::findRecId(_sourceRecId);
                purchLine = vendInvoiceTrans.purchLine();
                vendAccount = purchLine.VendAccount;
                break;
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = LedgerJournalTrans::findRecId(_sourceRecId, false);
                vendAccount = ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ?
                    ledgerJournalTrans.parmAccount() : ledgerJournalTrans.parmOffsetAccount();
                break;
            default:
                break;
        }

        if (vendAccount)
        {
            ret = VendTable::find(vendAccount).compositionScheme();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneTimeAccount</Name>
				<Source><![CDATA[
    static VendAccount createOneTimeAccount(Common _common)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        DirPartyName    name;
        // </GEERU>
        NumberSeq       numberSeq;
        VendTable       vendTable;
        VendorEntity    vendorEntity;

        if (!VendTable::createOneTimeAccountValidate())
        {
            return '';
        }

        ttsbegin;

        numberSeq   =  NumberSeq::newGetNum(VendParameters::numRefOneTimeSupplierAccount());
        vendTable   = VendTable::find(VendParameters::find().DefaultVend);

        // <GEERU>
        name = vendTable.name();
        // </GEERU>
        DirPartyTable templateVendorDirPartyTable = vendTable.dirPartyTable();

        vendTable.AccountNum = numberSeq.num();
        vendTable.Party = 0;
        vendorEntity = DirParty::constructFromCommon(vendTable, 
            DateTimeUtil::getSystemDateTime(),
            templateVendorDirPartyTable.partyType(),
            true,
            false);

        // <GEEU>
        if (_common)
        {
            switch (_common.TableId)
            {
                case  tableNum(PurchTable):
                    vendorEntity.initFromPurchTable(_common as PurchTable);
                    break;

                case  tableNum(CzVendAdvanceInvoiceTable) :
                    vendorEntity.initFromCustAdvanceInvoiceTable_CZ(_common as CzVendAdvanceInvoiceTable);
                    break;

                default :
                    throw error(strFmt("@SYS18917",tableId2name(_common.TableId)));
            }
        }
        else
        // </GEEU>
        // <GEERU>
        {
            vendTable.initVendorEntityFromParty(vendorEntity, templateVendorDirPartyTable);
            vendTable.OneTimeVendor = NoYes::Yes;
        }
        // </GEERU>
        vendorEntity.insert();

        ttscommit;

        return vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendorEntityFromParty</Name>
				<Source><![CDATA[
    private void initVendorEntityFromParty(VendorEntity _vendorEntity, DirPartyTable _dirPartyTable)
    {
        _vendorEntity.parmName(_dirPartyTable.Name);
        _vendorEntity.parmType(_dirPartyTable.type());
        _vendorEntity.parmLanguageId(_dirPartyTable.LanguageId);
        _vendorEntity.parmNameAlias(_dirPartyTable.NameAlias);
        _vendorEntity.parmKnownAs(_dirPartyTable.KnownAs);

        switch (_dirPartyTable.type())
        {
            case DirPartyType::Organization :
                DirOrganization dirOrganization = DirOrganization::find(_dirPartyTable.RecId);
                _vendorEntity.parmNumberOfEmployees(dirOrganization.NumberOfEmployees);
                _vendorEntity.parmOrganizationNumber(dirOrganization.OrgNumber);
                _vendorEntity.parmABC(dirOrganization.ABC);
                _vendorEntity.parmPhoneticName(dirOrganization.PhoneticName);
                break;
            case DirPartyType::Person :
                DirPerson dirPerson = DirPerson::find(_dirPartyTable.RecId);
                _vendorEntity.parmChildrenNames(dirPerson.ChildrenNames);
                _vendorEntity.parmInitials(dirPerson.Initials);
                _vendorEntity.parmMaritalStatus(dirPerson.MaritalStatus);
                _vendorEntity.parmHobbies(dirPerson.Hobbies);
                _vendorEntity.parmGender(dirPerson.Gender);
                _vendorEntity.parmPhoneticFirstName(dirPerson.PhoneticFirstName);
                _vendorEntity.parmPhoneticMiddleName(dirPerson.PhoneticMiddleName);
                _vendorEntity.parmPhoneticLastName(dirPerson.PhoneticLastName);
                _vendorEntity.parmPersonalTitleRecId(dirPerson.PersonalTitle);
                _vendorEntity.parmPersonalSuffixRecId(dirPerson.PersonalSuffix);
                _vendorEntity.parmProfessionalTitle(dirPerson.ProfessionalTitle);
                _vendorEntity.parmProfessionalSuffix(dirPerson.ProfessionalSuffix);

                DirPersonName personName = DirPersonName::find(_dirPartyTable.RecId);
                _vendorEntity.parmFirstName(personName.FirstName);
                _vendorEntity.parmMiddleName(personName.MiddleName);
                _vendorEntity.parmLastName(personName.LastName);
                _vendorEntity.parmLastNamePrefix(personName.LastNamePrefix);
                break;
            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOneTimeAccountValidate</Name>
				<Source><![CDATA[
    static boolean createOneTimeAccountValidate()
    {
        boolean ok = true;

        if (!VendTable::find(VendParameters::find().DefaultVend))
        {
            ok = checkFailed("@SYS57595");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(VendAccount _vendAccount )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     vendTable
                 where
                     vendTable.AccountNum == _vendAccount).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVendorCollaborationAccessAllowedContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided vendor account has an associated contact with an enabled user.
    /// </summary>
    /// <param name = "_vendAccount">The vendor account number.</param>
    /// <returns>true if contact is found; otherwise, false.</returns>
    public static boolean existVendorCollaborationAccessAllowedContact(VendAccount _vendAccount)
    {
        VendTable vendTable;
        ContactPerson contactPerson;
        DirPersonUser dirPersonUser;
        UserInfo userInfo;

        select firstonly RecId from contactPerson
            join AccountNum, Party from vendTable
                where vendTable.AccountNum == _vendAccount
                    && vendTable.Party == contactPerson.ContactForParty
                    && contactPerson.VendorPortalAccessAllowed == NoYes::Yes
            join PersonParty, User from dirPersonUser
                where contactPerson.Party == dirPersonUser.PersonParty
            join Id from userInfo
                where dirPersonUser.User == userInfo.Id
                    && userInfo.Enable;

        return contactPerson.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendTable find(
        VendAccount             _vendAccount ,
        boolean                 _forupdate        = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTable vendTable;

        vendTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendTable.concurrencyModel(_concurrencyModel);
        }

        if (_vendAccount != '')
        {
            select firstonly vendTable
                where vendTable.AccountNum == _vendAccount;
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendTable</c> table.
    /// </summary>
    /// <param name="_company">
    ///    The company of the vendor record.
    /// </param>
    /// <param name="_vendAccount">
    ///    The vendor account number.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>VendTable</c> table; otherwise, an empty record.
    /// </returns>
    public static VendTable findByCompany(
        CompanyId
        _company,
        VendAccount _vendAccount,
        boolean _forUpdate = false)
    {
        VendTable vend;

        if (_company)
        {
            changecompany(_company)
            {
                vend = VendTable::find(_vendAccount, _forUpdate);
            }
        }

        return vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendTable</c> table.
    /// </summary>
    /// <param name="_vendAccount">
    ///    The vendor account number.
    /// </param>
    /// <param name="_dataAreaId">
    ///    The data area ID of the vendor record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>VendTable</c> table; otherwise, an empty record.
    /// </returns>
    public static VendTable findByDataAreaId(
        VendAccount _vendAccount,
        DataAreaId  _dataAreaId,
        boolean     _forUpdate = false)
    {
        VendTable vendTable;

        if (_vendAccount && _dataAreaId)
        {
            vendTable.selectForUpdate(_forUpdate);

            select firstonly crossCompany vendTable
                where vendTable.AccountNum == _vendAccount
                   && vendTable.DataAreaId == _dataAreaId;
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerDimension</Name>
				<Source><![CDATA[
    public static VendTable findByLedgerDimension(
        LedgerDimensionAccount  _ledgerDimension,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendTable                           vendTable;
        DimensionAttributeValueCombination  ledgerDimension;

        vendTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendTable
            join RecId from ledgerDimension where
                ledgerDimension.DisplayValue == vendTable.AccountNum &&
                ledgerDimension.RecId == _ledgerDimension;

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPartyInCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>VendTable</c> table.
    /// </summary>
    /// <param name="_partyRecId">
    ///    The party record ID of the vendor record.
    /// </param>
    /// <param name="_companyId">
    ///    The company of the vendor record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>VendTable</c> table; otherwise, an empty record.
    /// </returns>
    static VendTable findByPartyInCompany(
        DirPartyRecId   _partyRecId,
        CompanyId       _companyId,
        boolean         _forUpdate = false)
    {
        VendTable vendTable;

        if (_companyId)
        {
            changecompany (_companyId)
            {
                vendTable = VendTable::findByPartyRecId(_partyRecId, _forUpdate);
            }
        }
        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPartyRecId</Name>
				<Source><![CDATA[
    static VendTable findByPartyRecId(DirPartyRecId   _partyRecId,
                                 boolean _forUpdate = false)
    {
        VendTable vendTable;

        if (_partyRecId)
        {
            if (_forUpdate)
            {
                vendTable.selectForUpdate(_forUpdate);
            }

            select firstonly vendTable
                where vendTable.Party == _partyRecId;
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static VendTable findRecId(RecId    _recId,
                               boolean  _forUpdate = false)
    {
        VendTable vendTable;

        if (_recId)
        {
            vendTable.selectForUpdate(_forUpdate);

            select firstonly vendTable
                where vendTable.RecId == _recId;
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultRemittanceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default check remittance address for a vendor.
    /// </summary>
    /// <param name="_accountNum">
    /// The vendor account number of the vendor for which to get the default remittance location.
    /// </param>
    /// <param name="_company">
    /// The <c>CompanyId</c> of the vendor for which to get the default remittance location.
    /// </param>
    /// <returns>
    /// The ID of the default remittance location.
    /// </returns>
    public static RemittanceLocation getDefaultRemittanceLocation(VendAccount _accountNum, CompanyId _company = curext())
    {
        LogisticsLocation           location, defaultLocation;
        LogisticsLocationDefault    defaults;
        LogisticsLocationRole       role = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::RemitTo);
        DirPartyLocation            dirPartyLocation;
        DirPartyLocationRole        dirPartyLocationRole;
        VendTable                   vendTable = VendTable::findByCompany(_company, _accountNum);
        LogisticsLocationRecId      result;

        defaults = LogisticsLocationDefault::construct(vendTable);
        result = defaults.getDefaultActiveLocationRecId(role);
        if (result)
        {
            return result;
        }

        //return the sole remittance address if only one exists

        if (VendTableValidDefaultRemittanceLocationFlight::instance().isEnabled())
        {
            LogisticsPostalAddress logisticsPostalAddress;

            select count(RecId) from location
                join RecId from dirPartyLocation
                    where location.RecId == dirPartyLocation.Location &&
                          dirPartyLocation.Party == vendTable.Party
                join PartyLocation from dirPartyLocationRole
                    where dirPartyLocation.RecId == dirPartyLocationRole.PartyLocation &&
                          dirPartyLocationRole.LocationRole == role.RecId
                exists join logisticsPostalAddress
                    where logisticsPostalAddress.Location == dirPartyLocation.Location;

            if (location.RecId == 1)
            {
                select firstonly RecId from defaultLocation
                    join RecId from dirPartyLocation
                        where defaultLocation.RecId == dirPartyLocation.Location &&
                              dirPartyLocation.Party == vendTable.Party
                    join PartyLocation from dirPartyLocationRole
                        where dirPartyLocation.RecId == dirPartyLocationRole.PartyLocation &&
                              dirPartyLocationRole.LocationRole == role.RecId
                    exists join logisticsPostalAddress
                        where logisticsPostalAddress.Location == dirPartyLocation.Location;
            }
        }
        else
        {
            select count(RecId) from location
                join RecId from dirPartyLocation
                    where location.RecId == dirPartyLocation.Location &&
                        dirPartyLocation.Party == vendTable.Party
                join PartyLocation from dirPartyLocationRole
                    where dirPartyLocation.RecId == dirPartyLocationRole.PartyLocation &&
                        dirPartyLocationRole.LocationRole == role.RecId;

            if (location.RecId == 1)
            {
                select firstonly RecId from defaultLocation
                    join RecId from dirPartyLocation
                        where defaultLocation.RecId == dirPartyLocation.Location &&
                            dirPartyLocation.Party == vendTable.Party
                    join PartyLocation from dirPartyLocationRole
                        where dirPartyLocation.RecId == dirPartyLocationRole.PartyLocation &&
                            dirPartyLocationRole.LocationRole == role.RecId;
            }
        }

        if (!defaultLocation)
        {
            //else return primary as the last resort
            defaultLocation = defaults.getPrimaryPostalLocation();
        }

        return defaultLocation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the party of the specified vendor that is in a specified data area.
    /// </summary>
    /// <param name="_vendorAccountNum">
    /// The account number of the vendor in which to get the name.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area of the vendor in which to get the name.
    /// </param>
    /// <returns>
    /// The party name of the vendor.
    /// </returns>
    public static DirPartyName getVendorName(AccountNum _vendorAccountNum, DataAreaId _dataAreaId = curext())
    {
        return VendTable::findByCompany(_dataAreaId, _vendorAccountNum).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupId</Name>
				<Source><![CDATA[
    static VendGroupId groupId(VendAccount _vendAccount)
    {
        return VendTable::find(_vendAccount).CustVendTable::groupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the vendor is blocked.
    /// </summary>
    /// <param name="_vendAccount">
    /// The <c>VendAccount</c> to check.
    /// </param>
    /// <param name="_blockedFor">
    /// The blocking type for which to check
    /// </param>
    /// <returns>
    /// true if the vendor is blocked; otherwise, false.
    /// </returns>
    public static boolean isVendorBlocked(VendAccount _vendAccount, CustVendorBlocked _blockedFor)
    {
        CustVendorBlocked vendBlockedStatus;

        if (_blockedFor == CustVendorBlocked::Never || _blockedFor == CustVendorBlocked::No)
        {
            return false;
        }
        else
        {
            vendBlockedStatus = VendTable::blocked(_vendAccount);

            if ((vendBlockedStatus == CustVendorBlocked::All || vendBlockedStatus == _blockedFor) && !VendTable::isVendReleaseDateExpired(_vendAccount))
            {
                warning(strFmt("@SYS22005", _vendAccount, vendBlockedStatus));

                return true;
            }
            else
            {
                return false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendReleaseDateExpired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the validity of a vendor release date for possible vendor hold.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account number.
    /// </param>
    /// <param name="_transDate">
    /// The invoice transaction date; optional.
    /// </param>
    /// <returns>
    /// true if vendor release date is expired or equal to current date; otherwise, false;
    /// </returns>
    /// <remarks>
    /// The method has been added to facilitate the vendor holds functionality.
    /// </remarks>
    static boolean isVendReleaseDateExpired(VendAccount _vendAccount,
                                            InvoiceReleaseDate _transDate = DateTimeUtil::utcNow())
    {
        VendTable vendTable;
        boolean ret = false;
        vendTable = VendTable::find(_vendAccount);

        if ((vendTable.BlockedReleaseDate != utcDateTimeNull()) &&
            (vendTable.BlockedReleaseDate <= _transDate ))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefAccountNum_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the Go To Main Table functionality for the <c>VendTable</c> table.
    /// </summary>
    /// <param name="_common">
    /// The record of VendTable.
    /// </param>
    /// <param name="_object">
    /// The caller.
    /// </param>
    /// <param name="_subContractor">
    /// The reference recid.
    /// </param>
    /// <param name="_parm">
    /// The info which need to parm to for; optional.
    /// </param>
    public static void jumpRefAccountNum_SA(
        Common      _common,
        Object      _object,
        RefRecId    _subContractor,
        str         _parm = '')
    {
        Args args = new Args();

        if (_subContractor)
        {
            args.record(_common);
        }
        args.caller(_object);
        args.parm(_parm);

        new MenuFunction(menuitemDisplayStr(VendTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>VendTable</c> form for the specific vendor in the specific data area
    /// </summary>
    /// <param name="_accountNum">
    /// The vendor account to open.
    /// </param>
    /// <param name="_companyId">
    /// The company in which to find that vendor.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The specific <paramref name="_companyId" /> parameter does not exist.
    /// </exception>
    static void jumpRefVendor(VendAccount _accountNum, CompanyId _companyId  = curext())
    {
        Args        args;
        CompanyId   companyId;

        companyId = _companyId;
        if (! xDataArea::exist(companyId))
        {
            throw error(strFmt("@SYS10666", companyId));
        }

        changecompany(companyId)
        {
            args = new Args();

            if (_accountNum)
            {
                args.record(VendTable::find(_accountNum));
            }

            FormRun formRun = new MenuFunction(menuitemDisplayStr(VendTable), MenuItemType::Display).create(args);
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountNumCurrencyDeal_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create Vendor lookup for vendors that are also banks
    /// </summary>
    /// <param name="_formControl">
    /// Form control to perform lookup on
    /// </param>
    /// <param name="_amount">
    /// Payment journal amount
    /// </param>
    /// <param name="_offsetAccountType">
    /// Journal offset account type
    /// </param>
    /// <param name="_offsetAccount">
    /// Journal offset account
    /// </param>
    /// <param name="_transType">
    /// Transaction type
    /// </param>
    public static void lookupAccountNumCurrencyDeal_RU(FormControl              _formControl,
                                                       Amount                   _amount,
                                                       LedgerJournalACType      _offsetAccountType,
                                                       LedgerJournalAC          _offsetAccount,
                                                       BankAdvancedTransType_RU _transType)
    {
        SegmentedEntryControl       segmentedEntryControl;
        FormStringControl           formStringControl;
        Args                        args;
        FormRun                     formRun;
        FormDataSource              formDataSource;
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildDataSource        queryBuildDataSourceBank;

        args = new Args();
        args.name(formStr(VendTableLookup));
        args.caller(_formControl);
        args.lookupField(fieldNum(VendTable, AccountNum));
        if (_formControl is FormStringControl)
        {
            formStringControl = _formControl as FormStringControl;
            args.lookupValue(formStringControl.text());
        }
        else if (_formControl is SegmentedEntryControl)
        {
            segmentedEntryControl = _formControl as SegmentedEntryControl;
            args.lookupValue(segmentedEntryControl.valueStr());
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        formRun = classfactory.formRunClass(args);
        formRun.init();

        formDataSource = formRun.dataSource();
        queryBuildDataSource = formDataSource.query().dataSourceTable(tableNum(VendTable));

        queryBuildDataSourceBank = queryBuildDataSource.addDataSource(tableNum(BankGroup));
        queryBuildDataSourceBank.addLink(fieldNum(VendTable, AccountNum), fieldNum(BankGroup, VendAccountNum_RU));
        queryBuildDataSourceBank.joinMode(JoinMode::ExistsJoin);

        if (_amount > 0 && _offsetAccountType == LedgerJournalACType::Bank && _offsetAccount && _transType != BankAdvancedTransType_RU::CurrTransfer)
        {
            queryBuildDataSourceBank.addRange(fieldNum(BankGroup, BankGroupId)).value(SysQuery::value(BankAccountTable::find(_offsetAccount).BankGroupId));
        }

        if (_formControl is FormStringControl)
        {
            formStringControl = _formControl as FormStringControl;
            formStringControl.performFormLookup(formRun);
        }
        else if (_formControl is SegmentedEntryControl)
        {
            segmentedEntryControl = _formControl as SegmentedEntryControl;
            segmentedEntryControl.performFormLookup(formRun);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupGTAVendor_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup GTA vender information.
    /// </summary>
    /// <param name="_formControl">
    /// The form control.
    /// </param>
    public static void lookupGTAVendor_IN(FormControl _formControl)
    {
        var query = VendTable::lookupGTAVendorQuery_IN();
        var sysTableLookup  = SysTableLookup::newParameters(tableNum(VendTable), _formControl, true,
                VendorDataInteractorFactory::useExistingOrCreateResolver(_formControl, query));

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(VendTable, AccountNum));
        sysTableLookup.addLookupfield(fieldNum(VendTable, Party));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceGTAVendor_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the vendor account number or by mapping
    /// it to the vendor name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_formControl">The control on which contextual data entry is being performed.</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>VendTable::lookupGTAVendor_IN</c> method.
    /// </remarks>
    public static str resolveAmbiguousReferenceGTAVendor_IN(FormControl _formControl)
    {
        return VendorDataInteractorFactory::resolveAmbiguousReferenceForControl(_formControl,
                VendTable::lookupGTAVendorQuery_IN());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupGTAVendorQuery_IN</Name>
				<Source><![CDATA[
    private static Query lookupGTAVendorQuery_IN()
    {
        var query = VendorDataInteractorFactory::constructDefaultBaseQuery();
        var queryBuildDataSource = query.dataSourceTable(tableNum(VendTable));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(TaxInformationVendTable_IN));
        queryBuildDataSource.addLink(fieldNum(VendTable, AccountNum), fieldNum(TaxInformationVendTable_IN, VendTable));
        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource.addRange(fieldNum(TaxInformationVendTable_IN,IsGTA)).value(queryValue(NoYes::Yes));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupNonLedgerDefaultAccountNum</Name>
				<Source><![CDATA[
    static boolean lookupNonLedgerDefaultAccountNum(FormControl _ctrl, LedgerJournalACType _ledgerJournalACType, CompanyId _company = curext(), VendAccount _vendAccount  = '')
    {
        SegmentedEntryControl segmentedEntryControl;
        FormStringControl   formStringControl;
        VendDefaultNonLedgerTableLookup vendDefaultNonLedgerTableLookup;
        Args                            args;
        CompanyId                       companyId;
        FormRun                         formRun;

        // The following block is needed for the case that intercompany transactions is disabled and someone passes
        // in an empty string. Ideally one would remove the "curext()" defaulting from the parameter list, but this
        // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
        if (!_company)
        {
            companyId = curext();
        }
        else
        {
            companyId = _company;
            if (! xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666",companyId));
            }
        }

        changecompany(companyId)
        {
            vendDefaultNonLedgerTableLookup = VendDefaultNonLedgerTableLookup::construct(_vendAccount, _ledgerJournalACType, companyId);

            args = new Args();
            args.name(formStr(VendDefaultNonLedgerAccountLookup));
            args.parmObject(vendDefaultNonLedgerTableLookup);
            args.caller(_ctrl);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            if (_ctrl is FormStringControl)
            {
                formStringControl = _ctrl as FormStringControl;
                formStringControl.performFormLookup(formRun);
            }
            else if (_ctrl is SegmentedEntryControl)
            {
                segmentedEntryControl = _ctrl as SegmentedEntryControl;
                segmentedEntryControl.performFormLookup(formRun);
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            return formRun.closedCancel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendAccountItem</Name>
				<Source><![CDATA[
    static void lookupVendAccountItem(FormStringControl  _ctrl,
                                             ItemId             _itemId,
                                             InventDim          _inventDim = null)
    {
        Args    args;
        Object  formRun;

        args = new Args();
        args.caller(_ctrl);
        args.name(formStr(VendAccountItemLookup));
        args.lookupField(fieldNum(VendTable, AccountNum));
        args.lookupValue(_ctrl.text());

        formRun = classfactory.formRunClass(args);
        formRun.setItemId(_itemId);
        formRun.setInventDim(_inventDim);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendor</Name>
				<Source><![CDATA[
    static void lookupVendor(FormControl _ctrl,
                            CompanyId _company = curext())
    {
        CompanyId   companyId;

        // The following block is needed for the case that intercompany transactions is disabled and someone passes
        // in an empty string. Ideally one would remove the "curext()" defaulting from the parameter list, but this
        // code was added as part of a bug fix, and did not have the scope or need of changing the interface.
        if (!_company)
        {
            companyId = curext();
        }
        else
        {
            companyId = _company;
            if (! xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666",companyId));
            }
        }

        changecompany(companyId)
        {
            if (!(_ctrl is FormStringControl) && !(_ctrl is SegmentedEntryControl))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            Args args = VendTable::createArgsForVendorLookup(_ctrl);
            
            FormRun formRun = classfactory.formRunClass(args);
            formRun.init();
            if (_ctrl is FormStringControl)
            {
                FormStringControl formStringControl = _ctrl as FormStringControl;
                formStringControl.performFormLookup(formRun);
            }
            else if (_ctrl is SegmentedEntryControl)
            {
                SegmentedEntryControl segmentedEntryControl = _ctrl as SegmentedEntryControl;
                segmentedEntryControl.performFormLookup(formRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArgsForVendorLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create <c>Args</c> object for the vendor lookup.
    /// </summary>
    /// <param name = "_ctrl">
    /// The control we are opening the lookup for.
    /// </param>
    /// <returns>
    /// The created <c>Args</c> object.
    /// </returns>
    protected static Args createArgsForVendorLookup(FormControl  _ctrl)
    {
        Args args = new Args();
        args.name(formStr(VendTableLookup));
        args.caller(_ctrl);
        args.lookupField(fieldNum(VendTable, AccountNum));

        if (_ctrl is FormStringControl)
        {
            FormStringControl formStringControl = _ctrl as FormStringControl;
            args.lookupValue(formStringControl.text());
        }
        else if (_ctrl is SegmentedEntryControl)
        {
            SegmentedEntryControl segmentedEntryControl = _ctrl as SegmentedEntryControl;
            args.lookupValue(segmentedEntryControl.valueStr());
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the vendor account number or by mapping
    /// it to the vendor name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_formControl">The control on which contextual data entry is being performed.</param>
    /// <param name="_companyId">The company within which the contextual lookup should be performed; optional.</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>VendTable::lookupVendor</c> method.
    /// </remarks>
    public static str resolveAmbiguousReferenceVendor(FormControl _formControl, CompanyId _companyId = curExt())
    {
        var companyId = _companyId ? _companyId : curExt();
        if (!xDataArea::exist(companyId))
        {
            throw error(strFmt("@SYS10666", companyId));
        }

        changecompany(companyId)
        {
            return VendorDataInteractorFactory::resolveAmbiguousReferenceForControl(_formControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>VendTable</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object to use to perform the lookup.
    /// </param>
    static void lookupVendTable(FormStringControl _ctrl)
    {
        Args    args;
        Object  formRun;

        args = new Args();
        args.caller(_ctrl);
        args.name(formStr(VendTableLookup));
        args.lookupField(fieldNum(VendTable, AccountNum));
        args.lookupValue(_ctrl.text());

        formRun = classfactory.formRunClass(args);
        formRun.init();
        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAddress</Name>
				<Source><![CDATA[
    static str promptAddress(VendAccount _vendAccount)
    {
        VendTable                  vendTable = VendTable::find(_vendAccount);

        return (vendTable.name() + '\n' + vendTable.postalAddress().Address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS9779";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>VendTable</c> table for parameters specified in <c>VendOnHoldUpdate</c> form.
    /// </summary>
    /// <param name="_vendRecords">
    /// A <c>VendTable</c> records to update.
    /// </param>
    /// <param name="_blocked">
    /// The type of OnHold to apply.
    /// </param>
    /// <param name="_releasedDate">
    /// The ReleaseDate to apply.
    /// </param>
    /// <param name="_applyAll">
    /// The decision to apply OnHold to all vendors matching selected vendor PartyId.
    /// </param>
    /// <param name="_displayInfo">
    /// If true, an info message is displayed; otherwise no message is displayed.
    /// </param>
    /// <param name="_reasonCode">
    /// The optional reason code for changing onHold option.
    /// </param>
    public static void updateOnHold(container _vendRecords,
                                    CustVendorBlocked _blocked,
                                    VendBlockedReleaseDate _releasedDate,
                                    boolean _applyAll,
                                    boolean _displayInfo = false,
                                    ReasonCode _reasonCode = '')
    {
        VendTable           vendTable;
        VendTable           vendRecord;
        DataArea            dataArea;
        VendOnHoldHistory   onHoldHistory;
        DirPartyRecId       partyId;
        int                 len, i;

        void updateVendor()
        {
            ttsbegin;
            vendTable.Blocked = _blocked;
            vendTable.BlockedReleaseDate =_releasedDate;
            vendTable.selectForUpdate();
            vendTable.update();
            if (_reasonCode)
            {
                onHoldHistory = VendOnHoldHistory::findLast(vendTable.AccountNum, true);
                if (!onHoldHistory || onHoldHistory.OnHold != _blocked)
                {
                    VendOnHoldHistory::createHistoryRecord(vendTable.AccountNum, _blocked);
                    onHoldHistory = VendOnHoldHistory::findLast(vendTable.AccountNum, true);
                }
                onHoldHistory.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                onHoldHistory.ReasonCode = _reasonCode;
                onHoldHistory.update();
            }
            if (_displayInfo)
            {
                Global::info( strFmt( "@SYS326120",  fieldPName(VendTable, Blocked), _blocked, fieldPName(VendTable, AccountNum) ,vendTable.AccountNum ) );
            }
            ttscommit;
        }

        len = conLen(_vendRecords);

        for (i=1;i<=len;i++)
        {
            vendRecord = conPeek(_vendRecords, i);
            if (! _applyAll)
            {
                vendTable = VendTable::findRecId(vendRecord.RecId,true);

                if (vendTable && !vendTable.isBlockedForUpdate(_blocked, _releasedDate))
                {
                    updateVendor();
                }
            }
            else
            {
                partyId = VendTable::findRecId(vendRecord.RecId,false).Party;
                while select Id from dataArea
                    where dataArea.IsVirtual == NoYes::No
                {
                    changecompany(dataArea.Id)
                    {
                        vendTable = VendTable::findByPartyRecId(partyId,true);
                        if (VendTable::shouldUpdateVendorOnHold(vendTable, _blocked, _releasedDate))
                        {
                            updateVendor();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateVendorOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor data should be updated when updating on hold.
    /// </summary>
    /// <param name = "_vendTable">A <c>VendTable</c> record.</param>
    /// <param name = "_blocked">The type of OnHold.</param>
    /// <param name = "_releasedDate">The release date.</param>
    /// <returns>true, if the vendor should be updated; otherwise, false.</returns>
    protected static boolean shouldUpdateVendorOnHold(VendTable _vendTable, CustVendorBlocked _blocked, VendBlockedReleaseDate _releasedDate)
    {
        return _vendTable && !_vendTable.isBlockedForUpdate(_blocked, _releasedDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockedForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the vendor is blocked for update or not.
    /// </summary>
    /// <param name="_blocked">
    /// The type of OnHold to apply.
    /// </param>
    /// <param name="_releasedDate">
    /// The ReleaseDate to apply.
    /// </param>
    /// <returns>
    /// true, if the vendor is blocked for update; otherwise, false.
    /// </returns>
    protected boolean isBlockedForUpdate(CustVendorBlocked _blocked, VendBlockedReleaseDate _releasedDate)
    {
        boolean ret;
        VendBlockedReleaseDate currentDateUserTimeZone = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        if (_releasedDate != utcDateTimeNull() && _releasedDate < currentDateUserTimeZone)
        {
            checkFailed("@SYS114595");
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCISNationalInsuranceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of <c>CISNationalInsuranceNum</c> field as per the defined pattern.
    /// </summary>
    /// <param name="_vendCISNationalInsuranceNum">
    /// The value of the <c>CISNationalInsuranceNum</c> field.
    /// </param>
    /// <returns>
    /// true if the specified value matches the desired pattern; otherwise, false.
    /// </returns>
    public static boolean validateCISNationalInsuranceNum(VendCISNationalInsuranceNum _vendCISNationalInsuranceNum)
    {
        boolean isValid;
        System.Text.RegularExpressions.Match regExMatch;
        str expectedFormat;

        expectedFormat = '^[a-zA-Z]{2}[0-9]{6}[a-zA-Z]{0,1}$';

        if (_vendCISNationalInsuranceNum != '')
        {
            // See if string matches expression; validation is good
            regExMatch = System.Text.RegularExpressions.Regex::Match(_vendCISNationalInsuranceNum, expectedFormat);
            isValid = regExMatch.get_Success();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCISVerificationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of <c>CISVerificationNum</c> field as per the defined pattern.
    /// </summary>
    /// <param name="_vendCISVerificationNum">
    /// The value of the <c>CISVerificationNum</c> field.
    /// </param>
    /// <returns>
    /// true if the specified value matches the desired pattern; otherwise, false.
    /// </returns>
    public static boolean validateCISVerificationNum(VendCISVerificationNum _vendCISVerificationNum)
    {
        boolean isValid;
        System.Text.RegularExpressions.Match regExMatch;
        str expectedFormat;

        expectedFormat = '^V[0-9]{10}[a-zA-Z]{0,2}$';

        if (_vendCISVerificationNum != '')
        {
            // See if string matches expression; validation is good
            regExMatch = System.Text.RegularExpressions.Regex::Match(_vendCISVerificationNum, expectedFormat);
            isValid = regExMatch.get_Success();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ContactPerson</Name>
				<Source><![CDATA[
    public ContactPerson ContactPerson(ContactPerson _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('ContactPerson');
        }
        else
        {
            return this.setLink('ContactPerson', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable</Name>
				<Source><![CDATA[
    public DirPartyTable DirPartyTable(DirPartyTable _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('DirPartyTable_FK');
        }
        else
        {
            return this.setLink('DirPartyTable_FK', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRefOnInsert</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(DocuRefExtension), delegatestr(DocuRefExtension, OnInsert))]
    static void DocuRefOnInsert(DocuRef _docuRef, RecId _interCompanyFromRecId)
    {
        if (_docuRef.RefTableId == tablenum(VendTable))
        {
            changecompany(_docuRef.RefCompanyId)
            {
                DirPartyRecId  party = VendTable::findRecId(_docuRef.RefRecId).Party;

                if (party)
                {
                    _docuRef.Party         = party;
                }

                _docuRef.Author        = DirPersonUser::current().PersonParty;
                _docuRef.ActualCompanyId = curext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current user is a vendor.
    /// </summary>
    /// <param name="_useCache">
    /// A Boolean value that specifies if the value should be retrieved from and saved to the cache; optional.
    /// </param>
    /// <returns>
    /// true if the user is a vendor; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method uses the user relation in the <c>UserExternalParty</c> table to determine whether there
    /// is a relationship between the current user and a vendor.
    /// </remarks>
    static boolean isVendor(boolean _useCache = false)
    {
        container cacheKey = VendTable::getUserCacheKey(curUserId(), tableStaticMethodStr(VendTable, isVendor));
        container isVendorContainer;

        if (_useCache && classfactory.globalCache().isSet(tableStr(VendTable), cacheKey))
        {
            // Retrieve stored value from cache
            isVendorContainer = classfactory.globalCache().get(tableStr(VendTable), cacheKey);
        }
        else
        {
            // Determine if the current user is a vendor
            isVendorContainer = [UserExternalParty::existUserEntityType(curUserId(), UserExternalPartyEntityType::Vendor)];

            if (_useCache)
            {
                // Put calculated value to the cache
                classfactory.globalCache().set(tableStr(VendTable), cacheKey, isVendorContainer);
            }
        }

        return conPeek(isVendorContainer, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserCacheKey</Name>
				<Source><![CDATA[
    private static container getUserCacheKey(UserId _userId, MethodName _methodName)
    {
        return [_userId, _methodName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registrationNumberTaxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value of TaxId registration number.
    /// </summary>
    /// <returns>The current value of TaxId registration number.</returns>
    [SysClientCacheDataMethodAttribute]
    display VATNum registrationNumberTaxId()
    {
        return TaxRegistration::getPrimaryRegistrationNumber(this, TaxRegistrationTypesList::TAXID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAmbiguousReferenceResolverEvent</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(CaseAssociationLinkDataInteractorFactory), delegatestr(CaseAssociationLinkDataInteractorFactory, constructAmbiguousReferenceResolverEvent))]
    public static void constructAmbiguousReferenceResolverEvent(caseAssociationLinkInteractorFactoryEventArgs _args, DataInteractorTarget _dataInteractorTarget, Common _boundRecord)
    {
        _args.parmAmbiguousReferenceResolver(AmbiguousReferenceResolver::construct(_dataInteractorTarget, VendorDataInteractorFactory::PkFieldBinding));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account of the current vendor.
    /// </summary>
    /// <returns>
    /// AccountNum of the customer account.
    /// </returns>
    public display CustAccount custAccount()
    {
        return CustTable::findByPartyRecId(this.Party).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxRegistrationInfo_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the mandatory registration information is entered for the vendor.
    /// </summary>
    /// <returns>
    /// true if validation is successfull; otherwise, false.
    /// </returns>
    public boolean validateTaxRegistrationInfo_TH(Exception _exception = Exception::Error)
    {
        #ISOCountryRegionCodes
        TaxRegistration taxRegistration;
        DirPartyLocation dirPartyLocation;
        DirPartyType dirPartyType = this.partyType();
        boolean ret = true;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH])
            && this.postalAddress().CountryRegionId == SysCountryRegionCode::getCountryRegionIdByIsoCode(SysCountryRegionCode::countryInfo()))
        {
            if (dirPartyType == DirPartyType::Organization || dirPartyType == DirPartyType::Person)
            {
                EffectiveDate effectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

                select validTimeState(effectiveDate) count(RecId) from taxRegistration
                exists join dirPartyLocation
                    where dirPartyLocation.Location == this.postalAddress().Location
                      && taxRegistration.DirPartyLocation == dirPartyLocation.RecId;

                if (!taxRegistration.RecId)
                {
                    infolog.add(_exception, "@AccountsPayable:AtLeastOneRegistrationIdShouldBeEnteredForTheVendor");
                    ret = false;
                }
            }

            if (dirPartyType == DirPartyType::Organization 
                && !TaxInformation_TH::find(this.postalAddress().Location).BranchNumber)
            {
                infolog.add(_exception, "@AccountsPayable:BranchNumberShouldBeFilledForTheVendor");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkZeroAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the vendor invoice amount
    /// </summary>
    /// <param name = "_invoiceAmount">
    /// The amount of the vendor invoice
    /// </param>
    /// <param name = "_invoiceId">
    /// The invoice of vendor invoice
    /// </param>
    /// <param name = "_invoiceDate"></param>
    /// The Invoice Date of vendor invoice
    /// <returns>
    /// true if no invoice amount is fetched ,else validation is  failed
    /// </returns>
    private static boolean checkZeroAmount(AmountCur _invoiceAmount, InvoiceId _invoiceId, TransDate _invoiceDate)
    {
        boolean ret = true;

        if (_invoiceAmount != 0)
        {
            ret =  checkFailed(strFmt("@SYS50887", _invoiceId, date2StrUsr(_invoiceDate, DateFlags::FormatAll)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSameVendor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isSameVendor(AccountNum _accountNumFirst, DataAreaId _dataAreaIdFirst, AccountNum _accountNumSecond, DataAreaId _dataAreaIdSecond)
    {
        VendTable vendTableFirst = VendTable::findByCompany(_dataAreaIdFirst, _accountNumFirst);
        VendTable vendTableSecond = VendTable::findByCompany(_dataAreaIdSecond, _accountNumSecond);

        return vendTableFirst && vendTableSecond && vendTableFirst.Party == vendTableSecond.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstOrNull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the first or null record in <c>VendTable</c>.
    /// </summary>
    /// <returns>
    /// The first record of the <c>VendTable</c>.
    /// </returns>
    public static VendTable getFirstOrNull()
    {
        VendTable vendTable;

        select firstonly AccountNum from vendTable;

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of vendor relationships for the user
    /// </summary>
    public static int getVendorCount()
    {
        VendTable vendTable;
        
        select count(RecId) from vendTable;
                    
        return vendTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeDelegates_getTablesToAddCopiedValuesTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables and fields to update when copying the values to default dimensions on existing values.
    /// </summary>
    /// <param name = "_tableSet">A <c>Set</c> of <c>DimensionCopyValuesDataContract</c> values.</param>
    [SubscribesTo(classStr(DimensionAttributeDelegates), delegateStr(DimensionAttributeDelegates, getTablesToAddCopiedValuesTo))]
    public static void DimensionAttributeDelegates_getTablesToAddCopiedValuesTo(Set _tableSet)
    {
        DimensionCopyValueDataContract contract = DimensionCopyValueDataContract::construct(tableNum(VendTable), fieldNum(VendTable, DefaultDimension));
        contract.addKeyFieldDimensionPair(tableNum(VendTable), fieldNum(VendTable, AccountNum));
        contract.addKeyFieldDimensionPair(tableNum(VendGroup), fieldNum(VendTable, VendGroup));

        _tableSet.add(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyChangeProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the workflow is in such a state that changes can be made to change proposal fields.
    /// </summary>
    /// <returns>True if changes can be made; otherwise false.</returns>
    public boolean canModifyChangeProposal()
    {
        boolean ret = false;
        if (this.WorkflowState == VendTableChangeProposalWorkflowState::NotSubmitted
            || this.WorkflowState == VendTableChangeProposalWorkflowState::Rejected)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the state of the workflow field to a given value.
    /// </summary>
    /// <param name = "_recId">The ID of the record to update.</param>
    /// <param name = "_state">The desired state.</param>
    public static void updateWorkflowState(RecId _recId, VendTableChangeProposalWorkflowState _state)
    {
        ttsbegin;
        VendTable vendTable = VendTable::findRecId(_recId, true);
        vendTable.WorkflowState = _state;
        vendTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentJournalType</Name>
				<Source><![CDATA[
    private boolean isPaymentJournalType(LedgerJournalType _ledgerJournalType)
    {
        boolean ret;

        if (_ledgerJournalType == LedgerJournalType::Daily
            || _ledgerJournalType == LedgerJournalType::Payment
            || _ledgerJournalType == LedgerJournalType::VendPromissoryNoteDraw
            || _ledgerJournalType == LedgerJournalType::VendPaymRemittance
            || _ledgerJournalType == LedgerJournalType::VendPromissoryNoteRedraw
            || _ledgerJournalType == LedgerJournalType::VendPromissoryNoteSettle)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmAndSaveVendGroupChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows a confirmation dialog box if the <c>VendGroup</c> field value is modified and reverts to previous value if user selects cancel.
    /// </summary>
    /// <param name="_vendTable">
    ///     The <c>VendTable</c> buffer modified
    /// </param>
    /// <param name="isVendGroupSetOnce">
    ///     The value will be true, when a new record was created and user has already set the <c>VendGroup</c> value on the form once.
    /// </param>
    /// <returns>
    ///     True, if value was modified. False, if the value was reverted to the original value.
    /// </returns>
    public static boolean confirmAndSaveVendGroupChange(VendTable _vendTable, boolean isVendGroupSetOnce)
    {
        DialogButton buttonClicked;
        boolean canceled;
        boolean valueModified = true;
        boolean vendorGroupInitDefaultDimensionDialogFlightEnabled = VendorGroupInitDefaultDimensionDialogFlight::instance().isEnabled();

        if (_vendTable.orig().VendGroup || isVendGroupSetOnce)
        {
            if (vendorGroupInitDefaultDimensionDialogFlightEnabled)
            {
                buttonClicked = Box::yesNo("@SCM:VendorGroupInitDefaultDimensionDialog", DialogButton::Yes);
                if (buttonClicked == DialogButton::Yes)
                {
                    _vendTable.DefaultDimension = VendGroup::find(_vendTable.VendGroup).DefaultDimension;
                }
            }
            else
            {
                buttonClicked = Box::okCancel("@SCM:ModifyDimensionsInVendTableOnUpdatingVendGroup", DialogButton::Ok);
                canceled = (buttonClicked==DialogButton::Cancel);
            }
        }

        if (!vendorGroupInitDefaultDimensionDialogFlightEnabled)
        {
            if (canceled)
            {
                _vendTable.VendGroup = _vendTable.orig().VendGroup;
                valueModified = false;
            }
            else
            {
                _vendTable.DefaultDimension = VendGroup::find(_vendTable.VendGroup).DefaultDimension;
                valueModified = true;
            }
        }

        return valueModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKeyAgreementCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rename vendor account for current legal entity and in shared legal entities for <c>VendTable</c>.
    /// </summary>
    /// <param name = "_newVendTable">New vendor record after rename primary key.</param>
    /// <param name = "_oldVendTable">Original vendor record prior to rename primary key.</param>
    private void renamePrimaryKeyAgreementCrossCompany(VendTable _newVendTable, VendTable _oldVendTable)
    {
        container sharedCompanies = SysDataSharingCommonAPI::getCrossCompanySharingList(tableId2name(this.TableId), _oldVendTable.DataAreaId);

        if (conFind(sharedCompanies, _oldVendTable.DataAreaId) == 0)
        {
            sharedCompanies += _oldVendTable.DataAreaId;
        }

        if (sharedCompanies != conNull())
        {
            for (int j = 1; j <= conLen(sharedCompanies); j++)
            {
                SelectableDataArea sharedCompany = conPeek(sharedCompanies, j);

                changecompany(sharedCompany)
                {
                    this.renamePrimaryKeyAgreement(_newVendTable.AccountNum, _oldVendTable.AccountNum, sharedCompany);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKeyAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update purchase agreement related tables with new vendor account value.
    /// </summary>
    /// <param name = "_newVendAccount">New value for vendor account assigned after rename primary key.</param>
    /// <param name = "_oldVendAccount">Original value for vendor account prior to rename primary key.</param>
    /// <param name = "_updateDataAreaId">Legal entity where rename primary key event occurred</param>
    private void renamePrimaryKeyAgreement(VendAccount _newVendAccount, VendAccount _oldVendAccount, DataAreaId _updateDataAreaId)
    {
        ttsbegin;
        PurchAgreementHeader purchAgreementHeader;
        purchAgreementHeader.skipDataMethods(true);
        purchAgreementHeader.skipEvents(true);

        update_recordset purchAgreementHeader
            setting VendAccount = _newVendAccount
                where purchAgreementHeader.VendAccount == _oldVendAccount
                    && purchAgreementHeader.VendorDataAreaId == _updateDataAreaId;

        PurchAgreementHeaderDefault purchAgreementHeaderDefault;
        purchAgreementHeaderDefault.skipDataMethods(true);
        purchAgreementHeaderDefault.skipEvents(true);

        update_recordset purchAgreementHeaderDefault
            setting VendorInvoiceAccount = _newVendAccount
                where purchAgreementHeaderDefault.VendorInvoiceAccount == _oldVendAccount
                    && purchAgreementHeaderDefault.VendorInvoiceAccountDataAreaId == _updateDataAreaId;

        PurchAgreementHeaderHistory purchAgreementHeaderHistory;
        purchAgreementHeaderHistory.skipDataMethods(true);
        purchAgreementHeaderHistory.skipEvents(true);

        update_recordset purchAgreementHeaderHistory
            setting VendAccount = _newVendAccount
                where purchAgreementHeaderHistory.VendAccount == _oldVendAccount
                    && purchAgreementHeaderHistory.VendorDataAreaId == _updateDataAreaId;

        if (isConfigurationkeyEnabled(configurationKeyNum(PurchFrenchRegulatory_PSN)))
        {
            PurchAgreementHeaderDefault purchAgreementHeaderDefault_PSN;
            purchAgreementHeaderDefault_PSN.skipDataMethods(true);
            purchAgreementHeaderDefault_PSN.skipEvents(true);

            update_recordset purchAgreementHeaderDefault_PSN
            setting VendAccount_PSN = _newVendAccount
                where purchAgreementHeaderDefault_PSN.VendAccount_PSN == _oldVendAccount
                    && purchAgreementHeaderDefault_PSN.VendBankAccountDataAreaID_PSN == _updateDataAreaId;

            PurchAgreementSubcontractor purchAgreementSubcontractor_PSN;
            purchAgreementSubcontractor_PSN.skipDataMethods(true);
            purchAgreementSubcontractor_PSN.skipEvents(true);

            update_recordset purchAgreementSubcontractor_PSN
            setting VendAccount_PSN = _newVendAccount
                where purchAgreementSubcontractor_PSN.VendAccount_PSN == _oldVendAccount
                    && purchAgreementSubcontractor_PSN.VendBankAccountDataAreaID_PSN == _updateDataAreaId;

        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126056</DeveloperDocumentation>
	<FormRef>VendTable</FormRef>
	<Label>@SYS9449</Label>
	<ListPageRef>VendTableListPage</ListPageRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>Party</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Vendor</Modules>
	<PrimaryIndex>AccountIdx</PrimaryIndex>
	<ReplacementKey>AccountIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionPayablesTrans</Name>
			<Relation></Relation>
			<Table>JournalizingDefinitionPayablesTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>JournalizingDefinitionPurchTrans</Name>
			<Relation></Relation>
			<Table>JournalizingDefinitionPurchTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SuppItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinorityOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FemaleOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SegmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubsegmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyChainId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmallBusiness</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EthnicOriginId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VeteranOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisabledOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendVendorCollaborationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrgId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editVendExceptionGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Blocked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editBlockedReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BlockedReleaseDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBuyerGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BalanceAllCurrency</Name>
			<Label>@SYS24829</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>balanceAllCurrency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Budget</Name>
			<Label>@SYS15436</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClearingPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CaseMoreInformation</Name>
			<Label>@SYS314356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>nameAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChangeRequest</Name>
			<Label>@SYS184109</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChangeRequestOverride</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeRequestEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeRequestAllowOverride</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyChain</Name>
			<Label>@SYS105794</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyChainId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompanyFrench</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyIdSiret</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyNAFCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsDay_JP</Name>
			<Label>@GLS60066</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsDay_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConstructionIndustryScheme</Name>
			<Label>@SYS4000221</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CISCompanyRegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CISNationalInsuranceNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CISStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CISUniqueTaxPayerRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CISVerificationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CISVerificationNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineOfBusinessId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BirthPlace</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResidenceForeignCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BirthCountyCode_IT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Heir_IT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Credit</Name>
			<Label>@SYS7084</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CreditRating</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FreightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchaseShipCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DiotInformation_MX</Name>
			<Label>@SYS312478</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperationType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignTaxRegistration_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiotCountryCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Nationality_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformation_BR</Name>
			<Label>@GLS56</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NonTaxable_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendConsumption_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendIncomeCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ICMSContributor_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PresenceType_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FiscalInformationSpedReinf_BR</Name>
			<Label>@SpedReinf_AS:SpedReinf</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsCPRB_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Handheld</Name>
			<Label>@RET1575</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrgId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignResident_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SeparateDivisionId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>interCompanyTradingRelationActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>interCompanyTradingPartnerCompanyID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>interCompanyTradingPartnerAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryStatus</Name>
			<Label>@WAX357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultInventStatusId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113772</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numberSequenceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPriceToleranceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitedVATInvoice_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceMatching</Name>
			<Label>@SYS113690</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MatchingPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceReport_RU</Name>
			<Label>@GLS3800146</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StructDepartment_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MainContact</Name>
			<Label>@SYS105795</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MainContactWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Memo</Name>
			<Label>@SYS105796</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Memo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>National_BR</Name>
			<Label>@GLS30</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CNPJCPFNum_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IENum_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CCMNum_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NIT_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>INSSCEI_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CNAE_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignerId_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NotificationToTheCentralBank</Name>
			<Label>@SYS67156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankTransTypeCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCentralBankPurposeText</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OffsetAccount</Name>
			<Label>@SYS11162</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OffsetAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OffsetLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>paymentType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FactoringAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseCashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankOrderOfPayment_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntBank_LV</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LvPaymTransCodes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestCode_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPaymFeeCovered_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendPaymFeeGroup_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Posting</Name>
			<Label>@SYS12919</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseDiscount</Name>
			<Label>@SYS13267</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MultiLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineDisc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchaseOrder</Name>
			<Label>@SYS15812</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultInventStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendItemGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchPoolId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>YourAccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>balanceAllCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAmountPurchaseOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchCalendarId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CXMLOrderEnable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailIdentification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccrueSalesTaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxVendorChargeTaxToleranceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxVendorChargeTaxTolerancePercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxVendorChargeTaxToleranceValidation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InclTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrganizationNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryVatDate_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WithholdingTypeCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WithholdingTaxpayerType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Segment</Name>
			<Label>@SYS105797</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SegmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Services_BR</Name>
			<Label>@SYS35620</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ServiceCodeOnDlvAddress_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subsegment</Name>
			<Label>@SYS105798</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubsegmentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SupplementaryItem</Name>
			<Label>@SYS58240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SuppItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TAMRebate</Name>
			<Label>@MCR24921</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TAMRebateGroupID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Tax1099</Name>
			<Label>@SYS84747</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Reports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>W9</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>W9Included</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FATCAFilingRequirement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099RegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIDType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099Fields</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignEntityIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SecondTIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099NameChoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DBA</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameControl</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxRegistration_MX</Name>
			<Label>@SYS312490</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CompanyType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Rfc_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Curp_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateInscription_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATBook_ES</Name>
			<Label>@SYS91776</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashAccountingRegime_ES</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATTaxAgent_RU</Name>
			<Label>@GLS112871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATTaxAgent_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATPartnerKind_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATOperationCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendInvoiceDeclaration</Name>
			<Label>@SYS126906</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor_RU</Name>
			<Label>@SYS9455</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorProfile</Name>
			<Label>@SYS114264</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BidOnly</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OneTimeVendor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LocallyOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmallBusiness</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FemaleOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinorityOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EthnicOriginId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VeteranOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisabledOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HUBZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalVendorInReporting_IT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSelfInvoiceVendor_IT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfile</Name>
			<Label>@SYS114264</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LocallyOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SmallBusiness</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FemaleOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinorityOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EthnicOriginId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VeteranOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisabledOwned</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HUBZone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileBusinessDetails</Name>
			<Label>@SYS313733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrgId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyIdSiret</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BirthPlace</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResidenceForeignCountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileBusinessDetailsSummaryFields</Name>
			<Label>@SYS313733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrgId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileSalesTax</Name>
			<Label>@SYS313734</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FiscalCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrganizationNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileTax1099Options</Name>
			<Label>@SYS313735</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Tax1099Reports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>W9</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099RegNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxIDType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignEntityIndicator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Tax1099NameChoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DBA</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS7372</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCalculate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdVendorType_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdTaxGroup</Name>
			<Label>@GLS518</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCalculate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdVendorType_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MexicanSharedInfoByParty</Name>
			<Label>@Mexico:DirPartyInformationCopy_TableGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Rfc_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Curp_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignTaxRegistration_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Nationality_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiotCountryCode_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StateInscription_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CompanyType_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperationType_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendorCollaboration</Name>
			<Label>@SCM:VendorPortal</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendVendorCollaborationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LegalRepresentative_MX</Name>
			<Label>@SYS125611</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalRepresentativeName_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalRepresentativeRfc_MX</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LegalRepresentativeCurp_MX</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WorkflowState</Name>
			<Label>@SYS121130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkflowState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATNum</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumTableType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ResidenceForeignCountryRegionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
			<Label>@SYS81763</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymTermId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendLineDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCentralBankPurposeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankPurposeText</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCentralBankPurposeText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCentralBankTransTypeCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCentralBankTransTypeCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankOrderOfPayment_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankOrderOfPayment_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BidOnly</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBidOnly</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BirthCountyCode_IT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountyCode_IT</ExtendedDataType>
			<Label>@SYS343696</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BirthPlace</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>AddressCity</ExtendedDataType>
			<Label>@SYS81761</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Blocked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBlocked</ExtendedDataType>
			<EnumType>CustVendorBlocked</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>BlockedReleaseDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBlockedReleaseDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CashAccountingRegime_ES</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxReportCashAccountingRegime_ES</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CCMNum_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CCMNum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChangeRequestAllowOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS184107</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChangeRequestEnabled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VersioningChangeRequestRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChangeRequestOverride</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS184036</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CISCompanyRegNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>GB,IE</CountryRegionCodes>
			<ExtendedDataType>VendCISCompanyRegNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CISNationalInsuranceNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>GB,IE</CountryRegionCodes>
			<ExtendedDataType>VendCISNationalInsuranceNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CISStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>GB,IE</CountryRegionCodes>
			<EnumType>VendCISStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CISUniqueTaxPayerRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>GB,IE</CountryRegionCodes>
			<ExtendedDataType>VendCISUniqueTaxPayerRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CISVerificationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>GB,IE</CountryRegionCodes>
			<ExtendedDataType>VendCISVerificationDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CISVerificationNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>GB,IE</CountryRegionCodes>
			<ExtendedDataType>VendCISVerificationNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClearingPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendClearingPeriod</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CNAE_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CNAE_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CNPJCPFNum_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CNPJCPFNum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommercialRegister</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommercialRegister</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommercialRegisterInsetNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommercialRegisterInsetNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommercialRegisterSection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CommercialRegisterSection</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyChainId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmChainId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CompanyIdSiret</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyIdSiret</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CompanyNAFCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyNAFRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CompanyType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CompanyType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ConsDay_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendConsDay_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CreditMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCreditMaxMST</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditRating</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCreditRating</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Curp_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Curp_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DBA</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DBA</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultInventStatusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultStatusId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DestinationCodeId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDestinationCodeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DiotCountryCode_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>MX</CountryRegionCodes>
			<ExtendedDataType>DiotCountryCode_MX</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisabledOwned</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDisabledOwned</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendDlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EndDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendEndDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EthnicOriginId</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmEthnicOriginId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FactoringAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankVendFactoringAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FATCAFilingRequirement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendFATCAFilingRequirement</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FemaleOwned</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FemaleOwner</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FineCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>VendFineCode_BR</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FiscalCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FiscalCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignEntityIndicator</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099ForeignEntityIndicator</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignerId_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EFDocForeignerId_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForeignResident_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForeignResident_RU</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignTaxRegistration_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForeignTaxRegistration_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FreightZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendFreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Heir_IT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Heir_IT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HUBZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendHUBZone</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ICMSContributor_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ICMSContributor_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IENum_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IENum_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InclTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InclTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>INSSCEI_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>INSSCEI_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntBank_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LV</CountryRegionCodes>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
			<Label>@GLS108468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InterestCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>VendInterestCode_BR</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SysSharingType>Optional</SysSharingType>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPaymFeeCovered_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymFeeCovered_JP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsResident_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvResident</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemBuyerGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemBuyerGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LineOfBusinessId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendLineOfBusinessId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LocallyOwned</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendLocallyOwned</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LvPaymTransCodes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTransCodeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainContactWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmBusRelAccResponsibleWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryVatDate_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlMandatoryVatDate</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MarkupGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendMarkupGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MatchingPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchMatchingPolicyWithNotSetOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Memo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SmmCRM</ConfigurationKey>
			<ExtendedDataType>VendMemo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MinorityOwned</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MinorityOwner</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MultiLineDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendMultiLineDiscCode</ExtendedDataType>
			<Label>@SYS11440</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NameControl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NameControl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Nationality_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendorNationality_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NIT_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NIT_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NonTaxable_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<Label>@GLS63441</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>numberSequenceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OffsetAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SysSharingType>Never</SysSharingType>
			<EnumType>LedgerJournalACType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OffsetLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDynamicDefaultAccount</ExtendedDataType>
			<Label>@SYS11162</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OneTimeVendor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OneTimeSupplier</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OperationType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendorOperationType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrganizationNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OrganizationNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrgId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OrgId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDayId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymDayId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSched</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSpec</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PresenceType_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>EFDocPresenceType_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PriceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPriceGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchAmountPurchaseOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchAmountPurchaseOrder</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchPoolId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPurchPoolId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Rfc_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Rfc_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SecondTIN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>US</CountryRegionCodes>
			<Label>@SYS84761</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SegmentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SmmCRM</ConfigurationKey>
			<ExtendedDataType>smmSegmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SeparateDivisionId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SeparateDivisionId_RU</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ServiceCodeOnDlvAddress_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxServiceCodeOnDlvAddress_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SmallBusiness</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendSmallBusiness</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateInscription_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StateInscription_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StructDepartment_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StructDepartment_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubsegmentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SmmCRM</ConfigurationKey>
			<ExtendedDataType>smmSubsegmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SuppItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendSuppItemGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TAMRebateGroupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TAMVendRebateGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Tax1099Fields</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099FieldsRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Tax1099NameChoice</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>Tax1099NameChoice</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Tax1099RegNum</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099RegNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Tax1099Reports</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Tax1099Reporting</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxIDType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxIDType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdCalculate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS81757</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdVendorType_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdVendorType_TH</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UnitedVATInvoice_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitedVATInvoice_LT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UseCashDisc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>UseCashDisc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATOperationCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATOperationCode_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATPartnerKind_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VATPartnerKind_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATTaxAgent_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<Label>@GLS112871</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendConsumption_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendFinalUser_BR</ExtendedDataType>
			<Label>@GLS933</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendExceptionGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendGroupId</ExtendedDataType>
			<Label>@SYS3815</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendIncomeCode_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendIncomeCode_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceDeclaration_IS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDeclarationId_IS</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendItemGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendItemGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorPortalAdministratorRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>VendVendorPortalAdministrator</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendorType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymFeeGroup_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymFeeGroupId_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPriceToleranceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPriceToleranceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VeteranOwned</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendVeteranOwned</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>W9</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendW9</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>W9Included</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendW9Excluded</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>YourAccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccountExt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendVendorCollaborationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendVendorCollaborationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalRepresentativeCurp_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Curp_MX</ExtendedDataType>
			<HelpText>@SYS320868</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalRepresentativeName_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LegalRepresentativeName_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LegalRepresentativeRfc_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Rfc_MX</ExtendedDataType>
			<HelpText>@SYS320867</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WithholdingTaxpayerType_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CFDIWithholdingTaxpayerType_MX</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WithholdingTypeCode_MX</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CFDIWithholdingTypeCode_MX</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BirthDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>IT</CountryRegionCodes>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegNum_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>RU,EE,LV,LT,HU,PL,CZ</CountryRegionCodes>
			<ExtendedDataType>CompanyRegNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<ExtendedDataType>EnterpriseCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OriginalVendorInReporting_IT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OriginalVendorInReporting_IT</ExtendedDataType>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSelfInvoiceVendor_IT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IsSelfInvoiceVendor_IT</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowState</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendTableChangeProposalWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCPRB_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FBIsCPRB_BR</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CXMLOrderEnable</Name>
			<ExtendedDataType>CXMLOrderEnable</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<Label>@TaxIntegration:OverrideSalesTax</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchaseShipCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchVendorShipCalendarId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccrueSalesTaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxAccrueSalesTaxType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxVendorChargeTaxToleranceAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<HelpText>@TaxIntegration:ToleranceFixedAmountHelpText</HelpText>
			<Label>@TaxIntegration:ToleranceFixedAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxVendorChargeTaxTolerancePercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<HelpText>@TaxIntegration:TolerancePercentageHelpText</HelpText>
			<Label>@TaxIntegration:TolerancePercentage</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxVendorChargeTaxToleranceValidation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<HelpText>@TaxIntegration:TaxIntegrationUseTaxToleranceValidationTypeDesc</HelpText>
			<Label>@TaxIntegration:TaxIntegrationUseTaxToleranceValidationTypeLabel</Label>
			<EnumType>TaxIntegrationUseTaxToleranceValidationType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes>
		<AxTableFullTextIndex>
			<Name>FullTextIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableFullTextIndex>
	</FullTextIndexes>
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Party</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>YourAccountNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>YourAccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceDeclaration_ISIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceDeclaration_IS</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Tax1099FieldsIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Tax1099Fields</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MainContactWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PlTaxDueTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LvPaymTransCodesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LvPaymTransCodes</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendTableAcctIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Party</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CNPJCPFNUM_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CNPJCPFNUM_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FOREIGNERID_BRIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FOREIGNERID_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AifEndpointConstraintMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ConstraintId</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankAccountId</MapField>
					<MapFieldTo>BankAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeCode</MapField>
					<MapFieldTo>BankCentralBankPurposeCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCentralBankPurposeText</MapField>
					<MapFieldTo>BankCentralBankPurposeText</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyType_MX</MapField>
					<MapFieldTo>CompanyType_MX</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsDay_JP</MapField>
					<MapFieldTo>ConsDay_JP</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPersonId</MapField>
					<MapFieldTo>ContactPersonId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CreditMax</MapField>
					<MapFieldTo>CreditMax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Currency</MapField>
					<MapFieldTo>Currency</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustCollectionsContactPersonId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAccountExt</MapField>
					<MapFieldTo>YourAccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendCNPJCPF_BR</MapField>
					<MapFieldTo>CNPJCPFNum_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendIE_BR</MapField>
					<MapFieldTo>IENum_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactoringAccount</MapField>
					<MapFieldTo>FactoringAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FiscalCode</MapField>
					<MapFieldTo>FiscalCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ForeignTaxRegistration_MX</MapField>
					<MapFieldTo>ForeignTaxRegistration_MX</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GroupId</MapField>
					<MapFieldTo>VendGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineOfBusinessId</MapField>
					<MapFieldTo>LineOfBusinessId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrgId</MapField>
					<MapFieldTo>OrgId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Party</MapField>
					<MapFieldTo>Party</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymDayId</MapField>
					<MapFieldTo>PaymDayId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
					<MapFieldTo>PaymId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSchedId</MapField>
					<MapFieldTo>PaymSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymTermId</MapField>
					<MapFieldTo>PaymTermId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Rfc_MX</MapField>
					<MapFieldTo>Rfc_MX</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxPeriodPaymentCode_PL</MapField>
					<MapFieldTo>TaxPeriodPaymentCode_PL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdCalculate</MapField>
					<MapFieldTo>TaxWithholdCalculate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdGroup</MapField>
					<MapFieldTo>TaxWithholdGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DirPartyMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Party</MapField>
					<MapFieldTo>Party</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PaymModeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PaymMode</MapField>
					<MapFieldTo>PaymMode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymSpec</MapField>
					<MapFieldTo>PaymSpec</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendFiscalEstablishmentMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CNPJCPFNum</MapField>
					<MapFieldTo>CNPJCPFNum_BR</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IENum</MapField>
					<MapFieldTo>IENum_BR</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExemptVATNumMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankCentralBankPurpose</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankCentralBankPurpose</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankCentralBankPurpose</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankCentralBankPurposeCode</Name>
					<SourceEDT>BankCentralBankPurposeCode</SourceEDT>
					<Field>BankCentralBankPurposeCode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BirthCounty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCounty</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BirthCountyCode_IT</Name>
					<SourceEDT>AddressCountyCode_IT</SourceEDT>
					<Field>BirthCountyCode_IT</Field>
					<RelatedField>CountyCode_IT</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Branches_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Branches_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SeparateDivisionId_RU</Name>
					<SourceEDT>SeparateDivisionId_RU</SourceEDT>
					<Field>SeparateDivisionId_RU</Field>
					<RelatedField>BranchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BranchIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDisc</Name>
					<SourceEDT>VendCashDiscCode</SourceEDT>
					<Field>CashDisc</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyNAFCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyNAFCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyNAFCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CompanyNAFCode_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyNAFCode</Name>
					<Field>CompanyNAFCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ContactPerson</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>VendCurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustVendItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustVendItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustVendItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendItemGroupId</Name>
					<SourceEDT>VendItemGroupId</SourceEDT>
					<Field>VendItemGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendItemGroupId</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustVendPaymFeeGroup_JP</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendPaymFeeGroup_JP</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendPaymFeeGroup_JP</Name>
					<Field>VendPaymFeeGroup_JP</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DestinationCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DestinationCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DestinationCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DestinationCodeId</Name>
					<SourceEDT>VendDestinationCodeId</SourceEDT>
					<Field>DestinationCodeId</Field>
					<RelatedField>DestinationCodeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirAddressBookParty</Name>
			<RelatedTable>DirAddressBookPartyAllView</RelatedTable>
			<RelatedTableRole>DirAddressBookPartyAllView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendTable</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirPartyView</Name>
			<EntityRelationshipRole>@SYS126057</EntityRelationshipRole>
			<RelatedTable>DirPartyView</RelatedTable>
			<RelatedTableRole>DirPartyView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>DirPartyView_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvMode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<SourceEDT>VendDlvModeId</SourceEDT>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>VendDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FactoringAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_FactoringAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FactoringAccount</Name>
					<SourceEDT>BankVendFactoringAccount</SourceEDT>
					<Field>FactoringAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>HcmEthnicOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmEthnicOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmEthnicOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmEthnicOrigin_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EthnicOriginId</Name>
					<Field>EthnicOriginId</Field>
					<RelatedField>EthnicOriginId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventBuyerGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventBuyerGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventBuyerGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemBuyerGroupId</Name>
					<SourceEDT>ItemBuyerGroupId</SourceEDT>
					<Field>ItemBuyerGroupId</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocation</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocation</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventProfile_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS21530</EntityRelationshipRole>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventProfile_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileType_RU</Name>
					<Field>InventProfileType_RU</Field>
					<RelatedField>InventProfileType</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileId_RU</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>InventProfileId_RU</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventSite</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_InvoiceAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>VendInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceDeclarationId_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceDeclaration_IS</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultVendorDeclaration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Vendors</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceDeclaration_IS</Name>
					<Field>VendInvoiceDeclaration_IS</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LineOfBusiness</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LineOfBusiness</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LineOfBusiness</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineOfBusinessId</Name>
					<SourceEDT>VendLineOfBusinessId</SourceEDT>
					<Field>LineOfBusinessId</Field>
					<RelatedField>LineOfBusinessId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsAddressCountryRegion</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DiotCountryCode_MX</Name>
					<SourceEDT>DiotCountryCode_MX</SourceEDT>
					<Field>DiotCountryCode_MX</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LvPaymTransCodes</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LvPaymTransCodes</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LvPaymTransCodes</Name>
					<Field>LvPaymTransCodes</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainContactWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainContactWorker</Name>
					<Field>MainContactWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>MarkupGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>MarkupGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MarkupGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MarkupGroup</Name>
					<SourceEDT>VendMarkupGroupId</SourceEDT>
					<Field>MarkupGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendMarkupGroupId</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>MarkupModuleType::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>numberSequenceGroup</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>numberSequenceGroup</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OffsetLedgerDimension</Name>
					<Field>OffsetLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymDay</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymDay</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymDay</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymDayId</Name>
					<SourceEDT>VendPaymDayId</SourceEDT>
					<Field>PaymDayId</Field>
					<RelatedField>PaymDayId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymDayIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSched</Name>
					<SourceEDT>VendPaymSchedId</SourceEDT>
					<Field>PaymSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymTermId</Name>
					<SourceEDT>VendPaymTermId</SourceEDT>
					<Field>PaymTermId</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTermClearingPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm_ClearingPeriod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClearingPeriod</Name>
					<SourceEDT>VendClearingPeriod</SourceEDT>
					<Field>ClearingPeriod</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodPaymentCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroupEndDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup_EndDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndDisc</Name>
					<SourceEDT>VendEndDiscCode</SourceEDT>
					<Field>EndDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendEndDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::EndDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendEndDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroupLineDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup_LineDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LineDisc</Name>
					<SourceEDT>VendLineDiscCode</SourceEDT>
					<Field>LineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::LineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroupMultiLineDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup_MultiLineDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MultiLineDisc</Name>
					<SourceEDT>VendMultiLineDiscCode</SourceEDT>
					<Field>MultiLineDisc</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendMultiLineDiscCode</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendMultiLineDiscCode</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::MultiLineDiscGroup</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroupPriceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup_PriceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PriceGroup</Name>
					<SourceEDT>VendPriceGroup</SourceEDT>
					<Field>PriceGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendPriceGroup</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>VendPriceGroup</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchPool</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchPool</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchPool</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchPoolId</Name>
					<SourceEDT>VendPurchPoolId</SourceEDT>
					<Field>PurchPoolId</Field>
					<RelatedField>PurchPoolId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchPoolIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ResidenceForeignCountryRegionId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ResidenceForeignCountryRegionId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResidenceForeignCountryRegionId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>ResidenceForeignCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelChainGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelChainGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelChainGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CompanyChainId</Name>
					<SourceEDT>smmChainId</SourceEDT>
					<Field>CompanyChainId</Field>
					<RelatedField>ChainId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ChainIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmBusRelSegmentGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmBusRelSegmentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelSegmentGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SegmentId</Name>
					<SourceEDT>smmSegmentId</SourceEDT>
					<Field>SegmentId</Field>
					<RelatedField>SegmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SegmentIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmBusRelSubSegmentGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126058</EntityRelationshipRole>
			<RelatedTable>smmBusRelSubSegmentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmBusRelSubSegmentGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmBusRelSubSegmentGroup_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SegmentId</Name>
					<Field>SegmentId</Field>
					<RelatedField>SegmentId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubsegmentId</Name>
					<Field>SubsegmentId</Field>
					<RelatedField>SubsegmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SuppItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SuppItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SuppItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SuppItemGroupId</Name>
					<SourceEDT>VendSuppItemGroupId</SourceEDT>
					<Field>SuppItemGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<SourceEDT>VendSuppItemGroupId</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TAMVendRebateGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TAMVendRebateGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TAMRebateGroupID</Name>
					<Field>TAMRebateGroupID</Field>
					<RelatedField>VendRebateGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Tax1099Fields</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Tax1099Fields</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Tax1099Fields</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Vendors</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Tax1099Fields</Name>
					<Field>Tax1099Fields</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>TaxWithholdGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VATNum</Name>
			<EntityRelationshipRole>@SYS126060</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TaxVATNumTable</RelatedTable>
			<RelatedTableRole>TaxVATNumTable</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>TaxVATNumTable_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VATNum</Name>
					<Field>VATNum</Field>
					<RelatedField>VATNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VATOperationCode_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VATOperationCodeTable_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VATOperationCode_RU</Name>
					<SourceEDT>VATOperationCode_RU</SourceEDT>
					<Field>VATOperationCode_RU</Field>
					<RelatedField>OperationCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123560</EntityRelationshipRole>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankAccount</Name>
					<Field>BankAccount</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendCertification</Name>
			<RelatedTable>VendCertification</RelatedTable>
			<RelatedTableRole>VendCertification</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendCertification_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>VendParty</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendExceptionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendExceptionGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendExceptionGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendExceptionGroup_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendExceptionGroup</Name>
					<Field>VendExceptionGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendFineCode_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendFineSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FineCode_BR</Name>
					<Field>FineCode_BR</Field>
					<RelatedField>FineCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>FineCode</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendGroup</Name>
					<SourceEDT>VendGroupId</SourceEDT>
					<Field>VendGroup</Field>
					<RelatedField>VendGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendInterestSetup_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendInterestSetup_BR</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestCode_BR</Name>
					<Field>InterestCode_BR</Field>
					<RelatedField>InterestCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InterestCode</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendPaymentModeSpec</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126061</EntityRelationshipRole>
			<RelatedTable>VendPaymModeSpec</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPaymModeSpec</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendPaymModeSpec_VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymSpec</Name>
					<Field>PaymSpec</Field>
					<RelatedField>Specification</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPaymModeTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>VendPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymModeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendPriceToleranceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendPriceToleranceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendPriceToleranceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendPriceToleranceGroupId</Name>
					<SourceEDT>VendPriceToleranceGroupId</SourceEDT>
					<Field>VendPriceToleranceGroupId</Field>
					<RelatedField>VendPriceToleranceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSInventStatus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSInventStatus</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultInventStatusId</Name>
					<SourceEDT>WHSDefaultStatusId</SourceEDT>
					<Field>DefaultInventStatusId</Field>
					<RelatedField>InventStatusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkCalendarTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchCalendarId</Name>
					<SourceEDT>PurchCalendarId</SourceEDT>
					<Field>PurchCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DocuRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>DocuRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsDocumentOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsCustFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTable_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CFDIWithholdingType_MX</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CFDIWithholdingType_MX</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WithholdingTypeCode_MX</Name>
					<Field>WithholdingTypeCode_MX</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>