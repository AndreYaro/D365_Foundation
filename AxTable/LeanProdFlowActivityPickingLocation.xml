<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProdFlowActivityPickingLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanProdFlowActivityPickingLocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregatedLeanProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlowActivity</c> record for the related previous level activity.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlowActivity</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlowActivity aggregatedLeanProductionFlowActivity()
    {
        LeanProductionFlowActivity  leanProductionFlowActivity = this.leanProductionFlowActivity();
        PlanActivity                planActivity               = leanProductionFlowActivity.planActivity();

        //current production flow activity is atomic, find parent
        if (planActivity.isAtomic())
        {
            planActivity               = planActivity.prevLevelPlanActivity();
            leanProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(planActivity.RecId);
        }

        return leanProductionFlowActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDim</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkInventDim(
        LeanProductionFlowActivityRefRecId _productionFlowActivity = this.ProductionFlowActivity,
        InventDim                          _inventDim              = this.inventDim(),
        NoYes                              _updateOnHandPick       = this.OnHandUpdate == UnknownNoYes::Yes,
        WrkCtrResourceGroup                _wrkCtrResourceGroup    = null)
    {
        boolean         result = true;

        if (   _inventDim.InventLocationId
            && _inventDim.wmsLocationId)
        {
            WMSLocation wmsLocation = WMSLocation::find(_inventDim.wmsLocationId,_inventDim.InventLocationId);

            if (!wmsLocation)
            {
                result = result && checkFailed(strFmt("@SYS307493",_inventDim.wmsLocationId,_inventDim.InventLocationId));
            }

            if (wmsLocation
                    && !wmsLocation.canBeUsedWithPickingActivityUpdatingOnhandInventory()
                    && _updateOnHandPick)
            {
                if (_productionFlowActivity)
                {
                    PlanActivity planActivity = LeanProductionFlowActivity::find(_productionFlowActivity).planActivity();
                    if (planActivity
                            && planActivity.PlanActivityType == PlanActivityType::Pick)
                    {
                        result = result && checkFailed(strFmt("@SYS307492",wmsLocation.InventLocationId,wmsLocation.wmsLocationId));
                    }
                }
                else
                {
                    result = result && checkFailed(strFmt("@SYS307492",wmsLocation.InventLocationId,wmsLocation.wmsLocationId));
                }
            }
        }

        if (!_inventDim.InventSiteId)
        {
            result = result && checkFailed(strFmt("@SYS84378",fieldPName(InventDim,InventSiteId)));
        }

        if (!_inventDim.InventLocationId)
        {
            result = result && checkFailed(strFmt("@SYS84378",fieldPName(InventDim,InventLocationId)));
        }

        if (   _wrkCtrResourceGroup
            && _inventDim.InventSiteId != _wrkCtrResourceGroup.SiteId)
        {
            // Picking activities must be performed at the same site as the work cell
            result = result && checkFailed("@SYS309566");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityForPickingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an activity that is related to the picking location.
    /// </summary>
    /// <param name="_planActivity">
    /// The plan activity to which to relate the new picking activity.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension that the new picking activity should be related to.
    /// </param>
    /// <returns>
    /// The new plan picking activity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity createActivityForPickingLocation(
        PlanActivity _planActivity,
        InventDimId  _inventDimId)
    {
        PlanActivity                pickPlanActivity;
        PlanActivity                operatePlanActivity;
        LeanProductionFlowActivity  leanProductionFlowActivity;
        PlanActivityCreateProcess   planActivityCreateProcess = PlanActivityCreateProcess::construct();
        NoYes                       onHandUpdate;
        NoYes                       registerScrap;
        leanProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(_planActivity.RecId);
        operatePlanActivity        = _planActivity.nextLevelPlanActivity(PlanActivityType::Operate);

        if (   _planActivity
            && leanProductionFlowActivity
            && operatePlanActivity)
        {
            ttsbegin;
            // set additional parameters required
            planActivityCreateProcess.parmActivityName(_planActivity.Name);
            planActivityCreateProcess.parmPlanReference(_planActivity.PlanReference);
            planActivityCreateProcess.parmOperatingUnit(_planActivity.OperatingUnit);

            //update on hand
            if (this.OnHandUpdate == UnknownNoYes::Unknown)
            {
                this.OnHandUpdate = this.defaultOnHandUpdate();
            }
            onHandUpdate = this.OnHandUpdate == UnknownNoYes::Yes ? NoYes::Yes : NoYes::No;

            //register scrap
            if (this.RegisterScrap == UnknownNoYes::Unknown)
            {
                this.RegisterScrap = this.defaultRegisterScrap();
            }
            registerScrap = this.RegisterScrap == UnknownNoYes::Yes ? NoYes::Yes : NoYes::No;

            // create picking activity
            pickPlanActivity = planActivityCreateProcess.createProcessPickingActivity(
                                                                   this.ItemId,
                                                                   _inventDimId,
                                                                   onHandUpdate,
                                                                   registerScrap,
                                                                   _planActivity.RecId,
                                                                   operatePlanActivity.RecId,
                                                                   this,
                                                                  false);
            ttscommit;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return pickPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOnHandUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default value for the update on-hand setting from a related activity picking location
    /// with a blank item.
    /// </summary>
    /// <returns>
    /// An <c>UnknownNoYes</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// The default value is the <c>yes</c> value, if no activity picking location is found.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UnknownNoYes defaultOnHandUpdate()
    {
        LeanProdFlowActivityPickingLocation blankItemLeanProdFlowActivityPickingLocation;
        LeanProductionFlowActivity          blankItemLeanProductionFlowActivity;
        PlanActivity                        blankItemPlanActivity;
        UnknownNoYes                        onHandUpdate = UnknownNoYes::Yes;

        // try to find blank item picking location. Update on hand setting can default from this record.
        blankItemLeanProdFlowActivityPickingLocation = this.aggregatedLeanProductionFlowActivity().leanProdFlowActivityPickingLocation('');
        if (blankItemLeanProdFlowActivityPickingLocation)
        {
            blankItemLeanProductionFlowActivity = blankItemLeanProdFlowActivityPickingLocation.leanProductionFlowActivity();
            if (blankItemLeanProductionFlowActivity)
            {
                blankItemPlanActivity = blankItemLeanProductionFlowActivity.planActivity();
                if (   blankItemPlanActivity
                    && blankItemPlanActivity.OnHandUpdate == NoYes::No)
                {
                    onHandUpdate = UnknownNoYes::No;
                }
            }
        }

        return onHandUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRegisterScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default value for the register scrap setting from a related activity picking location
    /// with a blank item.
    /// </summary>
    /// <returns>
    /// An <c>UnknownNoYes</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// The default value is the <c>yes</c> value, if no activity picking location is found and the on hand
    /// setting is the <c>yes</c> value as well.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UnknownNoYes defaultRegisterScrap()
    {
        LeanProdFlowActivityPickingLocation blankItemLeanProdFlowActivityPickingLocation;
        LeanProductionFlowActivity          blankItemLeanProductionFlowActivity;
        UnknownNoYes                        onHandUpdate;
        UnknownNoYes                        registerScrap;

        // try to find blank item picking location. Update on hand setting can default from this record.
        if (this.OnHandUpdate == UnknownNoYes::Unknown)
        {
            onHandUpdate = this.defaultOnHandUpdate();
        }
        else
        {
            onHandUpdate = this.OnHandUpdate;
        }

        //register scrap can only be 'yes' if update on hand is also 'yes'
        if (onHandUpdate == UnknownNoYes::Yes)
        {
            registerScrap                                = UnknownNoYes::Yes;
            blankItemLeanProdFlowActivityPickingLocation = this.aggregatedLeanProductionFlowActivity().leanProdFlowActivityPickingLocation('');
            if (blankItemLeanProdFlowActivityPickingLocation)
            {
                blankItemLeanProductionFlowActivity = blankItemLeanProdFlowActivityPickingLocation.leanProductionFlowActivity();
                if (   blankItemLeanProductionFlowActivity
                    && blankItemLeanProductionFlowActivity.RegisterScrap == NoYes::No)
                {
                    registerScrap = UnknownNoYes::No;
                }
            }
        }
        else
        {
            registerScrap = UnknownNoYes::No;
        }

        return registerScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the current record.
    /// </summary>
    public void delete()
    {
        PlanActivity planActivity;

        ttsbegin;
        super();

        // Clean up the picking activity related to the picking location
        planActivity = LeanProductionFlowActivity::find(this.ProductionFlowActivity).planActivity(true);
        planActivity.delete();
        ttscommit;

        LeanProdFlowConsumptionActivityCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editOnHandUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the <c>OnHandUpdate</c> field.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the value should be set.
    /// </param>
    /// <param name="_onHandUpdate">
    ///    The <c>OnHandUpdate</c> field to set.
    /// </param>
    /// <returns>
    ///    An <c>OnHandUpdate</c> field value.
    /// </returns>
    /// <remarks>
    ///    In the case that the <c>OnHandUpdate</c> field value is equal to an <c>UnknownNoYes::Unknown</c>
    ///    value, this method performs lookup in the <c>PlanActivity</c> table to find the value.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit OnHandUpdate editOnHandUpdate(
        boolean      _set,
        OnHandUpdate _onHandUpdate)
    {
        if (_set)
        {
            this.OnHandUpdate = _onHandUpdate == NoYes::Yes ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (this.OnHandUpdate == UnknownNoYes::Unknown)
        {
            if (this.RecId)
            {
                this.OnHandUpdate = this.leanProductionFlowActivity().planActivity().OnHandUpdate == NoYes::Yes ? UnknownNoYes::Yes : UnknownNoYes::No;
            }
            else
            {
                this.OnHandUpdate = this.defaultOnHandUpdate();
            }
        }

        return this.OnHandUpdate == UnknownNoYes::Yes ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRegisterScrap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the <c>RegisterScrap</c> field.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the value should be set.
    /// </param>
    /// <param name="_registerScrap">
    ///    The <c>RegisterScrap</c> field to set.
    /// </param>
    /// <returns>
    ///    An <c>RegisterScrap</c> field value.
    /// </returns>
    /// <remarks>
    ///    In the case that the <c>RegisterScrap</c> field value is equal to an <c>UnknownNoYes::Unknown</c>
    ///    value, this method performs lookup in the <c>LeanProductionFlowActivity</c> table to find the value.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LeanRegisterScrap editRegisterScrap(
        boolean           _set,
        LeanRegisterScrap _registerScrap)
    {
        if (_set)
        {
            this.RegisterScrap = _registerScrap == NoYes::Yes ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (this.RegisterScrap == UnknownNoYes::Unknown)
        {
            if (this.RecId)
            {
                this.RegisterScrap = this.leanProductionFlowActivity().RegisterScrap == NoYes::Yes ? UnknownNoYes::Yes : UnknownNoYes::No;
            }
            else
            {
                this.RegisterScrap = this.defaultRegisterScrap();
            }
        }

        return this.RegisterScrap == UnknownNoYes::Yes ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        LeanProdFlowConsumptionActivityCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record for the current table buffer.
    /// </summary>
    /// <returns>
    /// A <c>InventDim</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the level of inventory control at the location.
    /// </summary>
    /// <returns>
    /// The level of inventory control.
    /// </returns>
    /// <remarks>
    /// The level can be full or restricted.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanInventoryControl inventoryControl()
    {
        LeanInventoryControl    leanInventoryControl = LeanInventoryControl::Full;
        InventDim               inventDim            = InventDim::find(this.InventDimId);

        if (   inventDim.InventLocationId
            && inventDim.wmsLocationId
            && WMSLocation::find(inventDim.wmsLocationId,inventDim.InventLocationId).isLevelOfInventoryControlRestricted())
        {
            leanInventoryControl = LeanInventoryControl::Restricted;
        }

        return leanInventoryControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlowActivity</c> record for the current table buffer.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>LeanProductionFlowActivity</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlowActivity leanProductionFlowActivity(boolean _forUpdate = false)
    {
        return LeanProductionFlowActivity::find(this.ProductionFlowActivity,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LeanProdFlowActivityPickingLocation, ItemId):
                this.ItemDataAreaId = this.ItemId ? appl.company().dataArea(tableNum(InventTable)) : '';
                break;
            case fieldNum(LeanProdFlowActivityPickingLocation, InventDimId):
                this.InventDimDataAreaId = this.InventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storageInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills an <c>InventDim</c> buffer with warehouse, location, and site identification.
    /// </summary>
    /// <returns>
    /// A <c>InventDim</c> table buffer.
    /// </returns>
    /// <remarks>
    /// The buffer that is returned does not exist in the database. The <c>InventDimId</c> field will not
    /// be set.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim storageInventDim()
    {
        InventDim       fullInventDim = this.inventDim();
        InventDim       inventDim;

        inventDim.InventLocationId = fullInventDim.InventLocationId;
        inventDim.wmsLocationId    = fullInventDim.wmsLocationId;
        inventDim.InventSiteId     = fullInventDim.InventSiteId
                                        ? fullInventDim.InventSiteId
                                        : InventLocation::find(fullInventDim.InventLocationId).InventSiteId;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current record.
    /// </summary>
    public void update()
    {
        LeanProductionFlowActivity  leanProductionFlowActivity;
        PlanActivity                planActivity;
        NoYes                       onHandUpdate;
        NoYes                       registerScrap;

        ttsbegin;
        onHandUpdate               = this.OnHandUpdate  == UnknownNoYes::Yes ? NoYes::Yes : NoYes::No;
        registerScrap              = this.RegisterScrap == UnknownNoYes::Yes ? NoYes::Yes : NoYes::No;
        leanProductionFlowActivity = this.leanProductionFlowActivity(true);
        planActivity               = leanProductionFlowActivity.planActivity(true);

        if (planActivity.OnHandUpdate != onHandUpdate)
        {
            planActivity.OnHandUpdate = onHandUpdate;
            planActivity.update();
        }

        if (leanProductionFlowActivity.RegisterScrap != registerScrap)
        {
            leanProductionFlowActivity.RegisterScrap = registerScrap;
            leanProductionFlowActivity.update();
        }

        super();
        ttscommit;

        LeanProdFlowConsumptionActivityCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        PlanActivity    planActivity;
        boolean         result = super();

        if (result)
        {
            if (result)
            {
                planActivity = LeanProductionFlowActivity::find(this.ProductionFlowActivity).planActivity(true);
                result       = planActivity.validateDelete(
                                                           !FormDataUtil::isFormDataSource(this)
                                                           );
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return    super()
               && this.checkInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>LeanProdFlowActivityPickingLocation</c> table exists.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>LeanProdFlowActivityPickingLocation</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _refRecId)
    {
        return _refRecId &&
               (select firstonly RecId from leanProdFlowActivityPickingLocation
                    where leanProdFlowActivityPickingLocation.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LeanProdFlowActivityPickingLocation</c> table.
    /// </summary>
    /// <param name="_refRecId">
    /// The record ID of the <c>LeanProdFlowActivityPickingLocation</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LeanProdFlowActivityPickingLocation</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProdFlowActivityPickingLocation find(
        RefRecId _refRecId,
        boolean  _forUpdate = false)
    {
        LeanProdFlowActivityPickingLocation    leanProdFlowActivityPickingLocation;

        if (_refRecId)
        {
            leanProdFlowActivityPickingLocation.selectForUpdate(_forUpdate);

            select firstonly leanProdFlowActivityPickingLocation
                where leanProdFlowActivityPickingLocation.RecId == _refRecId;
        }

        return leanProdFlowActivityPickingLocation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS325495</DeveloperDocumentation>
	<FormRef>PlanActivityDetails</FormRef>
	<Label>@SYS152595</Label>
	<SingularLabel>@SYS152596</SingularLabel>
	<TableGroup>Group</TableGroup>
	<TitleField1>ProductionFlowActivity</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>ProductionFlowActivityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductionFlowActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductionFlowActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS7407</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeanProductionFlowActivity</Name>
			<Label>@SYS152580</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductionFlowActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OnHand</Name>
			<Label>@SYS115940</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OnHandUpdate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickingLocation</Name>
			<Label>@SYS50214</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RegisterScrap</Name>
			<Label>@SYS325491</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegisterScrap</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnHandUpdate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>UnknownNoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductionFlowActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanProductionFlowActivityRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RegisterScrap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
			<EnumType>UnknownNoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductionFlowActivityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductionFlowActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionFlowActivityPickingLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimDataAreaId</Name>
					<Field>InventDimDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionFlowActivityPickingLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanProductionFlowActivity</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>LeanProductionFlowActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionFlowActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionFlowActivityPickingLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductionFlowActivity</Name>
					<Field>ProductionFlowActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>