<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransTaxExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransTaxExtension extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalTrans</c> value for the specified <c>LedgerJournalTransTaxIntegrationExtension</c> record.
    /// </summary>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTrans</c> record.
    /// </returns>
    public LedgerJournalTrans getLedgerJournalTrans(boolean _update = false)
    {
        return LedgerJournalTrans::findRecId(this.LedgerJournalTrans, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>LedgerJournalTransTaxIntegrationExtension</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The reference record ID of the record to find.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>LedgerJournalTransTaxIntegrationExtension</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerJournalTransTaxExtension findByLedgerJournalTrans(
        LedgerJournalTransRefRecId _recId,
        boolean _update = false)
    {
        LedgerJournalTransTaxExtension ledgerJournalTransTaxExt;

        if (_recId)
        {
            ledgerJournalTransTaxExt.selectForUpdate(_update);
            select firstOnly crossCompany ledgerJournalTransTaxExt
                where ledgerJournalTransTaxExt.LedgerJournalTrans == _recId;
        }

        return ledgerJournalTransTaxExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.LedgerJournalTrans && !LedgerJournalTransTaxExtension::findByLedgerJournalTrans(this.LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTransLoc = this.getLedgerJournalTrans();
            if (TaxIntegrationSkipInsertTaxExtensionForTmpTableFlight::instance().isEnabled()
                && !ledgerJournalTransLoc)
            {
                return;
            }

            if (LedgerJournalTransTaxExtension::isExtensionEnabledV2(ledgerJournalTransLoc.ledgerJournalTable().JournalType))
            {
                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.LedgerJournalTrans)
        {
            LedgerJournalTrans ledgerJournalTranslocal = this.getLedgerJournalTrans();

            if (!ledgerJournalTranslocal)
            {
                // LedgerJournalTrans does not exist.
                return;
            }

            LedgerJournalTable ledgerJournalTable = ledgerJournalTransLocal.ledgerJournalTable();

            if (LedgerJournalTransTaxExtension::isExtensionEnabledV2(ledgerJournalTable.JournalType))
            {
                if (this.haveTaxesChanged(this.orig())
                    && TaxUncommitted::existByDocumentAndInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTransLocal.Voucher, ledgerJournalTransLocal.Invoice))
                {
                    TaxUncommitted::deleteForInvoice(ledgerJournalTable.TableId, ledgerJournalTable.RecId, ledgerJournalTransLocal.Voucher, ledgerJournalTransLocal.Invoice);
                }

                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveTaxesChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if taxes may have changed for the <c>LedgerJournalTransTaxExtension</c> table record.
    /// </summary>
    /// <param name = "_originalTaxExtension">
    /// The original <c>LedgerJournalTransTaxExtension</c> table record.
    /// </param>
    /// <returns>
    /// true if taxes may have changed; otherwise, false.
    /// </returns>
    protected boolean haveTaxesChanged(LedgerJournalTransTaxExtension _originalTaxExtension = this.orig())
    {
        return this.OverrideSalesTax != _originalTaxExtension.OverrideSalesTax
            || this.VATNumRecId != _originalTaxExtension.VATNumRecId
            || this.VATNumTableType != _originalTaxExtension.VATNumTableType
            || (TaxIntegrationUtils::isTaxIntegrationUseTaxAssessmentEnabled(TaxIntegrationBusinessProcess::Journal)
                && (this.AccrueSalesTaxType != _originalTaxExtension.AccrueSalesTaxType
                    || this.VendorChargedSalesTax != _originalTaxExtension.VendorChargedSalesTax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLedgerJournalTransTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data from <c>LedgerJournalTransTaxExtension</c> to new extension table
    /// when new <c>LedgerJournalTrans</c> is created.
    /// </summary>
    /// <param name = "_ledgerJournalTransOld">The old <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_ledgerJournalTransNew">The new <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_fullCopy">A Boolean value that indicates whether to full copy the data; optional.</param>
    /// <returns>The tax extension table for new <c>LedgerJournalTrans</c>.</returns>
    public static LedgerJournalTransTaxExtension copyLedgerJournalTransTaxExtension(
        LedgerJournalTrans _ledgerJournalTransOld,
        LedgerJournalTrans _ledgerJournalTransNew,
        boolean _fullCopy = false)
    {
        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtOld = _ledgerJournalTransOld.ledgerJournalTransTaxExtension();
        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtNew;

        if (ledgerJournalTransTaxExtOld.RecId && _ledgerJournalTransNew.RecId)
        {
            if (_fullCopy)
            {
                ledgerJournalTransTaxExtNew = ledgerJournalTransTaxExtOld.data();
                ledgerJournalTransTaxExtNew.RecId = 0;
            }
            else
            {
                ledgerJournalTransTaxExtNew.OverrideSalesTax = ledgerJournalTransTaxExtOld.OverrideSalesTax;
            }

            ledgerJournalTransTaxExtNew.save(_ledgerJournalTransNew, true);
        }

        return ledgerJournalTransTaxExtNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates extension table when it is missing, or updates extension table when modify values.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The record of <c>LedgerJournalTrans</c>.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    public void save(LedgerJournalTrans _ledgerJournalTrans, boolean _forUpdate = false)
    {
        this.LedgerJournalTrans = _ledgerJournalTrans.RecId;

        if (this.RecId)
        {
            this.selectForUpdate(_forUpdate);
        }

        if (FormDataUtil::isFormDataSource(this))
        {
            if (FormDataUtil::getFormDataSource(this).validateWrite())
            {
                FormDataUtil::getFormDataSource(this).write();
            }
        }
        else
        {
            if (this.validateWrite())
            {
                this.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        if (this.LedgerJournalTrans)
        {
            LedgerJournalTable ledgerJournalTable = this.getLedgerJournalTrans().ledgerJournalTable();
            if (LedgerJournalTransTaxExtension::isExtensionEnabledV2(ledgerJournalTable.JournalType))
            {
                ret = super();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of the fields in a particular <c>LedgerJournalTrans</c> table row to their default
    /// values.
    /// </summary>
    public void defaultRow()
    {
        super();
        LedgerJournalOperation operation = this.RecId == 0 ? LedgerJournalOperation::Create : LedgerJournalOperation::Update;

        if (operation == LedgerJournalOperation::Create)
        {
            if (!this.isFieldSet(fieldNum(LedgerJournalTransTaxExtension, OverrideSalesTax)))
            {
                this.defaultFieldValue(fieldNum(LedgerJournalTransTaxExtension, OverrideSalesTax), this.determineDefaultOverrideSalesTax());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldValue</Name>
				<Source><![CDATA[
    internal void defaultFieldValue(FieldId _fieldId, anytype _fieldValue)
    {
        this.(_fieldId) = _fieldValue;
        this.fieldState(_fieldId, FieldState::Defaulted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOverrideSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default override sales tax value.
    /// </summary>
    /// <returns>
    /// The default override sales tax value.
    /// </returns>
    internal TaxIntegrationOverrideSalesTax determineDefaultOverrideSalesTax()
    {
        TaxIntegrationOverrideSalesTax overrideSalesTax;

        LedgerJournalTrans ledgerJournalTrans = this.getLedgerJournalTrans();
        LedgerJournalTable ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            overrideSalesTax = ledgerJournalTable.OverrideSalesTax || ledgerJournalTrans.findCustTable().OverrideSalesTax;
        }
        else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            overrideSalesTax = ledgerJournalTable.OverrideSalesTax || ledgerJournalTrans.findVendTable().OverrideSalesTax;
        }
        else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
        {
            overrideSalesTax = ledgerJournalTable.OverrideSalesTax || ledgerJournalTrans.findCustForOffset().OverrideSalesTax;
        }
        else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
        {
            overrideSalesTax = ledgerJournalTable.OverrideSalesTax || ledgerJournalTrans.findVendForOffset().OverrideSalesTax;
        }
        else
        {
            overrideSalesTax = ledgerJournalTable.OverrideSalesTax;
        }

        return overrideSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtensionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether table <c>LedgerJournalTransTaxExtension</c> is enabled.
    /// </summary>
    /// <returns>
    /// Reuturns true if the extension table enabled, otherwise false.
    /// </returns>
    [SysObsolete("The method has been deprecated use isExtensionEnabledV2 instead",
        false, 20\07\2023)]
    public static boolean isExtensionEnabled()
    {
        return Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Journal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtensionEnabledV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether table <c>LedgerJournalTransTaxExtension</c> is enabled.
    /// </summary>
    /// <param name = "_journalType">The journal type.</param>
    /// <returns>
    /// Reuturns true if the extension table enabled, otherwise false.
    /// </returns>
    public static boolean isExtensionEnabledV2(LedgerJournalType _journalType = LedgerJournalType::None)
    {
        boolean enabled = true;
        if (_journalType == LedgerJournalType::None)
        {
            enabled = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Journal);
        }
        else
        {
            enabled = TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(_journalType);
        }
        return enabled 
                || TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(true) 
                || FeatureStateProvider::isFeatureEnabled(TaxUseTaxAssessmentAdjustSalesTaxFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLedgerJournalTransTaxExtensionForInvoiceApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the data from <c>LedgerJournalTransTaxExtension</c> to new extension table for invoice approval
    /// when new <c>LedgerJournalTrans</c> is created.
    /// </summary>
    /// <param name = "_ledgerJournalTransOld">The old <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_ledgerJournalTransNew">The new <c>LedgerJournalTrans</c> record.</param>
    internal static void copyLedgerJournalTransTaxExtensionForInvoiceApproval(
        LedgerJournalTrans _ledgerJournalTransOld,
        LedgerJournalTrans _ledgerJournalTransNew)
    {
        if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(LedgerJournalType::Approval))
        {
            LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = LedgerJournalTransTaxExtension::findByLedgerJournalTrans(_ledgerJournalTransNew.RecId, true);

            // Checks if extension table is inserted already since it may be inserted via LedgerJournalTrans.insert() with ledgerJournalTrans.SysExtensionSerializerMap method;
            // If yes, it should update the OverrideSalesTax to Yes by defaut;
            // otherwise, it will init data from invoice pool transaction, and then insert.
            if (ledgerJournalTransTaxExtension)
            {
                ledgerJournalTransTaxExtension.OverrideSalesTax = true;
                ledgerJournalTransTaxExtension.update();
            }
            else
            {
                ledgerJournalTransTaxExtension.data(_ledgerJournalTransOld.ledgerJournalTransTaxExtension());
                ledgerJournalTransTaxExtension.LedgerJournalTrans = _ledgerJournalTransNew.RecId;
                ledgerJournalTransTaxExtension.OverrideSalesTax = true;
                ledgerJournalTransTaxExtension.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@TaxIntegration:LedgerJournalTransTaxExtensionHelpText</DeveloperDocumentation>
	<Label>@TaxIntegration:LedgerJournalTransTaxExtension</Label>
	<TitleField1>LedgerJournalTrans</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>LedgerJournalTransIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<ReplacementKey>LedgerJournalTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OverrideSalesTax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntegrationOverrideSalesTax</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxInCostPrice</Name>
			<AssetClassification>Customer content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<HelpText>@TaxTrans:TaxInCostPriceHelpText</HelpText>
			<Label>@SYS24596</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>VendorChargedSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxVendorChargedSalesTax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccrueSalesTaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxAccrueSalesTaxType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorChargedTaxTolerance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxIntegrationVendorChargedTaxTolerance</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorChargedTaxAssessment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxIntegrationVendorChargedTaxAssessment</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>LedgerJournalTrans</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>