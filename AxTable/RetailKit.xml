<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailKit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailKit extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ItemNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the kit product name.
    /// </summary>
    /// <returns>
    /// The product name of the kit.
    /// </returns>
    /// <remarks>
    /// This method returns translated name of product.
    /// </remarks>
    public display EcoResProductDisplayProductNumber ItemNumber()
    {
        return EcoResProduct::find(this.ProductMaster).DisplayProductNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the kit product name.
    /// </summary>
    /// <returns>
    /// The product name of the kit.
    /// </returns>
    /// <remarks>
    /// This method returns translated name of product.
    /// </remarks>
    public display EcoResproductName ProductName()
    {
        return EcoResProduct::find(this.ProductMaster).productName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveKit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change Status of the Retail Kit to Approved
    /// record.
    /// </summary>
    /// <param name="_retailKit">
    /// The retail kit record.
    /// </param>
    /// <remarks>
    /// Retail Kit Status is set to Approved to enable creation of assembly orders
    /// </remarks>
    public static void approveKit(RetailKit _retailKit)
    {
        RetailKitConfigurator::newFromRetailKit(_retailKit).generateNewVariants();
        _retailKit.Status = RetailKitStatus::Approved;
        _retailKit.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatusToDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change Status of the Retail Kit to Draft
    /// record.
    /// </summary>
    /// <param name="_retailKit">
    /// The retail kit record.
    /// </param>
    /// <remarks>
    /// Retail Kit Status is set to Draft to enable creation of assembly orders.
    /// </remarks>
    [SysObsolete('Revert fixes of bugs 472039 and 339047 as Kit configuration code is not supporting for update QTY and UOM fields', false, 30\11\2020)]
    public static void changeStatusToDraft(RetailKit _retailKit)
    {
        RetailKitVariantComponent variantComponent;
        RetailKitComponent retailComponent;
        
        ttsbegin;
        while select retailComponent 
            where retailComponent.Kit == _retailKit.RecId
        {
            delete_from variantComponent 
                where variantComponent.ComponentRecId == retailComponent.RecId;
        }

        _retailKit.Status = RetailKitStatus::Draft;
        _retailKit.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Retail kit is located in the <c>RtailKIT</c> table.
    /// </summary>
    /// <param name="_retailKitId">
    /// The Retail prodiuct ID in the <c>RetailKit</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RetailKitRecId _retailKitId)
    {
        return _retailKitId &&
            (select RecId from retailKit
                where retailKit.RecId == _retailKitId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Retail kit is located in the <c>RtailKIT</c> table.
    /// </summary>
    /// <param name="_ecoResProductmasterRecId">
    /// The product master rec ID to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByProductMaster(RecId _ecoResProductmasterRecId)
    {
        return _ecoResProductmasterRecId &&
            (select RecId from retailKit
                where retailKit.ProductMaster == _ecoResProductmasterRecId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>RetailKit</c> table.
    /// </summary>
    /// <param name="_retailKit">
    ///    The ID of the <c>RetailKit</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>RetailKit</c> table; otherwise, an empty record.
    /// </returns>
    static public RetailKit find(RefRecId _retailKit, boolean _forUpdate = false)
    {
        RetailKit retailKit;

        if (_retailKit)
        {
            retailKit.selectForUpdate(_forUpdate);
            select firstonly retailKit
                where retailKit.RecId == _retailKit;
        }
        return retailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductmaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>RetailKit</c> table.
    /// </summary>
    /// <param name="_ecoResProductMasterRecId">
    ///    The ID of the <c>EcoResProductMasterRecId</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>RetailKit</c> table; otherwise, an empty record.
    /// </returns>
    static public RetailKit findByProductmaster(RecId _ecoResProductMasterRecId, boolean _forUpdate = false)
    {
        RetailKit retailKit;

        if (_ecoResProductMasterRecId)
        {
            retailKit.selectForUpdate(_forUpdate);
            select firstonly retailKit
                where retailKit.ProductMaster == _ecoResProductMasterRecId;
        }
        return retailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasComponents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Retail kit has components defined.
    /// </summary>
    /// <param name="_retailKitId">
    /// The Retail product ID in the <c>RetailKit</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified RetailKit has components defined.
    /// </returns>
    public static boolean hasComponents(RetailKitRecId _retailKitId)
    {
        return _retailKitId &&
            (select RecId from retailKitComponent
                where retailKitComponent.Kit == _retailKitId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified Retail kit has configurations defined.
    /// </summary>
    /// <param name="_retailKit">
    /// The Retail product in the <c>RetailKit</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified RetailKit has configurations defined.
    /// </returns>
    public static boolean hasVariants(RetailKit _retailKit)
    {
        return _retailKit &&
            (select RecId from ecoResDistinctProductVariant
                where ecoResDistinctProductVariant.ProductMaster == _retailKit.ProductMaster
            ).RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1070</DeveloperDocumentation>
	<FormRef>RetailKitConfigure</FormRef>
	<Label>@REX1066</Label>
	<ListPageRef>EcoResProductListPage</ListPageRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProductMaster</TitleField1>
	<TitleField2>Status</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Merchandising</Modules>
	<ReplacementKey>RetailKitIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscontinueKit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisassemblyAtRegisterAllowed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductMaster</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailKitGroup</Name>
			<Label>@REX1066</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscontinueKit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductMaster</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisassemblyAtRegisterAllowed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisassemblyAtRegisterAllowed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DiscontinueKit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductMaster</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailKitStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailKitIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductMaster</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResProductMaster</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResProductMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductMaster</Name>
					<Field>ProductMaster</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>