<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMASubscriptionTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMASubscriptionTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accruedPeriodCode</Name>
				<Source><![CDATA[
    public display ProjPeriodId accruedPeriodCode()
    {
        return SMASubscriptionGroup::find(this.GroupId).AccuedPeriodcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accruePeriodEnd</Name>
				<Source><![CDATA[
    public TransDate accruePeriodEnd(TransDate _endDate)
    {
        return ProjPeriodLine::findFromPeriod(this.accruedPeriodCode(), _endDate).PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accrueperiodStart</Name>
				<Source><![CDATA[
    public TransDate accrueperiodStart(TransDate _startDate)
    {
        return ProjPeriodLine::findFromPeriod(this.accruedPeriodCode(), _startDate).PeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAccrued</Name>
				<Source><![CDATA[
    public boolean canBeAccrued()
    {
        return SMASubscriptionGroup::find(this.GroupId).AccueRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentIndexPrice</Name>
				<Source><![CDATA[
    public display SMACurIndexPrice currentIndexPrice()
    {
        return (this.BasePrice * this.SubscriptionIndex) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPrice</Name>
				<Source><![CDATA[
    public display SMACurPrice currentPrice(TransDate _pricedate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return SMASalesPriceSubscription::findSalesPrice(this.SubscriptionId,
                                                         this.ProjId,
                                                         this.ProjCategoryId,
                                                         _pricedate,
                                                         this.CurrencyCode,
                                                         this.invoicePeriodCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPeriods</Name>
				<Source><![CDATA[
    public container findPeriods(
        TransDate _fromdate,
        TransDate _todate,
        boolean   _closedperiods = false)
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        container               result;
        TransDate               periodStartdate     = this.invoiceperiodStart(_fromdate);
        TransDate               periodEnddate       = this.invoiceperiodEnd(_todate);
        TransDate               tmpstartDate        = dateNull();
        TransDate               tmpendDate          = dateNull();
        Counter                 counter;
        Counter                 indexfrom;
        Counter                 indexto;
        Counter                 maxinterval         = (periodEnddate - periodStartdate) + 1;
        Counter                 arrayOfDays[maxinterval];
        boolean                 nothingFound = true;

        while select smaStartDate, smaEnddate, smaSubscriptionPeriodType from projRevenueTrans
            where projRevenueTrans.smaSubscriptionId          == this.SubscriptionId
               && projRevenueTrans.smaStartDate               >= periodStartdate
               && projRevenueTrans.smaEnddate                 <= periodEnddate
               && projRevenueTrans.TransactionOrigin          == ProjOrigin::Subscription
               && projRevenueTrans.smaSubscriptionPeriodType  != SMASubscriptionPeriodType::PriceChange
            exists join projRevenueTransSale
                where projRevenueTransSale.TransId                == projRevenueTrans.TransId
                   && (projRevenueTransSale.TransStatus            == ProjTransStatus::Posted 
                    || projRevenueTransSale.TransStatus            == ProjTransStatus::InvoiceProposal
                    || projRevenueTransSale.TransStatus            == ProjTransStatus::Invoiced
                    || projRevenueTransSale.TransStatus            == ProjTransStatus::MarkedCreditNote
                    || projRevenueTransSale.TransStatus            == ProjTransStatus::CreditnoteProposal)
        {
            nothingFound = false;
            indexfrom    = (projRevenueTrans.smaStartDate - periodStartdate) + 1 ;
            indexto      = (projRevenueTrans.smaEnddate   - periodStartdate) + 1;

            for (counter = indexfrom; counter <= indexto; counter++)
            {
                if (projRevenueTrans.smaSubscriptionPeriodType == SMASubscriptionPeriodType::ReductionDays)
                {
                    arrayOfDays[counter]--;
                }
                else
                {
                    arrayOfDays[counter]++;
                }
            }
        }

        for (counter = (_fromdate - periodStartdate) + 1; counter <= (_todate - periodStartdate) + 1; counter++)
        {
            if (arrayOfDays[counter] == _closedperiods)
            {
                if (tmpstartDate == dateNull())
                {
                    tmpstartDate = periodStartdate + counter - 1;
                }
            }
            else
            {
                if (tmpstartDate != dateNull() && tmpstartDate <= tmpendDate)
                {
                    if (tmpstartDate >= _fromdate)
                    {
                        result          = conins(result,conlen(result)+1,[tmpstartDate, tmpendDate]);
                        tmpstartDate    = dateNull();
                    }
                }
            }
            tmpendDate = periodStartdate + counter -1;
        }

        if (tmpstartDate != dateNull() && tmpstartDate <= tmpendDate)
        {
            if (tmpstartDate >= _fromdate)
            {
                result          = conins(result,conlen(result)+1,[tmpstartDate, tmpendDate]);
                tmpstartDate    = dateNull();
            }
        }

        if (nothingFound && result == connull() && ! _closedperiods)
        {
            result = [[_fromdate, _todate]];
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestEndDate</Name>
				<Source><![CDATA[
    //protected Query getProjRevenueTrans(TransDate _periodStartdate, TransDate _periodEnddate)
    //{
    //    Query query = new Query();

    //    QueryBuildDataSource qbdsProjRevenueTrans = query.addDataSource(tableNum(ProjRevenueTrans));
    //    qbdsProjRevenueTrans.addSelectionField(fieldNum(ProjRevenueTrans, smaStartDate));
    //    qbdsProjRevenueTrans.addSelectionField(fieldNum(ProjRevenueTrans, smaEnddate));
    //    qbdsProjRevenueTrans.addSelectionField(fieldNum(ProjRevenueTrans, smaSubscriptionPeriodType));

    //    qbdsProjRevenueTrans.addRange(fieldNum(ProjRevenueTrans, smaSubscriptionId)).value(queryValue(this.SubscriptionId));
    //    qbdsProjRevenueTrans.addRange(fieldNum(ProjRevenueTrans, smaStartDate)).value(strFmt('(%1 >= %2)', fieldNum(ProjRevenueTrans, smaStartDate), _periodStartdate));
    //    qbdsProjRevenueTrans.addRange(fieldNum(ProjRevenueTrans, SMAEnddate)).value(strFmt('(%1 <= %2)', fieldNum(ProjRevenueTrans, SMAEnddate), _periodEnddate));
    //    qbdsProjRevenueTrans.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(queryValue(ProjOrigin::Subscription));
    //    qbdsProjRevenueTrans.addRange(fieldNum(ProjRevenueTrans, SMASubscriptionPeriodType)).value(SysQuery::valueNot(SMASubscriptionPeriodType::PriceChange));

    //    QueryBuildDataSource qbdsProjRevenueTransSale = qbdsProjRevenueTrans.addDataSource(tableNum(ProjRevenueTransSale));
    //    qbdsProjRevenueTransSale.relations(true);
    //    qbdsProjRevenueTransSale.joinMode(JoinMode::InnerJoin);
    //    qbdsProjRevenueTransSale.fetchMode(QueryFetchMode::One2One);

    //    qbdsProjRevenueTransSale.addSelectionField(fieldNum(ProjRevenueTransSale, TransId));
    //    qbdsProjRevenueTransSale.addSelectionField(fieldNum(ProjRevenueTransSale, TransStatus));

    //    qbdsProjRevenueTransSale.addLink(fieldNum(ProjRevenueTransSale, TransId), fieldNum(ProjRevenueTrans, TransId));
    //    qbdsProjRevenueTransSale.addRange(fieldNum(ProjRevenueTransSale, TransStatus)).value(strFmt('(%1 >= %2)', fieldNum(ProjRevenueTransSale, TransStatus), ProjTransStatus::Posted));
    //    qbdsProjRevenueTransSale.addRange(fieldNum(ProjRevenueTransSale, TransStatus)).value(strFmt('(%1 <= %2)', fieldNum(ProjRevenueTransSale, TransStatus), ProjTransStatus::CreditnoteProposal));


    //    return query;
    //}

    public TransDate getLatestEndDate()
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        container               closedperiods;

        while select reverse smaSubscriptionId, TransactionOrigin, smaSubscriptionPeriodType, smaStartDate, smaEnddate from projRevenueTrans
            order by smaEnddate
            where projRevenueTrans.smaSubscriptionId          == this.SubscriptionId
               && projRevenueTrans.TransactionOrigin          == ProjOrigin::Subscription
               && projRevenueTrans.smaSubscriptionPeriodType  != SMASubscriptionPeriodType::PriceChange
               && projRevenueTrans.smaSubscriptionPeriodType  != SMASubscriptionPeriodType::ReductionDays
            join TransId, TransStatus from projRevenueTransSale
                where projRevenueTransSale.TransId                == projRevenueTrans.TransId
                   && projRevenueTransSale.TransStatus            != ProjTransStatus::Adjusted
        {
            closedperiods = this.findPeriods(projRevenueTrans.smaStartDate, projRevenueTrans.smaEnddate, true);

            if (closedperiods != connull())
            {
                return conpeek(conpeek(closedperiods, conlen(closedperiods)), 2);
            }
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesprice</Name>
				<Source><![CDATA[
    public Amount getSalesprice(
        Amount          _parmPctPriceChange,
        SMAGetPriceFrom _smaGetPriceFrom,
        TransDate       _subPeriodFrom,
        TransDate       _subPeriodTo,
        TransDate       _invPeriodFrom       = this.invoiceperiodStart(_subPeriodFrom),
        TransDate       _invPeriodTo         = this.invoiceperiodEnd(_subPeriodTo),
        Amount          _basePrice           = this.BasePrice,
        Amount          _subscriptionIndex   = this.SubscriptionIndex,
        ProjId          _projId              = this.ProjId,
        ProjCategoryId  _projCategoryId      = this.ProjCategoryId,
        CurrencyCode    _currencyCode        = this.CurrencyCode)
    {
        Days                subscriptionDays    = (_subPeriodTo - _subPeriodFrom) + 1;
        Days                invoicePeriodDays   = (_invPeriodTo - _invPeriodFrom) + 1;
        Amount              numerator;
        Amount              denominator;
        Amount              curprice;

        if (!_subPeriodFrom || !_subPeriodTo || !_invPeriodFrom || !_invPeriodTo)
        {
            // Dates must be entered in the price calculation.
            throw error("@SYS84244");
        }

        switch (_smaGetPriceFrom)
        {
            case SMAGetPriceFrom::SMAIndex :
                numerator   = (_basePrice * _subscriptionIndex * subscriptionDays * (100 + _parmPctPriceChange));
                denominator = (100 * invoicePeriodDays * 100);
                break;

            case SMAGetPriceFrom::SMAPriceSetting:
                curprice = SMASalesPriceSubscription::findSalesPrice(this.SubscriptionId,
                                                                     _projId,
                                                                     _projCategoryId,
                                                                     _subPeriodFrom,
                                                                     _currencyCode,
                                                                     this.invoicePeriodCode());

                numerator   = (curprice * subscriptionDays * (100 + _parmPctPriceChange));
                denominator = (invoicePeriodDays * 100);
                break;
        }

        return denominator ? numerator / denominator : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDate</Name>
				<Source><![CDATA[
    public TransDate getStartDate()
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        container               openPeriods;

        while select smaSubscriptionId, TransactionOrigin, smaSubscriptionPeriodType, smaStartDate, smaEnddate from projRevenueTrans
            order by smaStartDate
            where projRevenueTrans.smaSubscriptionId          == this.SubscriptionId
               && projRevenueTrans.TransactionOrigin          == ProjOrigin::Subscription
               && projRevenueTrans.smaSubscriptionPeriodType  != SMASubscriptionPeriodType::PriceChange
               && projRevenueTrans.smaSubscriptionPeriodType  != SMASubscriptionPeriodType::ReductionDays
            join  TransId, TransStatus from projRevenueTransSale
            where projRevenueTransSale.TransId                == projRevenueTrans.TransId
               && projRevenueTransSale.TransStatus            != ProjTransStatus::Adjusted
        {
            openPeriods = this.findPeriods(projRevenueTrans.smaStartDate, projRevenueTrans.smaEnddate, true);

            if (openPeriods != connull())
            {
                return conpeek(conpeek(openPeriods, 1), 1);
            }
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFeeTransaction</Name>
				<Source><![CDATA[
    private boolean hasFeeTransaction()
    {
        return (select count(RecId) from projRevenueTrans where projRevenueTrans.smaSubscriptionId == this.SubscriptionId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indexSubscription</Name>
				<Source><![CDATA[
    public void indexSubscription(
        SMASubscriptionIndexChange _smaSubscriptionIndexChange,
        Amount                     _value)
    {
        switch (_smaSubscriptionIndexChange)
        {
            case SMASubscriptionIndexChange::IndexTo :
                this.SubscriptionIndex = _value;
                break;
            case SMASubscriptionIndexChange::IndexByPct :
                this.SubscriptionIndex += (this.SubscriptionIndex * _value / 100);
                break;
            case SMASubscriptionIndexChange::BasePriceTo :
                this.BasePrice = _value;
                break;
            case SMASubscriptionIndexChange::BasePriceByPct :
                this.BasePrice += (this.BasePrice * _value / 100);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>SMASubscriptionTable</c> values from the project record.
    /// </summary>
    /// <param name="_projTable">
    ///    A table buffer that contains the project data.
    /// </param>
    /// <remarks>
    ///    Initializes the <c>Project</c> field of the
    ///    <c>SMASubscriptionTable</c> table buffer.
    /// </remarks>
    public void initFromProjTable(ProjTable _projTable)
    {
        this.ProjId = _projTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.SubscriptionIndex = 100;
        this.Active = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ProjTable projTable = ProjTable::find(this.ProjId);

        if (projTable && projTable.Status == ProjStatus::Completed)
        {
            throw error("@SYS309474");
        }

        if (this.BasePrice == 0)
        {
            this.BasePrice = this.currentPrice();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePeriodCode</Name>
				<Source><![CDATA[
    public display ProjPeriodId invoicePeriodCode()
    {
        return SMASubscriptionGroup::find(this.GroupId).InvoicePeriodcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceperiodEnd</Name>
				<Source><![CDATA[
    public TransDate invoiceperiodEnd(TransDate _enddate)
    {
        return ProjPeriodLine::findFromPeriod(this.invoicePeriodCode(), _enddate).PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceperiodStart</Name>
				<Source><![CDATA[
    public TransDate invoiceperiodStart(TransDate _startdate)
    {
        return ProjPeriodLine::findFromPeriod(this.invoicePeriodCode(), _startdate).PeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(SMASubscriptionTable,ProjId) :
                this.CurrencyCode = ProjTable::find(this.ProjId).currencyId();
                if (!this.RecId)
                {
                    this.BasePrice = this.currentPrice();
                }
                break;

            case fieldnum(SMASubscriptionTable,ProjCategoryId) :
                if (!this.RecId)
                {
                    this.BasePrice = this.currentPrice();
                }
                break;

            case fieldnum(SMASubscriptionTable,GroupId) :
                if (!this.RecId)
                {
                    this.BasePrice = this.currentPrice();
                }
                break;

            case fieldnum(SMASubscriptionTable,CurrencyCode) :
                if (!this.RecId)
                {
                    this.BasePrice = this.currentPrice();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the title on the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strfmt("@SYS327590", this.SubscriptionId, this.GroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        if (this.hasFeeTransaction())
        {
            return checkFailed("@SYS84295");
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(SMASubscriptionTable, ProjId) :
                ret = SMASubscriptionTable::validateProjId(this.ProjId) && ret;
                break;

            case fieldnum(SMASubscriptionTable,ProjCategoryId) :
                ret = SMASubscriptionTable::validateCategoryId(this.ProjCategoryId) && ret;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDoIndexation</Name>
				<Source><![CDATA[
    public static boolean canDoIndexation()
    {
        DictConfigurationKey    dictConfigurationKey = new DictConfigurationKey(configurationkeynum(SMASubscription_Indexation));

        return dictConfigurationKey.enabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(SMASubscriptionId _subscriptionId)
    {
        boolean ret = true;

        if (!SMASubscriptionTable::exist(_subscriptionId))
        {
            ret = checkFailed(strfmt(SMASubscriptionTable::txtNotExist(), _subscriptionId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public static ProjRevenueTrans createTrans(
        SMASubscriptionId           _subscriptionId,
        Amount                      _basePrice,
        Amount                      _subscriptionIndex,
        TransDate                   _fromDateSubscribtion,
        TransDate                   _toDateSubscribtion,
        SMASubscriptionPeriodType   _periodType,
        TransDate                   _postingDate,
        TransTxt                    _transTxt)
    {
        ProjRevenueTrans        projRevenueTrans;

        //<GIN>
        TaxInformation_IN               taxInformation_IN;
        ProjRevenueTransTaxExtensionIN  projRevenueTransTaxExtensionIN;
        TransTaxInformation             transTaxInformation;
        ProjTable                       projTable;
        //</GIN>

        SMASubscriptionTable    smaSubscriptionTable = SMASubscriptionTable::find(_subscriptionId);

        projRevenueTrans    = ProjRevenueTrans::initTransFromSubscription(smaSubscriptionTable);

        projRevenueTrans.smaStartDate                   = _fromDateSubscribtion;
        projRevenueTrans.smaEnddate                     = _toDateSubscribtion;
        projRevenueTrans.smaSubscriptionPeriodType      = _periodType;
        projRevenueTrans.TransDate                      = _postingDate;
        projRevenueTrans.Txt                            = _transTxt;
        projRevenueTrans.smaBasePrice                   = _basePrice;
        projRevenueTrans.smaIndex                       = _subscriptionIndex;

        projRevenueTrans.insert();

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            projTable = ProjTable::find(projRevenueTrans.ProjId);

            if (projTable)
            {
                TransTaxInformationHelper::copyTransTaxInformation(projTable, projRevenueTrans);
            }
			
            TransTaxInformationHelper transTaxInformationHelper = TransTaxInformationHelper::newHelper();
            transTaxInformationHelper.updateTransTaxInformationFromProjCategory(projRevenueTrans, projRevenueTrans.CategoryId);
            transTaxInformation = transTaxInformationHelper.findTransTaxInformationByRecord(projRevenueTrans);

            //<GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {

                taxInformation_IN                      = TaxInformation_IN::findDefaultByLocation(transTaxInformation.CompanyLocation);
                smaSubscriptionTable.TaxInformation_IN = taxInformation_IN.RecId;

                projRevenueTransTaxExtensionIN         = projRevenueTrans.projRevenueTransTaxExtensionIN();
                projRevenueTransTaxExtensionIN.ProjRevenueTrans = projRevenueTrans.RecId;
                projRevenueTransTaxExtensionIN.AssessableValueTransactionCurrency = projRevenueTrans.Qty * projRevenueTrans.salesPrice();
                projRevenueTrans.packProjRevenueTrans_IN(projRevenueTransTaxExtensionIN);
            }
            //</GIN>
        }        

        return projRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransSale</Name>
				<Source><![CDATA[
    public static ProjRevenueTransSale createTransSale(
        ProjRevenueTrans        _projRevenueTrans,
        Amount                  _salesPrice,
        ProjFundingSourceRefId  _fundingSource = _projRevenueTrans.projTable().defaultFundingSource()
    )
    {
        ProjRevenueTransSale    projRevenueTransSale;

        projRevenueTransSale.clear();
        projRevenueTransSale.TransId = _projRevenueTrans.TransId;
        projRevenueTransSale.LedgerTransdate = _projRevenueTrans.TransDate;
        projRevenueTransSale.LedgerSalesPosted = NoYes::No;
        projRevenueTransSale.SalesPrice = _salesPrice;
        projRevenueTransSale.LineAmount = CurrencyExchangeHelper::amount(_salesPrice * _projRevenueTrans.Qty, _projRevenueTrans.CurrencyId);
        projRevenueTransSale.FundingSource = _fundingSource;
        projRevenueTransSale.TransStatus = ProjTransStatus::Posted;
        projRevenueTransSale.DefaultDimension = _projRevenueTrans.DefaultDimension;
        projRevenueTransSale.insert();

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            ttsbegin;
            ProjRevenueTransTaxExtensionIN projRevenueTransTaxExtensionIN = _projRevenueTrans.projRevenueTransTaxExtensionIN();
            projRevenueTransTaxExtensionIN.selectForUpdate(true);
            projRevenueTransTaxExtensionIN.AssessableValueTransactionCurrency = _projRevenueTrans.Qty * _projRevenueTrans.salesPrice();
            _projRevenueTrans.packProjRevenueTrans_IN(projRevenueTransTaxExtensionIN);

            _projRevenueTrans.update();
            ttscommit;
        }
        // </GIN>

        return projRevenueTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(SMASubscriptionId _subscriptionId)
    {
        return    _subscriptionId
               && (select firstonly RecId from smaSubscriptionTable
                        where smaSubscriptionTable.SubscriptionId == _subscriptionId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static SMASubscriptionTable find(
        SMASubscriptionId _subscriptionId,
        boolean           _forupdate = false)
    {
        SMASubscriptionTable subscriptionTable = null;

        if (_subscriptionId)
        {
            subscriptionTable.selectForUpdate(_forupdate);

            select firstonly subscriptionTable
                where subscriptionTable.SubscriptionId == _subscriptionId;
        }

        return subscriptionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodType</Name>
				<Source><![CDATA[
    public static SMASubscriptionPeriodType getPeriodType(
        TransDate    _fromDate,
        TransDate    _toDate,
        ProjPeriodId _projPeriodId)
    {
        ProjPeriodLine                  projPeriodLine;
        SMASubscriptionPeriodType       periodType;

        select firstonly projPeriodLine
            where projPeriodLine.PeriodId     == _projPeriodId
               && projPeriodLine.PeriodFrom   == _fromDate
               && projPeriodLine.PeriodTo     == _toDate;

        if (!projPeriodLine)
        {
            periodType = SMASubscriptionPeriodType::NonRegular;
        }
        else
        {
            periodType = SMASubscriptionPeriodType::Regular;
        }

        return periodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRun</Name>
				<Source><![CDATA[
    public static SysQueryRun getQueryRun()
    {
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildDataSource        queryBuildDataSourceProj;
        QueryBuildDataSource        queryBuildDataSourceGroup;
        QueryBuildRange             queryAccPeriodCode, queryInvPeriodCode;
        Query                       query = new Query();

        queryBuildDataSourceGroup = query.addDataSource(tablenum(SMASubscriptionGroup));
        queryBuildDataSourceGroup.addRange(fieldnum(SMASubscriptionGroup, GroupId));

        queryAccPeriodCode  = queryBuildDataSourceGroup.findRange(fieldnum(SMASubscriptionGroup, AccuedPeriodcode));
        if (!queryAccPeriodCode)
        {
            queryAccPeriodCode  = queryBuildDataSourceGroup.addRange(fieldnum(SMASubscriptionGroup, AccuedPeriodcode));
        }
        queryAccPeriodCode.status(RangeStatus::Locked);

        queryInvPeriodCode  = queryBuildDataSourceGroup.findRange(fieldnum(SMASubscriptionGroup, InvoicePeriodcode));
        if (!queryInvPeriodCode)
        {
            queryInvPeriodCode  = queryBuildDataSourceGroup.addRange(fieldnum(SMASubscriptionGroup, InvoicePeriodcode));
        }
        queryInvPeriodCode.status(RangeStatus::Locked);

        queryBuildDataSourceGroup.update(true);

        queryBuildDataSource = queryBuildDataSourceGroup.addDataSource(tablenum(SMASubscriptionTable));
        queryBuildDataSource.addRange(fieldnum(SMASubscriptionTable, SubscriptionId));
        queryBuildDataSource.addRange(fieldnum(SMASubscriptionTable, ProjCategoryId));
        queryBuildDataSource.addRange(fieldnum(SMASubscriptionTable, ProjId));
        queryBuildDataSource.addRange(fieldnum(SMASubscriptionTable, CurrencyCode));
        queryBuildDataSource.addRange(fieldnum(SMASubscriptionTable, Active)).value(queryValue(NoYes::Yes));

        queryBuildDataSource.addLink(fieldnum(SMASubscriptionGroup, GroupId), fieldnum(SMASubscriptionTable, GroupId));
        queryBuildDataSource.joinMode(JoinMode::InnerJoin);

        queryBuildDataSourceProj    = queryBuildDataSource.addDataSource(tablenum(ProjTable));
        queryBuildDataSourceProj.addLink(fieldnum(SMASubscriptionTable, ProjId), fieldnum(ProjTable,ProjId));
        queryBuildDataSourceProj.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSourceProj.addRange(fieldnum(ProjTable, ProjInvoiceProjId));

        return new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProjId</Name>
				<Source><![CDATA[
    public static void lookupProjId(
        FormStringControl _ctrl,
        Common            _buffer)
    {
        Args                args = new Args();
        FormRun             formRun;

        args.name(formstr(SMAProjTableLookupType));
        args.parmEnumType(enumnum(ProjType));
        args.parmEnum(ProjType::TimeMaterial);
        args.caller(_ctrl);
        args.record(_buffer);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectCanbeDeleted</Name>
				<Source><![CDATA[
    public static boolean projectCanbeDeleted(ProjId _projId)
    {
        SMASubscriptionTable    smaSubscriptionTable;

        while select smaSubscriptionTable
            where smaSubscriptionTable.ProjId == _projId
        {
            if (smaSubscriptionTable.hasFeeTransaction())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS84319";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategoryId</Name>
				<Source><![CDATA[
    public static boolean validateCategoryId(ProjCategoryId _projCategoryId)
    {
        ProjCategory    projCategory    = ProjCategory::find(_projCategoryId);
        boolean         ret = true;

        if (_projCategoryId && (projCategory.CategoryType != ProjCategoryType::Revenue))
        {
            ret = checkFailed(strfmt("@SYS84264", ProjCategoryType::Revenue));
        }

        if (ret && (!projCategory.SetupSubscription))
        {
            ret = checkFailed("@SYS88807");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjId</Name>
				<Source><![CDATA[
    public static boolean validateProjId(ProjId _projId)
    {
        ProjTable projTable;

        projTable = ProjTable::find(_projId);

        if (projTable)
        {
            boolean projMultipleContractLinesForProjectFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
            if ((!projMultipleContractLinesForProjectFeatureEnabled && projTable.Type != ProjType::TimeMaterial) ||
                (projMultipleContractLinesForProjectFeatureEnabled && !ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial)))
            {
                return checkFailed(strfmt("@SYS84263", ProjType::TimeMaterial));
            }

            if (!ProjStatusTypeRule::find(projTable.Status, ProjType::TimeMaterial, ProjStatusRule::CreateJournal).RecId)
            {
                return checkFailed("@SYS329842");
            }

            if (projTable.Header)
            {
                // Project marked as header project cannot be selected
                return checkFailed(strfmt("@SYS96612", _projId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (this.SubscriptionId != this.orig().SubscriptionId)
        {
            ProjRevenueTrans projRevenueTrans;
            ttsbegin;
            update_recordset projRevenueTrans
                setting SMASubscriptionId = this.SubscriptionId
                where projRevenueTrans.SMASubscriptionId == this.orig().SubscriptionId;
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMASubscription</ConfigurationKey>
	<DeveloperDocumentation>@SYS122722</DeveloperDocumentation>
	<FormRef>SMASubscription</FormRef>
	<Label>@SYS14482</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SubscriptionId</TitleField1>
	<TitleField2>GroupId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SubscriptionIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ServiceManagement</Modules>
	<PrimaryIndex>SubscriptionIdx</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SMASalesPriceSubscription</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SMASalesPriceSubscription</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasePrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubscriptionIndex</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestEnddate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateGroup</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestEnddate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestEnddate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ListPage</Name>
			<Label>@SYS81042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestEnddate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS80991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS81042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubscriptionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjCategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestEnddate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasePrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubscriptionIndex</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PriceGroup</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>invoicePeriodCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BasePrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubscriptionIndex</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation</Name>
			<Label>@SYS33652</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInformation_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SMASubscription</ConfigurationKey>
			<Label>@SYS15744</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BasePrice</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMABasePrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SMASubscription</ConfigurationKey>
			<ExtendedDataType>SMASalesCurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SMASubscription</ConfigurationKey>
			<ExtendedDataType>SMASubscriptionGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LatestEnddate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAEnddate</ExtendedDataType>
			<Label>@SYS84176</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SMASubscription</ConfigurationKey>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjCategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS84195</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubscriptionId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASubscriptionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SubscriptionIndex</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMAIndex</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInformation_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxInformationRefRecId_IN</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SubscriptionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SubscriptionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjCategoryId</Name>
					<Field>ProjCategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMASubscriptionGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SMASubscriptionGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupId</Name>
					<Field>GroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxInformation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxInformation_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxInformation_IN</Name>
					<Field>TaxInformation_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>