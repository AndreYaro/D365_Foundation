<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserRequestACSUrlStorage</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class UserRequestACSUrlStorage extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>UserRequestUrlStorage</c> record from a <c>UserRequest</c> record.
    /// </summary>
    /// <param name="_userRequestRecId">
    /// The record ID of the <c>UserRequest</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromUserRequest(RecId _userRequestRecId)
    {
        UserRequestParameters     userRequestParameters;

        if (_userRequestRecId)
        {
            userRequestParameters = UserRequestParameters::find();

            this.UserRequestACSHyperlink          = '';
            this.UserRequestACSIsValidUrl         = NoYes::Yes;
            this.UserRequestACSLinkExpirationDate = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime() , userRequestParameters.UserACSAuthenticationURLExpiryDays));
            this.UserRequestACSUniqueId           = newGuid();
            this.UserRequest                      = _userRequestRecId;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>deleteUrlForUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>UserRequestACSUrlStorage</c> records associated with the <c>UserRequest</c> record.
    /// </summary>
    /// <param name="_userRequestRecId">
    /// The record ID of the <c>UserRequest</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deleteUrlForUserRequest(RecId  _userRequestRecId)
    {
        UserRequestACSUrlStorage  userRequestACSUrlStorage;

        if (_userRequestRecId)
        {
            ttsBegin;
            delete_from userRequestACSUrlStorage
                where userRequestACSUrlStorage.UserRequest == _userRequestRecId;
            ttsCommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>UserRequestACSUrlStorage</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>UserRequestACSUrlStorage</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequestACSUrlStorage find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        UserRequestACSUrlStorage userRequestUrlStorage;

        if (_recId)
        {
            userRequestUrlStorage.selectForUpdate(_forUpdate);

            select firstonly userRequestUrlStorage
                where userRequestUrlStorage.RecId == _recId;
        }

        return userRequestUrlStorage;
    }
]]></Source>
			</Method>
			<Method>
				<Name>findByUniqueId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>UserRequestACSUrlStorage</c> table, using the <c>UserRequestACSUniqueId</c> field.
    /// </summary>
    /// <param name="_uniqueId">
    /// The <c>UserRequestACSUniqueId</c> field of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequestACSUrlStorage findByUniqueId(
        guid    _uniqueId,
        boolean _forUpdate = false)
    {
        UserRequestACSUrlStorage userRequestUrlStorage;

        if (_UniqueId)
        {
            userRequestUrlStorage.selectForUpdate(_forUpdate);

            select firstonly userRequestUrlStorage
                where userRequestUrlStorage.UserRequestACSUniqueId  == _uniqueId;
        }

        return userRequestUrlStorage;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the URL for user request authentication.
    /// </summary>
    /// <param name="_userRequestRecId">
    /// The record ID of the <c>UserRequest</c> record.
    /// </param>
    /// <returns>
    /// public site URL.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequestPublicPortalSiteUrl getUrl(Recid _userRequestRecId)
    {
        UserRequestPublicPortalSiteUrl  url;
        #DEFINE.RequestId('/Enterprise Portal/UserRequestLoginAzure.aspx?UserRequestId=');

        if (_userRequestRecId)
        {
            url = strFmt("%1%2", 
                            #RequestId,
                            guid2str(UserRequestACSUrlStorage::getValidUrlID(_userRequestRecId)));
        }

        return url;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getValidUrlID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GUID of valid URL from <c>UserRequestACSUrlStorage</c> table.
    /// </summary>
    /// <param name="_userRequestRecId">
    /// The record ID of the <c>UserRequest</c> record.
    /// </param>
    /// <returns>
    /// GUID from the <c>UserRequestUrlStorage</c> table record.
    /// </returns>
    private static guid getValidUrlID(RecId _userRequestRecId)
    {
        UserRequestACSUrlStorage  userRequestUrlStorage;

        if (_userRequestRecId)
        {
            select firstOnly UserRequestACSUniqueId from userRequestUrlStorage
                where userRequestUrlStorage.UserRequest == _userRequestRecId
                    && userRequestUrlStorage.UserRequestACSIsValidUrl == NoYes::Yes;
        }

        return userRequestUrlStorage.UserRequestACSUniqueId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>IsUrlValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the validity of the URL for <c>UserRequestACSUrlStorage</c> table record.
    /// </summary>
    /// <param name="_uniqueId">
    /// The unique GUID.
    /// </param>
    /// <returns>
    /// true if link is valid; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean IsUrlValid(guid _uniqueId)
    {
        boolean                   isValid = true;
        UserRequestACSUrlStorage  userRequestACSUrlStorage;

        userRequestACSUrlStorage = UserRequestACSUrlStorage::findByuniqueId(_uniqueId);

        if (!userRequestACSUrlStorage)
        {
            isValid = checkFailed("@SYP4950013");
        }
        else if (!userRequestACSUrlStorage.UserRequestACSIsValidUrl)
        {
            isValid = checkFailed("@SYP4950013");
        }
        else if (DateTimeUtil::Date(DateTimeUtil::getSystemDateTime()) >= userRequestACSUrlStorage.UserRequestACSLinkExpirationDate)
        {
            isValid = checkFailed("@SYP4950013");
        }

        return isValid;
    }
]]></Source>
			</Method>
			<Method>
				<Name>markURLInvalid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the <c>UserRequestACSUrlStorage</c> URL records as invalid.
    /// </summary>
    /// <param name="_userRequestRecId">
    /// The record ID of the <c>UserRequest</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void markURLInvalid(RecId _userRequestRecId)
    {
        UserRequestACSUrlStorage  userRequestACSUrlStorage;

        if (_userRequestRecId)
        {
            ttsBegin;
            update_recordSet userRequestACSUrlStorage
                setting UserRequestACSIsValidUrl = NoYes::No
                    where userRequestACSUrlStorage.UserRequest == _userRequestRecId;
            ttsCommit;
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYP4950042</DeveloperDocumentation>
	<Label>@SYP4950049</Label>
	<TitleField1>UserRequest</TitleField1>
	<TitleField2>UserRequestACSIsValidUrl</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>SystemAdministration</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserRequestACSIsValidUrl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserRequest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UserRequestACSIsValidUrl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UserRequestACSUniqueId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UserRequest</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UserRequestACSHyperlink</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WebSiteURL</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UserRequestACSIsValidUrl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>UserRequestACSLinkExpirationDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserRequestACSLinkExpirationDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>UserRequestACSUniqueId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>UserRequestACSUniqueId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>UserRequestACSUrlStorageIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>UserRequestACSUniqueId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UserRequest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UserRequest</Name>
					<Field>UserRequest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>