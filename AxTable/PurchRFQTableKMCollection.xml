<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTableKMCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchRFQTableKMCollection extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the questionnaire description.
    /// </summary>
    /// <returns>
    /// The questionnaire description.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PurchRFQQuestionnaireDescription displayDescription()
    {
        return KMCollection::find(this.KMCollectionId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionnaireStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the questionnaire status.
    /// </summary>
    /// <returns>
    /// The status of the questionnaire.
    /// </returns>
    [SysClientCacheDataMethodAttribute(false)]
    public display PurchRFQQuestionnaireStatus questionnaireStatus()
    {
        return PurchRFQTableQuestionnaireResponse::findByRFQKMCollection(this.RecId) ? PurchRFQQuestionnaireStatus::Completed
                : PurchRFQQuestionnaireStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>PurchRFQTableKMCollection</c> table when records are being inserted into
    /// the <c>PurchRFQTable</c> table.
    /// </summary>
    /// <param name="_purchRFQCaseId">
    /// The RFQ case ID of the <c>PurchRFQCaseTable</c> record.
    /// </param>
    /// <param name="_purchRFQId">
    /// The RFQ ID of the <c>PurchRFQTable</c> record.
    /// </param>
    public static void addQuestionnaire(
        PurchRFQCaseId  _purchRFQCaseId,
        PurchRFQId      _purchRFQId)
    {
        PurchRFQTableKMCollection      purchRFQTableKMCollection;
        PurchRFQCaseTableKMCollection  purchRFQCaseTableKMCollection;

        if (_purchRFQCaseId && _purchRFQId
            && PurchRFQCaseTableKMCollection::existQuestionnaire(_purchRFQCaseId))
        {
            insert_recordset purchRFQTableKMCollection(KMCollectionId,
                                                       RFQId)
                select KMCollectionId, _purchRFQId
                    from purchRFQCaseTableKMCollection
                        where purchRFQCaseTableKMCollection.RFQCaseId == _purchRFQCaseId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>PurchRFQTableKMCollection</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of <c>PurchRFQTableKMCollection</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchRFQTableKMCollection</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchRFQTableKMCollection find(
        PurchRFQKMCollectionRecId  _recId,
        boolean                    _forUpdate = false)
    {
        PurchRFQTableKMCollection    purchRFQTableKMCollection;

        if (_recId)
        {
            PurchRFQTableKMCollection.selectForUpdate(_forUpdate);

            select firstonly purchRFQTableKMCollection
                where purchRFQTableKMCollection.RecId  == _recId;
        }

        return purchRFQTableKMCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRFQAndCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>PurchRFQTableKMCollection</c> table.
    /// </summary>
    /// <param name="_rfqId">
    /// The <c>RFQId</c> of the record to find.
    /// </param>
    /// <param name="_kmCollectionId">
    /// The <c>KMCollectionId</c> of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchRFQTableKMCollection</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchRFQTableKMCollection findByRFQAndCollection(
        PurchRFQId              _rfqId,
        PurchRFQKMCollectionId  _kmCollectionId,
        boolean                 _forUpdate = false)
    {
        PurchRFQTableKMCollection  purchRFQTableKMCollection;

        if (_rfqId && _kmCollectionId)
        {
            purchRFQTableKMCollection.selectForUpdate(_forUpdate);

            select firstonly purchRFQTableKMCollection
                where purchRFQTableKMCollection.RFQId == _rfqId
                    && purchRFQTableKMCollection.KMCollectionId == _kmCollectionId;
        }

        return purchRFQTableKMCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQuestionnaireComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the questionnaires attached to the RFQ are complete.
    /// </summary>
    /// <param name="_rfqId">
    /// The <c>RFQId</c> of the record.
    /// </param>
    /// <returns>
    /// true if the attached questionnaires are complete; otherwise, false.
    /// </returns>
    public static boolean isQuestionnaireComplete(
        PurchRFQId  _rfqId)
    {
        PurchRFQTableKMCollection           purchRFQTableKMCollection;
        PurchRFQTableQuestionnaireResponse  purchRFQTableQuestionnaireResponse;

        if (_rfqId)
        {
            select firstOnly RecId from purchRFQTableKMCollection
                where purchRFQTableKMCollection.RFQId == _rfqId
            notExists join purchRFQTableQuestionnaireResponse
                where purchRFQTableQuestionnaireResponse.PurchRFQTableKMCollection == purchRFQTableKMCollection.RecId;
        }

        return purchRFQTableKMCollection.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuestionnaire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the questionnaires for the <c>PurchRFQTable</c> record.
    /// </summary>
    /// <param name="_purchRFQTable">
    /// The <c>PurchRFQTable</c> record.
    /// </param>
    public static void updateQuestionnaire(
        PurchRFQTable  _purchRFQTable)
    {
        PurchRFQId                     purchRFQId;
        PurchRFQTableKMCollection      purchRFQTableKMCollection;
        PurchRFQCaseTableKMCollection  purchRFQCaseTableKMCollection;

        if (_purchRFQTable)
        {
            purchRFQId = _purchRFQTable.RFQId;

            //Delete questionnaire that have been deleted from the PurchRFQCaseTableKMCollection
            delete_from purchRFQTableKMCollection
                where purchRFQTableKMCollection.RFQId == purchRFQId
            notExists join purchRFQCaseTableKMCollection
                where purchRFQCaseTableKMCollection.RFQCaseId == _purchRFQTable.RFQCaseId
                    && purchRFQCaseTableKMCollection.KMCollectionId == purchRFQTableKMCollection.KMCollectionId;

            insert_recordset purchRFQTableKMCollection(KMCollectionId,
                                                       RFQId)
                select KMCollectionId, purchRFQId
                    from purchRFQCaseTableKMCollection
                        where purchRFQCaseTableKMCollection.RFQCaseId == _purchRFQTable.RFQCaseId
                notexists join purchRFQTableKMCollection
                        where purchRFQTableKMCollection.RFQId == purchRFQId
                            && purchRFQTableKMCollection.KMCollectionId == purchRFQCaseTableKMCollection.KMCollectionId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>KMQuestionnaireBasic</ConfigurationKey>
	<DeveloperDocumentation>@EPR4460176</DeveloperDocumentation>
	<Label>@EPR4460181</Label>
	<TitleField1>RFQId</TitleField1>
	<TitleField2>KMCollectionId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>PurchRFQTableKMCollectionIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFQId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KMCollectionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQKMCollectionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFQId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchRFQId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchRFQTableKMCollectionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>KMCollectionId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RFQId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KMCollection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>KMCollection</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KMCollectionId</Name>
					<SourceEDT>PurchRFQKMCollectionId</SourceEDT>
					<Field>KMCollectionId</Field>
					<RelatedField>kmCollectionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchRFQTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchRFQTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RFQId</Name>
					<SourceEDT>PurchRFQId</SourceEDT>
					<Field>RFQId</Field>
					<RelatedField>RFQId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RFQIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>