<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobPickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanJobPickingList extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRecalcConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the picking list quantity can be recalculated on a physical update.
    /// </summary>
    /// <returns>
    /// true if the quantity can be recalculated; otherwise, false.
    /// </returns>
    public boolean canRecalcConsumption()
    {
        return this.FlushingPrinciple != FlushingPrincipKanban::Empty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWMSLocationFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the warehouse lcoation from the inventory dimension and movement.
    /// </summary>
    /// <returns>
    ///    true if the warehouse location was removed; otherwise, false.
    /// </returns>
    public boolean clearWMSLocationFromMovement()
    {
        InventDim   inventDim = this.inventDim();
        boolean     result    = false;

        if (inventDim.wMSLocationId)
        {
            ttsBegin;
            // remove wms Location from picking list inventory dimension
            inventDim.wMSLocationId = '';
            inventDim = InventDim::findOrCreate(inventDim);

            if (this.type().mustBeInventoryControlled())
            {
                InventUpd_ChangeDimension::updateForceInventTrans(this.inventMovement(),inventDim,false,true);
            }

            // update dimension & transactions
            this.setInventDimId(inventDim.inventDimId);
            this.update();
            result = true;
            ttsCommit;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was initialized from the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set to apply to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>
    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,this.legalEntity()))
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SourceDocumentLine</c> record if it does not exist.
    /// </summary>
    public void createSourceDocumentLine()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record.
    /// </summary>
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.type().deleting();

        super();

        if (this.type().mustBeInventoryControlled())
        {
            InventUpd_DeleteMovement::newMovement(this.inventMovement()).updateNow();
        }

        ReqEventProcessKanban::newStandard(this).runOperation();

        this.type().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the picking list line has at least one output order.
    /// </summary>
    /// <returns>
    /// true if the picking list line has at least one output order; otherwise, false.
    /// </returns>
    public boolean hasWMSOrder()
    {
        WMSOrder    wmsOrder;

        if (this.InventTransId)
        {
            select firstonly RecId from wmsOrder
                where wmsOrder.InventTransId   == this.InventTransId
                   && wmsOrder.InventTransType == InventTransType::KanbanJobPickingList;
        }

        return wmsOrder.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from the <c>BOM</c> record.
    /// </summary>
    /// <param name="_bom">
    /// The <c>BOM</c> record that is used to initialize fields.
    /// </param>
    public void initFromBOM(BOM _bom)
    {
        InventDim   inventDimBOM;
        InventDim   inventDim;
        InventTable inventTable;

        this.bom = _bom.RecId;

        switch (_bom.ProdFlushingPrincip)
        {
            case ProdFlushingPrincipBOM::Start:
                this.FlushingPrinciple = FlushingPrincipKanban::Prepare;
                break;
            case ProdFlushingPrincipBOM::Finish:
                this.FlushingPrinciple = FlushingPrincipKanban::End;
                break;
            case ProdFlushingPrincipBOM::Manual:
                this.FlushingPrinciple = FlushingPrincipKanban::Empty;
                break;
            //case Blank: keep value from inventTable
        }

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        inventTable = this.inventTable();
        EcoResProductDimGroupSetup::copyProductDimensionsForItem(this.ItemId, InventDim::find(_bom.InventDimId), inventDim);

        inventDimBOM = _bom.inventDim();

        if (inventDimBOM.InventSiteId)
        {
            inventDim.InventSiteId = inventDimBOM.InventSiteId;
        }

        if (inventDimBOM.InventLocationId)
        {
            inventDim.InventLocationId = inventDimBOM.InventLocationId;
            inventDim.InventSiteId     = inventDim.inventLocation().InventSiteId;
        }

        //<GEERU>
        if (inventDimBOM.InventProfileId_RU)
        {
            inventDim.InventProfileId_RU = inventDimBOM.InventProfileId_RU;
        }
        //</GEERU>
        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from an <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record that is used to initialize fields; optional.
    /// </param>
    public void initFromInventTable(InventTable _inventTable = this.inventTable())
    {
        this.ItemId           = _inventTable.ItemId;
        this.ItemDataAreaId   = this.ItemId ? appl.company().dataArea(tableNum(InventTable)) : '';

        this.DefaultDimension = this.Kanban().planReference().mergeDimension(_inventTable.DefaultDimension);

        switch (_inventTable.ProdFlushingPrincip)
        {
            case ProdFlushingPrincipItem::Start:
                this.FlushingPrinciple = FlushingPrincipKanban::Prepare;
                break;
            case ProdFlushingPrincipItem::Finish:
                this.FlushingPrinciple = FlushingPrincipKanban::End;
                break;
            case ProdFlushingPrincipItem::Manual:
                this.FlushingPrinciple = FlushingPrincipKanban::Empty;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from a <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record that is used to initialize fields; optional.
    /// </param>
    public void initFromKanbanJob(KanbanJob _kanbanJob = this.kanbanJob())
    {
        this.Job              = _kanbanJob.RecId;
        this.MaterialDateTime = KanbanDateCalculation::newKanbanJob(_kanbanJob).jobMaterialDateTime(_kanbanJob);
        this.Kanban           = _kanbanJob.Kanban;
        this.DefaultDimension = this.copyDimension(_kanbanJob.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields in the current table buffer from a <c>KanbanRule</c> record.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record that is used to initialize fields.
    /// </param>
    public void initFromKanbanRule(KanbanRule _kanbanRule)
    {
        this.ReplenishmentRule = _kanbanRule.RecId;

        if (_kanbanRule.RecId)
        {
            switch (_kanbanRule.ReplenishmentStrategy)
            {
                case LeanReplenishmentStrategy::Event:
                    this.LineType = KanbanJobPickingListLineType::Pegging;
                    break;
                case LeanReplenishmentStrategy::Scheduled: //fall through
                case LeanReplenishmentStrategy::Fixed:
                    this.LineType = KanbanJobPickingListLineType::Item;
                    break;
            }
        }
        else
        {
            // initial default
            this.LineType = KanbanJobPickingListLineType::Item;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table record buffer.
    /// </summary>
    public void initValue()
    {
        super();
        this.LineType = KanbanJobPickingListLineType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current table buffer.
    /// </summary>
    /// <param name="_skipEventProcessing">
    /// Indicates whether event processing should be skipped (used in upgrade). Default is 'false'.
    /// </param>
    public void insert(boolean _skipEventProcessing = false)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.type().inserting();

        this.createSourceDocumentLine();

        if (!this.validateWrite())
        {
            throw error("@SYS18447");
        }
            
        InventUpd_Estimated inventUpd_Estimated;
        if (!this.InventTransId && this.type().mustBeInventoryControlled())
        {
            this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
            this.InventTransDataAreaId = this.InventTransId ? appl.company().dataArea(tableNum(InventTransOrigin)) : '';

            inventUpd_Estimated = InventUpd_Estimated::newInventMovement(this.inventMovement());
            inventUpd_Estimated.updateNow();
        }

        super();

        if (inventUpd_Estimated)
        {
            inventUpd_Estimated.updateOwnerRelationship();
        }

        // for upgrade purposes events must be skipped
        if (!_skipEventProcessing)
        {
            ReqEventProcessKanban::newStandard(this).runOperation();
        }

        this.type().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> record referenced in the <c>InventDimId</c> table field.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> table buffer.
    /// </returns>
    public InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an inventory movement from the current <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <returns>
    /// An <c>InventMovement</c> object.
    /// </returns>
    public InventMovement inventMovement()
    {
        return InventMovement::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventTable</c> record referenced in the <c>ItemId</c> field.
    /// </summary>
    /// <returns>
    /// An <c>InventTable</c> table buffer.
    /// </returns>
    public InventTable inventTable()
    {
        return InventTable::find(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the current record.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    public InventTransOriginId inventTransOriginId()
    {
        InventTransOriginId     inventTransOriginId;

        if (   this.RecId
            && this.type().mustBeInventoryControlled())
        {
            inventTransOriginId = InventTransOriginKanbanJobPickList::findInventTransOriginId(this.RecId);
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>Kanban</c> record for the current <c>KanbanJobPickingList</c> record.
    /// </summary>
    /// <returns>
    /// A <c>Kanban</c> table buffer.
    /// </returns>
    public Kanban kanban()
    {
        return Kanban::find(this.Kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanJob</c> record referenced in the <c>Job</c> field.
    /// </summary>
    /// <returns>
    /// A <c>KanbanJob</c> table buffer.
    /// </returns>
    public KanbanJob kanbanJob()
    {
        return KanbanJob::find(this.Job);
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlowReference</c> record that is related to the kanban job picking list.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlowReference</c> table buffer.
    /// </returns>
    public LeanProductionFlowReference leanProductionFlowReference()
    {
        return LeanProductionFlowReference::findPlanReference(this.planReference().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>LegalEntity</c> value related to the current record.
    /// </summary>
    /// <returns>
    ///    A <c>LegalEntity</c> type value.
    /// </returns>
    public LegalEntity legalEntity()
    {
        return this.kanban().LegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default <c>KanbanJobPickingList.dimension</c> values, depending on the <see cref="InventDim Table" />
    ///    record buffer values.
    /// </summary>
    /// <param name="_newInventDim">
    ///    The <see cref="InventDim Table" /> record buffer that is linked to the current <see cref="KanbanJobPickingList
    ///    Table" /> record buffer.
    /// </param>
    /// <param name="_oldInventDim">
    ///    The <see cref="InventDim Table" /> record buffer that was previously linked to the current <see
    ///    cref="KanbanJobPickingList Table" /> record buffer.
    /// </param>
    public void linkInventDim2Dimension(
        InventDim _newInventDim,
        InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was initialized with the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge            = DimensionMerge::newFromTable(this,this.legalEntity()))
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRegisterScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a picking list line must register scrap.
    /// </summary>
    /// <returns>
    /// true if the line must register scrap; otherwise, false.
    /// </returns>
    public boolean mustRegisterScrap()
    {
        LeanProductionFlowActivity  leanProductionFlowActivity;
        boolean                     result = this.type().mustBeInventoryControlled();

        if (   result
            && this.FlushingPrinciple == FlushingPrincipKanban::End)
        {
            leanProductionFlowActivity = this.pickingProductionFlowActivity();

            if (   leanProductionFlowActivity
                && leanProductionFlowActivity.planActivity().PlanActivityType == PlanActivityType::Pick)
            {
                result =    leanProductionFlowActivity.RegisterScrap
                         && result;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.MaterialDateTime,DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    public EnumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_Kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_Kanban::KanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        return SourceDocumentHeader::find(this.kanbanJob().SourceDocumentHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickingPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanActivity</c> table that is related to the current <c>KanbanJobPickingList</c>
    /// table buffer.
    /// </summary>
    /// <returns>
    /// A <c>PlanActivity</c> table buffer.
    /// </returns>
    public PlanActivity pickingPlanActivity()
    {
        return this.pickingProductionFlowActivity().planActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickingProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlowActivity</c> table that is referenced in the
    /// <c>PickingProductionFlowActivity</c> table field.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlowActivity</c> table buffer.
    /// </returns>
    public LeanProductionFlowActivity pickingProductionFlowActivity()
    {
        return LeanProductionFlowActivity::find(this.PickingProductionFlowActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>planReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanReference</c> record that is related to the kanban job picking list.
    /// </summary>
    /// <returns>
    /// A <c>PlanReference</c> table buffer.
    /// </returns>
    public PlanReference planReference()
    {
        PlanReference       planReference;

        if (
            this.Kanban
            )
        {
            planReference = this.kanban().planReference();
        }

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenishmentRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>KanbanRule</c> table referenced in the <c>ReplenishmentRule</c> field.
    /// </summary>
    /// <returns>
    /// A <c>KanbanRule</c> table buffer.
    /// </returns>
    public KanbanRule replenishmentRule()
    {
        return KanbanRule::find(this.ReplenishmentRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>inventDimId</c> field and applies default
    /// values, depending on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that should be applied to the <c>InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(
        InventDimId _inventDimId,
        InventDim   _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId         = _inventDimId;
        this.InventDimDataAreaId = this.InventDimId ? appl.company().dataArea(tableNum(InventDim)) : '';
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates an <c>InventDimId</c> value for the <c>InventDim</c> parameter and applies the
    /// <c>InventDimId</c> value to the <c>inventDimId</c> field.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that should be referenced by the current
    /// <c>KanbanJobPickingList</c> record buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>KanbanJobPickingList</c> class from the current table buffer.
    /// </summary>
    /// <returns>
    /// An instance of the <c>KanbanJobPickingList</c> class.
    /// </returns>
    public KanbanJobPickingListType type()
    {
        return KanbanJobPickingListType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current record.
    /// </summary>
    public void update()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        KanbanJobPickingList this_Orig = this.orig();

        this.type().updating();

        if (!this.validateWrite())
        {
            throw error("@SYS18447");
        }

        ReqEventProcessParm reqEventProcessParm = ReqEventProcessParm::newInventMovement(this.inventMovement());

        if (this.type().mustBeInventoryControlled())
        {
            InventUpd_Estimated inventUpd_Estimated = InventUpd_Estimated::newInventMovement(this.inventMovement());
            inventUpd_Estimated.updateNow();
        }

        super();

        ReqEventProcessKanban::newStandard(this, false, false, reqEventProcessParm).runOperation();

        this.type().updated(this_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaterialDateTimeInRecordset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the material DateTime for the <c>KanbanJobPickingList</c> records for the kabnan job.
    /// </summary>
    /// <param name = "_kanbanJobRecId">Kanban job RecId.</param>
    /// <param name = "_materialDateTime">DateTime to set.</param>
    /// <remarks>
    /// This method should be used with caution. The update skips data methods on the <c>KanbanJobPickingList</c> record to improve performance using the set based operations.
    /// It should only be used for operations that change only the expected datetime of the <c>KanbanJobPickList</c> issue, without affecting the on-hand inventory.
    /// </remarks>
    public static void setMaterialDateTimeInRecordset(RecId _kanbanJobRecId, KanbanJobPickingListMaterialDateTime _materialDateTime)
    {
        KanbanJobPickingList kanbanJobPickingList;

        kanbanJobPickingList.skipDataMethods(true);

        update_recordset kanbanJobPickingList
            setting MaterialDateTime = _materialDateTime
            where kanbanJobPickingList.Job == _kanbanJobRecId;
        
        InventTransOriginKanbanJobPickList::updatePicklistMaterialDateTime(_kanbanJobRecId, _materialDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the current table buffer before it is written to the database.
    /// </summary>
    /// <returns>
    /// true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean     ok;

        ok = super();
        if (    ok
            && !this.inventDim().InventLocationId)
        {   // InvnentLocationId is always an active dimension
            ok = checkFailed(strFmt("@SYS133423",fieldId2pname(tableNum(InventDim),fieldNum(InventDim,InventLocationId))));
        }

        ok = ok && KanbanItemCheckItemId::newStandard(this.ItemId,true,false).isAllowed();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrderQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity of output orders that are related to the current picking list line.
    /// </summary>
    /// <param name="_openOrdersOnly">
    /// A Boolean value that indicates whether to consider only open output orders; optional.
    /// </param>
    /// <returns>
    /// The quantity of output orders that are related to the current picking list line.
    /// </returns>
    public InventQty wmsOrderQuantity(boolean _openOrdersOnly = true)
    {
        WMSOrder    wmsOrder;

        if (this.InventTransId)
        {
            select sum(Qty) from wmsOrder
                where wmsOrder.InventTransId   == this.InventTransId
                   && wmsOrder.InventTransType == InventTransType::KanbanJobPickingList
                   && (wmsOrder.Status         != WMSOrderStatus::Complete
                   ||  !_openOrdersOnly);
        }

        return wmsOrder.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the output order for all picking list lines that are related to a given kanban
    /// can be deleted.
    /// </summary>
    /// <param name="_kanbanJobRefRecId">
    /// A record ID of the <c>KanbanJob</c> table.
    /// </param>
    /// <returns>
    /// true if all output orders can be deleted; otherwise, false.
    /// </returns>
    public static boolean canDeleteWMSOrder(KanbanJobRefRecId _kanbanJobRefRecId)
    {
        WMSOrder                wmsOrder;
        KanbanJobPickingList    kanbanJobPickingList;
        boolean                 result = true;

        while select RecId from kanbanJobPickingList
            where kanbanJobPickingList.Job           == _kanbanJobRefRecId
               && kanbanJobPickingList.InventTransId != ''
            join wmsOrder
                where wmsOrder.InventTransId   == kanbanJobPickingList.InventTransId
                   && wmsOrder.InventTransType == InventTransType::KanbanJobPickingList
        {
            result =    result
                     && wmsOrder.validateDelete();

            if (!result)
            {
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>KanbanJobPickingList</c> table exists.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The record ID of the <c>KanbanJobPickingList</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(KanbanJobPickingListRefRecId _kanbanJobPickingList)
    {
        return _kanbanJobPickingList &&
               (select firstonly RecId from kanbanJobPickingList
                    where kanbanJobPickingList.RecId == _kanbanJobPickingList).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOpenWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the output order for all the picking list lines related to a given kanban job
    /// have been completed.
    /// </summary>
    /// <param name="_kanbanJobRefRecId">
    /// A record ID of the <c>KanbanJob</c> table.
    /// </param>
    /// <returns>
    /// true if an output order exists that has not been completed; otherwise, false.
    /// </returns>
    public static boolean existsOpenWMSOrder(KanbanJobRefRecId _kanbanJobRefRecId)
    {
        WMSOrder                wmsOrder;
        KanbanJobPickingList    kanbanJobPickingList;

        select firstonly RecId from kanbanJobPickingList
            where kanbanJobPickingList.Job           == _kanbanJobRefRecId
               && kanbanJobPickingList.InventTransId != ''
            exists join wmsOrder
                where wmsOrder.InventTransId   == kanbanJobPickingList.InventTransId
                   && wmsOrder.InventTransType == InventTransType::KanbanJobPickingList
                   && wmsOrder.Status          != WMSOrderStatus::Complete;

        return kanbanJobPickingList.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanJobPickingList</c> table.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The record ID of the <c>KanbanJobPickingList</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanJobPickingList</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJobPickingList find(
        KanbanJobPickingListRefRecId _kanbanJobPickingList,
        boolean                      _forUpdate = false)
    {
        KanbanJobPickingList kanbanJobPickingList;

        if (_kanbanJobPickingList)
        {
            kanbanJobPickingList.selectForUpdate(_forUpdate);

            select firstonly kanbanJobPickingList
                where kanbanJobPickingList.RecId == _kanbanJobPickingList;
        }

        return kanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>KanbanJobPickingList</c> table.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The inventory transaction ID of the Kanban job picking list table to find.
    /// </param>
    /// <param name="_inventTransDataAreaId">
    ///    The inventory transaction data area ID of the Kanban job picking list table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>KanbanJobPickingList</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJobPickingList findInventTransId(
        InventTransId _inventTransId,
        DataAreaId    _inventTransDataAreaId,
        boolean       _forUpdate = false)
    {
        KanbanJobPickingList    kanbanJobPickingList;

        if (_inventTransId)
        {
            kanbanJobPickingList.selectForUpdate(_forUpdate);

            select firstonly kanbanJobPickingList
                where kanbanJobPickingList.InventTransId         == _inventTransId
                   && kanbanJobPickingList.InventTransDataAreaId == _inventTransDataAreaId;
        }

        return kanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>KanbanJobPickingList</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRefRecId">
    /// The record ID of the <c>SourceDocumentLine</c> table that is used to find the record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>KanbanJobPickingList</c> table; otherwise, an empty record.
    /// </returns>
    public static KanbanJobPickingList findSourceDocumentLine(
        SourceDocumentLineRefRecId _sourceDocumentLineRefRecId,
        boolean                    _forUpdate = false)
    {
        KanbanJobPickingList kanbanJobPickingList;

        if (_sourceDocumentLineRefRecId)
        {
            kanbanJobPickingList.selectForUpdate(_forUpdate);

            select firstonly kanbanJobPickingList
                where kanbanJobPickingList.SourceDocumentLine == _sourceDocumentLineRefRecId;
        }

        return kanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomTable</Name>
				<Source><![CDATA[
    public BOM bomTable(BOM _relatedTable = null)
        {
            if (prmIsDefault(_relatedTable))
            {
                return this.setLink('BOM');
            }
            else
            {
                return this.setLink('BOM', _relatedTable);
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS131656</DeveloperDocumentation>
	<Label>@SYS131654</Label>
	<SingularLabel>@SYS131655</SingularLabel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>Quantity</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>SourceDocumentLineIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FlushingPrinciple</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activity</Name>
			<Label>@SYS152578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PickingProductionFlowActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BOM</Name>
			<Label>@SYS323345</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOM</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MaterialDateTime</Name>
			<Label>@SYS136168</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MaterialDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PickingList</Name>
			<Label>@SYS77792</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FlushingPrinciple</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS3065</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QuantityExcludingScrap</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS81755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Job</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReplenishmentRule</Name>
			<Label>@SYS131658</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReplenishmentRule</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDocumentLine</Name>
			<Label>@SYS132694</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BOM</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FlushingPrinciple</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>FlushingPrincipKanban</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Job</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobRefRecId</ExtendedDataType>
			<Label>@SYS131642</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Kanban</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>KanbanJobPickingListLineType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>MaterialDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobPickingListMaterialDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PickingProductionFlowActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanProductionFlowActivityRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobPickingListQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QuantityExcludingScrap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanJobPickingListQuantityExcludeScrap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReplenishmentRule</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KanbanRuleRefRecId</ExtendedDataType>
			<Label>@SYS131658</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JobIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Job</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ReplenishmentRuleIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReplenishmentRule</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PickingProductionFlowActivityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PickingProductionFlowActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>KanbanIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Kanban</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SourceDocumentLineImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentLine</MapField>
					<MapFieldTo>SourceDocumentLine</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<NavigationPropertyMethodNameOverride>bomTable</NavigationPropertyMethodNameOverride>
			<RelatedTable>BOM</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BOM</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJobPickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOM</Name>
					<Field>BOM</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_KanbanJobPickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventoryDimensions</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJobPickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimDataAreaId</Name>
					<Field>InventDimDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Item</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJobPickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemDataAreaId</Name>
					<Field>ItemDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJobPickingList</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransDataAreaId</Name>
					<Field>InventTransDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Kanban</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Kanban</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Kanban</Name>
					<Field>Kanban</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KanbanJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanJob</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Job</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>PickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Job</Name>
					<Field>Job</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanProductionFlowActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanProductionFlowActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PickingActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJobPickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PickingProductionFlowActivity</Name>
					<Field>PickingProductionFlowActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReplenishmentRule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>KanbanRule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Replenishment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanJobPickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReplenishmentRule</Name>
					<Field>ReplenishmentRule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SourceDocumentLine_KanbanJobPickingList</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>