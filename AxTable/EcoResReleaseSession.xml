<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleaseSession</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResReleaseSession extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockReleaseSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Blocks a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    public static void blockReleaseSession(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSession    ecoResReleaseSession;

        ttsbegin;
        ecoResReleaseSession                = EcoResReleaseSession::find(_releaseSessionRecId, true);
        ecoResReleaseSession.SystemBlocked  = NoYes::Yes;
        ecoResReleaseSession.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllProductLegalEntityWithoutLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all records in the <c>EcoResReleaseProductLegalEntity</c> table for a release session that
    /// have no related records in the <c>EcoResReleaseProductLegalEntityLog</c> table and in case of
    /// product master release have no related variants for which release has failed, that is, log exists.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session.
    /// </param>
    public static void deleteAllProductLegalEntityWithoutLog(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResReleaseSessionProduct         releaseSessionProductVariant;
        EcoResDistinctProductVariant        distinctProductVariant;
        EcoResReleaseProductLegalEntity     releaseProductLegalEntity;
        EcoResReleaseProductLegalEntityLog  releaseProductLegalEntityLog;
        EcoResReleaseProductLegalEntity     releaseProductLegalEntityVariant;
        EcoResProduct                       product;
        RecId                               instanceRelationTypeMaster = DictTable::getRelationTypeFromTableName(tableStr(EcoResProductMaster));

        //The method deletes all products that have SystemAdded field set to No
        //and all product masters that have SystemAdded field set to Yes and have no variants with log
        //It is important to call EcoResReleaseSession::markMastersSystemAdded prior to deletion
        //as it will set SystemAdded field to Yes for product masters that have no log and variants with log
        ttsbegin;

        EcoResReleaseSession::markMastersLegalEntitySystemAdded(_releaseSessionRecId);

        //delete non system products without logs
        delete_from releaseProductLegalEntity
            where releaseProductLegalEntity.SystemAdded         == NoYes::No
            exists join releaseSessionProduct
                where   releaseSessionProduct.RecId             == releaseProductLegalEntity.ReleaseSessionProduct
                    &&  releaseSessionProduct.ReleaseSession    == _releaseSessionRecId
            notexists join  releaseProductLegalEntityLog
                where       releaseProductLegalEntityLog.ReleaseProductLegalEntity  == releaseProductLegalEntity.RecId;

        //delete all system added product masters without variants with logs
        delete_from releaseProductLegalEntity
            where releaseProductLegalEntity.SystemAdded         == NoYes::Yes
            exists join releaseSessionProduct
                where   releaseSessionProduct.RecId             == releaseProductLegalEntity.ReleaseSessionProduct
                    &&  releaseSessionProduct.ReleaseSession    == _releaseSessionRecId
            exists join product
                where   releaseSessionProduct.Product       == product.RecId
                    &&  product.InstanceRelationType        == instanceRelationTypeMaster

            notexists join  distinctProductVariant
                where       distinctProductVariant.ProductMaster    == releaseSessionProduct.Product
            exists join releaseSessionProductVariant
                where   releaseSessionProductVariant.ReleaseSession == _releaseSessionRecId
                     && releaseSessionProductVariant.Product        == distinctProductVariant.RecId
            exists join releaseProductLegalEntityVariant
                where   releaseProductLegalEntityVariant.ReleaseSessionProduct          == releaseSessionProductVariant.RecId
                     && releaseProductLegalEntityVariant.LegalEntity                    == releaseProductLegalEntity.LegalEntity;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllProductsWithoutLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all records in the <c>EcoResReleaseSessionProduct</c> table for a release session that has
    /// no related records in the <c>EcoResReleaseProductLegalEntity</c> table.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session.
    /// </param>
    public static void deleteAllProductsWithoutLegalEntities(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResReleaseProductLegalEntity     releaseProductLegalEntity;

        ttsbegin;
        //to assure that delete_from doesn't degrade to per record delete
        releaseSessionProduct.skipDeleteActions(true);
        delete_from releaseSessionProduct
            where   releaseSessionProduct.ReleaseSession    == _releaseSessionRecId
            notexists join  releaseProductLegalEntity
                where       releaseProductLegalEntity.ReleaseSessionProduct == releaseSessionProduct.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptySession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a release session if it is empty.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    public static void deleteEmptySession(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSession        releaseSession;
        EcoResReleaseSessionProduct releaseSessionProduct;

        ttsbegin;

        delete_from releaseSession
            where releaseSession.RecId == _releaseSessionRecId
            notexists join  releaseSessionProduct
                where       releaseSessionProduct.ReleaseSession    == releaseSession.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>EcoResReleaseSession</c> table.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// The ID of the <c>EcoResReleaseSession</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResReleaseSession</c> table if it exists; otherwise, an empty record.
    /// </returns>
    public static EcoResReleaseSession find(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        boolean                     _forUpdate = false)
    {
        EcoResReleaseSession ecoResReleaseSession;

        ecoResReleaseSession.selectForUpdate(_forUpdate);

        select firstonly ecoResReleaseSession
            where ecoResReleaseSession.RecId == _releaseSessionRecId;

        return ecoResReleaseSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReleaseSessionBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a release session is blocked by the system.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <returns>
    /// true if a release session is blocked by the system; otherwise, false.
    /// </returns>
    public static boolean isReleaseSessionBlocked(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        return EcoResReleaseSession::find(_releaseSessionRecId).SystemBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markMastersLegalEntitySystemAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>SystemAdded</c> column in the <c>EcoResReleaseSessionProduct</c> table to
    /// the <c>NoYes::Yes</c> value for all records corresponding to product masters that do not have an
    /// error log record but have variants that have error log records.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session.
    /// </param>
    public static void markMastersLegalEntitySystemAdded(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResReleaseSessionProduct         releaseSessionProductVariant;
        EcoResDistinctProductVariant        distinctProductVariant;
        EcoResReleaseProductLegalEntity     releaseProductLegalEntity;
        EcoResReleaseProductLegalEntityLog  releaseProductLegalEntityLog;
        EcoResReleaseProductLegalEntity     releaseProductLegalEntityVariant;
        EcoResReleaseProductLegalEntityLog  releaseProductLegalEntityLogVariant;
        EcoResProduct                       product;
        RecId                               instanceRelationTypeMaster = DictTable::getRelationTypeFromTableName(tableStr(EcoResProductMaster));

        ttsbegin;

        //set systemAdded to yes for all product masters per legal entity that have no log but have variants with log
        update_recordset releaseProductLegalEntity
            setting SystemAdded = NoYes::Yes
            join RecId from releaseSessionProduct
                where       releaseSessionProduct.ReleaseSession    == _releaseSessionRecId
                   &&       releaseSessionProduct.RecId             == releaseProductLegalEntity.ReleaseSessionProduct
            exists join product
                where product.RecId                                     == releaseSessionProduct.Product
                   && product.InstanceRelationType                      == instanceRelationTypeMaster

            exists join     distinctProductVariant
                where       distinctProductVariant.ProductMaster    == releaseSessionProduct.Product
            exists join     releaseSessionProductVariant
                where       distinctProductVariant.RecId            == releaseSessionProductVariant.Product
            exists join     releaseProductLegalEntityVariant
                where       releaseProductLegalEntityVariant.ReleaseSessionProduct          == releaseSessionProductVariant.RecId
                         && releaseProductLegalEntityVariant.LegalEntity                    == releaseProductLegalEntity.LegalEntity
            exists join     releaseProductLegalEntityLogVariant
                where       releaseProductLegalEntityLogVariant.ReleaseProductLegalEntity   == releaseProductLegalEntityVariant.RecId

            notexists join  releaseProductLegalEntityLog
                where       releaseProductLegalEntityLog.ReleaseProductLegalEntity          == releaseProductLegalEntity.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseSessionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for the release session data source on the release forms.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID
    /// </param>
    /// <returns>
    /// A query for the release session data source on the release forms.
    /// </returns>
    public static Query releaseSessionQuery(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        Query query = new Query();

        query.addDataSource(tableNum(EcoResReleaseSession)).addRange(fieldNum(EcoResReleaseSession, RecId)).value(
            queryValue(_releaseSessionRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockReleaseSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unblocks a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    public static void unblockReleaseSession(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSession    ecoResReleaseSession;

        ttsbegin;
        ecoResReleaseSession                = EcoResReleaseSession::find(_releaseSessionRecId, true);
        ecoResReleaseSession.SystemBlocked  = NoYes::No;
        ecoResReleaseSession.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS314044</DeveloperDocumentation>
	<Label>@SYS313967</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>createdBy</TitleField1>
	<TitleField2>createdDateTime</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SystemBlocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SystemBlocked</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SystemBlocked</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JournalSystemBlocked</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>