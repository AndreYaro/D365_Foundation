<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRGiftCardSerialTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class MCRGiftCardSerialTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAllDateOverlaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are any date overlapos for the gift card serial template.
    /// </summary>
    /// <returns>
    /// true if there are no date overlaps; otherwise, false.
    /// </returns>
    public boolean checkAllDateOverlaps()
    {
        MCRGiftCardSerialTemplate   mcrGiftCardSerialTemplate;
        boolean                     ret = true;

        while select mcrGiftCardSerialTemplate
        {
            //Don't check the current record against itself.
            if (mcrGiftCardSerialTemplate.RecId == this.RecId)
            {
                continue;
            }
            ret = MCRGiftCardSerialTemplate::checkDateOverlap(this, mcrGiftCardSerialTemplate);
            if (!ret)
            {
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        date  currentDate = DateTimeUtil::date(DateTimeUtil::utcNow());
        MCRGiftCardSerialTemplate origGiftCertSerialTemplate = this.orig();

        ret = super(_fieldIdToCheck);

        setPrefix(strFmt("@MCR10893", this.SerialTemplate, this.FromDate, this.ToDate));

        // If a record already exists in the serial template table then the dates
        // have to be checked against the existing record to ensure no overlaps exist
        // but if a record does not exist then check the dates entered against the current system date.
        switch (_fieldIdToCheck)
        {
            case fieldNum(MCRGiftCardSerialTemplate, FromDate):
                // No matter user is editing exising row or create new row,
                // start date must be today or later than today.
                if (this.FromDate < currentDate)
                {
                    ret = checkFailed("@MCR10894");
                }

                // Check start date against end date
                // when end date is defined.
                if (Global::dateNull() != this.ToDate && this.FromDate > this.ToDate)
                {
                    ret = checkFailed("@MCR:EndDateLessThanStartDate");
                }

                if (ret)
                {
                    ret = this.checkAllDateOverlaps() && ret;
                }
                break;
            case fieldNum(MCRGiftCardSerialTemplate, SerialTemplate):
                if (origGiftCertSerialTemplate
                        && origGiftCertSerialTemplate.FromDate < currentDate)
                {
                    ret = checkFailed("@MCR10895");
                }
                break;
            case fieldNum(MCRGiftCardSerialTemplate, ToDate):
                // Check start date against end date
                if (Global::dateNull() != this.ToDate && this.FromDate > this.ToDate)
                {
                    ret = checkFailed("@MCR:EndDateLessThanStartDate");
                }

                // Check end date against current date
                if (Global::dateNull() != this.ToDate && this.ToDate < currentDate)
                {
                    ret = checkFailed("@MCR10896");
                }

                if (ret)
                {
                    ret = this.checkAllDateOverlaps() && ret;
                }

                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        int                         numPoundCharacters;
        boolean                     ret;
        Dictionary                  dict     = new Dictionary();
        DictType                    dictType = new DictType(dict.typeName2Id(extendedTypeStr(RetailGiftCardId)));
        #define.POUND('#')

        ret = super();
        if (dictType.stringLen() < strLen(this.SerialTemplate) + MCRGiftCardSerialTemplate::numCheckDigits())
        {
            ret = checkFailed(strFmt("@MCR11236",
                int2str(strLen(this.SerialTemplate)),
                int2str(dictType.stringLen()),
                int2str(MCRGiftCardSerialTemplate::numCheckDigits())));
        }
        //If no "#" then the template is invalid.
        numPoundCharacters = conLen(str2con(this.SerialTemplate, #POUND)) - 1;
        if (! strContains(this.SerialTemplate, #POUND))
        {
            ret = checkFailed("@MCR10897");
        }

        //Check that there are least enough characters to make 10,000 gift certificates.
        if (ret && numPoundCharacters < 4)
        {
            ret = checkFailed(strFmt("@MCR10898", int2str(numPoundCharacters),
                                     num2str(power(10, numPoundCharacters), 1, 0, 1, 2)));
        }

        //Check that the <c>ToDate</c> is later than the <c>FromDate</c>.
        if (this.ToDate  && (this.ToDate < this.FromDate))
        {
            ret = checkFailed("@MCR:EndDateLessThanStartDate");
        }

        //Check for any date overlaps.
        ret = this.checkAllDateOverlaps() && ret;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDateOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for a date overlap between two gift card serial templates.
    /// </summary>
    /// <param name="_curTemplate">
    /// A gift card serial template to be used for checking overlap.
    /// </param>
    /// <param name="_checkAgainstTemplate">
    /// A second gift card serial template to be used for checking overlap.
    /// </param>
    /// <returns>
    /// true if there are no overlaps; otherwise, false.
    /// </returns>
    public static boolean checkDateOverlap(MCRGiftCardSerialTemplate _curTemplate,
                                    MCRGiftCardSerialTemplate _checkAgainstTemplate)
    {
        //The specified date interval overlaps the date interval of the bill of material version '%1'.
        if (_curTemplate.ToDate == _checkAgainstTemplate.ToDate)
        {
            return checkFailed(strFmt("@MCR10885", _checkAgainstTemplate.SerialTemplate,
                                      _checkAgainstTemplate.FromDate, _checkAgainstTemplate.ToDate));
        }

        if (_curTemplate.FromDate == _checkAgainstTemplate.FromDate)
        {
            return checkFailed(strFmt("@MCR10885", _checkAgainstTemplate.SerialTemplate,
                                      _checkAgainstTemplate.FromDate, _checkAgainstTemplate.ToDate));
        }

        if ((_curTemplate.ToDate >= _checkAgainstTemplate.FromDate || !_curTemplate.ToDate)
            && (_curTemplate.FromDate <= _checkAgainstTemplate.ToDate || !_checkAgainstTemplate.ToDate))
        {
            return checkFailed(strFmt("@MCR10885", _checkAgainstTemplate.SerialTemplate,
                                      _checkAgainstTemplate.FromDate, _checkAgainstTemplate.ToDate));
        }

        if (_checkAgainstTemplate.ToDate >= _curTemplate.FromDate
            && _checkAgainstTemplate.FromDate <= _curTemplate.ToDate)
        {
            return checkFailed(strFmt("@MCR10885", _checkAgainstTemplate.SerialTemplate,
                                      _checkAgainstTemplate.FromDate, _checkAgainstTemplate.ToDate));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the appropriate template given the passed in date parameter.
    /// </summary>
    /// <param name="_date">
    /// The given date value for which a <c>MCRGiftCardSerialTemplate</c> record needs to be found.
    /// </param>
    /// <param name="_forUpdate">
    /// If true the <c>MCRGiftCardSerialTemplate</c> record is returned for update; otherwise,
    /// the <c>MCRGiftCardSerialTemplate</c> record is not returned for update.
    /// </param>
    /// <returns>
    /// The <c>MCRGiftCardSerialTemplate</c> record that was found based on passed in parameters.
    /// </returns>
    /// <remarks>
    /// If no record is found that matched the given date,
    /// this method will return the latest template according to the <c>FromDate</c> field.
    /// </remarks>
    public static MCRGiftCardSerialTemplate findActive(StartDate _date, boolean _forUpdate  = false)
    {
        MCRGiftCardSerialTemplate mcrGiftCardSerialTemplate;
        MCRGiftCardSerialTemplate mcrGiftCardSerialTemplateTemp;

        mcrGiftCardSerialTemplate.selectForUpdate(_forUpdate);

        select firstonly mcrGiftCardSerialTemplate
            where mcrGiftCardSerialTemplate.FromDate   <= _date    &&
                 (mcrGiftCardSerialTemplate.ToDate     >= _date    ||
                 !mcrGiftCardSerialTemplate.ToDate);
        if (mcrGiftCardSerialTemplate)
        {
            return mcrGiftCardSerialTemplate;
        }
        else
        {
            select minof(FromDate) from mcrGiftCardSerialTemplateTemp
                where _date < mcrGiftCardSerialTemplateTemp.FromDate;

            select firstonly mcrGiftCardSerialTemplate
                where mcrGiftCardSerialTemplate.FromDate == mcrGiftCardSerialTemplateTemp.FromDate;

            if (mcrGiftCardSerialTemplate)
            {
                return mcrGiftCardSerialTemplate;
            }
            else
            {
                // No template exists with a <c>FromDate</c> later than _date.
                // Find the template with the latest <c>FromDate</c>.
                select maxof(FromDate) from mcrGiftCardSerialTemplateTemp;

                select firstonly mcrGiftCardSerialTemplate
                    where mcrGiftCardSerialTemplate.FromDate == mcrGiftCardSerialTemplateTemp.FromDate;
                return mcrGiftCardSerialTemplate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCheckDigits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of check digits currently being used with gift cards.
    /// </summary>
    /// <returns>
    /// The number of check digits being used with gift cards.
    /// </returns>
    static int numCheckDigits()
    {
        return new MCRCheckDigit_Mod97().numCheckDigits();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@MCR24057</DeveloperDocumentation>
	<Label>@MCR40302</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>SerialTemplate</TitleField1>
	<TitleField2>ToDate</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Payments</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UnGrouped</Name>
			<Label>@MCR23892</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialTemplate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SerialTemplate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailGiftCardId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>