<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqAuthorizationOrigination</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqAuthorizationOrigination extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the default delete action to maintain accurate history in the table.
    /// </summary>
    /// <remarks>
    /// Past records are ignored; they cannot be deleted.
    /// Active records are expired by setting the ValidTo to now.
    /// Future records are deleted.
    /// </remarks>
    public void delete()
    {
        date toDayDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.ValidTo >= toDayDate)
        {
            if (this.ValidFrom <= toDayDate)
            {
                // Expire current records by setting their end date to now
                this.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                this.ValidTo = toDayDate;
                this.update();
            }
            else
            {
                // Future records can just be deleted
                super();
            }
        }
        else // (this.ValidTo < toDayDate) - past record
        {
            // Do nothing with past records
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchReqAuthorizationOrigination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the results of the <c>getLegalEntities</c> method of the HCM class and the
    /// <c>getLegalEntitiesByRequisitioner</c> method of the <c>PurchReqAuthorizationLegalEntity</c> class
    /// to retrieve all the Legal Entity (LE) and Operating Unit (OU) values.
    /// </summary>
    /// <param name="_userId">
    /// The user ID; optional.
    /// </param>
    /// <returns>
    /// A container of the containers that have the requisitioner, LE, and OU values.
    /// </returns>
    /// <remarks>
    /// The default structure of the return values are: <c>[ [Req1, [LE1,LE2], [OU1,OU2], OU1], [Req2,
    /// [LE2], [OU2,OU3], OU2] ]</c>.
    /// </remarks>
    public static container getPurchReqAuthorizationOrigination(userId _userId = curUserId())
    {
        Map authMap = new Map(Types::String,Types::Int64);
        container resultantContainer;

        boolean checkExists(RefRecId requisitionerRecId, RefRecId orgId)
        {
            str key = int642str(requisitionerRecId) +' - '+ int642str(orgId);
            if (authMap.exists(key))
            {
                return true;
            }
            else
            {
                authMap.insert(key, orgId);
                return false;
            }
        }

        // Internal Method to merge Le,Ou
        void prepareContainer(HcmWorkerRecId _hcmWorkerRecId)
        {
            container leContainer, ouContainer, tmpContainer;
            int i;

            //Getting LE's
            container companyInfoRecIds = HcmWorkerHelper::getLegalEntityRecIds(_hcmWorkerRecId);
            for (i = 1; i <= conLen(companyInfoRecIds); i++)
            {
                if (!checkExists(_hcmWorkerRecId, conPeek(companyInfoRecIds, i)))
                {
                    leContainer += conPeek(companyInfoRecIds, i);
                }
            }

            PurchReqAuthorizationLegalEntity purchReqAuthLegalEntity;
            while select BuyingLegalEntity from purchReqAuthLegalEntity
                where purchReqAuthLegalEntity.Requisitioner == _hcmWorkerRecId
            {
                if (!checkExists(_hcmWorkerRecId, purchReqAuthLegalEntity.BuyingLegalEntity))
                {
                    leContainer += purchReqAuthLegalEntity.BuyingLegalEntity;
                }
            }

            if (conLen(leContainer) == 0) // If No LE's
            {
                return;
            }

            // Getting OU's
            container departmentRecIds = HcmWorkerHelper::getDepartmentRecIds(_hcmWorkerRecId);
            RefRecId defaultOU = HcmWorkerHelper::getPrimaryDepartmentRecId(_hcmWorkerRecId);

            if (!defaultOU && conLen(departmentRecIds) >= 1)
            {
                defaultOU = conPeek(departmentRecIds, i);
            }

            for (i = 1; i <= conLen(departmentRecIds); i++)
            {
                if (!checkExists(_hcmWorkerRecId, conPeek(departmentRecIds, i)))
                {
                    ouContainer += conPeek(departmentRecIds, i);
                }
            }

            PurchReqAuthorizationOperatingUnit purchReqAuthOperatingUnit;
            while select ReceivingOperatingUnit from purchReqAuthOperatingUnit
                where purchReqAuthOperatingUnit.Requisitioner == _hcmWorkerRecId
            {
                if (!checkExists(_hcmWorkerRecId, purchReqAuthOperatingUnit.ReceivingOperatingUnit))
                {
                    ouContainer += purchReqAuthOperatingUnit.ReceivingOperatingUnit;
                }
                if (!defaultOU)
                {
                    defaultOU = purchReqAuthOperatingUnit.ReceivingOperatingUnit;
                }
            }

            //assingning internal container(one record)
            tmpContainer += _hcmWorkerRecId;
            tmpContainer += [leContainer];
            tmpContainer += [ouContainer];
            tmpContainer += defaultOU;

            resultantContainer += [tmpContainer];
        }

        void addDirectReports(recId _parentWorkerRecId)
        {
            HcmPositionWorkerAssignment hcmParentPositionWorkerAssignment;
            select firstOnly Worker, Position from hcmParentPositionWorkerAssignment where hcmParentPositionWorkerAssignment.Worker == _parentWorkerRecId;

            HcmPositionHierarchy hcmPositionHierarchy;
            while select Position,ParentPosition,PositionHierarchyType from hcmPositionHierarchy
                where hcmPositionHierarchy.ParentPosition       == hcmParentPositionWorkerAssignment.Position &&
                    hcmPositionHierarchy.PositionHierarchyType  == HcmPositionHierarchyType::lineHierarchyType()
            {
                prepareContainer(HcmPosition::getWorker(hcmPositionHierarchy.Position));
            }
        }

        //######################## Main Code starts here ##################################//

        HcmWorkerRecId hcmWorkerRecId = HcmWorker::userId2Worker(_userId);

        // Get originator's Legal entities and Opeartingunits details
        prepareContainer(hcmWorkerRecId);

        //for all the requisitioners of the originator get the legal entities and Operating units
        PurchReqAuthorizationOrigination purchReqAuthOrig;
        HcmWorker rHcmWorker;
        date asofDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        while select validTimeState(asofDate) Requisitioner,SpecificReporting from purchReqAuthOrig
            order by purchReqAuthOrig.Requisitioner desc
            where purchReqAuthOrig.Originator == hcmWorkerRecId
            join RecId from rHcmWorker
                where purchReqAuthOrig.Requisitioner == rHcmWorker.RecId
        {
            prepareContainer(purchReqAuthOrig.Requisitioner);

            if (purchReqAuthOrig.SpecificReporting == PurchReqAuthorizationSpecificReporting::Reporting)
            {
                addDirectReports(purchReqAuthOrig.Requisitioner);
            }
        }

        return resultantContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchReq</ConfigurationKey>
	<DeveloperDocumentation>@SYS315721</DeveloperDocumentation>
	<FormRef>PurchReqAuthorization</FormRef>
	<Label>@SYS305898</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Requisitioner</TitleField1>
	<TitleField2>Originator</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>OriginatorRequisitionerValidIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>OriginatorRequisitionerValidIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Originator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificReporting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Originator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Oerview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Originator</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Requisitioner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificReporting</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsAdminCreated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAdminCreated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS309237</Label>
			<EnumType>boolean</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Originator</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Requisitioner</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SpecificReporting</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchReqAuthorizationSpecificReporting</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OriginatorRequisitionerValidIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>Originator</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Requisitioner</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RequisitionerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Requisitioner</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Originator</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_PurchReqAuthorizationOrigination</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Originator</Name>
					<Field>Originator</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Requisitioner</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_PurchReqAuthorizationOrigination</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Requisitioner</Name>
					<Field>Requisitioner</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>