<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfConsOrd</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PmfConsOrd extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a production order to the consolidated order
    /// </summary>
    /// <param name="_prodTable">
    /// The production order to add
    /// </param>
    /// <param name="_force">
    /// Should the Bulk/Pack type be forced?
    /// The parameter is optional and defaults to <c>false</c>
    /// </param>
    /// <param name="_bulkOrd">
    /// Bulk/Pack status of the order, if the status is being forced.
    /// The parameter is optional and defaults to <c>No (Pack order)</c>
    /// </param>
    /// <remarks>
    /// If the Bulk/Pack status is being forced, it is possible to create
    /// inconsistent consolidated orders. Check the validity with
    /// <c>validateAddProdTable</c> first before forcing the add.
    /// </remarks>
    public void addProdTable(
        ProdTable   _prodTable,
        boolean     _force = false,
        PmfBulkOrd  _bulkOrd = NoYes::No)
    {
        ItemId  bulkItem = this.bulkItem().ItemId;

        ProdTable::pmfUpdateConsOrder(
            _prodTable.ProdId,
            this.ConsOrdId,
            _force
                ? _bulkOrd
                : bulkItem
                    ? bulkItem == _prodTable.ItemId
                    : PmfBulkItemConv::isBulk(_prodTable.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>bulkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bulk item for the consolidated order
    /// </summary>
    /// <param name="_forUpdate">
    /// Flag to select the bulk item with an exclusive lock
    /// </param>
    /// <returns>
    /// The bulk item record
    /// </returns>
    /// <remarks>
    /// If there is no bulk order added yet, the determination of the bulk item
    /// is being done from the bulk item of the first pack order.
    /// </remarks>
    public InventTable bulkItem(boolean _forUpdate = false)
    {
        ProdTable   prodTable;
        ItemId      bulkItem;

        //
        // check, if there is already a bulk order
        //
        select firstonly RecId, ItemId
            from prodTable
            where  prodTable.PmfConsOrdId   == this.ConsOrdId
                && prodTable.PmfBulkOrd;

        if (prodTable.RecId)
        {
            bulkItem = prodTable.ItemId;
        }
        else
        {
            select firstonly prodTable
                where  prodTable.PmfConsOrdId   == this.ConsOrdId
                    && !prodTable.PmfBulkOrd;

            bulkItem = prodTable.bomVersion().PmfBulkParent;
        }

        return InventTable::find(bulkItem,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the production order can be added to the consolidated order
    /// </summary>
    /// <param name="_prodTable">
    /// The production order that should be checked
    /// </param>
    /// <param name="_force">
    /// should the Bulk/Pack status of the production order be forced?
    /// </param>
    /// <param name="_bulkOrd">
    /// The Bulk/Pack status, if the status is being forced
    /// </param>
    /// <returns>
    /// true, if the production order can be added to the consolidated order
    /// false, otherwise
    /// </returns>
    public boolean validateAddProdTable(
        ProdTable   _prodTable,
        boolean     _force = false,
        PmfBulkOrd  _bulkOrd = NoYes::No)
    {
        boolean     ret = true;
        ItemId      bulkItem, packBulkItem;

        //
        // if the batch order is still assigned to a consolidated order,
        // it cannot be re-assigned
        //
        if (ret && _prodTable.orig().PmfConsOrdId)
        {
            ret = checkFailed("@PRO2637");
        }

        if (ret)
        {
            bulkItem = this.bulkItem().ItemId;
            //
            // if a bulk item can already be determined for this consolidated
            // order and the bulk item id does not match the item id on the
            // production order, the production order can only be added as
            // a pack order
            //
            if (bulkItem && bulkItem != _prodTable.ItemId)
            {
                //
                // cannot force the bulk order, if the item ids don't match
                //
                if (_force && _bulkOrd)
                {
                    ret = checkFailed("@PRO2638");
                }
                else
                {
                    packBulkItem = _prodTable.bomVersion().PmfBulkParent;
                    if (!packBulkItem)
                    {
                        ret = checkFailed("@PRO2648");
                    }
                    else if (packBulkItem != bulkItem)
                    {
                        ret = checkFailed("@PRO2639");
                    }

                    if (ret && _prodTable.ProdStatus == ProdStatus::Created)
                    {
                        ret = checkFailed(strFmt("@SCM:PmfConsOrdAddCreatedPackedBatchOrder", ProdStatus::Created));
                    }
                }
            }
            //
            // if the production order item matches the bulk item of the consolidated order,
            // the production order cannot be forced to a packed order
            //
            else if (bulkItem && _force && !_bulkOrd)
            {
                packBulkItem = _prodTable.bomVersion().PmfBulkParent;
                if (!packBulkItem)
                {
                    ret = checkFailed("@PRO2648");
                }
                else
                {
                    ret = checkFailed("@PRO2639");
                }

                if (ret && _prodTable.ProdStatus == ProdStatus::Created)
                {
                    ret = checkFailed(strFmt("@SCM:PmfConsOrdAddCreatedPackedBatchOrder", ProdStatus::Created));
                }
            }
            //
            // if there is no bulk item for the consolidated order yet, the item on the
            // production order must be a bulk item or must be defined as a pack item.
            //
            else if (!bulkItem
                && !PmfBulkItemConv::isBulk(_prodTable.ItemId))
            {
                if (!_prodTable.bomVersion().PmfBulkParent)
                {
                    ret = checkFailed(strfmt("@PRO2646", _prodTable.ItemId));
                }

                if (ret && _prodTable.ProdStatus == ProdStatus::Created)
                {
                    ret = checkFailed(strFmt("@SCM:PmfConsOrdAddCreatedPackedBatchOrder", ProdStatus::Created));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean if a record is found for the given consolidated order id.
    /// </summary>
    /// <param name="_orderId">Consolidated Order Id</param>
    /// <returns>True if a record is found, false otherwise</returns>
    public static boolean exist(PmfConsOrdId  _orderId)
    {
        return _orderId &&
            (select pmfConsOrd
                where pmfConsOrd.ConsOrdId == _orderId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record matching consolidate order Id.
    /// By default this record is not selected for update. This property may be changed via the parameters.
    /// </summary>
    /// <param name="_ordId">Consolidated OrderId</param>
    /// <param name="_forUpdate">defaults to false and therefore not selected for update</param>
    /// <returns>Returns PmfConsOrd record</returns>
    public static PmfConsOrd find(PmfConsOrdId _ordId, boolean _forUpdate = false)
    {
        PmfConsOrd  consOrder;

        consOrder.selectForUpdate(_forUpdate);

        select firstonly consOrder
            where consOrder.ConsOrdId  == _ordId;

        return consOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupConsOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds Consoldated orders that are still open.
    /// </summary>
    /// <param name="_ctrl">
    ///    The <c>FormStringControl</c> object where the lookup values should be displayed.
    /// </param>
    public static void lookupConsOrder(
        FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(
                                                    tablenum(PmfConsOrd),
                                                    _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource =
            query.addDataSource(tablenum(PmfConsOrd));

        sysTableLookup.addLookupfield(fieldnum(PmfConsOrd,ConsOrdId));
        sysTableLookup.addLookupfield(fieldnum(PmfConsOrd,ItemName));
        sysTableLookup.addLookupfield(fieldnum(PmfConsOrd,ConsQty));
        sysTableLookup.addLookupfield(fieldnum(PmfConsOrd,bomUnitId));

        queryBuildDataSource.addRange(fieldnum(PmfConsOrd, ProdStatus)).value(
                                            SysQuery::valueNot(ProdStatus::Completed));

        queryBuildDataSource.addSortField(fieldnum(PmfConsOrd,ConsOrdId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PMF</ConfigurationKey>
	<DeveloperDocumentation>@PRO2598</DeveloperDocumentation>
	<FormRef>PmfConsOrder</FormRef>
	<Label>@PRO2451</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ConsOrdId</TitleField1>
	<TitleField2>ItemName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ConsOrdIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>ConsOrdIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsOrdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsOrd</Name>
			<Label>@PRO2438</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsOrdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConsQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BOMUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqDateOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqTimeOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqDateDlv</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMUnitId</ExtendedDataType>
			<Label>@SYS3622</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ConsOrdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfConsOrdId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConsQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfConsQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReqDateDlv</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDateDlv</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ReqDateOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqDateOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ReqTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqTime</ExtendedDataType>
			<Label>@SYS8758</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ReqTimeOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqTimeOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ConsOrdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ConsOrdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BOMUnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMUnitId</Name>
					<Field>BOMUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ConsOrdId</Name>
					<Field>ConsOrdId</Field>
					<RelatedField>PmfConsOrdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>