<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetPropertyGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetPropertyGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>AssetPropertyGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>AssetPropertyGroup</c> table record to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the specified record is not located in the <c>AssetPropertyGroup</c> table, an error message is displayed.
    /// </remarks>
    public static boolean checkExist(recId _recId)
    {
        boolean doesExist = true;

        if (!AssetPropertyGroup::exist(_recId))
        {
            doesExist = checkFailed(strFmt(AssetPropertyGroup::txtNotExist(), _recId));
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>AssetPropertyGroup</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>AssetPropertyGroup</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean doesExist;

        doesExist = (select firstonly RecId from assetPropertyGroup
                        where assetPropertyGroup.RecId == _recId).RecId != 0;

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>AssetPropertyGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>AssetPropertyGroup</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option that will be used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>AssetPropertyGroup</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static AssetPropertyGroup find(
        recId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetPropertyGroup assetPropertyGroup;

        assetPropertyGroup.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetPropertyGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetPropertyGroup
            where assetPropertyGroup.RecId == _recId;

        return assetPropertyGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAssetPropertyGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>AssetPropertyGroup</c> table for a given property group.
    /// </summary>
    /// <param name="_assetPropertyGroup">
    ///    The property group code of the record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option that will be used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record of the <c>AssetPropertyGroup</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static AssetPropertyGroup findByAssetPropertyGroup(
        AssetPropertyGroupCodeId    _assetPropertyGroup,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetPropertyGroup assetPropertyGroup;

        assetPropertyGroup.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetPropertyGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetPropertyGroup
            where assetPropertyGroup.AssetPropertyGroup == _assetPropertyGroup;

        return assetPropertyGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefAssetPropertyGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the Go To Main Table functionality for the <c>AssetPropertyGroup</c> table.
    /// </summary>
    /// <param name="_object">
    ///    The caller object where the event is triggered.
    /// </param>
    /// <param name="_propertyGroupRecId">
    ///    The primary key of the record to show.
    /// </param>
    public static void jumpRefAssetPropertyGroup(
        Object  _object,
        recId   _propertyGroupRecId)
    {
        Args args = new Args();
        args.record(AssetPropertyGroup::find(_propertyGroupRecId,false));
        args.caller(_object);

        new MenuFunction(menuitemDisplayStr(AssetPropertyGroup), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetPropertyGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the lookup for the property group.
    /// </summary>
    /// <param name="_formControl">
    ///    The form control to perform the lookup for.
    /// </param>
    public static void lookupAssetPropertyGroup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(AssetPropertyGroup), _formControl);

        sysTableLookup.addLookupfield(fieldNum(AssetPropertyGroup, AssetPropertyGroup));
        sysTableLookup.addLookupfield(fieldNum(AssetPropertyGroup, Description));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>AssetPropertyGroup</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@SYS329890</DeveloperDocumentation>
	<FormRef>AssetPropertyGroup</FormRef>
	<Label>@FixedAssets:FA_TableTitle_AssetPropertyGroup</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AssetPropertyGroup</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>FixedAssets</Modules>
	<ReplacementKey>PropertyGroupIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetPropertyGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetPropertyGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetPropertyGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetPropertyGroup</Name>
			<Label>@SYS131452</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetPropertyGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetPropertyGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetPropertyGroupCodeId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PropertyGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetPropertyGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>