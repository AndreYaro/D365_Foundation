<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorPortalUserRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendVendorPortalUserRequest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>requestType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the request type of the request.
    /// </summary>
    /// <returns>
    /// The request type.
    /// </returns>
    public display SysUserRequestEntityType requestType()
    {
        return SysUserRequestEntityType::VendorPortalUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoleLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query that will be used as the security role lookup.
    /// </summary>
    /// <param name="_securityRoleLookupQuery">
    /// The query to update.
    /// </param>
    /// <remarks>
    /// The <c>DirExternalRole</c> table should contain list of roles applicable to vendor portal user
    /// </remarks>
    public void updateRoleLookupQuery(Query _securityRoleLookupQuery)
    {
        super(_securityRoleLookupQuery);

        QueryBuildDataSource qbds = _securityRoleLookupQuery.dataSourceTable(tablenum(SecurityRole)).addDataSource(tableNum(DirExternalRole));

        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(SecurityRole, RecId), fieldNum(DirExternalRole, Role));
        qbds.addRange(fieldNum(DirExternalRole, EntityType)).value(enum2Str(UserExternalPartyEntityType::Vendor));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the request user type as B2B
    /// </summary>
    public void initValue()
    {
        super();

        this.UserType = SysUserRequestUserType::B2B;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the request from a related record.
    /// </summary>
    /// <param name="_relatedRecord">
    /// The related record to initialize the request from.
    /// </param>
    /// <param name = "_relatedRecord"></param>
    public void initFrom(Common _relatedRecord)
    {
        VendVendorPortalTmpUserRequest _userRequest = _relatedRecord as VendVendorPortalTmpUserRequest;

        this.initValue();
        this.RequestAction = _userRequest.RequestAction;
        this.Person = _userRequest.Person;
        this.UserAlias = _userRequest.UserAlias;
        this.UserName = _userRequest.UserName;
        this.UserLanguageId = _userRequest.LanguageId;
        this.BusinessJustification = _userRequest.BusinessJustification;
        this.User = xUserInfo::userInfoByUserAlias(_userRequest.UserAlias).id;
        this.RequestCompany = curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPendingRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there exists a vendor portal user request for the person created by
    /// current user and the request status is not Canceled, Completed or Rejected.
    /// </summary>
    /// <param name = "_person">The contact person to check request for</param>
    /// <param name = "_userId">The userId that has created the user request, defaultd to current user id</param>
    /// <returns></returns>
    public static boolean existsPendingRequest(DirPersonRecId _person, UserId _userId = curUserId())
    {
        VendVendorPortalUserRequest userRequest;

        if (_person != 0)
        {
            select firstonly userRequest
            where userRequest.createdBy == _userId
                && userRequest.UserType == SysUserRequestUserType::B2B
                && userRequest.Person == _person
                && userRequest.RequestStatus != SysUserRequestStatus::WorkflowCanceled
                && userRequest.RequestStatus != SysUserRequestStatus::WorkflowCompleted
                && userRequest.RequestStatus != SysUserRequestStatus::ApprovalDenied;
        }

        return userRequest.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecallingRequestAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if recalling the request is allowed.
    /// </summary>
    /// <returns>Returns true <c>RequestStatus</c> is WorkflowSubmitted or ApprovalPending, else false</returns>
    public boolean isRecallingRequestAllowed()
    {
        return this.RequestStatus == SysUserRequestStatus::WorkflowSubmitted
            || this.RequestStatus == SysUserRequestStatus::ApprovalPending;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workflowType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the workflow template that should be used for the request.
    /// </summary>
    /// <returns>
    /// A string that represents the workflow template.
    /// </returns>
    display WorkflowConfigurationName workflowType()
    {
        WorkflowConfigurationName type;

        switch (this.RequestAction)
        {
            case SysUserRequestAction::MaintainUser:
            //Fall through
            case SysUserRequestAction::AddUser:
                type = workflowtypestr(SysUserRequestAddUserTemplate);
                break;

            case SysUserRequestAction::InactivateUser:
                type = workflowtypestr(SysUserRequestInactivateUserTemplate);
                break;

            default :
                throw error("@SCM:NoWorkflowErrorMessage");
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMaintainUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the request is a maintain user request.
    /// </summary>
    /// <returns>
    /// true if the request is maintain user request; otherwise, false.
    /// </returns>
    display boolean isMaintainUserRequest()
    {
        return this.RequestAction == SysUserRequestAction::MaintainUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the user is valid for the request.
    /// </summary>
    /// <returns>
    ///    true if the user is valid; otherwise, false.
    /// </returns>
    public boolean checkUser()
    {
        boolean result = super();

        if (result && this.isMaintainUserRequest())
        {
            Query query = new Query();

            QueryBuildDataSource qbds = query.addDataSource(tableNum(UserInfo));
            qbds.addRange(fieldNum(UserInfo, id)).value(this.User);
            this.updateUserLookupRequestQuery(query);

            QueryRun qr = new QueryRun(query);
            qr.interactive(false);

            qr.init();

            result = qr.next();
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendorPortal</ConfigurationKey>
	<Extends>SysUserRequest</Extends>
	<Modules>Vendor</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Justification</Name>
			<Label>@SYS107376</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BusinessJustification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusinessJustification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendVendorPortalUserRequestBusinessJustification</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RequestCompany</Name>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Label>@SYS315616</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SysUserRequest</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SysUserRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>