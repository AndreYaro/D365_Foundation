<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFundingSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjFundingSource extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the logistic postal address identified by the invoice location.
    /// </summary>
    /// <returns>
    /// The logistic postal address specified by the invoice location.
    /// </returns>
    public display LogisticsAddressing address()
    {
        return LogisticsPostalAddress::findByLocation(this.InvoiceLocation).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContractId</Name>
				<Source><![CDATA[
    private boolean checkContractId()
    {
        boolean retValue = true;

        if (!this.ContractId)
        {
            retValue = checkFailed("@SYS53031");
        }

        if (retValue && !ProjInvoiceTable::exist(this.ContractId))
        {
            retValue = checkFailed("@SYS133303");
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    boolean checkContactPerson()
    {
        ContactPerson   contactPerson;
        CustTable       custTable;

        // GDL code: depends on isCustDKPublic() to enable the fields
        if (this.FundingType == ProjFundingType::Customer)
        {
            if (this.ContactPersonId)
            {
                contactPerson = ContactPerson::find(this.ContactPersonId);
                custTable = CustTable::findByPartyRecId(this.Party);
                if (contactPerson.getCustAccount() != custTable.AccountNum)
                {
                    // Contact person "%1 - %2" must be attached to the customer "%3".
                    return checkFailed(strFmt("@SYS92800",this.ContactPersonId,contactPerson.personName(),custTable.AccountNum));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerBlockedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the blocked status of the current customer account.
    /// </summary>
    /// <returns>true if the customer is not blocked; otherwise, false.</returns>
    protected boolean validateCustomerBlockedStatus()
    {
        CustVendorBlocked blockLevel = CustTable::blocked(this.CustAccount);
        boolean retValue = true;

        switch (blockLevel)
        {
            case CustVendorBlocked::All:
                retValue = checkFailed(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
                break;
            case CustVendorBlocked::Invoice:
                retValue = checkFailed(strFmt("@SYS18389", this.CustAccount, enum2str(blockLevel)));
                break;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomerAccount</Name>
				<Source><![CDATA[
    protected boolean checkCustomerAccount()
    {
        boolean retValue = true;

        if (!this.CustAccount)
        {
            retValue = checkFailed("@SYS184310");
        }
        else
        {
            if (!CustTable::exist(this.CustAccount))
            {
                retValue = checkFailed("@SYS184311");
            }
        }

        if (retValue &&
            ProjParameters::find().OneTimeCustOnInvoice &&
            CustTable::find(this.CustAccount).OneTimeCustomer)
        {
            retValue = checkFailed("@SYS57673");
        }

        if (retValue)
        {
            retValue = this.validateCustomerBlockedStatus();
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFundingSourceId</Name>
				<Source><![CDATA[
    private boolean checkFundingSourceId()
    {
        boolean retValue = true;

        if (!this.FundingSourceId)
        {
            retValue = checkFailed("@SYS133301");
        }

        // Check for duplicate record
        if (this.RecId == 0)
        {
            if (ProjFundingSource::existContractFundingSource(this.ContractId, this.FundingSourceId))
            {
                retValue = checkFailed("@SYS134243");
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFundingType</Name>
				<Source><![CDATA[
    private boolean checkFundingType()
    {
        ProjFundingSource   projFundingSourceLocal;
        boolean             retValue = true;

        if (this.FundingType == ProjFundingType::OnHoldFundingSource)
        {
            select count(RecId) from projFundingSourceLocal where
                projFundingSourceLocal.FundingType == ProjFundingType::OnHoldFundingSource &&
                projFundingSourceLocal.ContractId == this.ContractId;
            if (projFundingSourceLocal.RecId != 0)
            {
                retValue = checkFailed("@SYS319826");
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParty</Name>
				<Source><![CDATA[
    private boolean checkParty()
    {
        boolean retValue = true;

        if (this.CustAccount && !DirPartyTable::findRec(this.Party))
        {
            retValue = checkFailed("@SYS133304");
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjGrant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjGrant</c> field.
    /// </summary>
    /// <param name="projGrantId">
    /// The <c>ProjGrantId</c> field value to validate.
    /// </param>
    /// <returns>
    /// true if the grant status is not closed or rejected; otherwise, false.
    /// </returns>
    public boolean checkProjGrant(ProjGrantId   projGrantId)
    {
        boolean ret = true;
        ProjGrant projGrant;

        projGrant = ProjGrant::findByGrantId(projGrantId);

        if (projGrant.GrantStatus != ProjGrantStatus::Awarded && projGrant.GrantStatus != ProjGrantStatus::Active)
        {
            ret = checkFailed(strFmt("@SYS300494", enum2str(projGrant.GrantStatus)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contract name identified by the contact ID.
    /// </summary>
    /// <returns>
    /// The contact name specified by the contract ID.
    /// </returns>
    public display ContactPersonName contactPersonName()
    {
        // GDL code: depends on isCustDKPublic() to enable the fields
        if (this.ContactPersonId)
        {
            return ContactPerson::name(this.ContactPersonId);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLedgerCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency for the current company
    /// </summary>
    /// <returns>
    /// the accounting currency for the current company
    /// </returns>
    display public CurrencyCode currentLedgerCurrency()
    {
        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ttsbegin;

        this.deleteRetentionFromProject();
        this.deleteRetentionFromBillingRule();

        ttscommit;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRetentionFromBillingRule</Name>
				<Source><![CDATA[
    public void deleteRetentionFromBillingRule()
    {
        PSAProjFundingSourceRetain  psaProjFundingSourceRetain;
        PSAContractLineItems        psaContractLineItems;

        while select forupdate psaProjFundingSourceRetain
            join psaContractLineItems
                where psaContractLineItems.ContractLineNum == psaProjFundingSourceRetain.BillingRuleId
                    && psaProjFundingSourceRetain.ProjFundingSource == this.RecId
        {
            psaProjFundingSourceRetain.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRetentionFromProject</Name>
				<Source><![CDATA[
    public void deleteRetentionFromProject()
    {
        PSAProjFundingSourceRetain  psaProjFundingSourceRetain;
        ProjTable                   projTable;

        while select forupdate psaProjFundingSourceRetain
            join projTable
                where projTable.ProjId == psaProjFundingSourceRetain.ProjId
                    && psaProjFundingSourceRetain.ProjFundingSource == this.RecId
        {
            psaProjFundingSourceRetain.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the contact name for the current contract ID.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value to determine whether this is a set or get action.
    /// </param>
    /// <param name="_name">
    /// The contact name that will be used by a set operation.
    /// </param>
    /// <returns>
    /// The contact name specified by the contract ID.
    /// </returns>
    edit ContactPersonName  editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonName   name = _name;
        ContactPerson       contactPerson;
        ContactPersonId     contactPersonId;

        // GDL code: depends on isCustDKPublic() to enable the fields
        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
                contactPerson = ContactPerson::find(_name);
                this.ContactPersonId = contactPerson.ContactPersonId;
                if (this.ContactPersonId)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    DirPartyTable       partyTable;

                    select firstonly contactPersonId from contactPerson
                            where contactPerson.ContactForParty ==   this.Party
                        join Name from partyTable
                            where partyTable.RecId == contactPerson.Party &&
                                  partyTable.Name        like name;
                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId = contactPerson.ContactPersonId;
                        name=partyTable.Name;
                    }
                }

                if (contactPersonId != this.ContactPersonId)
                {
                    if (this.checkContactPerson())
                    {
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId = '';
            }
        }
        else
        {
            name = this.contactPersonName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProjFunder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the <c>Party</c> and <c>CustAccount</c> field or the <c>ProjGrant</c> field.
    /// </summary>
    /// <param name="_set">
    /// true if the <c>CustAccount</c> field or the <c>ProjGrant</c> field is set; otherwise, false.
    /// </param>
    /// <param name="_projGrantFunder">
    /// The <c>ProjGrantFunder</c> field value that is selected by the user.
    /// </param>
    /// <returns>
    /// A <c>Party</c> field value or <c>CustAccount</c> field value or <c>ProjGrant</c> field value.
    /// </returns>
    /// <remarks>
    /// This method gets or sets the <c>Party</c> and <c>CustAccount</c> field or <c>ProjGrant</c> field
    /// based on the funding type.
    /// </remarks>
    public edit DirPartyName editProjFunder(boolean _set, DirPartyName _projGrantFunder)
    {
        DirPartyName    projGrantFunder = _projGrantFunder;
        CustTable       custTable;
        ProjGrant       grant;

        if (_set)
        {
            switch (this.FundingType)
            {
                case ProjFundingType::Grant :
                    grant = ProjGrant::findByGrantId(projGrantFunder);

                    if (grant && this.checkProjGrant(projGrantFunder))
                    {
                        this.ProjGrant = grant.RecId;
                        this.CustAccount = grant.CustAccount;
                        custTable = CustTable::find(grant.CustAccount);
                        this.transferCustAccount(grant.CustAccount);
                        this.LanguageId = custTable.languageId();
                        this.Party = custTable.Party;
                        this.DefaultDimension = custTable.DefaultDimension;
                        this.FundingSourceId = ProjFundingSource::processFundingSourceId(grant.GrantName, this.ContractId);
                        this.setInvoiceLocation(custTable);
                    }
                    else
                    {
                        projGrantFunder = ProjGrant::find(this.ProjGrant).GrantId;
                    }
                    break;

                case ProjFundingType::Customer :
                    this.CustAccount = projGrantFunder;
                    custTable = CustTable::find(this.CustAccount);
                    this.Party = custTable.Party;
                    this.transferCustAccount(this.CustAccount);
                    this.FundingSourceId = ProjFundingSource::processFundingSourceId(custTable.name(), this.ContractId);
                    if (CustTable::isCustDKPublic(custTable.AccountNum))
                    {
                        this.ContactPersonId = custTable.ContactPersonId;
                    }
                    this.setInvoiceLocation(custTable);
                    break;

                case ProjFundingType::Organization :
                case ProjFundingType::OnHoldFundingSource :
                    this.Party = DirPartyTable::findByName(projGrantFunder, DirPartyType::OperatingUnit, false).RecId;
                    this.LanguageId = '';
                    this.ProjGrant = 0;
                    this.FundingSourceId = ProjFundingSource::processFundingSourceId(projGrantFunder, this.ContractId);
                    break;
            }
        }
        else
        {
            switch (this.FundingType)
            {
                case ProjFundingType::Grant :
                    projGrantFunder = ProjGrant::find(this.ProjGrant).GrantId;
                    break;

                case ProjFundingType::Customer :
                    projGrantFunder = CustTable::findByPartyRecId(this.Party).AccountNum;
                    break;

                case ProjFundingType::Organization :
                case ProjFundingType::OnHoldFundingSource :
                    projGrantFunder = DirPartyTable::findRec(this.Party).Name;
                    break;
            }
        }

        return projGrantFunder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOnFundingLimit</Name>
				<Source><![CDATA[
    private boolean existsOnFundingLimit()
    {
        boolean                     retValue = false;
        ProjFundingLimit            projFundingLimit;

        select firstonly RecId from projFundingLimit where projFundingLimit.FundingSource == this.RecId;
        if (projFundingLimit.RecId != 0)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOnFundingRule</Name>
				<Source><![CDATA[
    private boolean existsOnFundingRule()
    {
        boolean                     retValue = false;
        ProjFundingRuleAllocation   projFundingRuleAllocation;

        select firstonly RecId from projFundingRuleAllocation where projFundingRuleAllocation.FundingSource == this.RecId;
        if (projFundingRuleAllocation.RecId != 0)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPostedTrx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the funding source has been used in a posted translation.
    /// </summary>
    /// <returns>
    /// true if the funding source has been used in posted transaction; otherwise, false.
    /// </returns>
    public boolean existsPostedTrx()
    {
        boolean                     retValue = false;
        ProjEmplTransCost           projEmplTransCost;
        ProjEmplTransSale           projEmplTransSale;
        ProjCostTransCost           projCostTransCost;
        ProjCostTransSale           projCostTransSale;
        ProjItemTransCost           projItemTransCost;
        ProjItemTransSale           projItemTransSale;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjOnAccTransSale          projOnAccTransSale;

        // Check Hours
        select firstonly RecId from projEmplTransCost where projEmplTransCost.FundingSource == this.RecId;
        if (projEmplTransCost.RecId != 0)
        {
            retValue = true;
        }

        if (!retValue)
        {
            select firstonly RecId from projEmplTransSale where projEmplTransSale.FundingSource == this.RecId;
            if (projEmplTransSale.RecId != 0)
            {
                retValue = true;
            }
        }

        // Check Items
        if (!retValue)
        {
            select firstonly RecId from projCostTransCost where projCostTransCost.FundingSource == this.RecId;
            if (projCostTransCost.RecId != 0)
            {
                retValue = true;
            }
        }

        if (!retValue)
        {
            select firstonly RecId from projCostTransSale where projCostTransSale.FundingSource == this.RecId;
            if (projCostTransSale.RecId != 0)
            {
                retValue = true;
            }
        }

        // Check Items
        if (!retValue)
        {
            select firstonly RecId from projItemTransCost where projItemTransCost.FundingSource == this.RecId;
            if (projItemTransCost.RecId != 0)
            {
                retValue = true;
            }
        }

        if (!retValue)
        {
            select firstonly RecId from projItemTransSale where projItemTransSale.FundingSource == this.RecId;
            if (projItemTransSale.RecId != 0)
            {
                retValue = true;
            }
        }

        // Check Fees
        if (!retValue)
        {
            select firstonly RecId from projRevenueTransSale where projRevenueTransSale.FundingSource == this.RecId;
            if (projRevenueTransSale.RecId != 0)
            {
                retValue = true;
            }
        }

        // Check On Account
        if (!retValue)
        {
            select firstonly RecId from projOnAccTransSale where projOnAccTransSale.FundingSource == this.RecId;
            if (projOnAccTransSale.RecId != 0)
            {
                retValue = true;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsUnPostedTrx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the funding source has been used in pending transactions.
    /// </summary>
    /// <returns>
    /// true if the funding source has been used in pending transaction; otherwise, false.
    /// </returns>
    public boolean existsUnPostedTrx()
    {
        boolean          retValue = false;
        ProjTable        projTable;
        ProjInvoiceTable projInvoiceTable;
        ProjFundingSourceUnpostedTransView projFundingSourceUnpostedTransView;

        select firstonly RecId from projTable
            exists join projInvoiceTable
                where projInvoiceTable.ProjInvoiceProjId == projTable.ProjInvoiceProjId
                    && projInvoiceTable.ProjInvoiceProjId == this.ContractId
            exists join projFundingSourceUnpostedTransView
                where projFundingSourceUnpostedTransView.ProjId == projTable.ProjId
                    && projFundingSourceUnpostedTransView.ProjFundingSource == this.RecId;
        if (projTable)
        {
            retValue = true;
        }
   
        // Check sales orders
        if (!retValue)
        {
            SalesTable salesTable;

            select firstonly RecId from salesTable where salesTable.FundingSource == this.RecId;

            if (salesTable.RecId != 0)
            {
                retValue = true;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes address, payment, and other information for an invoice project from a customer.
    /// </summary>
    /// <param name="custTable">
    ///    A customer record to use to initialize the invoice project.
    /// </param>
    public void initFromCustTable(CustTable custTable)
    {
        CustTable                   invoiceAccount;
        CustParameters              custParameters;

        custParameters = CustParameters::find();

        this.setInvoiceLocation(custTable);

        invoiceAccount = CustTable::find(custTable.InvoiceAccount);
        if (invoiceAccount)
        {
            this.PaymentTermsId         = invoiceAccount.PaymTermId;
            this.PaymentscheduleId      = invoiceAccount.PaymSched;
            this.NumberSequenceGroupId  = invoiceAccount.NumberSequenceGroup;
            this.CashDiscountId         = invoiceAccount.CashDisc;
            //<GEEPL>
            this.TaxPeriodPaymentCode_PL    = invoiceAccount.TaxPeriodPaymentCode_PL;
            //</GEEPL>
        }
        else
        {
            this.PaymentTermsId         = custTable.PaymTermId;
            this.PaymentscheduleId      = custTable.PaymSched;
            this.NumberSequenceGroupId  = custTable.NumberSequenceGroup;
            this.CashDiscountId         = custTable.CashDisc;
            //<GEEPL>
            this.TaxPeriodPaymentCode_PL    = custTable.TaxPeriodPaymentCode_PL;
            //</GEEPL>
        }

        this.LanguageId             = DirPartyTable::findRec(custTable.Party).LanguageId;
        this.DefaultDimension       = custTable.DefaultDimension;
        this.GiroType               = custTable.GiroTypeProjInvoice;

        this.PostingProfile         = CustParameters::find().PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        this.retentionForProject();
        this.retentionForBillingRule();

        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(this.ContractId);
        if (projInvoiceTable)
        {
            DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(projInvoiceTable, fieldNum(ProjInvoiceTable, ProjInvoiceProjId), this, fieldNum(ProjFundingSource, DefaultDimension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProjFundingSource, FundingType) :
                this.checkFundingType();
                if (this.FundingType != ProjFundingType::Customer)
                {
                    this.psaCustRetentionTermId = 0;
                }
                break;

            case fieldNum(ProjFundingSource, PaymentTermsId):
                this.PaymentscheduleId = PaymTerm::find(this.PaymentTermsId).PaymSched;
                break;

            case fieldNum(ProjFundingSource, InvoiceLocation):
                ProjProposalJour    projProposalJour;
                LogisticsLocation   logisticsLocation;
                CustParameters custParameters = CustParameters::find();
                select firstonly Description from logisticsLocation
                        where logisticsLocation.recid == this.InvoiceLocation;
                if (custParameters.CustNameFromVATNum)
                {
                    CustTable custTable = CustTable::find(this.CustAccount);
                    this.setNameUsingVATNum(custTable.vatNum,
                                    custTable.postalAddress().CountryRegionId,
                                    logisticsLocation.Description,
                                    custParameters);
                }
                else
                {
                    this.InvoiceName = logisticsLocation.Description;
                }
                ttsbegin;
                update_recordset projProposalJour
                    setting DeliveryName = this.InvoiceName,
                            DeliveryPostalAddress = LogisticsLocationEntity::location2PostalAddress(this.InvoiceLocation).RecId
                    where projProposalJour.FundingSource == this.RecId &&
                           projProposalJour.ProjInvoiceId == '';
                ttscommit;
             break;

            case fieldNum(ProjFundingSource, PSACustRetentionTermId):
                ttsBegin;
                PSAProjFundingSourceRetain psaProjFundingSourceRetain;
                ProjInvoiceTable projInvoiceTable;
                update_recordset psaProjFundingSourceRetain
                    setting CustRetentionTermId = this.psaCustRetentionTermId
                    exists join ProjInvoiceProjId from projInvoiceTable
                    where psaProjFundingSourceRetain.ProjFundingSource == this.RecId &&
                          !psaProjFundingSourceRetain.CustRetentionTermId &&
                        projInvoiceTable.ProjInvoiceProjId == this.ContractId;
                ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public display Name name()
    {
        Name    retValue = '';

        switch (this.FundingType)
        {
            case ProjFundingType::Customer :
                retValue = CustTable::findByPartyRecId(this.Party).name();
                break;

            case ProjFundingType::Grant :
                retValue = ProjGrant::find(this.ProjGrant).GrantName;
                break;

            case ProjFundingType::Organization :
            case ProjFundingType::OnHoldFundingSource :
                retValue = DirPartyTable::findRec(this.Party).Name;
                break;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projFundingSourceSpentAmountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount spent of the corresponding funding source.
    /// </summary>
    /// <returns>
    /// The amount spent of the corresponding funding source.
    /// </returns>
    display AmountMST projFundingSourceSpentAmountMst()
    {
        ProjItemTrans           projItemTrans;
        ProjOnAccTrans          projOnAccTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjCostTrans           projCostTrans;
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjOnAccTransSale       projOnAccTransSale;
        ProjItemTransSale       projItemTransSale;
        ProjCostTransSale       projCostTransSale;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjTrans               projTransSale;

        AmountMST totalSpentAmountMst;

        while select projEmplTransSale
                    join projEmplTrans
                    where projEmplTransSale.TransId == projEmplTrans.TransId &&
                    projEmplTransSale.FundingSource == this.RecId
        {
            projTransSale = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
            totalSpentAmountMst += projTransSale.transTurnoverMST();
        }

        while select projItemTransSale
                    join projItemTrans
                    where projItemTransSale.ProjTransId == projItemTrans.ProjTransId &&
                    projItemTransSale.FundingSource == this.RecId
        {
            projTransSale = ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale);
            totalSpentAmountMst += projTransSale.transTurnoverMST();
        }

        while select projCostTransSale
                    join projCostTrans
                    where projCostTransSale.TransId == projCostTrans.TransId &&
                    projCostTransSale.FundingSource == this.RecId
        {
            projTransSale = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
            totalSpentAmountMst += projTransSale.transTurnoverMST();
        }

        while select projRevenueTransSale
                    join projRevenueTrans
                    where projRevenueTransSale.TransId == projRevenueTrans.TransId &&
                    projRevenueTransSale.FundingSource == this.RecId
        {
            projTransSale = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);
            totalSpentAmountMst += projTransSale.transTurnoverMST();
        }

        while select projOnAccTransSale
                    join projOnAccTrans
                    where projOnAccTransSale.TransId == projOnAccTrans.TransId &&
                    projOnAccTransSale.FundingSource == this.RecId
        {
            projTransSale = ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale);
            totalSpentAmountMst += projTransSale.transTurnoverMST();
        }

        return totalSpentAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retentionForBillingRule</Name>
				<Source><![CDATA[
    public void retentionForBillingRule()
    {
        PSAProjFundingSourceRetain  psaProjFundingSourceRetain;
        ProjInvoiceTable            projInvoiceTable;
        PSAContractLineItems        psaContractLineItems;

        while select ContractLineNum from psaContractLineItems
            join RecId from projInvoiceTable
                where projInvoiceTable.ProjInvoiceProjId == psaContractLineItems.ProjInvoiceProjId
                    && projInvoiceTable.ProjInvoiceProjId == this.ContractId
        {
            if (this.FundingType == ProjFundingType::Customer)
            {
                psaProjFundingSourceRetain.BillingRuleId       = psaContractLineItems.ContractLineNum;
                psaProjFundingSourceRetain.ProjFundingSource   = this.RecId;
                psaProjFundingSourceRetain.CustRetentionTermId = this.psaCustRetentionTermId;
                psaProjFundingSourceRetain.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retentionForProject</Name>
				<Source><![CDATA[
    public void retentionForProject()
    {
        PSAProjFundingSourceRetain  psaProjFundingSourceRetain;
        ProjTable                   projTable;
        ProjInvoiceTable            projInvoiceTable;

        while select ProjId from projTable
        join RecId from projInvoiceTable
            where projInvoiceTable.ProjInvoiceProjId == projTable.ProjInvoiceProjId
                && projInvoiceTable.ProjInvoiceProjId == this.ContractId
                && (projTable.Type == ProjType::FixedPrice
                || projTable.Type == ProjType::TimeMaterial
                || (projTable.ProjInvoiceProjId && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()))
        {
            if (this.FundingType == ProjFundingType::Customer)
            {
                psaProjFundingSourceRetain.ProjId = projTable.ProjId;
                psaProjFundingSourceRetain.ProjFundingSource = this.RecId;
                psaProjFundingSourceRetain.CustRetentionTermId = this.psaCustRetentionTermId;
                psaProjFundingSourceRetain.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the location and invoice name for an invoice project from the customer associated with the invoice account for the invoice project.
    /// </summary>
    /// <param name = "_custTable">
    ///     A record of the <c>CustTable</c> table.
    /// </param>
    public void setInvoiceLocation(CustTable _custTable)
    {
        CustParameters              custParameters;
        LogisticsLocationEntity     location;
        LogisticsPostalAddress      postalAddress;
        CustTable                   invoiceCustTable;

        //Set the location field
        custParameters = CustParameters::find();

        if (_custTable.InvoiceAddress == InvoiceOrderAccount::InvoiceAccount &&
            _custTable.InvoiceAccount &&
            _custTable.InvoiceAccount != _custTable.AccountNum)
        {
            invoiceCustTable = CustTable::find(_custTable.InvoiceAccount);
        }
        else
        {
            invoiceCustTable = _custTable;
        }

        LogisticsLocationRole logisticsLocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice);

        LogisticsLocationRecId locationRecId = LogisticsLocationDefault::findSimpleDefault(invoiceCustTable, logisticsLocationRole).RecId;

        location = LogisticsLocationEntity::constructFromLocationRecId(locationRecId);

        if (location)
        {
            LogisticsPostalAddress  logisticsPostalAddressLocal = LogisticsPostalAddress::findByLocation(location.parmLocationRecId());

            if (!logisticsPostalAddressLocal.isEffective())
            {
                location = null;

                DirPartyLocation        partyLocation;
                DirPartyLocationRole    partyLocationRole;
                LogisticsLocationRole   locationRole;

                while select Location from partyLocation
                    where partyLocation.Party == this.Party
                    exists join partyLocationRole
                        where partyLocationRole.PartyLocation == partyLocation.RecId
                    exists join locationRole
                        where locationRole.RecId == partyLocationRole.LocationRole
                            && locationRole.Type == LogisticsLocationRoleType::Invoice
                {
                    select logisticsPostalAddressLocal
                            where partyLocation.Location == logisticsPostalAddressLocal.Location
                            && logisticsPostalAddressLocal.ValidFrom <= DateTimeUtil::utcNow()
                            && logisticsPostalAddressLocal.ValidTo >= DateTimeUtil::utcNow();

                    if (logisticsPostalAddressLocal.Location)
                    {
                        location = LogisticsLocationEntity::constructFromLocationRecId(partyLocation.Location);

                        if (location)
                        {
                            break;
                        }
                    }
                }
            }
        }

        if (location && location.parmLocationRecId())
        {
            // If an alt. invoice address exist, we will use this as invoice address
            if (custParameters.CustNameFromVATNum)
            {
                this.setNameUsingVATNum( _custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID),
                                         _custTable.postalAddress().CountryRegionId,
                                         location.parmLocationDescription(),
                                         custParameters);
            }
            else
            {
                this.InvoiceName = location.parmLocationDescription();
            }
            this.InvoiceLocation = location.parmLocationRecId();
        }
        else
        {
            // Else we use the address on the customer
            if (custParameters.CustNameFromVATNum)
            {
                this.setNameUsingVATNum(_custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID),
                                        _custTable.postalAddress().CountryRegionId,
                                        _custTable.name(),
                                        custParameters);
            }
            else
            {
                this.InvoiceName = invoiceCustTable.name();
            }
            postalAddress = DirParty::primaryPostalAddress(invoiceCustTable.Party);
            this.InvoiceLocation =  postalAddress ? postalAddress.Location : 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNameUsingVATNum</Name>
				<Source><![CDATA[
    private void setNameUsingVATNum(VATNum                   _vatNum,
                                    AddressCountryRegionId   _countryRegionId,
                                    Name                     _name,
                                    CustParameters           _custParameters = CustParameters::find())
    {
        TaxVATNumTable      taxVATNumTable;
        CountryRegionType   countryRegionType;

        taxVATNumTable = TaxVATNumTable::find(_vatNum, _countryRegionId);

        if (taxVATNumTable.Name)
        {
            this.InvoiceName      = taxVATNumTable.Name;
        }
        else
        {
            switch (_custParameters.MandatoryInvoiceVATNum)
            {
                case TaxVATNumCountryRegionType::None:
                    this.InvoiceName = _name;
                    break;

                case TaxVATNumCountryRegionType::DomesticEU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::Domestic:
                        case CountryRegionType::EU:
                            this.InvoiceName = '';
                            break;

                        default:
                            this.InvoiceName = _name;
                            break;
                    }
                    break;
                case TaxVATNumCountryRegionType::EU:
                    countryRegionType = IntrastatCountryRegionParameters::type(_countryRegionId);
                    switch (countryRegionType)
                    {
                        case CountryRegionType::EU:
                            this.InvoiceName = '';
                            break;

                        default:
                            this.InvoiceName = _name;
                            break;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the address, payment, and other information for an invoice project from the customer associated with the invoice account for the invoice project.
    /// </summary>
    /// <param name="_custAccount">
    ///    A customer account to use to initialize the invoice project.
    /// </param>
    /// <remarks>
    ///    If the set up to prompt the user in project parameters, it asks whether to transfer the information.
    /// </remarks>
    public void transferCustAccount(CustAccount _custAccount)
    {
        if (_custAccount)
        {
            if (ProjParameters::find().PromptTransfer)
            {
                if (Box::yesNo("@SYS418" + '\n\n' + CustTable::promptAddress(_custAccount), DialogButton::Yes) == DialogButton::Yes)
                {
                    this.initFromCustTable(CustTable::find(_custAccount, false));
                }
            }
            else
            {
                this.initFromCustTable(CustTable::find(_custAccount, false));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = true;       

        // Trx exist with this funding source - don't delete
        if (this.existsPostedTrx())
        {
            ret =  checkFailed("@SYS136417");
        }

        if (this.existsUnPostedTrx())
        {
            ret = checkFailed("@Proj:PendingTransactionExistsWithFundingSource");
        }

        // Limits exist with this funding source
        if (ret && this.existsOnFundingLimit())
        {
            ret =  checkFailed("@SYS136419");
        }

        if (ret && this.existsOnFundingRule())
        {
            ret =  checkFailed("@SYS136418");
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validate a field for the current <c>ProjFundingsource</c> record.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///     The ID of the field to validate.
    /// </param>
    /// <returns>
    ///     true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean retValue;

        retValue = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(ProjFundingSource, ContractId) :
                retValue = this.checkContractId();
                break;

            case fieldNum(ProjFundingSource, FundingType) :
                retValue = this.checkFundingType();
                break;

            case fieldNum(ProjFundingSource, FundingSourceId) :
                retValue = this.checkFundingSourceId();
                break;

            case fieldNum(ProjFundingSource, Party) :
                retValue = this.checkParty();

            case fieldNum(ProjFundingSource, CustAccount) :
                if (this.FundingType == ProjFundingType::Customer)
                {
                    retValue = this.checkCustomerAccount();
                }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = true;

        ret = ret && this.checkFundingSourceId();

        ret = ret && this.checkContractId();

        if (this.FundingType == ProjFundingType::Customer)
        {
            ret = ret && this.checkCustomerAccount();
            ret = ret && this.checkParty();
        }

        if (ret && !ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled() && this.existMultipleFundingSourcesOnContract())
        {
            ret = checkFailed("@Proj:ProjItemRequirementMultipleFundingSourcesWarning");
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canIncludeForSpentCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles funding types that can or are not included in calculating the total spent amount.
    /// </summary>
    /// <returns>
    ///     true if the funding source is valid; otherwise, false.
    /// </returns>
    public boolean canIncludeForSpentCalculation()
    {
        return this.FundingType != ProjFundingType::OnHoldFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMultipleFundingSourcesOnContract</Name>
				<Source><![CDATA[
    protected boolean existMultipleFundingSourcesOnContract()
    {
        SalesTable salesTable;
        ProjTable projTable;
        ProjFundingSource projectFundingSource;

        // Don't allow creation of multiple funding sources for sales order of type item requirement.
        select firstonly RecId from salesTable
                where salesTable.SalesType == SalesType::ItemReq
                exists join projTable
                    where projTable.ProjInvoiceProjId == this.ContractId
                         && projTable.ProjId == salesTable.ProjId
                exists join projectFundingSource
                    where projectFundingSource.ContractId == this.ContractId
                        && projectFundingSource.RecId != this.RecId;

        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a funding source for the given project contract and customer if there is not any already.
    /// </summary>
    /// <param name="_contractId">
    ///     The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_custAccount">
    ///     The customer account of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="createDefaultFundingRule">
    ///     Create the default funding rule for the contract.
    /// </param>
    /// <returns>
    ///     The <c>RecID</c> of the newly created funding source if it is created; otherwise the <c>RecID</c> of the existing record found.
    /// </returns>
    public static RecId createFundingSource(ProjInvoiceProjId _contractId, CustAccount _custAccount, NoYes createDefaultFundingRule = NoYes::Yes)
    {
        ProjFundingSource           projFundingSourceLocal;
        
        if (_contractId && _custAccount)
        {
            projFundingSourceLocal = ProjFundingSource::findContractFundingSource(_contractId, _custAccount);
            if (!projFundingSourceLocal)
            {
                ttsbegin;
                projFundingSourceLocal.initValue();
                projFundingSourceLocal.ContractId = _contractId;
                projFundingSourceLocal.CustAccount = _custAccount;
                projFundingSourceLocal.initFromCustAccount();
                if (projFundingSourceLocal.validateWrite())
                {
                    projFundingSourceLocal.insert();

                    if ((createDefaultFundingRule == NoYes::Yes)  && (ProjFundingRule::numberOfRulesForContract(_contractId) == 0))
                    {
                        ProjFundingRule::createDefaultFundingRule(_contractId, projFundingSourceLocal.RecId);
                    }
                }
                ttscommit;
            }
        }

        return projFundingSourceLocal.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjFundingSource</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        if (_recId)
        {
            return (select projFundingSource where projFundingSource.RecId == _recId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existContractFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjFundingSource</c> table exists.
    /// </summary>
    /// <param name="_contractId">
    /// The contract ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_fundingSourceId">
    /// The funding source ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existContractFundingSource(ProjInvoiceProjId _contractId, ProjFundingSourceId _fundingSourceId)
    {
        if (_contractId && _fundingSourceId)
        {
            return (select firstonly projFundingSource where projFundingSource.ContractId == _contractId && projFundingSource.FundingSourceId == _fundingSourceId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existExternalContractFundingSource</Name>
				<Source><![CDATA[
    public static boolean existExternalContractFundingSource(ProjInvoiceProjId _contractId, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjFundingSource projFundingSourceLoc = ProjFundingSource::find(_projFundingSourceRefId);
        return ProjFundingSource::existContractFundingSource(_contractId, projFundingSourceLoc.FundingSourceId) && ProjFundingSource::isExternalFunding(_projFundingSourceRefId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjFundingSource</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjFundingSource</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjFundingSource find(RecId _recId, boolean _forUpdate = false)
    {
        ProjFundingSource   projFundingSource = null;

        projFundingSource.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select projFundingSource where projFundingSource.RecId == _recId;
        }

        return projFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContractFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjFundingSource</c> table.
    /// </summary>
    /// <param name="_contractId">
    /// The contract ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_fundingSourceId">
    /// The funding source ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjFundingSource</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjFundingSource findContractFundingSource(ProjInvoiceProjId _contractId, ProjFundingSourceId _fundingSourceId, boolean _forUpdate = false)
    {
        ProjFundingSource   projFundingSource = null;

        projFundingSource.selectForUpdate(_forUpdate);

        if (_contractId && _fundingSourceId)
        {
            select projFundingSource where projFundingSource.ContractId == _contractId && projFundingSource.FundingSourceId == _fundingSourceId;
        }

        return projFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustAccount</Name>
				<Source><![CDATA[
    public static ProjFundingSource findCustAccount(ProjInvoiceProjId _contractId, boolean _forUpdate = false)
    {
        ProjFundingSource   projFundingSource = null;

        projFundingSource.selectForUpdate(_forUpdate);

        if (_contractId)
        {
            select firstonly projFundingSource
                where projFundingSource.ContractId == _contractId &&
                      projFundingSource.FundingType == ProjFundingType::Customer &&
                      projFundingSource.CustAccount != '';
        }

        return projFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByContractAndCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjFundingSource</c> table.
    /// </summary>
    /// <param name="_contractId">
    /// The contract ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>ProjFundingSource</c> table; otherwise, an empty record.
    /// </returns>
    public static ProjFundingSource findByContractAndCustomer(ProjInvoiceProjId _contractId, CustAccount _custAccount, boolean _forUpdate = false)
    {
        ProjFundingSource   projFundingSource = null;

        projFundingSource.selectForUpdate(_forUpdate);

        if (_contractId && _custAccount)
        {
            select firstonly projFundingSource
                where projFundingSource.ContractId == _contractId &&
                      projFundingSource.FundingType == ProjFundingType::Customer &&
                      projFundingSource.CustAccount == _custAccount;
        }

        return projFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first funding source that is associated with the contract.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    /// The contract ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    /// The first funding source record ID that is associated with the contract.
    /// </returns>
    public static ProjFundingSourceRefId fundingSourceForSalesOrder(ProjInvoiceProjId _projInvoiceProjId)
    {
        ProjFundingSource   projFundingSource;

        select firstonly FundingSourceId from projFundingSource
                where projFundingSource.ContractId == _projInvoiceProjId;

        return projFundingSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the funding source that is associated with the contract based on the <c>SalesTable</c>
    /// funding source or the cust account.
    /// </summary>
    /// <param name="_projInvoiceProjId">
    /// The contract ID of the <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_salesLine">
    /// The current <c>SalesLine</c> record.
    /// </param>
    /// <returns>
    /// The <c>ProjFundingSource</c> record based on the <c>SalesTable</c> funding source or the cust account.
    /// </returns>
    public static ProjFundingSource fundingSourceFromSalesLine(ProjInvoiceProjId _projInvoiceProjId, SalesLine _salesLine)
    {
        ProjFundingSource   projFundingSource;

        if (_salesLine.salesTable().FundingSource)
        {
            select * from projFundingSource
                where projFundingSource.ContractId ==_projInvoiceProjId &&
                    projFundingSource.RecId == _salesLine.salesTable().FundingSource;
        }
        else
        {
            select * from projFundingSource
                where projFundingSource.ContractId ==_projInvoiceProjId &&
                    projFundingSource.CustAccount == _salesLine.CustAccount;
        }

        return projFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerDefaultFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default funding sources by contract and customer.
    /// </summary>
    /// <param name="_contractId">
    ///  The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_custAccount">
    ///  The customer ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    ///  The <c>RecID</c> of the default funding source.
    /// </returns>
    public static RefRecId getCustomerDefaultFundingSource(ProjInvoiceProjId _contractId, CustAccount _custAccount)
    {
        RefRecId            projFundingSourceRefRecId;
        List                projFundingSourceList = ProjFundingSource::getFundingSourcesByCustomer(_contractId, _custAccount);
        ListEnumerator      projFundingSourceListEnumerator;

        if (projFundingSourceList.elements() == 1)
        {
            projFundingSourceListEnumerator =   projFundingSourceList.getEnumerator();
            projFundingSourceListEnumerator.moveNext();
            projFundingSourceRefRecId  =   projFundingSourceListEnumerator.current();
        }

        return projFundingSourceRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the funding sources that are associated with the project contract.
    /// </summary>
    /// <param name="_projTrans">
    /// The <c>projTrans</c> object that will be used by this transaction.
    /// </param>
    /// <returns>
    /// A list of funding sources that are associated to the project contract and are used in any funding
    /// rule.
    /// </returns>
    public static List getFundingSources(ProjTrans _projTrans)
    {
        ProjTable projTable = ProjTable::find(_projTrans.projId());

        List projFundingSourceList = ProjFundingSource::getFundingSourcesByContract(projTable.ProjInvoiceProjId);

        return  projFundingSourceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingSourcesByContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of the funding sources that are associated with the project contract.
    /// </summary>
    /// <param name="_contractId">
    /// The project contract ID.
    /// </param>
    /// <returns>
    /// A list of funding sources that are associated to the project contract and are used in any funding rule.
    /// </returns>
    public static List getFundingSourcesByContract(ProjInvoiceProjId _contractId)
    {
        ProjFundingSource projFundingSource;
        ProjFundingRule projFundingRule;
        ProjFundingRuleAllocation projFundingRuleAllocation;
        List projFundingSourceList = new List(Types::Int64);

        while select RecId
            from projFundingSource
                group by projFundingSource.RecId
                where projFundingSource.ContractId == _contractId
            join RecId, ContractId
                from projFundingRule
                    where projFundingRule.ContractId == projFundingSource.ContractId
            join FundingRule, FundingSource
                from projFundingRuleAllocation
                    where projFundingRuleAllocation.FundingRule == projFundingRule.RecId
        {
            projFundingSourceList.addEnd(projFundingSource.RecId);
        }

        return  projFundingSourceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingSourcesByCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the funding sources by contract, customer and grant.
    /// </summary>
    /// <param name="_contractId">
    /// The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// The account number of <c>CustTable</c> record.
    /// </param>
    /// <returns>
    /// A List of funding sources associated to the project contract and customer; and those associated
    /// with the project grant.
    /// </returns>
    public static List getFundingSourcesByCustomer(ProjInvoiceProjId _contractId, CustAccount _custAccount)
    {
        ProjFundingSource       projFundingSource;
        List                    projFundingSourceList = new List(Types::Int64);
        Query                   query;
        QueryBuildDataSource    qbdsProjFundingSource;
        QueryBuildDataSource    qbdsProjFundingSourceByGrant;
        QueryBuildDataSource    qbdsProjGrant;
        QueryBuildDataSource    qbdsCustTable;
        QueryRun                queryRun;

        if (_contractId && _custAccount)
        {
            query = new Query();
            query.queryType(QueryType::Union);

            qbdsProjFundingSource = query.addDataSource(tableNum(ProjFundingSource));
            qbdsCustTable = qbdsProjFundingSource.addDataSource(tableNum(CustTable));
            qbdsCustTable.joinMode(JoinMode::ExistsJoin);
            qbdsCustTable.addLink(fieldNum(ProjFundingSource, Party),
                                                    fieldNum(CustTable, Party));
            qbdsProjFundingSource.unionType(UnionType::Union);
            qbdsProjFundingSource.fields().dynamic(false);  //This will enable to add the fields needed; if dynamics is yes all the fields will be automatically added
            qbdsProjFundingSource.fields().clearFieldList();
            qbdsProjFundingSource.fields().addField(fieldNum(ProjFundingSource, RecId));
            qbdsProjFundingSource.addRange(fieldNum(ProjFundingSource, ContractId)).value(_contractId);
            qbdsCustTable.addRange(fieldNum(CustTable, AccountNum)).value(_custAccount);
            qbdsProjFundingSource.addRange(fieldNum(ProjFundingSource, FundingType)).value(enum2str(ProjFundingType::Customer));

            qbdsProjFundingSourceByGrant = query.addDataSource(tableNum(ProjFundingSource));
            qbdsProjFundingSourceByGrant.unionType(UnionType::Union);
            qbdsProjFundingSourceByGrant.fields().dynamic(false);   //This will enable to add the fields needed; if dynamic is yes all the fields will be automatically added
            qbdsProjFundingSourceByGrant.fields().clearFieldList();
            qbdsProjFundingSourceByGrant.fields().addField(fieldNum(ProjFundingSource, RecId));
            qbdsProjGrant = qbdsProjFundingSourceByGrant.addDataSource(tableNum(ProjGrant));
            qbdsProjGrant.joinMode(JoinMode::ExistsJoin);
            qbdsProjGrant.fetchMode(QueryFetchMode::One2One);
            qbdsProjGrant.addLink(fieldNum(ProjFundingSource, ProjGrant),
                                                        fieldNum(ProjGrant, RecId));
            qbdsProjFundingSourceByGrant.addRange(fieldNum(ProjFundingSource, ContractId)).value(_contractId);
            qbdsProjFundingSourceByGrant.addRange(fieldNum(ProjFundingSource, FundingType)).value(enum2str(ProjFundingType::Grant));
            qbdsProjGrant.addRange(fieldNum(ProjGrant, CustAccount)).value(_custAccount);

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                projFundingSource = queryRun.get(tableNum(ProjFundingSource));
                projFundingSourceList.addEnd( projFundingSource.RecId );
            }
        }

        return projFundingSourceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustomerDefaultFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the funding source exists for the given contract and customer.
    /// </summary>
    /// <param name="_contractId">
    /// The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// The customer ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    /// true if funding source exist for the given contract and customer; otherwise, false.
    /// </returns>
    public static boolean hasCustomerDefaultFundingSource(ProjInvoiceProjId _contractId, CustAccount _custAccount)
    {
        return ProjFundingSource::getFundingSourcesByCustomer(_contractId, _custAccount).elements() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExternalFunding</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>ProjFundingSource</c> table is an external funding source.
    /// </summary>
    /// <param name="projFundingSourceRefId">
    ///     The record ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    ///     true if the funding source type is customer or grant; otherwise, false.
    /// </returns>
    public static boolean isExternalFunding(ProjFundingSourceRefId projFundingSourceRefId)
    {
        ProjFundingSource   projFundingSource;
        boolean             retValue = false;

        // Do not generate a DB call for empty RefRecID
        if (projFundingSourceRefId != 0)
        {
            select FundingType, RecId from projFundingSource where projFundingSource.RecId == projFundingSourceRefId;

            if (projFundingSource)
            {
                // Grant and Customer are external funding source.  Organization and OnHold are internal
                if ((projFundingSource.FundingType == ProjFundingType::Customer) || (projFundingSource.FundingType == ProjFundingType::Grant))
                {
                    retValue = true;
                }
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFundingSourceByContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the lookup for a qualifying project funding source that is filtered by contract.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The calling reference control.
    /// </param>
    /// <param name="_contractID">
    /// The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// The account number of <c>CustTable</c> record.
    /// </param>
    /// <returns>
    /// The List of funding sources associated to the project contract and customer;
    /// </returns>
    public static ProjFundingSource lookupFundingSourceByContract(FormReferenceControl _formReferenceControl, ProjInvoiceProjId _contractID, CustAccount _custAccount = '')
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;
        QueryBuildDataSource        queryBuildDataSource;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(ProjFundingSource), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingSourceId));
        sysReferenceTableLookup.addLookupMethod(tableMethodStr(ProjFundingSource, name));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingType));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, CustAccount));

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(ProjFundingSource));
        queryBuildDataSource.addRange(fieldNum(ProjFundingSource, ContractId)).value(queryValue(_contractID));
        queryBuildDataSource.addRange(fieldNum(ProjFundingSource, FundingType)).value(SysQuery::valueNot(ProjFundingType::OnHoldFundingSource));

        if (_custAccount)
        {
            queryBuildDataSource.addRange(fieldNum(ProjFundingSource, CustAccount)).value(queryValue(_custAccount));
            queryBuildDataSource.addRange(fieldNum(ProjFundingSource, FundingType)).value(queryValue(ProjFundingType::Customer));
        }

        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFundingSourceByContractAndCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the lookup for the qualifying project funding source, filtered by contract and customer.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The calling reference control.
    /// </param>
    /// <param name="_contractID">
    /// The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_custAccount">
    /// The account number of <c>CustTable</c> record.
    /// </param>
    /// <returns>
    /// The list of funding sources that are associated to the project contract and customer and those
    /// associated with the project grant.
    /// </returns>
    public static ProjFundingSource lookupFundingSourceByContractAndCustomer(FormReferenceControl _formReferenceControl, ProjInvoiceProjId _contractID, CustAccount _custAccount)
    {
        SysReferenceTableLookup     sysReferenceTableLookup;
        Query                       query;
        QueryBuildDataSource        queryBuildDataSource;
        QueryBuildDataSource        qbdsProjFundingSourceByGrant;
        QueryBuildDataSource        qbdsProjGrant;
        QueryBuildDataSource        qbdsCustTable;

        sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(ProjFundingSource), _formReferenceControl);
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingSourceId));
        sysReferenceTableLookup.addLookupMethod(tableMethodStr(ProjFundingSource, name));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingType));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, CustAccount));

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(ProjFundingSource));
        qbdsCustTable = queryBuildDataSource.addDataSource(tableNum(CustTable));
        qbdsCustTable.joinMode(JoinMode::ExistsJoin);
        qbdsCustTable.addLink(fieldNum(ProjFundingSource, Party),
                                                    fieldNum(CustTable, Party));
        queryBuildDataSource.addRange(fieldNum(ProjFundingSource, ContractId)).value(queryValue(_contractID));
        queryBuildDataSource.addRange(fieldNum(ProjFundingSource, FundingType)).value(queryValue(ProjFundingType::Customer));
        qbdsCustTable.addRange(fieldNum(CustTable, AccountNum)).value(_custAccount);

        query.queryType(QueryType::Union);

        qbdsProjFundingSourceByGrant = query.addDataSource(tableNum(ProjFundingSource));
        qbdsProjFundingSourceByGrant.unionType(UnionType::Union);
        qbdsProjGrant = qbdsProjFundingSourceByGrant.addDataSource(tableNum(ProjGrant));
        qbdsProjGrant.joinMode(JoinMode::ExistsJoin);
        qbdsProjGrant.fetchMode(QueryFetchMode::One2One);
        qbdsProjGrant.addLink(fieldNum(ProjFundingSource, ProjGrant),
                                                    fieldNum(ProjGrant, RecId));
        qbdsProjFundingSourceByGrant.addRange(fieldNum(ProjFundingSource, ContractId)).value(_contractID);
        qbdsProjFundingSourceByGrant.addRange(fieldNum(ProjFundingSource, FundingType)).value(enum2str(ProjFundingType::Grant));
        qbdsProjGrant.addRange(fieldNum(ProjGrant, CustAccount)).value(_custAccount);

        sysReferenceTableLookup.parmQuery(query);

        return sysReferenceTableLookup.performFormLookup() as ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFundingSourceByProjId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the lookup for a qualifying project funding source, filtered by the project ID.
    /// </summary>
    /// <param name="_caller">
    /// The calling string control.
    /// </param>
    /// <param name="_projId">
    /// The project ID of the <c>ProjFundingSource</c> record.
    /// </param>
    public static void lookupFundingSourceByProjId(FormControl _caller, ProjId _projId, boolean externalOnly = false)
    {
        Query                       query;
        ProjFundingSource           projFundingSource;
        QueryBuildDataSource        queryBuildDataSource;
        ProjInvoiceProjId           contractID = ProjTable::find(_projId).ProjInvoiceProjId;
        SysTableLookup              sysTableLookup = SysTableLookup::newParameters(projFundingSource.TableId, _caller);

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(ProjFundingSource));
        queryBuildDataSource.addSelectionField(fieldNum(ProjFundingSource, Party));
        queryBuildDataSource.addSelectionField(fieldNum(ProjFundingSource, ProjGrant));
        queryBuildDataSource.addRange(fieldNum(ProjFundingSource, ContractId)).value(queryValue(contractID));

        QueryBuildRange range = queryBuildDataSource.addRange(fieldNum(ProjFundingSource, FundingType));

        if (externalOnly)
        {
            range.value(strfmt('((%1 != %2) && (%1 != %3))',fieldStr(ProjFundingSource, FundingType), any2Int(ProjFundingType::OnHoldFundingSource), any2Int(ProjFundingType::Organization)));
        }
        else
        {
            range.value(SysQuery::valueNot(ProjFundingType::OnHoldFundingSource));
        }

        sysTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingSourceId));
        sysTableLookup.addLookupMethod(tableMethodStr(ProjFundingSource, name));
        sysTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    internal display CustName fundingSourceName()
    {
        ProjFundingSource projFundingSource;

        select firstonly Party from projFundingSource
			where projFundingSource.ContractId == this.contractId &&
				(projFundingSource.FundingType == ProjFundingType::Customer || projFundingSource.FundingType == ProjFundingType::Grant) &&
					projFundingSource.FundingSourceId == this.FundingSourceId;

        return CustTable::findByPartyRecId(projFundingSource.Party).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceCustomer</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display DirPartyName fundingSourceCustomer()
    {
        ProjFundingSource projFundingSource;

        select firstonly Party, ProjGrant, FundingType from projFundingSource
            where projFundingSource.ContractId == this.contractId &&
                (projFundingSource.FundingType == ProjFundingType::Customer || projFundingSource.FundingType == ProjFundingType::Grant) &&
                    projFundingSource.FundingSourceId == this.FundingSourceId;

        DirPartyName retValue = '';
        switch (projFundingSource.FundingType)
        {
            case ProjFundingType::Grant :
                retValue = ProjGrant::find(projFundingSource.ProjGrant).GrantId;
                break;

            case ProjFundingType::Customer :
                retValue = CustTable::findByPartyRecId(projFundingSource.Party).AccountNum;
                break;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupExternalFundingSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query for the <c>ProjFundingSourceLookup</c> that only returns customer accounts tied to a contract.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The calling reference control.
    /// </param>
    /// <param name="_projInvoiceProjId">
    ///    The string on which to perform the lookup.
    /// </param>
    /// <returns>
    ///    A query for a project that is linked with the specified funding source id.
    /// </returns>
    internal static ProjFundingSource lookupExternalFundingSources(FormReferenceControl _formReferenceControl, ProjInvoiceProjId _projInvoiceProjId)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(ProjFundingSource));
        QueryBuildRange contractIdQueryBuildRange = queryBuildDataSource.addRange(fieldNum(ProjFundingSource, ContractId));
        contractIdQueryBuildRange.value(SysQuery::value(_projInvoiceProjId));
        QueryBuildRange fundingTypeQueryBuildRange = queryBuildDataSource.addRange(fieldNum(ProjFundingSource, FundingType));
        fundingTypeQueryBuildRange.value(strFmt('((%1.%2 == %3) || (%1.%2 == %4))',
									queryBuildDataSource.name(),
									fieldStr(ProjFundingSource,FundingType),
									any2Int(ProjFundingType::Customer),
									any2Int(ProjFundingType::Grant)));

        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tableNum(ProjFundingSource), _formReferenceControl);
        sysReferenceTableLookup.addSelectionField(fieldNum(ProjFundingSource, RecId));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingSourceId));
        sysReferenceTableLookup.addLookupMethod(tableMethodStr(ProjFundingSource, fundingSourceName));
        sysReferenceTableLookup.addLookupfield(fieldNum(ProjFundingSource, FundingType));

        sysReferenceTableLookup.parmQuery(query);
        return sysReferenceTableLookup.performFormLookup() as ProjFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a lookup of projects for the string control that is passed in as a parameter.
    /// </summary>
    /// <param name="ctrl">
    ///    The string control on which to perform the lookup.
    /// </param>
    /// <remarks>
    ///    The list of projects returned are WIP projects that are associated with the WIP project ID that is passed in as a parameter. The list displays the project ID, name and type fields.
    /// </remarks>
    public static void lookupOrganization(FormStringControl ctrl)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(OMOperatingUnit), ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(OMOperatingUnit));
        queryBuildDataSource.addRange(fieldNum( OMOperatingUnit, omOperatingUnitType)).value(SysQuery::value(OMOperatingUnitType::OMBusinessUnit));

        sysTableLookup.addLookupfield(fieldNum(OMOperatingUnit, Name));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfFundingSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of funding source assigned to a contract.
    /// </summary>
    /// <param name="_contractId">
    /// The contract being processed.
    /// </param>
    /// <returns>
    /// The number of funding sources defined on the contract
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public static int64 numberOfFundingSources(ProjInvoiceProjId _contractId)
    {
        return (select count(RecId) from projFundingSource where projFundingSource.ContractId == _contractId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingSourceIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first funding source assigned to a contract.
    /// </summary>
    /// <param name="_contractId">
    /// The contract being processed.
    /// </param>
    /// <returns>
    /// The first funding sources defined on the contract
    /// </returns>
    public static List getFundingSourceIds(ProjInvoiceProjId _contractId)
    {
        List                fundingSourceIdList = new List(Types::String);
        ProjFundingSource   projFundingSource;

        while select FundingSourceId
                from projFundingSource
                    where projFundingSource.ContractId == _contractId
                        && (ProjFundingSource.FundingType == ProjFundingType::Customer || ProjFundingSource.FundingType == ProjFundingType::Grant)
        {
            fundingSourceIdList.addEnd(projFundingSource.FundingSourceId);
        }

        return fundingSourceIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfFundingSourcesByFundingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of funding sources that are assigned to a contract with the specified funding type.
    /// </summary>
    /// <param name="_contractId">
    /// The ID of the contract being processed.
    /// </param>
    /// <param name="_fundingType">
    /// The type of funding for which to check.
    /// </param>
    /// <returns>
    /// The number of funding sources that are assigned to a contract.
    /// </returns>
    public static int64 numberOfFundingSourcesByFundingType(ProjInvoiceProjId _contractId, ProjFundingType _fundingType = ProjFundingType::Customer)
    {
        ProjFundingSource   projFundingSource;
        int64               numberOfFundingSources = 0;

        if (_contractId)
        {
            select count(RecId) from projFundingSource
                where projFundingSource.ContractId == _contractId &&
                    projFundingSource.FundingType == _fundingType;

            numberOfFundingSources =  projFundingSource.RecId;
        }

        return numberOfFundingSources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFundingSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method is used to manipulate the projFundingSourceId if already exists.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///     The FundingSourceId of <c>ProjFundingSource</c> record.
    /// </param>
    /// <param name="_contractId">
    ///     The contract ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    ///     return <c>ProjFundingSourceId</c> value.
    /// </returns>
    /// <remarks>
    ///     Return manupulated <c>projFundingSourceId</c> if already exist Otherwise Original <c>projFundingSourceId</c>.
    /// </remarks>
    public static ProjFundingSourceId processFundingSourceId(ProjFundingSourceId _fundingSourceId , ProjInvoiceProjId _contractId)
    {
        ProjFundingSource    projFundingSourceLocal;
        ProjFundingSourceId  fundingSourceId = _fundingSourceId;

        if (strLen(fundingSourceId) >= 19)
        {
            //
            // Use string trim to remove any trailing blanks.
            // Blanks at the end of the string will cause the like statement to fail.
            //
            fundingSourceId = strRTrim(subStr(fundingSourceId, 1, 18));
        }

        if (_contractId)
        {
            select count(RecId) from projFundingSourceLocal
                where projFundingSourceLocal.ContractId == _contractId
                    && projFundingSourceLocal.FundingSourceId like fundingSourceId + '*';

            if (projFundingSourceLocal.RecId > 0)
            {
                fundingSourceId = fundingSourceId + num2Str0(int642int(projFundingSourceLocal.RecId), 2);
            }
        }

        return fundingSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveExternalFundingSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the lookup of a contract.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form being used.
    /// </param>
    /// <param name="_contractId">
    /// The contract ID that is being processed.
    /// </param>
    /// <returns>
    /// The reference record for the contract of funding type customer or grant.
    /// </returns>
    internal static ProjFundingSource resolveExternalFundingSources(FormReferenceControl _formReferenceControl, ProjInvoiceProjId _contractId)
    {
        ProjFundingSourceId projFundingSourceId = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(ProjFundingSource, FundingSourceId), tableStr(ProjFundingSource))).value();

        ProjFundingSource selectedRecord;
        select selectedRecord where selectedRecord.FundingSourceId == projFundingSourceId &&
            selectedRecord.ContractId == _contractId &&
                (selectedRecord.FundingType ==  ProjFundingType::Customer || selectedRecord.FundingType ==  ProjFundingType::Grant);

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceByContractFSName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the lookup of a contract.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The control on the form being used.
    /// </param>
    /// <param name="_contractId">
    /// The contract ID that is being processed.
    /// </param>
    /// <returns>
    /// The reference record for the contract.
    /// </returns>
    public static ProjFundingSource resolveReferenceByContractFSName(FormReferenceControl _formReferenceControl, ProjInvoiceProjId _contractId)
    {
        ProjFundingSource   selectedRecord;
        ProjFundingSourceId projFundingSourceId;

        projFundingSourceId = _formReferenceControl.filterValue(AbsoluteFieldBinding::construct(fieldStr(ProjFundingSource, FundingSourceId), tableStr(ProjFundingSource))).value();

        select selectedRecord where selectedRecord.FundingSourceId == projFundingSourceId && selectedRecord.ContractId == _contractId;

        if (selectedRecord.RecId == 0)
        {
            return null;
        }

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        ProjParameters projParameters = ProjParameters::find();

        switch (projParameters.DefaultInvoiceLayout)
        {
            case ProjDefaultInvoiceLayout::Summary :
                this.PSAInvoiceFormats = PSAInvoiceFormats::SummaryInvoice;
                break;

            case ProjDefaultInvoiceLayout::SummaryByCategory :
                this.PSAInvoiceFormats = PSAInvoiceFormats::SummaryByCategory;
                break;

            default:
                this.PSAInvoiceFormats = PSAInvoiceFormats::DetailInvoice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves values for Norwegian E-Invoice.
    /// </summary>
    /// <param name="_projId">
    /// Id of project.
    /// </param>
    /// <returns>
    /// <c>ProjFundingSourceEInvoice_NO</c> record with values related to E-Invoice for Norway.
    /// </returns>
    /// <remarks>
    /// Values taken from related <c>ProjFundingSourceEInvoice_NO</c> by funding source and project id, but then if they are empty defaulted from funding source.
    /// </remarks>
    public ProjFundingSourceEInvoice_NO getEInvoiceData(ProjId _projId)
    {
        ProjFundingSourceEInvoice_NO projFundindSourceEInvoice = ProjFundingSourceEInvoice_NO::findFundingSourceProjId(this.RecId, _projId);
        projFundindSourceEInvoice.initFromProjFundingSource(this);

        return projFundindSourceEInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record with customer data 
    /// based on the value from the <c>CustAccount</c> field.
    /// </summary>
    public void initFromCustAccount()
    {
        if (this.ContractId && this.CustAccount)
        {
            CustTable custTable = CustTable::find(this.CustAccount);

            this.FundingType = ProjFundingType::Customer;
            this.FundingSourceId = ProjFundingSource::processFundingSourceId(custTable.name(), this.ContractId);
            this.Party = custTable.Party;
            this.transferCustAccount(custTable.AccountNum);
            if (CustTable::isCustDKPublic(custTable.AccountNum))
            {
                this.ContactPersonId = custTable.ContactPersonId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomer_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account of the funding source
    /// </summary>
    /// <returns>
    /// The customer account
    /// </returns>
    // <GIN>
    public CustTable getCustomer_IN()
    {
        CustTable ret;

        switch (this.FundingType)
        {
            case ProjFundingType::Customer:
                ret = CustTable::find(this.CustAccount);
                break;

            case ProjFundingType::Grant:
                ret = CustTable::find(ProjGrant::find(this.ProjGrant).CustAccount);
                break;

            default:
                ret = null;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeDelegates_getTablesToAddCopiedValuesTo</Name>
				<Source><![CDATA[
    // </GIN>

    /// <summary>
    /// Gets a list of tables and fields to update when copying the values to default dimensions on existing values.
    /// </summary>
    /// <param name = "_tableSet">A <c>Set</c> of <c>DimensionCopyValuesDataContract</c> values.</param>
    [SubscribesTo(classStr(DimensionAttributeDelegates), delegateStr(DimensionAttributeDelegates, getTablesToAddCopiedValuesTo))]
    public static void DimensionAttributeDelegates_getTablesToAddCopiedValuesTo(Set _tableSet)
    {
        DimensionCopyValueDataContract contract = DimensionCopyValueDataContract::construct(tableNum(ProjFundingSource), fieldNum(ProjFundingSource, DefaultDimension));
        contract.addKeyFieldDimensionPair(tableNum(ProjInvoiceTable), fieldNum(ProjFundingSource, ContractId));
        _tableSet.add(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the input project funding type is a valid customer or grant type.
    /// </summary>
    /// <returns>
    /// This method will determine whether the input project funding type is a valid customer or grant type.
    /// </returns>
    public static boolean isInvoiceable(ProjFundingSource _projFundingSource)
    {
        boolean returnValue = _projFundingSource.RecId != 0;

		if (returnValue)
        { 
            returnValue = !((_projFundingSource.FundingType == ProjFundingType::Organization) ||
                (_projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource));
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the funding source type based on the record ID of <c>ProjFundingSource</c> record.
    /// </summary>
    /// <param name="projFundingSourceRefId">
    ///     The record ID of <c>ProjFundingSource</c> record.
    /// </param>
    /// <returns>
    ///    The funding source type otherwise throws error if <c>ProjFundingSource</c> record does not exist.
    /// </returns>
    public static ProjFundingType getFundingType(ProjFundingSourceRefId _projFundingSourceRefId)
    {
        if (_projFundingSourceRefId == 0)
        {
            throw error("@SYS133301");
        }

        ProjFundingSource projFundingSource;
        select firstonly FundingType, RecId from projFundingSource where projFundingSource.RecId == _projFundingSourceRefId;

        if (projFundingSource.RecId == 0)
        {
            throw error("@SYS133301");
        }

        return projFundingSource.FundingType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS133007</DeveloperDocumentation>
	<FormRef>projfundingSourceDetail</FormRef>
	<Label>@SYS133006</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ContractId</TitleField1>
	<TitleField2>FundingSourceId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ContractFundingSourceIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>ContractFundingSourceIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ProjPosting</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjPosting</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjTransPosting</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjTransPosting</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ProjFundingSourceEInvoice_NO</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSourceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contact</Name>
			<Label>@SYS60248</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editContactPersonName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@sys100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceLineSpec</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FundingSourceName</Name>
			<Label>@SYS128116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingSourceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GiroMoneyTransferSlip</Name>
			<Label>@SYS2723</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS115561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingSourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editProjFunder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundingSourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAddress</Name>
			<Label>@SYS58074</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payments</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentTermsId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentscheduleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscountId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndividualBuffer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA2704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSACustRetentionTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAInvoiceFormats</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax_PL</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriodPaymentCode_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS138628</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPurchaseOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustRef</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EInvoiceLineSpec</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceLineSpecific</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundingSourceId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjFundingSourceId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FundingType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjFundingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubProjId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IndividualBuffer</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@SYS101816</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InvoiceLocation</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyName</ExtendedDataType>
			<Label>@SYS312929</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentscheduleId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentTermsId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjGrant</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjGrantRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PSACustRetentionTermId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@PSA11205</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAInvoiceFormats</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PSAInvoiceFormats</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriodPaymentCode_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlTaxPeriodPaymentCode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ContractFundingSourceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FundingSourceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PSACustomerRetentionTermTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PSACustRetentionTermId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContractIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ContractCustomerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ContractId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDiscount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscountId</Name>
					<SourceEDT>ProjCashDiscCode</SourceEDT>
					<Field>CashDiscountId</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjFundingSource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DirAddressBookParty</Name>
			<RelatedTable>DirAddressBookPartyAllView</RelatedTable>
			<RelatedTableRole>DirAddressBookPartyAllView</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>ProjFundingSource</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InvoiceLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsLocation_ProjFundingSource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceLocation</Name>
					<Field>InvoiceLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTabe</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Party_FK</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPartyTable_ProjFundingSource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentSchedule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentscheduleId</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentscheduleId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymentTerms</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentTermsId</Name>
					<SourceEDT>PaymTermId</SourceEDT>
					<Field>PaymentTermsId</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PlTaxDueTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlTaxDueTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PlTaxDueTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriodPaymentCode_PL</Name>
					<Field>TaxPeriodPaymentCode_PL</Field>
					<RelatedField>TaxPeriodPaymentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PostingProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjGrant</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjGrant</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjGrant</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjGrant_ProjFundingSource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjGrant</Name>
					<Field>ProjGrant</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjFundingSource</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContractId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ContractId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSACustomerRetentionTermTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PSACustomerRetentionTermTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSACustRetentionTermId</Name>
					<Field>PSACustRetentionTermId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>