<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_Error</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTrans_Error extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a data source for the <c>LedgerJournalTrans_Error</c> table.
    /// </summary>
    /// <param name="_parentDataSource">
    /// The data source for the <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_joinMode">
    /// The join mode for the new data source; optional.
    /// </param>
    /// <returns>
    /// The data source added for the <c>LedgerJournalTrans_Error</c> table.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The parent data source is null or is not for the <c>LedgerJournalTrans</c>
    /// table.
    /// </exception>
    public static QueryBuildDataSource addDataSource(QueryBuildDataSource _parentDataSource, JoinMode _joinMode = JoinMode::ExistsJoin)
    {
        QueryBuildDataSource ds;

        if (_parentDataSource == null || _parentDataSource.table() != tableNum(LedgerJournalTrans))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ds = _parentDataSource.addDataSource(tableNum(LedgerJournalTrans_Error));
        ds.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTrans_Error, LedgerJournalTrans));
        ds.fetchMode(QueryFetchMode::One2One);
        ds.joinMode(_joinMode);

        return ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalErrorLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>LedgerJournalTrans_Error</c> table from the posting messages collection.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    /// The posting messages.
    /// </param>
    public static void createJournalErrorLinks(
        LedgerJournalId _journalNum,
        LedgerPostingMessageLog _ledgerPostingMessageCollection)
    {
        RecordInsertList addErrorList;
        LedgerJournalTrans_Error ledgerJournalTrans_Error;
        LedgerJournalTrans ledgerJournalTrans;
        boolean haveMore;

        LedgerJournalTrans_Error::deleteJournalErrorLinks(_journalNum);

        haveMore = _ledgerPostingMessageCollection.first();

        addErrorList = new RecordInsertList(tableNum(LedgerJournalTrans_Error));

        while (haveMore)
        {
            ledgerJournalTrans_Error.LedgerJournalTrans = _ledgerPostingMessageCollection.parmSourceRefRecId();
            addErrorList.add(ledgerJournalTrans_Error);

            haveMore = _ledgerPostingMessageCollection.next();
        }

        addErrorList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalErrorLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in the <c>LedgerJournalTrans_Error</c> table related to a given journal batch number.
    /// </summary>
    /// <param name = "_journalNum">The journal batch number.</param>
    public static void deleteJournalErrorLinks(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans_Error ledgerJournalTrans_Error;
        LedgerJournalTrans ledgerJournalTrans;

        if (LedgerJournalDeleteTransactionSetBasedFlight::instance().isEnabled())
        {
            LedgerJournalTrans::skipTableMethodsOnDelete(ledgerJournalTrans_Error);
        }

        delete_from ledgerJournalTrans_Error
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTrans_Error.LedgerJournalTrans
                    && ledgerJournalTrans.JournalNum == _journalNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS4004013</DeveloperDocumentation>
	<Label>@SYS65182</Label>
	<TitleField1>LedgerJournalTrans</TitleField1>
	<Modules>AccountingFoundation</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LedgerJournalTransIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerJournalTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTrans</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>