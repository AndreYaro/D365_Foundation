<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCertificate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdCertificate_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// To Set the <c>Name</c> field on the basis of LedgerDimension and Account Type
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initAccountName()
    {
        switch (this.CustVendACType)
        {
            case TaxWithholdACType_IN::Cust:
                this.Name = CustTable::findByLedgerDimension(this.LedgerDimension,false).name();
                break;

            case TaxWithholdACType_IN::Vend:
                this.Name = VendTable::findByLedgerDimension(this.LedgerDimension,false).name();
                break;

            case TaxWithholdACType_IN::Ledger:
                this.Name = MainAccount::findByLedgerDimension(this.LedgerDimension).localizedName();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify a specified field.
    /// </summary>
    /// <param name="_fieldName">
    /// The field Name of the field to modify.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field.
    /// </param>
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldstr(TaxWithholdCertificate_IN, LedgerDimension):
                this.initAccountName();
                break;
            case fieldstr(TaxWithholdCertificate_IN, CustVendACType):
                this.LedgerDimension = 0;
                this.Name            = "";
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated the <c>TaxWithholdCertificate_IN</c> table for the specified Tax Type.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateClosed(TaxWithholdType_IN _taxType)
    {
        TaxWithholdCertificate_IN    taxWithholdCertificate;

        ttsbegin;
        if (this.CertificateNumber)
        {
            update_recordset taxWithholdCertificate
                setting Closed = NoYes::Yes
                where   taxWithholdCertificate.TaxType == _taxType;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();
        if (TaxWithholdCertificateTrans_IN::exist(this.CertificateNumber))
        {
            throw error("@GLS6136");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdCertificate_IN</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_certificateNumber">
    /// Withhold tax certificate number to find the record.
    /// </param>
    /// <returns>
    /// Return true if record exists otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(TaxWithholdCertificateNumber_IN   _certificateNumber)
    {
        return _certificateNumber &&
               (select taxWithholdCertificate_IN
                    where taxWithholdCertificate_IN.CertificateNumber == _certificateNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdCertificate_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdCertificate_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdCertificate_IN find(RefRecId            _recId,
                                                 boolean             _forupdate        = false,
                                                 ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdCertificate_IN taxWithholdCertificate;

        taxWithholdCertificate.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdCertificate.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdCertificate
            where taxWithholdCertificate.RecId == _recId;

        return taxWithholdCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdCertificate_IN</c> table for the specified certificate number, Account Type and Account Number
    /// </summary>
    /// <param name="_certificateNumber">
    /// Reads the TaxWithholdCertificate_IN table for the specified record id.
    /// </param>
    /// <param name="_custVendType">
    /// <c>TaxWithholdACType_IN</c> value.It may be Customer or Vendor type .
    /// </param>
    /// <param name="_dimensionDynamicAccount">
    /// Account value to find TaxWithhold Certificate record.
    /// </param>
    /// <param name="_forUpdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <returns>
    ///  A buffer containing <c>TaxWithholdCertificate_IN</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdCertificate_IN findByCertificateNumber(TaxWithholdCertificateNumber_IN    _certificateNumber,
                                                                    TaxWithholdACType_IN               _custVendType,
                                                                    DimensionDynamicAccount            _dimensionDynamicAccount,
                                                                    boolean                            _forUpdate = false)
    {
        TaxWithholdCertificate_IN    taxWithholdCertificate;

        if (_certificateNumber && _dimensionDynamicAccount && _custVendType)
        {
            taxWithholdCertificate.selectForUpdate(_forUpdate);

            select firstonly taxWithholdCertificate
                where taxWithholdCertificate.CertificateNumber  == _certificateNumber
                   && taxWithholdCertificate.CustVendACType     == _custVendType
                   && taxWithholdCertificate.LedgerDimension    == _dimensionDynamicAccount;
        }
        return taxWithholdCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findtaxWithholdCertificate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdCertificate_IN</c> table for the specified certificate number and Tax Type.
    /// </summary>
    /// <param name="_certificateNumber">
    /// Certificate number used to find the record.
    /// </param>
    /// <param name="_taxType">
    /// Tax type used to find the record.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdCertificate_IN</c> table.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdCertificate_IN findtaxWithholdCertificate_IN(TaxWithholdCertificateNumber_IN   _certificateNumber,
                                                                          TaxWithholdType_IN                _taxType)
    {
        TaxWithholdCertificate_IN    taxWithholdCertificate;

        if (_certificateNumber)
        {
            select firstonly taxWithholdCertificate
                where taxWithholdCertificate.CertificateNumber  == _certificateNumber
                   && taxWithholdCertificate.TaxType            == _taxType
                   && taxWithholdCertificate.Closed             == NoYes::No;
        }
        return taxWithholdCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and shows a lookup form for the <c>TaxWithholdCertificate_IN</c> field.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling form control.
    /// </param>
    /// <param name="_taxType">
    /// The tax type to filter the record in lookup form.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void lookupCertificateNumber(FormStringControl  _ctrl, TaxWithholdType_IN _taxType)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tablenum(TaxWithholdCertificate_IN), _ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        sysTableLookup.addLookupfield(fieldnum(TaxWithholdCertificate_IN, CertificateNumber));
        queryBuildDataSource = query.addDataSource(tablenum(TaxWithholdCertificate_IN));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdCertificate_IN, TaxType)).value(enum2str(_taxType));
        queryBuildDataSource.addRange(fieldnum(TaxWithholdCertificate_IN, Closed)).value(enum2str(NoYes::No));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>withholdTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check TaxType whether it is  TDS or TCS.
    /// </summary>
    /// <param name="_taxType">
    /// TaxType value i.e. TDS or TCS
    /// </param>
    /// <returns>
    /// TaxType value i.e. TDS or TCS
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxWithholdType_IN withholdTaxType(TaxWithholdType_IN    _taxType)
    {
        TaxWithholdType_IN  taxType;
        ;

        switch (_taxType)
        {
            case TaxWithholdType_IN::TCS:
                taxType = TaxWithholdType_IN::TCS;
                break;

            case TaxWithholdType_IN::TDS:
                taxType = TaxWithholdType_IN::TDS;
                break;

            default:
                break;
        }
        return taxType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63802</DeveloperDocumentation>
	<Label>@GLS6140</Label>
	<TitleField1>CertificateNumber</TitleField1>
	<TitleField2>CustVendACType</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>CertificateNoIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendACType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendACType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS40777</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CertificateInformation</Name>
			<Label>@GLS5472</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustVendACType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CertificateAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CertificateNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CertificateAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@GLS6081</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS67267</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustVendACType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdACType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDimension</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DimensionDynamicAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CertificateNoIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CertificateNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendACType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueCombination_TaxWithholdCertificate_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDimension</Name>
					<Field>LedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>