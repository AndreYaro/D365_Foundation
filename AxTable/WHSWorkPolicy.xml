<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkPolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkPolicy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkPolicy</c> record with given name.
    /// </summary>
    /// <param name="_workPolicyName">
    /// Name of the work policy.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkPolicy find(
        WHSWorkPolicyName   _workPolicyName,
        boolean             _forupdate = false)
    {
        WHSWorkPolicy    workPolicy;

        if (_workPolicyName)
        {
            workPolicy.selectForUpdate(_forupdate);

            select firstonly workPolicy
                where workPolicy.Name == _workPolicyName;
        }

        return workPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkPolicy</c> record with given <c>RecId</c>.
    /// </summary>
    /// <param name="_recId">
    /// <c>RecId</c> of the work policy.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkPolicy findByRecId(RecId _recId, boolean _forUpdate = false)
    {
        WHSWorkPolicy workPolicy;
        
        if (_recId)
        {
            workPolicy.selectForUpdate(_forUpdate);
            select firstonly workPolicy 
                where workPolicy.RecId == _recId;
        }

        return workPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPolicyForLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkPolicy</c> record which is associated to a given location
    /// </summary>
    /// <param name="_wmsLocation">
    /// The <c>WMSLocation</c> record to find associated policy for
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkPolicy findPolicyForLocation(WMSLocation _wmsLocation, boolean _forupdate = false)
    {
        WHSWorkPolicy           workPolicy;
        WHSWorkPolicyLocation   workPolicyLocation;

        if (_wmsLocation)
        {
            workPolicy.selectForUpdate(_forupdate);

            select firstonly workPolicy
                exists join workPolicyLocation
                    where workPolicyLocation.WorkPolicy       == workPolicy.RecId
                       && workPolicyLocation.InventLocationId == _wmsLocation.inventLocationId
                       && workPolicyLocation.WMSLocationId    == _wmsLocation.wMSLocationId;
        }

        return workPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines for a given location if it is part of a Work policy
    /// </summary>
    /// <param name="_wmsLocation">
    /// The location
    /// </param>
    /// <returns>
    /// true if the location is part of a Work policy; otherwise false
    /// </returns>
    public static boolean exist(WMSLocation _wmsLocation)
    {
        WHSWorkPolicy           workPolicy;
        WHSWorkPolicyLocation   workPolicyLocation;

        if (_wmsLocation)
        {
            select firstonly workPolicy
                exists join workPolicyLocation
                    where workPolicyLocation.WorkPolicy       == workPolicy.RecId
                       && workPolicyLocation.InventLocationId == _wmsLocation.inventLocationId
                       && workPolicyLocation.WMSLocationId    == _wmsLocation.wMSLocationId;
        }

        return workPolicy.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllProductsAttachedToPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all records in the <c>WHSWorkPolicyProduct</c> table that belongs to this policy.
    /// </summary>
    public void deleteAllProductsAttachedToPolicy()
    {
        WHSWorkPolicyProduct workPolicyProduct;

        ttsbegin;
            delete_from workPolicyProduct
                where workPolicyProduct.WorkPolicy == this.RecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkPolicyForCreationMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the work policy with a specific <c>WHSWorkCreationMethod</c> if it exists.
    /// </summary>
    /// <param name = "_creationMethod">
    /// The <c>WHSWorkCreationMethod</c> to search for.
    /// </param>
    /// <param name = "_type">
    /// The <c>WHSWorkTransType</c> that is using the creation method.
    /// </param>
    /// <param name = "_warehouse">
    /// The warehouse using the creation method.
    /// </param>
    /// <param name = "_location">
    /// The location that is using the creation method.
    /// </param>
    /// <param name = "_itemId">
    /// The current <c>ItemId</c>.
    /// </param>
    /// <returns>
    /// The <c>WhsWorkCreationRule</c> record that meets all criteria.
    /// </returns>
    [SysObsolete('Use WhsWorkPolicy::findWorkPolicyForCreationMethodAndWorkProcess instead.', false, 05\05\2020)]
    public static WHSWorkCreationRule findWorkPolicyForCreationMethod(
        WHSWorkCreationMethod   _creationMethod,
        WHSWorkTransType        _type,
        InventLocationId        _warehouse,
        WMSLocationId           _location,
        ItemId                  _itemId = '')
    {
        return WHSWorkPolicy::findWorkPolicyForCreationMethodAndWorkProcess(
            _creationMethod,
            _type,
            WhsWorkProcess::All,
            _warehouse,
            _location,
            _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkPolicyForCreationMethodAndWorkProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the work policy with a specific <c>WHSWorkCreationMethod</c> if it exists.
    /// </summary>
    /// <param name = "_creationMethod">The <c>WHSWorkCreationMethod</c> to search for.</param>
    /// <param name = "_type">The <c>WHSWorkTransType</c> that is using the creation method.</param>
    /// <param name = "_workProcess">The work process that needs to be checked for.</param>
    /// <param name = "_warehouse">The warehouse using the creation method.</param>
    /// <param name = "_location">The location that is using the creation method.</param>
    /// <param name = "_itemId">The current <c>ItemId</c>.</param>
    /// <returns>
    /// The <c>WhsWorkCreationRule</c> record that meets all criteria.
    /// </returns>
    public static WHSWorkCreationRule findWorkPolicyForCreationMethodAndWorkProcess(
        WHSWorkCreationMethod   _creationMethod,
        WHSWorkTransType        _type,
        WhsWorkProcess          _workProcess,
        InventLocationId        _warehouse,
        WMSLocationId           _location,
        ItemId                  _itemId = '')
    {
        WHSWorkCreationRule     workCreationRule;
        WHSWorkPolicy           workPolicy;
        WHSWorkPolicyLocation   workPolicyLocation;
        WHSWorkPolicyProduct    workPolicyProduct;

        if (_itemId != '')
        {
            select firstonly workCreationRule
                where workCreationRule.WorkTransType      == _type
                &&    workCreationRule.WorkCreationMethod == _creationMethod
                &&    workCreationRule.WorkProcess        == _workProcess
                exists join workPolicy
                    where workPolicy.RecId == workCreationRule.WorkPolicy
                exists join workPolicyLocation
                    where workPolicyLocation.WorkPolicy       == workPolicy.RecId
                    &&    workPolicyLocation.InventLocationId == _warehouse
                    &&    workPolicyLocation.WMSLocationId    == _location
                exists join workPolicyProduct
                    where workPolicyProduct.WorkPolicy == workPolicy.RecId
                    &&    workPolicyProduct.ItemId     == _itemId;
        }
        if (workCreationRule.RecId == 0)
        {
            // Policy with exact match of product not found. Checking if policy applies to all products.
            select firstonly workCreationRule
                where workCreationRule.WorkTransType      == _type
                &&    workCreationRule.WorkCreationMethod == _creationMethod
                &&    workCreationRule.WorkProcess        == _workProcess
                exists join workPolicy
                    where workPolicy.RecId == workCreationRule.WorkPolicy
                exists join workPolicyLocation
                    where workPolicyLocation.WorkPolicy       == workPolicy.RecId
                    &&    workPolicyLocation.InventLocationId == _warehouse
                    &&    workPolicyLocation.WMSLocationId    == _location
                notexists join workPolicyProduct
                    where workPolicyProduct.WorkPolicy == workPolicy.RecId;
        }

        return workCreationRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkAllowedToBeCreatedForWorkProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a policy that allows work to be created from the given parameters.
    /// </summary>
    /// <param name = "_type">The work type that needs to be checked for.</param>
    /// <param name = "_warehouse">The warehouse that has the location that needs to be checked for.</param>
    /// <param name = "_location">The inventory location Id that needs to be checked for.</param>
    /// <param name = "_workProcess">The work process that needs to be checked for.</param>
    /// <param name = "_itemId">The item to make the check for, optional.</param>
    /// <returns>true if the policy allows work to be created; false, otherwise.</returns>
    /// <remarks>A call to this without passing item id checks for a work policy which is applicable to all products.
    /// A call to this method without passing a work process will check for any work process.</remarks>
    public static boolean isWorkAllowedToBeCreatedForWorkProcess(
                                    WHSWorkTransType        _type,
                                    InventLocationId        _warehouse,
                                    WMSLocationId           _location,
                                    WhsWorkProcess          _workProcess,
                                    ItemId                  _itemId = '')
    {
        WHSWorkCreationRule     workCreationRule;
        WHSWorkPolicy           workPolicy;
        WHSWorkPolicyLocation   workPolicyLocation;
        WHSWorkPolicyProduct    workPolicyProduct;

        if (_itemId != '')
        {
            select firstonly RecId, WorkCreationMethod from workCreationRule
                where workCreationRule.WorkTransType == _type
                && (workCreationRule.WorkProcess == _workProcess
                    || workCreationRule.WorkProcess == WhsWorkProcess::All)
                exists join workPolicy
                    where workPolicy.RecId == workCreationRule.WorkPolicy
                exists join workPolicyLocation
                    where workPolicyLocation.WorkPolicy == workPolicy.RecId
                        && workPolicyLocation.InventLocationId == _warehouse
                        && workPolicyLocation.WMSLocationId == _location
                exists join workPolicyProduct
                    where workPolicyProduct.WorkPolicy == workPolicy.RecId
                        && workPolicyProduct.ItemId == _itemId;
        }
        if (workCreationRule.RecId == 0)
        {
            // Policy with exact match of product not found. Checking if policy applies to all products.
            select firstonly RecId, WorkCreationMethod from workCreationRule
                where workCreationRule.WorkTransType == _type
                && (workCreationRule.WorkProcess == _workProcess
                    || workCreationRule.WorkProcess == WhsWorkProcess::All)
                exists join workPolicy
                    where workPolicy.RecId == workCreationRule.WorkPolicy
                exists join workPolicyLocation
                    where workPolicyLocation.WorkPolicy == workPolicy.RecId
                        && workPolicyLocation.InventLocationId == _warehouse
                        && workPolicyLocation.WMSLocationId == _location
                notexists join workPolicyProduct
                    where workPolicyProduct.WorkPolicy == workPolicy.RecId;
        }

        return workCreationRule.RecId == 0 || workCreationRule.WorkCreationMethod != WHSWorkCreationMethod::Never;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkAllowedToBeCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there is a policy that allows work to be created from the given parameters.
    /// </summary>
    /// <param name = "_type">The work type that needs to be checked for.</param>
    /// <param name = "_warehouse">The warehouse that has the location that needs to be checked for.</param>
    /// <param name = "_location">The inventory location Id that needs to be checked for.</param>
    /// <param name="_itemId">The item to make the check for, optional.</param>
    /// <returns>true if the policy allows work to be created; false, otherwise.</returns>
    /// <remarks>A call to this without passing item id checks for a work policy which is applicable to all products.</remarks>
    [SysObsolete('Use WhsWorkPolicy::isWorkAllowedToBeCreatedForWorkProcess instead.', false, 20\03\2020)]
    public static boolean isWorkAllowedToBeCreated(
        WHSWorkTransType    _type,
        InventLocationId    _warehouse,
        WMSLocationId       _location,
        ItemId              _itemId = '')
    {
        return WHSWorkPolicy::isWorkAllowedToBeCreatedForWorkProcess(
                                        _type,
                                        _warehouse,
                                        _location,
                                        WhsWorkProcess::All,
                                        _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorkPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for a Work policy
    /// </summary>
    /// <param name = "_ctrl">
    /// The FormStringControl that the lookup is applied to
    /// </param>
    public static void lookupWorkPolicy(FormStringControl _ctrl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSWorkPolicy), _ctrl);
        sysTableLookup.addLookupfield(fieldNum(WHSWorkPolicy, Name), true);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables jumping to the <c>WHSWorkPolicy</c> form
    /// </summary>
    /// <param name="_workPolicyName">
    /// Name of the Work policy record to set focus to; optional
    /// </param>
    public static void jumpRef(WhsWorkPolicyName _workPolicyName = '')
    {
        Args args = new Args();

        if (_workPolicyName)
        {
            args.lookupRecord(WHSWorkPolicy::find(_workPolicyName));
        }

        new MenuFunction(menuitemDisplayStr(WHSWorkPolicy), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<Label>@Wax:WorkPolicies</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Name</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkPolicyName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>