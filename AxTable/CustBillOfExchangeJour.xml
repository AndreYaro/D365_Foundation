<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBillOfExchangeJour extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountDrawn</Name>
				<Source><![CDATA[
    public display Amount amountDrawn()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        LedgerJournalTrans      ledgerJournalTrans;
        Amount                  amount;
        // <GJP>
        CustBillOfExchangeTransExtensionJP endorseTrans;
        #ISOCountryRegionCodes
        // </GJP>

        if (this.Status == CustVendNegInstStatus::None)
        {
            select AmountCurCredit from ledgerJournalTrans
                where ledgerJournalTrans.RecId == this.LedgerJournalTransRecId;

            amount = -ledgerJournalTrans.AmountCurCredit;
        }
        else
        {
            // <GJP>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
            {
                select sum(AmountCur) from custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == this.BillOfExchangeId
                       && custBillOfExchangeTrans.Status == CustVendNegInstStatus::Drawn
                notexists join endorseTrans
                    where endorseTrans.ReverseOffsetRecid == custBillOfExchangeTrans.RecId;
            }
            else
            {
            // </GJP>
                select sum(AmountCur) from custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == this.BillOfExchangeId
                       && custBillOfExchangeTrans.Status == CustVendNegInstStatus::Drawn;
            // <GJP>
            }
            // </GJP>
            amount = custBillOfExchangeTrans.AmountCur;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTDrawn</Name>
				<Source><![CDATA[
    public display AmountMST amountMSTDrawn()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        LedgerJournalTrans      ledgerJournalTrans;
        AmountMST               amountMST;
        // <GJP>
        CustBillOfExchangeTransExtensionJP endorseTrans;
        #ISOCountryRegionCodes
        // </GJP>

        if (this.Status == CustVendNegInstStatus::None)
        {
            select ledgerJournalTrans
                where ledgerJournalTrans.RecId == this.LedgerJournalTransRecId;

            amountMST = -ledgerJournalTrans.amount();
        }
        else
        {
            // <GJP>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
            {
                while select AmountCur, CurrencyCode from custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == this.BillOfExchangeId
                       && custBillOfExchangeTrans.Status == CustVendNegInstStatus::Drawn
                notexists join endorseTrans
                    where endorseTrans.ReverseOffsetRecid == custBillOfExchangeTrans.RecId
                {
                    amountMST += CurrencyExchangeHelper::amountCur2MST(custBillOfExchangeTrans.AmountCur, custBillOfExchangeTrans.CurrencyCode);
                }
            }
            else
            {
            // </GJP>
                while select AmountCur, CurrencyCode from custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == this.BillOfExchangeId
                          && custBillOfExchangeTrans.Status == CustVendNegInstStatus::Drawn
                {
                    amountMST += CurrencyExchangeHelper::amountCur2MST(custBillOfExchangeTrans.AmountCur, custBillOfExchangeTrans.CurrencyCode);
                }
            // <GJP>
            }
            // </GJP>
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMSTOpen</Name>
				<Source><![CDATA[
    public display AmountMST amountMSTOpen()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans               custTrans;
        AmountMST               amountMST;

        while select custTrans
            where custTrans.BillOfExchangeID == this.BillOfExchangeId
                && custTrans.Closed == datenull()
        exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.CustAccount  == this.CustAccount
                    && custBillOfExchangeTrans.Voucher == custTrans.Voucher
                    && custBillOfExchangeTrans.TransDate   == custTrans.TransDate
                    && custBillOfExchangeTrans.BillOfExchangeID == custTrans.BillOfExchangeId
                    && custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum
        {
            amountMST += custTrans.remainAmountMST();
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankRemittanceFileId</Name>
				<Source><![CDATA[
    public display BankRemittanceFileId bankRemittanceFileId()
    {
        CustTrans custTrans;

        select firstonly BankRemittanceFileId from custTrans
            order by BillOfExchangeSeqNum desc
            where custTrans.BillOfExchangeID == this.BillOfExchangeId
                && custTrans.BankRemittanceFileId;

        return custTrans.BankRemittanceFileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanBeClosed</Name>
				<Source><![CDATA[
    public boolean checkCanBeClosed()
    {
        boolean ret = true;

        if (this.hasOpenTransactions())
        {
            ret = checkFailed(strFmt("@SYS71613", this.BillOfExchangeId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeBill</Name>
				<Source><![CDATA[
    public boolean closeBill(boolean _update = false)
    {
        boolean ok;

        if (this.checkCanBeClosed())
        {
            this.Open = NoYes::No;

            if (_update)
            {
                this.update();
            }

            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    public display CurrencyCode currencyCode()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;

        select firstonly CurrencyCode from custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId  == this.BillOfExchangeId
               && custBillOfExchangeTrans.Status            == this.Status;

        return custBillOfExchangeTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransOfBOEDraw</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cust trans generated by drawing BOE.
    /// </summary>
    /// <returns>
    /// An cust Trans
    /// </returns>
    public CustTrans getCustTransOfBOEDraw()
    {
        CustTrans       custTrans;
        CustTransOpen   custTransOpen;

        select firstOnly * from custTrans
            exists join custTransOpen
                where custTrans.AccountNum == this.CustAccount
                    && custTrans.BillOfExchangeID == this.BillOfExchangeId
                    && (custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Drawn
                        || custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Redrawn)
                    && custTrans.AccountNum == custTransOpen.AccountNum
                    && custTrans.RecId == custTransOpen.RefRecId;

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenTransactions</Name>
				<Source><![CDATA[
    public boolean hasOpenTransactions()
    {
        CustTrans               custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        boolean                 ret = false;

        while select RecId from custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == this.BillOfExchangeId
            join custTrans
            where custTrans.AccountNum                 == this.CustAccount
                  && custTrans.Voucher                 == custBillOfExchangeTrans.Voucher
                  && custTrans.TransDate               == custBillOfExchangeTrans.TransDate
                  && custTrans.BillOfExchangeID        == custBillOfExchangeTrans.BillOfExchangeId
                  && custTrans.BillOfExchangeSeqNum    == custBillOfExchangeTrans.SeqNum
                  && custTrans.BillOfExchangeStatus    == custBillOfExchangeTrans.Status
        {
            if (custTrans.open())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CustBillOfExchangeID _custBillOfExchangeID )
    {
        boolean ret = true;

        if (!CustBillOfExchangeJour::exist(_custBillOfExchangeID))
        {
            ret = checkFailed(strFmt(CustBillOfExchangeJour::txtNotExist(), _custBillOfExchangeID));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewBillOfExhange</Name>
				<Source><![CDATA[
    public static CustBillOfExchangeJour createNewBillOfExhange(
        CustAccount _custAccount,
                                                                CustVendNegInstStatus   _status = CustVendNegInstStatus::None,
                                                                DueDate                 _dueDate = dateNull())
    {
        CustBillOfExchangeJour  custBillOfExchangeJour;
        CustBillOfExchangeID    custBillOfExchangeID;
        NumberSeq               numberSeq;

        ttsbegin;

        numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustBillOfExchangeID());

        custBillOfExchangeID = numberSeq.num();

        if (CustBillOfExchangeJour::exist(custBillOfExchangeID))
        {
            numberSeq.abort();
            checkFailed("@SYS71944");
            checkFailed(strFmt("@SYS71946", custBillOfExchangeID));
            throw error("@SYS23020");
        }

        custBillOfExchangeJour.BillOfExchangeId         = custBillOfExchangeID;
        custBillOfExchangeJour.CustAccount              = _custAccount;
        custBillOfExchangeJour.Status                   = _status;
        custBillOfExchangeJour.Open                     = NoYes::Yes;
        custBillOfExchangeJour.DueDate                  = _dueDate;

        numberSeq.used();

        custBillOfExchangeJour.insert();

        ttscommit;

        return custBillOfExchangeJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CustBillOfExchangeID _custBillOfExchangeID )
    {
        boolean found;

        found = (select firstonly RecId from custBillOfExchangeJour
                 where custBillOfExchangeJour.BillOfExchangeId == _custBillOfExchangeID).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustBillOfExchangeJour find(
        CustBillOfExchangeID _custBillOfExchangeID ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustBillOfExchangeJour custBillOfExchangeJour;

        custBillOfExchangeJour.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custBillOfExchangeJour.concurrencyModel(_concurrencyModel);
        }

        select firstonly custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == _custBillOfExchangeID;

        return custBillOfExchangeJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransRecId</Name>
				<Source><![CDATA[
    public static void setLedgerJournalTransRecId(
        CustBillOfExchangeID _custBillOfExchangeID,
                                           LedgerJournalTransRefRecId   _ledgerJournalTransRefRecId)
    {
        CustBillOfExchangeJour      custBOEJour;

        if (_custBillOfExchangeID)
        {
            ttsbegin;

            custBOEJour = CustBillOfExchangeJour::find(_custBillOfExchangeID, true);

            if (custBOEJour)
            {
                custBOEJour.LedgerJournalTransRecId  = _ledgerJournalTransRefRecId;
                custBOEJour.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS71513";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountNum</Name>
				<Source><![CDATA[
    public static void updateAccountNum(CustBillOfExchangeID _billOfExchangeId, CustAccount _accountNum)
    {
        CustBillOfExchangeJour      custBOEJour;
        CustBillOfExchangeTrans     custBOETrans;
        CustVendNegInstSeqNum       seqNum;

        if (_billOfExchangeId)
        {
            ttsbegin;

            custBOEJour = CustBillOfExchangeJour::find(_billOfExchangeId, true);

            if (custBOEJour)
            {
                custBOEJour.CustAccount = _accountNum;
                custBOEJour.update();

                seqNum = CustBillOfExchangeTrans::maxSeqNum(_billOfExchangeId);

                while select forupdate custBOETrans
                    where custBOETrans.BillOfExchangeId == custBOEJour.BillOfExchangeId
                        && custBOETrans.Status == custBOEJour.Status
                        && custBOETrans.SeqNum == seqNum
                {
                    custBOETrans.CustAccount = _accountNum;
                    custBOETrans.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDueDate</Name>
				<Source><![CDATA[
    public static void updateDueDate(CustBillOfExchangeID _billOfExchangeId, DueDate _dueDate)
    {
        CustBillOfExchangeJour      custBOEJour;
        CustBillOfExchangeTrans     custBOETrans;
        CustVendNegInstSeqNum       seqNum;

        if (_billOfExchangeId)
        {
            ttsbegin;

            custBOEJour = CustBillOfExchangeJour::find(_billOfExchangeId, true);

            if (custBOEJour)
            {
                custBOEJour.DueDate= _dueDate;
                custBOEJour.update();

                seqNum = CustBillOfExchangeTrans::maxSeqNum(_billOfExchangeId);

                while select forupdate custBOETrans
                    where custBOETrans.BillOfExchangeId == custBOEJour.BillOfExchangeId
                        && custBOETrans.Status == custBOEJour.Status
                        && custBOETrans.SeqNum == seqNum
                {
                    custBOETrans.DueDate= _dueDate;
                    custBOETrans.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustBillOfExchange</ConfigurationKey>
	<DeveloperDocumentation>@SYS127234</DeveloperDocumentation>
	<FormRef>CustBillOfExchangeJour</FormRef>
	<Label>@SYS71648</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>BillOfExchangeId</TitleField1>
	<TitleField2>CustAccount</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>CustAccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>BillOfExchangeIdx</PrimaryIndex>
	<ReplacementKey>BillOfExchangeIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustBillOfExchangeJourExtensionJP</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustBillOfExchangeJourExtensionJP</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CustPaymSched</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustPaymSched</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountsReceivable</Name>
			<Label>@SYS25196</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Open</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>amountMSTDrawn</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>amountMSTOpen</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateGroup</Name>
			<Label>@SYS7402</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApprovalDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemittanceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeSeqNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BillOfExchangeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Open</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalTransRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ApprovalDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS82782</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillOfExchangeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBillOfExchangeID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>BillOfExchangeSeqNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendNegInstSeqNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS2587</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DocumentNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankBillOfExchangeNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerJournalTransRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Open</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS16011</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RemittanceDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS82781</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBillOfExchangeStatus</ExtendedDataType>
			<EnumType>CustVendNegInstStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BillOfExchangeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BillOfExchangeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BillOfExchangeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OpenCustAccount</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Open</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendNegInstJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Open</MapField>
					<MapFieldTo>Open</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAC</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NegInstId</MapField>
					<MapFieldTo>BillOfExchangeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Status</MapField>
					<MapFieldTo>Status</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RemittanceDate</MapField>
					<MapFieldTo>RemittanceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
					<MapFieldTo>DocumentNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ApprovalDate</MapField>
					<MapFieldTo>ApprovalDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123453</EntityRelationshipRole>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillOfExchangeJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>AccountType_Extern</Name>
					<RelatedField>AccountType</RelatedField>
					<ValueStr>LedgerJournalACType::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTransRecId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTransRecId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillOfExchangeJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalTransRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>LedgerJournalTransRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>