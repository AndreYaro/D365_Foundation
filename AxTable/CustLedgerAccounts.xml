<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLedgerAccounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustLedgerAccounts extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccountRelation</Name>
				<Source><![CDATA[
    boolean checkAccountRelation()
    {
        return this.CustVendLedgerAccounts::checkAccountRelation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        LedgerCache::clearScope(LedgerCacheScope::PartyMainAccountDimensionListProvCust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();

        LedgerCache::clearScope(LedgerCacheScope::PartyMainAccountDimensionListProvCust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        DimensionAttributeValue dimAttrValue;
        DimensionAttribute mainAccountDimAttribute;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustLedgerAccounts, SummaryLedgerDimension):
                if (this.SummaryLedgerDimension)
                {
                    mainAccountDimAttribute.RecId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
                    dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(mainAccountDimAttribute.RecId, LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.SummaryLedgerDimension).RecId, true, true);
                    if (!dimAttrValue.IsBlockedForManualEntry)
                    {
                        dimAttrValue.IsBlockedForManualEntry = NoYes::Yes;
                        dimAttrValue.update();
                    }
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CustLedgerAccounts this_orig = this.orig();

        super();

        if (this.ClearingLedgerDimension != this_orig.ClearingLedgerDimension ||
            this.SummaryLedgerDimension != this_orig.SummaryLedgerDimension ||
            this.VATPrepaymentsLedgerDimension != this_orig.VATPrepaymentsLedgerDimension ||
            this.LiabilitiesForDiscountLedgerDimension != this_orig.LiabilitiesForDiscountLedgerDimension ||
            this.WriteOffLedgerDimension != this_orig.WriteOffLedgerDimension)
        {
            LedgerCache::clearScope(LedgerCacheScope::PartyMainAccountDimensionListProvCust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(fieldId p1)
    {
        boolean isValid;

        isValid = super(p1);

        switch (p1)
        {
            case (fieldnum(CustLedgerAccounts, SummaryLedgerDimension)) :
                isValid = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.SummaryLedgerDimension).MainAccountId) && isValid;
                break;

            case (fieldnum(CustLedgerAccounts, ClearingLedgerDimension)) :
                isValid = MainAccount::checkAllowPosting(LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.ClearingLedgerDimension).MainAccountId) && isValid;
                break;

            case (fieldnum(CustLedgerAccounts,Num)) :
                isValid = this.checkAccountRelation() && isValid;
                break;
        }
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean isValid;

        isValid = super();

        isValid = this.checkAccountRelation() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billingClassPostingProfileinterestCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Interest Code that is related to the Billing Class Posting profile.
    /// </summary>
    /// <param name="_accountNum">
    /// The customer account number.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The posting profile ID that is used to find the <c>CustInterest</c> record.
    /// </param>
    /// <param name="_lookupDefPostingProfile">
    /// A Boolean value that indicates whether to find the posting profile in accounts receivable; Optional.
    /// </param>
    /// <returns>
    /// A container that contains a <c>CustInterestRecId</c> value and a <c>CustInterestCodeSource</c>
    /// value.
    /// </returns>
    public static container billingClassPostingProfileinterestCode(
        CustAccount _accountNum,
        CustPostingProfile _custPostingProfile,
        boolean _lookupDefPostingProfile = true)
    {
        CustInterestRecId custInterestRecId;
        CustInterestCodeSource interestCodeSource;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (_accountNum)
        {
            custInterestRecId = (select firstonly CustInterest from custLedgerAccounts
                                    where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                        custLedgerAccounts.AccountCode == TableGroupAll::Table &&
                                            custLedgerAccounts.Num == _accountNum).CustInterest;
            if (!custInterestRecId)
            {
                custInterestRecId = (select firstonly CustInterest from custLedgerAccounts
                                        where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                                custLedgerAccounts.AccountCode == TableGroupAll::GroupId &&
                                                    custLedgerAccounts.Num == CustTable::groupId(_accountNum)).CustInterest;
            }
        }

        if (!custInterestRecId)
        {
            custInterestRecId = (select firstonly CustInterest from custLedgerAccounts
                                    where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                        custLedgerAccounts.AccountCode == TableGroupAll::All).CustInterest;
        }

        if (custInterestRecId)
        {
            interestCodeSource = CustLedgerAccounts::getCustInterestCodeSourcePostingProfile();
        }
        else
        {
            if (_lookupDefPostingProfile)
            {
                _lookupDefPostingProfile = !custInterestRecId;
            }
            else
            {
                _lookupDefPostingProfile = !custPostingProfile;
            }

            if (_lookupDefPostingProfile)
            {
                custPostingProfile = CustParameters::find().PostingProfile;

                if (!custPostingProfile)
                {
                    throw error("@SYS26844");
                }

                if (_accountNum)
                {
                    custInterestRecId = (select firstonly CustInterest from custLedgerAccounts
                                            where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                                    custLedgerAccounts.AccountCode == TableGroupAll::Table &&
                                                    custLedgerAccounts.Num == _accountNum).CustInterest;

                    if (!custInterestRecId)
                    {
                        custInterestRecId = (select firstonly CustInterest from custLedgerAccounts
                                                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                                        custLedgerAccounts.AccountCode == TableGroupAll::GroupId &&
                                                        custLedgerAccounts.Num == CustTable::groupId(_accountNum)).CustInterest;
                    }
                }

                if (!custInterestRecId)
                {
                    custInterestRecId = (select firstonly CustInterest from custLedgerAccounts
                                            where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                                    custLedgerAccounts.AccountCode == TableGroupAll::All).CustInterest;
                }
                if (custInterestRecId)
                {
                    interestCodeSource = CustLedgerAccounts::getCustInterestCodeSourceAccount();
                }
            }
        }

        return [custInterestRecId,interestCodeSource];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInterestCodeSourceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account enum value of <c>CustInterestCodeSource</c>.
    /// </summary>
    /// <returns>
    /// Enum value of Account of enum <c>CustInterestCodeSource</c>.
    /// </returns>
    protected static CustInterestCodeSource getCustInterestCodeSourceAccount()
    {
        return CustInterestCodeSource::Account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInterestCodeSourcePostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting profile enum value of <c>CustInterestCodeSource</c>.
    /// </summary>
    /// <returns>
    /// Enum value of <c>PostingProfile</c> of enum <c>CustInterestCodeSource</c>.
    /// </returns>
    /// <remarks>
    /// This method is used in <c>billingClassPostingProfileinterestCode</c> method of this class to set value for <c>interestCodeSource</c> variable.
    /// </remarks>
    protected static CustInterestCodeSource getCustInterestCodeSourcePostingProfile()
    {
        return CustInterestCodeSource::PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CustPostingProfile _custPostingProfile, TableGroupAll _accountCode, CustAccount _custAccount )
    {
        boolean isValid = true;

        if (!CustLedgerAccounts::exist(_custPostingProfile, _accountCode, _custAccount))
        {
            isValid = checkFailed(strfmt(CustLedgerAccounts::txtNotExist(), _custPostingProfile, _accountCode, _custAccount));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimension</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount clearingLedgerDimension(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile)
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        CustLedgerAccounts custLedgerAccounts;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (! custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }

        ledgerDimension = CustVendLedgerDimensions::clearingLedgerDimension(_custAccount,
                                                                custPostingProfile,
                                                                custLedgerAccounts,
                                                                TableGroupAll::Table);

        if (!ledgerDimension)
        {
            ledgerDimension = CustVendLedgerDimensions::clearingLedgerDimension(CustTable::groupId(_custAccount),
                                                                    custPostingProfile,
                                                                    custLedgerAccounts,
                                                                    TableGroupAll::GroupId);
        }

        if (!ledgerDimension)
        {
            ledgerDimension = (select firstonly ClearingLedgerDimension from custLedgerAccounts
                                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                      custLedgerAccounts.AccountCode == TableGroupAll::All).ClearingLedgerDimension;
        }

        if (!ledgerDimension)
        {
            ledgerDimension = CustParameters::find().ClearingLedgerDimension;
        }

        if (!ledgerDimension)
        {
            throw error(strfmt("@SYS68846", _custAccount,custPostingProfile));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionLetterCourse</Name>
				<Source><![CDATA[
    public static CollectionLetterCourseId collectionLetterCourse(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile)
    {
        CollectionLetterCourseId collectionLetterCourse;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (!custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }

        collectionLetterCourse = CustLedgerAccounts::findStrByPriority(_custAccount, custPostingProfile, fieldnum(CustLedgerAccounts, CollectionLetterCourse));

        return collectionLetterCourse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInterest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>CustInterest</c> record ID.
    /// </summary>
    /// <param name="_accountNum">
    ///    The customer account number.
    /// </param>
    /// <param name="_custPostingProfile">
    ///    The posting profile ID used to find the <c>CustInterest</c> record.
    /// </param>
    /// <param name="_lookupDefPostingProfile">
    ///    A Boolean value that indicates whether to look up the posting profile in accounts receivable;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The <c>CustInterest</c> record ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The posting profile ID parameter was blank and no post profile was available in the accounts
    ///    receivable parameters.
    /// </exception>
    public static CustInterestRecId custInterest(
                                                CustAccount _accountNum,
                                                CustPostingProfile _custPostingProfile,
                                                boolean _lookupDefPostingProfile = true)
    {
        CustPostingProfile custPostingProfile = _custPostingProfile;
        CustInterestRecId custInterestRecId;

        custInterestRecId = any2int64(CustLedgerAccounts::findRefRecIdByPriority(_accountNum, custPostingProfile, fieldnum(CustLedgerAccounts, CustInterest)));

        if (_lookupDefPostingProfile)
        {
            _lookupDefPostingProfile = !custInterestRecId;
        }
        else
        {
            _lookupDefPostingProfile = !custPostingProfile;
        }

        if (_lookupDefPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;

            if (custPostingProfile)
            {
                custInterestRecId = any2int64(CustLedgerAccounts::findRefRecIdByPriority(_accountNum, custPostingProfile, fieldnum(CustLedgerAccounts, CustInterest)));
            }
        }

        return custInterestRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depositLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the packages deposit ledger dimension for the specified customer and customer posting profile.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <returns>
    /// The ledger dimension for the packages deposit.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Posting profile has not been set up in accounts receivable parameters.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Packages deposit account for customer in posting profile does not exist.
    /// </exception>
    public static LedgerDimensionDefaultAccount depositLedgerDimension(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile = '')
    {
        LedgerDimensionDefaultAccount depositLedgerDimension;
        CustPostingProfile custPostingProfile;

        custPostingProfile = _custPostingProfile;

        if (!custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;

            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }

        depositLedgerDimension = CustLedgerAccounts::getDepositLedgerDimensionTableGroups(_custAccount, custPostingProfile);

        if (!depositLedgerDimension)
        {
            custPostingProfile = CustParameters::find().PostingProfile;

            if (custPostingProfile)
            {
                depositLedgerDimension = CustLedgerAccounts::getDepositLedgerDimensionTableGroups(_custAccount, custPostingProfile);
            }
            else
            {
                throw error("@SYS26844");
            }
        }

        if (!depositLedgerDimension)
        {
            throw error(strfmt("@GLS110016", _custAccount, custPostingProfile));
        }

        return depositLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionAttrNamesForCheck_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the set of dimension attribute names to checking in settlement
    /// </summary>
    /// <param name="_custAccount">
    /// Customer account for which set build
    /// </param>
    /// <param name="_custPostingProfile">
    /// Posting profile for which set build
    /// </param>
    /// <returns>
    /// Set of dimension attribute names to checking in settlement
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If posting profile not found
    /// </exception>
    public static Set dimensionAttrNamesForCheck_RU(CustAccount _custAccount, CustPostingProfile _custPostingProfile = '')
    {
        CustLedgerAccounts custLedgerAccounts;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (!custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }

        custLedgerAccounts = CustLedgerAccounts::find(custPostingProfile, TableGroupAll::Table, _custAccount);

        if (!custLedgerAccounts)
        {
            custLedgerAccounts = CustLedgerAccounts::find(custPostingProfile, TableGroupAll::GroupId, CustTable::groupId(_custAccount));
        }

        if (!custLedgerAccounts)
        {
            custLedgerAccounts = CustLedgerAccounts::find(custPostingProfile, TableGroupAll::All, '');
        }

        if (custLedgerAccounts.DimensionHierarchy_RU && DimensionHierarchy::exist(custLedgerAccounts.DimensionHierarchy_RU))
        {
            return DimensionHierarchyHelper::dimensionAttrExt_RU(DimensionHierarchy::find(custLedgerAccounts.DimensionHierarchy_RU).RecId);
        }

        return new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endorseLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets endorse ledger dimension.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <returns>
    /// An instance of the <c>LedgerDimensionDefaultAccount</c> class.
    /// </returns>
    public static LedgerDimensionDefaultAccount endorseLedgerDimension(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile = '')
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        CustLedgerAccounts custLedgerAccounts;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (custPostingProfile == '')
        {
            custPostingProfile = CustParameters::find().PostingProfileBillsEndorsed;
            if (!custPostingProfile)
            {
                // Posting profile has not been set up in accounts receivable parameters.
                throw error("@SYS26844");
            }
        }

        ledgerDimension = (select firstonly EndorseLedgerDimension from custLedgerAccounts
                            where custLedgerAccounts.PostingProfile == custPostingProfile
                               && custLedgerAccounts.AccountCode == TableGroupAll::Table
                               && custLedgerAccounts.Num == _custAccount).EndorseLedgerDimension;

        if (!ledgerDimension)
        {
            ledgerDimension = (select firstonly EndorseLedgerDimension from custLedgerAccounts
                                where custLedgerAccounts.PostingProfile == custPostingProfile
                                   && custLedgerAccounts.AccountCode == TableGroupAll::GroupId
                                   && custLedgerAccounts.Num == CustTable::groupId(_custAccount)).EndorseLedgerDimension;
        }

        if (!ledgerDimension)
        {
            ledgerDimension = (select firstonly EndorseLedgerDimension from custLedgerAccounts
                                where custLedgerAccounts.PostingProfile == custPostingProfile
                                   && custLedgerAccounts.AccountCode == TableGroupAll::All).EndorseLedgerDimension;
        }

        if (!ledgerDimension)
        {
            // Endorse account for customer account %1 in posting profile %2 does not exist.
            throw error(strFmt("@GLS221452", _custAccount,custPostingProfile));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CustPostingProfile _custPostingProfile, TableGroupAll _accountCode, CustAccount _custAccount )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custLedgerAccounts
                 where
                     custLedgerAccounts.PostingProfile == _custPostingProfile &&
                    custLedgerAccounts.AccountCode == _accountCode &&
                    custLedgerAccounts.Num == _custAccount).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustomerInPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the customer record belongs to the posting profile.
    /// </summary>
    /// <param name="_accountNum">
    /// The customer account number.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The posting profile ID that is used to find the <c>CustInterest</c> record.
    /// </param>
    /// <returns>
    /// true if the customer belongs to the posting profile; otherwise, false.
    /// </returns>
    public static boolean existCustomerInPostingProfile(
            CustAccount _accountNum,
            CustPostingProfile _custPostingProfile = CustParameters::find().PostingProfileBillsRemitDiscount)
    {
        return any2int64(CustLedgerAccounts::findRefRecIdByPriority(_accountNum, _custPostingProfile, fieldnum(CustLedgerAccounts, RecId))) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportSalesLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the export sales ledger dimension for a specified customer and customer posting profile.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <returns>
    /// The ledger dimension for the export sales.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The posting profile has not been set up in the accounts receivable parameters.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The export sales tax account for the customer in the posting profile does not exist.
    /// </exception>
    public static ExportSalesLedgerDimension exportSalesLedgerDimension(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile = '')
    {
        ExportSalesLedgerDimension exportSalesLedgerDimension;
        CustPostingProfile custPostingProfile;

        custPostingProfile = _custPostingProfile;

        if (!custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;

            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }

        exportSalesLedgerDimension = CustLedgerAccounts::getExportSalesLedgerDimensionTableGroups(_custAccount, custPostingProfile);

        if (!exportSalesLedgerDimension)
        {
            custPostingProfile = CustParameters::find().PostingProfile;

            if (custPostingProfile)
            {
                exportSalesLedgerDimension = CustLedgerAccounts::getExportSalesLedgerDimensionTableGroups(_custAccount, custPostingProfile);
            }
            else
            {
                throw error("@SYS26844");
            }
        }

        if (!exportSalesLedgerDimension)
        {
            throw error(strfmt("@GLS110209", _custAccount, custPostingProfile));
        }

        return exportSalesLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustLedgerAccounts find(
        CustPostingProfile _custPostingProfile,
        TableGroupAll _accountCode,
        CustAccount _custAccount ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustLedgerAccounts custLedgerAccounts;

        custLedgerAccounts.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custLedgerAccounts.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            custLedgerAccounts
            where
            custLedgerAccounts.PostingProfile == _custPostingProfile &&
                    custLedgerAccounts.AccountCode == _accountCode &&
                    custLedgerAccounts.Num == _custAccount;

        return custLedgerAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDepositLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the packages deposit ledger dimension for the specified customer and customer posting profile in the specified table group.
    /// </summary>
    /// <param name="_custAC">
    /// The customer account.
    /// </param>
    /// <param name="_postingProfile">
    /// The customer posting profile.
    /// </param>
    /// <param name="_tableGroupAll">
    /// The table group.
    /// </param>
    /// <returns>
    /// The ledger dimension for the packages deposit.
    /// </returns>
    public static LedgerDimensionDefaultAccount findDepositLedgerDimension(
        CustVendAC _custAC,
        PostingProfile _postingProfile,
        TableGroupAll _tableGroupAll)
    {
        CustLedgerAccounts custLedgerAccounts;

        if (_custAC)
        {
            select firstonly DepositLedgerDimension from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == _postingProfile &&
                      custLedgerAccounts.AccountCode == _tableGroupAll &&
                      custLedgerAccounts.Num == _custAC;
        }

        return custLedgerAccounts.DepositLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExportSalesLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an export sales ledger dimension for a specified customer and customer posting profile in a
    /// specified table group.
    /// </summary>
    /// <param name="_custAC">
    /// The customer account.
    /// </param>
    /// <param name="_postingProfile">
    /// The customer posting profile.
    /// </param>
    /// <param name="_tableGroupAll">
    /// The table group.
    /// </param>
    /// <returns>
    /// The ledger dimension for the export sales.
    /// </returns>
    public static ExportSalesLedgerDimension findExportSalesLedgerDimension(
        CustVendAC _custAC,
        PostingProfile _postingProfile,
        TableGroupAll _tableGroupAll)
    {
        CustLedgerAccounts custLedgerAccounts;

        if (_custAC)
        {
            select firstonly ExportSalesLedgerDimension from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == _postingProfile &&
                      custLedgerAccounts.AccountCode == _tableGroupAll &&
                      custLedgerAccounts.Num == _custAC;
        }

        return custLedgerAccounts.ExportSalesLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFineAccount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the correct Account related to Fine, following the order Table, Group, All
    /// </summary>
    /// <param name="_custAccount">
    /// CustAccount information that is going to be used to find the correct account (accountCode = Table)
    /// </param>
    /// <param name="_custPostingProfile">
    /// The posting profile that should used for searching
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> value that represents the correct account related to fine,
    /// following the order Table, Group, All.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Posting profile has not been set up in accounts receivable parameters or the specified account
    /// wasn't found.
    /// </exception>
    static LedgerDimensionDefaultAccount findFineAccount_BR(CustAccount _custAccount,
                                                                   CustPostingProfile _custPostingProfile)
    {
        CustLedgerAccounts custLedgerAccounts;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (!custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }

        select firstonly FineLedgerDimension_BR from custLedgerAccounts
            where custLedgerAccounts.PostingProfile == custPostingProfile &&
                  custLedgerAccounts.AccountCode == TableGroupAll::Table &&
                  custLedgerAccounts.Num == _custAccount;

        if (! custLedgerAccounts.FineLedgerDimension_BR)
        {
            select firstonly FineLedgerDimension_BR from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                      custLedgerAccounts.AccountCode == TableGroupAll::GroupId &&
                      custLedgerAccounts.Num == CustTable::find(_custAccount).CustGroup;
        }

        if (! custLedgerAccounts.FineLedgerDimension_BR)
        {
            select firstonly FineLedgerDimension_BR from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                      custLedgerAccounts.PostingProfile > '' &&
                      custLedgerAccounts.AccountCode == TableGroupAll::All;
        }

        if (!custLedgerAccounts.FineLedgerDimension_BR)
        {
            throw error(strfmt("@GLS1234", _custAccount, custPostingProfile, "@GLS1235", strlwr("@SYS302")));
        }

        return custLedgerAccounts.FineLedgerDimension_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInterestAccount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the correct Account related to Interest, following the order Table, Group, All
    /// </summary>
    /// <param name="_custAccount">
    /// CustAccount information that is going to be used to find the correct account (accountCode = Table)
    /// </param>
    /// <param name="_custPostingProfile">
    /// The posting profile that should used for searching
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> value that represents the correct account related to interest,
    /// following the order Table, Group, All.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Posting profile has not been set up in accounts receivable parameters or the specified account
    /// wasn't found.
    /// </exception>
    static LedgerDimensionDefaultAccount findInterestAccount_BR(CustAccount _custAccount,
                                                                       CustPostingProfile _custPostingProfile)
    {
        CustLedgerAccounts custLedgerAccounts;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (!custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }

        select firstonly InterestLedgerDimension_BR from custLedgerAccounts
            where custLedgerAccounts.PostingProfile == custPostingProfile &&
                  custLedgerAccounts.AccountCode == TableGroupAll::Table &&
                  custLedgerAccounts.Num == _custAccount;

        if (! custLedgerAccounts.InterestLedgerDimension_BR)
        {
            select firstonly InterestLedgerDimension_BR from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                      custLedgerAccounts.AccountCode == TableGroupAll::GroupId &&
                      custLedgerAccounts.Num == CustTable::find(_custAccount).CustGroup;
        }

        if (! custLedgerAccounts.InterestLedgerDimension_BR)
        {
            select firstonly InterestLedgerDimension_BR from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                      custLedgerAccounts.PostingProfile > '' &&
                      custLedgerAccounts.AccountCode == TableGroupAll::All;
        }

        if (!custLedgerAccounts.InterestLedgerDimension_BR)
        {
            throw error(strfmt("@GLS1234", _custAccount, custPostingProfile, "@GLS147", strlwr("@SYS302")));
        }

        return custLedgerAccounts.InterestLedgerDimension_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefRecIdByPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustLedgerAccounts</c> table.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the field in the <c>CustLedgerAccounts</c> table.
    /// </param>
    /// <returns>
    /// A record in the <c>CustLedgerAccounts</c> table; otherwise, an empty record.
    /// </returns>
    public static RefRecId findRefRecIdByPriority(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile,
        fieldId _fieldId)
    {
        RefRecId refRecId;

        if (_custAccount)
        {
            refRecId = CustLedgerAccounts::findRefRecIdForCust(_custPostingProfile, TableGroupAll::Table, _custAccount, _fieldId);

            if (!refRecId)
            {
                refRecId = CustLedgerAccounts::findRefRecIdForCust(_custPostingProfile, TableGroupAll::GroupId, CustTable::groupId(_custAccount), _fieldId);
            }
        }

        if (!refRecId)
        {
            refRecId = CustLedgerAccounts::findRefRecIdForCust(_custPostingProfile, TableGroupAll::All, '', _fieldId);
        }

        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefRecIdForCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CustLedgerAccounts</c> table.
    /// </summary>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <param name="_accountCode">
    /// The account code.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the field in the <c>CustLedgerAccounts</c> table.
    /// </param>
    /// <returns>
    /// A record in the <c>CustLedgerAccounts</c> table; otherwise, an empty record.
    /// </returns>
    public static RefRecId findRefRecIdForCust(
            CustPostingProfile _custPostingProfile,
            TableGroupAll _accountCode,
            CustAccount _custAccount,
            fieldId _fieldId)
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource ds;

        // Required parameters
        Debug::assert(strlen(_custPostingProfile) > 0);
        Debug::assert(_fieldId != 0);

        query = new Query();
        ds = query.addDataSource(tablenum(CustLedgerAccounts));
        ds.addRange(fieldnum(CustLedgerAccounts, PostingProfile)).value(queryValue(_custPostingProfile));
        ds.addRange(fieldnum(CustLedgerAccounts, AccountCode)).value(int2str(_accountCode));
        ds.addRange(fieldnum(CustLedgerAccounts, Num)).value(queryValue(_custAccount));

        ds.addOrderByField(fieldnum(CustLedgerAccounts, RecId));
        ds.addSelectionField(_fieldId);
        ds.firstOnly(true);
        queryRun = new QueryRun(query);

        return queryRun.next() ? any2int64(queryRun.getNo(1).(_fieldId)) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStrByPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of specified field in the <c>CustLedgerAccounts</c> table.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID of the field in the <c>CustLedgerAccounts</c> table.
    /// </param>
    /// <returns>
    /// The value of the field in the <c>CustLedgerAccounts</c> table.
    /// </returns>
    public static str findStrByPriority(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile,
        fieldId _fieldId)
    {
        str strValue;

        if (_custAccount)
        {
            strValue = CustLedgerAccounts::findStrForCust(_custPostingProfile, TableGroupAll::Table, _custAccount, _fieldId);

            if (!strValue)
            {
                strValue = CustLedgerAccounts::findStrForCust(_custPostingProfile, TableGroupAll::GroupId, CustTable::groupId(_custAccount), _fieldId);
            }
        }

        if (!strValue)
        {
            strValue = CustLedgerAccounts::findStrForCust(_custPostingProfile, TableGroupAll::All, '', _fieldId);
        }

        return strValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findStrForCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of specified field in the <c>CustLedgerAccounts</c> table.
    /// </summary>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <param name="_accountCode">
    /// The account code.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_fieldId">
    /// The value of the field in the <c>CustLedgerAccounts</c> table.
    /// </param>
    /// <returns>
    /// The value of the field in the <c>CustLedgerAccounts</c> table.
    /// </returns>
    public static str findStrForCust(
            CustPostingProfile _custPostingProfile,
            TableGroupAll _accountCode,
            CustAccount _custAccount,
            fieldId _fieldId)
    {
        Query query;
        QueryRun queryRun;
        QueryBuildDataSource ds;

        // Required parameters
        Debug::assert(strlen(_custPostingProfile) > 0);
        Debug::assert(_fieldId != 0);

        query = new Query();
        ds = query.addDataSource(tablenum(CustLedgerAccounts));
        ds.addRange(fieldnum(CustLedgerAccounts, PostingProfile)).value(queryValue(_custPostingProfile));
        ds.addRange(fieldnum(CustLedgerAccounts, AccountCode)).value(int2str(_accountCode));
        ds.addRange(fieldnum(CustLedgerAccounts, Num)).value(queryValue(_custAccount));

        ds.addOrderByField(fieldnum(CustLedgerAccounts, RecId));
        ds.addSelectionField(_fieldId);
        ds.firstOnly(true);
        queryRun = new QueryRun(query);

        return queryRun.next() ? any2str(queryRun.getNo(1).(_fieldId)) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransferAccount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the correct Account related to Tax Credit, following the order Table, Group, All.
    /// </summary>
    /// <param name="_custAccount">
    /// CustAccount information that is going to be used to find the correct account (accountCode = Table)
    /// </param>
    /// <param name="_custPostingProfile">
    /// The posting profile that should used for searching (optional)
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> value that represents the correct Account related to Tax Credit,
    /// following the order Table, Group, All.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Posting profile has not been set up in accounts receivable parameters.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// ICMS tax transfer account for given customer account in given posting profile does not exist.
    /// </exception>
    static LedgerDimensionDefaultAccount findTaxTransferAccount_BR(CustAccount _custAccount,
                                                              CustPostingProfile _custPostingProfile = CustParameters::find().PostingProfile)
    {
        CustLedgerAccounts custLedgerAccounts;

        if (!_custPostingProfile)
        {
            throw error("@SYS26844");
        }

        select firstonly TaxTransferLedgerDimension_BR
            from custLedgerAccounts
            where custLedgerAccounts.PostingProfile == _custPostingProfile
                && custLedgerAccounts.AccountCode == TableGroupAll::Table
                && custLedgerAccounts.Num == _custAccount;

        if (!custLedgerAccounts.TaxTransferLedgerDimension_BR)
        {
            select firstonly TaxTransferLedgerDimension_BR
                from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == _custPostingProfile
                    && custLedgerAccounts.AccountCode == TableGroupAll::GroupId
                    && custLedgerAccounts.Num == CustTable::find(_custAccount).CustGroup;
        }

        if (!custLedgerAccounts.TaxTransferLedgerDimension_BR)
        {
            select firstonly TaxTransferLedgerDimension_BR
                from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == _custPostingProfile
                    && custLedgerAccounts.PostingProfile > ''
                    && custLedgerAccounts.AccountCode == TableGroupAll::All;
        }

        if (!custLedgerAccounts.TaxTransferLedgerDimension_BR)
        {
            throw error(strFmt("@GLS1234", _custAccount, _custPostingProfile, "@GLS63272", strLwr("@SYS302")));
        }

        return custLedgerAccounts.TaxTransferLedgerDimension_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepositLedgerDimensionTableGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the packages deposit ledger dimension for the customer with the specified customer posting profile.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <returns>
    /// The ledger dimension for the packages deposit.
    /// </returns>
    public static LedgerDimensionDefaultAccount getDepositLedgerDimensionTableGroups(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile)
    {
        LedgerDimensionDefaultAccount depositLedgerDimension;
        CustLedgerAccounts custLedgerAccounts;

        depositLedgerDimension = CustLedgerAccounts::findDepositLedgerDimension(
            _custAccount,
            _custPostingProfile,
            TableGroupAll::Table);

        if (!depositLedgerDimension)
        {
            depositLedgerDimension = CustLedgerAccounts::findDepositLedgerDimension(
                CustTable::groupId(_custAccount),
                _custPostingProfile,
                TableGroupAll::GroupId);
        }

        if (!depositLedgerDimension)
        {
            depositLedgerDimension = (select firstonly DepositLedgerDimension from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == _custPostingProfile &&
                      custLedgerAccounts.AccountCode == TableGroupAll::All).DepositLedgerDimension;
        }

        return depositLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportSalesLedgerDimensionTableGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an export sales ledger dimension for a customer who has a specified customer posting
    /// profile.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The customer posting profile.
    /// </param>
    /// <returns>
    /// The ledger dimension for the export sales.
    /// </returns>
    public static ExportSalesLedgerDimension getExportSalesLedgerDimensionTableGroups(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile)
    {
        ExportSalesLedgerDimension exportSalesLedgerDimension;
        CustLedgerAccounts custLedgerAccounts;

        exportSalesLedgerDimension = CustLedgerAccounts::findExportSalesLedgerDimension(
            _custAccount,
            _custPostingProfile,
            TableGroupAll::Table);

        if (!exportSalesLedgerDimension)
        {
            exportSalesLedgerDimension = CustLedgerAccounts::findExportSalesLedgerDimension(
                CustTable::groupId(_custAccount),
                _custPostingProfile,
                TableGroupAll::GroupId);
        }

        if (!exportSalesLedgerDimension)
        {
            exportSalesLedgerDimension = (select firstonly ExportSalesLedgerDimension from custLedgerAccounts
                where custLedgerAccounts.PostingProfile == _custPostingProfile &&
                      custLedgerAccounts.AccountCode == TableGroupAll::All).ExportSalesLedgerDimension;
        }

        return exportSalesLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>liabilitiesLedgerDimension</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount liabilitiesLedgerDimension(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile = CustParameters::find().PostingProfileBillsRemitDiscount)
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        if (!_custPostingProfile)
        {
            throw error("@SYS26844");
        }

        ledgerDimension = CustLedgerAccounts::find(_custPostingProfile,
                                                 TableGroupAll::Table,
                                                 _custAccount).LiabilitiesForDiscountLedgerDimension;

        if (!ledgerDimension)
        {
            ledgerDimension = CustLedgerAccounts::find(_custPostingProfile,
                                                     TableGroupAll::GroupId,
                                                     CustTable::groupId(_custAccount)).LiabilitiesForDiscountLedgerDimension;
        }

        if (!ledgerDimension)
        {
            ledgerDimension = CustLedgerAccounts::find(_custPostingProfile,
                                                     TableGroupAll::All,
                                                     '').LiabilitiesForDiscountLedgerDimension;
        }

        if (!ledgerDimension)
        {
            throw error(strfmt("@SYS74434", _custAccount, _custPostingProfile));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount summaryLedgerDimension(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile = '',
        boolean _throwError = true)
    {
        LedgerDimensionDefaultAccount ledgerDimensionId;
        CustLedgerAccounts custLedgerAccounts;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (! custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
            if (!custPostingProfile)
            {
                if (_throwError)
                {
                    throw error("@SYS26844");
                }
                else
                {
                    return ledgerDimensionId;
                }
            }
        }

        ledgerDimensionId = CustVendLedgerDimensions::summaryLedgerDimension(_custAccount,
                                                           custPostingProfile,
                                                           custLedgerAccounts,
                                                           TableGroupAll::Table);

        if (!ledgerDimensionId)
        {
            ledgerDimensionId = CustVendLedgerDimensions::summaryLedgerDimension(CustTable::groupId(_custAccount),
                                                               custPostingProfile,
                                                               custLedgerAccounts,
                                                               TableGroupAll::GroupId);
        }

        if (!ledgerDimensionId)
        {
            ledgerDimensionId = (select firstonly SummaryLedgerDimension from custLedgerAccounts
                                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                      custLedgerAccounts.AccountCode == TableGroupAll::All).SummaryLedgerDimension;
        }

        if (!ledgerDimensionId && _throwError)
        {
            throw error(strfmt("@SYS62413", _custAccount, custPostingProfile));
        }

        return ledgerDimensionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102179";
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatPrepaymentsLedgerDimension</Name>
				<Source><![CDATA[
    public static LedgerDimensionDefaultAccount vatPrepaymentsLedgerDimension(
        CustAccount _custAccount,
        CustPostingProfile _custPostingProfile = '')
    {
        LedgerDimensionDefaultAccount ledgerDimension;
        CustLedgerAccounts custLedgerAccounts;
        CustPostingProfile custPostingProfile = _custPostingProfile;

        if (! custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
            if (!custPostingProfile)
            {
                throw error("@SYS26844");
            }
        }
        ledgerDimension = CustVendLedgerDimensions::prePaymentLedgerDimension(_custAccount,
                                                                  custPostingProfile,
                                                                  custLedgerAccounts,
                                                                  TableGroupAll::Table);

        if (!ledgerDimension)
        {
            ledgerDimension = CustVendLedgerDimensions::prePaymentLedgerDimension(CustTable::groupId(_custAccount),
                                                                      custPostingProfile,
                                                                      custLedgerAccounts,
                                                                      TableGroupAll::GroupId);
        }

        if (!ledgerDimension)
        {
            ledgerDimension = (select firstonly vatPrepaymentsLedgerDimension from custLedgerAccounts
                                where custLedgerAccounts.PostingProfile == custPostingProfile &&
                                      custLedgerAccounts.AccountCode == TableGroupAll::All).vatPrepaymentsLedgerDimension;
        }

        if (!ledgerDimension)
        {
            throw error(strfmt("@SYS68690", _custAccount, custPostingProfile));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125069</DeveloperDocumentation>
	<FormRef>CustPosting</FormRef>
	<Label>@SYS24238</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>PostingProfile</TitleField1>
	<TitleField2>AccountCode</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProfileAccountIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>ProfileAccountIdx</PrimaryIndex>
	<ReplacementKey>ProfileAccountIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SummaryLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClearingLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATPrepaymentsLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCourse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCourse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInterest</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Num</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DimensionHierarchy_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LedgerPosting</Name>
			<Label>@SYS3881</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SummaryLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClearingLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATPrepaymentsLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LiabilitiesForDiscountLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WriteOffLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxTransferLedgerDimension_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportSalesLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DepositLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndorseLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InterestLedgerDimension_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineLedgerDimension_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostingProfileAccountCode</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ClearingLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CashFlowForecasting</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@AccountsReceivable:AR_CashFlow_CustLedgerAccounts_ClearingLedgerDimension</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CollectionLetterCourse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CollectionLetterCourseId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInterest</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInterestID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DepositLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS110010</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionHierarchy_RU</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>DimensionHierarchyId</ExtendedDataType>
			<Label>@SYS79305</Label>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EndorseLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CustBillOfExchange</ConfigurationKey>
			<CountryRegionCodes>JP</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS221450</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExportSalesLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExportSalesLedgerDimension</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FineLedgerDimension_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS1235</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InterestLedgerDimension_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS147</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LiabilitiesForDiscountLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>CustBillOfExchange</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS73426</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Num</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PostingProfileAccountRelation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SummaryLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS11733</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxTransferLedgerDimension_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@GLS63427</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATPrepaymentsLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS68656</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WriteOffLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Collections</ConfigurationKey>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS134966</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfileAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PostingProfile</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Num</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClearingLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ClearingLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LiabilitiesForDiscountLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LiabilitiesForDiscountLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SummaryLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SummaryLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VATPrepaymentsLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VATPrepaymentsLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WriteOffLedgerDimensionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WriteOffLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustInterestIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInterest</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionHierarchyIdx_RU</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionHierarchy_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx1</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExportSalesLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx2</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DepositLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxTransferLedgerDimension_BR</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxTransferLedgerDimension_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FineLedgerDimension_BR</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FineLedgerDimension_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InterestLedgerDimension_BR</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InterestLedgerDimension_BR</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendLedgerAccounts</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountCode</MapField>
					<MapFieldTo>AccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAC</MapField>
					<MapFieldTo>Num</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ClearingLedgerDimension</MapField>
					<MapFieldTo>ClearingLedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SummaryLedgerDimension</MapField>
					<MapFieldTo>SummaryLedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATPrepaymentsLedgerDimension</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendLedgerDimensions</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountCode</MapField>
					<MapFieldTo>AccountCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAC</MapField>
					<MapFieldTo>Num</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SummaryLedgerDimension</MapField>
					<MapFieldTo>SummaryLedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ClearingLedgerDimension</MapField>
					<MapFieldTo>ClearingLedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATPrepaymentsLedgerDimension</MapField>
					<MapFieldTo>VATPrepaymentsLedgerDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ClearingLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ClearingLedgerDimension_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClearingLedgerDimension</Name>
					<Field>ClearingLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustCollectionLetterTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustCollectionLetterTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CollectionLetterCourse</Name>
					<SourceEDT>CollectionLetterCourseId</SourceEDT>
					<Field>CollectionLetterCourse</Field>
					<RelatedField>CollectionLetterCourse</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CourseIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125070</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>CustGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125072</EntityRelationshipRole>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedgerAccountsCustInterest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInterest</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Parent</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Child</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInterest</Name>
					<Field>CustInterest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123523</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AccountCode</Name>
					<Field>AccountCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Num</Name>
					<Field>Num</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DepositLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DepositLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepositLedgerDimension</Name>
					<Field>DepositLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionHierarchy_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionHierarchy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionHierarchy_RU</Name>
					<Field>DimensionHierarchy_RU</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EndorseLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EndorseLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EndorseLedgerDimension</Name>
					<Field>EndorseLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExportSalesLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ExportSalesLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExportSalesLedgerDimension</Name>
					<Field>ExportSalesLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FineLedgerDimension_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>FineLedgerDimension_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FineLedgerDimension_BR</Name>
					<Field>FineLedgerDimension_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InterestLedgerDimension_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InterestLedgerDimension_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InterestLedgerDimension_BR</Name>
					<Field>InterestLedgerDimension_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LiabilitiesForDiscountLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LiabilitiesForDiscountLedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LiabilitiesForDiscountLedgerDimension</Name>
					<Field>LiabilitiesForDiscountLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SummaryLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>SummaryLedgerDimension_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SummaryLedgerDimension</Name>
					<Field>SummaryLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTransferLedgerDimension_BR</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTransferLedgerDimension_BR</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxTransferLedgerDimension_BR</Name>
					<Field>TaxTransferLedgerDimension_BR</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VATPrepaymentsLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VATPrepaymentsLedgerDimension_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VATPrepaymentsLedgerDimension</Name>
					<Field>VATPrepaymentsLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WriteOffLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WriteOffLedgerDimension_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustLedgerAccounts</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WriteOffLedgerDimension</Name>
					<Field>WriteOffLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>