<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMPackDescription</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMIMPackDescription extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>HMIMPackDescription</c> record with given parameters.
    /// </summary>
    /// <param name = "_packCode">Pack code</param>
    /// <param name = "_forupdate">Determines whether the record is selected for update.</param>
    /// <returns>The record that is searched for.</returns>
    public static HMIMPackDescription find(HMIMPackCode _packCode,
                                           boolean      _forupdate = false)
    {
        HMIMPackDescription packDescriptions;

        if (_packCode)
        {
            packDescriptions.selectForUpdate(_forupdate);

            select firstonly packDescriptions
                where packDescriptions.PackCode == _packCode;
        }

        return packDescriptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>HMIMPackDescription</c> record exists.
    /// </summary>
    /// <param name = "_packCode">Pack code</param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(HMIMPackCode _packCode)
    {
        return _packCode && HMIMPackDescription::find(_packCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the <c>HMIMPackingDescription</c> record with translation reference.
    /// </summary>
    public void insert()
    {
        super();
        HMIMPackDescriptionTranslation::createOrUpdateTranslation(this.RecId, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackQtyAndUOMStrForLoadLine</Name>
				<Source><![CDATA[
    internal static str getPackQtyAndUOMStrForLoadLine(WHSLoadLine _loadLine, HMIMRegCode _regCode)
    {
        WHSPackingQty qty;
        UnitOfMeasureSymbol unitId;

        [qty, unitId] = HMIMPackDescription::getPackQtyAndUOMForLoadLine(_loadLine, _regCode);

        if (unitId)
        {
            return strFmt("%1 %2", qty, unitId);
        }

        return any2Str(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackQtyAndUOMForLoadLine</Name>
				<Source><![CDATA[
    internal static container getPackQtyAndUOMForLoadLine(WHSLoadLine _loadLine, HMIMRegCode _regCode)
    {
        WHSLoadLine     loadLine = WHSLoadLine::findbyRecId(_loadLine.RecId);
        container       conInCaseOfError = [0, ''];

        if (!loadLine || !loadLine.ItemId || !_regCode)
        {
            return conInCaseOfError;
        }

        HMIMPackDescription packDescription = HMIMPackDescription::find(HMIMItemMaterial::findByItemRegCode(loadLine.ItemId, _regCode).PackCode);

        return [HMIMPackDescription::getPackQty(packDescription, loadLine), packDescription.CalculationUOM];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackQtyForLoadLine</Name>
				<Source><![CDATA[
    internal static WHSPackingQty getPackQtyForLoadLine(WHSLoadLine _loadLine, HMIMRegCode _regCode)
    {
        return conPeek(HMIMPackDescription::getPackQtyAndUOMForLoadLine(_loadLine, _regCode), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackQty</Name>
				<Source><![CDATA[
    private static WHSPackingQty getPackQty(HMIMPackDescription _packDescription, WHSLoadLine _loadLine)
    {
        if (!_packDescription
            || _packDescription.Calculation == HMIMPackCalculation::PackQty)
        {
            return _loadLine.PackingQty ? _loadLine.Qty / _loadLine.PackingQty : 0;
        }

        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_loadLine.ShipmentId);

        switch (_packDescription.Calculation)
        {
            case HMIMPackCalculation::LicensePlates:
                return shipmentTable.countOfWorksRelatedToLoadLine(_loadLine.RecId);
            case HMIMPackCalculation::Containers:
                return shipmentTable.countOfContainersReleatedToLoadLine(_loadLine.RecId);
            case HMIMPackCalculation::PackUOM:
                return _loadLine.qtyInUOM(_packDescription.CalculationUOM);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        return super() && this.validatePackUOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePackUOM</Name>
				<Source><![CDATA[
    protected boolean validatePackUOM()
    {
        if (this.Calculation == HMIMPackCalculation::PackUOM)
        {
            if (!this.CalculationUOM)
            {
                return checkFailed("@SCM:HMIMPackUOMShouldBePopulated");
            }

        }
        else if (this.CalculationUOM)
        {
            return checkFailed("@SCM:HMIMPackUOMShouldBeEmpty");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresUOM</Name>
				<Source><![CDATA[
    internal boolean requiresUOM()
    {
        return this.Calculation == HMIMPackCalculation::PackUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCalculationUOMValue</Name>
				<Source><![CDATA[
    internal void resetCalculationUOMValue()
    {
        this.CalculationUOM = '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HMIMManagement</ConfigurationKey>
	<DeveloperDocumentation>@SCM:PackDescriptionsDevDoc</DeveloperDocumentation>
	<FormRef>HMIMPackDescriptionListDisplay</FormRef>
	<Label>@SCM:PackingDescriptions</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PackCode</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>PackCodeIdx</PrimaryIndex>
	<ReplacementKey>PackCodeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HMIMPackCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Calculation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HMIMPackCalculation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalculationUOM</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HMIMPackCalculationUOM</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PackCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PackCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalculationUOM</Name>
					<Field>CalculationUOM</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>