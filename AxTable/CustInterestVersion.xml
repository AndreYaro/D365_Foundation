<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInterestVersion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        CustInterest custInterest;
        SysDateEffectiveDataManager sysDateEffectiveDataManager = SysDateEffectiveDataManager::construct(SysDateEffectiveSetupType::CustInterest);

        custInterest = CustInterest::find(this.CustInterest, true);

        if (this.RecId && custInterest && sysDateEffectiveDataManager.isOnlyVersion(this.CustInterest))
        {
            ttsbegin;

            custInterest.delete();

            ttscommit;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CustInterestVersionRecId _custInterestVersionRecId)
    {
        boolean found = true;

        if (!CustInterestVersion::exist(_custInterestVersionRecId))
        {
            found = checkFailed(strFmt(CustInterestVersion::txtNotExist(), _custInterestVersionRecId));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>CustInterestVersion</c> table exists.
    /// </summary>
    /// <param name="_custInterestVersionRecId">
    ///    The record ID of the <c>CustInterestVersion</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(CustInterestVersionRecId _custInterestVersionRecId)
    {
        boolean found;

        found = (select firstonly RecId from custInterestVersion
                    where custInterestVersion.RecId == _custInterestVersionRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CustInterestVersion</c> table exists.
    /// </summary>
    /// <param name="_custInterestRecId">
    /// The record ID of the <c>CustInterest</c> record.
    /// </param>
    /// <param name="_dateToValidate">
    /// The date to use to find the version for interest calculation.
    /// </param>
    /// <returns>
    /// <c>true</c> if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByDate(CustInterestRecId _custInterestRecId, date _dateToValidate)
    {
        return (select firstonly validtimestate(_dateToValidate) custInterestVersion
                    where custInterestVersion.CustInterest == _custInterestRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustInterestVersion</c> table.
    /// </summary>
    /// <param name="_custInterestVersionRecId">
    ///    The record ID of the <c>CustInterestVersion</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustInterestVersion</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CustInterestVersion find(
        CustInterestVersionRecId _custInterestVersionRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustInterestVersion custInterestVersion;
        date beginDate;
        date endDate;

        beginDate = dateNull();
        endDate = maxDate();

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custInterestVersion.concurrencyModel(_concurrencyModel);
        }

            custInterestVersion.selectForUpdate(_forUpdate);

            select firstonly validtimestate(beginDate, endDate) custInterestVersion
                where custInterestVersion.RecId == _custInterestVersionRecId;

        return custInterestVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CustInterestVersion</c> table that is based on the transaction
    ///    date and the specified record from the <c>CustInterest</c> table.
    /// </summary>
    /// <param name="_custInterestRecId">
    ///    The record ID of the <c>CustInterest</c> record.
    /// </param>
    /// <param name="_validFromDate">
    ///    The date to use to find the version for interest calculation.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustInterestVersion</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CustInterestVersion findByDate(
        CustInterestRecId _custInterestRecId,
        ValidFromDate _validFromDate,
        boolean _forUpdate = false)
    {
        CustInterestVersion custInterestVersion;

        custInterestVersion.selectForUpdate(_forUpdate);

        select validtimestate(_validFromDate) custInterestVersion
            where custInterestVersion.CustInterest == _custInterestRecId;

        return custInterestVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentVersionByInterestCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the active or current version for the specified interest code.
    /// </summary>
    /// <param name="_custInterestCode">
    ///    The interest code for which the current or active version is to be found.
    /// </param>
    /// <returns>
    ///    A record of the <c>CustInterestVersion</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CustInterestVersion findCurrentVersionByInterestCode(CustInterestCode _custInterestCode)
    {
        CustInterest custInterest;
        CustInterestVersion custInterestVersion;
        date currentDate;

        currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        select validtimestate(currentDate) ValidFrom, ValidTo, CustInterest
            from custInterestVersion
            exists join custInterest
                where custInterest.RecId == custInterestVersion.CustInterest &&
                    custInterest.InterestCode == _custInterestCode;

        return custInterestVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfDateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the number of date versions for the specified interest code record.
    /// </summary>
    /// <param name="_custInterestCode">
    ///    The interest code.
    /// </param>
    /// <returns>
    ///    The number of versions of the <c>CustInterestVersion</c> record.
    /// </returns>
    public static int numberOfDateRecords(CustInterestCode _custInterestCode)
    {
        CustInterestVersion custInterestVersion;
        CustInterest custInterest;
        date beginDate;
        date endDate;

        beginDate = dateNull();
        endDate = maxDate();

        select validtimestate(beginDate, endDate) count(RecId)
            from custInterestVersion
            join RecId from custInterest
                where custInterestVersion.ValidFrom >= beginDate &&
                    custInterestVersion.ValidTo <= endDate &&
                    custInterest.RecId == custInterestVersion.CustInterest &&
                    custInterest.InterestCode == _custInterestCode;

        return any2int(custInterestVersion.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustInterest</ConfigurationKey>
	<DeveloperDocumentation>@SYS183886</DeveloperDocumentation>
	<FormRef>Interest</FormRef>
	<Label>@SYS327673</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CustInterest</TitleField1>
	<TitleField2>ValidTo</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>AccountsReceivable</Modules>
	<ReplacementKey>InterestCodeVersion</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustInterestVersionDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustInterestVersionDetail</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GraceDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustInterestVersion</Name>
			<Label>@SYS183885</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustInterest</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GraceDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInterestDays_PL</Name>
			<Label>@GLS110929</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInterestDays_PL</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustInterest</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustInterestRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GraceDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PositiveDays</ExtendedDataType>
			<Label>@SYS11031</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>TaxInterestDays_PL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustTaxInterestDays_PL</ExtendedDataType>
			<Label>@GLS110931</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InterestCodeVersion</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustInterest</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysDateEffectiveVersion</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ValidFrom</MapField>
					<MapFieldTo>ValidFrom</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ValidTo</MapField>
					<MapFieldTo>ValidTo</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParentId</MapField>
					<MapFieldTo>CustInterest</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustInterest</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInterest</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Parent</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>Child</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInterest</Name>
					<Field>CustInterest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>