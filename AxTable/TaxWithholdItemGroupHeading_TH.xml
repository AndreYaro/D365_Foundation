<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdItemGroupHeading_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdItemGroupHeading_TH extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>taxWithholdRevenueDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of withholding tax revenue.
    /// </summary>
    /// <returns>
    /// Returns the description of withholding tax revenue.
    /// </returns>
    Description taxWithholdRevenueDescription()
    {
        return TaxWithholdRevenueTable_TH::find(this.TaxWithholdRevenueTable_TH).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        #ISOCountryRegionCodes

        ret = super();

        if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        {
            if (!this.TaxWithholdRevenueTable_TH)
            {
                ret = checkFailed(strFmt("@SYS116347", fieldPName(TaxWithholdItemGroupHeading_TH, TaxWithholdRevenueTable_TH)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(TaxWithholdItemGroup_TH   _taxWithholdItemGroup)
    {
        boolean retValue = true;

        if (!TaxWithholdItemGroupHeading_TH::exist(_taxWithholdItemGroup))
        {
            retValue = checkFailed(strFmt(TaxWithholdItemGroupHeading_TH::txtNotExist(), _taxWithholdItemGroup));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>TaxWithholdItemGroupHeading_TH</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_taxWithholdItemGroup">
    /// The withholding tax item group.
    /// </param>
    /// <returns>
    /// Returns true if record exists; otherwise, false.
    /// </returns>
    static boolean exist(TaxWithholdItemGroup_TH   _taxWithholdItemGroup)
    {
        if (_taxWithholdItemGroup)
            return (select taxWithholdItemGroupHeading_TH
                        where taxWithholdItemGroupHeading_TH.TaxWithholdItemGroup == _taxWithholdItemGroup
                   ).RecId != 0;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWithholdItemGroupHeading_TH</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The unique record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A buffer that contains the <c>TaxWithholdItemGroupHeading_TH</c> table.
    /// </returns>
    public static TaxWithholdItemGroupHeading_TH find(
        recId                   _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdItemGroupHeading_TH taxWithholdItemGroupHeading_TH;

        taxWithholdItemGroupHeading_TH.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdItemGroupHeading_TH.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdItemGroupHeading_TH
            where
                taxWithholdItemGroupHeading_TH.RecId == _recId;

        return taxWithholdItemGroupHeading_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS314131";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxWithholdItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets withholding item tax group header by given withholding item tax group name.
    /// </summary>
    /// <param name = "_taxWithholdItemGroup_TH">withholding item tax group name</param>
    /// <param name = "_forupdate">whether the buffer will be used for update</param>
    /// <returns>buffer of withholding item tax group header</returns>
    public static TaxWithholdItemGroupHeading_TH findByTaxWithholdItemGroup(
        TaxWithholdItemGroup_TH _taxWithholdItemGroup_TH,
        boolean _forupdate = false)
    {
        TaxWithholdItemGroupHeading_TH taxWithholdItemGroupHeading_TH;

        taxWithholdItemGroupHeading_TH.selectForUpdate(_forupdate);
        select firstonly taxWithholdItemGroupHeading_TH
            where taxWithholdItemGroupHeading_TH.TaxWithholdItemGroup == _taxWithholdItemGroup_TH;

        return taxWithholdItemGroupHeading_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and runs one form <c>TaxWithholdItemGroup_TH</c>.
    /// </summary>
    /// <param name="_taxWithholdItemGroupHeading_TH">
    /// The <c>TaxWithholdItemGroupHeading_TH</c> record.
    /// </param>
    public static void jumpRef(Common _taxWithholdItemGroupHeading_TH)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(TaxWithholdItemGroup_TH), MenuItemType::Display);
        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            throw error("@SYS81158");
        }

        Args    args = new Args();
        args.record(_taxWithholdItemGroupHeading_TH);

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean    ret;

        ret = super();

        if (ret)
        {
            TaxWithholdTrans    taxWithholdTrans;

            select firstonly RecId from taxWithholdTrans
                where taxWithholdTrans.TaxWithholdItemGroupHeading_TH == this.RecId
                    && taxWithholdTrans.Posted == NoYes::Yes;

            if (taxWithholdTrans.RecId)
            {
                ret = checkFailed("@Tax_WithholdTax:CannotDeleteTaxWithholdItemGroup");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS320023</DeveloperDocumentation>
	<FormRef>TaxWithholdItemGroup_TH</FormRef>
	<Label>@SYS314129</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdItemGroup</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TaxWithholdItemGroupIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxWithholdItemGroupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TaxWithholdOnItem_TH</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TaxWithholdOnItem_TH</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdItemGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdRevenueTable_TH</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdItemGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdItemGroup_TH</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdRevenueTable_TH</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdRevenueCodeId_TH</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWithholdRevenueTable_THIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdRevenueTable_TH</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdItemGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdItemGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdRevenueTable_TH</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdRevenueTable_TH</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdRevenueTable_TH</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdRevenueTable_TH_TaxWithholdItemGroupHeading_TH</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdRevenueTable_TH</Name>
					<Field>TaxWithholdRevenueTable_TH</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>