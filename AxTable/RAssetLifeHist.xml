<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetLifeHist</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetLifeHist extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        this.updateStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that specifies whether the a new reason code should be set.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        ReasonCode  reasonCode = _reasonCode;

        if (_set)
        {
            if (this.ReasonRefRecID == 0)
            {
                this.ReasonRefRecID = ReasonTableRef::createFromCode(reasonCode);
            }
            else
            {
                this.ReasonRefRecID = ReasonTableRef::updateCode(reasonCode, this.ReasonRefRecID);
            }

            // Updated the reason comment with the default value for the updated reason code
            this.editReasonComment(_set,ReasonTable::find(reasonCode).Description);
        }
        else
        {
            reasonCode = ReasonTableRef::find(this.ReasonRefRecID).Reason;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the reason comment.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether a new reason comment should be set.
    /// </param>
    /// <param name="_reasonComment">
    ///    The new reason comment when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    ///    The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    //BP Deviation Documented
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        ReasonComment reasonComment = _reasonComment;

        if (_set)
        {
            // If the ReasonRefRecID is 0, then create a new ReasonTableRef record
            // otherwise, update the existing record.
            if (this.ReasonRefRecID == 0)
            {
               this.ReasonRefRecID = ReasonTableRef::createFromComment(reasonComment);
            }
            else
            {
               this.ReasonRefRecID = ReasonTableRef::updateComment(reasonComment,this.ReasonRefRecID);
            }
        }

        if (this.ReasonRefRecID)
        {
            reasonComment = ReasonTableRef::find(this.ReasonRefRecID).ReasonComment;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the updateStandards method to update the linked value model record.
    /// </summary>
    public void insert()
    {
        super();

        this.updateStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current history line is the last one.
    /// </summary>
    /// <returns>
    /// true if the current history line is the last one; otherwise, false.
    /// </returns>
    public boolean isLast()
    {
        RAssetLifeHist  lifeHist;

        select firstonly RecId from lifeHist
            where lifeHist.AccountNum == this.AccountNum  
                && lifeHist.AssetStandardId == this.AssetStandardId
                && lifeHist.ChangeDate >  this.ChangeDate;

        return !lifeHist.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a specified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field to modify.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        RAssetStandards standard = RAssetStandards::find(this.AccountNum, this.AssetStandardId);
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RAssetLifeHist, SubGroupId):
                this.NewFactor = this.SubGroupId
                    ? RAssetSubGroup::find(this.SubGroupId, standard.AssetGroup).Factor
                    : 1.0;
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the updateStandards method to update the linked value model record.
    /// </summary>
    public void update()
    {
        super();

        this.updateStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStandards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the linked <c>RAssetStandards</c> table record after the changes of the current <c>RAssetLifeHist</c> line.
    /// </summary>
    public void updateStandards()
    {
        RAssetStandards rAssetStandards = RAssetStandards::find(this.AccountNum,
            this.AssetStandardId,
            true);
        RAssetLifeHist history = RAssetLifeHist::findDateLifeTime(this.AccountNum,
            maxDate(),
            this.AssetStandardId);

        if (rAssetStandards.RecId)
        {
            rAssetStandards.SubGroupId = history.SubGroupId;
            rAssetStandards.rAssetDeprProfile = history.rAssetDeprProfile;
            rAssetStandards.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (RAssetTable::find(this.AccountNum).RecId && ! this.isLast())
        {
            ret = checkFailed("@GLS63377");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        const int monthsPerYear = 12;
        RAssetStandards standard = RAssetStandards::find(this.AccountNum, this.AssetStandardId);
        RAssetTableInterval  assetInterval = RAssetTableInterval::construct(standard, standard.LastDepDate);
        boolean ret = super(_p1);

        if (ret)
        {
            switch(_p1)
            {
                case fieldNum(RAssetLifeHist, NewLife):
                case fieldNum(RAssetLifeHist, SubGroupId):
                case fieldNum(RAssetLifeHist, NewFactor):
                case fieldNum(RAssetLifeHist, ChangeDate):

                    if (this.NewFactor <= 0)
                    {
                        ret = checkFailed("@GLS116269");
                    }

                    if (RAssetDeprProfile::find(this.rAssetDeprProfile).DeprMethod == RAssetDeprMethod::SumYears
                        && this.NewLife mod monthsPerYear)
                    {
                        ret = checkFailed("@GLS116764");
                    }

                    if (_p1 == fieldNum(RAssetLifeHist, NewLife)
                        && this.NewLife > RAssetGroup::find(standard.AssetGroup).Lifetime
                        && this.AssetStandardId == RAssetParameters::standardTaxIdDefault()
                        && ret)
                    {
                        ret = checkFailed("@GLS117077");
                    }

                    if (this.ChangeDate
                        && standard.LastDepDate
                        && this.ChangeDate < assetInterval.getStartDate(standard.LastDepDate))
                    {
                        ret = checkFailed("@GLS116215");
                    }

                    if (ret
                        && _p1 == fieldNum(RAssetLifeHist, ChangeDate)
                        && this.ChangeDate < (select maxof(ChangeDate) from rAssetLifeHist
                            where rAssetLifeHist.AccountNum == standard.AssetId
                                && rAssetLifeHist.AssetStandardId == standard.AssetStandardId).ChangeDate)
                    {
                        ret = checkFailed("@GLS116215");
                    }
                    break;

                default:
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ReasonTable reasonTable;
        ReasonCode reasonCode;
        boolean ret = super();

        if (!RAssetDeprProfile::check(this.rAssetDeprProfile,
            this.NewLife,
            0,
            RAssetTable::find(this.AccountNum).AssetUse,
            this.NewFactor,
            RAssetGroup::find(RAssetStandards::find(this.AccountNum, this.AssetStandardId).AssetGroup).DepreciationRate))
        {
            ret = checkFailed("@GLS116245");
        }

        if (ret
            && this.NewFactor <= 0)
        {
            ret = checkFailed("@GLS116269");
        }

        if (this.ReasonRefRecID)
        {
            reasonCode = ReasonTableRef::find(this.ReasonRefRecID).Reason;
        }

        if (ret
            && reasonCode != '')
        {
            reasonTable = ReasonTable::find(reasonCode);
            if (reasonTable.RecId == 0)
            {
                  ret = checkFailed(strFmt("@SYS112224", reasonCode, fieldPName(ReasonTable, Reason), tablePName(ReasonTable)));
            }
        }

        if (ret)
        {
            if (reasonCode == '')
            {
                if (RAssetParameters::find().AssetChanges)
                {
                    //The Reason code required.
                    ret = checkFailed(strFmt("@SYS110217", "@SYS111246"));
                }
            }
            else
            {
                // If a Reason code is blank then these validations will not occur.
                if (reasonTable.rAsset == NoYes::No)
                {
                    // The Reason code is not active for 'Asset' transactions.
                    ret = checkFailed("@SYS115522");
                }
            }
        }

        if (ret
            && this.ChangeDate < (select maxof(ChangeDate) from rAssetLifeHist
                where rAssetLifeHist.AccountNum == this.AccountNum
                    && rAssetLifeHist.AssetStandardId == this.AssetStandardId
                    && rAssetLifeHist.RecId != this.RecId).ChangeDate)
        {
            ret = checkFailed("@GLS116215");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RAssetLifeHist find(RAssetId _assetId,
        RAssetStandardId _standardId,
        TransDate _changeDate,
        boolean _forUpdate = false)
    {
        RAssetLifeHist hist;

        if (_assetId
            && _standardId)
        {
            hist.selectForUpdate(_forUpdate);

            select firstonly hist
                where hist.AccountNum == _assetId
                    && hist.AssetStandardId == _standardId
                    && hist.ChangeDate == _changeDate;
        }

        return hist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDateLifeTime</Name>
				<Source><![CDATA[
    public static RAssetLifeHist findDateLifeTime(RAssetId _assetId,
        RAssetTransDate _assetTransDate,
        RAssetStandardId _assetStandardId,
        boolean _forUpdate = false)
    {
        RAssetLifeHist assetLifeHist;

        if (_assetId
            && _assetStandardId)
        {
            assetLifeHist.selectForUpdate(_forUpdate);

            select firstonly assetLifeHist
                order by ChangeDate desc
                where assetLifeHist.AccountNum == _assetId
                    && assetLifeHist.ChangeDate <= _assetTransDate
                    && assetLifeHist.AssetStandardId == _assetStandardId;
        }

        return assetLifeHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFirstLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts automatically the first line in the <c>RAssetLifeHist</c> history table after the asset value model is saved.
    /// </summary>
    /// <param name="_assetStandards">
    /// A buffer containing <c>RAssetStandards</c> table record.
    /// </param>
    public static void insertFirstLine(RAssetStandards _assetStandards)
    {
        RAssetLifeHist  assetLifeHist = RAssetLifeHist::findDateLifeTime(_assetStandards.AssetId,
            dateMax(),
            _assetStandards.AssetStandardId,
            true);

        if (!assetLifeHist.ChangeDate)
        {
            assetLifeHist.ChangeDate = dateNull();
            assetLifeHist.NewLife = RAssetGroup::find(_assetStandards.AssetGroup).Lifetime;
            assetLifeHist.NewFactor = _assetStandards.SubGroupId
                ? RAssetSubGroup::find(_assetStandards.SubGroupId, _assetStandards.AssetGroup).Factor
                : 1.0;
            assetLifeHist.rAssetDeprProfile = _assetStandards.rAssetDeprProfile;
            assetLifeHist.SubGroupId = _assetStandards.SubGroupId;

            if (assetLifeHist.RecId)
            {
                assetLifeHist.doUpdate();
            }
            else
            {
                assetLifeHist.AssetStandardId = _assetStandards.AssetStandardId;
                assetLifeHist.AccountNum = _assetStandards.AssetId;
                assetLifeHist.doInsert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RAssetLifeHistory</FormRef>
	<Label>@GLS116250</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>ChangeDate</TitleField2>
	<ClusteredIndex>AccDateTimeUsrIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NewLife</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChangeDate</Name>
			<Label>@SYS54971</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChangeDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Changes</Name>
			<Label>@GLS116254</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeprProfile</Name>
			<Label>@GLS116114</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RAssetDeprProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SubGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Factor</Name>
			<Label>@GLS116640</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NewFactor</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetStandardId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LifeTime</Name>
			<Label>@SYS54367</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NewLife</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SYS107174</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonRefRecID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetStandardId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetStandardId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ChangeDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetDepStartDate</ExtendedDataType>
			<Label>@SYS7402</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NewFactor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetFactor</ExtendedDataType>
			<Label>@GLS116638</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NewLife</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetLifeTime</ExtendedDataType>
			<Label>@GLS116162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonRefRecID</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubGroupId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>RAssetSubGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RAssetDeprProfile</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetDeprProfileRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccDateTimeUsrIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetStandardId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ChangeDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AssetDepreciationProfileIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RAssetDeprProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetDeprProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetDeprProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetDeprProfile</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetLifeHist</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RAssetDeprProfile</Name>
					<Field>RAssetDeprProfile</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetStandards</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetStandards</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetStandards</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RAssetLifeHist</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetStandardId</Name>
					<Field>AssetStandardId</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetStandardTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetStandardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetStandardId</Name>
					<SourceEDT>RAssetStandardId</SourceEDT>
					<Field>AssetStandardId</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetSubGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetSubGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubGroupId</Name>
					<SourceEDT>RAssetSubGroupId</SourceEDT>
					<Field>SubGroupId</Field>
					<RelatedField>SubGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetLifeHist</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetLifeHist</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonRefRecID</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonRefRecID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>