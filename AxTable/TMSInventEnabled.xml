<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSInventEnabled</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSInventEnabled extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a record to the <c>TMSInventEnabled</c> table with the specified item ID if the record doesn't already exist.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to add.
    /// </param>
    public static void addItem(ItemId _itemId)
    {
        TMSInventEnabled        inventEnabled;

        if (!TMSInventEnabled::exist(_itemId))
        {
            ttsbegin;
            inventEnabled.ItemId = _itemId;
            if (!inventEnabled.validateWrite())
            {
                throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSInventEnabled)));
            }
            else
            {
                inventEnabled.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TMSInventEnabled</c> table exists.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static TMSEnabled exist(ItemId _itemId)
    {
        return _itemId &&
            isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)) &&
            (select firstonly RecId from tmsInventEnabled
                where tmsInventEnabled.ItemId == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TMSInventEnabled</c> table.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TMSInventEnabled</c> table; otherwise, an empty record.
    /// </returns>
    static TMSInventEnabled find(ItemId _itemId, boolean _forupdate = false)
    {
        TMSInventEnabled  inventEnabled;

        if (_itemId && isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            inventEnabled.selectForUpdate(_forupdate);

            select firstonly inventEnabled
                where inventEnabled.ItemId == _itemId;
        }

        return inventEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a record from the <c>TMSInventEnabled</c> table with the specified item ID if the record exists.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to remove.
    /// </param>
    public static void removeItem(ItemId _itemId)
    {
        TMSInventEnabled inventEnabled;

        ttsbegin;
        delete_from inventEnabled
            where inventEnabled.ItemId == _itemId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the record to the <c>TMSInventEnabled</c> table with the specified item ID if we want to enable the item for TMS
    /// Removes the record from the <c>TMSInventEnabled</c> table with the specified item ID if we want to disable the item for TMS
    /// </summary>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> to update.
    /// </param>
    /// <param name="_tmsEnabled">
    /// true if we want to enable item for TMS; otherwise, false.
    /// </param>
    public static void updateItem(ItemId _itemId, TMSEnabled _tmsEnabled)
    {
        if (_tmsEnabled)
        {
            TMSInventEnabled::addItem(_itemId);
        }
        else
        {
            TMSInventEnabled::removeItem(_itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1925</DeveloperDocumentation>
	<FormRef>EcoResProductDetailsExtended</FormRef>
	<Label>@TRX735</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemIdIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>ItemIdIdx</PrimaryIndex>
	<ReplacementKey>ItemIdIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<RelationContext>InventTable</RelationContext>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>