<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateSourceDimension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerConsolidateSourceDimension extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean             ret;
        DimensionAttribute  dimensionAttribute;

        if (this.Specification == LedgerConsDim::None && this.Ordinal != 0)
        {
            // All Dimension Attributes that have a specification of None must have a segment order of 0.
            ret = false;
            select firstonly Name from dimensionAttribute where DimensionAttribute.RecId ==this.DimensionAttribute;
            info(strFmt("@SYS335164","@SYS303748","@SYS1369","@SYS8956"));
        }
        else if (this.Specification != LedgerConsDim::None && this.Ordinal == 0)
        {
            // All Dimension Attributes that have a specification other than None must have a segment order > 0.
            ret = false;
            select firstonly Name from dimensionAttribute where DimensionAttribute.RecId ==this.DimensionAttribute;
            info(strFmt("@SYS335165","@SYS303748","@SYS1369","@SYS8956"));
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>LedgerConsolidateSourceDimension</c> table;
    ///    otherwise, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerConsolidateSourceDimension</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;

        if (!LedgerConsolidateSourceDimension::exist(_recId))
        {
            ret = checkFailed(strfmt(LedgerConsolidateSourceDimension::txtNotExist(), tablestr(LedgerConsolidateSourceDimension)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record exists in the <c>LedgerConsolidateSourceDimension</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerConsolidateSourceDimension</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId && (select firstonly RecId from ledgerConsolidateSourceDimension
                    where ledgerConsolidateSourceDimension.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LedgerConsolidateSourceDimension</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerConsolidateSourceDimension</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when it reads records; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LedgerConsolidateSourceDimension</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerConsolidateSourceDimension find(
    RecId         _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerConsolidateSourceDimension ledgerConsolidateSourceDimension;

        ledgerConsolidateSourceDimension.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerConsolidateSourceDimension.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerConsolidateSourceDimension
             where ledgerConsolidateSourceDimension.RecId == _recId;

        return ledgerConsolidateSourceDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>LedgerConsolidateSourceDimension</c> table by using the specified record
    ///    ID.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LedgerConsolidateSourceDimension</c> record to find
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LedgerConsolidateSourceDimension</c> table; otherwise, an empty record.
    /// </returns>
    public static LedgerConsolidateSourceDimension findByRecId(
    RecId _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerConsolidateSourceDimension ledgerConsolidateSourceDimension;

        ledgerConsolidateSourceDimension.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerConsolidateSourceDimension.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerConsolidateSourceDimension
            where ledgerConsolidateSourceDimension.RecId == _recId;

        return ledgerConsolidateSourceDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyDimensionMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source dimensions through source dimensions mapping.
    /// </summary>
    /// <param name="_sourceCompany">
    /// The data area ID of the source company.
    /// </param>
    /// <returns>
    /// A map that represents the source dimension mapping.
    /// </returns>
    /// <remarks>
    /// The map key is the record ID of the <c>DimensionAttribute</c> record for the source dimension. The
    /// map value is a container that holds the values defined by the <c>LedgerConsolidate</c> macro.
    /// </remarks>
    public static Map getCompanyDimensionMapping(CompanyId _sourceCompany)
    {
        DimensionAttribute                      dimAttribute;
        LedgerConsolidateSourceDimension        consSourceDimension;
        Map                                     companyDimensionMapping;
        container                               dimensionMappingValue;

        // Validate input parameters
        if (!_sourceCompany)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Fill map
        companyDimensionMapping = new Map(Types::Int64, Types::Container);
        while select DimensionAttribute, Specification, Ordinal from consSourceDimension
        {
            // Skip main account dimension attributes
            select firstonly crosscompany RecId from dimAttribute
                where dimAttribute.RecId == consSourceDimension.DimensionAttribute &&
                    dimAttribute.Type != DimensionAttributeType::MainAccount;
            if (dimAttribute)
            {
                dimensionMappingValue = [consSourceDimension.Specification, consSourceDimension.Ordinal, dimAttribute.RecId];
                companyDimensionMapping.insert(consSourceDimension.DimensionAttribute, dimensionMappingValue);
            }
        }

        return companyDimensionMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdvConsolidations</ConfigurationKey>
	<DeveloperDocumentation>@SYS327347</DeveloperDocumentation>
	<Label>@SYS303749</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>DimensionAttribute</TitleField1>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Specification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordinal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SourceDimension</Name>
			<Label>@SYS303749</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionAttribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Specification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Ordinal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionAttribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS318800</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Ordinal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ConsolidationOrdinal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Specification</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS8956</Label>
			<EnumType>LedgerConsDim</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceDimensionIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>DimensionAttribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttribute</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerConsolidateSourceDimension</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionAttribute</Name>
					<Field>DimensionAttribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>