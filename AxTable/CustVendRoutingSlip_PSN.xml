<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendRoutingSlip_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class CustVendRoutingSlip_PSN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();

        this.IssueDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>CustVendRoutingSlip_PSN</c> table and shows an error message if it does not.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _recId)
    {
        boolean ret = true;

        if (!CustVendRoutingSlip_PSN::exist(_recId))
        {
            ret = checkFailed(strFmt(CustVendRoutingSlip_PSN::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRoutingSlipWithNoReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if there are any <c>CustVendDirective_PSN</c> records that reference the <c>CustVendRoutingSlip_PSN</c>
    /// record associated with the passed in <c>CustVendRoutingSlipRecId_PSN</c> value and deletes the <c>CustVendRoutingSlip_PSN</c>
    /// record if there are no references found.
    /// </summary>
    /// <param name="_recId">
    /// The <c>RecId</c> field value of the <c>CustVendRoutingSlip_PSN</c> record to delete if there are no references to it.
    /// </param>
    public static void deleteRoutingSlipWithNoReferences(CustVendRoutingSlipRecId_PSN _recId)
    {
        CustVendRoutingSlip_PSN custVendRoutingSlip = CustVendRoutingSlip_PSN::find(_recId, true);
        CustDirective_PSN       custDirective;
        VendDirective_PSN       vendDirective;

        if (custVendRoutingSlip)
        {
            if (custVendRoutingSlip is VendRoutingSlip_PSN)
            {
                select firstOnly vendDirective
                    where vendDirective.VendRoutingSlip_PSN == _recId;

                if (!vendDirective)
                {
                    ttsBegin;
                    custVendRoutingSlip.delete();
                    ttsCommit;
                }
            }
            else if (custVendRoutingSlip is CustRoutingSlip_PSN)
            {
                select firstOnly custDirective
                    where custDirective.CustRoutingSlip_PSN == _recId;

                if (!custDirective)
                {
                    ttsBegin;
                    custVendRoutingSlip.delete();
                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>CustVendRoutingSlip_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custVendRoutingSlip_PSN
                where
                     custVendRoutingSlip_PSN.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>CustVendRoutingSlip_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>CustVendRoutingSlip_PSN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A base enum value which indicates the concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CustVendRoutingSlip_PSN</c> table; otherwise, an empty record.
    /// </returns>
    public static CustVendRoutingSlip_PSN find(
        CustVendRoutingSlipRecId_PSN _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustVendRoutingSlip_PSN custVendRoutingSlip;

        custVendRoutingSlip.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custVendRoutingSlip.concurrencyModel(_concurrencyModel);
        }

        select firstonly custVendRoutingSlip
            where custVendRoutingSlip.RecId == _recId;

        return custVendRoutingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the ID of the label to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    ///     A string indicating the label ID.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@GLS223207</DeveloperDocumentation>
	<Label>@GLS223196</Label>
	<TitleField1>RecId</TitleField1>
	<TitleField2>IssueDate</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>AccountsReceivable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IssueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IssueDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendRoutingSlipIssueDate_PSN</ExtendedDataType>
			<Label>@GLS223225</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>