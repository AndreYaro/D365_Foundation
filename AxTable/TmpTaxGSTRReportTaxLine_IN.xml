<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpTaxGSTRReportTaxLine_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TmpTaxGSTRReportTaxLine_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromModelClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table fields from the given GSTR line model.
    /// </summary>
    /// <param name="_lineContract">
    /// The line model to initialize data from.
    /// </param>
    public void initFromModelClass(TaxGSTRReportContractLine_IN _lineContract)
    {
        ItemId itemId = _lineContract.parmItemId();
        
        InventTableModule inventTableModule;
        select firstonly UnitId from inventTableModule
            where inventTableModule.ItemId == itemId;

        // For grouping purposes, to help determine which transaction goes onto which report/tab
        this.TaxDirection = _lineContract.getTaxDirection();
        this.TransCategory = _lineContract.getTransCategory();

        this.CessAmount = _lineContract.parmCESSAmount();
        this.CustomerBillingGSTIN = _lineContract.parmGstin();
        this.Description = _lineContract.parmItemDescription();
        this.InvoiceDate = _lineContract.parmInvoiceDate();
        this.InvoiceNumber = _lineContract.parmInvoiceNumber();
        this.InvoiceValue = _lineContract.parmTaxableValue() + _lineContract.parmCGSTAmount() + _lineContract.parmSGSTAmount() + _lineContract.parmIGSTAmount() + _lineContract.parmCESSAmount(); // Include CESS amount
        this.IsReverseCharge = _lineContract.parmIsReverseChargeEnum() == NoYes::Yes;
        this.IsExportImport = _lineContract.parmIsExportImportEnum() == NoYes::Yes;
        this.IsInterState = _lineContract.parmIsInterstateEnum();
        this.WouldYouClaimRefund_IN = _lineContract.parmWouldYouClaimRefundEnum();

        // RefundValue = total value: item taxable + IGST + CGST + SGST + CESS for non-payment/refund, and just taxable value otherwise
        if (_lineContract.parmTransCategoryEnum() == TaxTransactionCategory_IN::PaymentVoucher
            && _lineContract.parmTransCategoryEnum() == TaxTransactionCategory_IN::RefundVoucher)
            if (this.TransCategory == TaxTransactionCategory_IN::PaymentVoucher
                || this.TransCategory == TaxTransactionCategory_IN::RefundVoucher)
        {
            this.RefundValue = _lineContract.parmTaxableValue();
        }
        else
        {
            this.RefundValue = _lineContract.parmTaxableValue() + _lineContract.parmIGSTAmount() + _lineContract.parmCGSTAmount() + _lineContract.parmSGSTAmount() + _lineContract.parmCESSAmount();
        }

        this.OriginalTransactionId = _lineContract.parmOriginalTransactionID();
        this.OriginalTransactionDate = _lineContract.parmOriginalTransactionDate();

        if (_lineContract.parmOriginalTransactionId() != '')
        {
            this.OriginalTransactionId = _lineContract.parmOriginalTransactionID();
            this.OriginalTransactionDate = _lineContract.parmOriginalTransactionDate();
        }
        else
        {
            this.OriginalTransactionId = _lineContract.parmOriginalInvoiceNumber();
            this.OriginalTransactionDate = _lineContract.parmOriginalInvoiceDate();
        }

        this.OriginalTotalInvoiceValue = _lineContract.getOriginalTransactionTotalValue();
        this.ShippingBillDate = _lineContract.parmShippingBillDate();
        this.ShippingBillNumber = _lineContract.parmShippingBillNumber();
        this.StatePlaceOfSupplyLongForm = _lineContract.parmPlaceOfSupplyLongForm();
        this.TaxableValue = _lineContract.parmTaxableValue();
        this.TaxRate = _lineContract.parmCGSTRate() + _lineContract.parmSGSTRate() + _lineContract.parmIGSTRate(); // Exclude CESS rate

        this.CessAmountAdjusted = _lineContract.parmCESSAmount() * _lineContract.getSettledByAdvacedPaymentPercentage();
        this.GrossAdvanceAdjusted = this.TaxableValue * _lineContract.getSettledByAdvacedPaymentPercentage();

        this.HSNCode = _lineContract.parmHsnSacCode();
        this.InventUnitOfMeasure = inventTableModule.UnitId; // Do not use _lineContract.parmUnitOfMeasure() as it will not be normalized in the same unit
        this.InventQuantity = _lineContract.parmInventQty(); // Do not use _lineContract.parmQuantity() as it will not be normalized in the same unit
        this.UnitOfMeasure = _lineContract.parmUnitOfMeasure();
        this.Quantity      = _lineContract.parmQuantity();
        this.TaxAmountCGST = _lineContract.parmCGSTAmount();
        this.TaxAmountIGST = _lineContract.parmIGSTAmount();
        this.TaxAmountSGST = _lineContract.parmSGSTAmount();

        this.ExportImportType = _lineContract.getExportImportType();

        this.ReasonComment = _lineContract.parmReasonComment();
        this.GoodsServices = _lineContract.getGoodsServices();

        this.IsBillOfSupply = _lineContract.getIsBillOfSupply();
        if(this.IsBillOfSupply == NoYes::No && this.TransCategory == TaxTransactionCategory_IN::BillOfSupply)
        {
            this.IsBillOfSupply = NoYes::Yes;
        }

        this.TypeOfBillOfSupply = _lineContract.getTypeOfBillOfSupply();
        this.Voucher = _lineContract.parmVoucher();
        this.GSTTransactionInNumSeq = _lineContract.parmGSTTransactionInNumSeq();

        this.TotalInvoiceValue = _lineContract.parmTotalTransactionValue();
        this.TotalRefundValue = _lineContract.parmTotalTransactionValue();
        this.CustVendName = _lineContract.parmCustVendAccount();
        this.IsSupplyCoveredUnderSec7 = _lineContract.parmIsSupplyCoveredUnderSec7Enum();
        this.PortId = _lineContract.parmPortCode();
        this.BillOfEntryNumber = _lineContract.parmBillOfEntryNumber();
        this.BillOfEntryDate = _lineContract.parmBillOfEntryDate();
        this.IsECommerce = _lineContract.parmIsECommerceEnum();
        this.GstinEcommerce = _lineContract.parmGstinEcommerce();
        this.BillOfEntryValue = _lineContract.parmBillOfEntryValue();
        this.ECommerceOperatorName = _lineContract.parmECommerceOperatorName();
        this.IsExportOrder = _lineContract.parmIsExportOrderEnum();
        this.IsForeignCustVend = _lineContract.parmIsForeignCustVendEnum();
        this.ApplicableRate = _lineContract.parmApplicableRate();
        this.TaxGSTEPZCode_IN = _lineContract.parmEPZCode();
        this.IsImportOrder = _lineContract.parmIsImportOrderEnum();

        this.fillInwardSuppliesType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillInwardSuppliesType</Name>
				<Source><![CDATA[
    private void fillInwardSuppliesType()
    {
        //DE, B2B, SEZWP, SEZWOP
        if (this.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ)
        {
            if (this.TaxRate != 0) // using other flag instead
            {
                this.InwardSuppliesType = TaxInwardSuppliesType_IN::SEZWP;
            }
            else
            {
                this.InwardSuppliesType = TaxInwardSuppliesType_IN::SEZWOP;
            }
        }
        else if (this.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::BTP  ||
                this.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::EHTP ||
                this.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::EOU  ||
                this.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::STP)
        {
            this.InwardSuppliesType = TaxInwardSuppliesType_IN::DE;
        }
        else
        {
            this.InwardSuppliesType = TaxInwardSuppliesType_IN::B2B;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToModelClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an <c>TaxGSTRReportContractLine_IN</c> object based.
    /// on the table values.
    /// </summary>
    /// <returns>
    /// An <c>TaxGSTRReportContractLine_IN</c> object based on the table values.
    /// </returns>
    public TaxGSTRReportContractLine_IN initToModelClass()
    {
        TaxGSTRReportContractLine_IN result = new TaxGSTRReportContractLine_IN();

        result.parmCESSAmount(this.CessAmount);
        result.parmGstin(this.CustomerBillingGSTIN);
        result.parmItemDescription(this.Description);

        result.parmInvoiceDate(this.InvoiceDate);
        result.parmInvoiceNumber(this.InvoiceNumber);
        result.parmInvoiceValue(this.InvoiceValue);
        result.parmIsReverseChargeEnum(this.IsReverseCharge);
        result.parmIsExportImportEnum(this.IsExportImport);

        result.parmOriginalTransactionDate(this.OriginalTransactionDate);
        result.parmOriginalTransactionID(this.OriginalTransactionId);

        result.parmShippingBillDate(this.ShippingBillDate);
        result.parmShippingBillNumber(this.ShippingBillNumber);
        result.parmPlaceOfSupplyLongForm(this.StatePlaceOfSupplyLongForm);
        result.parmTaxableValue(this.TaxableValue);
        result.parmTaxRate(this.TaxRate);

        result.parmTaxDirectionEnum(this.TaxDirection);
        result.parmTransCategoryEnum(this.TransCategory);

        result.parmHsnSacCode(this.HSNCode);
        result.parmUnitOfMeasure(this.UnitOfMeasure);
        result.parmQuantity(this.InventQuantity);
        result.parmCGSTAmount(this.TaxAmountCGST);
        result.parmIGSTAmount(this.TaxAmountIGST);
        result.parmSGSTAmount(this.TaxAmountSGST);

        result.parmExportImportTypeEnum(this.ExportImportType);

        result.parmReasonComment(this.ReasonComment);

        result.parmGoodsServicesEnum(this.GoodsServices);
        result.parmIsBillOfSupplyEnum(this.IsBillOfSupply);

        result.parmVoucher(this.Voucher);

        result.parmCustVendAccount(this.CustVendName);
        result.parmIsSupplyCoveredUnderSec7(this.IsSupplyCoveredUnderSec7);
        result.parmPortCode(this.PortId);
        result.parmBillOfEntryNumber(this.BillOfEntryNumber);
        result.parmBillOfEntryDate(this.BillOfEntryDate);
        result.parmIsECommerceEnum(this.IsECommerce);
        result.parmGstinEcommerce(this.GstinEcommerce);
        result.parmBillOfEntryValue(this.BillOfEntryValue);
        result.parmECommerceOperatorName(this.ECommerceOperatorName);
        result.parmIsInterstateEnum(this.IsInterState);
        result.parmTaxableValueReturned(this.TaxableValueReturned);
        result.parmApplicableRate(this.ApplicableRate);
        result.parmWouldYouClaimRefundEnum(this.WouldYouClaimRefund_IN);
        result.parmInwardSuppliesTypeEnum(this.InwardSuppliesType);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocsResultLineForTransCategory</Name>
				<Source><![CDATA[
    private static boolean addDocsResultLineForTransCategory(TaxTransactionCategory_IN _transCategory,
        String50 _description,
        TmpTaxGSTRReportTaxLine_IN _rawData,
        TaxGSTRReportContractHeader_IN _resultHeader,
        TmpTaxGSTRReportTaxLine_IN _numberSequenceGroups,
        boolean _doValidation)
    {
        const str tabPageDOCS = 'DOCS';
        int64 countInvoicesForNumberSeq;
        boolean ret = _doValidation;

        while select GSTTransactionInNumSeq from _numberSequenceGroups
            group by GSTTransactionInNumSeq
            where _numberSequenceGroups.TaxDirection == TaxDirection::OutgoingTax
                && _numberSequenceGroups.TransCategory == _transCategory
        {
            TaxGSTRReportContractLineOfflineTool_IN offlineResultLine = new TaxGSTRReportContractLineOfflineTool_IN();
            offlineResultLine.parmReportTabPage(tabPageDOCS);
            offlineResultLine.parmLineDescription(_description);

            // count of invoices
            countInvoicesForNumberSeq = 0;
            while select InvoiceNumber from _rawData
                group by InvoiceNumber
                where _rawData.TaxDirection == TaxDirection::OutgoingTax
                    && _rawData.TransCategory == _transCategory
                    && _rawData.GSTTransactionInNumSeq == _numberSequenceGroups.GSTTransactionInNumSeq
            {
                countInvoicesForNumberSeq++;
            }

            offlineResultLine.parmTotalNumber(countInvoicesForNumberSeq);

            // cancelled quantity is not supported
            if (offlineResultLine.parmTotalNumber() != 0)
            {
                // max invoice id for number seq value
                select maxOf(InvoiceNumber) from _rawData
                    where _rawData.TaxDirection == TaxDirection::OutgoingTax
                        && _rawData.TransCategory == _transCategory
                        && _rawData.GSTTransactionInNumSeq == _numberSequenceGroups.GSTTransactionInNumSeq;

                offlineResultLine.parmSerialNumberTo(_rawData.InvoiceNumber);

                // min invoice id
                select firstOnly InvoiceNumber from _rawData
                    order by InvoiceNumber asc
                    where _rawData.TaxDirection == TaxDirection::OutgoingTax
                        && _rawData.TransCategory == _transCategory
                        && _rawData.GSTTransactionInNumSeq == _numberSequenceGroups.GSTTransactionInNumSeq;

                offlineResultLine.parmSerialNumberFrom(_rawData.InvoiceNumber);

                ret = TmpTaxGSTRReportTaxLine_IN::addOfflineLineToHeader(_resultHeader, offlineResultLine, ret);
            }
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineToHeader</Name>
				<Source><![CDATA[
    private static boolean addLineToHeader(TaxGSTRReportContractHeader_IN _resultHeader, TaxGSTRReportContractLine_IN _resultLine, boolean _doValidation)
    {
        boolean ret = _doValidation;

        if (_doValidation)
        {
            ret = TmpTaxGSTRReportTaxLine_IN::validateInvoiceNumber(_resultLine.parmInvoiceNumber());
        }

        _resultHeader.addLine(_resultLine);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOfflineLineToHeader</Name>
				<Source><![CDATA[
    private static boolean addOfflineLineToHeader(TaxGSTRReportContractHeader_IN _resultHeader, TaxGSTRReportContractLineOfflineTool_IN _resultLine, boolean _doValidation)
    {
        boolean ret = _doValidation;

        if (_doValidation)
        {
            ret = TmpTaxGSTRReportTaxLine_IN::validateInvoiceNumber(_resultLine.parmSerialNumberFrom());
            ret = ret && TmpTaxGSTRReportTaxLine_IN::validateInvoiceNumber(_resultLine.parmSerialNumberTo());
        }

        _resultHeader.addOfflineReportLine(_resultLine);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReportTabData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the raw data for the offline GSTR report.
    /// </summary>
    /// <param name="_rawData">
    /// The <c>TmpTaxGSTRReportTaxLine_IN</c> instance containing the raw data.
    /// </param>
    /// <param name="_resultHeader">
    /// The header model for the report.
    /// </param>
    public static void populateReportTabData(TmpTaxGSTRReportTaxLine_IN _rawData, TaxGSTRReportContractHeader_IN _resultHeader)
    {
        const str tabPageB2B = 'B2B';
        const str tabPageB2CL = 'B2CL';
        const str tabPageB2CS = 'B2CS';
        const str tabPageCDNR = 'CDNR';
        const str tabPageCDNUR = 'CDNUR';
        const str tabPageEXP = 'EXP';
        const str tabPageAT = 'AT';
        const str tabPageATADJ = 'ATADJ';
        const str tabPageHSN = 'HSN';
        const str tabPageHSNINCOMPLETE = 'HSNWithoutInventory';
        const str tabPageEXEMPT = 'EXEMPT';
        const str tabPageDOCS = 'DOCS';

        TaxGSTRReportContractLine_IN resultLine = new TaxGSTRReportContractLine_IN();
        TaxGSTRReportContractLineOfflineTool_IN offlineResultLine;

        TmpTaxGSTRReportTaxLine_IN invoiceTotals;
        TmpTaxGSTRReportTaxLine_IN numberSequenceGroups;

        int64 countLines = 0;
        int64 countInvoices;
        int64 countInvoicesForNumberSeq;

        boolean allValidationsSuccessful = true;

        numberSequenceGroups.linkPhysicalTableInstance(_rawData);

        insert_recordset invoiceTotals (InvoiceNumber, TotalInvoiceValue, TotalRefundValue)
        select InvoiceNumber, TotalInvoiceValue, TotalRefundValue from _rawData
        group by _rawData.InvoiceNumber,
                 _rawData.TotalInvoiceValue,
                 _rawData.TotalRefundValue;

        select count(RecId) from invoiceTotals;

        countInvoices = invoiceTotals.RecId;
        
        // Clear any existing data to replace with summarized
        _resultHeader.parmTaxGSTRReportLines(new List(Types::Class));

        // Groupings to be used for each section:
        while select sum(InvoiceValue), sum(TaxableValue), sum(CessAmount) from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.TaxRate,
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.InvoiceDate,
                _rawData.IsReverseCharge,
                _rawData.CustomerBillingGSTIN,
                _rawData.TotalInvoiceValue
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsExportImport == false
                && _rawData.IsBillOfSupply == false
                && (_rawData.HSNCode != '' || _rawData.TaxRate != 0)
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmInvoiceValue(_rawData.TotalInvoiceValue);
            resultLine.parmReportTabPage(tabPageB2B);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // B2CL: (invoiceNumber, taxRate), where CustomerBillingGSTIN == "" AND IsInterState == true AND InvoiceValue > 250000
        // AND (taxDirection == "OutgoingTax" AND transCategory == "GSTInvoice")
        while select sum(InvoiceValue), sum(TaxableValue), sum(CessAmount) from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.InvoiceDate,
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.TaxRate,
                _rawData.TotalInvoiceValue
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && _rawData.CustomerBillingGSTIN == ''
                && _rawData.IsInterState == true
                && _rawData.IsExportImport == false
                && (_rawData.TotalInvoiceValue > 250000 || (_rawData.TotalInvoiceValue < 0 && _rawData.TotalInvoiceValue < -250000))
                && _rawData.IsBillOfSupply == false
                && (_rawData.HSNCode != '' || _rawData.TaxRate != 0)
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmInvoiceValue(_rawData.TotalInvoiceValue);
            resultLine.parmReportTabPage(tabPageB2CL);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // B2CS: (StatePlaceOfSupplyLongForm, taxRate), where CustomerBillingGSTIN == "" AND (IsInterState == false OR InvoiceValue <= 250000)
        // AND (taxDirection == "OutgoingTax" AND transCategory == "GSTInvoice")
        while select sum(TaxableValue), sum(CessAmount) from _rawData
            join TotalInvoiceValue from invoiceTotals
            group by
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.TaxRate
            where _rawData.InvoiceNumber == invoiceTotals.InvoiceNumber
                && _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && _rawData.CustomerBillingGSTIN == ''
                && (_rawData.IsInterState == false || (_rawData.TotalInvoiceValue <= 250000 || (_rawData.TotalInvoiceValue < 0 && _rawData.TotalInvoiceValue >= -250000)))
                && _rawData.IsExportImport == false
                && _rawData.IsBillOfSupply == false
                && (_rawData.HSNCode != '' || _rawData.TaxRate != 0)
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageB2CS);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // CDNR: (RefundVoucherNumber, taxRate), where CustomerBillingSTIN != ""
        // AND (taxDirection == "OutgoingTax" AND (transCategory == "CreditNote" OR transCategory == "DebitNote" OR transCategory == "RefundVoucher"))
        while select sum(RefundValue), sum(InvoiceValue), sum(TaxableValue), sum(CessAmount) from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.TaxRate,
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.InvoiceDate,
                _rawData.IsReverseCharge,
                _rawData.CustomerBillingGSTIN,
                _rawData.OriginalTransactionDate,
                _rawData.OriginalTransactionId,
                _rawData.TransCategory,
                _rawData.TotalRefundValue,
                _rawData.ReasonComment
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && (_rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote || _rawData.TransCategory == TaxTransactionCategory_IN::RefundVoucher)
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsBillOfSupply == false
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageCDNR);
            resultLine.parmInvoiceValue(_rawData.TotalRefundValue); // Use invoice value to store refund value; report must disambiguate based on transaction type
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // CDNUR: (RefundVoucherNumber, taxRate), where CustomerBillingSTIN == "" AND IsInterstate = true AND InvoiceValue > 250000
        // AND (taxDirection == "OutgoingTax" AND (transCategory == "CreditNote" OR transCategory == "DebitNote" OR transCategory == "RefundVoucher"))
        while select sum(RefundValue), sum(InvoiceValue), sum(TaxableValue), sum(CessAmount) from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.TaxRate,
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.InvoiceDate,
                _rawData.IsReverseCharge,
                _rawData.CustomerBillingGSTIN,
                _rawData.OriginalTransactionDate,
                _rawData.OriginalTransactionId,
                _rawData.TransCategory,
                _rawData.TotalRefundValue,
                _rawData.ReasonComment
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && (_rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote || _rawData.TransCategory == TaxTransactionCategory_IN::RefundVoucher)
                && _rawData.CustomerBillingGSTIN == ''
                && _rawData.IsInterState == true
                && (_rawData.OriginalTotalInvoiceValue > 250000 || (_rawData.OriginalTotalInvoiceValue < 0 && _rawData.OriginalTotalInvoiceValue < -250000))
                && _rawData.IsBillOfSupply == false
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageCDNUR);
            resultLine.parmInvoiceValue(_rawData.TotalRefundValue);  // Use invoice value to store refund value; report must disambiguate based on transaction type
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // EXP: (InvoiceNumber, taxRate), where IsExportImport == true
        // AND (taxDirection == "OutgoingTax" AND transCategory == "GSTInvoice")
        while select sum(InvoiceValue), sum(TaxableValue), sum(CessAmount) from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.TaxRate,
                _rawData.InvoiceDate,
                _rawData.ShippingBillDate,
                _rawData.ShippingBillNumber,
                _rawData.TransCategory,
                _rawData.ExportImportType,
                _rawData.TotalInvoiceValue
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && _rawData.IsExportImport == true
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageEXP);
            resultLine.parmInvoiceValue(_rawData.TotalInvoiceValue);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // AT: (StatePlaceOfSupplyLongForm, taxRate), where 1==1
        // AND (taxDirection == "OutgoingTax" AND transCategory == "PaymentVoucher")
        while select sum(TaxableValue), sum(CessAmount) from _rawData
            group by _rawData.StatePlaceOfSupplyLongForm, _rawData.TaxRate
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::PaymentVoucher
                && _rawData.IsBillOfSupply == false
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageAT);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // ATADJ: (StatePlaceOfSupplyLongForm, taxRate), where _rawData.GrossAdvanceAdjusted != 0
        // AND (taxDirection == "OutgoingTax" AND transCategory == "PaymentVoucher")
        while select sum(GrossAdvanceAdjusted), sum(CessAmountAdjusted) from _rawData
            group by _rawData.StatePlaceOfSupplyLongForm, _rawData.TaxRate
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory != TaxTransactionCategory_IN::PaymentVoucher
                && _rawData.TransCategory != TaxTransactionCategory_IN::RefundVoucher
                && _rawData.IsBillOfSupply == false
                && _rawData.GrossAdvanceAdjusted != 0
        {
            resultLine = _rawData.initToModelClass();

            // The actual values are not used on the ATADJ tab, and are repurposed to store adjusted values
            resultLine.parmCESSAmount(_rawData.CessAmountAdjusted);
            resultLine.parmTaxableValue(_rawData.GrossAdvanceAdjusted);

            resultLine.parmReportTabPage(tabPageATADJ);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // HSN
        while select sum(InventQuantity), sum(InvoiceValue), sum(TaxableValue), sum(TaxAmountCGST), sum(TaxAmountSGST), sum(TaxAmountIGST), sum(CessAmount) from _rawData
            group by _rawData.HSNCode, _rawData.Description, _rawData.UnitOfMeasure
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory != TaxTransactionCategory_IN::PaymentVoucher
                && _rawData.TransCategory != TaxTransactionCategory_IN::RefundVoucher
                && (_rawData.HSNCode != '' && _rawData.Description != '' && _rawData.UnitOfMeasure != '' && _rawData.GoodsServices == TaxGoodsServices_IN::Goods)
        {
            if (_rawData.InventQuantity == 0
            && _rawData.InvoiceValue == 0
            && _rawData.TaxableValue == 0)
            {
                continue;
            }

            resultLine = _rawData.initToModelClass();

            resultLine.parmReportTabPage(tabPageHSN);

            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // HSN WITH INCOMPLETE DATA
        while select sum(Quantity), sum(InvoiceValue), sum(TaxableValue), sum(TaxAmountCGST), sum(TaxAmountSGST), sum(TaxAmountIGST), sum(CessAmount) from _rawData
            group by _rawData.HSNCode, _rawData.Description, _rawData.UnitOfMeasure
            while select HSNCode, Description, UnitOfMeasure, Voucher, InvoiceNumber, Quantity, InvoiceValue, TaxableValue, TaxAmountCGST, TaxAmountSGST, TaxAmountIGST, CessAmount from _rawData
                where _rawData.TaxDirection == TaxDirection::OutgoingTax
                    && _rawData.TransCategory != TaxTransactionCategory_IN::PaymentVoucher
                    && _rawData.TransCategory != TaxTransactionCategory_IN::RefundVoucher
                    && (_rawData.HSNCode == '' || _rawData.Description == '' || _rawData.UnitOfMeasure == '' || _rawData.GoodsServices != TaxGoodsServices_IN::Goods)
        {
            resultLine = _rawData.initToModelClass();

            resultLine.parmQuantity(_rawData.Quantity);
            resultLine.parmUnitOfMeasure(_rawData.UnitOfMeasure);

            resultLine.parmReportTabPage(tabPageHSNINCOMPLETE);

            countLines++;
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
        }

        // Warn if result contains too many invoices or lines
        if (countLines > 19000 || countInvoices > 500)
        {
            warning(strFmt("@TaxEngineGSTR:OfflineToolWarnMsgTooManyLines", countLines, countInvoices));
        }

        // EXEMPT:

        // Inter-State supplies to registered persons
        offlineResultLine = new TaxGSTRReportContractLineOfflineTool_IN();
        offlineResultLine.parmReportTabPage('EXEMPT');
        offlineResultLine.parmLineDescription('Inter-State supplies to registered persons');

        while select sum(InvoiceValue) from _rawData
            group by _rawData.TypeOfBillOfSupply
            where _rawData.IsInterState == true
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsBillOfSupply == true
                && _rawData.TypeOfBillOfSupply != TaxTypeOfBillOfSupply_IN::None
                && _rawData.TaxDirection == TaxDirection::OutgoingTax
                && (_rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
                && _rawData.IsExportImport == false
        {
            offlineResultLine.setExemptFieldsFromRawData(_rawData);
        }

        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addOfflineLineToHeader(_resultHeader, offlineResultLine, allValidationsSuccessful);


        // Intra-State supplies to registered persons
        offlineResultLine = new TaxGSTRReportContractLineOfflineTool_IN();
        offlineResultLine.parmReportTabPage('EXEMPT');
        offlineResultLine.parmLineDescription('Intra-State supplies to registered persons');

        while select sum(InvoiceValue) from _rawData
            group by _rawData.TypeOfBillOfSupply
            where _rawData.IsInterState == false
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsBillOfSupply == true
                && _rawData.TypeOfBillOfSupply != TaxTypeOfBillOfSupply_IN::None
                && _rawData.TaxDirection == TaxDirection::OutgoingTax
                && (_rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
                && _rawData.IsExportImport == false
        {
            offlineResultLine.setExemptFieldsFromRawData(_rawData);
        }
        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addOfflineLineToHeader(_resultHeader, offlineResultLine, allValidationsSuccessful);

        // Inter-State supplies to unregistered persons
        offlineResultLine = new TaxGSTRReportContractLineOfflineTool_IN();
        offlineResultLine.parmReportTabPage('EXEMPT');
        offlineResultLine.parmLineDescription('Inter-State supplies to unregistered persons');

        while select sum(InvoiceValue) from _rawData
            group by _rawData.TypeOfBillOfSupply
            where _rawData.IsInterState == true
                && _rawData.CustomerBillingGSTIN == ''
                && _rawData.IsBillOfSupply == true
                && _rawData.TypeOfBillOfSupply != TaxTypeOfBillOfSupply_IN::None
                && _rawData.TaxDirection == TaxDirection::OutgoingTax
                && (_rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
                && _rawData.IsExportImport == false
        {
            offlineResultLine.setExemptFieldsFromRawData(_rawData);
        }
        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addOfflineLineToHeader(_resultHeader, offlineResultLine, allValidationsSuccessful);

        // Intra-State supplies to unregistered persons
        offlineResultLine = new TaxGSTRReportContractLineOfflineTool_IN();
        offlineResultLine.parmReportTabPage(tabPageEXEMPT);
        offlineResultLine.parmLineDescription('Intra-State supplies to unregistered persons');

        while select sum(InvoiceValue) from _rawData
        group by _rawData.TypeOfBillOfSupply
        where _rawData.IsInterState == false
            && _rawData.CustomerBillingGSTIN == ''
            && _rawData.IsBillOfSupply == true
            && _rawData.TypeOfBillOfSupply != TaxTypeOfBillOfSupply_IN::None
            && _rawData.TaxDirection == TaxDirection::OutgoingTax
            && (_rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
            && _rawData.IsExportImport == false
        {
            offlineResultLine.setExemptFieldsFromRawData(_rawData);
        }
        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addOfflineLineToHeader(_resultHeader, offlineResultLine, allValidationsSuccessful);

        // DOCS:
        // Invoice for outward supply
        while select GSTTransactionInNumSeq from numberSequenceGroups
        group by GSTTransactionInNumSeq
        where numberSequenceGroups.TaxDirection == TaxDirection::OutgoingTax
        && numberSequenceGroups.TransCategory == TaxTransactionCategory_IN::GSTInvoice
        && numberSequenceGroups.OriginalTransactionId == ''
        {
            offlineResultLine = new TaxGSTRReportContractLineOfflineTool_IN();
            offlineResultLine.parmReportTabPage(tabPageDOCS);
            offlineResultLine.parmLineDescription('Invoice for outward supply');

            // count of invoices
            countInvoicesForNumberSeq = 0;
            while select InvoiceNumber from _rawData
            group by InvoiceNumber
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && _rawData.OriginalTransactionId == ''
                && _rawData.GSTTransactionInNumSeq == numberSequenceGroups.GSTTransactionInNumSeq
            {
                countInvoicesForNumberSeq++;
            }
            offlineResultLine.parmTotalNumber(countInvoicesForNumberSeq);

            // cancelled quantity is not supported
            if (offlineResultLine.parmTotalNumber() != 0)
            {
                // max invoice id for number seq value
                select maxOf(InvoiceNumber) from _rawData
                where _rawData.TaxDirection == TaxDirection::OutgoingTax
                    && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                    && _rawData.OriginalTransactionId == ''
                    && _rawData.GSTTransactionInNumSeq == numberSequenceGroups.GSTTransactionInNumSeq;
                offlineResultLine.parmSerialNumberTo(_rawData.InvoiceNumber);

                // min invoice id
                select firstOnly InvoiceNumber from _rawData
                order by InvoiceNumber asc
                where _rawData.TaxDirection == TaxDirection::OutgoingTax
                    && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                    && _rawData.OriginalTransactionId == ''
                    && _rawData.InvoiceNumber != ''
                    && _rawData.GSTTransactionInNumSeq == numberSequenceGroups.GSTTransactionInNumSeq;
                offlineResultLine.parmSerialNumberFrom(_rawData.InvoiceNumber);

                allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addOfflineLineToHeader(_resultHeader, offlineResultLine, allValidationsSuccessful);
            }
        }

        // Revised Invoice for outward supply
        while select GSTTransactionInNumSeq from numberSequenceGroups
            group by GSTTransactionInNumSeq
            where numberSequenceGroups.TaxDirection == TaxDirection::OutgoingTax
                && numberSequenceGroups.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && numberSequenceGroups.OriginalTransactionId != ''
        {
            offlineResultLine = new TaxGSTRReportContractLineOfflineTool_IN();
            offlineResultLine.parmReportTabPage(tabPageDOCS);
            offlineResultLine.parmLineDescription('Revised Invoice for outward supply');

            // count of invoices
            countInvoicesForNumberSeq = 0;
            while select InvoiceNumber from _rawData
                group by InvoiceNumber
                where _rawData.TaxDirection == TaxDirection::OutgoingTax
                    && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                    && _rawData.OriginalTransactionId != ''
                    && _rawData.GSTTransactionInNumSeq == numberSequenceGroups.GSTTransactionInNumSeq
            {
                countInvoicesForNumberSeq++;
            }
            offlineResultLine.parmTotalNumber(countInvoicesForNumberSeq);

            // cancelled quantity is not supported
            if (offlineResultLine.parmTotalNumber() != 0)
            {
                // max invoice id for number seq value
                select maxOf(InvoiceNumber) from _rawData
                    where _rawData.TaxDirection == TaxDirection::OutgoingTax
                        && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                        && _rawData.OriginalTransactionId != ''
                        && _rawData.GSTTransactionInNumSeq == numberSequenceGroups.GSTTransactionInNumSeq;
                offlineResultLine.parmSerialNumberTo(_rawData.InvoiceNumber);

                // min invoice id
                select firstOnly InvoiceNumber from _rawData
                    order by InvoiceNumber asc
                    where _rawData.TaxDirection == TaxDirection::OutgoingTax
                        && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                        && _rawData.OriginalTransactionId != ''
                        && _rawData.InvoiceNumber != ''
                        && _rawData.GSTTransactionInNumSeq == numberSequenceGroups.GSTTransactionInNumSeq;
                offlineResultLine.parmSerialNumberFrom(_rawData.InvoiceNumber);

                allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addOfflineLineToHeader(_resultHeader, offlineResultLine, allValidationsSuccessful);
            }
        }

        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addDocsResultLineForTransCategory(TaxTransactionCategory_IN::CreditNote, 'Credit Note', _rawData, _resultHeader, numberSequenceGroups, allValidationsSuccessful);
        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addDocsResultLineForTransCategory(TaxTransactionCategory_IN::DebitNote, 'Debit Note', _rawData, _resultHeader, numberSequenceGroups, allValidationsSuccessful);

        // Receipt is a payment with outgoing direction
        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addDocsResultLineForTransCategory(TaxTransactionCategory_IN::PaymentVoucher, 'Receipt Voucher', _rawData, _resultHeader, numberSequenceGroups, allValidationsSuccessful);
        allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addDocsResultLineForTransCategory(TaxTransactionCategory_IN::RefundVoucher, 'Refund Voucher', _rawData, _resultHeader, numberSequenceGroups, allValidationsSuccessful);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceNumber</Name>
				<Source><![CDATA[
    private static boolean validateInvoiceNumber(str _number)
    {
        const str identifierRegularExpression = @'^[-0-9a-zA-Z\/]*$';

        new InteropPermission(InteropKind::ClrInterop).assert();

        boolean isValid = System.Text.RegularExpressions.Regex::IsMatch(strLRTrim(_number), identifierRegularExpression);

        CodeAccessPermission::revertAssert();

        if (!isValid)
        {
            warning("@TaxEngineGSTR:OfflineToolErrMsgInvoiceWrongRequirments");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReportPurchaseRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the raw data for the new Purchase Register report.
    /// </summary>
    /// <param name="_rawData">
    /// The <c>TmpTaxGSTRReportTaxLine_IN</c> instance containing the raw data.
    /// </param>
    /// <param name="_resultHeader">
    /// The header model for the report.
    /// </param>
    public static void populateReportPurchaseRegister(TmpTaxGSTRReportTaxLine_IN _rawData, TaxGSTRReportContractHeader_IN _resultHeader)
    {
        TaxGSTRReportContractLine_IN resultLine = new TaxGSTRReportContractLine_IN();
        TaxGSTRReportContractLineOfflineTool_IN offlineResultLine;

        TmpTaxGSTRReportTaxLine_IN invoiceTotals;
        TmpTaxGSTRReportTaxLine_IN numberSequenceGroups;

        int64 countLines = 0;
        int64 countInvoices;
        int64 countInvoicesForNumberSeq;

        boolean allValidationsSuccessful = true;

        numberSequenceGroups.linkPhysicalTableInstance(_rawData);
        
        insert_recordset invoiceTotals (InvoiceNumber, TotalInvoiceValue, TotalRefundValue)
        select InvoiceNumber, TotalInvoiceValue, TotalRefundValue from _rawData
            group by _rawData.InvoiceNumber,
                     _rawData.TotalInvoiceValue,
                     _rawData.TotalRefundValue;
       
        select count(RecId) from invoiceTotals;
        
        countInvoices = invoiceTotals.RecId;
        
        // Clear any existing data to replace with summarized
        _resultHeader.parmTaxGSTRReportLines(new List(Types::Class));

        //Purchase Register
        while select  sum(TaxableValue), sum(CessAmount), sum(TaxAmountCGST), sum(TaxAmountSGST), sum(TaxAmountIGST)
            from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.InvoiceDate,
                _rawData.CustVendName,
                _rawData.CustomerBillingGSTIN,
                _rawData.InwardSuppliesType,
                _rawData.TransCategory
            where _rawData.TaxDirection == TaxDirection::IncomingTax
            && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote || _rawData.TransCategory == TaxTransactionCategory_IN::PaymentVoucher)
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsImportOrder == false
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == false
                && (_rawData.IsForeignCustVend == false
                    || (_rawData.IsForeignCustVend == true && _rawData.GoodsServices == TaxGoodsServices_IN::Goods))
        {
            resultLine = _rawData.initToModelClass();

            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // Warn if result contains too many invoices or lines
        if (countLines > 19000 || countInvoices > 500)
        {
            warning(strFmt("@TaxEngineGSTR:OfflineToolWarnMsgTooManyLines", countLines, countInvoices));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReportTabDataNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the raw data for the new offline GSTR report.
    /// </summary>
    /// <param name="_rawData">
    /// The <c>TmpTaxGSTRReportTaxLine_IN</c> instance containing the raw data.
    /// </param>
    /// <param name="_resultHeader">
    /// The header model for the report.
    /// </param>
    public static void populateReportTabDataNew(TmpTaxGSTRReportTaxLine_IN _rawData, TaxGSTRReportContractHeader_IN _resultHeader)
    {
        const str tabPageB2B = 'B2B';
        const str tabPageEXP = 'EXP';
        const str tabPageB2C = 'B2C';
        const str tabPageREV = 'REV';
        const str tabPageIMPG = 'IMPG';
        const str tabPageDE = 'DE';
        const str tabPageIMPS = 'IMPS';
        const str tabPageECOM = 'ECOM';
        const str tabPageSEZ = 'SEZ';
        const str tabPageIMPGSEZ = 'IMPGSEZ';

        TaxGSTRReportContractLine_IN resultLine = new TaxGSTRReportContractLine_IN();
        TaxGSTRReportContractLineOfflineTool_IN offlineResultLine;

        TmpTaxGSTRReportTaxLine_IN invoiceTotals;
        TmpTaxGSTRReportTaxLine_IN numberSequenceGroups;

        int64 countLines = 0;
        int64 countInvoices;
        int64 countInvoicesForNumberSeq;

        boolean allValidationsSuccessful = true;

        numberSequenceGroups.linkPhysicalTableInstance(_rawData);
        
        insert_recordset invoiceTotals (InvoiceNumber, TotalInvoiceValue, TotalRefundValue)
        select InvoiceNumber, TotalInvoiceValue, TotalRefundValue from _rawData
        group by _rawData.InvoiceNumber,
                 _rawData.TotalInvoiceValue,
                 _rawData.TotalRefundValue;
       
        select count(RecId) from invoiceTotals;
        
        countInvoices = invoiceTotals.RecId;
        
        // Clear any existing data to replace with summarized
        _resultHeader.parmTaxGSTRReportLines(new List(Types::Class));
        //B2B
        // Groupings to be used for each section:
        while select sum(InvoiceValue), sum(TaxableValue), sum(CessAmount), sum(TaxAmountCGST), sum(TaxAmountSGST), sum(TaxAmountIGST) from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.TaxRate,
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.InvoiceDate,
                _rawData.CustVendName,
                _rawData.CustomerBillingGSTIN,
                _rawData.TotalInvoiceValue,
                _rawData.HSNCode,
                _rawData.TransCategory,
                _rawData.IsSupplyCoveredUnderSec7,
                _rawData.ApplicableRate
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote || _rawData.TransCategory == TaxTransactionCategory_IN::BillOfSupply)
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsExportImport == false
                && _rawData.HSNCode != ''
                && _rawData.IsECommerce == false
                && _rawData.IsReverseCharge == false
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmInvoiceValue(_rawData.TotalInvoiceValue);
            resultLine.parmReportTabPage(tabPageB2B);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        //B2C
        while select sum(TaxableValue), sum(TaxAmountCGST), sum(TaxAmountSGST), sum(TaxAmountIGST), sum(CessAmount) from _rawData
            group by
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.TaxRate,
                _rawData.IsSupplyCoveredUnderSec7,
                _rawData.ApplicableRate
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote || _rawData.TransCategory == TaxTransactionCategory_IN::BillOfSupply)
                && _rawData.CustomerBillingGSTIN == ''
                && _rawData.IsExportImport == false
                && _rawData.HSNCode != ''
                && _rawData.IsECommerce == false
                && _rawData.IsReverseCharge == false
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageB2C);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        //REV
        while select sum(TaxAmountIGST), sum(TaxAmountCGST), sum(TaxAmountSGST), sum(TaxableValue), sum(CessAmount) from _rawData
            group by
                _rawData.HSNCode,
                _rawData.TaxRate,
                _rawData.CustomerBillingGSTIN,
                _rawData.CustVendName,
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.IsInterState,
                _rawData.IsSupplyCoveredUnderSec7,
                _rawData.ApplicableRate
            where _rawData.TaxDirection == TaxDirection::IncomingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote || _rawData.TransCategory == TaxTransactionCategory_IN::PaymentVoucher)
                && _rawData.IsExportImport == false
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == true
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageREV);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        //IMPG
        while select sum(TaxAmountIGST), sum(TaxableValue), sum(CessAmount), sum(BillOfEntryValue) from _rawData
            group by
                _rawData.HSNCode,
                _rawData.TaxRate,
                _rawData.BillOfEntryNumber,
                _rawData.StatePlaceOfSupplyLongForm,
                _rawData.BillOfEntryDate,
                _rawData.PortId
            where _rawData.TaxDirection == TaxDirection::IncomingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && _rawData.GoodsServices == TaxGoodsServices_IN::Goods
                && _rawData.IsImportOrder == true
                && _rawData.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::None
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == false
        {
            resultLine = _rawData.initToModelClass();

            resultLine.parmReportTabPage(tabPageIMPG);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        //IMPS
        while select sum(TaxAmountIGST), sum(TaxableValue), sum(CessAmount) from _rawData
            group by
                _rawData.HSNCode,
                _rawData.TaxRate,
                _rawData.StatePlaceOfSupplyLongForm
            where _rawData.TaxDirection == TaxDirection::IncomingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote || _rawData.TransCategory == TaxTransactionCategory_IN::PaymentVoucher)
                && _rawData.GoodsServices == TaxGoodsServices_IN::Services
                && _rawData.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::None
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsForeignCustVend == true
        {
            resultLine = _rawData.initToModelClass();

            resultLine.parmReportTabPage(tabPageIMPS);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // EXP: (InvoiceNumber, taxRate), where (IsExportOrder == true || IsForeignCustVend  == true)
        // AND taxDirection == "OutgoingTax"
        // AND (transCategory == "GSTInvoice" || transCategory == "CreditNote" || transCategory == "DebitNote")
        while select sum(InvoiceValue), sum(TaxableValue), sum(TaxAmountIGST), sum(CessAmount) from _rawData
            group by
                _rawData.InvoiceNumber,
                _rawData.TaxRate,
                _rawData.InvoiceDate,
                _rawData.ShippingBillDate,
                _rawData.ShippingBillNumber,
                _rawData.TransCategory,
                _rawData.ExportImportType,
                _rawData.TotalInvoiceValue,
                _rawData.HSNCode,
                _rawData.PortId
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
                && (_rawData.IsExportOrder == true || _rawData.IsForeignCustVend == true)
                && _rawData.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::None
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == false
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageEXP);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // DE
        while select _rawData
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsExportOrder == false
                && _rawData.ExportImportType == TaxExportImportType_IN::Deemed
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == false
                && _rawData.IsForeignCustVend == false
        {
            resultLine = _rawData.initToModelClass();
            resultLine.parmReportTabPage(tabPageDE);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        //Ecom
        while select sum(TaxableValue), sum(TaxableValueReturned), sum(TaxAmountIGST), sum(TaxAmountCGST), sum(TaxAmountSGST), sum(CessAmount) from _rawData
            group by
                _rawData.GstinEcommerce,
                _rawData.ECommerceOperatorName
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsECommerce == true
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == false
        {
            resultLine = _rawData.initToModelClass();
            
            TaxAmount taxableValueNet = _rawData.TaxableValue >= _rawData.TaxableValueReturned ? _rawData.TaxableValue - _rawData.TaxableValueReturned : 0;

            resultLine.parmTaxableValueNet(taxableValueNet);
            resultLine.parmReportTabPage(tabPageECOM);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }
        
        //SEZ
        while select _rawData
            where _rawData.TaxDirection == TaxDirection::OutgoingTax
                && ( _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice || _rawData.TransCategory == TaxTransactionCategory_IN::CreditNote || _rawData.TransCategory == TaxTransactionCategory_IN::DebitNote)
                && _rawData.CustomerBillingGSTIN != ''
                && _rawData.IsExportOrder == false
                && _rawData.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == false
                && _rawData.IsForeignCustVend == false
        {
            resultLine = _rawData.initToModelClass();

            resultLine.parmReportTabPage(tabPageSEZ);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        //IMPGSEZ
        while select _rawData
            where _rawData.TaxDirection == TaxDirection::IncomingTax
                && _rawData.TransCategory == TaxTransactionCategory_IN::GSTInvoice
                && _rawData.IsImportOrder == true
                && _rawData.GoodsServices == TaxGoodsServices_IN::Goods
                && _rawData.TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ
                && _rawData.IsECommerce == false
                && _rawData.HSNCode != ''
                && _rawData.IsReverseCharge == false
                && _rawData.IsForeignCustVend == false
        {
            resultLine = _rawData.initToModelClass();

            resultLine.parmReportTabPage(tabPageIMPGSEZ);
            allValidationsSuccessful = TmpTaxGSTRReportTaxLine_IN::addLineToHeader(_resultHeader, resultLine, allValidationsSuccessful);
            countLines++;
        }

        // Warn if result contains too many invoices or lines
        if (countLines > 19000 || countInvoices > 500)
        {
            warning(strFmt("@TaxEngineGSTR:OfflineToolWarnMsgTooManyLines", countLines, countInvoices));
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@TaxEngineGSTR:GERExportCSV</Label>
	<TitleField1>InvoiceNumber</TitleField1>
	<TitleField2>TaxRate</TitleField2>
	<Visible>No</Visible>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerBillingGSTIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReverseCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxableValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CessAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefundValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingBillDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShippingBillNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsInterState</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExportImport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTransactionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxDirection</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTransactionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CessAmountAdjusted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GrossAdvanceAdjusted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountCGST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountIGST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmountSGST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventQuantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HSNCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportImportType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatePlaceOfSupplyLongForm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalInvoiceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalRefundValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonComment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GoodsServices</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsBillOfSupply</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TypeOfBillOfSupply</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginalTotalInvoiceValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventUnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GSTTransactionInNumSeq</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CessAmount</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CessAmountAdjusted</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerBillingGSTIN</Name>
			<ExtendedDataType>TaxRegistrationNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>EcoResDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExportImportType</Name>
			<EnumType>TaxExportImportType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GoodsServices</Name>
			<EnumType>TaxGoodsServices_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>GrossAdvanceAdjusted</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>GSTTransactionInNumSeq</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HSNCode</Name>
			<ExtendedDataType>HSNCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InventQuantity</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventUnitOfMeasure</Name>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceNumber</Name>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsBillOfSupply</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExportImport</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsInterState</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReverseCharge</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OriginalTotalInvoiceValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OriginalTransactionDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OriginalTransactionId</Name>
			<ExtendedDataType>TaxGSTTransactionID_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonComment</Name>
			<ExtendedDataType>ReasonComment</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RefundValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ShippingBillDate</Name>
			<ExtendedDataType>CustomsDate_IN</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShippingBillNumber</Name>
			<ExtendedDataType>CustomsShippingBillNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatePlaceOfSupplyLongForm</Name>
			<ExtendedDataType>LogisticsAddressStatename</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxableValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountCGST</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountIGST</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmountSGST</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxDirection</Name>
			<EnumType>TaxDirection</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxRate</Name>
			<ExtendedDataType>TaxValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalInvoiceValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalRefundValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransCategory</Name>
			<EnumType>TaxTransactionCategory_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TypeOfBillOfSupply</Name>
			<EnumType>TaxTypeOfBillOfSupply_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitOfMeasure</Name>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendName</Name>
			<ExtendedDataType>CustVendName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSupplyCoveredUnderSec7</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PortId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>EximPortId_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BillOfEntryNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsBillOfEntryNumber_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BillOfEntryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsDate_IN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsECommerce</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GstinEcommerce</Name>
			<ExtendedDataType>TaxRegistrationNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BillOfEntryValue</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ECommerceOperatorName</Name>
			<ExtendedDataType>CustVendName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExportOrder</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsForeignCustVend</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxableValueReturned</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ApplicableRate</Name>
			<ExtendedDataType>TaxValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WouldYouClaimRefund_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@TaxGSTSEZ:WouldYouClaimRefund_IN</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxGSTEPZCode_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxGSTEPZCode_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InwardSuppliesType</Name>
			<ExtendedDataType>TaxGSTRInwardSuppliesType_IN</ExtendedDataType>
			<EnumType>TaxInwardSuppliesType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsImportOrder</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>