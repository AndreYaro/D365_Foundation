<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRateBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSRateBase extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findNumberOfRateBaseAssignmentFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of fields that are assigned with the same rate base type of the current <c>TMSRateBase</c> record.
    /// </summary>
    /// <returns>
    /// The number of fields that are assigned with the same rate base type.
    /// </returns>
    public int findNumberOfRateBaseAssignmentFields()
    {
        TMSRateMaster           rateMaster      = TMSRateMaster::find(this.RateMasterCode);
        TMSRateBaseType         rateBaseType    = TMSRateBaseType::find(rateMaster.RateBaseTypeCode);
        TMSRateBaseTypeField    rateBaseTypeField;

        select firstOnly Sequence from rateBaseTypeField
            order by rateBaseTypeField.Sequence desc
            where rateBaseTypeField.RateBaseTypeCode  == rateBaseType.RateBaseTypeCode &&
                  rateBaseTypeField.FieldType         == TMSFieldType::Assignment;

        return rateBaseTypeField.Sequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberOfRateBaseDetailFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of fields that have the same rate base type as the current record (this).
    /// </summary>
    /// <returns>
    /// The number of fields that has the same rate base type.
    /// </returns>
    public int findNumberOfRateBaseDetailFields()
    {
        TMSRateMaster           rateMaster      = TMSRateMaster::find(this.RateMasterCode);
        TMSRateBaseType         rateBaseType    = TMSRateBaseType::find(rateMaster.RateBaseTypeCode);
        TMSRateBaseTypeField    rateBaseTypeField;

        select count(RecId) from rateBaseTypeField
            where rateBaseTypeField.RateBaseTypeCode  == rateBaseType.RateBaseTypeCode &&
                  rateBaseTypeField.FieldType         == TMSFieldType::RateBase;

        return int642int(rateBaseTypeField.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRateBaseDetailFieldTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the types of fields that have the same rate base type as the current record (this).
    /// </summary>
    /// <returns>
    /// Container with the rate base detail field types.
    /// </returns>
    public container getRateBaseDetailFieldTypes()
    {
        container rateBaseDetailFieldTypes;
        
        TMSRateBaseTypeField    rateBaseTypeField;
        TMSRateBaseType         rateBaseType;
        TMSRateMaster           rateMaster;

        while select DataType from rateBaseTypeField
            order by rateBaseTypeField.Sequence asc
            where rateBaseTypeField.FieldType == TMSFieldType::RateBase
            exists join rateBaseType
                where rateBaseType.RateBaseTypeCode == rateBaseTypeField.RateBaseTypeCode
            exists join rateMaster
                where rateMaster.RateBaseTypeCode == rateBaseType.RateBaseTypeCode
                    && rateMaster.RateMasterCode == this.RateMasterCode
        {
            rateBaseDetailFieldTypes += rateBaseTypeField.DataType;
        }

        return rateBaseDetailFieldTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (this.CurrencyCode == '')
        {
            this.CurrencyCode = CompanyInfoHelper::standardCurrency();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsBreakMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TMSBreakMaster</c> record using the break master code.
    /// </summary>
    /// <returns>
    /// The <c>TMSBreakMaster</c> record.
    /// </returns>
    public TMSBreakMaster tmsBreakMaster()
    {
        return TMSBreakMaster::find(this.BreakMasterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsRateMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TMSRateMaster</c> record using rate master code.
    /// </summary>
    /// <returns>
    /// The <c>TMSRateMaster</c> record.
    /// </returns>
    public TMSRateMaster tmsRateMaster()
    {
        return TMSRateMaster::find(this.RateMasterCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the field id of a dynamic field in a table.
    /// </summary>
    /// <param name="_tableId">
    /// Id of the table.
    /// </param>
    /// <param name="_nameBase">
    /// Base name of the field.
    /// </param>
    /// <param name="_nameNumber">
    /// Number of the dynamic field.
    /// </param>
    /// <param name="_isTwoDigit">
    /// True if the dynamic field number should be stored in two digits.
    /// </param>
    /// <returns>
    /// The field id of a dynamic field in a table.
    /// </returns>
    public static FieldId dynamicFieldId(tableId _tableId, str _nameBase, int _nameNumber, boolean _isTwoDigit = false)
    {
        str         fId;

        fId = _nameBase;

        if (_isTwoDigit && _nameNumber < 10)
        {
            fId += '0';
        }

        fId += int2str(_nameNumber);

        return fieldName2Id(_tableId, fId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>TMSRateBase</c> record exists.
    /// </summary>
    /// <param name="_tmsRateBaseCode">
    /// Rate base code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(TMSRateBaseCode _tmsRateBaseCode)
    {
        return (_tmsRateBaseCode) &&
               (select firstonly TMSRateBase
                    where tmsRateBase.RateBaseCode == _tmsRateBaseCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRateBase</c> record with given parameters.
    /// </summary>
    /// <param name="_tmsRateBaseCode">
    /// Rate base code of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRateBase find(TMSRateBaseCode _tmsRateBaseCode,
                                   boolean         _forupdate = false)
    {
        TMSRateBase    tmsRateBase;

        if (_tmsRateBaseCode)
        {
            tmsRateBase.selectForUpdate(_forupdate);

            select firstonly tmsRateBase
                where tmsRateBase.RateBaseCode == _tmsRateBaseCode;
        }

        return tmsRateBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1946</DeveloperDocumentation>
	<FormRef>TMSRateMasterBase</FormRef>
	<Label>@TRX128</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>RateBaseCode</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RateBaseCodeIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RateBaseCodeIdx</PrimaryIndex>
	<ReplacementKey>RateBaseCodeIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateMasterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateBaseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BreakMasterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateBaseCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RateMasterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RateBaseCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BreakMasterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinimumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumCharge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BreakMasterCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSBreakMasterCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumCharge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSMaximumCharge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MinimumCharge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSMinimumCharge</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RateBaseCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRateBaseCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RateMasterCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRateMasterCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RateBaseCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RateBaseCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSBreakMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSBreakMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BreakMasterCode</Name>
					<SourceEDT>TMSBreakMasterCode</SourceEDT>
					<Field>BreakMasterCode</Field>
					<RelatedField>BreakMasterCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BreakMasterCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSRateMaster</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSRateMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RateMasterCode</Name>
					<SourceEDT>TMSRateMasterCode</SourceEDT>
					<Field>RateMasterCode</Field>
					<RelatedField>RateMasterCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RateMasterCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>