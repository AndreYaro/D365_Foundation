<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventLocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the address field of the logistics postal address for the inventory location.
    /// </summary>
    /// <returns>
    /// The address field of the logistics postal address record buffer.
    /// </returns>
    display Addressing address()
    {
        return this.logisticsPostalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowRemoveBlockingOnStatusChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether it is allowed to enable the Remove inventory blocking on status change flag.
    /// </summary>
    /// <returns>
    /// true if it is allowed to enable the Remove inventory blocking on status change flag;otherwise, false;
    /// </returns>
    public boolean allowRemoveBlockingOnStatusChanged()
    {
        return this.AllowMarkingReservationRemoval == WHSAllowMarkingReservationRemoval::MarkingReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConsignmentInventLocation_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check for current record if <c>CustAccount_HU</c> field can be modified.
    /// </summary>
    /// <returns>
    /// returns true if <c>CustAccount_HU</c> field can be modified.
    /// </returns>
    private boolean checkConsignmentInventLocation_HU()
    {
        #IsoCountryRegionCodes

        if (!this.RecId)
        {
            return true;
        }
        else
        {
            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                return true;
            }

            if (this.inventTransExist_HU())
            {
                return checkFailed("@GLS112630", this.CustAccount_HU);
            }
            else
            {
                return true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGoodsInRouteInventLocation_RU</Name>
				<Source><![CDATA[
    boolean checkGoodsInRouteInventLocation_RU()
    {
        InventLocation  inventLocationGoodsInRoute;

        if (this.InventLocationType == InventLocationType::GoodsInRoute_RU)
        {
            if (this.InventLocationIdGoodsInRoute_RU)
                return checkFailed(strFmt("@GLS114815", "@GLS114756", InventLocationType::GoodsInRoute_RU));
        }
        else if (this.InventLocationType == InventLocationType::Standard && this.InventLocationIdGoodsInRoute_RU)
        {
            inventLocationGoodsInRoute = InventLocation::find(this.InventLocationIdGoodsInRoute_RU);
            if (inventLocationGoodsInRoute && inventLocationGoodsInRoute.InventLocationType != InventLocationType::GoodsInRoute_RU)
            {
                return checkFailed(strFmt("@GLS114816", "@GLS114756", InventLocationType::GoodsInRoute_RU));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationIdReqMain</Name>
				<Source><![CDATA[
    public boolean checkInventLocationIdReqMain()
    {
        InventLocation  inventLocationReqMain;

        if (this.InventLocationIdReqMain == this.InventLocationId)
        {
            return checkFailed("@SYS58138");
        }

        if (this.InventLocationIdReqMain)
        {
            inventLocationReqMain = InventLocation::find(this.InventLocationIdReqMain);
            if (inventLocationReqMain && inventLocationReqMain.InventLocationType != InventLocationType::Standard)
            {
                return checkFailed(strFmt("@SYS112777", InventLocationType::Standard));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationInReplenishmentRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current invent location (warehouse) is used in replenishment rules
    /// </summary>
    /// <returns>
    /// True, if the current warehouse is used in replenishment rules; false - otherwise.
    /// </returns>
    private boolean checkInventLocationInReplenishmentRules()
    {
        RetailReplenishmentRuleLines    replenishmentRuleLines;
        RetailChannelTable              channelTable;

        select firstonly Type, RelationId, RecId, RuleId from replenishmentRuleLines
            exists join channelTable where replenishmentRuleLines.Type == RetailReplenishmentRuleType::LocationType
                                            && replenishmentRuleLines.RelationId == channelTable.RecId
                                            && channelTable.InventLocation == this.InventLocationId
                                            && channelTable.InventLocationDataAreaId == this.DataAreaId;

        if (replenishmentRuleLines.RecId > 0)
        {
            return checkFailed(
                strFmt("@RET4160063",
                       "@RET1187",
                       this.InventLocationId,
                       replenishmentRuleLines.RuleId)
                    );
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationLevel</Name>
				<Source><![CDATA[
    public boolean checkInventLocationLevel(
        Set     _setRecId = null,
        Level   _level    = 0)
    {
        InventLocation  inventLocation;
        Set             setRecId = _setRecId;

        if (!setRecId)
        {
            setRecId = new Set(typeName2Type(extendedTypeStr(RecId)));
        }

        if (setRecId.in(this.RecId))
        {
            return false;
        }

        if (this.InventLocationIdReqMain)
        {
            setRecId.add(this.RecId);

            inventLocation = InventLocation::find(this.InventLocationIdReqMain);

            if (!inventLocation.checkInventLocationLevel(setRecId,_level + 1))
            {
                if (_level == 0)
                {
                    return checkFailed(strFmt("@SYS70041",this.InventLocationIdReqMain));
                }

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the warehouse is WHS enabled and shows an infolog warning message if it doesn't.
    /// </summary>
    /// <returns>
    /// true if the warehouse is WHS enabled; otherwise, false.
    /// </returns>
    public boolean checkIsWHSEnabled()
    {
        if (!this.whsEnabled)
        {
            return checkFailed("@WAX4825");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuarantineInventLocation</Name>
				<Source><![CDATA[
    public boolean checkQuarantineInventLocation()
    {
        InventLocation  inventLocationQuarantine;

        if (this.InventLocationType == InventLocationType::Quarantine)
        {
            if (this.InventLocationIdQuarantine)
            {
                return checkFailed(strFmt("@SYS59221", InventLocationType::Quarantine));
            }
        }
        else if (this.InventLocationType == InventLocationType::Standard && this.InventLocationIdQuarantine)
        {
            inventLocationQuarantine = InventLocation::find(this.InventLocationIdQuarantine);
            if (inventLocationQuarantine && inventLocationQuarantine.InventLocationType != InventLocationType::Quarantine)
            {
                return checkFailed(strFmt("@SYS58480", InventLocationType::Quarantine));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLocationFromSiteLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copy the address from the related fiscal establishment
    /// </summary>
    /// <param name="_location">
    ///     The location to be copied. Default is the location of the fiscal establishment linked to the warehouse's site
    /// </param>
    /// <remarks>
    ///     Fiscal establishment, site and warehouses have to have the same address when the inventory is within the legal entity
    /// </remarks>
    public void copyLocationFromSiteLocation(RecId _location = InventSite::find(this.InventSiteId).fiscalEstablishment().postalAddress().Location)
    {
        container roleIds;
        InventLocationLogisticsLocation inventLocationLogisticsLocation;

        if (!BrazilParameters::isEnabled())
            return;

        if (!this.validateSiteWarehouse())
            return;

        if (this.RecId
            && this.InventCountingGroup_BR != InventCountingGroup_BR::OwnStockInOtherPower)
        {
            ttsbegin;

            select forupdate inventLocationLogisticsLocation
                where inventLocationLogisticsLocation.InventLocation == this.RecId;

            if (!inventLocationLogisticsLocation)
            {
                inventLocationLogisticsLocation.InventLocation = this.RecId;
                inventLocationLogisticsLocation.Location = _location;
                inventLocationLogisticsLocation.IsPrimary = NoYes::Yes;

                roleIds = conPeek(DirPartyLocation::findRec(InventSite::find(this.InventSiteId).fiscalEstablishment().DirPartyLocation).locationRoles(), 1);

                if (!conFind(roleIds, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)))
                {
                    roleIds += LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId;
                }

                inventLocationLogisticsLocation.addEntityLocation(roleIds, false);
            }
            else
            {
                inventLocationLogisticsLocation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                inventLocationLogisticsLocation.Location = _location;
                inventLocationLogisticsLocation.IsPrimary = NoYes::Yes;
                inventLocationLogisticsLocation.update();
            }

            FiscalEstablishmentLocationHelper_BR::propagateWarehouseLocation(this.InventLocationId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultAisle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a Default Aisle for a WHS Enabled Warehouse
    /// </summary>
    /// <remarks>
    ///     Called on creating or updating a WHS Enabled Warehouse
    /// </remarks>
    public void createDefaultAisle()
    {
        if (this.whsEnabled)
        {
            ttsbegin;

            this.createDefaultAisleCurrentCompany();
            
            this.validateWriteCrossCompany(tableMethodStr(InventLocation, createDefaultAisle));

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultAisleCurrentCompany</Name>
				<Source><![CDATA[
    private void createDefaultAisleCurrentCompany()
    {
        if (!WMSAisle::exist('--', this.InventLocationId))
        {
            WMSAisle aisle;
            aisle.InventLocationId = this.InventLocationId;
            aisle.Name = '--default';
            aisle.AisleId = WMSLocation::whsDefaultAisle();
            aisle.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRFGenericUserLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new work user warehouse location for the RF generic user when a new WHS enabled warehouse
    ///     is created.
    /// </summary>
    private void createRFGenericUserLocation()
    {
        if (this.whsEnabled)
        {
            WHSParameters::find().createRFGenericUserLocations();

            this.validateWriteCrossCompany(tableMethodStr(InventLocation, createRFGenericUserLocation));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultReceiptLocationLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a dummy license plate needed for transfer orders.
    /// </summary>
    private void createDefaultReceiptLocationLicensePlate()
    {
        if (this.wmsLocationIdDefaultReceipt)
        {
            InventLocation::createTOReceiptLP(this.InventLocationId, this.wmsLocationIdDefaultReceipt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the record
    /// </summary>
    /// <remarks>
    ///     The Location related to InventLocationLogisticsLocation is a location related to the legal entity and still valid after a location is deleted.
    ///     Have to set to 0 before super is called to prevent the location to be deleted when inventLocation is deleted from the database.
    /// </remarks>
    public void delete()
    {
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            InventLocationLogisticsLocation inventLocationLogisticsLocation;

            select forupdate Location from inventLocationLogisticsLocation
                where inventLocationLogisticsLocation.InventLocation == this.RecId;

            if (inventLocationLogisticsLocation)
            {
                inventLocationLogisticsLocation.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                inventLocationLogisticsLocation.Location = 0;
                inventLocationLogisticsLocation.update();
            }
        }

        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>exampleLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a location that can be used for presenting an example of of how locations will be named for this warehouse.
    /// </summary>
    /// <returns>
    ///    A <c>WMSLocation</c> buffer - but not necessarily an actual record.
    /// </returns>
    public WMSLocation exampleLocation()
    {
        WMSLocation     wmsLocation;
        WMSAisle        wmsAisle;

        select firstonly wmsLocation
            where wmsLocation.InventLocationId  == this.InventLocationId &&
                  wmsLocation.ManualName        == NoYes::No;

        if (!wmsLocation)
        {
            select firstonly wmsAisle
                where wmsAisle.InventLocationId == this.InventLocationId;
            if (wmsAisle)
            {
                wmsLocation.AisleId = wmsAisle.AisleId;
            }
            else
            {
                wmsLocation.AisleId = '001';
            }

            wmsLocation.Rack = 2;
            wmsLocation.Level = 3;
            wmsLocation.Position = 4;
        }
        return wmsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateForward</Name>
				<Source><![CDATA[
    public TransDate findOpenDateForward(TransDate _fromDate)
    {
        TransDate openDate = _fromDate;

        if (this.ReqCalendarId)
        {
            openDate = WorkCalendar::findOpenDateForward(this.ReqCalendarId,_fromDate,0,true);
        }

        return openDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAnyWMSLocations</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Evaluates if the warehouse has one or more Locations defined
    /// </summary>
    /// <returns>
    ///  True if one of more locations found
    /// </returns>
    public boolean hasAnyWMSLocations()
    {
        WMSLocation wmsLocation;

        return (select firstonly wmsLocation
        where wmsLocation.InventLocationId  == this.InventLocationId
        ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the warehouse has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the warehouse has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    public boolean hasOpenInventSumQuantity()
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
                where inventSum.InventLocationId    == this.InventLocationId    &&
                      inventSum.ClosedQty           == NoYes::No;

            return inventSum.RecId ? true : false;
        }
        else
        {
            InventDim   inventDim;

            select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventLocationId   == this.InventLocationId
            join TableId from inventSum
                where inventSum.InventDimId     == inventDim.InventDimId    &&
                      inventSum.ClosedQty       == NoYes::No;

            return inventDim.RecId ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventDim</Name>
				<Source><![CDATA[
    private boolean hasInventDim()
    {
        InventDim inventDim;

        select firstonly RecId from inventDim
            where inventDim.InventLocationId == this.InventLocationId;

        return inventDim.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        if (BrazilParameters::isEnabled())
        {
            this.InventCountingGroup_BR = InventCountingGroup_BR::OwnStock;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;

        // <GEERU>
        this.setInventProfileId_RU();
        this.setGoodsInRoute_RU();
        // </GEERU>

        this.initReleaseToWarehouseRule();
        
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }

        if (this.InventLocationIdReqMain)
        {
            if (ReqUpdateWarehouseLevelForUpdatedRecordFlight::instance().isEnabled())
            {
                ReqUpdateWarehouseLevel reqUpdateWarehouseLevel = ReqUpdateWarehouseLevel::newUpdateForLocationId(this.InventLocationId);
                reqUpdateWarehouseLevel.runOperation();
            }
            else
            {
                ReqUpdateWarehouseLevel::newUpdate().runOperation();
            }

            this.reread();
        }

        this.createDefaultAisle();
        this.createRFGenericUserLocation();
        this.createDefaultReceiptLocationLicensePlate();

        this.enableParallelizationForWaveMethods();

        if (BrazilParameters::isEnabled())
        {
            this.copyLocationFromSiteLocation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableParallelizationForWaveMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the current warehouse to run wave methods in parallel.
    /// </summary>  
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal void enableParallelizationForWaveMethods()
    {
        if (this.WhsEnabled)
        {
            WHSEnableTaskConfigurationWavePostMethod::enableTaskConfigurationForWarehouseAndWaveMethodIfNotEnabled(
                methodStr(WhsPostEngineBase, allocateWave),
                this.InventLocationId,
                WHSAllocateWaveMethodConstants::AllocateWaveMethodDefaultMaximumBatchTasks);

            this.validateWriteCrossCompany(tableMethodStr(InventLocation, enableParallelizationForWaveMethods));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransExist_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if exists any inventory transactions whith current location ID.
    /// </summary>
    /// <returns>
    /// returns true if transactions exists, otherwise false.
    /// </returns>
    private boolean inventTransExist_HU()
    {
        InventDim        inventDim;
        InventTrans      inventTrans;
        WHSInventReserve inventReserve;

        if (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            select firstonly RecId from inventReserve
                where inventReserve.AvailPhysical != 0
                exists join inventDim
                    where  inventDim.InventDimId == inventReserve.InventDimId
                        && inventDim.InventLocationId == this.InventLocationId;
        }

        if (!inventReserve.RecId)
        {
            select firstonly RecId from inventTrans
            exists join inventDim 
                where  inventTrans.InventDimId    == inventDim.InventDimId
                    && inventDim.InventLocationId == this.InventLocationId;
        }

        return inventTrans.RecId || inventReserve.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoadEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether load lines can be created for this warehouse.
    /// </summary>
    /// <returns>
    /// true if load lines can be created for this warehouse; otherwise, false.
    /// </returns>
    public boolean isLoadEnabled()
    {
        return this.whsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the logistics postal address of the inventory location.
    /// </summary>
    /// <returns>
    /// The logistics postal address record buffer.
    /// </returns>
    public LogisticsPostalAddress logisticsPostalAddress()
    {
        LogisticsPostalAddress address = LogisticsLocationEntity::findPostalAddress(this, LogisticsLocationRoleType::None);
        if (address)
        {
            return address;
        }
        if (!address)
        {
            address = this.inventSite().logisticsPostalAddress();
            if (address)
            {
                return address;
            }
        }
        return CompanyInfo::find().postalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDefaultDeliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default delivery address.
    /// </summary>
    /// <returns>
    /// The default delivery address.
    /// </returns>
    public LogisticsPostalAddress mcrDefaultDeliveryPostalAddress()
    {
        LogisticsLocationEntity location;
        LogisticsPostalAddress  logisticsPostalAddress;

        location = LogisticsLocationEntity::constructFromLocationRecId(LogisticsLocationDefault::findSimpleDefaultByRoleType(this, LogisticsLocationRoleType::Delivery).RecId);

        logisticsPostalAddress = location.getPostalAddress();

        if (logisticsPostalAddress)
        {
            return logisticsPostalAddress;
        }
        else
        {
            location = LogisticsLocationEntity::constructFromLocationRecId(LogisticsLocationDefault::findSimpleDefaultByRoleType(this.inventSite(), LogisticsLocationRoleType::Delivery).RecId);
            logisticsPostalAddress = location.getPostalAddress();
            if (logisticsPostalAddress)
            {
                return logisticsPostalAddress;
            }
            else
            {
                logisticsPostalAddress = CompanyInfo::find().postalAddress();
                return logisticsPostalAddress;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventLocation, UniqueCheckDigits):
                if (this.UniqueCheckDigits)
                {
                    warning("@WAX2631");
                }
                break;
            case fieldNum(InventLocation, InventLocationType):
                // <GEERU>
                this.setGoodsInRoute_RU();
                // </GEERU>

                if (BrazilParameters::isEnabled())
                {
                    this.InventCountingGroup_BR   = InventCountingGroup_BR::OwnStock;
                    this.VendAccount              = '';
                    this.CustAccount_BR           = '';
                }

                break;
            // <GEERU>
            case fieldNum(InventLocation, InventProfileType_RU):
                this.setInventProfileId_RU();
                break;
            // </GEERU>
            case fieldNum(InventLocation, InventCountingGroup_BR):
                if (BrazilParameters::isEnabled())
                {
                    this.VendAccount      = '';
                    this.CustAccount_BR   = '';

                    this.copyLocationFromSiteLocation();
                }

                break;
            case fieldNum(InventLocation, InventSiteId):
                this.copyLocationFromSiteLocation();
                break;
            case fieldNum(inventLocation, CustAccount_BR):
                if (BrazilParameters::isEnabled())
                {
                    this.VendAccount    = '';
                }
                break;
            case fieldNum(InventLocation, VendAccount):
                if (BrazilParameters::isEnabled())
                {
                    this.CustAccount_BR = '';
                }
                break;
            case fieldNum(InventLocation, WHSEnabled):
                if (this.WHSEnabled)
                {
                    this.ReleaseToWarehouseRule = WHSReleaseToWarehouseRule::AllowPartialReservation;
                }
                else
                {
                    this.ReleaseToWarehouseRule = WHSReleaseToWarehouseRule::NotApplicable;
                    this.AutoUpdateShipment = WHSAutoUpdateShipment::OnQuantityDecrease;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            [fieldNum(InventLocation, RemoveInventBlockingOnStatusChange),
                [
                    fieldNum(InventLocation, AllowMarkingReservationRemoval)
                ]
            ],
            [fieldNum(InventLocation, InventLocationIdQuarantine),
                [
                    fieldNum(InventLocation, InventLocationType)
                ]
            ],
            [fieldNum(InventLocation, InventLocationIdTransit),
                [
                    fieldNum(InventLocation, InventLocationType)
                ]
            ],
            [fieldNum(InventLocation, Manual),
                [
                    fieldNum(InventLocation, InventLocationType)
                ]
            ],
            [fieldNum(InventLocation, ReqRefill),
                [
                    fieldNum(InventLocation, InventLocationType)
                ]
            ],
            [fieldNum(InventLocation, InventLocationIdReqMain),
                [
                    fieldNum(InventLocation, InventLocationType)
                ]
            ],
            [fieldNum(InventLocation, InventLocationLevel),
                [
                    fieldNum(InventLocation, InventLocationType)
                ]
            ]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventLocation, RemoveInventBlockingOnStatusChange):
                this.defaultRemoveInventBlockingOnStatusChange();
                break;
            case fieldNum(InventLocation, InventLocationIdQuarantine):
                this.defaultInventLocationIdQuarantine();
                break;
            case fieldNum(InventLocation, InventLocationIdTransit):
                this.defaultInventLocationIdTransit();
                break;
            case fieldNum(InventLocation, Manual):
                this.defaultManual();
                break;
            case fieldNum(InventLocation, ReqRefill):
                this.defaultReqRefill();
                break;
            case fieldNum(InventLocation, InventLocationIdReqMain):
                this.defaultInventLocationIdReqMain();
                break;
            case fieldNum(InventLocation, InventLocationLevel):
                this.defaultInventLocationLevel();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRemoveInventBlockingOnStatusChange</Name>
				<Source><![CDATA[
    private void defaultRemoveInventBlockingOnStatusChange()
    {
        if (!this.allowRemoveBlockingOnStatusChanged())
        {
            this.RemoveInventBlockingOnStatusChange = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationIdQuarantine</Name>
				<Source><![CDATA[
    private void defaultInventLocationIdQuarantine()
    {
        if (this.InventLocationType != InventLocationType::Standard)
        {
            this.InventLocationIdQuarantine = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationIdTransit</Name>
				<Source><![CDATA[
    private void defaultInventLocationIdTransit()
    {
        if (this.InventLocationType != InventLocationType::Standard)
        {
            this.InventLocationIdTransit = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultManual</Name>
				<Source><![CDATA[
    private void defaultManual()
    {
        if (this.isTransit())
        {
            this.Manual    = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReqRefill</Name>
				<Source><![CDATA[
    private void defaultReqRefill()
    {
        if (this.isTransit())
        {
            this.ReqRefill = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationIdReqMain</Name>
				<Source><![CDATA[
    private void defaultInventLocationIdReqMain()
    {
        if (this.isTransit())
        {
            this.InventLocationIdReqMain = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventLocationLevel</Name>
				<Source><![CDATA[
    private void defaultInventLocationLevel()
    {
        if (this.isTransit())
        {
            this.InventLocationLevel = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Renames foreign keys in other tables according to the change of the corresponding primary key value
    ///    in this table.
    /// </summary>
    /// <remarks>
    ///    Renaming a warehouse is not allowed if the new warehouse value has previously been used with
    ///    another site.
    /// </remarks>
    public void renamePrimaryKey()
    {
        //the validation will throw an error message, if it fails.
        if (!this.validateSiteWarehouse() || !this.validateSiteProdUnit())
        {
            throw error("@SYS18447");
        }
        
        InventLocationId origInventLocationId = this.orig().InventLocationId;

        ttsBegin;

        this.renameInventDimInventLocation(origInventLocationId);

        this.validateWriteCrossCompany(tableMethodStr(InventLocation, renamePrimaryKey), origInventLocationId);

        super();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameInventDimInventLocation</Name>
				<Source><![CDATA[
    private void renameInventDimInventLocation(InventLocationId _origInventLocationId)
    {
        InventDim inventDim;
        
        while select forupdate inventDim
            where inventDim.InventLocationId == _origInventLocationId
        {
            inventDim.InventLocationId = this.InventLocationId;
            inventDim.update(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGoodsInRoute_RU</Name>
				<Source><![CDATA[
    void setGoodsInRoute_RU()
    {
        if (this.InventLocationType == InventLocationType::GoodsInRoute_RU)
        {
            this.InventLocationIdGoodsInRoute_RU = '';
        }
        else
        {
            this.wmsLocationIdGoodsInRoute_RU       = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    void setInventProfileId_RU()
    {
        if (this.InventProfileType_RU == InventProfileType_RU::NotSpecified ||
            this.InventProfileType_RU != InventProfile_RU::find(this.InventProfileId_RU).InventProfileType)
        {
            this.InventProfileId_RU = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippingName</Name>
				<Source><![CDATA[
    display WMSShippingName shippingName()
    {
        LogisticsLocationEntity location = LogisticsLocationEntity::findLocation(this, LogisticsLocationRoleType::None);

        if (location && location.parmLocationRecId())
        {
            return location.parmLocationDescription();
        }

        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ReqUpdateWarehouseLevel reqUpdateWarehouseLevel;
        boolean                 updateLevels;
        InventLocationId        inventLocationIdThis;
        boolean updateLogisticsPostalAddressBR;

        // <GEERU>
        this.setInventProfileId_RU();
        this.setGoodsInRoute_RU();
        // </GEERU>

        if (this.InventLocationIdReqMain != this.orig().InventLocationIdReqMain ||
            this.InventLocationIdTransit != this.orig().InventLocationIdTransit)
        {
            updateLevels = true;
            inventLocationIdThis = this.InventLocationId;
        }

        if (BrazilParameters::isEnabled() && this.InventSiteId != this.orig().InventSiteId)
        {
            updateLogisticsPostalAddressBR = true;
        }

        boolean areWHSMangementProcessesBeingEnabled = this.areWHSMangementProcessesBeingEnabled();

        this.initReleaseToWarehouseRule();
         
        using (var activityContext = WHSInstrumentationLogger::createLoggerForTable(this).configuration().changeEventForWarehouse(funcName(), this, this.InventLocationId))
        {
            super();
        }

        if (updateLevels)
        {
            if (ReqUpdateWarehouseLevelForUpdatedRecordFlight::instance().isEnabled())
            {
                reqUpdateWarehouseLevel = ReqUpdateWarehouseLevel::newUpdateForLocationId(inventLocationIdThis);
            }
            else
            {
                reqUpdateWarehouseLevel = ReqUpdateWarehouseLevel::newUpdate();
            }

            reqUpdateWarehouseLevel.runOperation();

            this.reread();

            if (FormDataUtil::getFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).research();
                FormDataUtil::getFormDataSource(this).findRecord(InventLocation::find(inventLocationIdThis));
            }
        }

        this.createDefaultAisle();
        this.createDefaultReceiptLocationLicensePlate();

        if (areWHSMangementProcessesBeingEnabled)
        {
            this.enableParallelizationForWaveMethods();
        }

        if (updateLogisticsPostalAddressBR)
        {
            this.copyLocationFromSiteLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areWHSMangementProcessesBeingEnabled</Name>
				<Source><![CDATA[
    private boolean areWHSMangementProcessesBeingEnabled()
    {
        return this.WHSEnabled          == NoYes::Yes
            && this.orig().WHSEnabled   == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useWMSOrder</Name>
				<Source><![CDATA[
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public NoYes useWMSOrder(ItemId itemId)
    {
        switch (this.UseWMSOrders)
        {
            case InventModelGroupNoYes::ModelGroup:
                return InventTable::find(itemId).modelGroup().MandatoryWMSOrder;
            case InventModelGroupNoYes::No:
                return NoYes::No;
            case InventModelGroupNoYes::Yes:
                return NoYes::Yes;
        }
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        InventLocation inventLocation;
        while select InventLocationId from inventLocation
            where inventLocation.InventLocationIdReqMain == this.InventLocationId
        {
            ret = ret && checkFailed(strFmt("@SYS70056",inventLocation.InventLocationId));
        }

        while select InventLocationId from inventLocation
            where inventLocation.InventLocationIdTransit == this.InventLocationId
        {
            ret = ret && checkFailed(strFmt("@SYS78287",inventLocation.InventLocationId));
        }

        while select InventLocationId from inventLocation
            where inventLocation.InventLocationIdQuarantine == this.InventLocationId
        {
            ret = ret && checkFailed(strFmt("@SYS78288",inventLocation.InventLocationId));
        }
        // <GEERU>

        while select InventLocationId from inventLocation
            where inventLocation.InventLocationIdGoodsInRoute_RU == this.InventLocationId
        {
            ret = ret && checkFailed(strFmt("@GLS114817", "@GLS114748", inventLocation.InventLocationId));
        }
        // </GEERU>

        if (this.hasOpenInventSumQuantity() || this.validateWriteCrossCompany(tableMethodStr(InventLocation, validateDelete)))
        {
            ret = checkFailed(strFmt("@SYS322089", tablePName(InventSum)));
        }

        if (this.hasInventDim())
        {
            ret = checkFailed(strFmt("@SCM:CannotDeleteLocationLinkedWithInventDim", tablePName(InventDim)));
        }

        WHSWorkUserWarehouse  whsWorkUserWarehouse;
        while select UserId, InventLocationId from whsWorkUserWarehouse
            where  whsWorkUserWarehouse.InventLocationId == this.InventLocationId
        {
            ret = ret && whsWorkUserWarehouse.validateDelete();
            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(InventLocation, whsEnabled):
                    if (this.orig().WHSEnabled != this.WHSEnabled && this.InventLocationId && this.hasAnyWMSLocations())
                    {
                        ret = checkFailed("@WAX619");
                    }
                    break;

                case fieldNum(InventLocation, DefaultStatusId):
                    if (this.DefaultStatusId && WHSInventStatus::isBlockingStatus(this.DefaultStatusId))
                    {
                        ret = checkFailed("@WAX3363");
                    }
                    break;

                case fieldNum(InventLocation, DefaultProductionFinishGoodsLocation):
                    ret = !this.WHSEnabled || WMSLocation::find(this.DefaultProductionFinishGoodsLocation, this.InventLocationId).checkAllowedAsOutputLocation();
                    break;

                case fieldNum(InventLocation, DefaultKanbanFinishedGoodsLocation):
                    ret = !this.WHSEnabled || WMSLocation::find(this.DefaultKanbanFinishedGoodsLocation, this.InventLocationId).checkAllowedAsOutputLocation();
                    break;

                case fieldNum(InventLocation, DefaultFinalShipmentLocation):
                    if (this.DefaultFinalShipmentLocation)
                    {
                        ret = WMSLocation::find(this.DefaultFinalShipmentLocation, this.InventLocationId).checkFinalShipLocation();
                    }
                    break;

                case fieldNum(InventLocation, DefaultSortingLocation):
                    if (this.DefaultSortingLocation)
                    {
                        ret = WMSLocation::find(this.DefaultSortingLocation, this.InventLocationId).checkSortLocation();
                    }
                    break;

                case fieldNum(InventLocation, DefaultReturnCreditOnlyLocation):
                    if (WMSLocation::find(this.DefaultReturnCreditOnlyLocation, this.InventLocationId).whsLocationIsLPControlled())
                    {
                        ret = checkFailed("@SYP4881166");
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        InventLocation  inventLocationTransit;

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(InventLocation,InventLocationIdReqMain):
                ret = this.checkInventLocationIdReqMain() && ret;
                ret = this.checkInventLocationLevel() && ret;
                break;

            case fieldStr(InventLocation, InventLocationIdQuarantine):
                ret = this.checkQuarantineInventLocation() && ret;
                ret = ret && this.validateQuarantine();
                break;

            case fieldStr(InventLocation, InventLocationIdTransit):
                if (this.InventLocationIdTransit)
                {
                    inventLocationTransit = InventLocation::find(this.InventLocationIdTransit);
                    if (inventLocationTransit && inventLocationTransit.InventLocationType != InventLocationType::Transit)
                    {
                        ret = checkFailed(strFmt("@SYS112776", InventLocationType::Transit));
                    }
                }
                break;

            case fieldStr(InventLocation, BranchNumber):
                ret = TaxEnterpriseBranchNumber_BE::checkBranchNumber(this.BranchNumber);
                break;

            // <GEEHU>
            case fieldStr(InventLocation, CustAccount_HU):
                ret = this.checkConsignmentInventLocation_HU() && ret;
                break;
            // </GEEHU>
            // <GEEU>
            case fieldStr(InventLocation, InventLocationIdGoodsInRoute_RU):
                ret = this.checkGoodsInRouteInventLocation_RU() && ret;
                if (ret)
                {
                    ret = this.validateGoodsInRoute_RU();
                }
                break;
            // </GEEU>
            case fieldStr(InventLocation, fshStore):
                if (!this.fshStore && this.RecId > 0)
                {
                    // don't allow to uncheck 'Store' checkbox, if the warehouse is part of replenishment rules
                    ret = this.checkInventLocationInReplenishmentRules() && ret;
                }
                break;

            case fieldStr(InventLocation, WorkProcessingPolicyName):
                ret = this.checkWorkProcessingPolicy();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorkProcessingPolicy</Name>
				<Source><![CDATA[
    private boolean checkWorkProcessingPolicy()
    {
        boolean valid = true;

        if (!this.WHSEnabled && this.WorkProcessingPolicyName)
        {
            valid = checkFailed(strFmt("@WAX:InventLocation_WHSWorkProcessingPolicyFieldValidationError", this.InventLocationId));
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGoodsInRoute_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the warehouse is not connected to a shipped item that has a different site.
    /// </summary>
    /// <returns>
    /// false if the warehouse is connected to a shipped item that has a different site.
    /// </returns>
    boolean validateGoodsInRoute_RU()
    {
        boolean         ret = true;
        InventLocation  inventLocationLocal;

        // Check that this and this.GoodInRoute has the same site
        if (this.InventSiteId)
        {
            inventLocationLocal = InventLocation::find(this.InventLocationIdGoodsInRoute_RU);

            if (inventLocationLocal.RecId
             && inventLocationLocal.InventSiteId
             && inventLocationLocal.InventSiteId != this.InventSiteId)
            {
                ret = checkFailed(strFmt("@GLS114819", this.InventLocationId, "@GLS114748"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuarantine</Name>
				<Source><![CDATA[
    private boolean validateQuarantine()
    {
        boolean         ret = true;
        InventLocation  inventLocationLocal;

        // Check that this and this.Quarantine has the same site
        if (this.InventSiteId)
        {
            inventLocationLocal = InventLocation::find(this.InventLocationIdQuarantine);

            if (inventLocationLocal.RecId
             && inventLocationLocal.InventSiteId
             && inventLocationLocal.InventSiteId != this.InventSiteId)
            {
                ret = checkFailed(strFmt("@SYS106938",this.InventLocationIdQuarantine, inventLocationLocal.InventSiteId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuarantineIsNotWHSEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a quarantine warehouse is not allowed to have warehouse management enabled
    /// </summary>
    /// <returns>
    /// Is setup of the warehouse valid
    /// </returns>
    private boolean validateQuarantineIsNotWHSEnabled()
    {
        boolean         ret = true;

        // Check that a quarantine warehouse is not WHS enabled
        if (ret &&
            this.InventLocationType == InventLocationType::Quarantine && this.whsEnabled)
        {
            ret = checkFailed("@WAX5817");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemoveBlockingOnStatusChange</Name>
				<Source><![CDATA[
    private boolean validateRemoveBlockingOnStatusChange()
    {
        if (this.RemoveInventBlockingOnStatusChange
            && !this.allowRemoveBlockingOnStatusChanged())
        {
            return checkFailed("@SYS4001507");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSiteProdUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the warehouse is not connected to a production unit that has a different site.
    /// </summary>
    /// <returns>
    /// false if the warehouse is connected to a production unit that has a different site.
    /// </returns>
    public boolean validateSiteProdUnit()
    {
        ProdUnitTable   prodUnitTable;
        boolean ret = true;

        select firstonly RecId from prodUnitTable
            where  (prodUnitTable.InputInventLocationId == this.InventLocationId ||
                    prodUnitTable.OutputInventLocationId == this.InventLocationId) &&
                    prodUnitTable.ParentSiteId != this.InventSiteId;

        if (prodUnitTable.RecId)
        {
            ret = checkFailed("@SYS123068");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSiteWarehouse</Name>
				<Source><![CDATA[
    private boolean validateSiteWarehouse()
    {
        boolean         ret = true;
        
        InventLocation  inventLocationLocal;
        InventDim       inventDimLocal;

        if (this.InventSiteId                                     &&
            (!this.RecId                                        ||
              this.orig().InventSiteId     != this.InventSiteId ||
              this.orig().InventLocationId != this.InventLocationId))
        {
            // Check if this is stored in InventDim with another warehouse
            select firstonly RecId, InventSiteId from inventDimLocal
                where inventDimLocal.InventLocationId == this.InventLocationId
                   && inventDimLocal.InventSiteId
                   && inventDimLocal.InventSiteId     != this.InventSiteId;

            if (inventDimLocal.RecId)
            {
                ret = checkFailed(strFmt("@SYS106939",this.InventSiteId,this.InventLocationId,inventDimLocal.InventSiteId));
            }

            // Check if other warehouses are using this as quarantine warehouse
            if (ret &&
                this.InventLocationType == InventLocationType::Quarantine)
            {
                select firstonly RecId, InventSiteId from inventLocationLocal
                    where inventLocationLocal.InventLocationIdQuarantine == this.InventLocationId
                       && inventLocationLocal.InventSiteId
                       && inventLocationLocal.InventSiteId != this.InventSiteId;

                if (inventLocationLocal.RecId)
                {
                    ret = checkFailed(strFmt("@SYS106942",this.InventSiteId, inventLocationLocal.InventSiteId));
                }
            }
            // <GEERU>

            if (ret && this.InventLocationType == InventLocationType::GoodsInRoute_RU)
            {
                select firstonly RecId, InventLocationId from inventLocationLocal
                    where inventLocationLocal.InventLocationIdGoodsInRoute_RU == this.InventLocationId
                       && inventLocationLocal.InventSiteId
                       && inventLocationLocal.InventSiteId != this.InventSiteId;

                if (inventLocationLocal.RecId)
                {
                    ret = checkFailed(strFmt("@GLS114818", this.InventSiteId, "@GLS114748", inventLocationLocal.InventLocationId));
                }
            }

            if (ret)
            {
                ret = this.validateGoodsInRoute_RU();
            }
            // </GEERU>

            if (ret)
            {
                ret = this.validateQuarantine();
            }
        }

        if (ret 
            && this.RecId 
            && this.orig().InventSiteId != this.InventSiteId 
            && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(curExt(), tableStr(InventSite)))
        {
            ret = checkFailed(strFmt("@SCM:InventLocationSiteWarehouseValidationWarningCrossCompany", this.InventSiteId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDefaultReturnCreditOnlyLocation</Name>
				<Source><![CDATA[
    private boolean validateDefaultReturnCreditOnlyLocation()
    {
        boolean ret = true;

        if (!this.WHSEnabled && this.DefaultReturnCreditOnlyLocation)
        {
            ret = checkFailed("@WAX:CannotSpecifyDefaultCreditOnlyReturnLocationErrorMessage");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWMSLocationIdDefaultIssue</Name>
				<Source><![CDATA[
    private boolean validateWMSLocationIdDefaultIssue()
    {
        boolean ret = true;

        if (this.WHSEnabled && this.WMSLocationIdDefaultIssue)
        {
            ret = checkFailed("@WAX:CannotSpecifyDefaultIssueLocationErrorMessage");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRetailDefaultLocation</Name>
				<Source><![CDATA[
    private boolean validateRetailDefaultLocation()
    {
        boolean ret = true;

        // If it is retail store with WHS enabled
        if (this.WHSEnabled && this.FSHStore)
        {
            if (this.RBODefaultWMSLocationId)
            {
                WHSLocProfileId profileId = wmsLocation::find(this.RBODefaultWMSLocationId, this.InventLocationId).LocProfileId;
                // check location profile, LP control need to be disabled
                if (WHSLocationProfile::find(profileId).LPControlled)
                {
                    ret = checkFailed("@WAX:LPControlNotDisabled");
                }
            }
            else
            {
                // Retail default location is required
                ret = checkFailed("@WAX:WHSStoreDefaultLocationRequired");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRetailDefaultReturnLocation</Name>
				<Source><![CDATA[
    private boolean validateRetailDefaultReturnLocation()
    {
        boolean ret = true;

        // If it is retail store with WHS enabled
        if (this.WHSEnabled && this.FSHStore)
        {
            if (this.RetailWMSLocationIdDefaultReturn)
            {
                WHSLocProfileId profileId = wmsLocation::find(this.RetailWMSLocationIdDefaultReturn, this.InventLocationId).LocProfileId;
                // check location profile, LP control need to be disabled
                if (WHSLocationProfile::find(profileId).LPControlled)
                {
                    ret = checkFailed("@WAX:LPControlNotDisabled");
                }
            }
            else
            {
                // Retail default return location is required
                ret = checkFailed("@WAX:WHSStoreDefaultLocationRequired");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleaseToWarehouseRule</Name>
				<Source><![CDATA[
    private void initReleaseToWarehouseRule()
    {
        if (this.WHSEnabled
            && this.ReleaseToWarehouseRule == WHSReleaseToWarehouseRule::NotApplicable)
        {
            this.ReleaseToWarehouseRule = WHSReleaseToWarehouseRule::AllowPartialReservation;
        }
        else if (!this.WHSEnabled
                && this.ReleaseToWarehouseRule != WHSReleaseToWarehouseRule::NotApplicable)
        {
            this.ReleaseToWarehouseRule = WHSReleaseToWarehouseRule::NotApplicable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAutoUpdateShipment</Name>
				<Source><![CDATA[
    private boolean validateAutoUpdateShipment()
    {
        boolean ret = true;

        if (this.AutoUpdateShipment != WHSAutoUpdateShipment::OnQuantityDecrease)
        {
            WHSParameters whsParameters = whsParameters::find();
            TMSParameters tmsParameters = tmsParameters::find();

            if (whsParameters.AutoCreateLoad
                || whsParameters.AutoCreateLoadTO
                || tmsParameters.AutoCreateLoadSO
                || tmsParameters.AutoCreateLoadTO)
            {
                ret = checkFailed("@WAX:WHSAutoUpdateShipmentAutoCreateLoadValidation");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEnableQualityManagement</Name>
				<Source><![CDATA[
    private boolean validateEnableQualityManagement()
    {
        boolean ret = true;

        if(this.EnableQualityManagement && !this.WHSEnabled)
        {
            ret = checkFailed("@WAX:WHSEnableQualityManagement");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        if (this.ReqRefill && ! this.InventLocationIdReqMain)
        {
            return checkFailed("@SYS58141");
        }

        ret = this.validateSiteWarehouse();

        ret = ret && this.validateQuarantineIsNotWHSEnabled();

        ret = ret && this.validateSiteProdUnit();

        ret = ret && this.validateRemoveBlockingOnStatusChange();

        ret = ret && this.validateDefaultReturnCreditOnlyLocation();

        ret = ret && this.validateWMSLocationIdDefaultIssue();

        ret = ret && this.validateRetailDefaultLocation() && this.validateRetailDefaultReturnLocation();

        ret = ret && this.validateAutoUpdateShipment();

        ret = ret && this.validateEnableQualityManagement();

        ret = ret && this.updateLocationStatusFields();

        if (BrazilParameters::isEnabled())
        {
            if (!this.InventCountingGroup_BR)
            {
                ret = ret && checkFailed(strfmt("@GLS51039", fieldpname(InventLocation, InventCountingGroup_BR)));
            }
        }

        if (ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationStatusFields</Name>
				<Source><![CDATA[
    private boolean updateLocationStatusFields()
    {
        WHSLocationProfile locationProfile = WHSLocationProfile::findByWarehouseAndLocation(this.InventLocationId, this.WMSLocationIdDefaultReceipt);

        if (locationProfile.EnableItemInLocationUpdate
            || locationProfile.EnableLocationActivityDateTimeUpdate
            || locationProfile.EnableLocationStatusUpdate)
        {
            if (!hasGUI())
            {
                return checkFailed(strFmt("@WAX:WarehouseReceiveLocationError", locationProfile.LocProfileId, this.WMSLocationIdDefaultReceipt, this.InventLocationId));
            }

            if (Box::confirm(strFmt("@WAX:WarehouseReceiveLocationMessage", this.WMSLocationIdDefaultReceipt)))
            {
                ttsbegin;

                locationProfile = WHSLocationProfile::findByWarehouseAndLocation(this.InventLocationId, this.WMSLocationIdDefaultReceipt, true);
                locationProfile.resetLocationStatusFields();
                locationProfile.update();
    
                ttscommit;
            }
            else
            {
                return checkFailed("@WAX:UpdateCancelled");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId wmsLocationId(WMSLocation wmsLocation)
    {
        WMSLocationId wmsLocationId = '';

        if (this.wmsAisleNameActive)
        {
            wmsLocationId += wmsLocation.AisleId;
        }

        if (this.wmsRackNameActive)
        {
            wmsLocationId += NumberSeq::numInsertFormat(wmsLocation.Rack, this.wmsRackFormat);
        }

        if (this.wmsLevelNameActive)
        {
            wmsLocationId += NumberSeq::numInsertFormat(wmsLocation.Level, this.wmsLevelFormat);
        }

        if (this.wmsPositionNameActive)
        {
            wmsLocationId += NumberSeq::numInsertFormat(wmsLocation.Position, this.wmsPositionFormat);
        }

        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(InventLocationId _inventLocation)
    {
        if (_inventLocation && !InventLocation::exist(_inventLocation))
        {
            return checkFailed(strFmt(InventLocation::txtNotExist(),_inventLocation));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTOReceiptLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create dummy LP needed for transfer orders
    /// </summary>
    /// <param name="_inventLocationId">
    ///   Warehouse ID
    /// </param>
    /// <param name="_wmsLocationId">
    ///  Location ID
    /// </param>
    public static void createTOReceiptLP(InventLocationId _inventLocationId, WMSLocationId _wmsLocationId)
    {
        if (WHSLicensePlateCreationRuleSkipCheckContextFlight::instance().isEnabled())
        {
            using (WHSLicensePlateCreationRuleSkipCheckContext _c = WHSLicensePlateCreationRuleSkipCheckContext::construct())
            {
                WHSLicensePlate::createLicensePlate(InventLocation::getTOReceiptLP(_inventLocationId, _wmsLocationId));
            }
        }
        else
        {
            WHSLicensePlate::createLicensePlate(InventLocation::getTOReceiptLP(_inventLocationId, _wmsLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(InventLocationId _inventLocation)
    {
        return _inventLocation && (select firstonly inventLocation
                    where inventLocation.InventLocationId == _inventLocation
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventLocation find(InventLocationId _inventLocation, boolean _update = false)
    {
        InventLocation inventLocation;

        inventLocation.selectForUpdate(_update);

        if (_inventLocation)
        {
            select firstonly inventLocation
                where inventLocation.InventLocationId == _inventLocation;
        }

        return inventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInLegalEntity</Name>
				<Source><![CDATA[
    public static InventLocation findInLegalEntity(InventLocationId _inventLocationId,DataAreaId _dataAreaId)
    {
        InventLocation  inventLocation;

        if (_inventLocationId &&
            _dataAreaId)
        {
            select firstonly crosscompany inventLocation
                where inventLocation.InventLocationId == _inventLocationId
                   && inventLocation.DataAreaId       == _dataAreaId;
        }

        return inventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static InventLocation findRecId(RecId _recId, boolean _forUpdate = false)
    {
        InventLocation   inventLocation;

        if (_recId)
        {
            inventLocation.selectForUpdate(_forUpdate);

            select firstonly inventLocation
                   where inventLocation.RecId  == _recId;
        }

        return inventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecIdCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventLocation</c> table by using the specified <c>RecId</c> value.
    /// </summary>
    /// <param name="_recId">
    /// The RecID of the location record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventLocation</c> table; otherwise, an empty record.
    /// </returns>
    public static InventLocation findRecIdCrossCompany(RecId _recId, boolean _forUpdate = false)
    {
        InventLocation   inventLocation;

        if (_recId)
        {
            inventLocation.selectForUpdate(_forUpdate);

            select firstonly crosscompany inventLocation
                   where inventLocation.RecId  == _recId;
        }
        return inventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLogisticsLocation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default <c>LogisticsLocation</c> location based on the parameters.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The <c>InventLocationId</c> ID used to search for the default locations.
    /// </param>
    /// <param name="_logisticsLocationRoleType">
    /// The <c>LogisticsLocationRoleType</c> role to use to search for the default locations.
    /// </param>
    /// <returns>
    /// A <c>LogisticsLocation</c> record.
    /// </returns>
    /// <remarks>
    /// The order in which default locations are searched are: Warehouse, Site, Company.
    /// </remarks>
    public static LogisticsLocation getDefaultLogisticsLocation_IN(
        InventLocationId            _inventLocationId,
        LogisticsLocationRoleType   _logisticsLocationRoleType)
    {
        LogisticsLocation       logisticsLocation;
        InventLocation          inventLocation;
        LogisticsLocationRole   role = LogisticsLocationRole::findBytype(_logisticsLocationRoleType);

        if (_inventLocationId)
        {
            inventLocation      = InventLocation::find(_inventLocationId);
            logisticsLocation   = LogisticsLocationDefault::findSimpleDefault(inventLocation, role);

            //warehouse didn't have a default location so search for site
            if (!logisticsLocation.RecId)
            {
                logisticsLocation = LogisticsLocationDefault::findSimpleDefault(InventSite::find(inventLocation.InventSiteId), role);
            }
        }

        if (!logisticsLocation.RecId)
        {
            // Warehouse and site didn't have default locations, so search for company location
            logisticsLocation = LogisticsLocationDefault::findSimpleDefault(CompanyInfo::find(), role);
        }

        return logisticsLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstLocation</Name>
				<Source><![CDATA[
    public static LogisticsLocationRecId getFirstLocation(
        RecId           _location,
        TransDateTime   _transDateTime = DateTimeUtil::getSystemDateTime())
    {
        InventLocationLogisticsLocation     inventLocationLogisticsLocation;
        LogisticsPostalAddress              logisticsPostalAddress;
        utcdatetime transDateTimeTemp = _transDateTime;

        select firstonly validTimeState(transDateTimeTemp) Location from inventLocationLogisticsLocation
            order by inventLocationLogisticsLocation.IsPrimary desc
            where inventLocationLogisticsLocation.InventLocation    == _location
            exists join logisticsPostalAddress  // Time state need to be valid on this table too.
               where inventLocationLogisticsLocation.Location   == logisticsPostalAddress.Location;

        return inventLocationLogisticsLocation.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationFromRole</Name>
				<Source><![CDATA[
    public static LogisticsLocationRecId getLocationFromRole(RecId _location,LogisticsLocationRoleType _roleType, TransDateTime _transDateTime = DateTimeUtil::getSystemDateTime())
    {
        InventLocationLogisticsLocation         locationLocation;
        InventLocationLogisticsLocationRole     locationLocationRole;
        LogisticsLocationRole                   locationRole;

        select firstOnly Location from locationLocation
            order by locationLocation.IsPrimary desc
            where locationLocation.InventLocation == _location
        exists join locationLocationRole
            where locationLocation.RecId == locationLocationRole.LocationLogisticsLocation
        exists join locationRole
            where locationLocationRole.LocationRole == locationRole.RecId
               && locationRole.Type == _roleType;

        return locationLocation.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryActiveLocationFromRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the primary active location by the value of warehouse and role.
    /// </summary>
    /// <param name = "_inventLocation">The inventory location record.</param>
    /// <param name = "_role">The role for which to find the default location.</param>
    /// <returns>The locations record if found; otherwise empty record.</returns>
    public static LogisticsLocation getPrimaryActiveLocationFromRole(
        InventLocation          _inventLocation,
        LogisticsLocationRole   _role)
    {
        InventLocationLogisticsLocation     locationLocation;
        InventLocationLogisticsLocationRole locationLocationRole;

        select firstonly locationLocation
            where locationLocation.InventLocation  == _inventLocation.RecId
               && locationLocation.IsPostalAddress == NoYes::Yes
               && locationLocation.IsPrimary       == NoYes::Yes
        exists join locationLocationRole
            where locationLocation.RecId == locationLocationRole.LocationLogisticsLocation
               && locationLocationRole.LocationRole == _role.RecId;

        TransDateTime now = DateTimeUtil::getSystemDateTime();
        LogisticsPostalAddress postalAddress;
        select firstonly validtimestate(now) RecId from postalAddress
            where postalAddress.Location == locationLocation.Location;

        LogisticsLocation emptyLocation;
        return postalAddress ? LogisticsLocation::find(locationLocation.Location) : emptyLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTOReceiptLP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generate dummy LP Id
    /// </summary>
    /// <param name="_inventLocationId">
    ///     Warehouse ID
    /// </param>
    /// <param name="_wmsLocationId">
    ///    Location ID
    /// </param>
    /// <returns>
    ///    The generated license plate ID.
    /// </returns>
    public static WHSLicensePlateId getTOReceiptLP(InventLocationId _inventLocationId, WMSLocationId _wmsLocationId)
    {
        WHSLicensePlateId licensePlateId;

        licensePlateId = _inventLocationId + '_' + _wmsLocationId;

        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefInventLocationId</Name>
				<Source><![CDATA[
    public static void jumpRefInventLocationId(InventLocationId _inventLocationId, Object _caller, str _parm = '')
    {
        Args args = new Args();
        args.caller(_caller);
        args.parm(_parm);

        FormRun fr = new MenuFunction(menuitemDisplayStr(InventLocations), MenuItemType::Display).create(args);
        fr.run();

        InventLocation inventLocation  = InventLocation::find(_inventLocationId);	

        fr.dataSource().findRecord(inventLocation);
        fr.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByInventLocationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup of the <c>InventLocation</c>, based on the <c>InventLocationType</c>.
    /// </summary>
    /// <param name="_ctrl">
    /// The <c>FormStringControl</c> calling the lookup method.
    /// </param>
    /// <param name="_inventLocationType">
    /// The <c>InventLocationType</c> to lookup with.
    /// </param>
    public static void lookupByInventLocationType(FormStringControl _ctrl, InventLocationType _inventLocationType)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        ListEnumerator       listEnumerator = List::create(InventLocation::standardLookupFields()).getEnumerator();

        while (listEnumerator.moveNext())
        {
            sysTableLookup.addLookupfield(fieldName2id(tableNum(InventLocation), listEnumerator.current()));
        }

        queryBuildDataSource = query.addDataSource(tableNum(InventLocation));
        queryBuildDataSource.addRange(fieldNum(InventLocation, InventLocationType)).value(queryValue(_inventLocationType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBySiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventLocation</c> value, depending on the site ID.
    /// </summary>
    /// <param name="_ctrl">
    ///    The control on the string in the form that calls this lookup.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The site ID of the <c>InventLocation</c> value.
    /// </param>
    /// <param name="_inventLocationType">
    ///    The <c>InventLocation</c> type.
    /// </param>
    /// <param name="_lookupBySiteId">
    ///    A Boolean value that indicates whether to sort the lookup by the site ID; optional.
    /// </param>
    /// <param name="_includeBlankSite">
    ///    A Boolean value that determines whether to include the <c>InventLocations</c> value without the
    ///    site ID in the lookup; optional.
    /// </param>
    public static void lookupBySiteId(
        FormStringControl  _ctrl,
        InventSiteId       _inventSiteId,
        InventLocationType _inventLocationType,
        boolean            _lookupBySiteId   = true,
        boolean            _includeBlankSite = false)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        ListEnumerator       listEnumerator = List::create(InventLocation::standardLookupFields()).getEnumerator();

        while (listEnumerator.moveNext())
        {
            sysTableLookup.addLookupfield(fieldName2id(tableNum(InventLocation), listEnumerator.current()));
        }

        queryBuildDataSource = query.addDataSource(tableNum(InventLocation));
        queryBuildDataSource.addRange(fieldNum(InventLocation, InventLocationType)).value(queryValue(_inventLocationType));

        if (_lookupBySiteId && _inventSiteId)
        {
            if (_includeBlankSite)
            {
                queryBuildDataSource.addRange(fieldNum(InventLocation, InventSiteId)).value('"",'+queryValue(_inventSiteId));
            }
            else
            {
                queryBuildDataSource.addRange(fieldNum(InventLocation, InventSiteId)).value(queryValue(_inventSiteId));
            }
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBySiteIdAllTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs invent locations lookup by <paramref name = "_inventSiteId" />.
    /// </summary>
    /// <param name = "_ctrl">A form string control.</param>
    /// <param name = "_inventSiteId">An invent site ID.</param>
    [Replaceable]
    public static void lookupBySiteIdAllTypes(FormStringControl _ctrl, InventSiteId _inventSiteId)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        ListEnumerator listEnumerator = List::create(InventLocation::standardLookupFields()).getEnumerator();

        while (listEnumerator.moveNext())
        {
            sysTableLookup.addLookupfield(fieldName2id(tableNum(InventLocation), listEnumerator.current()));
        }

        sysTableLookup.parmQuery(InventLocation::standardLookupBySiteIdQuery(_inventSiteId));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCrossCompanyInventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// lists the invent locations of all the companies.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object reference.
    /// </param>
    public static void lookupCrossCompanyInventLocations(FormStringControl _ctrl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        Query query = new Query();
        QueryBuildDataSource qbds;

        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventLocationId), true);
        sysTableLookup.addLookupfield(fieldNum(InventLocation, DataAreaId));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, RecId));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventSiteId));

        query.allowCrossCompany(true);

        qbds = query.addDataSource(tableNum(InventLocation));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDefault</Name>
				<Source><![CDATA[
    public static void lookupDefault(FormStringControl _ctrl)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        ListEnumerator       listEnumerator = List::create(InventLocation::standardLookupFields()).getEnumerator();

        while (listEnumerator.moveNext())
        {
            sysTableLookup.addLookupfield(fieldName2id(tableNum(InventLocation), listEnumerator.current()));
        }

        queryBuildDataSource = query.addDataSource(tableNum(InventLocation));
        queryBuildDataSource.addRange(fieldNum(InventLocation, InventLocationType)).value(queryValue(InventLocationType::Standard));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lists all the invent location records.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object reference.
    /// </param>
    public static void lookupInventLocation(FormStringControl _ctrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventLocationId));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, Name));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventSiteId));

        queryBuildDataSource = query.addDataSource(tableNum(InventLocation));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventLocation, fshStore));
        queryBuildRange.value(queryValue(NoYes::Yes));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lists warehouses that are WHS or not WHS Enabled, optional filtered by Site.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object reference.
    /// </param>
    /// <param name="_whsControlled">
    /// If true, only WHS controlled location are queried.
    /// </param>
    /// <param name="_inventSiteId">
    /// Site ID; optional.
    /// </param>
    public static void lookupWarehouses(FormStringControl _ctrl, NoYesId _whsControlled, InventSiteId _inventSiteId = '')
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(InventLocation), _ctrl);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(InventLocation));

        queryBuildDataSource.addRange(fieldNum(InventLocation, whsEnabled)).value(SysQuery::value(_whsControlled));

        if (_inventSiteId)
        {
            queryBuildDataSource.addRange(fieldNum(InventLocation, InventSiteId)).value(SysQuery::value(_inventSiteId));
        }

        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventLocationId));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, Name));
        sysTableLookup.addLookupfield(fieldNum(InventLocation, InventSiteId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWHSWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lists warehouses that are WHS Enabled, optional filtered by Site.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object reference.
    /// </param>
    /// <param name="_inventSiteId">
    /// Site ID; optional.
    /// </param>
    public static void lookupWHSWarehouses(FormStringControl _ctrl, InventSiteId _inventSiteId = '')
    {
        InventLocation::lookupWarehouses(_ctrl, NoYes::Yes, _inventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupNonWHSWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lists warehouses that are not WHS Enabled, optional filtered by Site.
    /// </summary>
    /// <param name="_ctrl">
    /// The form string control object reference.
    /// </param>
    /// <param name="_inventSiteId">
    /// Site ID; optional.
    /// </param>
    public static void lookupNonWHSWarehouses(FormStringControl _ctrl, InventSiteId _inventSiteId = '')
    {
        InventLocation::lookupWarehouses(_ctrl, NoYes::No, _inventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardLookupBySiteIdQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a query to use in the dataset lookup.
    /// </summary>
    /// <param name="_inventSiteId">
    ///    The site ID of the <c>InventLocation</c> value.
    /// </param>
    /// <returns>
    ///    A query to use in the dataset lookup.
    /// </returns>
    public static  Query standardLookupBySiteIdQuery(InventSiteId _inventSiteId)
    {
        Query query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource = query.addDataSource(tableNum(InventLocation));

        if (_inventSiteId)
        {
            queryBuildDataSource.addRange(fieldNum(InventLocation,InventSiteId)).value(_inventSiteId);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a packed list of field names to display in the dataset lookup.
    /// </summary>
    /// <returns>
    ///    A container with a packed list of field names to display in the dataset lookup.
    /// </returns>
    public static container standardLookupFields()
    {
        List                list                = new List(Types::String);
        SysDictFieldGroup   sysDictFieldGroup   = new SysDictFieldGroup(tableNum(InventLocation), tableFieldgroupStr(InventLocation, AutoLookup));
        Counter             numberOfFields      = sysDictFieldGroup.numberOfFields();
        Counter             i;

        for (i=1; i<=numberOfFields; i++)
        {
            list.addEnd(fieldId2name(tableNum(InventLocation),sysDictFieldGroup.field(i)));
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS5001";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table id of the entity's related location table.
    /// </summary>
    /// <returns>The location table id related to the current entity which is <c>InventLocationLogisticsLocation</c></returns>
    public TableId getEntityLocationTableId()
    {
        return tableNum(InventLocationLogisticsLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationRoleTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table id of the entity's related location role table. This method is meant to be implemented by
    /// tables that have a mapping to <c>LogisticsEntityLocationMap</c>.
    /// </summary>
    /// <returns>Returns 0 when no implementation is found by the tables mapping <c>LogisticsEntityLocationMap</c></returns>
    public TableId getEntityLocationRoleTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the related <c>InventSite</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// true, if the <c>InventSite</c> record should be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// An <c>InventSite</c> record.
    /// </returns>
    public InventSite inventSite(boolean _forUpdate = false)
    {
        return InventSite::find(this.InventSiteId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoWHSUserLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return if the passed inventlocationId contains a WMSLocation which is a user location.
    /// </summary>
    /// <param name = "inventLocationId">The invent location identifier.</param>
    /// <returns>If this invent location contains a WMSLocation which is a user location.</returns>
    public static boolean validateNoWHSUserLocation(InventLocationId _inventLocationId)
    {
        WMSLocation wmsLocation;

        WHSuserLocType userLocType = WHSParameters::find().UserLocType;
        if (userLocType)
        {
            select firstonly wmsLocation
            where wmsLocation.LocProfileId == userLocType
            && wmsLocation.InventLocationId == _inventLocationId;
            if (wmsLocation.RecId != 0)
            {
                return checkFailed(strFmt("@Retail:RetailWarehouseContainsUserLocationWarning", _inventLocationId));
            }
        }

        return true;
     }

]]></Source>
			</Method>
			<Method>
				<Name>findByLogisticsPostalAddressRecId</Name>
				<Source><![CDATA[
     /// <summary>
     /// Finds the warehouse based on the passed RecId of a LogisticsPostalAddress record.
     /// </summary>
     /// <param name="_logisticsPostalAddressRecId">
     /// The RecId of a LogisticsPostalAddress record.
     /// </param>
     /// <returns>
     /// Found <c>InventLocation</c> record.
     /// </returns>
     public static InventLocation findByLogisticsPostalAddressRecId(LogisticsPostalAddressRecId _logisticsPostalAddressRecId)
     {
         InventLocation                  inventLocation;
         InventLocationLogisticsLocation inventLocationLogisticsLocation;
         LogisticsLocation               logisticsLocation;

         LogisticsPostalAddress  logisticsPostalAddress  = LogisticsPostalAddress::findRecId(_logisticsPostalAddressRecId);

         select firstonly inventLocation
             exists join inventLocationLogisticsLocation    
                 where inventLocationLogisticsLocation.InventLocation == inventLocation.RecId
             exists join LogisticsLocation
                 where LogisticsLocation.RecId == inventLocationLogisticsLocation.Location
                     && LogisticsLocation.RecId == logisticsPostalAddress.Location;               

         return inventLocation;
     }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsEntityLocationMapInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LogisticsEntityLocationMapInterface</c> object associated with the current table record.
    /// </summary>
    /// <returns>
    /// A <c>LogisticsEntityLocationMapInterface</c> object.
    /// </returns>
    public LogisticsEntityLocationMapInterface logisticsEntityLocationMapInterface()
    {
        return LogisticsEntityLocationMapInterface::createInstance(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoUpdateShipmentAlwaysEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>WHSAutoUpdateShipment</c> parameter is set to always update.
    /// </summary>
    /// <param name = "_inventLocationId">
    /// A warehouse ID.
    /// </param>
    /// <returns>
    /// true if the parameter is set to Always; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean isAutoUpdateShipmentAlwaysEnabled(InventLocationId _inventLocationId)
    {
        return InventLocation::find(_inventLocationId).AutoUpdateShipment == WHSAutoUpdateShipment::Always;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoUpdateShipmentAlwaysEnabledForAnyWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Auto update shipment is set to Always for any existing warehouses.
    /// </summary>
    /// <returns>
    /// true if Auto update shipment is set to Always for at least one warehouse; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean isAutoUpdateShipmentAlwaysEnabledForAnyWarehouse()
    {
        InventLocation inventLocation;

        select firstonly RecId from inventLocation
        where inventLocation.AutoUpdateShipment  == WHSAutoUpdateShipment::Always;

        if (inventLocation.RecId != 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSharingTableList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of tables that must be shared when the <c>InventLocation</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>List</c> of tables.
    /// </returns>
    [Hookable(false)]
    public static List dataSharingTableList()
    {
        List sharingList = new List(Types::String);

        sharingList.addEnd(tableStr(InventLocation));
        sharingList.addEnd(tableStr(MCRPickingWBWarehouseInfo));
        sharingList.addEnd(tableStr(InventLocationInventCountingReasonCodePolicy));

        return sharingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingCountryRegions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static container unsupportedDataSharingCountryRegions()
    {
        #ISOCountryRegionCodes

        return [#isoBR, #isoRU];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsupportedDataSharingTableFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a set of fields that cannot be shared when the <c>InventLocation</c> table is shared.
    /// </summary>
    /// <returns>
    /// The <c>Set</c> of fields.
    /// </returns>
    [Hookable(false)]
    internal static Set unsupportedDataSharingTableFieldSet()
    {
        Set sharingSet = new Set(Types::String);

        if (SysDataSharingCommonAPI::isTablePartOfEnabledSRSPolicyForCurrentCompany(tableStr(InventLocation)))
        {
            // Country fields
            sharingSet.add(fieldstr(InventLocation, ActivityType_RU));
            sharingSet.add(fieldstr(InventLocation, BranchNumber)); // BE
            sharingSet.add(fieldstr(InventLocation, CustAccount_BR));
            sharingSet.add(fieldstr(InventLocation, CustAccount_HU));
            sharingSet.add(fieldstr(InventLocation, InventCountingGroup_BR));
            sharingSet.add(fieldstr(InventLocation, InventLocationIdGoodsInRoute_RU));
            sharingSet.add(fieldstr(InventLocation, InventProfileId_RU));
            sharingSet.add(fieldstr(InventLocation, InventProfileType_RU));
            sharingSet.add(fieldstr(InventLocation, NumberSequenceGroup_RU));
            sharingSet.add(fieldstr(InventLocation, RBODefaultInventProfileId_RU));
            sharingSet.add(fieldstr(InventLocation, VendAccountCustom_RU));
            sharingSet.add(fieldstr(InventLocation, WMSLocationIdGoodsInRoute_RU));

            // WMSAdvanced obsolete
            sharingSet.add(fieldstr(InventLocation, maxPickingRouteTime));
            sharingSet.add(fieldstr(InventLocation, maxPickingRouteVolume));
            sharingSet.add(fieldstr(InventLocation, pickingLineTime));      
            sharingSet.add(fieldstr(InventLocation, useWMSOrders));

            // Fields not supported due to complex and FK relation
            sharingSet.add(fieldstr(InventLocation, VendAccount));
        }

        return sharingSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateWriteCrossCompany(str _methodName, InventLocationId _origInventLocationId = null)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query    query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                InventLocation companyInventLocation = queryRun.get(this.TableId);
                DataAreaId company = companyInventLocation.DataAreaId;
                if (companyInventLocation && company && company != curExt())
                {
                    changecompany(company)
                    {
                        InventLocation inventLocation = InventLocation::find(companyInventLocation.InventLocationId);
                        if (inventLocation.RecId)
                        {
                            buf2Buf(this, inventLocation);

                            switch (_methodName)
                            {
                                case tableMethodStr(InventLocation, createDefaultAisle):
                                    if (!SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(company, tableStr(WMSAisle)))
                                    {
                                        inventLocation.createDefaultAisleCurrentCompany();
                                    }
                                    break;

                                case tableMethodStr(InventLocation, createRFGenericUserLocation):
                                    WHSParameters::find().createRFGenericUserLocations();
                                    break;

                                case tableMethodStr(InventLocation, enableParallelizationForWaveMethods):
                                    WHSEnableTaskConfigurationWavePostMethod::enableTaskConfigurationForWarehouseAndWaveMethodIfNotEnabled(
                                        methodStr(WhsPostEngineBase, allocateWave),
                                        inventLocation.InventLocationId,
                                        WHSAllocateWaveMethodConstants::AllocateWaveMethodDefaultMaximumBatchTasks);
                                    break;
                                case tableMethodStr(InventLocation, renamePrimaryKey):
                                    this.renameInventDimInventLocation(_origInventLocationId);
                                    break;
                                case tableMethodStr(InventLocation, validateDelete):
                                    if (inventLocation.hasOpenInventSumQuantity())
                                    {
                                        return true;
                                    }
                                        
                                    break;
                                        
                                default:
                                    return false;

                            }
                        }
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransit</Name>
				<Source><![CDATA[
    public boolean isTransit()
    {
        return this.InventLocationType == InventLocationType::Transit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123830</DeveloperDocumentation>
	<FormRef>inventlocations</FormRef>
	<Label>@SYS7122</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>InventLocationId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>InventLocationIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventLocationIdx</PrimaryIndex>
	<ReplacementKey>InventLocationIdx</ReplacementKey>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdQuarantine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqRefill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdReqMain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintBOLBeforeShipConfirm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressLookup</Name>
			<Label>@SYS88672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Aisle</Name>
			<Label>@SYS23440</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSAisleNameActive</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BillOfLading</Name>
			<Label>@SYS112321</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintBOLBeforeShipConfirm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CheckDigits</Name>
			<Label>@WAX2630</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UniqueCheckDigits</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsignmentLocation_HU</Name>
			<Label>@GLS112629</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Consolidation</Name>
			<Label>@SYS106495</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConsolidateShipAtRTW</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Custom_RU</Name>
			<Label>@GLS114992</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccountCustom_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CycleCounting</Name>
			<Label>@WAX510</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CycleCountAllowPalletMove</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Deleted</Name>
			<Label>@SYS4197</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BranchNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultStatusId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultContainerTypeCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryStatusChange</Name>
			<Label>@WAX3918</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowMarkingReservationRemoval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemoveInventBlockingOnStatusChange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventProfile_RU</Name>
			<Label>@GLS113769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventProfileType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventProfileId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemCoverage</Name>
			<Label>@Sys21672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqCalendarId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LaborStandards</Name>
			<Label>@WAX3944</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowLaborStandards</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Level</Name>
			<Label>@SYS14422</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSLevelNameActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLevelFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MainWarehouse</Name>
			<Label>@SYS58075</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqRefill</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdReqMain</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationLevel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NumberSequenceGroup_RU</Name>
			<Label>@SYS54850</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroup_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Position</Name>
			<Label>@SYS9103</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSPositionNameActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSPositionFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Rack</Name>
			<Label>@SYS23579</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSRackNameActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSRackFormat</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RBODefaultValues</Name>
			<Label>@SYS108783</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RBODefaultWMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RBODefaultInventProfileId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS15217</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reservations</Name>
			<Label>@SYS15961</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdReserveOnlyWhse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReserveAtLoadPost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarehouseAutoReleaseReservation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseToWarehouseRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseRuleFailureOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadReleaseReservationPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailAllowNegativeInventory</Name>
			<Label>@SYS23882</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailInventNegFinancial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailInventNegPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailDefaultReturn</Name>
			<Label>@REX4161271</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RetailWMSLocationIdDefaultReturn</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RetailReplenishment</Name>
			<Label>@RET771</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FSHStore</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailWeightEx1</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdQuarantine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdTransit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdGoodsInRoute_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityType_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventCountingGroup_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Unship</Name>
			<Label>@WAX2738</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DecrementLoadLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WarehouseManagement</Name>
			<Label>@SYS50169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdDefaultReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSlocationIdDefaultIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationIdGoodsInRoute_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultProductionFinishGoodsLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultProductionInputLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSRawMaterialPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultKanbanFinishedGoodsLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultShipMaintenanceLoc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultReturnCreditOnlyLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultContainerTypeCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkProcessingPolicyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultQualityMaintenanceLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultFinalShipmentLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultSortingLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WHS</Name>
			<Label>@WAX4807</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WHSEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSRawMaterialPolicy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseToWarehouseRule</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleaseRuleFailureOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkProcessingPolicyName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProdOrders</Name>
			<Label>@SYS334172</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WHSProdOrderBackflushMustUseReservedQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>HMIMReportLanguage</Name>
			<Label>@SCM:HazardousGoodsReportLangage</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMIMDomesticLanguage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMIMExportLanguage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationActivityType_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowLaborStandards</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowLaborStandards</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowMarkingReservationRemoval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSAllowMarkingReservationRemoval</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BranchNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBranchNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ConsolidateShipAtRTW</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSConsolidateShipAtRTW</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount_BR</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount_HU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>HU</CountryRegionCodes>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CycleCountAllowPalletMove</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCycleCountAllowPalletMove</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DecrementLoadLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDecrementLoadLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultKanbanFinishedGoodsLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultKanbanFinishedGoodsLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultProductionFinishGoodsLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultProductionFinishGoodsLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultShipMaintenanceLoc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultShipMaintenanceLoc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultStatusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultStatusId</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>emptyPalletLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSEmptyPalletLocationId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FSHStore</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<Label>@RET1187</Label>
			<SysSharingType>Never</SysSharingType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventCountingGroup_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventCountingGroup_BR</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdGoodsInRoute_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdGoodsInRoute_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdQuarantine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdQuarantine</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdReqMain</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdReqMain</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdTransit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationIdTransit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>InventLocationLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationLevel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventLocationType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventLocationType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventProfileId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventProfileType_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<SysSharingType>Optional</SysSharingType>
			<EnumType>InventProfileType_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Manual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCovManual</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>maxPickingRouteTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<ExtendedDataType>TimeHour24</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS51201</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>maxPickingRouteVolume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<ExtendedDataType>Volume</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS51195</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroup_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>pickingLineTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>WMSAdvanced</ConfigurationKey>
			<ExtendedDataType>TimeHour24</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS51197</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintBOLBeforeShipConfirm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPrintBOLBeforeShipConfirm</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProdReserveOnlyWhse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSProdReserveOnlyWhse</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RBODefaultInventProfileId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>InventProfileId_RU</ExtendedDataType>
			<Label>@SYS4083220</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RBODefaultWMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@RET5061</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RBODefaultWMSPalletId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPalletId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Label>@RET5059</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RemoveInventBlockingOnStatusChange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRemoveInventoryBlockingOnStatusChange</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqCalendarId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqCalendarId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReqRefill</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqRefill</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReserveAtLoadPost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSReserveAtLoadPost</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailInventNegFinancial</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInventNegFinancial</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RetailInventNegPhysical</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInventNegPhysical</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailWeightEx1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWeightEx1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailWMSLocationIdDefaultReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWMSlocationIdDefaultReturn</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailWMSPalletIdDefaultReturn</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailWMSPalletIdDefaultReturn</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UniqueCheckDigits</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSUniqueCheckDigits</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>useWMSOrders</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>InventModelGroupNoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccountCustom_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccountCustom_RU</ExtendedDataType>
			<SysSharingType>Optional</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WHSEnabled</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWHSEnabled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WHSRawMaterialPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSRawMaterialPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSAisleNameActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSAisleNameActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLevelFormat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLevelFormat</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSLevelNameActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLevelNameActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSlocationIdDefaultIssue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdDefaultIssue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationIdDefaultReceipt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdDefaultReceipt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationIdGoodsInRoute_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@GLS114766</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSPositionFormat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPositionFormat</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSPositionNameActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSPositionNameActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSRackFormat</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSRackFormat</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WMSRackNameActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSRackNameActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WarehouseAutoReleaseReservation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWarehouseAutoReleaseReservation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultProductionInputLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultProductionInputLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultReturnCreditOnlyLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationIdDefaultReturn</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultContainerTypeCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultContainerTypeCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReleaseToWarehouseRule</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSReleaseToWarehouseRule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkProcessingPolicyName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkProcessingPolicyName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoUpdateShipment</Name>
			<EnumType>WHSAutoUpdateShipment</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultQualityMaintenanceLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultQualityMaintenanceLocation</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EnableQualityManagement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSEnableQualityManagementForWarehouseProcesses</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LoadReleaseReservationPolicy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSLoadReleaseReservationPolicy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WHSProdOrderBackflushMustUseReservedQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSProdOrderBackflushMustUseReservedQty</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMIMExportLanguage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
			<Label>@SCM:HazardousGoodsExportReportLanguage</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMIMDomesticLanguage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LanguageId</ExtendedDataType>
			<Label>@SCM:HazardousGoodsDomesticReportLanguage</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultFinalShipmentLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultFinalShipLoc</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultSortingLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReleaseRuleFailureOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>WHSAutoReleaseToWarehousePropagateFullReservErrorToOrderLevelFlight</FeatureClass>
			<EnumType>WHSReleaseRuleFailureOption</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventLocationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SiteIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WHSEnabledIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WHSEnabled</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LogisticsEntityLocationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Entity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EntityLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPostalAddress</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrimary</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrimaryTaxRegistration</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsPrivate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustomPartners_VendAccountCustom_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomPartners_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomPartners_VendAccountCustom_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PartnerType_Extern</Name>
					<RelatedField>PartnerType</RelatedField>
					<ValueStr>CustomPartnerType_RU::Custom</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccountCustom_RU</Name>
					<Field>VendAccountCustom_RU</Field>
					<RelatedField>PartnerCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount_BR</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount_BR</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_CustAccount_HU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_CustAccount_HU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount_HU</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount_HU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EmptyPalletLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123831</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EmptyPalletLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>emptyPalletLocation</Name>
					<Field>emptyPalletLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocationGoodsInRoute_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdGoodsInRoute_RU</Name>
					<SourceEDT>InventLocationIdGoodsInRoute_RU</SourceEDT>
					<Field>InventLocationIdGoodsInRoute_RU</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<SourceEDT>InventLocationIdGoodsInRoute_RU</SourceEDT>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::GoodsInRoute_RU</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventProfile_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventProfileId_RU</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>InventProfileId_RU</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventProfileIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventSite</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroup_RU</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroup_RU</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>QuarantineInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>QuarantineInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdQuarantine</Name>
					<SourceEDT>InventLocationIdQuarantine</SourceEDT>
					<Field>InventLocationIdQuarantine</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<SourceEDT>InventLocationIdQuarantine</SourceEDT>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Quarantine</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RBODefaultInventProfileId_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventProfile_RU</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RBODefaultInventProfileId_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RBODefaultInventProfileId_RU</Name>
					<SourceEDT>InventProfileId_RU</SourceEDT>
					<Field>RBODefaultInventProfileId_RU</Field>
					<RelatedField>InventProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqMainInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReqMainInventLocationReqMainInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdReqMain</Name>
					<SourceEDT>InventLocationIdReqMain</SourceEDT>
					<Field>InventLocationIdReqMain</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<SourceEDT>InventLocationIdReqMain</SourceEDT>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Standard</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailWMSlocationDefaultReturn</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailWMSLocationIdDefaultReturn</Name>
					<Field>RetailWMSLocationIdDefaultReturn</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransitInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransitInventLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationIdTransit</Name>
					<SourceEDT>InventLocationIdTransit</SourceEDT>
					<Field>InventLocationIdTransit</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventLocationType_Extern</Name>
					<SourceEDT>InventLocationIdTransit</SourceEDT>
					<RelatedField>InventLocationType</RelatedField>
					<ValueStr>InventLocationType::Transit</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_VendAccountCustom_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_VendAccountCustomRU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccountCustom_RU</Name>
					<SourceEDT>VendAccountCustom_RU</SourceEDT>
					<Field>VendAccountCustom_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSInventStatus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSInventStatus</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultStatusId</Name>
					<SourceEDT>WHSDefaultStatusId</SourceEDT>
					<Field>DefaultStatusId</Field>
					<RelatedField>InventStatusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocationIdDefaultIssue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123832</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocationIdDefaultIssue</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSlocationIdDefaultIssue</Name>
					<Field>WMSlocationIdDefaultIssue</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocationIdDefaultReceipt</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123833</EntityRelationshipRole>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocationIdDefaultReceipt</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationIdDefaultReceipt</Name>
					<Field>WMSLocationIdDefaultReceipt</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocationIdGoodsInRoute_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WMSLocationIdGoodsInRoute_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>locationType_Extern</Name>
					<RelatedField>locationType</RelatedField>
					<ValueStr>WMSLocationType::Buffer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationIdGoodsInRoute_RU</Name>
					<Field>WMSLocationIdGoodsInRoute_RU</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCalendarTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WorkCalendarTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqCalendarId</Name>
					<Field>ReqCalendarId</Field>
					<RelatedField>CalendarId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalendarIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultReturnLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultReturnCreditOnlyLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultReturnCreditOnlyLocation</Name>
					<Field>DefaultReturnCreditOnlyLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSContainerType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSContainerType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultContainerTypeCode</Name>
					<SourceEDT>WHSDefaultContainerTypeCode</SourceEDT>
					<Field>DefaultContainerTypeCode</Field>
					<RelatedField>ContainerTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultKanbanFinishedGoodsLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultKanbanFinishedGoodsLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultKanbanFinishedGoodsLocation</Name>
					<Field>DefaultKanbanFinishedGoodsLocation</Field>
					<RelatedField>wmsLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultProductionFinishGoodsLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultProductionFinishGoodsLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultProductionFinishGoodsLocation</Name>
					<Field>DefaultProductionFinishGoodsLocation</Field>
					<RelatedField>wmsLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultShipMaintenanceLoc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultShipMaintenanceLoc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultShipMaintenanceLoc</Name>
					<Field>DefaultShipMaintenanceLoc</Field>
					<RelatedField>wmsLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultReturnCreditOnlyLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultReturnCreditOnlyLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultReturnCreditOnlyLocation</Name>
					<Field>DefaultReturnCreditOnlyLocation</Field>
					<RelatedField>wmsLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultProductionInputLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultProductionInputLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultProductionInputLocation</Name>
					<Field>DefaultProductionInputLocation</Field>
					<RelatedField>wmsLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkProcessingPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkProcessingPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkProcessingPolicyName</Name>
					<Field>WorkProcessingPolicyName</Field>
					<RelatedField>PolicyName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultQualityMaintenanceLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultQualityMaintenanceLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventLocation</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultQualityMaintenanceLocation</Name>
					<Field>DefaultQualityMaintenanceLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultFinalShipmentLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultFinalShipmentLocation</Name>
					<Field>DefaultFinalShipmentLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultSortingLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultSortingLocation</Name>
					<Field>DefaultSortingLocation</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>