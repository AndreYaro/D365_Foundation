<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceQueueMessage</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSMobileDeviceQueueMessage extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a message and initializes the state on related messages.
    /// </summary>
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSMobileDeviceQueueMessageCollection queueMessageCollection = WHSMobileDeviceQueueMessageCollection::findRecId(this.QueueMessageCollectionRecId);
        WHSMobileDeviceEvent mobileDeviceEvent = WHSMobileDeviceEvent::singletonFromType(queueMessageCollection.EventType);

        if (!mobileDeviceEvent)
        {
            throw error("@WAX:Error_MobileDeviceQueueMessageCollectionDoNotExist");
        }

        this.State = mobileDeviceEvent.defaultState();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueueMessageState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the state on <c>WHSMobileDeviceQueueMessage</c> records.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection record ID identifying the records to update.</param>
    /// <param name = "_batchAffinity">The batch affinity identifying the records to update.</param>
    /// <param name = "_state">The state that the records should be updated with.</param>
    [Hookable(false)]
    internal static void updateQueueMessageState(
        WHSMobileDeviceQueueMessageCollectionRecId _mobileDeviceQueueMessageCollection,
        WHSMobileDeviceQueueBatchAffinity _batchAffinity,
        WHSMobileDeviceQueueMessageState _state)
    {
        ttsbegin;
        
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;

        update_recordset mobileDeviceQueueMessage
            setting
                State = _state
            where
                mobileDeviceQueueMessage.QueueMessageCollectionRecId == _mobileDeviceQueueMessageCollection &&
                mobileDeviceQueueMessage.BatchAffinity == _batchAffinity;
        
        ttscommit;  
    }

]]></Source>
			</Method>
			<Method>
				<Name>queueMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the state on <c>WHSMobileDeviceQueueMessage</c> records to queued.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection record ID identifying the records to update.</param>
    [Hookable(false)]
    internal static void queueMessages(WHSMobileDeviceQueueMessageCollectionRecId _mobileDeviceQueueMessageCollection)
    {
        WHSMobileDeviceQueueBatchAffinity avaliable = emptyGuid();

        ttsbegin;
        
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;

        update_recordset mobileDeviceQueueMessage
            setting
                State = WHSMobileDeviceQueueMessageState::Queued
            where
                mobileDeviceQueueMessage.QueueMessageCollectionRecId == _mobileDeviceQueueMessageCollection &&
                mobileDeviceQueueMessage.BatchAffinity == avaliable &&
                mobileDeviceQueueMessage.State == WHSMobileDeviceQueueMessageState::Waiting;
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret && this.State == WHSMobileDeviceQueueMessageState::Queued)
        {
            ret = checkFailed("@WAX:Error_QueuedMobileDeviceQueueMessageCannotBeDeleted");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void reset()
    {
        if (!this.canReset())
        {
            throw error("@WAX:Error_MobileDeviceQueueMessageStateCannotBeChanged");
        }
        else
        {
            this.State = WHSMobileDeviceQueueMessageState::Queued;
            this.BatchAffinity = emptyGuid();
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReset</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canReset()
    {
        return this.State == WHSMobileDeviceQueueMessageState::Failed ||
            this.State == WHSMobileDeviceQueueMessageState::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds message collection record of the message.
    /// </summary>
    /// <param name="_forUpdate">Whether to select record for update</param>
    /// <returns>
    /// The message collection record of the message.
    /// </returns>
    [Hookable(false)]
    public WHSMobileDeviceQueueMessageCollection messageCollection(boolean _forUpdate = false)
    {
        return WHSMobileDeviceQueueMessageCollection::findRecId(this.QueueMessageCollectionRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the mobile device message record by record ID.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageRecId">The mobile device message record ID.</param>
    /// <param name = "_forupdate">An optional parameter indicating the found record should allow updates.</param>
    /// <returns>The mobile device message record.</returns>
    [Hookable(false)]
    public static WHSMobileDeviceQueueMessage findByRecId(
        WHSMobileDeviceQueueMessageRecId    _mobileDeviceQueueMessageRecId,
        boolean                             _forupdate = false)
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
        
        if (_mobileDeviceQueueMessageRecId)
        {
            mobileDeviceQueueMessage.selectForUpdate(_forupdate);

            select firstOnly mobileDeviceQueueMessage
                where mobileDeviceQueueMessage.RecId == _mobileDeviceQueueMessageRecId;
        }

        return mobileDeviceQueueMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the mobile device message record by license plate.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate Id.</param>
    /// <param name = "_forupdate">An optional parameter indicating the found record should allow updates.</param>
    /// <returns>The mobile device message record.</returns>
    [Hookable(false)]
    public static WHSMobileDeviceQueueMessage findByLicensePlate(
        WHSLicensePlateId   _licensePlateId,
        boolean             _forupdate = false)
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
        
        if (_licensePlateId)
        {
            mobileDeviceQueueMessage.selectForUpdate(_forupdate);

            select firstOnly mobileDeviceQueueMessage
                where mobileDeviceQueueMessage.LicensePlateId == _licensePlateId;
        }

        return mobileDeviceQueueMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if license plate exist in the mobile device message table.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate Id.</param>
    /// <returns>true if a mobile device message record was found; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean existByLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        return WHSMobileDeviceQueueMessage::findByLicensePlate(_licensePlateId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByQueueMessageCollectionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if mobile device record exist in the mobile device message table.
    /// </summary>
    /// <param name = "_mobileDeviceQueueMessageCollection">The message collection record ID identifying the records to update.</param>
    /// <returns>true if a mobile device message record was found; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean existByQueueMessageCollectionRecId(WHSMobileDeviceQueueMessageCollectionRecId _mobileDeviceQueueMessageCollection)
    {
        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
        
        if (_mobileDeviceQueueMessageCollection)
        {
            select firstOnly mobileDeviceQueueMessage
                where mobileDeviceQueueMessage.QueueMessageCollectionRecId == _mobileDeviceQueueMessageCollection;
        }

        return mobileDeviceQueueMessage.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:Table_WHSMobileDeviceQueueMessage_DeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:Table_WHSMobileDeviceQueueMessage_Label</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>RegisteringUserId</TitleField1>
	<TitleField2>MenuItemName</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>QueueMessageCollectionIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>InventoryAndAdvancedWarehouse</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegisteringUserId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QueueMessageCollectionRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MenuItemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MessageProcessing</Name>
			<Label>@WAX:FieldGroup_WHSMobileDeviceQueueMessage_MessageProcessing</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QueueMessageCollectionRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>State</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchAffinity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegisteringUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WHSUserId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>State</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<EnumType>WHSMobileDeviceQueueMessageState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>QueueMessageCollectionRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSMobileDeviceQueueMessageCollectionRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MenuItemName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMenuItemName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>BatchAffinity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSMobileDeviceQueueBatchAffinity</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BatchAffinityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BatchAffinity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>State</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LicensePlateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>QueueMessageCollectionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QueueMessageCollectionRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchAffinity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSLicensePlate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLicensePlate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LicensePlate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>QueueEventMessage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateId</Name>
					<Field>LicensePlateId</Field>
					<RelatedField>LicensePlateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSWorkUser</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSWorkUser</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RegisteringWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>QueueEventMessage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RegisteringUserId</Name>
					<SourceEDT>WHSUserId</SourceEDT>
					<Field>RegisteringUserId</Field>
					<RelatedField>UserId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSMobileDeviceQueueMessageCollection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSMobileDeviceQueueMessageCollection</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>QueueEvent</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>QueueEventMessage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QueueMessageCollectionRecId</Name>
					<Field>QueueMessageCollectionRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSRFMenuItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSRFMenuItemTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MenuItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>QueueEventMessage</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MenuItemName</Name>
					<SourceEDT>WHSMenuItemName</SourceEDT>
					<Field>MenuItemName</Field>
					<RelatedField>MenuItemName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>