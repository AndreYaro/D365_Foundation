<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventFiscalLIFOGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventFiscalLIFOGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFiscalLIFOValuePrevYear</Name>
				<Source><![CDATA[
    boolean checkFiscalLIFOValuePrevYear()
    {
        InventFiscalLIFOJournalTable    inventFiscalLIFOJournalTable;
        InventFiscalLIFOJournalTrans    inventFiscalLIFOJournalTrans;

        if (!this.GroupId)
        {
            return false;
        }

        select sum(QtyReceipt), sum(QtyIssue) from inventFiscalLIFOJournalTrans
            group by InventFiscalLIFOGroup
            where inventFiscalLIFOJournalTrans.InventFiscalLIFOGroup == this.RecId
               && inventFiscalLIFOJournalTrans.ItemGroup             == ItemGroup::Item
            exists join inventFiscalLIFOJournalTable
            where inventFiscalLIFOJournalTable.JournalId             == inventFiscalLIFOJournalTrans.JournalId
               && inventFiscalLIFOJournalTable.JournalType           == InventFiscalLIFOJournalType::FinalReport
               && inventFiscalLIFOJournalTable.FinalReportClosed     == NoYes::Yes;

        return (inventFiscalLIFOJournalTrans.QtyReceipt - inventFiscalLIFOJournalTrans.QtyIssue) != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransactionsExist</Name>
				<Source><![CDATA[
    boolean checkTransactionsExist()
    {
        boolean     ok;
        InventTrans inventTrans;
        InventTable inventTable;

        select firstonly TableId from inventTable
            where inventTable.InventFiscalLIFOGroup == this.RecId
            exists join inventTrans
                where inventTrans.ItemId == inventTable.ItemId;

        if (inventTable)
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCrossCompany</Name>
				<Source><![CDATA[
    private boolean validateCrossCompany(str _methodName, FieldId _fieldIdToCheck = 0)
    {
        SysDataSharingPolicy policy = SysDataSharingPolicy::findSharingPolicyByCompanyAndTable(curExt(), tableId2name(this.TableId));
        if (policy.RecId && policy.IsEnabled)
        {
            Query       query = SysDataSharingCrossCompanyValidatorQueryBuilder::buildQuery(this.orig(), policy.RecId);
            QueryRun    queryRun = new QueryRun(query);
        
            while (queryRun.Next())
            {
                InventFiscalLIFOGroup companyFiscalLIFOGroup = queryRun.get(this.TableId);
                DataAreaId company = companyFiscalLIFOGroup.DataAreaId;

                if (companyFiscalLIFOGroup && company && company != curExt())
                {
                    changecompany(company)
                    {
                        InventFiscalLIFOGroup fiscalLIFOGroup = InventFiscalLIFOGroup::findByGroupId(companyFiscalLIFOGroup.GroupId);
                        if (fiscalLIFOGroup.RecId)
                        {
                            buf2Buf(this, fiscalLIFOGroup);

                            switch (_methodName)
                            {
                                case tableMethodStr(InventFiscalLIFOGroup, validateField):
                                    if (fieldNum(InventFiscalLIFOGroup, Individual) == _fieldIdToCheck
                                        && fiscalLIFOGroup.checkFiscalLIFOValuePrevYear())
                                    {
                                        return true;
                                    }
                                    break;
                                case tableMethodStr(InventFiscalLIFOGroup, validateDelete):
                                    if (fiscalLIFOGroup.checkTransactionsExist())
                                    {
                                        return true;
                                    }
                                    break;
                                    
                                default:
                                    return false;
                            }
                        }
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret && 
            (this.checkTransactionsExist() || this.validateCrossCompany(tableMethodStr(InventFiscalLIFOGroup, validateDelete))))
        {
            ret = checkFailed(strFmt("@SYS99087", tableId2pname(this.TableId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventFiscalLIFOGroup, Individual):
                if (ret && this.RecId && this.Individual != this.orig().Individual)
                {
                    if (this.checkFiscalLIFOValuePrevYear() 
                        || this.validateCrossCompany(tableMethodStr(InventFiscalLIFOGroup, validateField), _fieldIdToCheck))
                    {
                        ret = checkFailed("@SYS99200");
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventFiscalLIFOGroupId _groupId)
    {
        return _groupId && (select firstonly RecId from inventFiscalLIFOGroup
                                where inventFiscalLIFOGroup.GroupId == _groupId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventFiscalLIFOGroup</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventFiscalLIFOGroup</c> table.
    /// </returns>
    public static InventFiscalLIFOGroup find(
        RecId            _recId,
        boolean          _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        InventFiscalLIFOGroup inventFiscalLIFOGroup;

        inventFiscalLIFOGroup.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            inventFiscalLIFOGroup.concurrencyModel(_concurrencyModel);
        }

        select firstonly inventFiscalLIFOGroup
            where inventFiscalLIFOGroup.RecId == _recId;

        return inventFiscalLIFOGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupId</Name>
				<Source><![CDATA[
    public static InventFiscalLIFOGroup findByGroupId(
        InventFiscalLIFOGroupId   _groupId,
        boolean                   _forUpdate = false)
    {
        InventFiscalLIFOGroup inventFiscalLIFOGroup;

        if (_groupId)
        {
            inventFiscalLIFOGroup.selectForUpdate(_forUpdate);

            select firstonly inventFiscalLIFOGroup
                where inventFiscalLIFOGroup.GroupId == _groupId;
        }

        return inventFiscalLIFOGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and runs one form <c>InventFiscalLIFOGroup</c>.
    /// </summary>
    /// <param name="_inventFiscalLIFOGroup">
    /// The <c>InventFiscalLIFOGroup</c> record.
    /// </param>
    public static void jumpRef(Common _inventFiscalLIFOGroup)
    {
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(InventFiscalLIFOGroup), MenuItemType::Display);

        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            throw error("@SYS81158");
        }

        Args args = new Args();
        args.record(_inventFiscalLIFOGroup);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<CountryRegionCodes>IT</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123964</DeveloperDocumentation>
	<FormRef>InventFiscalLIFOGroup</FormRef>
	<Label>@SYS92979</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>GroupId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>GroupIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Individual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValueCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NormalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Individual</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>NormalValue</Name>
			<Label>@SYS92994</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValueCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NormalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventFiscalLIFOGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Individual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventFiscalLIFOIndividual</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventFiscalLIFOGroupName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>NormalValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventFiscalLIFONormalValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ValueCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventFiscalLIFONormalValueCalc</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>