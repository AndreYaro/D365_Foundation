<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjBudgetStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the specified record exists in the <c>ProjBudgetStatus</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///     The record ID of the <c>ProjBudgetStatus</c> table record to be checked for existence.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist( recId _recId)
    {
        boolean ret = true;

        if (!ProjBudgetStatus::exist(_recId))
        {
            ret = checkFailed(strfmt(ProjBudgetStatus::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>ProjBudgetStatus</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetStatus</c> table to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                 from
                     projBudgetStatus
                 where
                     projBudgetStatus.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ProjBudgetStatus</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>ProjBudgetStatus</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>ProjBudgetStatus</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetStatus find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjBudgetStatus    projBudgetStatus;

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projBudgetStatus.concurrencyModel(_concurrencyModel);
        }

        if (_recId)
        {
            projBudgetStatus.selectForUpdate(_forUpdate);

            select firstonly projBudgetStatus
                where projBudgetStatus.RecId == _recId;
        }

        return projBudgetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>ProjBudgetStatus</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///     The ID of the source document line.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record of the <c>ProjBudgetStatus</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static ProjBudgetStatus findBySourceDocumentLine(RefRecId _sourceDocumentLine, boolean _forUpdate = false)
    {
        ProjBudgetStatus    projBudgetStatus;

        if (_sourceDocumentLine)
        {
            select projBudgetStatus
                where projBudgetStatus.SourceDocumentLine == _sourceDocumentLine;
            projBudgetStatus.selectForUpdate(_forUpdate);
        }
        return projBudgetStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS328105</DeveloperDocumentation>
	<Label>@SYS318460</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>BudgetCheckResult</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCheckResult</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProjBudgetStatus</Name>
			<Label>@SYS318460</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetCheckResult</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetCheckResult</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>ProjBudgetCheckResult</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>