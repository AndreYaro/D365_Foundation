<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmTMCallListGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmTMCallListGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>campaignId</Name>
				<Source><![CDATA[
    public display smmTMCallListCampaignId campaignId()
    {
        return smmCampaignTable::findTMCallListId(this.CallListID).CampaignId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        smmCampaignTable    smmCampaignTable;

        ttsbegin;

        // Delete the primary activities attached
        smmActivityParentLink::deletePrimaryActivities(this,smmActivityParentType::CallList);

        super();

        // Is a campaign associated with the call list
        select firstonly forupdate smmCampaignTable where smmCampaignTable.tmCallListID == this.CallListID;

        if (smmCampaignTable)
        {
            // Clear association on campaign
            smmCampaignTable.tmCallListID   = '';

            smmCampaignTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstTargetPlannedDate</Name>
				<Source><![CDATA[
        public smmTMCallPlannedDateTime firstTargetPlannedDate()
    {
        smmTMCallListTable  smmTMCallListTable;

        // Find earliest planned date on call list targets
        select firstonly smmTMCallListTable
            order by CallPlannedDateTime
            where    smmTMCallListTable.CallListId == this.CallListID;

        if (smmTMCallListTable)
        {
            return smmTMCallListTable.CallPlannedDateTime;
        }

        return utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();

        this.RespWorker = smmUtility::getCurrentContactWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        // Create follow up activity for the call list if the call list has a responsible employee
        if (this.RespWorker && !this.ActivityNumber && smmParametersTable::find().FollowupCreateActivity != smmCreateActivity::AdvancedPrompt)
        {
            this.ActivityNumber = smmActivityCreate::createActivity(this).ActivityNumber;
        }

        super();

        // Insert parent link for activity
        if (this.ActivityNumber)
        {
            smmActivityParentLink::insertLink(this.ActivityNumber,smmActivityParentType::CallList, this.RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kmDescription</Name>
				<Source><![CDATA[
    display CCDescription kmDescription()
    {
        return KMCollection::find(this.kmCollectionId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastTargetPlannedDate</Name>
				<Source><![CDATA[
        public smmTMCallPlannedDateTime lastTargetPlannedDate()
    {
        smmTMCallListTable  smmTMCallListTable;

        // Find earliest planned date on call list targets
        select firstonly smmTMCallListTable
            order by CallPlannedDateTime desc
            where    smmTMCallListTable.CallListId == this.CallListID;

        if (smmTMCallListTable)
        {
            return smmTMCallListTable.CallPlannedDateTime;
        }

        return utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the title on top of the preview pane.
    /// </summary>
    /// <returns>
    /// The title field of the preview pane.
    /// </returns>
    display Caption previewPaneTitle()
    {
        return strfmt("@SYS327590", this.CallListID, this.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCallbackTargets</Name>
				<Source><![CDATA[
    display TotalCallListCallbackTarget totalCallbackTargets()
    {
        smmTMCallListTable target;

        select count(RecId) from target
            where target.CallListId == this.CallListID && target.CallStatus == smmTMCallStatus::CallBack;
        return any2int(target.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCanceledTargets</Name>
				<Source><![CDATA[
    display TotalCallListCanceledTarget totalCanceledTargets()
    {
        smmTMCallListTable target;

        select count(RecId) from target
            where target.CallListId == this.CallListID && target.CallStatus == smmTMCallStatus::Cancelled;
        return any2int(target.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalClosedTargets</Name>
				<Source><![CDATA[
    display TotalCallListClosedTarget totalClosedTargets()
    {
        smmTMCallListTable target;

        select count(RecId) from target
            where target.CallListId == this.CallListID && target.CallStatus == smmTMCallStatus::Closed;
        return any2int(target.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOpenTargets</Name>
				<Source><![CDATA[
    display TotalCallListOpenTarget totalOpenTargets()
    {
        smmTMCallListTable target;

        select count(RecId) from target
            where target.CallListId == this.CallListID && target.CallStatus == smmTMCallStatus::Open;
        return any2int(target.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTargets</Name>
				<Source><![CDATA[
    display TotalCallListTarget totalTargets()
    {
        smmTMCallListTable target;

        select count(RecId) from target
            where target.CallListId == this.CallListID;
        return any2int(target.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update(boolean _activityHandling = true)
    {
        smmActivities   smmActivities;
        boolean         createActivity = false;
        boolean         advancePrompt;
        smmActivityId   oldActivityId;

        if (_activityHandling)
        {
            advancePrompt  = (smmParametersTable::find().FollowupCreateActivity == smmCreateActivity::AdvancedPrompt);
            // Is the activity already attached to the call list
            if (this.ActivityNumber)
            {
                ttsbegin;

                // Special case - if advance prompt
                oldActivityId = (advancePrompt) ? this.orig().ActivityNumber : this.ActivityNumber;

                smmActivities = smmActivities::find(oldActivityId, true);

                // Is the required fields on the call list (and if advance prompt and activity already attached)
                if (this.RespWorker && (!advancePrompt || oldActivityId == this.ActivityNumber ))
                {
                    if (smmActivities)
                    {
                        // Is the worker still the same
                        if (smmActivities.ResponsibleWorker == this.RespWorker)
                        {
                            // Update fields on the CRM activity
                            smmActivities.updateFromCallList(this);
                        }
                        else if (!advancePrompt)
                        // The responsible worker on the call list is changed
                        {
                            // Delete the attached activity for the old worker
                            smmActivities.delete(false);

                            // Create a new activity for the new responsible
                            createActivity = true;
                        }
                    }
                }
                else
                {
                    if (smmActivities)
                    {
                        // Clear the link to old activity
                        if (!advancePrompt || !this.RespWorker)
                        {
                            this.ActivityNumber = '';
                        }

                        // Delete the attached activity
                        smmActivities.delete(false);
                    }
                }

                ttscommit;
            }
            else
            // Create follow up activity for the call list if the call list has a responsible worker
            if (this.RespWorker)
            {
                createActivity = true;
            }

            if (createActivity && !advancePrompt)
            {
                this.ActivityNumber = smmActivityCreate::createActivity(this).ActivityNumber;
            }
        }

        super();

        // Update CRM transaction log
        smmTransLog::initTrans(this, smmLogAction::insert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromAdvPromptActivity</Name>
				<Source><![CDATA[
        /* Call this before update for handling advanced prompt case.
       It should not be inside ttsbegin and ttscommit. */
    void updateFromAdvPromptActivity(smmTMCallListGroup _orig = this.orig())
    {
        smmActivities       smmActivities;

        // If advanced prompt
        if (smmParametersTable::find().FollowupCreateActivity == smmCreateActivity::AdvancedPrompt)
        {
            // If responsible was changed or there was no activity attached earlier
            if ( this.RespWorker && ((this.RespWorker != _orig.RespWorker)
                 || (!_orig.ActivityNumber)))
            {
                smmActivities       = smmActivityCreate::createActivity(this);
                this.ActivityNumber = smmActivities.ActivityNumber;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if RespWorker of <c>smmTMCallListGroup</c> table belongs to the current Legal Entity.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// RespWorker of the record in the <c>smmTMCallListGroup</c> table.
    /// </param>
    /// <returns>
    /// True if Worker belongs to current Legal Entity otherwise false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean         ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(smmTMCallListGroup, RespWorker) :
                if (this.RespWorker)
                {
                    ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.RespWorker);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>RespWorker</c> field of the <c>smmTMCallListGroup</c> table belongs to the
    /// current Legal Entity.
    /// </summary>
    /// <param name="validateWorkerOnly">
    /// A Boolean value that specifies whether only the worker has to be validated.
    /// </param>
    /// <returns>
    /// true if the worker belongs to the current Legal Entity; otherwise, false.
    /// </returns>
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        boolean ret = true;

        if (!validateWorkerOnly)
        {
            ret = super();
            // Is call list start date later than end date
            if (this.FromDateTime > this.ToDateTime)
            {
                // End date must come after start date.
                ret = checkFailed("@SYS21592");
            }
        }

        if (this.RespWorker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.RespWorker);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDistribution</Name>
				<Source><![CDATA[
        public static void clearDistribution(smmTMCallListID _callListId)
    {
        smmTMCallListTable smmTMCallListTable;

        ttsbegin;

        while select forupdate smmTMCallListTable where smmTMCallListTable.CallListId == _callListId
        {
            smmTMCallListTable.CallRespWorker = 0;

            smmTMCallListTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeByMainContactOnContactPerson</Name>
				<Source><![CDATA[
        public static Counter distributeByMainContactOnContactPerson(smmTMCallListID _callListId, boolean _overwrite)
    {
        ContactPerson           contactPerson;
        smmTMCallListTable      smmTMCallListTable;
        smmActivities           smmActivities;
        Counter                 numberOfUpdatedTargets;
        recId                   callListRecId;
        smmActivities           templateActivity = null;
        boolean                 activityHandling = false;

        select firstonly smmTMCallListTable join contactPerson
            where smmTMCallListTable.ContactPersonId  == contactPerson.ContactPersonId &&
                  smmTMCallListTable.CallListId       == _callListId &&
                  smmTMCallListTable.CallPlannedDateTime &&
                  ((!smmTMCallListTable.CallRespWorker && contactPerson.MainResponsibleWorker) || _overwrite) ;
        if (smmTMCallListTable)
        {
            // Store the old activity if any
            smmActivities = smmActivities::find(smmTMCallListTable.CallbackActivityId);

            // Set responsible to main contact on the business relation
            smmTMCallListTable.CallRespWorker = contactPerson.MainResponsibleWorker;

            // Use the first created activity as a template activity for the remainder of the targets
            templateActivity = smmTMCallListTable.createNewActivity();
            callListRecId = smmTMCallListTable.RecId;

            // Is activity handling active (the user responded Yes to the first activity)
            if (templateActivity)
            {
               activityHandling = true;
            }
            else
            {
               activityHandling = false;
            }
        }

        try
        {
            ttsbegin;

            while select forupdate smmTMCallListTable join contactPerson
                where smmTMCallListTable.ContactPersonId  == contactPerson.ContactPersonId &&
                      smmTMCallListTable.CallListId       == _callListId
            {
                if ((!smmTMCallListTable.CallRespWorker && contactPerson.MainResponsibleWorker) || _overwrite)
                {
                    // Set responsible to main contact on the business relation
                    smmTMCallListTable.CallRespWorker = contactPerson.MainResponsibleWorker;

                    if (smmTMCallListTable.RecId == callListRecId)
                    {
                        if (smmActivities)
                        {
                            smmActivities.delete(false);
                        }

                        smmTMCallListTable.CallbackActivityId = templateActivity.ActivityNumber;
                        smmTMCallListTable.update(false);
                    }
                    else
                    {
                        // Update the call list target
                        smmTMCallListTable.update(activityHandling, templateActivity);
                    }
                    numberOfUpdatedTargets++;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                templateActivity.delete(false);
                ttscommit;
            }
        }
        return numberOfUpdatedTargets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeByResponsibilityOnRelation</Name>
				<Source><![CDATA[
        public static Counter distributeByResponsibilityOnRelation(tableId _tableId, smmTMCallListID _callListId, smmResponsibilityId _responsibility, boolean _overwrite)
    {
        Common                          common;
        DictTable                       dictTable;
        fieldId                         partyFieldId;
        smmTMCallListTable              smmTMCallListTable;
        smmResponsibilitiesEmplTable    smmResponsibilitiesEmplTable;
        smmActivities                   smmActivities;
        Counter                         numberOfUpdatedTargets;
        recId                           callListRecId;
        smmActivities                   templateActivity = null;
        boolean                         activityHandling = true;

        switch (_tableId)
        {
            case tablenum(CustTable) :
            partyFieldId = fieldnum(CustTable,Party);
            break;

            case tablenum(VendTable) :
            partyFieldId = fieldnum(VendTable,Party);
            break;

            case tablenum(smmBusRelTable) :
            partyFieldId = fieldnum(smmBusRelTable,Party);
            break;

            default :
            return -1;
        }
        dictTable = new DictTable(_tableId);
        common = dictTable.makeRecord();

        select firstonly smmTMCallListTable
            join common
            where common.(partyFieldId) == smmTMCallListTable.Party
            join smmResponsibilitiesEmplTable
            where smmResponsibilitiesEmplTable.RefTableId == common.TableId &&
                  smmResponsibilitiesEmplTable.RefRecId   == common.RecId &&
                  smmTMCallListTable.CallListId         == _callListId &&
                  smmTMCallListTable.CallPlannedDateTime &&
                  smmResponsibilitiesEmplTable.ResponsibilityId  == _responsibility &&
                  ((!smmTMCallListTable.CallRespWorker && smmResponsibilitiesEmplTable.Worker) || _overwrite);
        if (smmTMCallListTable)
        {
            // Store the old activity if any
            smmActivities = smmActivities::find(smmTMCallListTable.CallbackActivityId);

            // Set responsible using the responsibilities
            smmTMCallListTable.CallRespWorker = smmResponsibilitiesEmplTable.Worker;

            // Use the first created activity as a template activity for the remainder of the targets
            templateActivity = smmTMCallListTable.createNewActivity();
            callListRecId = smmTMCallListTable.RecId;

            // Is activity handling active (the user responded Yes to the first activity)
            if (templateActivity)
            {
               activityHandling = true;
            }
            else
            {
               activityHandling = false;
            }
        }

        try
        {
            ttsbegin;

            while select forupdate smmTMCallListTable
                join common
                where common.(partyFieldId) == smmTMCallListTable.Party
                join smmResponsibilitiesEmplTable
                where smmResponsibilitiesEmplTable.RefTableId == common.TableId &&
                      smmResponsibilitiesEmplTable.RefRecId   == common.RecId &&
                      smmTMCallListTable.CallListId           == _callListId &&
                      smmResponsibilitiesEmplTable.ResponsibilityId  == _responsibility
            {
                if ((!smmTMCallListTable.CallRespWorker && smmResponsibilitiesEmplTable.Worker) || _overwrite)
                {
                    // Set responsible using the responsibilities
                    smmTMCallListTable.CallRespWorker = smmResponsibilitiesEmplTable.Worker;

                    if (smmTMCallListTable.RecId == callListRecId)
                    {
                        if (smmActivities)
                        {
                            smmActivities.delete(false);
                        }

                        smmTMCallListTable.CallbackActivityId = templateActivity.ActivityNumber;
                        smmTMCallListTable.update(false);
                    }
                    else
                    {
                        // Update the call list target
                        smmTMCallListTable.update(activityHandling, templateActivity);
                    }

                    numberOfUpdatedTargets++;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                templateActivity.delete(false);
                ttscommit;
            }
        }

        return numberOfUpdatedTargets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeMainContactOnBusinessRelation</Name>
				<Source><![CDATA[
        public static Counter distributeMainContactOnBusinessRelation(smmTMCallListID _callListId, boolean _overwrite)
    {
        smmBusRelTable          smmBusRelTable;
        smmTMCallListTable      smmTMCallListTable;
        smmActivities           smmActivities;
        recId                   callListRecId;
        Counter                 numberOfUpdatedTargets;
        smmActivities           templateActivity = null;
        boolean                 activityHandling = true;

        select firstonly smmTMCallListTable join smmBusRelTable
            where smmTMCallListTable.Party == smmBusRelTable.Party &&
                  smmTMCallListTable.CallListId    == _callListId &&
                  smmTMCallListTable.CallPlannedDateTime &&
                  ((!smmTMCallListTable.CallRespWorker && smmBusRelTable.MainContactWorker) || _overwrite);

        if (smmTMCallListTable)
        {
            // Store the old activity if any
            smmActivities = smmActivities::find(smmTMCallListTable.CallbackActivityId);

            // Set responsible to main contact on the business relation
            smmTMCallListTable.CallRespWorker = smmBusRelTable.MainContactWorker;

            // Use the first created activity as a template activity for the remainder of the targets
            templateActivity = smmTMCallListTable.createNewActivity();
            callListRecId = smmTMCallListTable.RecId;

            // Is activity handling active (the user responded Yes to the first activity)
            if (templateActivity)
            {
               activityHandling = true;
            }
            else
            {
               activityHandling = false;
            }
        }

        try
        {
            ttsbegin;

            while select forupdate smmTMCallListTable join smmBusRelTable
                where smmTMCallListTable.Party == smmBusRelTable.Party &&
                      smmTMCallListTable.CallListId    == _callListId
            {
                if ((!smmTMCallListTable.CallRespWorker && smmBusRelTable.MainContactWorker) || _overwrite)
                {
                    // Set responsible to main contact on the business relation
                    smmTMCallListTable.CallRespWorker = smmBusRelTable.MainContactWorker;
                    if (smmTMCallListTable.RecId == callListRecId)
                    {
                        if (smmActivities)
                        {
                            smmActivities.delete(false);
                        }
                        smmTMCallListTable.CallbackActivityId = templateActivity.ActivityNumber;
                        smmTMCallListTable.update(false);
                    }
                    else
                    {
                        // Update the call list target
                        smmTMCallListTable.update(activityHandling, templateActivity);
                    }
                    numberOfUpdatedTargets++;
                }
            }

            ttscommit;
        }
        catch
        {
            if (templateActivity)
            {
                ttsbegin;
                templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
                templateActivity.delete(false);
                ttscommit;
            }
        }

        return numberOfUpdatedTargets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static smmTMCallListGroup find(smmTMCallListID _smmTMCallListID, boolean _forupdate = false)
    {
        smmTMCallListGroup smmTMCallListGroup = null;

        if (_smmTMCallListID)
        {
            smmTMCallListGroup.selectForUpdate(_forupdate);

            select firstonly smmTMCallListGroup where smmTMCallListGroup.CallListID == _smmTMCallListID;
        }

        return smmTMCallListGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
        public static smmTMCallListGroup findRecId(RecId _recId, boolean _forupdate = false)
    {
        smmTMCallListGroup smmTMCallListGroup = null;

        if (_recId)
        {
            smmTMCallListGroup.selectForUpdate(_forupdate);

            select firstonly smmTMCallListGroup where smmTMCallListGroup.RecId == _recId;
        }

        return smmTMCallListGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewFromDateOnTargets</Name>
				<Source><![CDATA[
        public static void setNewFromDateOnTargets(smmTMCallListID _id, smmTMCallListFromDateTime _fromDate)
    {
        smmTMCallListTable smmTMCallListTable;

        ttsbegin;

        // Change all targets that are planned before the new from date to start on the from date
        while select forupdate smmTMCallListTable where smmTMCallListTable.CallListId == _id &&
            smmTMCallListTable.CallPlannedDateTime < _fromDate
        {
            smmTMCallListTable.CallPlannedDateTime = _fromDate;

            smmTMCallListTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewToDateOnTargets</Name>
				<Source><![CDATA[
        public static void setNewToDateOnTargets(smmTMCallListID _id, smmTMCallListToDateTime _toDate)
    {
        smmTMCallListTable smmTMCallListTable;

        ttsbegin;

        // Change all targets that are planned after the new to date to start on the to date
        while select forupdate smmTMCallListTable where smmTMCallListTable.CallListId == _id &&
            smmTMCallListTable.CallPlannedDateTime > _toDate
        {
            smmTMCallListTable.CallPlannedDateTime = _toDate;

            smmTMCallListTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmTM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124792</DeveloperDocumentation>
	<Label>@SYS80506</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>CallListID</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>CallListdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>CallListdx</PrimaryIndex>
	<ReplacementKey>CallListdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>smmResponsibilitiesEmplTable</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>smmResponsibilitiesEmplTable</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>smmTMCallListTable</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>smmTMCallListTable</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Activity</Name>
			<Label>@SYS54618</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS80094</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreateDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EPMiniPage</Name>
			<Label>@SYS108232</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewAssociations</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>campaignId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverviewGeneral</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CallListID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>campaignId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Questionnaire</Name>
			<Label>@SYS80302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Responsible</Name>
			<Label>@SYS67464</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RespWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>smmCallListMoreInfo</Name>
			<Label>@ApplicationPlatform:SingleSpace</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RespWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KMCollectionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TelemarketingPeriod</Name>
			<Label>@SYS80049</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CallListID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallListID</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CreateDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallCreateDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallListDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>FromDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallListFromDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KMCollectionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KMCollectionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RespWorker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>smmTMCallResponsibleWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ToDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmTMCallListToDateTime</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RespWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CallListdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CallListID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KMCollection</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>KMCollection</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>KMCollection</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmTMCallListGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KMCollectionId</Name>
					<SourceEDT>KMCollectionId</SourceEDT>
					<Field>KMCollectionId</Field>
					<RelatedField>kmCollectionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>IdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RespWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmTMCallListGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RespWorker</Name>
					<Field>RespWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmActivities</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmTMCallListGroup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>smmActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>