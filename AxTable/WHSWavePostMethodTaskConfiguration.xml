<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWavePostMethodTaskConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWavePostMethodTaskConfiguration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasInprocessWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the task configuration is being used in an Processing wave.
    /// </summary>
    /// <returns>
    /// true if a wave for the same warehouse is running; otherwise, false.
    /// </returns>
    public boolean hasInprocessWave()
    {
        WHSWaveTable    waveTable;

        // Select in TTS block to ensure we do not get cached value.
        ttsBegin;

        select firstOnly RecId from waveTable
            where waveTable.InventLocationId    == this.InventLocationId
            &&    waveTable.WaveStatus          == WHSWaveStatus::Executing;

        ttsCommit;

        return waveTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.hasInprocessWave())
            {
                ret = checkFailed("@WAX:PreventDeleteInUseWaveTaskConfigError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldNum(WHSWavePostMethodTaskConfiguration, MaximumBatchTasks)):
                    ret = this.validateMaximumBatchTasks();
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReplenishmentBatchTasks</Name>
				<Source><![CDATA[
    private boolean validateReplenishmentBatchTasks()
    {
        boolean ret = true;

        if (this.PostMethodName == methodStr(WhsPostEngineBase, replenish)
            && this.MaximumBatchTasks != WHSWaveTaskBasedProcessingConstants::ReplenishmentTaskBasedProcessingMaximumBatchTasks)
        {
            ret = checkFailed("@WAX:WaveTaskConfigBatchReplenishDifferentThanOneError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLabelPrintingBatchTasks</Name>
				<Source><![CDATA[
    private boolean validateLabelPrintingBatchTasks()
    {
        boolean ret = true;

        if (this.PostMethodName == methodStr(WhsPostEngineBase, waveLabelPrinting) 
            && this.MaximumBatchTasks != WHSWaveTaskBasedProcessingConstants::LabelPrintingTaskBasedProcessingMaximumBatchTasks)
        {
            ret = checkFailed("@WAX:WaveTaskConfigBatchLabelPrintingDifferentThanOneError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaximumBatchTasks</Name>
				<Source><![CDATA[
    public boolean validateMaximumBatchTasks()
    {
        boolean ret = true;

        if (this.MaximumBatchTasks <= 0)
        {
            ret = checkFailed("@WAX:WaveTaskConfigBatchTaskGreaterThanZeroError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = ret
            && this.validateMaximumBatchTasks()
            && this.validateReplenishmentBatchTasks()
            && this.validateLabelPrintingBatchTasks();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    public static boolean exists(
        WHSPostMethodName   _name,
        InventLocationId    _inventLocationId)
    {
        return (_name && _inventLocationId)
        &&     (select firstOnly RecId from  WHSWavePostMethodTaskConfiguration
                    where WHSWavePostMethodTaskConfiguration.PostMethodName   == _name
                    &&    WHSWavePostMethodTaskConfiguration.InventLocationId == _inventLocationId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByWaveTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the post method task configuration exists for a given method and wave template name.
    /// </summary>
    /// <param name = "_postMethodName">The wave process method name.</param>
    /// <param name = "_waveTemplateName">The wave template name.</param>
    /// <returns>true, if the post method task configuration exists; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean existsByWaveTemplateName(
        WHSPostMethodName   _postMethodName,
        WHSWaveTemplateName _waveTemplateName)
    {
        WHSWaveTemplateTable                waveTemplateTable;
        WHSWavePostMethodTaskConfiguration  postMethodTaskConfig;

        select firstonly RecId, InventLocationId from postMethodTaskConfig
            where postMethodTaskConfig.PostMethodName == _postMethodName
            join WarehouseGroupAll, WarehouseGroupId from waveTemplateTable
                where ((waveTemplateTable.WarehouseGroupAll == WhsWarehouseGroupAll::Warehouse && waveTemplateTable.InventLocationId == postMethodTaskConfig.InventLocationId)
                        || (waveTemplateTable.WarehouseGroupAll == WhsWarehouseGroupAll::Group)
                        || (waveTemplateTable.WarehouseGroupAll == WhsWarehouseGroupAll::All))
                    && waveTemplateTable.WaveTemplateName == _waveTemplateName;

        if (waveTemplateTable.WarehouseGroupAll == WhsWarehouseGroupAll::Group
            && !WhsWarehouseGroup::containsWarehouse(waveTemplateTable.WarehouseGroupId, postMethodTaskConfig.InventLocationId))
        {
            return false;
        }

        return postMethodTaskConfig.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveBatchGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the wave batch group, if empty use the warehouse parameter wave batch group.
    /// </summary>
    /// <returns>Wave batch group, if empty return the warehouse parameter wave batch group.</returns>
    [Hookable(false)]
    internal WHSWaveBatchGroup waveBatchGroup()
    {
        return this.WaveBatchGroup ? this.WaveBatchGroup : WHSParameters::find().WaveBatchGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSWavePostMethodTaskConfiguration find(
        WHSPostMethodName   _name,
        InventLocationId    _inventLocationId,
        boolean             _forupdate = false)
    {
        WHSWavePostMethodTaskConfiguration    postMethodTaskConfig;

        if (_name
        &&  _inventLocationId)
        {
            postMethodTaskConfig.selectForUpdate(_forupdate);

            select firstonly postMethodTaskConfig
                where postMethodTaskConfig.PostMethodName   == _name
                &&    postMethodTaskConfig.InventLocationId == _inventLocationId;
        }

        return postMethodTaskConfig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WavePostMethodTaskConfigurationDeveloperDocumentation</DeveloperDocumentation>
	<Label>@WAX:WavePostMethodTaskConfigurationLabel</Label>
	<TitleField1>PostMethodName</TitleField1>
	<TitleField2>InventLocationId</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PostMethodNameInventLocationIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>PostMethodNameInventLocationIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumBatchTasks</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveBatchGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumBatchTasks</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostMethodName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WaveBatchGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>MaximumBatchTasks</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSMaximumBatchTasks</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostMethodName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPostMethodName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WaveBatchGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWaveBatchGroup</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PostMethodNameInventLocationIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PostMethodName</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BatchGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BatchGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WaveBatchGroup</Name>
					<SourceEDT>WHSWaveBatchGroup</SourceEDT>
					<Field>WaveBatchGroup</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSPostMethod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSPostMethod</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostMethodName</Name>
					<Field>PostMethodName</Field>
					<RelatedField>PostMethodName</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>