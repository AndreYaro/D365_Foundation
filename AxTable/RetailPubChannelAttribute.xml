<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPubChannelAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
public class RetailPubChannelAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findChannelAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the value of the channel attribute
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id
    /// </param>
    /// <param name="_attributeId">
    /// Attribute Id
    /// </param>
    /// <param name="_attributeGroupId">
    /// Attribute group Id
    /// </param>
    /// <returns>
    /// The value
    /// </returns>
    public static EcoResValue findChannelAttributeValue(RefRecId _channelId, RefRecId _attributeId, RefRecId _attributeGroupId = 0)
    {
        EcoResValue value;
        EcoResAttributeValue attributeValue;
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        RetailChannelInstanceValue channelInstanceValue;

        // Try to find the channel attribute value
        select firstOnly value
        exists join attributeValue
            where attributeValue.Value == value.RecId
                && attributeValue.Attribute == _attributeId
        exists join channelInstanceValue
            where channelInstanceValue.RecId == attributeValue.InstanceValue
                && channelInstanceValue.Channel == _channelId;

        // Find attribute default value
        if (!value)
        {
            select firstOnly value
            exists join attributeGroupAttribute
                where attributeGroupAttribute.DefaultValue == value.RecId
                   && attributeGroupAttribute.AttributeGroup == _attributeGroupId
                   && attributeGroupAttribute.Attribute == _attributeId;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates publishing data for the specified channel in the <c>RetailPubChannelAttribute</c> table.
    /// </summary>
    /// <param name="_channelId">
    /// Id of the channel to publish
    /// </param>
    public static void publishChannel(RefRecId _channelId)
    {
        RetailChanneAttributeGroupAttrView channelAttribute;
        RetailPubChannelAttribute pubChannelAttribute;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        utcdatetime stepStartTime, stepEndTime;

        if (_channelId > 0)
        {
            ttsbegin;

            stepStartTime = DateTimeUtil::utcNow();

            // Delete
            delete_from pubChannelAttribute
                    where pubChannelAttribute.Channel == _channelId
                notExists join channelAttribute
                    where channelAttribute.Channel == pubChannelAttribute.Channel &&
                        channelAttribute.Attribute == pubChannelAttribute.Attribute &&
                        (channelAttribute.ChannelAttributeModifier == RetailChannelAttributeModifier::Channel ||
                         channelAttribute.ChannelAttributeModifier == RetailChannelAttributeModifier::SalesOrder);

            RetailPubChannelAttribute::publishChannelByAttributeModifier(_channelId, RetailChannelAttributeModifier::Channel);
            RetailPubChannelAttribute::publishChannelByAttributeModifier(_channelId, RetailChannelAttributeModifier::SalesOrder);

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailPubChannelAttributePublishChannelTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'publish channel delete');

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAttributeGroupAttributeDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes attribute from published table for all the channels.
    /// </summary>
    /// <param name="_attributeGroupAttribute">
    /// A record buffer for table <t>EcoResAttributeGroupAttribute</t>.
    /// </param>
    public static void onAttributeGroupAttributeDeleting(EcoResAttributeGroupAttribute _attributeGroupAttribute)
    {
        RetailChannelAttributeGroup channelAttributeGroup;
        RetailTmpRecId tmpReference;
        RetailChannelNonProductAttribute channelNonProductAttribute;

        try
        {
            str tmpReferencePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpReference);

            ttsBegin;

            // Find all channels which has this attribute group assigned as channel or sales,
            // and this attribute is assigned as channel attribute only through this attribute group.
            insert_recordset tmpReference(ReferenceRecId)
            select Channel from channelAttributeGroup
            group by Channel
                where channelAttributeGroup.AttributeGroup == _attributeGroupAttribute.AttributeGroup &&
                (channelAttributeGroup.Modifier == RetailChannelAttributeModifier::Channel ||
                channelAttributeGroup.Modifier == RetailChannelAttributeModifier::SalesOrder)
            join channelNonProductAttribute
                where channelNonProductAttribute.Channel == channelAttributeGroup.Channel &&
                    channelNonProductAttribute.Attribute == _attributeGroupAttribute.Attribute &&
                    channelNonProductAttribute.AttributeGroupCount == 1;

            // Deletes channel published attributes if any channel found.
            if (tmpReference.RowCount() != 0)
            {
                RetailPubChannelAttribute::onChannelAttributeGroupAttributeDeleting(tmpReference, _attributeGroupAttribute);
            }

            ttsCommit;
        }
        finally
        {
            // Dispose TempDb table variable instances since they are no longer needed. This will ensure quick cleanup
            // and better for performance.
            tmpReference.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onAttributeGroupAttributeInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts attribute into published table for all the channels, if a new attribute is inserted to attribute group.
    /// </summary>
    /// <param name="_attributeGroupAttribute">
    /// A record for EcoResAttributeGroupAttribute table.
    /// </param>
    public static void onAttributeGroupAttributeInserted(EcoResAttributeGroupAttribute _attributeGroupAttribute)
    {
        RetailChannelAttributeGroup channelAttributeGroup;
        RetailChannelNonProductAttribute channelNonProductAttribute;
        RetailTmpRecId tmpReference;

        try
        {
            str tmpReferencePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpReference);

            ttsBegin;

            // Find all channels which has this attribute group assigned as channel or sales,
            // and this attribute is assigned as channel attribute only through this attribute group.
            insert_recordset tmpReference(ReferenceRecId)
            select Channel from channelAttributeGroup
                group by Channel
                    where channelAttributeGroup.AttributeGroup == _attributeGroupAttribute.AttributeGroup &&
                        (channelAttributeGroup.Modifier == RetailChannelAttributeModifier::Channel ||
                        channelAttributeGroup.Modifier == RetailChannelAttributeModifier::SalesOrder)
                exists join channelNonProductAttribute
                    where channelNonProductAttribute.Channel == channelAttributeGroup.Channel &&
                        channelNonProductAttribute.Attribute == _attributeGroupAttribute.Attribute &&
                        channelNonProductAttribute.AttributeGroupCount == 1;

            // Published channel attributes if any channel found.
            if (tmpReference.RowCount() != 0)
            {
                RetailPubChannelAttribute::onChannelAttributeGroupAttributeInserted(tmpReference, _attributeGroupAttribute);
            }

            ttsCommit;
        }
        finally
        {
            // Dispose TempDb table variable instances since they are no longer needed. This will ensure quick cleanup
            // and better for performance.
            tmpReference.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChannelAttributeGroupAttributeDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes attribute from published table and reference table.
    /// </summary>
    /// <param name="_tmpReference">
    /// A record buffer for <t>RetailTmpRecId</t>.
    /// </param>
    /// <param name="_attributeGroupAttribute">
    /// A record buffer for table <t>EcoResAttributeGroupAttribute</t>.
    /// </param>
    public static void onChannelAttributeGroupAttributeDeleting(RetailTmpRecId _tmpReference, EcoResAttributeGroupAttribute _attributeGroupAttribute)
    {
        RetailPubChannelAttribute pubChannelAttribute;
        RetailChannelInstanceValue  channelInstanceValue;
        EcoResAttributeValue ecoResAttributeValue;
        EcoResValue ecoResValue;

        ttsBegin;

        // Delete Published channel attribute for selected attribute.
        delete_from pubChannelAttribute
        where pubChannelAttribute.Attribute == _attributeGroupAttribute.Attribute
            exists join _tmpReference
                where _tmpReference.ReferenceRecId == pubChannelAttribute.Channel;

        // Deletes EcoResAttributeValue.
        ecoResAttributeValue.skipDeleteActions(true);

        delete_from ecoResAttributeValue
        where ecoResAttributeValue.Attribute == _attributeGroupAttribute.Attribute
            exists join channelInstanceValue
                where channelInstanceValue.RecId == ecoResAttributeValue.InstanceValue
            exists join _tmpReference
                where _tmpReference.ReferenceRecId == channelInstanceValue.Channel;

        // Delete EcoResValue for selected attribute.
        delete_from ecoResValue
            exists join ecoResAttributeValue
                where ecoResAttributeValue.Attribute == _attributeGroupAttribute.Attribute
                    && ecoResAttributeValue.Value == ecoResValue.RecId
            exists join channelInstanceValue
                where channelInstanceValue.RecId == ecoResAttributeValue.InstanceValue
            exists join _tmpReference
                where _tmpReference.ReferenceRecId == channelInstanceValue.Channel;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChannelAttributeGroupAttributeInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts attribute into RetailPubChannelAttribute table.
    /// </summary>
    /// <param name="_tmpReference">
    /// A rcord for RetailTmpRecId table.
    /// </param>
    /// <param name="_attributeGroupAttribute">
    /// A rcord for EcoResAttributeGroupAttribute table.
    /// </param>
    public static void onChannelAttributeGroupAttributeInserted(RetailTmpRecId _tmpReference, EcoResAttributeGroupAttribute _attributeGroupAttribute)
    {
        RetailPubChannelAttribute pubChannelAttribute, checkPubChannelAttribute;
        EcoResAttributeValue        ecoResAttributeValue, checkEcoResAttributeValue;
        RetailChannelInstanceValue  channelInstanceValue, checkChannelInstanceValue;
        EcoResValue ecoResValue;
        EcoResAttributeDefaultValue attributeDefaultValue;
        EcoResTextValueTranslation newTranslation, sourceTranslation;
        EcoResValue         defaultEcoResValue, newEcoResValue;

        EcoResTextValue     newTextValue, sourceTextValue;
        EcoResBooleanValue  newBooleanValue, sourceBooleanValue;
        EcoResDateTimeValue newDateTimeValue, sourceDateTimeValue;
        EcoResCurrencyValue newCurrencyValue, sourceCurrencyValue;
        EcoResFloatValue    newFloatValue, sourceFloatValue;
        EcoResIntValue      newIntValue, sourceIntValue;

        AttributeValueText  text;
        AttributeValueCurrency  currency;
        NoYes   booleanValue;
        str 3   currencyCode;
        AttributeValueDateTime dateTime;
        AttributeValueFloat float;
        RefRecId floatUnitOfMeasure, intUnitOfMeasure;
        AttributeValueInt intValue;

        int64 lastTransactionId;
        boolean isBlankValueCreated;

        EcoResAttributeId attributeRecId = _attributeGroupAttribute.Attribute;

        // Find default EcoResValue from Attribute group attribute default value, then attribute default value, and then blank value.
        defaultEcoResValue = EcoResValue::find(_attributeGroupAttribute.DefaultValue);
        if (!defaultEcoResValue)
        {
            attributeDefaultValue = EcoResAttributeDefaultValue::findByAttribute(_attributeGroupAttribute.Attribute);
            defaultEcoResValue = EcoResValue::find(attributeDefaultValue.Value);

            if (!defaultEcoResValue)
            {
                defaultEcoResValue = EcoResValue::find(EcoResValue::createBlankValue(_attributeGroupAttribute.Attribute), true);
                isBlankValueCreated = true;
            }
        }

        ttsBegin;

        // Copy Default EcoResvalue to new EcoResValue
        if (defaultEcoResValue is EcoResTextValue)
        {
            sourceTextValue = defaultEcoResValue as EcoResTextValue;
            text = sourceTextValue.TextValue;

            // Insert new EcoResTextValue
            insert_recordset newTextValue (Origin, TextValue)
            select ReferenceRecId, text from _tmpReference;

            // Copy translations
            insert_recordset newTranslation (TextValueTable, Language, TextValue)
            select RecId from newTextValue
                where newTextValue.createdTransactionId == lastTransactionId
            join Language, TextValue from sourceTranslation
                where sourceTranslation.TextValueTable == sourceTextValue.RecId;
        }
        else if (defaultEcoResValue is EcoResBooleanValue)
        {
            sourceBooleanValue = defaultEcoResValue as EcoResBooleanValue;
            booleanValue = sourceBooleanValue.BooleanValue;

            // Insert new EcoResBooleanValue
            insert_recordset newBooleanValue (Origin, BooleanValue)
            select ReferenceRecId, booleanValue from _tmpReference;
        }
        else if (defaultEcoResValue is EcoResDateTimeValue)
        {
            sourceDateTimeValue = defaultEcoResValue as EcoResDateTimeValue;
            dateTime = sourceDateTimeValue.DateTimeValue;

            // Insert new EcoResDateTimeValue
            insert_recordset newDateTimeValue (Origin, DateTimeValue)
            select ReferenceRecId, dateTime from _tmpReference;
        }
        else if (defaultEcoResValue is EcoResCurrencyValue)
        {
            sourceCurrencyValue = defaultEcoResValue as EcoResCurrencyValue;
            currency = sourceCurrencyValue.CurrencyValue;
            currencyCode = sourceCurrencyValue.CurrencyCode;

            // Insert new EcoResCurrencyValue
            insert_recordset newCurrencyvalue (Origin, CurrencyValue, CurrencyCode)
            select ReferenceRecId, currency, currencyCode from _tmpReference;
        }
        else if (defaultEcoResValue is EcoResFloatValue)
        {
            sourceFloatValue = defaultEcoResValue as EcoResFloatValue;
            float = sourceFloatValue.FloatValue;
            floatUnitOfMeasure = sourceFloatValue.FloatUnitOfMeasure;

            // Insert new EcoResFloatValue
            insert_recordset newFloatValue (Origin, FloatValue, FloatUnitOfMeasure)
            select ReferenceRecId, float, floatUnitOfMeasure from _tmpReference;
        }
        else if (defaultEcoResValue is EcoResIntValue)
        {
            sourceIntValue = defaultEcoResValue as EcoResIntValue;
            intValue = sourceIntValue.IntValue;
            intUnitOfMeasure = sourceIntValue.IntUnitOfMeasure;

            // Insert new EcoResIntValue
            insert_recordset newIntvalue (Origin, IntValue, IntUnitOfMeasure)
            select ReferenceRecId, intValue, intUnitOfMeasure from _tmpReference;
        }
        else
        {
            // Reference values are not supported.
            ttsCommit;
            return;
        }

        // Get the current transaction id.
        lastTransactionId = Appl.curTransactionId();

        // Insert channelInstanceValue if not exists already
        insert_recordset channelInstanceValue
        (channel)
        select ReferenceRecId
            from _tmpReference
        notExists join checkChannelInstanceValue
            where checkChannelInstanceValue.Channel == _tmpReference.ReferenceRecId;

        // Insert EcoResAttributeValue if not exists already
        insert_recordset ecoResAttributeValue
        (Attribute, InstanceValue, Value)
        select _tmpReference
        join attributeRecId, RecId from channelInstanceValue
            where channelInstanceValue.Channel == _tmpReference.ReferenceRecId
        join RecId from ecoResValue
            where ecoResValue.Origin == channelInstanceValue.Channel &&
                ecoResValue.createdTransactionId == lastTransactionId
        notExists join checkEcoResAttributeValue
            where checkEcoResAttributeValue.Attribute == attributeRecId &&
                checkEcoResAttributeValue.InstanceValue == channelInstanceValue.RecId;

        // Insert RetailPubChannelAttribute if not exists already
        // Currenty only single text attribute is supported by Retail Channel, so only one record should be added for a given channel and attribute
        // But there may be cases where there is some dirty data, in order to migitate this issue, we insert ONLY the first combinate we got.
        insert_recordset pubChannelAttribute
        (Attribute, Channel, AttributeValue)
        select firstonly attributeRecId, ReferenceRecId
            from _tmpReference
        join RecId from ecoResValue
            where ecoResValue.Origin == _tmpReference.ReferenceRecId
        notExists join checkPubChannelAttribute
            where checkPubChannelAttribute.Channel == _tmpReference.ReferenceRecId &&
                checkPubChannelAttribute.Attribute == attributeRecId;

        update_recordset newEcoResValue
        setting Origin = 0
        where newEcoResValue.createdTransactionId == lastTransactionId
        join _tmpReference
            where _tmpReference.ReferenceRecId == newEcoResValue.Origin;

        // Delete source blank value after copy is done.
        if (isBlankValueCreated)
        {
            defaultEcoResValue.delete();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChannelAttributeGroupDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes attribute from published table for a channel.
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id to create attribute to.
    /// </param>
    /// <param name="_attributeGroupId">
    /// Attribute group id to delete.
    /// </param>
    public static void onChannelAttributeGroupDeleting(RetailChannelRecId _channelId, RefRecId _attributeGroupId)
    {
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        RetailChannelNonProductAttribute channelNonProductAttribute;
        RetailTmpRecId tmpReference;

        try
        {
            ttsBegin;

            delete_from tmpReference;

            tmpReference.ReferenceRecId = _channelId;
            tmpReference.insert();

            while select ecoResAttributeGroupAttribute
                where ecoResAttributeGroupAttribute.AttributeGroup == _attributeGroupId
                join Channel from channelNonProductAttribute
                where channelNonProductAttribute.Channel == _channelId &&
                    channelNonProductAttribute.Attribute == ecoResAttributeGroupAttribute.Attribute &&
                    channelNonProductAttribute.AttributeGroupCount == 1
            {
                RetailPubChannelAttribute::onChannelAttributeGroupAttributeDeleting(tmpReference, ecoResAttributeGroupAttribute);
            }

            ttsCommit;
        }
        finally
        {
            // Dispose TempDb table variable instances since they are no longer needed. This will ensure quick cleanup
            // and better for performance.
            tmpReference.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChannelAttributeGroupInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts attribute into published table for selected channel.
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id to create attribute to.
    /// </param>
    /// <param name="_attributeGroupId">
    /// Attribute group Id.
    /// </param>
    public static void onChannelAttributeGroupInserted(RetailChannelRecId _channelId, RefRecId _attributeGroupId)
    {
        RetailChannelNonProductAttribute channelNonProductAttribute;
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        RetailTmpRecId tmpReference;

        try
        {
            str tmpReferencePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpReference);

            ttsBegin;

            delete_from tmpReference;

            tmpReference.ReferenceRecId = _channelId;
            tmpReference.insert();

            while select attributeGroupAttribute
                where attributeGroupAttribute.AttributeGroup == _attributeGroupId
            exists join channelNonProductAttribute
                where channelNonProductAttribute.Channel == _channelId &&
                    channelNonProductAttribute.Attribute == attributeGroupAttribute.Attribute &&
                    channelNonProductAttribute.AttributeGroupCount == 1
            {
                RetailPubChannelAttribute::onChannelAttributeGroupAttributeInserted(tmpReference, attributeGroupAttribute);
            }
        }
        finally
        {
            // Dispose TempDb table variable instances since they are no longer needed. This will ensure quick cleanup
            // and better for performance.
            tmpReference.dispose();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishChannelByAttributeModifier</Name>
				<Source><![CDATA[
    private static void publishChannelByAttributeModifier(RefRecId _channelId, RetailChannelAttributeModifier _attributeModifier)
    {
        RetailChanneAttributeGroupAttrView channelAttribute;
        RetailPubChannelAttribute pubChannelAttribute;
        EcoResValue oldValue, newValue;
        boolean updated;
        // In the following "Update" part, since multiple records from RetailChanneAttributeGroupAttrView could share the same attribute,
        // the same record from RetailPubChannelAttribute may get udpated for multiple times, which will cause exceptions.
        // This Set is used to track if some row from RetailPubChannelAttribute has already been updated.
        Set updatedPubChannelAttribute = new Set (Types::Int64);

        // This set recording the deleted EcoResValue is to prevent duplicate deletion which leads to errors on exiting All Stores form.
        Set deletedEcoResValue = new Set(Types::Int64);

        // An attribute can be in different attribute groups. This set is to prevent duplicate insertion during the insertion of the 
        // published attributes..
        Set insertedPubChannelAttribute = new Set(Types::Int64);

        // Update
        while select forUpdate pubChannelAttribute
                where pubChannelAttribute.Channel == _channelId
            join channelAttribute
                where channelAttribute.Channel == pubChannelAttribute.Channel &&
                    channelAttribute.Attribute == pubChannelAttribute.Attribute &&
                    channelAttribute.ChannelAttributeModifier == _attributeModifier
            outer join forupdate oldValue
                where oldValue.RecId == pubChannelAttribute.AttributeValue
        {
            // If the attribute value has been updated, then skip it.
            if (updatedPubChannelAttribute.in(pubChannelAttribute.RecId))
            {
                continue;
            }

            // Try to find the current channel attribute value
            newValue = RetailPubChannelAttribute::findChannelAttributeValue(_channelId, channelAttribute.Attribute, channelAttribute.FirstAttributeGroup);

            updated = false;
            if (oldValue && newValue)
            {
                if (oldValue.getStringValue() != newValue.getStringValue())
                {
                    if (!deletedEcoResValue.in(oldValue.RecId))
                    {
                        deletedEcoResValue.add(oldValue.RecId);
                        oldValue.delete();
                    }

                    pubChannelAttribute.AttributeValue = newValue.pcDuplicate();
                    updated = true;
                }
            }
            else if (oldValue && !newValue)
            {
                if (!deletedEcoResValue.in(oldValue.RecId))
                {
                    deletedEcoResValue.add(oldValue.RecId);
                    oldValue.delete();
                }

                pubChannelAttribute.AttributeValue = 0;
                updated = true;
            }
            else if (!oldValue && newValue)
            {
                pubChannelAttribute.AttributeValue = newValue.pcDuplicate();
                updated = true;
            }

            if (updated)
            {
                pubChannelAttribute.update();
                updatedPubChannelAttribute.add(pubChannelAttribute.RecId);
            }
        }

        // Insert
        while select Channel, ChannelAttributeModifier, Attribute, FirstAttributeGroup from channelAttribute
            where channelAttribute.Channel == _channelId &&
                channelAttribute.ChannelAttributeModifier == _attributeModifier
        notExists join pubChannelAttribute
            where pubChannelAttribute.Channel == _channelId
                && pubChannelAttribute.Attribute == channelAttribute.Attribute
        {
            if (insertedPubChannelAttribute.in(channelAttribute.Attribute))
            {
                continue;
            }

            pubChannelAttribute.Channel = channelAttribute.Channel;
            pubChannelAttribute.Attribute = channelAttribute.Attribute;

            // Try to find channel attribute value
            newValue = RetailPubChannelAttribute::findChannelAttributeValue(_channelId, channelAttribute.Attribute, channelAttribute.FirstAttributeGroup);

            if (newValue)
            {
                pubChannelAttribute.AttributeValue = newValue.pcDuplicate();
            }
            else
            {
                pubChannelAttribute.AttributeValue = 0;
            }

            pubChannelAttribute.insert();

            insertedPubChannelAttribute.add(channelAttribute.Attribute);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET490327</DeveloperDocumentation>
	<Label>@RET490334</Label>
	<TitleField1>Channel</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Merchandising</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS6047</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Channel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ChannelAttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Channel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeValue</Name>
					<Field>AttributeValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<Field>Channel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailPubRetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailPubRetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<Field>Channel</Field>
					<RelatedField>OriginId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>OriginIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>