<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMProductLotAssociation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdAsBuiltBOMProductLotAssociation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMatchId</Name>
				<Source><![CDATA[
    internal static Num getMatchId(boolean _makeDecisionLater = false, boolean _dontThrowOnMissingRefSetUp = false)
    {
        return NumberSeq::newGetNum(BOMParameters::numRefBOMProductComponentMatchId(), _makeDecisionLater, _dontThrowOnMissingRefSetUp).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssociation</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotAssociation findAssociation(InventTransRefId      _referenceId,
                                                                        InventTransId         _inventTransId,
                                                                        ItemId                _itemId,
                                                                        InventDim             _inventDim,
                                                                        ProdAsBuiltBOMMatchId _matchId = '',
                                                                        boolean               _forUpdate = false)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        productLotAssociation.selectForUpdate(_forUpdate);

        select productLotAssociation
            where productLotAssociation.ReferenceId           == _referenceId
               && productLotAssociation.InventTransId         == _inventTransId
               && productLotAssociation.ItemId                == _itemId
               && (!_matchId || productLotAssociation.MatchId == _matchId)
               && productLotAssociation.SerialNumberId        == _inventDim.InventSerialId
               && productLotAssociation.BatchNumberId         == _inventDim.InventBatchId;

        return productLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssociationByMatchId</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotAssociation findAssociationByMatchId(ProdAsBuiltBOMMatchId _matchId, boolean _forUpdate = false)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        productLotAssociation.selectForUpdate(_forUpdate);

        select firstonly productLotAssociation
            where productLotAssociation.MatchId == _matchId;

        return productLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssociationByUniqueSerialNumber</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotAssociation findAssociationByUniqueSerialNumber(ProdAsBuiltBOMProductLotAssociation _productLotAssociation)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        select firstonly productLotAssociation
            where productLotAssociation.ItemId         == _productLotAssociation.ItemId
               && productLotAssociation.SerialNumberId == _productLotAssociation.SerialNumberId;

        return productLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>complete</Name>
				<Source><![CDATA[
    internal static void complete(ProdId _productionOrderId, JournalId _journalId)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;
        ProdAsBuiltBOMComponentLotAssociation componentLotAssociation;

        update_recordset productLotAssociation
            setting IsCompleted = true, IsActive = false
            where productLotAssociation.ReferenceId             == _productionOrderId
               && productLotAssociation.ReportFinishedJournalId == _journalId
               && !productLotAssociation.IsCompleted
        notexists join componentLotAssociation
            where componentLotAssociation.ReferenceId == productLotAssociation.ReferenceId
              &&  componentLotAssociation.MatchId     == productLotAssociation.MatchId
              &&  !componentLotAssociation.IsCompleted;
        
        productLotAssociation = ProdAsBuiltBOMProductLotAssociation::findInactiveProductLotAssociation(productLotAssociation, true);
                
        if (productLotAssociation.RecId)
        {
            productLotAssociation.IsActive = true;
            productLotAssociation.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductLot</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMFormulaProducts findProductLot()
    {
        ProdAsBuiltBOMFormulaProducts productLot;

        select firstonly productLot
            where productLot.ProdId        == this.ReferenceId
               && productLot.ItemId        == this.ItemId
               && productLot.InventTransId == this.InventTransId;

        return productLot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateCurrentProductAssociation</Name>
				<Source><![CDATA[
    internal void activateCurrentProductAssociation()
    {
        if (!this.IsCompleted && !this.orig().IsActive)
        {
            ttsbegin;
            this.IsActive = true;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivateCurrentProductAssociation</Name>
				<Source><![CDATA[
    internal void deactivateCurrentProductAssociation()
    {
        ttsbegin;
        this.IsActive = false;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInactiveProductLotAssociation</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMProductLotAssociation findInactiveProductLotAssociation(ProdAsBuiltBOMProductLotAssociation _activeProductAssociation, boolean _forUpdate = false)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        productLotAssociation.selectForUpdate(_forUpdate);

        select firstonly productLotAssociation
            order by RecId
            where productLotAssociation.ReferenceId == _activeProductAssociation.ReferenceId
              && productLotAssociation.RecId        != _activeProductAssociation.RecId
              && !productLotAssociation.IsActive
              && !productLotAssociation.IsCompleted;

        return productLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ProdAsBuiltBOMProductLotAssociation, InventTransId):
                if (this.InventTransId)
                {
                    ProdAsBuiltBOMFormulaProducts productLot = ProdAsBuiltBOMFormulaProducts::find(this.InventTransId);

                    this.MatchId        = ProdAsBuiltBOMProductLotAssociation::getMatchId();                                        
                    this.ReferenceId    = productLot.ProdId;
                    this.ItemId         = productLot.ItemId;
                    this.ProductType    = productLot.productType();
                    this.SiteId         = InventDim::find(productLot.InventDimId).InventSiteId;
                    this.InventUnitId   = productLot.inventoryUnitId();
                    
                    this.initInternal();
                    this.activateCurrentProductAssociation();
                }
                break;
            case fieldNum(ProdAsBuiltBOMProductLotAssociation, IsActive):
                this.activateCurrentProductAssociation();
                break;
            case fieldNum(ProdAsBuiltBOMProductLotAssociation, IsCompleted):
                this.deactivateCurrentProductAssociation();
                break;
            case fieldNum(ProdAsBuiltBOMProductLotAssociation, SerialNumberId):
            case fieldNum(ProdAsBuiltBOMProductLotAssociation, BatchNumberId):
                this.initInventDim();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);
        
        switch (_fieldName)
        {
            case fieldstr(ProdAsBuiltBOMProductLotAssociation, IsActive):
                if (this.IsCompleted)
                {
                    ret = checkFailed(strfmt("@SCM:TrackedComponentsProductLotAssociationActiveCheck", this.MatchId));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInternal</Name>
				<Source><![CDATA[
    internal void initInternal()
    {
        this.SequenceId = (this.SequenceId != 0) ? this.SequenceId 
                                                 : ProdAsBuiltBOMProductLotAssociation::nextSequenceId(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    internal void initInventDim()
    {
        if (this.InventTransId)
        {
            InventDim inventDimLocal;

            inventDimLocal.initFromInventDim(InventDim::find(ProdAsBuiltBOMFormulaProducts::find(this.InventTransId).InventDimId));
            inventDimLocal.InventBatchId     = this.BatchNumberId;
            inventDimLocal.InventSerialId    = this.SerialNumberId;

            this.InventDimId = InventDim::findOrCreate(inventDimLocal).InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    internal InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromReportFinishedLine</Name>
				<Source><![CDATA[
    internal void updateFromReportFinishedLine(ProdJournalProd _reportFinishedLine, boolean _updateQtyFromReportFinishedLine = true)
    {
        this.selectForUpdate(true);
        this.ReportFinishedJournalId    = _reportFinishedLine.JournalId;
        this.InventTransChildRefId      = _reportFinishedLine.InventTransChildRefId;
        this.InventTransChildType       = _reportFinishedLine.InventTransChildType;

        if (_updateQtyFromReportFinishedLine)
        {
            this.QtyGood                = _reportFinishedLine.QtyGood;
            this.QtyError               = _reportFinishedLine.QtyError;
        }
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecordsetFromReportFinishedLine</Name>
				<Source><![CDATA[
    internal static void updateRecordsetFromReportFinishedLine(ProdJournalProd _reportFinishedLine)
    {        
        if (ProdAsBuiltBOMProductLotAssociation::skipUpdateFromReportFinishedLine(_reportFinishedLine))
        {
            return;
        }

        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        update_recordset productLotAssociation
            setting ReportFinishedJournalId = _reportFinishedLine.JournalId,
                    InventTransChildRefId   = _reportFinishedLine.InventTransChildRefId,
                    InventTransChildType    = _reportFinishedLine.InventTransChildType
            where productLotAssociation.ReferenceId    == _reportFinishedLine.ProdId
                && productLotAssociation.InventTransId == _reportFinishedLine.InventTransId
                && !productLotAssociation.IsCompleted
                && !productLotAssociation.ReportFinishedJournalId
                && !productLotAssociation.InventTransChildRefId
                && !productLotAssociation.InventTransChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateFromReportFinishedLine</Name>
				<Source><![CDATA[
    private static boolean skipUpdateFromReportFinishedLine(ProdJournalProd _reportFinishedLine)
    {
        if (!ProdAsBuiltBOMResolveRAFLocationLPFlight::instance().isEnabled())
        {
            return false;
        }

        if (_reportFinishedLine.InventReturnFlag)
        {
            // skip for reverse action.
            return true;
        }

        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        select firstonly RecId from productLotAssociation
            where productLotAssociation.ReportFinishedJournalId == _reportFinishedLine.JournalId;
        
        if (productLotAssociation.RecId)
        {
            // auto-created RAF journal => productLotAssociation has a stamp already.
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearProdReportFinishedJournalId</Name>
				<Source><![CDATA[
    internal static void clearProdReportFinishedJournalId(ProdId _productionOrderId, JournalId _journalId)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        update_recordset productLotAssociation
            setting ReportFinishedJournalId = '', InventTransChildRefId = '', InventTransChildType = 0
            where productLotAssociation.ReferenceId             == _productionOrderId
               && productLotAssociation.ReportFinishedJournalId == _journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearProdReportFinishedJournalLine</Name>
				<Source><![CDATA[
    internal static void clearProdReportFinishedJournalLine(ProdJournalProd _reportFinishedLine)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        update_recordset productLotAssociation
            setting ReportFinishedJournalId = '', InventTransChildRefId = '', InventTransChildType = 0
            where productLotAssociation.ReferenceId              == _reportFinishedLine.ProdId
                && productLotAssociation.InventTransId           == _reportFinishedLine.InventTransId
                && productLotAssociation.ReportFinishedJournalId == _reportFinishedLine.JournalId
                && productLotAssociation.InventTransChildRefId   == _reportFinishedLine.InventTransChildRefId
                && productLotAssociation.InventTransChildType    == _reportFinishedLine.InventTransChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProdReportFinishedJournals</Name>
				<Source><![CDATA[
    internal static void resetProdReportFinishedJournals(ProdId _productionOrderId)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;

        update_recordset productLotAssociation
            setting ReportFinishedJournalId = '', InventTransChildRefId = '', InventTransChildType = 0, IsCompleted = false
            where productLotAssociation.ReferenceId == _productionOrderId
               && productLotAssociation.ReportFinishedJournalId != "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBomOrFormula</Name>
				<Source><![CDATA[
    internal display boolean isBomOrFormula()
    {
        return this.ProductType == PmfProductType::BOM || this.ProductType == PmfProductType::Formula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSequenceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next sequence Id for the product lot association within a production order context.
    /// </summary>
    /// <param name="_productLotAssociation">
    ///    An instance of <c>ProdAsBuiltBOMProductLotAssociation</c> table buffer.
    /// </param>
    /// <returns>
    /// The next sequence Id.
    /// </returns>
    internal static BOMSequenceId nextSequenceId(ProdAsBuiltBOMProductLotAssociation _productLotAssociation)
    {
        ProdAsBuiltBOMProductLotAssociation productLotAssociation;
        BOMSequenceId currentSequenceId = 0;

        select maxof(SequenceId) from productLotAssociation
            where productLotAssociation.ReferenceId == _productLotAssociation.ReferenceId;

        if (productLotAssociation.SequenceId)
        {
            currentSequenceId = productLotAssociation.SequenceId;
        }

        return currentSequenceId + 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Prod</ConfigurationKey>
	<DeveloperDocumentation>@SCM:TrackedComponentsProductLotAssociationsTable</DeveloperDocumentation>
	<Label>@SCM:TrackedComponentsProductLotAssociations</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>ReferenceId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowArchival>Yes</AllowArchival>
	<AllowRetention>Yes</AllowRetention>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ProductLotAssociationIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>ProductionControl</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferenceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialNumberId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BatchNumberId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyError</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransChildRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransChildType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReportFinishedJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SequenceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MatchId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdAsBuiltBOMMatchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferenceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<RelationContext>ProductionLot</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SerialNumberId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BatchNumberId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventBatchId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCompleted</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS55773</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyGood</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedGood</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyError</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdReportedError</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransChildRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransChildRefId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransChildType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransChildType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportFinishedJournalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdJournalIdProd</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS126532</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SequenceId</Name>
			<ExtendedDataType>BOMSequenceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductLotAssociationIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReferenceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MatchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SequenceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TrackingDimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>SerialNumberId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BatchNumberId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MatchIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>MatchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BatchNumberId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventBatch</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BatchNumberId</Name>
					<Field>BatchNumberId</Field>
					<RelatedField>inventBatchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SerialNumberId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventSerial</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SerialNumberId</Name>
					<Field>SerialNumberId</Field>
					<RelatedField>InventSerialId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProductionLot</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124187</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ItemId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SiteId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SiteId</Name>
					<Field>SiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventUnitId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventUnitId</Name>
					<Field>InventUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProductionOrder</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124136</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReferenceId</Name>
					<Field>ReferenceId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>