<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSProposedLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSProposedLoad extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextWHSLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next load Id for the <c>WHSLoadTable</c>.
    /// </summary>
    /// <returns>
    /// The next load Id for the <c>WHSLoadTable</c>.
    /// </returns>
    private WHSLoadId getNextWHSLoadId()
    {
        WHSLoadTable    whsLoadTable;

        whsLoadTable.setLoadId();

        return whsLoadTable.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>TMSProposedLoad</c> record.
    /// </summary>
    /// <param name="_loadBuildSession">
    ///     The record ID of the <c>TMSLoadBuildSession</c> table.
    /// </param>
    /// <param name="_loadTemplateId">
    ///     The record ID of the <c>WHSLoadTemplate</c> table.
    /// </param>
    public void init(
        TMSLoadBuildSessionId _loadBuildSession,
        WHSLoadTemplateId     _loadTemplateId)
    {
        this.LoadBuildSession = _loadBuildSession;
        this.LoadTemplateId   = _loadTemplateId;
        this.LoadId           = this.getNextWHSLoadId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInitData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes the <c>TMSProposedLoad</c> record.
    /// </summary>
    /// <param name="_proposedLoadInitDataContract">
    ///  An instance of <c>TMSProposedLoadInitDataContract</c> class.
    /// </param>
    [SysObsolete('initFromInitData is obsoleted, please use initFromInitDataWithSessionAndTemplateId instead.', false, 19\03\2021)]
    public void initFromInitData(TMSProposedLoadInitDataContract _proposedLoadInitDataContract)
    {
        this.LoadBuildSession   = _proposedLoadInitDataContract.parmLoadBuildSessionId();
        this.LoadTemplateId     = _proposedLoadInitDataContract.parmLoadTemplateId();
        this.RouteCode          = _proposedLoadInitDataContract.parmScheduledRouteCode();
        this.LoadId             = this.getNextWHSLoadId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInitDataWithSessionAndTemplateId</Name>
				<Source><![CDATA[
    public void initFromInitDataWithSessionAndTemplateId(TMSProposedLoadInitDataContract _proposedLoadInitDataContract, TMSLoadBuildSessionId _loadBuildSessionId, WHSLoadTemplateId _loadTemplateId)
    {
        this.init(_loadBuildSessionId, _loadTemplateId);
        this.RouteCode = _proposedLoadInitDataContract.parmScheduledRouteCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the remaining volume of a proposed load based on the Load Template
    /// </summary>
    /// <returns>
    /// The remaining volume of a proposed load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Volume remainingVolume()
    {
        return WHSLoadTemplate::find(this.LoadTemplateId).LoadMaxVolume - this.totalVolume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the remaining weight of a proposed load based on the Load Template
    /// </summary>
    /// <returns>
    /// The remaining weight of a proposed load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Weight remainingWeight()
    {
        return WHSLoadTemplate::find(this.LoadTemplateId).LoadMaxWeight - this.totalWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total volume of a proposed load.
    /// </summary>
    /// <returns>
    /// The total volume of a proposed load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Volume totalVolume()
    {
        TMSProposedLoadContent     contentLine;

        select sum(TotalVolume) from contentLine
            where contentLine.ProposedLoad == this.RecId;

        return contentLine.TotalVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total weight of a proposed load.
    /// </summary>
    /// <returns>
    /// The total weight of a proposed load.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display Weight totalWeight()
    {
        TMSProposedLoadContent     contentLine;

        select sum(TotalWeight) from contentLine
            where contentLine.ProposedLoad == this.RecId;

        return contentLine.TotalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TMSProposedLoad</c> table exists.
    /// </summary>
    /// <param name="_proposedLoadId">
    /// The RecId of the <c>TMSProposedLoad</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(TMSProposedLoadId _proposedLoadId)
    {
        return _proposedLoadId &&
            (select firstonly RecId from TMSProposedLoad
                where TMSProposedLoad.RecId == _proposedLoadId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWithSessionID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>TMSProposedLoad</c> table exists for a given load build session.
    /// </summary>
    /// <param name="_proposedLoadId">
    /// The Load ID of the <c>TMSProposedLoad</c> record.
    /// </param>
    /// <param name="_loadBuildSessionId">
    /// The RecId of the <c>TMSLoadBuildSession</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existWithSessionID(
        TMSLoadId               _proposedLoadId,
        TMSLoadBuildSessionId   _loadBuildSessionId)
    {
        return _proposedLoadId && _loadBuildSessionId &&
            (select firstonly RecId from TMSProposedLoad
                where TMSProposedLoad.LoadId            == _proposedLoadId
                &&    TMSProposedLoad.LoadBuildSession  == _loadBuildSessionId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a proposed load with the RecId provided.
    /// </summary>
    /// <param name="_proposedLoadId">
    /// The recId to search for.
    /// </param>
    /// <param name="_forupdate">
    /// A flag indicating whether to open the record for update; optional.
    /// </param>
    /// <returns>
    /// A proposed load with the RecId provided, or null if no such proposed load is found.
    /// </returns>
    public static TMSProposedLoad find(TMSProposedLoadId _proposedLoadId, boolean _forupdate = false)
    {
        TMSProposedLoad    proposedLoad;

        if (_proposedLoadId)
        {
            proposedLoad.selectForUpdate(_forupdate);

            select firstonly proposedLoad
                where proposedLoad.RecId == _proposedLoadId;
        }

        return proposedLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a proposed load with the load ID provided.
    /// </summary>
    /// <param name = "_loadId">The load ID to search for.</param>
    /// <param name = "_forUpdate">A flag indicating whether to open the record for update; optional.</param>
    /// <returns>A proposed load with the load ID provided, or null if no such proposed load is found.</returns>
    public static TMSProposedLoad findByLoadId(TMSLoadId _loadId, boolean _forUpdate = false)
    {
        TMSProposedLoad    proposedLoad;

        if (_loadId)
        {
            proposedLoad.selectForUpdate(_forupdate);

            select firstonly proposedLoad
                where proposedLoad.LoadId == _loadId;
        }

        return proposedLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a lookup of proposed load IDs for a given load building session.
    /// </summary>
    /// <param name="_loadIdControl">
    /// The control to build lookup for.
    /// </param>
    /// <param name="_sessionId">
    /// The load build session id.
    /// </param>
    public static void lookupLoadId(
        FormControl                 _loadIdControl,
        TMSLoadBuildSessionId       _sessionId)
    {
        Query proposedLoadQuery = new Query();
        QueryBuildDataSource proposedLoadDataSource =  proposedLoadQuery.addDataSource(tableNum(TMSProposedLoad));
        QueryBuildRange loadBuildingSessionRange = proposedLoadDataSource.addRange(fieldNum(TMSProposedLoad, LoadBuildSession));
        loadBuildingSessionRange.value(queryValue(_sessionId));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(TMSProposedLoad), _loadIdControl);
        sysTableLookup.parmQuery(proposedLoadQuery);

        sysTableLookup.addLookupfield(fieldNum(TMSProposedLoad, LoadId));
        sysTableLookup.addLookupfield(fieldNum(TMSProposedLoad, LoadTemplateId));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SYP4861081</DeveloperDocumentation>
	<Label>@SYP4861082</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>LoadId</TitleField1>
	<TitleField2>LoadTemplateId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Transportation</Modules>
	<ReplacementKey>LoadIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadTemplateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadBuildSession</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@WAX1461</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadTemplateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadBuildSession</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSLoadBuildSessionId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSLoadId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadTemplateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LoadIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LoadBuildSessionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadBuildSession</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LoadBuildSession</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSLoadBuildSession</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadBuildSession</Name>
					<Field>LoadBuildSession</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LoadTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLoadTemplate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadTemplateId</Name>
					<Field>LoadTemplateId</Field>
					<RelatedField>LoadTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>LoadTemplateIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSRoute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteCode</Name>
					<Field>RouteCode</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>