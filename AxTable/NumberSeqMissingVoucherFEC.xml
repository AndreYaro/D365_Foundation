<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqMissingVoucherFEC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class NumberSeqMissingVoucherFEC extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNumberSequenceTableFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the format set in the <c>NumberSequenceTable</c> table.
    /// </summary>
    /// <returns>Number sequence format</returns>
    [Hookable(false), SysClientCacheDataMethod(true)]
    public display NumberSequenceFormat getNumberSequenceTableFormat()
    {
        return NumberSequenceTable::find(this.NumberSequenceId).Format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceTableTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the descriprion set in the <c>NumberSequenceTable</c> table.
    /// </summary>
    /// <returns>Number sequence txt</returns>
    [Hookable(false), SysClientCacheDataMethod(true)]
    public display Name getNumberSequenceTableTxt()
    {
        return NumberSequenceTable::find(this.NumberSequenceId).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        ret = ret && this.checkNumSeqApplicableForProcessing();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumSeqApplicableForProcessing</Name>
				<Source><![CDATA[
    private boolean checkNumSeqApplicableForProcessing()
    {
        const int NumberSeqAlphanumericSegmentType = -2;
        container parcedFormat = NumberSeq::parseAnnotatedFormat(NumberSequenceTable::find(this.NumberSequenceId).AnnotatedFormat);
        int parcedFormatLength = conLen(parcedFormat);
        boolean result = true;

        for (int i; i<= parcedFormatLength; i++)
        {
            int type;
            str value;
            [type, value] = conPeek(parcedFormat, i);
            if (type == NumberSeqAlphanumericSegmentType && (i != parcedFormatLength || !strFind(value, '#', 1, strLen(value))))
            {
                result = checkFailed("@FECDataExport:MissingVoucherValidationSupportsNumericIncerementOnLastPlaceOnly");
                break;
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(NumberSeqMissingVoucherFEC, IsActive):
                    if (this.IsActive)
                    {
                        ret = this.checkNumSeqApplicableForProcessing();
                    }
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>FR</CountryRegionCodes>
	<DeveloperDocumentation>@FECDataExport:NumberSeqMissingVoucherTableDevDoc</DeveloperDocumentation>
	<Label>@FECDataExport:NumberSeqMissingVoucherTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>NumberSequenceId</TitleField1>
	<Modules>Ledger</Modules>
	<PrimaryIndex>NumberSequenceIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<FeatureClass>NumberSeqMissingVoucherFECFeature</FeatureClass>
			<Label>@SYS1161</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActive</Name>
			<FeatureClass>NumberSeqMissingVoucherFECFeature</FeatureClass>
			<HelpText>@FECDataExport:NumberSeqOmissionsVouchersTitleHelper</HelpText>
			<Label>@SYS14584</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IsActive</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>IsActive</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NumberSequenceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumberSequenceIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>NumberSequenceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>NumberSequenceTable_1_NumberSequenceReference</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceId</Name>
					<Field>NumberSequenceId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>