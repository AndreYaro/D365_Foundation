<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeyVaultParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KeyVaultParameters extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static KeyVaultParameters findRecId(RecId _recId, boolean _forupdate = false)
    {
        KeyVaultParameters keyVaultParameters;

        if (_recId)
        {
            keyVaultParameters.selectForUpdate(_forupdate);

            select firstonly keyVaultParameters
                where keyVaultParameters.RecId == _recId;
        }

        return keyVaultParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        Global::handleEncryptedTablePreInsert(this);
        super();
        Global::handleEncryptedTablePostInsert(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        Global::handleEncryptedTablePreUpdate(this);
        super();
        Global::handleEncryptedTablePostUpdate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clientSecretKeyEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits or displays the client secret key.
    /// </summary>
    /// <param name = "_set">True if value is updated; otherwise, false.</param>
    /// <param name = "_value">The client secret key.</param>
    /// <returns>The client secret key.</returns>
    public edit KeyVaultSecretKey clientSecretKeyEdit(boolean _set, KeyVaultSecretKey _value)
    {
        if (this.SecretKey)
        {
            if (_set)
            {
                this.SecretKey = '';
            }
            else
            {
                return this.SecretKey;
            }
        }
        
        return Global::editEncryptedField(this, _value, fieldNum(KeyVaultParameters, ClientSecretKey), _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>encryptionPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override for the encryption purpose.
    /// </summary>
    /// <param name = "_fieldId">Field id.</param>
    /// <returns>Field Id.</returns>
    public str encryptionPurpose(FieldId _fieldId)
    {
        return _fieldId == fieldNum(KeyVaultParameters, ClientSecretKey) ? '{B5A5AE32-4CEF-467E-B539-1857642C53D4}' : super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientSecretKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the client secret key.
    /// </summary>
    /// <returns>The client secret key.</returns>
    public KeyVaultSecretKey getClientSecretKey()
    {
        return this.SecretKey ? this.SecretKey :
            appl.DecryptForPurpose(this.ClientSecretKey, this.encryptionPurpose(fieldnum(KeyVaultParameters, ClientSecretKey)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens <c>KeyVaultParameters</c> form and passes key vault certificate via <c>Args</c>.
    /// </summary>
    /// <param name="_keyVaultCertificateRef">
    /// Reference to the key vault certificate.
    /// </param>
    public static void jumpRef(KeyVaultCertificateRef _keyVaultCertificateRef)
    {
        KeyVaultCertificateTable keyVaultCertificateTable = KeyVaultCertificateTable::findRecId(_keyVaultCertificateRef);
        Args args = new Args();

        if (keyVaultCertificateTable)
        {
            args.record(keyVaultCertificateTable);
        }

        new MenuFunction(menuItemDisplayStr(KeyVaultParameters), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret =  super();

        if (ret && PurchRFQSealedBidFlightingManager::isPreviewEnabled())
        {
            ret = PurchRFQSealedBidKeyVaultParametersTableHandler::validateEnableForSealedBidding(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Trim whitespaces from Key Vault client application id and url
    /// </summary>
    /// <param name = "_fieldId"> Trim Url and AppClientId </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        
        switch(_fieldId)
        {
            case fieldNum(KeyVaultParameters, Url):
                this.Url = strLTrim(this.Url);
                this.Url = strRTrim(this.Url);
                break;
            case fieldNum(KeyVaultParameters, AppClientId):
                this.AppClientId = strLTrim(this.AppClientId);
                this.AppClientId = strRTrim(this.AppClientId);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@KeyVault:TableTitle_KeyVaultParameters</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>SystemAdministration</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Url</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AppClientId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Label>@SYS26263</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Url</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AppClientId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>clientSecretKeyEdit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OverView</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Url</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>KeyVaultDefaultUrl</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AppClientId</Name>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>KeyVaultAppClientId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SecretKey</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyVaultSecretKey</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>ClientSecretKey</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyVaultClientSecretKey</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>