<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversion</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradeNonStockedConversion extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total number of companies for the current record in the <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <returns>
    ///    The total number of companies.
    /// </returns>
    public display TradeNonStockedConversionCompanyCount companies()
    {
        CompanyInfo                     companyInfo;
        TradeNonStockedConversionItem   tradeNonStockedConversionItem;

        select count(RecId) from companyInfo
            exists join tradeNonStockedConversionItem
            where tradeNonStockedConversionItem.LegalEntity == companyInfo.RecId
            &&    tradeNonStockedConversionItem.NonStockedConversion == this.RecId;

        return companyInfo.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conversionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date for the conversion run for the current record in the <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <returns>
    ///    The date for the conversion.
    /// </returns>
    display public TradeNonStockedConversionChangeDateTime conversionDate()
    {
        return this.tradeNonStockedConversionChangeTaskLog().ExecutedDateTimeStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasItemsWithStatusConverted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether any items with status converted exist for the current record in the
    /// <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <returns>
    /// true if any items with status converted exist; otherwise, false
    /// </returns>
    public boolean hasItemsWithStatusConverted()
    {
        return TradeNonStockedConversionItem::existsStatus(this.RecId, TradeNonStockedConversionStatus::Converted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTradeNonStockedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the buffer from a <c>TradeNonStockedConversion</c> table buffer.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    /// The <c>TradeNonStockedConversion</c> buffer from which to initialize.
    /// </param>
    public void initFromTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion)
    {
        this.Name           = _tradeNonStockedConversion.Name;
        this.Description    = _tradeNonStockedConversion.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastCheckDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of the last readiness check run for the current record in the
    /// <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <returns>
    /// The date of the last readiness check.
    /// </returns>
    display public TradeNonStockedConversionCheckDateTime lastCheckDate()
    {
        return this.tradeNonStockedConversionCheckTaskLog().ReadinessRunDateTimeStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastResolvedIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of the last resolved issue for the current record in the
    /// <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <returns>
    /// The date of the last resolved issue.
    /// </returns>
    display public TradeNonStockedConversionLastResolved lastResolvedIssue()
    {
        TradeNonStockedConversionCheckLog tradeNonStockedConversionCheckLog;
        TradeNonStockedConversionItem     tradeNonStockedConversionItem;

        select maxof(ModifiedDateTime) from tradeNonStockedConversionCheckLog
            where tradeNonStockedConversionCheckLog.Resolved == NoYes::Yes
                exists join tradeNonStockedConversionItem
                where tradeNonStockedConversionItem.RecId == tradeNonStockedConversionCheckLog.NonStockedConversionItem
                &&    tradeNonStockedConversionItem.NonStockedConversion == this.RecId;

        return tradeNonStockedConversionCheckLog.ModifiedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>products</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total number of products for the current record in the <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <returns>
    ///    The total number of products.
    /// </returns>
    public display TradeNonStockedConversionProductCount products()
    {
        TradeNonStockedConversionItem tradeNonStockedConversionItem;
        Counter products;

        while select count(RecId) from tradeNonStockedConversionItem
            group by Product
            where tradeNonStockedConversionItem.NonStockedConversion == this.RecId
        {
            products++;
        }

        return products;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readinessRunDateTimeEnd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the end time for the readiness check.
    /// </summary>
    /// <returns>
    ///    The end time for the readiness check.
    /// </returns>
    public display TradeNonStockedConversionCheckDateTime readinessRunDateTimeEnd()
    {
        return this.tradeNonStockedConversionCheckTaskLog().ReadinessRunDateTimeEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readinessRunDateTimeStart</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the start time for the readiness check.
    /// </summary>
    /// <returns>
    ///    The start time for the readiness check.
    /// </returns>
    public display TradeNonStockedConversionCheckDateTime readinessRunDateTimeStart()
    {
        return this.tradeNonStockedConversionCheckTaskLog().ReadinessRunDateTimeStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the status of the conversion.
    /// </summary>
    /// <returns>
    /// A <c>TradeNonStockedConversionStatus</c> enumeration value.
    /// </returns>
    display public TradeNonStockedConversionStatus status()
    {
        TradeNonStockedConversionItem   tradeNonStockedConversionItem;
        TradeNonStockedConversionStatus status;

        select firstonly minof(Status) from tradeNonStockedConversionItem
            where tradeNonStockedConversionItem.NonStockedConversion == this.RecId;

        status = tradeNonStockedConversionItem.Status;
        if (status == TradeNonStockedConversionStatus::None)
        {
            status = TradeNonStockedConversionStatus::Draft;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeNonStockedConversionChangeTaskLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the <c>TradeNonStockedConversionChangeTaskLog</c> record for the current <c>TradeNonStockedConversion</c> record.
    /// </summary>
    /// <returns>
    ///   A record in the <c>TradeNonStockedConversionChangeTaskLog</c> table.
    /// </returns>
    public TradeNonStockedConversionChangeTaskLog tradeNonStockedConversionChangeTaskLog()
    {
        return TradeNonStockedConversionChangeTaskLog::findTradeNonStockedConversion(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeNonStockedConversionCheckTaskLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds the <c>TradeNonStockedConversionCheckTaskLog</c> record for the current <c>TradeNonStockedConversion</c> record.
    /// </summary>
    /// <returns>
    ///   A record in the <c>TradeNonStockedConversionCheckTaskLog</c> table.
    /// </returns>
    public TradeNonStockedConversionCheckTaskLog tradeNonStockedConversionCheckTaskLog()
    {
        return TradeNonStockedConversionCheckTaskLog::findTradeNonStockedConversion(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unresolvedIssues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the total number of unresolved issues for the current record in the <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <returns>
    ///    The total number of unresolved issues.
    /// </returns>
    display public TradeNonStockedConversionIssueCount unresolvedIssues()
    {
        TradeNonStockedConversionItem     tradeNonStockedConversionItem;
        TradeNonStockedConversionCheckLog tradeNonStockedConvesionCheckLog;

        select count(RecId) from tradeNonStockedConvesionCheckLog
            where tradeNonStockedConvesionCheckLog.Resolved == NoYes::No
            exists join tradeNonStockedConversionItem
                where tradeNonStockedConversionItem.RecId == tradeNonStockedConvesionCheckLog.NonStockedConversionItem
                &&    tradeNonStockedConversionItem.NonStockedConversion == this.RecId;

        return tradeNonStockedConvesionCheckLog.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret
            && this.status() != TradeNonStockedConversionStatus::Converted
            && TradeNonStockedConversionItem::existsStatus(this.RecId, TradeNonStockedConversionStatus::Converted))
        {
            ret = checkFailed("@SYS321765");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>TradeNonStockedConversion</c> table exists.
    /// </summary>
    /// <param name="_name">
    ///    The name of the conversion to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean existName(TradeNonStockedConversionName _name)
    {
        return (select firstonly tradeNonStockedConversion
                    where tradeNonStockedConversion.Name == _name).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <param name="_conversionRecId">
    ///    The ID of the <c>TradeNonStockedConversion</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TradeNonStockedConversion</c> table; otherwise, an empty record.
    /// </returns>
    static public TradeNonStockedConversion find(
        TradeNonStockedConversionRecId _conversionRecId,
        boolean _forUpdate = false)
    {
        TradeNonStockedConversion tradeNonStockedConversion;

        if (_conversionRecId)
        {
            tradeNonStockedConversion.selectForUpdate(_forUpdate);
            select firstonly tradeNonStockedConversion
                where  tradeNonStockedConversion.RecId == _conversionRecId;
        }

        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>TradeNonStockedConversion</c> table.
    /// </summary>
    /// <param name="_conversionName">
    ///    The name of the conversion to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TradeNonStockedConversion</c> table; otherwise, an empty record.
    /// </returns>
    static public TradeNonStockedConversion findName(
        TradeNonStockedConversionName _conversionName,
        boolean _forUpdate = false)
    {
        TradeNonStockedConversion tradeNonStockedConversion;

        if (_conversionName)
        {
            tradeNonStockedConversion.selectForUpdate(_forUpdate);
            select firstonly tradeNonStockedConversion
                where  tradeNonStockedConversion.Name == _conversionName;
        }

        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS321730</DeveloperDocumentation>
	<Label>@SYS321726</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>createdDateTime</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>SalesAndMarketing</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TradeNonStockedConversionItem</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TradeNonStockedConversionItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LineSummary</Name>
			<Label>@SYS321773</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>products</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>companies</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Name</Name>
			<Label>@SYS7399</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaskDates</Name>
			<Label>@SYS323653</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>lastCheckDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeNonStockedConversionDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeNonStockedConversionName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CreateDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>createdDateTime</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>