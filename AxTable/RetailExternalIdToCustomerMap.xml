<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailExternalIdToCustomerMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

public class RetailExternalIdToCustomerMap extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
     /// <summary>
    /// Inserts a record in <c>RetailExternalIdToCustomerMap</c> table.
    /// </summary>
    public void insert()
    {
        this.setDefaultIfEmpty();
        super();

        this.updateRetailStaffTableExternalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the record.
    /// </summary>
    public void update()
    {
        super();

        this.updateRetailStaffTableExternalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the record.
    /// </summary>
    public void delete()
    {
        this.clearRetailStaffTableExternalId();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultIfEmpty</Name>
				<Source><![CDATA[
    private void setDefaultIfEmpty()
    {
        if (!this.isFieldSet(fieldNum(RetailExternalIdToCustomerMap, IsActivated)))
        {
            this.IsActivated = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailStaffTableExternalId</Name>
				<Source><![CDATA[
    private void updateRetailStaffTableExternalId()
    {
        RetailExternalIdToCustomerMap existingRetailExternalIdToCustomerMap;
        HcmWorker hcmWorker;
        RetailStaffTable retailStaffTable;
        CustHierarchyNode hierarchyNode;
        
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        select firstonly crosscompany existingRetailExternalIdToCustomerMap
            order by existingRetailExternalIdToCustomerMap.ProviderId, existingRetailExternalIdToCustomerMap.ExternalIdentityId
            where existingRetailExternalIdToCustomerMap.CustomerAccountNumber == this.CustomerAccountNumber;

        if (!existingRetailExternalIdToCustomerMap)
        {
            eventSource.EventWriteMissingRetailExternalIdToCustomerMap(this.CustomerAccountNumber);
            return;
        }
        boolean validationSuccess;

        [validationSuccess, hierarchyNode] = this.validateCustomerIsB2BSellerAdmin();
        if (validationSuccess)
        {
            select firstonly forupdate retailStaffTable
                exists join hcmWorker where hcmworker.Person == hierarchyNode.Party && hcmWorker.PersonnelNumber == retailStaffTable.staffId;
            
            if (retailStaffTable && strCmp(retailStaffTable.ExternalIdentitySubId, this.ExternalIdentityId) != 0)
            {
                str newExternalIdentityId = '';
                str newExternalIdentitySubId = existingRetailExternalIdToCustomerMap.ExternalIdentityId;

                eventSource.EventWriteUpdateExternalSubIdForNonRetailWorker(this.CustomerAccountNumber, retailStaffTable.staffId);
                
                ttsbegin;

                retailStaffTable.ExternalIdentityId = newExternalIdentityId;
                retailStaffTable.ExternalIdentitySubId = newExternalIdentitySubId;
                retailStaffTable.update();

                ttscommit;

                eventSource.EventWriteRetailStaffExternalSubIdUpdatedToCustomerExternalIdentity(
                    retailStaffTable.RecId,
                    newExternalIdentityId,
                    newExternalIdentitySubId,
                    this.CustomerAccountNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRetailStaffTableExternalId</Name>
				<Source><![CDATA[
    private void clearRetailStaffTableExternalId()
    {
        RetailStaffTable retailStaffTable;
        CustHierarchyNode hierarchyNode;
        HcmWorker hcmWorker;
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        boolean validationSuccess;
        
        [validationSuccess, hierarchyNode] = this.validateCustomerIsB2BSellerAdmin();
        if (validationSuccess)
        {
            select firstonly forupdate retailStaffTable
                exists join hcmWorker where hcmworker.Person == hierarchyNode.Party && hcmWorker.PersonnelNumber == retailStaffTable.staffId;

            if (retailStaffTable)
            {
                retailStaffTable.ExternalIdentityId = '';
                retailStaffTable.ExternalIdentitySubId = '';
                retailStaffTable.update();

                eventSource.EventWriteRetailStaffExternalSubIdCleared(
                    retailStaffTable.RecId,
                    this.CustomerAccountNumber,
                    this.ExternalIdentityId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerIsB2BSellerAdmin</Name>
				<Source><![CDATA[
    private container validateCustomerIsB2BSellerAdmin()
    {
        CustHierarchy custHierarchy;
        CustHierarchyNode hierarchyNode;
        
        boolean success = false;
        hierarchyNode = CustHierarchyNode::findByAccountNum(this.CustomerAccountNumber, this.DataAreaId);
        if (hierarchyNode && hierarchyNode.Role == CustHierarchyNodeRole::Admin)
        {
            custHierarchy = CustHierarchy::findByHierarchyId(hierarchyNode.CustHierarchyId);
            if (custHierarchy && custHierarchy.SellerChannel)
            {
                success = true;
            }
        }

        return [success, hierarchyNode];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<Label>@Retail:RetailExternalIdToCustomerMap</Label>
	<CacheLookup>Found</CacheLookup>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>CommerceCustomers</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalIdentityId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailExternalIdentityId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProviderId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<RelationContext>FK_RetailIdentityProvider</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomerAccountNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<RelationContext>FK_CustTable</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActivated</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAutoLinked</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsUnlinked</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ExternalId_ProviderId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalIdentityId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProviderId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomerAccountNumber</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FK_RetailIdentityProvider</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailIdentityProvider</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProviderId</Name>
					<Field>ProviderId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FK_CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomerAccountNumber</Name>
					<Field>CustomerAccountNumber</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>