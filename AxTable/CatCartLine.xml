<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCartLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatCartLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDeleteButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the delete button is displayed for the shopping cart line item.
    /// </summary>
    /// <returns>
    /// true if the delete button is displayed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Calls the <c>displayDeleteButton</c> method of the <c>CatProductReference</c> table.
    /// </remarks>
    boolean displayDeleteButton()
    {
        boolean ret = true;
        ret = this.getProductReference().displayDeleteButton();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will return the <c>CatProductReference</c> that the line refers to
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>CatProductReference</c> table.
    /// </returns>
    CatProductReference getProductReference(boolean _forUpdate = false)
    {
        return CatProductReference::find(this.ProductReference, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up the <c>VendAccount</c> object for the referenced vendor.
    /// </summary>
    /// <param name="_dataAreaId">
    ///    The <c>dataAreaId</c> value to which the line should refer.
    /// </param>
    /// <returns>
    ///    The <c>VendAccount</c> object for the referenced vendor.
    /// </returns>
    public VendAccount getVendAccount(DataAreaId _dataAreaId)
    {
        VendTable vendTable;

        if (_dataAreaId != '')
        {
            changecompany(_dataAreaId)
            {
                vendTable = VendTable::findByPartyRecId(this.SellingParty);
            }
        }
        return vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the referenced vendor.
    /// </summary>
    /// <returns>
    /// The name of the referenced vendor.
    /// </returns>
    public VendName getVendorName()
    {
        return DirPartyTable::findRec(this.SellingParty).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the specified line.
    /// </summary>
    /// <param name="_dataAreaId">
    ///    The <c>dataAreaId</c> value.
    /// </param>
    void initFromDataArea(DataAreaId _dataAreaId)
    {
        if (_dataAreaId != '')
        {
            changecompany(_dataAreaId)
            {
                this.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>CatCartLine</c> record by using the specified product.
    /// </summary>
    /// <param name="_ecoResDistinctProduct">
    /// An <c>EcoResDistinctProduct</c> value to which the line should refer.
    /// </param>
    /// <param name="_dataAreaId">
    /// The <c>DataAreaId</c> value to which the line should refer.
    /// </param>
    /// <returns>
    /// A record in the <c>CatDistinctProductReference</c> table.
    /// </returns>
    /// <remarks>
    /// This method creates a <c>CatDistinctProductReference</c> record with its <c>DistinctProduct</c>
    /// field set to the value in the specified <c>EcoResDistinctProduct</c> record. It also sets the
    /// <c>ProductReference</c> field of the line to the previous record, and sets the <c>UnitOfMeasure</c>
    /// field of the line to that of the <c>InventTableModule</c> for the item ID of the given
    /// <c>EcoResDistinctProduct</c> record.This method sets the <c>ProcurementCategory</c> field of the
    /// line.
    /// </remarks>
    CatDistinctProductReference initFromProduct(EcoResDistinctProduct _ecoResDistinctProduct, DataAreaId _dataAreaId)
    {
        InventTableModule            inventTableModule;
        CatDistinctProductReference  catDistinctProductReference;
        UnitOfMeasure                unit;
        ItemId                       itemId;
        str                          productName;
        str                          description;
        EcoResDistinctProductVariant distinctProductVariant;
        EcoResProductTranslation     productTranslationPrimaryLanguage;
        EcoResProduct                distinctOrMasterProduct;
        EcoResProductRecId           distinctOrMasterProductRecId; // EcoResProductMaster|EcoResDistinctProduct's RecId
        EcoResProductCategory        productCategory;
        EcoResCategory               category;
        EcoResCategoryHierarchy      categoryHierarchy;
        EcoResCategoryHierarchyRole  categoryHierarchyRole;
        str                          tmpProductName;

        distinctProductVariant = _ecoResDistinctProduct as EcoResDistinctProductVariant;
        if (distinctProductVariant)
        {
            distinctOrMasterProductRecId = distinctProductVariant.ProductMaster;
        }
        else
        {
            distinctOrMasterProductRecId = _ecoResDistinctProduct.RecId;
        }
        select firstonly RecId, DisplayProductNumber from distinctOrMasterProduct
                where distinctOrMasterProduct.RecId == distinctOrMasterProductRecId
            outer join Name, Description from productTranslationPrimaryLanguage
                where  productTranslationPrimaryLanguage.Product == distinctOrMasterProduct.RecId
                    && productTranslationPrimaryLanguage.LanguageId == SysTranslationHelper::getPrimaryLanguage()
            outer join recId from productCategory
                where productCategory.Product  == distinctOrMasterProduct.RecId
            join RecId from category
                where category.RecId == productCategory.Category
            join recId from categoryHierarchy
                where categoryHierarchy.RecId  == category.CategoryHierarchy
            join recId from categoryHierarchyRole
                where categoryHierarchyRole.NamedCategoryHierarchyRole == EcoResCategoryNamedHierarchyRole::Procurement
                &&    categoryHierarchyRole.CategoryHierarchy          == categoryHierarchy.RecId
        ;

        productName = distinctOrMasterProduct.DisplayProductNumber;
        description = distinctOrMasterProduct.DisplayProductNumber;
        if (productTranslationPrimaryLanguage)
        {
            if (productTranslationPrimaryLanguage.Name !='')
            {
                productName = productTranslationPrimaryLanguage.Name;
            }
            if (productTranslationPrimaryLanguage.Description !='')
            {
                description = productTranslationPrimaryLanguage.Description;
            }
        }

        // variants created from AX Client will have DisplayProductNumber auto-set to
        //  EcoResProductNumberBuilderVariant::buildFromProductNumberAndDimensions
        // which has this format (hard-coded - not using label):
        //  <Master.DisplayProductNumber> : <Config> : <Size> : <Color>
        // eg, "#1 : HD : 42 : 01".
        // Note: Catalog Import never creates variants.
        if (distinctProductVariant && distinctProductVariant.DisplayProductNumber)
        {
            // we do it for both Name and Description - Name is short
            // and could easily have the DisplayProductNumber cut off.
            tmpProductName = strFmt("@SYS344913", productName, distinctProductVariant.DisplayProductNumber);
            // add DisplayProductNumber to Name if no truncation to Name;
            // else add DisplayProductNumber to Description
            if (strLen(tmpProductName) <= new DictType(extendedTypeNum(EcoResProductName)).stringLen())
            {
                productName = tmpProductName;
            }
            else
            {
                description = strFmt("@SYS344913", description, distinctProductVariant.DisplayProductNumber);
            }
        }
        catDistinctProductReference.DistinctProduct     = _ecoResDistinctProduct.RecId;
        catDistinctProductReference.ProductName         = productName;
        catDistinctProductReference.ProductDescription  = description;
        catDistinctProductReference.ProcurementCategory = category.RecId;
        catDistinctProductReference.insert();

        this.ProductReference = catDistinctProductReference.RecId;

        itemId = CatCartLine::findItemIdForDistinctProduct(_dataAreaId, _ecoResDistinctProduct);

        changecompany(_dataAreaId)
        {
            inventTableModule = InventTableModule::find(itemId, ModuleInventPurchSales::Purch);
        }
        unit = UnitOfMeasure::findBySymbol(inventTableModule.UnitId);
        this.UnitOfMeasure = unit.RecId;
        return catDistinctProductReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the line based on a <c>VendTable</c> record
    /// </summary>
    /// <param name="_vendTable">
    ///    The vendor to which the line should refer.
    /// </param>
    void initFromVendTable(VendTable _vendTable)
    {
        this.SellingParty = _vendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>LineAmount</c> field of the line to the value that is calculated by using the
    /// <c>PriceDisc</c> class and other field data of the line as input.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> field of the <c>InventTable</c> record.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> that matches the <c>PriceDiscTable</c> record that is based on the choice of
    /// vendor and dimension of the user.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area.
    /// </param>
    /// <remarks>
    /// If the value for the <paramref name="_itemId" /> parameter is supplied, the caller must make sure
    /// that value matches the line data; it will be calculated using data of the specified line.If there
    /// is no <c>PriceDiscTable</c> record specified, then the <paramref name="_inventDimId" /> is required
    /// to match the <c>InventDimCombination</c> instead; optional. If not supplied, it would be calculated
    /// using data of the given line; otherwise, If supplied, caller must make sure that it matches the
    /// line data.
    /// </remarks>
    void initPrice(DataAreaId _dataAreaId, ItemId _itemId = '', InventDimId _inventDimId= '')
    {
        CatDistinctProductReference     productReference = CatDistinctProductReference::find(this.ProductReference);
        EcoResDistinctProduct           productReferenceDistinctProduct = EcoResDistinctProduct::find(productReference.DistinctProduct);
        // The <c>ItemId</c> of the <c>InventTable</c>.
        ItemId                          itemId = (_itemId ? _itemId : CatCartLine::findItemIdForDistinctProduct(_dataAreaId, productReferenceDistinctProduct));
        // IMPORTANT:
        //   The <c>InventDimId</c> matching the trade agreement (<c>PriceDiscTable</c>) based on the user's choice of vendor and product dimensions.
        //   If there is no <c>PriceDiscTable</c>, then this should match the <c>InventDimCombination</c> instead.
        InventDimId                     inventDimId = (_inventDimId ? _inventDimId : CatCartLine::findTradeAgreementInventDimForProduct(
                                                _dataAreaId,
                                                productReferenceDistinctProduct,
                                                this.getVendAccount(_dataAreaId),
                                                this.Quantity,
                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                this.CurrencyCode
                                        ).InventDimId);

        this.LineAmount = CatCartLine::calculateUnitPriceForDistinctProduct(this, itemId, inventDimId, _dataAreaId) * this.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;
        
        super();
        CatCartLineState::createForCatCartLine(this, true, CatCartLineInvalidityReason::IsValid);
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimCombination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a record in the <c>InventDimCombination</c> table to which the line refers.
    /// </summary>
    /// <param name="_dataAreaId">
    ///    The data area ID.
    /// </param>
    /// <param name="_update">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventDimCombination</c> table; otherwise, an empty buffer.
    /// </returns>
    public InventDimCombination inventDimCombination(DataAreaId _dataAreaId, boolean _update = false)
    {
        InventDimCombination  inventDimCombination;
        CatDistinctProductReference catDistinctProductReference;

        inventDimCombination.selectForUpdate(_update);

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId))
        {
            changeCompany(_dataAreaId)
            {
                select firstonly inventDimCombination
                    join DistinctProduct from catDistinctProductReference
                    where  catDistinctProductReference.RecId == this.ProductReference
                        && inventDimCombination.DistinctProductVariant == catDistinctProductReference.DistinctProduct
                ;
            }
        }

        return inventDimCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPriceDiscFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new <c>PriceDisc</c> object for the line.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> of the <c>InventTable</c>.
    /// </param>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> matching the trade agreement (<c>PriceDiscTable</c>) based on the user's choice of vendor and dimension (color, size, config).
    ///    If there is no <c>PriceDiscTable</c>, then this should match the <c>InventDimCombination</c> instead.
    /// </param>
    /// <param name="_dataAreaId">
    /// The data area.
    /// </param>
    /// <param name="_discDate">
    ///    The date for which to construct the <c>PriceDisc</c> object.
    /// </param>
    /// <returns>
    ///    The <c>PriceDisc</c> object constructed for the specified parameters.
    /// </returns>
    PriceDisc newPriceDiscFromLine(
        ItemId               _itemId,
        InventDimId          _inventDimId,
        dataAreaId           _dataAreaId,
        TransDate            _discDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
    )
    {
        PriceDisc                   priceDisc;
        UnitOfMeasure               unit = UnitOfMeasure::find(this.UnitOfMeasure);

        changecompany(_dataAreaId)
        {
            priceDisc = this.createPriceDiscInstance(
                            this.createAndInitPriceDiscParameters(
                                _itemId,
                                _inventDimId,
                                _dataAreaId,
                                _discDate));
        }
        return priceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createAndInitPriceDiscParameters(
        ItemId               _itemId,
        InventDimId          _inventDimId,
        dataAreaId           _dataAreaId,
        TransDate            _discDate )
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();

        parameters.parmModuleType(ModuleInventPurchSales::Purch);
        parameters.parmItemId(_itemId);
        parameters.parmInventDim(InventDim::find(_inventDimId));
        parameters.parmUnitID( UnitOfMeasure::find(this.UnitOfMeasure).Symbol);
        parameters.parmPriceDiscDate(_discDate);
        parameters.parmQty(this.Quantity);
        parameters.parmAccountNum(this.getVendAccount(_dataAreaId));
        parameters.parmCurrencyCode(this.CurrencyCode);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The <c>PriceGroupId</c> value for the line
    /// </summary>
    /// <returns>
    ///    An empty string.
    /// </returns>
    public PriceGroupId priceGroupId()
    {
        // Return blank as cart lines don't have price groups associated
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityFieldReadonly</Name>
				<Source><![CDATA[
    public boolean quantityFieldReadonly()
    {
        boolean ret = false;
        CatExternalQuoteProductReference    externalQuoteProductReference = CatExternalQuoteProductReference::find(this.ProductReference);
        CatExternalCatalogQuote             externalCatalogQuote;
        CatExternalCatalog                  externalCatalog;

        if (externalQuoteProductReference)
        {
            select firstonly QuoteQuantityChange from externalCatalog
                exists join externalCatalogQuote
                    where externalCatalogQuote.RecId == externalQuoteProductReference.ExternalQuote
                    &&    externalCatalogQuote.ExternalCatalog == externalCatalog.RecId;

            ret = !externalCatalog.QuoteQuantityChange;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>IsSelected</c> field of the <c>CatCartLineState</c> record to the given value and calls
    /// the product reference selected method.
    /// </summary>
    /// <param name="_isSelected">
    /// The value to set.
    /// </param>
    public void selected(boolean _isSelected)
    {
        // set this line's state's selected
        CatCartLineState    lineState = CatCartLineState::findByCartLine(this.RecId, true);
        ttsBegin;
        if (lineState.IsSelected != _isSelected)
        {
            lineState.IsSelected = _isSelected;
            lineState.update();
        }
        // Call the product reference selected method to perform
        // any related operations, such as auto-selecting related lines.
        this.getProductReference().selected(_isSelected);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the business validity of data before the record may be saved.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The data area identifier.
    /// </param>
    /// <param name="_doCheckFailed">
    /// A Boolean value that indicates whether the <c>checkFailed</c> method will be called upon validation
    /// failures.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method differs from the <c>CatCartLine.validateWrite</c> method but should not replace it. The
    /// <c>CatCartLine.validateWrite</c> method will call super, whereas this method cannot and will not
    /// call super. Also, the <c>CatCartLine.validateWrite</c> method checks on mandatory fields, whereas
    /// this method does not.
    /// </remarks>
    public boolean validateWriteExtension(DataAreaId _dataAreaId, boolean _doCheckFailed)
    {
        boolean             ret = true;
        CatProductReference catProductReference;

        if (this.Quantity < 0)
        {
            ret = false;
            if (_doCheckFailed)
            {
                checkFailed("@SYS304152");
            }
        }

        if (ret && this.LineAmount < 0)
        {
            ret = false;
            if (_doCheckFailed)
            {
                checkFailed("@SYS304157");
            }
        }

        if (ret)
        {
            catProductReference = this.getProductReference();
            ret = catProductReference.validateCartQuantity(this, _dataAreaId,_doCheckFailed);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateUnitPriceForDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit price for the specified cart line by using its field data.
    /// </summary>
    /// <param name="_cartLine">
    /// The <c>CatCartLine</c> record for which to get the unit price.
    /// </param>
    /// <param name="_itemId">
    /// The item ID of the <c>InventTable</c> record; optional.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that matches the trade agreement <c>PriceDiscTable</c> record that is
    /// based on the vendor that is specified by the user and dimension; optional.
    /// </param>
    /// 
    /// <returns>
    /// The unit price that is calculated from trade agreements using information that is stored on the
    /// given cart line object.
    /// </returns>
    /// <remarks>
    /// If there is no <c>PriceDiscTable</c> record, then this should match the <c>InventDimCombination</c>
    /// record instead.
    /// </remarks>
    private static PriceCur calculateUnitPriceForDistinctProduct(
        CatCartLine     _cartLine,
        ItemId          _itemId,
        InventDimId     _inventDimId,
        dataAreaId      _dataAreaId
    )
    {
        PriceDisc                       priceDisc;

        changecompany(_dataAreaId)
        {
            priceDisc = _cartLine.newPriceDiscFromLine(_itemId, _inventDimId, _dataAreaId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            priceDisc.findPrice(_cartLine.priceGroupId());

            return priceDisc.price();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified line exists in the <c>CatCartLine</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the record in the <c>CatCartLine</c> table to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RefRecId _refRecId)
    {
        if (_refRecId && CatCartLine::exist(_refRecId))
        {
            return true;
        }

        return checkFailed(strfmt("@SYS94719", _refRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCategoryProductLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new line with a reference to a new category product.
    /// </summary>
    /// <param name="_productName">
    ///    The name of the product.
    /// </param>
    /// <param name="_productDescription">
    ///    The description of the product.
    /// </param>
    /// <param name="_qty">
    ///    The quantity on the line.
    /// </param>
    /// <param name="_ecoResCategory">
    ///    The procurement category for the line, which is a reference to the <c>EcoResCategory</c> table.
    /// </param>
    /// <param name="_lineAmount">
    ///    The expected price of the product.
    /// </param>
    /// <param name="_displayCategory">
    ///    The display category of the line.
    /// </param>
    /// <param name="_currencyCode">
    ///    The currency type of the price.
    /// </param>
    /// <param name="_sellingVendor">
    ///    The vendor that sells the item.
    /// </param>
    /// <param name="_unitID">
    ///    The unit to use for the quantity.
    /// </param>
    /// <returns>
    ///    The new record of the <c>cartLine</c> table.
    /// </returns>
    static CatCartLine createCategoryProductLine(
                EcoResProductName   _productName,
                ItemFreeTxt         _productDescription,
                PurchQty            _qty,
                RefRecId            _ecoResCategory,
                LineAmount          _lineAmount,
                RefRecId            _displayCategory,
                CurrencyCode        _currencyCode = '',
                VendAccount         _sellingVendor = '',
                RefRecId             _unitID = 0)
    {
        CatCartLine                 cartLine;
        CatCategoryProductReference categoryProductReference;
        CatProcurementCache         cache = CatProcurementCache::getCache();

        cartLine.initFromDataArea(cache.EmployerDataAreaId);
        cartLine.Quantity               = _qty;
        cartLine.LineAmount             = _lineAmount;

        if (_sellingVendor)
        {
            cartLine.initFromVendTable(VendTable::find(_sellingVendor));
        }

        if (!prmisdefault(_unitID))
        {
            cartLine.UnitOfMeasure      = _unitID;
        }

        if (!prmisdefault(_currencyCode))
        {
            cartLine.CurrencyCode       = _currencyCode;
        }

        //Create Product reference
        categoryProductReference.ProcurementCategory    = _ecoResCategory;
        categoryProductReference.ProductName            = _productName;
        categoryProductReference.ProductDescription     = _productDescription;
        categoryProductReference.DisplayCategory        = _displayCategory;

        ttsbegin;
        if (categoryProductReference.validateWrite())
        {
            categoryProductReference.insert();
        }
        cartLine.ProductReference       = categoryProductReference.RecId;

        if (cartLine.ProductReference && cartLine.validateWrite() && cartLine.validateWriteExtension(cache.EmployerDataAreaId, true))
        {
            cartLine.insert();
        }
        else
        {
            cartLine.clear();
        }
        ttscommit;
        return cartLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDistinctProductLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new line with a reference to the specified product.
    /// </summary>
    /// <param name="_operationsDataAreaId">
    ///    The operations data area ID to which the line should belong.
    /// </param>
    /// <param name="_distinctProductRefRecId">
    ///    The product to reference on the line.
    /// </param>
    /// <param name="_qty">
    ///    The quantity on the line.
    /// </param>
    /// <param name="_vendAccount">
    ///    The selling party of the item.
    /// </param>
    /// <param name="_unitID">
    ///    The unit to use for the quantity.
    /// </param>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> of the <c>InventTable</c>.
    ///    Optional.
    ///      If not supplied, it would be calculated using data of the given line.
    ///      If     supplied, caller must ensure it matches the line data.
    /// </param>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> matching the trade agreement (<c>PriceDiscTable</c>) based on the user's choice of vendor and dimension (color, size, config).
    ///    If there is no <c>PriceDiscTable</c>, then this should match the <c>InventDimCombination</c> instead.
    ///    Optional.
    ///      If not supplied, it would be calculated using data of the given line.
    ///      If     supplied, caller must ensure it matches the line data.
    /// </param>
    /// <param name="_currency">
    ///    The <c>CurrencyCode</c> matching the trade agreement (<c>PriceDiscTable</c>).
    ///    Optional.
    /// </param>
    /// <returns>
    ///    The new record of the <c>CatCartLine</c> table.
    /// </returns>
    static CatCartLine createDistinctProductLine(
        CompanyId            _operationsDataAreaId,
        RefRecId             _distinctProductRefRecId,
        PurchQty             _qty,
        VendAccount          _vendAccount = '',
        RefRecId             _unitID = 0,
        ItemId               _itemId = '',
        InventDimId          _inventDimId = '',
        CurrencyCode         _currency = ''
    )
    {
        CatCartLine                 catCartLine;
        CatDistinctProductReference catDistinctProductReference;
        EcoResDistinctProduct       distinctProduct = EcoResDistinctProduct::find(_distinctProductRefRecId);
        VendTable                   vendTable;
        CatProcurementCache         cache = CatProcurementCache::getCache();

        ttsbegin;
        catCartLine.initFromDataArea(_operationsDataAreaId);

        if (_currency != '')
        {
            catCartLine.CurrencyCode = _currency;
        }
        else if (!catCartLine.CurrencyCode)
        {
            catCartLine.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        }

        catDistinctProductReference         = catCartLine.initFromProduct(distinctProduct, _operationsDataAreaId);
        catCartLine.Quantity                = _qty;

        if (_unitID != 0)
        {
            catCartLine.UnitOfMeasure       = _unitID;
        }

        if (_vendAccount != '')
        {
            changecompany(_operationsDataAreaId)
            {
                vendTable = VendTable::find(_vendAccount);
                if (!vendTable)
                {
                    error(strfmt("@SYS303328", _operationsDataAreaId));
                }
                if (!vendTable.Party)
                {
                    error(strfmt("@SYS303329", _operationsDataAreaId));
                }
                catCartLine.initFromVendTable(vendTable);
            }
        }

        catCartLine.initPrice(_operationsDataAreaId, _itemId, _inventDimId);

        if (catCartLine.validateWriteExtension(_operationsDataAreaId, false))
        {
            catCartLine.insert();
        }
        ttscommit;

        return catCartLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExternalQuoteProductLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new line with a reference to a new <c>CatExternalQuoteProductReference</c> record.
    /// </summary>
    /// <param name="_punchoutRequest">
    /// The <c>CatPunchoutRequest</c> record table.
    /// </param>
    /// <param name="_externalCatalogQuote">
    /// The <c>CatExternalCatalogQuoteRecId</c> value for the line.
    /// </param>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_productName">
    /// The name.
    /// </param>
    /// <param name="_productDescription">
    /// The description.
    /// </param>
    /// <param name="_qty">
    /// The quantity.
    /// </param>
    /// <param name="_unitPrice">
    /// The unit price.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name="_sellingVendor">
    /// The selling vendor of the item
    /// </param>
    /// <param name="_unitOfMeasure">
    /// The unit of measure.
    /// </param>
    /// <returns>
    /// The <c>CatCartLine</c> record.
    /// </returns>
    static CatCartLine createExternalQuoteProductLine(
                CatPunchoutRequest           _punchoutRequest,
                CatExternalCatalogQuoteRecId _externalCatalogQuote,
                ItemId                       _itemId,
                EcoResProductName            _productName,
                ItemFreeTxt                  _productDescription,
                Qty                          _qty,
                Price                        _unitPrice,
                CurrencyCode                 _currencyCode,
                VendAccount                  _sellingVendor,
                UnitOfMeasureSymbol          _unitOfMeasure)
    {
        setPrefix(strFmt('%1: %2', "@SCM:CatExternalCatalogExternalItemId", _itemId));
        List invalidityReason = new List(Types::Enum);
        CatCartLine cartLine;
        cartLine.PunchoutRequest        = _punchoutRequest.RecId;

        cartLine.Quantity               = _qty;
        cartLine.LineAmount             = (_unitPrice * _qty);

        cartLine.setSellingParty(_punchoutRequest.BuyingLegalEntity, _sellingVendor, _externalCatalogQuote);

        if (!cartLine.setUnitOfMeasure(_unitOfMeasure))
        {
            invalidityReason.addEnd(CatCartLineInvalidityReason::UnitOfMeasureIsUnknown);

            error(strFmt("@SYS4108", _unitOfMeasure));
        }
        
        if (!cartLine.setCurrency(_currencyCode))
        {
            invalidityReason.addEnd(CatCartLineInvalidityReason::CurrencyCodeIsUnknown);

            error(strFmt("@SYS16745", _currencyCode));
        }

        cartLine.createSupportingRecordsAndInsert(_externalCatalogQuote, _itemId, _productName, _productDescription, _punchoutRequest.BuyingLegalEntity, invalidityReason);

        return cartLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSupportingRecordsAndInsert</Name>
				<Source><![CDATA[
    private void createSupportingRecordsAndInsert(CatExternalCatalogQuoteRecId _externalCatalogQuote,
                                                  ItemId _itemId,
                                                  EcoResProductName _productName,
                                                  ItemFreeTxt _productDescription,
                                                  DataAreaId _dataAreaId, 
                                                  List _invalidityReason)
    {
        ttsbegin;

        CatExternalQuoteProductReference externalQuoteProductReference = this.createCatExternalQuoteProductReference(_externalCatalogQuote, _itemId, _productName, _productDescription);

        if (externalQuoteProductReference.ExternalQuote && externalQuoteProductReference.validateWrite())
        {
            externalQuoteProductReference.insert();
        }

        this.ProductReference = externalQuoteProductReference.RecId;

        if (this.ProductReference && this.validateWrite() && this.validateWriteExtension(_dataAreaId, true))
        {
            this.insert();

            if(!_invalidityReason.empty())
            {
                ListIterator invalidityReasonListIterator = new ListIterator(_invalidityReason);
                
                if(invalidityReasonListIterator.more())
                {
                    CatCartLineState::createOrUpdateForCatCartLine(this, true, invalidityReasonListIterator.value());
                }
            }
        }
        else
        {
            throw error ("@SCM:InsertionOfTheNewLineFailed");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatExternalQuoteProductReference</Name>
				<Source><![CDATA[
    private CatExternalQuoteProductReference createCatExternalQuoteProductReference(
                CatExternalCatalogQuoteRecId _externalCatalogQuote,
                ItemId                       _itemId,
                EcoResProductName            _productName,
                ItemFreeTxt                  _productDescription)
    {
        CatExternalQuoteProductReference externalQuoteProductReference;

        ttsbegin;

        externalQuoteProductReference.ExternalQuote         = _externalCatalogQuote;
        externalQuoteProductReference.ItemId                = _itemId;
        externalQuoteProductReference.ProductName           = _productName;
        externalQuoteProductReference.ProductDescription    = _productDescription;

        if (externalQuoteProductReference.ExternalQuote && externalQuoteProductReference.validateWrite())
        {
            externalQuoteProductReference.insert();
        }

        ttscommit;

        return externalQuoteProductReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSellingParty</Name>
				<Source><![CDATA[
    private void setSellingParty(DataAreaId _dataAreaId, VendAccount _sellingVendor, RefRecId _externalCatalogQuote)
    {
        if (_sellingVendor && _dataAreaId)
        {
            changecompany(_dataAreaId)
            {
                this.initFromVendTable(VendTable::find(_sellingVendor));
            }
        }
        else
        {
            CatExternalCatalogQuote externalCatalogQuote;
            CatExternalCatalogVendor externalCatalogVendor;
            VendTable vendTable;

            //If the vendor is not specified we can still get it from the external catalog
            select firstonly recId, VendorAccountNumber, VendorDataAreaId, ExternalCatalog from externalCatalogVendor
                join recId from externalCatalogQuote
                    where externalCatalogQuote.ExternalCatalog == externalCatalogVendor.ExternalCatalog
                        && externalCatalogQuote.RecId == _externalCatalogQuote;

            if (externalCatalogVendor.VendorDataAreaId && externalCatalogVendor.VendorAccountNumber)
            {
                vendTable = externalCatalogVendor.vendTable();
            }

            this.initFromVendTable(vendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnitOfMeasure</Name>
				<Source><![CDATA[
    private boolean setUnitOfMeasure(UnitOfMeasureSymbol _unitOfMeasure)
    {
        boolean success = false;

        UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(_unitOfMeasure);
        if(unitOfMeasure.RecId)
        {
            this.UnitOfMeasure = unitOfMeasure.RecId;
            success = true;
        }
       
        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrency</Name>
				<Source><![CDATA[
    private boolean setCurrency(CurrencyCode _currencyCode)
    {
        boolean success = false;

        if (Currency::find(_currencyCode,false).RecId)
        {
            this.CurrencyCode = _currencyCode;
            success = true;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record that matches the given <c>_RefRecId</c> of type <c>RefRecId</c> exists.
    /// </summary>
    /// <param  name='_refRecId'>
    /// An instance of the <c>RefRecId</c> data type.
    /// </param>
    /// <returns>
    /// <c>true</c> if the record was found; otherwise, <c>false</c>.
    /// </returns>
    static boolean exist(RefRecId _refRecId)
    {
        return _refRecId && (select firstonly RecId from catCartLine
                                    where catCartLine.RecId == _refRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatCartLine</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the record to find in the <c>CatCartLine</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CatCartLine</c> table; otherwise, an empty buffer.
    /// </returns>
    static CatCartLine find(RefRecId _refRecId, boolean _forUpdate = false)
    {
        CatCartLine catCartLine;

        if (_refRecId)
        {
            catCartLine.selectForUpdate(_forUpdate);
            select catCartLine where catCartLine.RecId == _refRecId;
        }
        return catCartLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findItemIdForDistinctProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ItemId</c> for the specified distinct product released in the given data area.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The data area to find the item ID.
    /// </param>
    /// <param name="_distinctProduct">
    /// The distinct product for which to find the item ID.
    /// </param>
    /// <returns>
    /// The item ID that is found.
    /// </returns>
    /// <remarks>
    /// This method hides the complex logic of handling a <c>EcoResDistinctProduct</c> record may be either
    /// a <c>EcoResDistinctProductVariant</c> record or just a <c>EcoResDistinctProduct</c> record.Note:
    /// the specified distinct product must have been released.
    /// </remarks>
    public static ItemId findItemIdForDistinctProduct(DataAreaId _dataAreaId, EcoResDistinctProduct _distinctProduct)
    {
        EcoResDistinctProductVariant    variant = (_distinctProduct as EcoResDistinctProductVariant);
        // InventTable.Product is FK on EcoResProductMaster or EcoResDistinctProduct - never Variant.
        // Thus we must find Master|DistinctProduct for InventTable::findByProduct
        EcoResProduct                   masterOrDistinctProduct;
        ItemId                          itemId;
        InventDimCombination            inventDimCombination;

        // ?: causes compile-time error :(
        if (variant)
        {
            masterOrDistinctProduct = EcoResProduct::find(variant.ProductMaster);
        }
        else
        {
            masterOrDistinctProduct = _distinctProduct;
        }

        inventDimCombination = InventDimCombination::findByDistinctProductVariant(masterOrDistinctProduct.RecId);

        // If it is a EcoResDistinctProductVariant, it would have InventDimCombination;
        //   (NOTE: an alternative implemenation is to use EcoResDistinctProductVariant to find the EcoResProductMaster, then to find InventTable.)
        // Else it must be (just) a EcoResDistinctProduct
        if (inventDimCombination != null)
        {
            itemId = inventDimCombination.ItemId;
        }
        else
        {
            changecompany(_dataAreaId)
            {
                // do *not* use _distinctProduct - when it's a Variant, InventTable.Procut is FK on the Master!
                itemId = InventTable::findByProduct(masterOrDistinctProduct.RecId).ItemId;
            }
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTradeAgreementInventDimForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventDim</c> that is associated with the trade agreement for the given distinct
    /// product released in the given data area, for the given vendor with the given quantity of purchase.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The data area to find the <c>InventDim</c> in.
    /// </param>
    /// <param name="_distinctProduct">
    /// The distinct product to find the trade agreement <c>InventDim</c> for.
    /// </param>
    /// <param name="_vendorAccountNumber">
    /// The vendor account number for which to find the <c>InventDim</c> table.
    /// </param>
    /// <param name="_quantity">
    /// The quantity to find the trade agreement <c>InventDim</c> table.
    /// </param>
    /// <param name="_effectiveDate">
    /// The effective date of the trade agreement to find <c>InventDim</c> for.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code of the trade agreement to find <c>InventDim</c> for.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> found.
    /// </returns>
    /// <remarks>
    /// The trade agreement will be in the given data area, for the given product, for the given vendor,
    /// for the given amount, effective on the given date.
    /// </remarks>
    public static InventDim findTradeAgreementInventDimForProduct(
        DataAreaId                      _dataAreaId,
        EcoResDistinctProduct           _distinctProduct,
        AccountNum                      _vendorAccountNumber,
        InventQty                       _quantity,
        TransDate                       _effectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        CurrencyCode                    _currencyCode = Ledger::accountingCurrency()
    )
    {
        ItemId                      itemId       = CatCartLine::findItemIdForDistinctProduct(_dataAreaId, _distinctProduct);
        TransDate                   nullDate;
        PriceDiscTable              priceDiscTable;
        InventDim                   dimForProductVariant; // InventDim for EcoResDistinctProductVariant
        InventDim                   dimForPriceDisc;      // InventDim for PriceDiscTable

        // if no vendor, no way to find any TradeAgreement
        if (_vendorAccountNumber)
        {
            // restrict to TradeAgreement in the same dataAreaId as the InventTable
            changecompany(_dataAreaId)
            {
                InventDimParm   dimParmProductDim = InventDimParm::allProductDim();
                InventDimParm   dimParmNoneAllowedBlank;

                if (_distinctProduct.getInstanceRelationType() == tableStr(EcoResDistinctProductVariant))
                {
                    dimForProductVariant = InventDim::find(InventDimCombination::findByDistinctProductVariant(_distinctProduct.RecId).InventDimId);
                }
                // Else (merely EcoResDistinctProduct): just use unitialized dimForProductVariant

                select firstonly RecId from priceDiscTable
                    where  priceDiscTable.ItemRelation == itemId
                        // restrict only to those for Purchase
                        && priceDiscTable.Module == ModuleInventCustVend::Vend
                        // restrict only to those still effective
                        && (
                            //restrict by from date
                            (
                                priceDiscTable.FromDate <= _effectiveDate
                            ||  priceDiscTable.FromDate == nullDate
                            )
                            &&
                            //and restrict also by to date
                            (
                                priceDiscTable.ToDate > _effectiveDate
                            ||  priceDiscTable.ToDate == nullDate
                            )
                        )
                        && (
                            //restrict by from quantity
                            (
                                priceDiscTable.QuantityAmountFrom <= _quantity
                            ||  priceDiscTable.QuantityAmountFrom == 0
                            )
                            &&
                            //and restrict also by to quantity
                            (
                                priceDiscTable.QuantityAmountTo >= _quantity
                            ||  priceDiscTable.QuantityAmountTo == 0
                            )
                        )
                        && priceDiscTable.Currency == _currencyCode
                        //consider only TradeAgreement for given vendor
                        && priceDiscTable.AccountRelation == _vendorAccountNumber
                        //consider only valid account code
                        && priceDiscTable.AccountCode == PriceDiscPartyCodeType::Table
                outer join dimForPriceDisc
                    where dimForPriceDisc.InventDimId == priceDiscTable.InventDimId
                    // either dimForProductVariant is null,
                    // or     dimForProductVariant's info must match that of the PriceDiscTable's InventDim
                    //          - we only care about ConfigId+InventColorId+InventSizeId since that's all EP enduser cares about.
                    && (!dimForProductVariant.RecId || (#InventDimRanges(dimForPriceDisc, dimForProductVariant, dimParmProductDim, dimParmNoneAllowedBlank)));
            }
        }

        // must still use dimForProductVariant for the case of NO TradeAgreement
        return (dimForPriceDisc ? dimForPriceDisc : dimForProductVariant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExternalCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>CatExternalCatalog</c> table to which the line may indirectly refer.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>recId</c> value of the record in the <c>CatCartLine</c> table.
    /// </param>
    /// <returns>
    ///    The record of the <c>CatExternalCatalog</c> table if it is found; otherwise, an empty buffer.
    /// </returns>
    static CatExternalCatalog getExternalCatalog(RefRecId _recId)
    {
        CatCartLine                         cartLine;
        CatExternalCatalog                  externalCatalog;
        CatExternalQuoteProductReference    externalQuoteProductReference;
        CatExternalCatalogQuote             externalCatalogQuote;

        select firstonly externalCatalog
            exists join externalCatalogQuote
                where externalCatalogQuote.ExternalCatalog == externalCatalog.RecId
            exists join externalQuoteProductReference
                where externalQuoteProductReference.ExternalQuote == externalCatalogQuote.RecId
            exists join cartLine
                where cartLine.RecId            == _recId
                &&    cartLine.ProductReference == externalQuoteProductReference.RecId;

        return externalCatalog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SYS319792</DeveloperDocumentation>
	<Label>@SYS300230</Label>
	<SingularLabel>@SYS300230</SingularLabel>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PunchoutRequest</TitleField1>
	<TitleField2>ProductReference</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PunchoutRequestIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CatCartLineState</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatCartLineState</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>CatProductReference</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CatProductReference</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SellingParty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchSupplierAuxId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProductReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PunchoutRequest</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatPunchoutRequestRecId</ExtendedDataType>
			<Label>@SCM:PunchoutRequest</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<Label>@SYS311537</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS14428</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SellingParty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS8079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS7867</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchSupplierAuxId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchSupplierAuxId</ExtendedDataType>
			<FeatureClass>CatCXMLCartLinePurchSupplierFlight</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PunchoutRequestIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PunchoutRequest</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatPunchoutRequest</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CatPunchoutRequest</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatPunchoutRequest</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PunchoutRequest</Name>
					<Field>PunchoutRequest</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatProductReference</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>CatProductReference</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatProductReference</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatProductReference_CatCartLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductReference</Name>
					<Field>ProductReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatCartLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirPartyTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirPartyTable_CatCartLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SellingParty</Name>
					<Field>SellingParty</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_CatCartLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasure</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>