<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditOfAssetNum</Name>
				<Source><![CDATA[
    public boolean allowEditOfAssetNum()
    {
        NoYes allowEdit = RAssetParameters::find().AutoNumber == NoYes::No;

        if (allowEdit)
        {
            allowEdit = (RAssetMainGroup::find(this.AssetGroup).AutoNumber == NoYes::No);
        }

        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetMainGroupName</Name>
				<Source><![CDATA[
    public display RAssetMainGroupName assetMainGroupName()
    {
        return RAssetMainGroup::find(this.AssetGroup).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessedTaxBaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tax base type for property tax calculation.
    /// </summary>
    /// <returns>
    /// The tax base type for property tax calculation.
    /// </returns>
    public RAssetAssessedTaxBaseType assessedTaxBaseType()
    {
        return this.AssessedTaxBaseCalc == RAssetAssessedTaxBaseCalc::AssetKind ?
           this.rAssetKindTaxBaseType().TaxBaseType :
           RAssetAssessedTaxBaseType::CadastralValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessedTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the asset kind for a fixed asset.
    /// </summary>
    /// <returns>
    /// The asset kind for a fixed asset.
    /// </returns>
    public RAssetAssessedTaxType assessedTaxType()
    {
        RAssetAssessedTaxType taxType = this.AssessedTaxType;

        if (this.AssetBelonged == RAssetBelonged::OutsideRussia)
        {
            taxType = RAssetAssessedTaxType::Fourth;
        }

        return taxType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the counting type for the asset: Intangible or Tangible.
    /// </summary>
    /// <returns>
    /// The counting type for the asset.
    /// </returns>
    public display RAssetCountingType countingType()
    {
        RAssetCountingType ret;

        switch (this.AssetType)
        {
            case RAssetType::Intangible :
            case RAssetType::Goodwill   :
            case RAssetType::Financial  :
                ret = RAssetCountingType::Intangible;
                break;

            default:
                ret = RAssetCountingType::Tangible;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetStandards</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates value models for the fixed asset
    /// </summary>
    /// <param name="_rAssetPurchTrans">
    /// the asset purch line which is used for initialization of value model line
    /// </param>
    public void createAssetStandards(RAssetPurchTrans _rAssetPurchTrans)
    {
        if (this.AccountNum
            && this.AssetGroup
            && (select firstonly RecId from rAssetStandards
                where rAssetStandards.AssetId == this.AccountNum).RecId == 0)
        {
            ttsbegin;
            
            RAssetMainGroupMember rAssetMainGroupMember;
            while select rAssetMainGroupMember
                where rAssetMainGroupMember.AssetMainGroupId == this.AssetGroup
            {
                RAssetStandards rAssetStandards;
                rAssetStandards = rAssetStandards.initFromMainGroup(this, rAssetMainGroupMember);

                switch (_rAssetPurchTrans.TableTableId)
                {
                    case tableNum(PurchLine):
                        if (_rAssetPurchTrans.purchLine())
                        {
                            rAssetStandards.initFromPurchLine(_rAssetPurchTrans.purchLine());
                        }
                        break;

                    case tableNum(VendInvoiceInfoLine):
                        if (_rAssetPurchTrans.vendInvoiceInfoLine())
                        {
                            rAssetStandards.initFromPurchLine(_rAssetPurchTrans.vendInvoiceInfoLine());
                        }
                        break;

                    case tableNum(LedgerJournalTrans):
                        if (_rAssetPurchTrans.ledgerJournalTrans())
                        {
                           rAssetStandards.initFromLedgerJournalTrans(_rAssetPurchTrans.ledgerJournalTrans());
                        }
                        break;

                    default:
                        break;
                }

                rAssetStandards.doUpdate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custName</Name>
				<Source><![CDATA[
    public display CustName custName()
    {
        return CustTable::find(this.CustAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        RAssetParameters assetParameters = RAssetParameters::find();
        NumberSequenceCode numberSequenceCode;
        RAssetMainGroup assetMainGroup  = RAssetMainGroup::find(this.AssetGroup);

        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strFmt("@SYS134392", this.AccountNum));
        }

        ttsbegin;
        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(this);

        if (assetParameters.AutoNumber)
        {
            numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetId)).numberSequenceTable().NumberSequence;
        }

        if (assetMainGroup.AutoNumber)
        {
            numberSequenceCode = assetMainGroup.AutoNumberSequence;
        }

        if (numberSequenceCode)
        {
            NumberSeq::release(numberSequenceCode, this.AccountNum);
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>denominatorAreaPart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displayes a denominator of the tax allowance value of share for the current fixed asset.
    /// </summary>
    /// <param name="_transDate">
    /// An optional date value used to select the denominator from the allowance history table.
    /// </param>
    /// <returns>
    /// The denominator of the tax allowance value of share.
    /// </returns>
    public display RAssetTaxPrivilegeShare denominatorAreaPart(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetTaxAllowanceHistory::findLast(_transDate, this.AccountNum).DenominatorShare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displayes the actual person in charge for the current fixed asset.
    /// </summary>
    /// <param name="_transDate">
    /// An optional date value used to select the person in charge from the transfer history table.
    /// </param>
    /// <returns>
    /// The employee id of person in charge.
    /// </returns>
    public display EmployeeId_RU employee(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetMoveHist::findLastOperation(this.AccountNum, RAssetMoveType::Transfer, NoYes::No, _transDate).NewEmployee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOKATO</Name>
				<Source><![CDATA[
    public OKATO_RU findOKATO(TaxCode _taxCode, TransDate _transDate, OKATO_RU _okato = '', boolean _isPropertyTax = false)
    {
        VendTable vendTable;
        Branches_RU branches;
        RAssetLocation location;
        OKATO_RU okato;
        boolean checkIndependent = _isPropertyTax
            && this.AssetType != RAssetType::LandBuilding;
    
        if (_okato)
        {
            okato = _okato;
        }
        else
        {
            select firstonly vendTable
                exists join TableId from branches
                    where branches.VendAccount == vendTable.AccountNum
                    && (!checkIndependent
                        || branches.Independent == NoYes::Yes)
                join TableId from location
                    where location.BranchId == branches.BranchId
                        && location.Location == this.location(_transDate);
    
            if (vendTable)
            {
                okato = vendTable.partyOKATOasOfDate_RU(_transDate);
            }
    
            if (! okato)
            {
                okato = CompanyInfoHelper::partyOKATOasOfDate_RU(CompanyInfo::find(), _transDate);
            }
        }

        return okato;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetGroup</Name>
				<Source><![CDATA[
    public void initFromAssetGroup(RAssetMainGroup _assetMainGroup)
    {
        RAssetParameters assetParameters = RAssetParameters::find();
        NumberSequenceCode numberSequenceCode;
        NumberSeq numberSeq;

        this.VatRefundingStartDate = _assetMainGroup.VatRefundingStartDate;
        if (assetParameters.AutoNumber)
        {
            switch(_assetMainGroup.GroupType)
            {
                case RAssetGroupTypes::FixedAssets:
                    numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetId)).numberSequenceTable().NumberSequence;
                    break;

                case RAssetGroupTypes::Cloths:
                    numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetClothsId)).numberSequenceTable().NumberSequence;
                    break;

                case RAssetGroupTypes::Rigging:
                    numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetRiggingId)).numberSequenceTable().NumberSequence;
                    break;

                case RAssetGroupTypes::LowCostAssets:
                    numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetLowCostId)).numberSequenceTable().NumberSequence;
                    break;

                default:
                    break;
            }
        }
        if (_assetMainGroup.AutoNumber)
        {
            numberSequenceCode = _assetMainGroup.AutoNumberSequence;
        }

        if (numberSequenceCode)
        {
            numberSeq = NumberSeq::newReserveNumFromCode(numberSequenceCode, NumberSeqScopeFactory::createDefaultScope(), true);
            if (numberSeq)
            {
                this.AccountNum = numberSeq.num();
                if (assetParameters.BarcodeEqualsAssetNumber)
                {
                    this.Barcode = this.AccountNum;
                }
            }
        }

        numberSequenceCode = '';
        if (!assetParameters.BarcodeEqualsAssetNumber)
        {
            if (assetParameters.AutoNumberBarcode)
            {
                numberSequenceCode = RAssetParameters::numRefExtendedTypeId(extendedTypeNum(RAssetBarcode)).numberSequenceTable().NumberSequence;
            }

            if (_assetMainGroup.AutoNumberBarcode)
            {
                numberSequenceCode = _assetMainGroup.BarcodeNumberSequence;
            }

            if (numberSequenceCode)
            {
                numberSeq = NumberSeq::newGetNumFromCode(numberSequenceCode);

                if (numberSeq)
                {
                    this.Barcode = numberSeq.num();
                }
            }
        }

        switch(_assetMainGroup.GroupType)
        {
            case RAssetGroupTypes::Cloths:
                this.AssetType = RAssetType::Cloths;
                break;

            case RAssetGroupTypes::Rigging:
                this.AssetType = RAssetType::Rigging;
                break;

            case RAssetGroupTypes::LowCostAssets:
                this.AssetType = RAssetType::LowCostAssets;
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        this.AssetGroup = _inventTable.AssetGroupId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        RAssetAmount acquisitionPrice = _ledgerJournalTrans.calcLineAmountExclTax_RU();
        acquisitionPrice = CurrencyExchangeHelper::mstAmount(acquisitionPrice, _ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate, UnknownNoYes::Unknown, _ledgerJournalTrans.ExchRate);
        this.AcquisitionPrice = acquisitionPrice;
        this.Name = _ledgerJournalTrans.Txt;
        this.AcquisitionDate = _ledgerJournalTrans.TransDate;
        this.VendAccount = _ledgerJournalTrans.parmAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    public void initFromPurchLine(SalesPurchLine _line)
    {
        PurchLine purchLine;
        VendInvoiceInfoLine infoLine;

        switch (_line.TableId)
        {
            case tableNum(PurchLine):
                purchLine = _line;
                break;

            case tableNum(VendInvoiceInfoLine):
                infoLine = _line;
                purchLine = infoLine.purchLine();
                break;

            default:
                throw error(strFmt("@SYS23396", funcName()));
        }
        
        SalesPurchLineInterface salesPurchLineInterface = _line.salesPurchLineInterface();
        
        this.AcquisitionPrice = RAssetTable::acquisitionPriceFromPurchLine(_line);
        this.Name = strFmt("@SYS62814", purchLine ? purchLine.Name : infoLine.Description);
        this.AcquisitionDate = purchLine ? purchLine.deliveryDate() : infoLine.vendInvoiceInfoTable().documentDate();
        this.VendAccount = salesPurchLineInterface.parmVendorOrderAccount();
        this.PurchId = purchLine ? purchLine.PurchId : '';
        this.Status = RAssetStatus::NoAcquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxCode</Name>
				<Source><![CDATA[
    public void initTaxCode()
    {
        this.TaxCode = RAssetParameters::find().TaxCode;
        if (this.TaxCode)
        {
            this.AssessedTaxType = PaymentOrderBudgetReceiptClassTable_RU::find(this.TaxCode).ssgs
                ? RAssetAssessedTaxType::First
                : RAssetAssessedTaxType::Third;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        RAssetParameters assetParameters = RAssetParameters::find();

        super();

        this.AcquisitionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Status = RAssetStatus::NoAcquisition;
        this.AssetBelonged = RAssetBelonged::assetprivate;
        this.Documents = assetParameters.Documents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDistribution</Name>
				<Source><![CDATA[
    public boolean isDistribution()
    {
        RAssetDistribution assetDistribution;

        select count(RecId) from assetDistribution
            where assetDistribution.AssetId == this.AccountNum
                && !assetDistribution.Owner;

        return assetDistribution.RecId >= 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFixedAssetType</Name>
				<Source><![CDATA[
    public boolean isFixedAssetType()
    {
        return this.AssetType != RAssetType::Rigging
            && this.AssetType != RAssetType::Cloths
            && this.AssetType != RAssetType::LowCostAssets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movablesFixedAssetTypeStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines string that contains asset types which can be movable.
    /// </summary>
    /// <returns>The string of the fixed asset types</returns>
    public static str movablesFixedAssetTypeStr()
    {
        container conTypes;
        str strTypes;

        conTypes = RAssetTable::movablesFixedAssetTypeCon();

        for (Counter i = 1; i <= conLen(conTypes); i++)
        {
            if (strTypes)
            {
                strTypes += ',';
            }
            strTypes += int2Str(any2int(conPeek(conTypes, i)));
        }

        return strTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movablesFixedAssetTypeCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines asset types which can be movable.
    /// </summary>
    /// <returns>The container of the fixed asset types</returns>
    internal static container movablesFixedAssetTypeCon()
    {
        return [RAssetType::Tangible, RAssetType::Other, RAssetType::Vehicle];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMovablesFixedAssetType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the type of fixed asset is movable.
    /// </summary>
    /// <returns>True if validation succeed, otherwise false.</returns>
    public boolean isMovablesFixedAssetType()
    {
        return conFind(RAssetTable::movablesFixedAssetTypeCon(), this.AssetType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOkToSell</Name>
				<Source><![CDATA[
    public boolean isOkToSell(boolean _reverse = false)
    {
        boolean okToSell = true;
        RAssetStatusType assetStatusType = RAssetStatusType::construct(this);

        okToSell = _reverse
            ? assetStatusType.allowDisposalSaleReverse()
            : assetStatusType.allowDisposalSale(RAssetParameters::standardIdDefault());

        if (! okToSell)
        {
            checkFailed("@GLS116397");
        }

        return okToSell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRealtyOrVehicle</Name>
				<Source><![CDATA[
    public boolean isRealtyOrVehicle()
    {
        return this.AssetType == RAssetType::LandBuilding
            || this.AssetType == RAssetType::Vehicle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>landTaxAllowance387</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displayes the actual allowance id of land (art.387) and transport tax exemption for the current fixed asset.
    /// </summary>
    /// <param name="_transDate">
    /// An optional date value used to select the allowance id from the allowance history table.
    /// </param>
    /// <returns>
    /// The actual allowance id of land tax exemption (art.387).
    /// </returns>
    public display RAssetTaxExemptionAllowanceId landTaxAllowance387(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetTaxAllowance::find(RAssetTaxAllowanceHistory::findLast(_transDate, this.AccountNum).TaxAllowanceRecId).TaxAllowanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>landTaxAllowance395</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displayes the actual allowance id of land tax exemption (art.395) for the current fixed asset.
    /// </summary>
    /// <param name="_transDate">
    /// An optional date value used to select the allowance id from the allowance history table.
    /// </param>
    /// <returns>
    /// The actual allowance id of land tax exemption (art.395).
    /// </returns>
    public display RAssetTaxExemptionAllowanceId landTaxAllowance395(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetTaxAllowance::find(RAssetTaxAllowanceHistory::findLast(_transDate, this.AccountNum).TaxAllowance395RecId).TaxAllowanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displayes the actual location of the current fixed asset.
    /// </summary>
    /// <param name="_transDate">
    /// An optional date value used to select the location from the transfer history table.
    /// </param>
    /// <returns>
    /// The actual location id.
    /// </returns>
    public display RAssetLocationId location(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetMoveHist::findLastOperation(this.AccountNum, RAssetMoveType::Transfer, NoYes::No, _transDate).NewLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch (_fieldId)
        {
            case fieldNum(RAssetTable, AssessedTaxNonTaxable):
                if (this.AssessedTaxNonTaxable == NoYes::Yes)
                {
                    this.TaxCode = '';
                }
                break;

            case fieldNum(RAssetTable, AssetType):
                this.TaxCode = '';
                this.TransportTaxCode = '';
                this.LandTaxCode = '';
                this.TaxBase = 0;
                this.TaxBaseUnitId = '';
                this.NumeratorShare = 0;
                this.DenominatorShare = 0;
                this.AssessedTaxType = 0;
                this.AssessedTaxNonTaxable = NoYes::No;

                switch (this.AssetType)
                {
                    case RAssetType::Vehicle:
                        this.TransportTaxCode = RAssetParameters::find().TransportTaxCode;
                        this.NumeratorShare   = 1;
                        this.DenominatorShare = 1;
                        break;

                    case RAssetType::Land:
                        this.LandTaxCode = RAssetParameters::find().LandTaxCode;
                        break;

                    case RAssetType::Financial,
                        RAssetType::Goodwill,
                        RAssetType::Intangible,
                        RAssetType::LandBuilding,
                        RAssetType::Other,
                        RAssetType::Tangible:
                        this.initTaxCode();
                        break;
                }
                break;
    
            case fieldnum(RAssetTable, AssessedTaxType):
                if (this.AssessedTaxType != RAssetAssessedTaxType::Section3
                    && this.TaxAllowanceRecId
                    && RAssetTaxAllowance::find(this.TaxAllowanceRecId).TaxAllowanceType == RAssetTaxAllowanceType::TaxBaseReduction)
                {
                    this.TaxAllowanceRecId = 0;
                }
                break;
    
            case fieldNum(RAssetTable, AssetGroup):
                if (this.AssetGroup)
                {
                    this.initFromAssetGroup(RAssetMainGroup::find(this.AssetGroup));
                }

                if (this.isFixedAssetType())
                {
                    this.initTaxCode();
                }

                if (! this.isFixedAssetType())
                {
                    this.AccountNumReference = this.AccountNum;
                }
                break;
    
            case fieldNum(RAssetTable, AccountNum):
                if (! this.isFixedAssetType())
                {
                    this.AccountNumReference = this.AccountNum;
                }
                break;

            case fieldNum(RAssetTable, TaxCode):
                if (this.TaxCode
                    && this.AssessedTaxNontaxable)
                {
                    this.AssessedTaxNontaxable = NoYes::No;
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needAssembling</Name>
				<Source><![CDATA[
    public boolean needAssembling()
    {
        boolean ret;

        switch (this.Status)
        {
            case RAssetStatus::NoAcquisition,
                RAssetStatus::Open,
                RAssetStatus::Lended:
                ret = (select firstonly RecId from rassetScrap
                    where rassetScrap.AssetId == this.AccountNum
                        && rassetScrap.Assembling == NoYes::Yes
                        && !rassetScrap.StornoRecId
                        && !rassetScrap.TransDate).RecId;
                break;

            default:    // RAssetStatus::PurchInvoice, Scrapped, Sold, SoldInvoice, Disposed, Closed, Suspended
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeratorAreaPart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displayes a numerator of the tax allowance value of share for the current fixed asset.
    /// </summary>
    /// <param name="_transDate">
    /// An optional date value used to select the numerator from the allowance history table.
    /// </param>
    /// <returns>
    /// The numerator of the tax allowance value of share.
    /// </returns>
    public display RAssetTaxPrivilegeShare numeratorAreaPart(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetTaxAllowanceHistory::findLast(_transDate, this.AccountNum).NumeratorShare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ownDistributedPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates share for all owned land distributions.
    /// </summary>
    /// <returns>
    /// A container ([numerator, denominator]) with owned distributed share.
    /// </returns>
    public container ownDistributedPercent()
    {
        RAssetDistribution assetDistribution;
        RAssetTaxInfoValue assetTaxInfoValue;
        RAssetOwnedShare numeratorShare, denominatorShare;

        while select RecId from assetDistribution
        where assetDistribution.AssetId == this.AccountNum
            && !assetDistribution.Owner
        {
            assetTaxInfoValue = RAssetTaxInfoValue::newParameters(
				this.AccountNum, assetDistribution.RecId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            numeratorShare += assetTaxInfoValue.getNumeratorShare();
            denominatorShare += assetTaxInfoValue.getDenominatorShare();
        }

        return numeratorShare
            ? [numeratorShare, denominatorShare]
            : [1, 1];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string value containing address for current asset
    /// </summary>
    /// <returns>
    /// String value containing address for current asset
    /// </returns>
    public LogisticsPostalAddress postalAddress()
    {
        return LogisticsPostalAddress::findRecId(this.LogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performJumpRefLandType</Name>
				<Source><![CDATA[
    public static void performJumpRefLandType(LandType_W _landType)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();
        LandTypeTable_W landTypeTable = LandTypeTable_W::find(_landType);

        args.record(landTypeTable);
        args.lookupRecord(landTypeTable);

        new MenuFunction(menuitemDisplayStr(LandTypeTable_W), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetKindTaxBaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>RAssetKindTaxBaseType</c> table buffer associated with the fixed asset.
    /// </summary>
    /// <returns>
    /// The <c>RAssetKindTaxBaseType</c> table buffer associated with the fixed asset.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The exception is thrown in case the <c>RAssetKindTaxBaseType</c> table buffer is not found.
    /// </exception>
    public RAssetKindTaxBaseType rAssetKindTaxBaseType()
    {
        RAssetKindTaxBaseType rAssetKindTaxBaseType = RAssetKindTaxBaseType::find(this.assessedTaxType());

        if (!rAssetKindTaxBaseType)
        {
            throw error("@RussianFixedAssets:CalculationMethodNotSet");
        }

        return rAssetKindTaxBaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetRailwayFactors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>RAssetRailwayFactors</c> table buffer for the fixed asset and its year of operation.
    /// </summary>
    /// <param name="_calcDate">
    /// The calculation date to determine the railway factor.
    /// </param>
    /// <returns>
    /// The <c>RAssetRailwayFactors</c> table buffer for the fixed asset and its year of operation.
    /// </returns>
    public RAssetRailwayFactors rAssetRailwayFactors(TransDate _calcDate)
    {
        RAssetRailwayFactors    railwayFactors;

        if (this.rAssetKindTaxBaseType().RailwayAsset)
        {
            RAssetTrans rAssetTrans;
            RAssetTrans rassetTransStorno;
            RAssetStandardId standardId = RAssetParameters::standardIdDefault();

            select firstonly TransDate from rAssetTrans
                order TransDate asc
                where rAssetTrans.AccountNum == this.AccountNum
                    && rAssetTrans.AssetStandardId == standardId
                    && rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                    && rAssetTrans.TransDate <= _calcDate
            notexists join firstonly rassetTransStorno
                where rassetTransStorno.AccountNum == rAssetTrans.AccountNum
                    && rassetTransStorno.AssetStandardId == rAssetTrans.AssetStandardId
                    && rassetTransStorno.AssetTransType == RAssetTransType::Acquisition
                    && rassetTransStorno.RecId == rAssetTrans.StornoRecId
                    && rassetTransStorno.TransDate <= _calcDate;

            TransDate disposalDate = RAssetStandards::find(this.AccountNum, standardId).DisposalDate;

            if (rAssetTrans.TransDate && (!disposalDate || year(disposalDate) >= year(_calcDate)))
            {
                int yearNum = year(_calcDate) - year(rAssetTrans.TransDate) + 1;

                railwayFactors = RAssetRailwayFactors::find(yearNum, _calcDate);
            }

        }

        return railwayFactors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a property tax declaration section number code.
    /// </summary>
    /// <returns>
    /// A property tax declaration section number code.
    /// </returns>
    public int sectionNum()
    {
        int sectionNum;
        int assetKind = this.assessedTaxType();

        switch (this.assessedTaxBaseType())
        {
            case RAssetAssessedTaxBaseType::YearlyAverageValue :
                sectionNum = 2;
                break;
            case RAssetAssessedTaxBaseType::CadastralValue :
                sectionNum = 3;
                break;
            default :
                break;
        }

        if (this.AssessedTaxNonTaxable == NoYes::Yes)
        {
            sectionNum = 4;
        }

        return sectionNum * 100 + assetKind;
    }

]]></Source>
			</Method>
			<Method>
				<Name>topMainAsset</Name>
				<Source><![CDATA[
    public RAssetId topMainAsset()
    {
        RAssetTable  assetTable = this;

        while (assetTable.AccountNumMain)
        {
            assetTable = RAssetTable::find(assetTable.AccountNumMain);
        }

        return assetTable.AccountNum;

    }

]]></Source>
			</Method>
			<Method>
				<Name>untaxedAreaPartAllowance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displayes the actual allowance id of non-taxable land share for the current fixed asset.
    /// </summary>
    /// <param name="_transDate">
    /// An optional date value used to select the allowance id from allowance history table.
    /// </param>
    /// <returns>
    /// The actual allowance id of non-taxable land share.
    /// </returns>
    public display RAssetUntaxedAreaPartAllowanceId untaxedAreaPartAllowance(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return RAssetTaxAllowance::find(RAssetTaxAllowanceHistory::findLast(_transDate, this.AccountNum).UntaxedAreaPartAllowanceRecId).TaxAllowanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        RAssetTable this_Orig = this.orig();

        ttsbegin;

        super();

        if ((this_Orig.VehiclePlateDate != this.VehiclePlateDate
                || this_Orig.AssetType != this.AssetType)
            && this.isRealtyOrVehicle())
        {
            this.updateDepStartDate();
        }

        if (this_Orig.AcquisitionDate != this.AcquisitionDate)
        {
            this.updateDepStartDate(this.AcquisitionDate);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDepStartDate</Name>
				<Source><![CDATA[
    private void updateDepStartDate(RAssetTransDate _transDate = dateNull())
    {
        RAssetStandards assetStandards;

        ttsbegin;

        while select forupdate assetStandards
            where assetStandards.AssetId == this.AccountNum
                && !assetStandards.LastDepDate
                && assetStandards.AssetGroup
        {
            TransDate acquisitionDate = _transDate ? _transDate : assetStandards.puttingIntoOperationDate();
            acquisitionDate = acquisitionDate ? acquisitionDate : RAssetTable::find(assetStandards.AssetId).AcquisitionDate;
            assetStandards.DepStartDate = RAssetGroup::initDepStartDate(assetStandards.AssetGroup, acquisitionDate, this.AccountNum);

            assetStandards.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usefulLife</Name>
				<Source><![CDATA[
    public display RAssetUsefulLife usefulLife(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        RAssetUsefulLife ret;

        if (year(_transDate) < this.ReleaseYear
            || !this.ReleaseYear)
        {
            ret = 0;
        }
        else if (year(_transDate) == this.ReleaseYear)
        {
            ret = 1;
        }
        else
        {
            ret = year(_transDate) - this.ReleaseYear;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetGroup</Name>
				<Source><![CDATA[
    public boolean validateAssetGroup(RAssetType _assetType)
    {
        RAssetGroupTypes assetGroupTypes;
        boolean ret = true;

        switch (_assetType)
        {
            case RAssetType::Cloths :
                assetGroupTypes = RAssetGroupTypes::Cloths;
                break;

            case RAssetType::Rigging :
                assetGroupTypes = RAssetGroupTypes::Rigging;
                break;

            case RAssetType::LowCostAssets :
                assetGroupTypes = RAssetGroupTypes::LowCostAssets;
                break;

            default:
                assetGroupTypes = RAssetGroupTypes::FixedAssets;
                break;
        }

        RAssetMainGroup assetMainGroup = RAssetMainGroup::find(this.AssetGroup);

        if (assetMainGroup.GroupType != assetGroupTypes)
        {
            ret = checkFailed(strFmt("@GLS113896", this.AssetGroup, assetMainGroup.GroupType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        if (ret)
        {
            if ((select firstonly RecId from rassetTable
                where rassetTable.AccountNumMain == this.AccountNum).RecId)
            {
                ret = checkFailed(strFmt("@GLS116242", this.AccountNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);
    
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(RAssetTable, TaxBaseUnitId):
                    this.TaxBase = UnitOfMeasureConverter::convert(this.TaxBase,
                        UnitOfMeasure::unitOfMeasureIdBySymbol(this.orig().TaxBaseUnitId),
                        UnitOfMeasure::unitOfMeasureIdBySymbol(this.TaxBaseUnitId),
                        NoYes::No);
                    break;
    
                case fieldNum(RAssetTable, NumeratorShare),
                    fieldNum(RAssetTable, DenominatorShare):
                    if (this.NumeratorShare > this.DenominatorShare)
                    {
                        ret = checkFailed("@GLS117061");
                    }
                    break;
    
                case fieldNum(RAssetTable, AssessedTaxType):
                    if ((select firstonly RecId from rAssetDistribution
                        where rAssetDistribution.AssetId == this.AccountNum).RecId)
                    {
                        ret = checkFailed("@GLS117048");
                    }

                    if (CompanyInfo::find().rAlienCorpName)
                    {
                        if (this.AssessedTaxType == RAssetAssessedTaxType::Second)
                        {
                            ret = checkFailed("@GLS116766");
                        }
                    }
                    break;
    
                case fieldNum(RAssetTable, AssetBelonged):
                    if (this.AssetBelonged == RAssetBelonged::OutsideRussia &&
                        CompanyInfo::find().rAlienCorpName)
                    {
                        ret = checkFailed("@GLS116766");
                    }
                    break;
    
                case fieldNum(RAssetTable, AssetType):
                    if (RAssetMainGroup::find(this.AssetGroup).GroupType == RAssetGroupTypes::FixedAssets
                        && !this.isFixedAssetType())
                    {
                        ret = checkFailed("@GLS113895");
                    }
                    break;
    
                case fieldNum(RAssetTable, VehiclePlateDate):
                case fieldNum(RAssetTable, RegisterRemovalDate):
                    if (this.RegisterRemovalDate && this.VehiclePlateDate > this.RegisterRemovalDate)
                    {
                        ret = checkFailed("@GLS104331");
                    }
                    break;

                case fieldNum(RAssetTable, RoomCadastralNum):
                    if (this.RoomCadastralNum && !this.LandCadastralNum)
                    {
                        ret = checkFailed("@SYP4881042");
                    }
                    break;

                default:
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
    
        if (this.NumeratorShare
            && !this.DenominatorShare)
        {
            ret = checkFailed("@GLS117114");
        }

        if (this.DenominatorShare
            && !this.NumeratorShare)
        {
            ret = checkFailed("@GLS117115");
        }

        if (ret
            && this.AccountNumMain)
        {
            RAssetFamilyTreeNode temp = new RAssetFamilyTreeNode();
            ret  = temp.buildDescendantTree(this.AccountNum);
            if (ret
                && temp.hasDescendant(this.AccountNumMain))
            {
                ret = checkFailed("@GLS116244");
            }

            if (ret)
            {
                RAssetStandards rassetStandardsCurrent;
                while select AssetStandardId from rassetStandardsCurrent
                    where rassetStandardsCurrent.AssetId == this.AccountNum &&
                          rassetStandardsCurrent.Depreciation
                {
                    ret = ret
                        && temp.buildAncestorLine(this.AccountNum, rassetStandardsCurrent.AssetStandardId, this.AccountNumMain);
                    if (temp.ancestorMatchDepreciation(NoYes::Yes))
                    {
                        str message = temp.ancestorMatchingDepreciation(NoYes::Yes);
                        ret = checkFailed(strFmt("@GLS116208", message, rassetStandardsCurrent.AssetStandardId));
                    }
                }
            }
        }
    
        if (!this.isFixedAssetType()
            && !this.AccountNumReference)
        {
            ret = checkFailed(strFmt("@SYS84378", fieldId2pname(tableNum(RAssetTable), fieldNum(RAssetTable, AccountNumReference))));
        }
    
        ret = this.validateAssetGroup(this.AssetType)
            && ret;

        ret = this.validateAssetKind()
            && ret;
    
        if (this.TaxCode
             && this.AssetType == RAssetType::LandBuilding
             && this.AssessedTaxType == RAssetAssessedTaxType::Section3
             && this.TaxBase == 0)
        {
            ret = checkFailed("@SYP4881056");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendName</Name>
				<Source><![CDATA[
    public display VendName vendName()
    {
        return VendTable::find(this.VendAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquisitionPriceFromPurchLine</Name>
				<Source><![CDATA[
    public static RAssetAmount acquisitionPriceFromPurchLine(SalesPurchLine _line, boolean _convert = true)
    {   
        PurchTotals purchTotals;

        switch (_line.TableId)
        {
            case tableNum(VendInvoiceInfoLine):
                VendInvoiceInfoLine vendInvoiceInfoLine = _line;
                VendInvoiceInfoTable vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();
                purchTotals = purchTotals::newParmTable(vendInvoiceInfoTable,
                    PurchUpdate::All,
                    vendInvoiceInfoTable.ParmId,
                    '',
                    vendInvoiceInfoTable.Ordering);
                break;

            case tableNum(PurchLine):
                PurchLine purchLine = _line;
                purchTotals = PurchTotals::newPurchTable(purchLine.purchTable());
                break;

            default:
                throw error("@SYS83964");
        }

        purchTotals.calc();
        TaxPurch taxPurch = purchTotals.tax();
        SalesPurchLineInterface salesPurchLineInterface = _line.salesPurchLineInterface();
        
        RAssetAmount acquisitionPrice = salesPurchLineInterface.taxPcsPrice()
            + purchTotals.purchMarkup() / (salesPurchLineInterface.parmInventQty() ? salesPurchLineInterface.parmInventQty() : 1)
            + (taxPurch.taxInCostPrice(_line.TableId, _line.RecId)
            / (salesPurchLineInterface.parmInventQty() ? salesPurchLineInterface.parmInventQty() : 1));

        acquisitionPrice = round(acquisitionPrice, RAssetParameters::find().AssetRound);

        if (_convert
            && salesPurchLineInterface.parmCurrencyCode() != CompanyInfoHelper::standardCurrency())
        {
            acquisitionPrice = CurrencyExchangeHelper::curAmount2CurAmount(acquisitionPrice, salesPurchLineInterface.parmCurrencyCode(), CompanyInfoHelper::standardCurrency());
        }

        return acquisitionPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(RAssetId _assetId)
    {
        boolean ret = true;

        if (_assetId
            && !(select rassetTable
                where rassetTable.AccountNum == _assetId).RecId)
        {
            ret = checkFailed(strFmt("@GLS116411", _assetId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clothAndRiggingQty</Name>
				<Source><![CDATA[
    public static InventQty clothAndRiggingQty(
        ItemId _itemId,
        RAssetEmployee _employee,
        RefRecId _quotaTypesRecId)
    {
        RAssetScrap assetScrap;
        RAssetTable assetTable;
        RAssetMoveHist moveHist;

        select sum(Qty) from assetScrap
            join TableId from assetTable
                where assetScrap.AssetId == assetTable.AccountNum
                    && assetScrap.Assembling == NoYes::Yes
                    && assetScrap.ItemId == _itemId
                    && assetTable.QuotaTypesRecId == _quotaTypesRecId
                    && (assetTable.Status == RAssetStatus::Open
                        || assetTable.Status == RAssetStatus::Suspended
                        || assetTable.Status == RAssetStatus::Closed
                        || assetTable.Status == RAssetStatus::Lended)
                    && assetScrap.TransDate
                    && !assetScrap.StornoRecId
            join firstonly RecId from moveHist
                order by ChangeDate desc
                where moveHist.AccountNum == assetTable.AccountNum
                    && moveHist.MoveType == RAssetMoveType::Transfer
                    && moveHist.NewEmployee == _employee;

        return assetScrap.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static RAssetTable find(RAssetId _assetId, boolean _forUpdate = false)
    {
        RAssetTable assetTable;

        if (_assetId)
        {
            assetTable.selectForUpdate(_forUpdate);

            select firstonly assetTable index RAssetNumIdx
                where assetTable.AccountNum == _assetId;
        }

        return assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the RAssetTable table for the specified ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension which is used to find asset record.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing RAssetTable table.
    /// </returns>
    public static RAssetTable findByLedgerDimension(
        LedgerDimensionAccount _ledgerDimension,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        RAssetTable assetTable;
        DimensionAttributeValueCombination ledgerDimension;

        assetTable.selectForUpdate(_forupdate);

        if (_forupdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly assetTable
            join RecId from ledgerDimension
            where ledgerDimension.DisplayValue == assetTable.AccountNum
                && ledgerDimension.RecId == _ledgerDimension;

        return assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInCompany</Name>
				<Source><![CDATA[
    public static RAssetTable findInCompany(RAssetId _assetId, CompanyId _companyId, boolean _forUpdate = false)
    {
        RAssetTable assetTable;

        if (_companyId)
        {
            if (SysDataArea::checkAccessible(_companyId))
            {
                changecompany(_companyId)
                {
                    if (_assetId)
                    {
                        assetTable.selectForUpdate(_forUpdate);

                        select firstonly assetTable
                            where assetTable.AccountNum == _assetId;
                    }
                }
            }
        }

        return assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findrec</Name>
				<Source><![CDATA[
    public static RAssetTable findrec(RecId _recId, boolean _forUpdate = false)
    {
        RAssetTable assetTable;

        if(_recId)
        {
            assetTable.selectForUpdate(_forUpdate);

            select firstonly assetTable
                where assetTable.RecId == _recId;
        }

        return assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAccountNum</Name>
				<Source><![CDATA[
    public static void lookupAccountNum(FormControl _ctrl,
        CompanyId _company = curext(),
        RAssetTransType _assetTransType = RAssetTransType::Depreciation)
    {
        SegmentedEntryControl segmentedEntryControl;
        FormStringControl formStringControl;

        if (!_company)
        {
            _company = curext();
        }

        if (SysDataArea::checkAccessible(_company))
        {
            changecompany(_company)
            {
                Args args = new Args();
                args.name(formStr(RAssetLookup));
                args.caller(_ctrl);

                FormRun ctrl_formRun = _ctrl.formRun();
                FormDataSource ctrl_ds = ctrl_formRun.dataSource();

                if (ctrl_ds)
                {
                    args.record(ctrl_ds.cursor());
                }

                args.parm(enum2str(_assetTransType));

                if (_ctrl is FormStringControl)
                {
                    formStringControl = _ctrl as FormStringControl;
                }
                else if (_ctrl is SegmentedEntryControl)
                {
                    segmentedEntryControl = _ctrl as SegmentedEntryControl;
                }

                if (args.dataset() == tableNum(LedgerJournalTrans))
                {
                    FieldBinding fieldBinding = _ctrl.fieldBinding();
                    if (fieldBinding
                        && fieldBinding.fieldName() == fieldStr(LedgerJournalTrans, OffsetLedgerDimension))
                    {
                        args.parm(SysQuery::valueUnlimited());
                    }
                }

                FormRun formRun = classfactory.formRunClass(args);
                formRun.init();

                if (formStringControl)
                {
                    formStringControl.performFormLookup(formRun);
                }
                else if (segmentedEntryControl)
                {
                    segmentedEntryControl.performFormLookup(formRun);
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpIssue</Name>
				<Source><![CDATA[
    public static void lookUpIssue(FormStringControl _lookupCtrl, CompanyId _company)
    {
        Query query = new Query();

        if (!_company)
        {
            warning("@GLS116690");
        }
        else if (SysDataArea::checkAccessible(_company))
        {
            changecompany(_company)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RAssetTable), _lookupCtrl);
                QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RAssetTable));
                queryBuildDataSource.addRange(fieldNum(RAssetTable, Status)).value(queryValue(RAssetStatus::NoAcquisition));
                queryBuildDataSource.addRange(fieldNum(RAssetTable, AssetType)).value(queryRange(RAssetType::Tangible, RAssetType::Other));
                queryBuildDataSource.addRange(fieldNum(RAssetTable, Status)).value(queryValue(RAssetStatus::Disposed));
                sysTableLookup.addLookupfield(fieldNum(RAssetTable, AccountNum));
                sysTableLookup.addLookupfield(fieldNum(RAssetTable, Name));
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookUpReceipt</Name>
				<Source><![CDATA[
    public static void lookUpReceipt(FormStringControl _lookupCtrl,
        CompanyId _company,
        TransDate _changeDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CompanyId currentCompany = curext();
        Query query = new Query();

        if (!_company)
        {
            warning("@GLS116690");
        }
        else if (SysDataArea::checkAccessible(_company))
        {
            changecompany(_company)
            {
                SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RAssetTable),_lookupCtrl);
                QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RAssetTable));
                queryBuildDataSource.addRange(fieldNum(RAssetTable, Status)).value(queryValue(RAssetStatus::Disposed));
                queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(RAssetMoveHist));
                queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, Posted)).value(queryValue(NoYes::Yes));
                queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, Receipted)).value(queryValue(NoYes::No));
                queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, ChangeDate)).value(queryRange(dateNull(),_changeDate));
                queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, MoveType)).value(queryValue(RAssetMoveType::CompanyIssue));
                queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, Company)).value(queryValue(currentCompany));
                queryBuildDataSource.addRange(fieldNum(RAssetMoveHist, Company)).value(SysQuery::valueEmptyString());
                queryBuildDataSource.relations(true);
                queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                sysTableLookup.addLookupfield(fieldNum(RAssetTable, AccountNum));
                sysTableLookup.addLookupfield(fieldNum(RAssetTable, Name));
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustInfo</Name>
				<Source><![CDATA[
    public static void updateCustInfo(RAssetId _assetId,
        CustAccount _custAccount,
        SalesId _salesId,
        CustInvoiceId _custInvoiceId = '')
    {
        RAssetTable assetTable = RAssetTable::find(_assetId, true);

        if (assetTable)
        {
            assetTable.CustInvoiceId = _custInvoiceId;
            assetTable.SalesId = _salesId;
            assetTable.CustAccount = _custAccount;
            assetTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public static void updateStatus(RAssetId _assetId, RAssetStatus _assetStatus)
    {
        RAssetTable assetTable = RAssetTable::find(_assetId, true);
        if (assetTable)
        {
            assetTable.Status = _assetStatus;
            assetTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInfo</Name>
				<Source><![CDATA[
    public static void updateVendInfo(RAssetId _assetId,
        VendAccount _vendAccount,
        PurchId _purchId,
        VendInvoiceId _vendInvoiceId = '',
        InventTransId _inventTransId = '',
        PurchInternalInvoiceId _purchInternalInvoiceId = '',
        NumberSequenceGroupId _numberSequenceGroupId = '',
        RAssetAmount _assetAmount = 0,
        CurrencyCode _currencyCode = Ledger::accountingCurrency(CompanyInfo::current()),
        TransDate _transDate = dateNull(),
        ExchRate _exchRate = 0)
    {
        RAssetTable assetTable = RAssetTable::find(_assetId, true);

        if (assetTable)
        {
            assetTable.VendInvoiceId = _vendInvoiceId;
            assetTable.InventTransId = _inventTransId;
            assetTable.PurchInternalInvoiceId = _purchInternalInvoiceId;
            assetTable.NumberSequenceGroupId = _numberSequenceGroupId;
            assetTable.PurchId = _purchId;
            assetTable.VendAccount = _vendAccount;
            if (_inventTransId)
            {
                InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(_inventTransId);
                EcoResProductCategory ecoResProductCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(inventTransOrigin.ItemId, EcoResCategoryNamedHierarchyRole::Traceability);
                if (ecoResProductCategory)
                {
                    InventTrans inventTrans = InventTrans::findByInventTransOrigin(inventTransOrigin.RecId);
                    InventDim inventDim = inventTrans.inventDim();
                    assetTable.InventGtdId_RU = inventDim.InventGtdId_RU;
                }
            }

            if (_transDate)
            {
                assetTable.AcquisitionDate = _transDate;
                assetTable.updateDepStartDate(_transDate);
            }

            if (_assetAmount)
            {
                assetTable.AcquisitionPrice = CurrencyExchangeHelper::mstAmount(_assetAmount, _currencyCode, _transDate, UnknownNoYes::Unknown, _exchRate);
                
                RAssetStandards assetStandards;
                while select forupdate assetStandards
                    where assetStandards.AssetId == assetTable.AccountNum
                        && !assetStandards.LastDepDate
                        && assetStandards.AssetGroup
                {
                    RAssetAmount assetAmount = CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(_assetAmount, _currencyCode, _transDate, UnknownNoYes::Unknown, _exchRate, 0, false), assetStandards.CurrencyCode, _transDate, UnknownNoYes::Unknown, 0, 0, false);
                    assetStandards.AcquisitionPrice = CurrencyExchangeHelper::amount(assetAmount, assetStandards.CurrencyCode);
                    assetStandards.update();
                }
            }

            assetTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetKind</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates value combination related to asset kind.
    /// </summary>
    /// <returns>
    ///  True if validation succeed, otherwise false.
    /// </returns>
    private boolean validateAssetKind()
    {
        boolean ret = true;
    
        if (this.AssetType != RAssetType::LandBuilding)
        {
            if (this.TaxCode)
            {
                if (this.AssessedTaxType == RAssetAssessedTaxType::Section3)
                {
                    ret = checkFailed("@SYP4881055");
                }
            }    
        }

        if ((this.AssessedTaxType == RAssetAssessedTaxType::Fourth) ^
            (this.AssetBelonged == RAssetBelonged::OutsideRussia))
        {
            ret = checkFailed(strFmt("@SYS304417", fieldId2pname(tableNum(RAssetTable), fieldNum(RAssetTable, AssessedTaxType))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>denominatorShareEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a DenominatorShare field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_denominatorShare">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the DenominatorShare field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a DenominatorShare field for RAssetTable.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// If distribution for the asset exists, the field is also locked for editing, and becomes zero (value is stored for distribution).
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    edit RAssetOwnedShare denominatorShareEdit(boolean _set, RAssetOwnedShare _denominatorShare)
    {
        RAssetOwnedShare denominatorShareRet;

        if (this.AssetType == RAssetType::LandBuilding
            || !RAssetDistribution::distributionsExistForAsset(this.AccountNum))
        {
            denominatorShareRet = this.getSetFieldValue(
            _set,
            fieldNum(RAssetTable, DenominatorShare),
            fieldNum(RAssetTaxAllowanceHistory, DenominatorShareOwned),
            _denominatorShare);
        }

        return denominatorShareRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetFieldValue</Name>
				<Source><![CDATA[
    private anytype getSetFieldValue(boolean _set, FieldId _fixedAssetFieldId, FieldId _historyFieldId, anytype _value)
    {
        str ret;
        RAssetTaxAllowanceHistory assetTaxDataHistory = this.RecId != 0
            ? RAssetTaxAllowanceHistory::findLast(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), this.AccountNum)
            : null;

        if (assetTaxDataHistory.(_historyFieldId))
        {
            ret = assetTaxDataHistory.(_historyFieldId);
        }
        else
        {
            if (_set)
            {
                this.(_fixedAssetFieldId) = _value;
            }

            ret = this.(_fixedAssetFieldId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>landCadastralNumEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a LandCadastralNum field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_landCadastralNum">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the LandCadastralNum field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a LandCadastralNum field for RAssetTable.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    public edit LandCadastralNum_W landCadastralNumEdit(boolean _set, LandCadastralNum_W _landCadastralNum)
    {
        return this.getSetFieldValue(
            _set,
            fieldNum(RAssetTable, LandCadastralNum),
            fieldNum(RAssetTaxAllowanceHistory, LandCadastralNum),
            _landCadastralNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>landTypeEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a LandType field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_landType">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the LandType_W field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a LandType_W field for RAssetTable.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    edit LandType_W landTypeEdit(boolean _set, LandType_W _landType)
    {
        return this.getSetFieldValue(
        _set,
        fieldNum(RAssetTable, LandType),
        fieldNum(RAssetTaxAllowanceHistory, LandType),
        _landType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeratorShareEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a NumeratorShare field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_numeratorShare">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the NumeratorShare field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a NumeratorShare field for RAssetTable.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// If distribution for the asset exists, the field is also locked for editing, and becomes zero (value is stored for distribution).
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    edit RAssetOwnedShare numeratorShareEdit(boolean _set, RAssetOwnedShare _numeratorShare)
    {
        RAssetOwnedShare numeratorShareRet;

        if (this.AssetType == RAssetType::LandBuilding
            || !RAssetDistribution::distributionsExistForAsset(this.AccountNum))
        {
            numeratorShareRet = this.getSetFieldValue(
            _set,
            fieldNum(RAssetTable, NumeratorShare),
            fieldNum(RAssetTaxAllowanceHistory, NumeratorShareOwned),
            _numeratorShare);
        }

        return numeratorShareRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roomCadastralNumEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a LandCadastralNum field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_roomCadastralNum">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the RoomCadastralNum field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a RoomCadastralNum field for RAssetTable.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    public edit RoomCadastralNum_RU roomCadastralNumEdit(boolean _set, RoomCadastralNum_RU _roomCadastralNum)
    {
        return this.getSetFieldValue(
            _set,
            fieldNum(RAssetTable, RoomCadastralNum),
            fieldNum(RAssetTaxAllowanceHistory, RoomCadastralNum),
            _roomCadastralNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// An edit method for a TaxBase field.
    /// </summary>
    /// <param name="_set">
    /// true if the value was changed; false otherwise.
    /// </param>
    /// <param name="_taxBase">
    /// The field value.
    /// </param>
    /// <returns>
    /// The value to show in the TaxBase field.
    /// </returns>
    /// <remarks>
    /// If the value in the field on the history table is empty, the method works as a TaxBase field for RAssetTable.
    /// If not, the field becomes locked for editing, and it fetches the value from the history table.
    /// If distribution for the asset exists, the field is also locked for editing, and becomes zero (value is stored for distribution).
    /// </remarks>
    [SysClientCacheDataMethod(true)]
    edit TaxBase taxBaseEdit(boolean _set, TaxBase _taxBase)
    {
        TaxBase taxBaseRet;

        if (this.AssetType == RAssetType::LandBuilding
            || !RAssetDistribution::distributionsExistForAsset(this.AccountNum))
        {
            taxBaseRet = this.getSetFieldValue(
            _set,
            fieldNum(RAssetTable, TaxBase),
            fieldNum(RAssetTaxAllowanceHistory, TaxBase),
            _taxBase);
        }

        return taxBaseRet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS67655</DeveloperDocumentation>
	<FormRef>RAssetTable</FormRef>
	<Label>@GLS116200</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RAssetNumIdx</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>RAssetNumIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RAssetMoveHist</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetMoveHist</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetDistribution</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetDistribution</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetDocument</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RAssetDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetPurchTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetPurchTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetScrap</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetScrap</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetStandards</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RAssetStandards</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetSuspend</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetSuspend</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetTaxAllowanceHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetTaxAllowanceHistory</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetTrans</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>RAssetTrans</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>RAssetUse</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetUse</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Acquisition</Name>
			<Label>@GLS116239</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@GLS100805</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssessedTax</Name>
			<Label>@GLS110662</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssessedTaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OKOF</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssessedTaxNonTaxable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssessedTaxBaseCalc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetGroup</Name>
			<Label>@GLS116256</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>assetMainGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetQuotaType</Name>
			<Label>@GLS113954</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>QuotaTypesRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Autocreation</Name>
			<Label>@GLS116702</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Documents</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsPolicyNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuredValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Make</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Model</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GuaranteeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetReplaceCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetUse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetBelonged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceDate2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceDate1</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Documents</Name>
			<Label>@SYS54210</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Documents</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EquipmentAcceptanceReport</Name>
			<Label>@GLS102071</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GovRegistration</Name>
			<Label>@GLS114685</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehiclePlateDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegisterRemovalDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNumReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InformationAboutPurchase</Name>
			<Label>@GLS116145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>vendName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InformationAboutSale</Name>
			<Label>@GLS116146</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>custName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Insurance</Name>
			<Label>@GLS116240</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InsPolicyNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuredValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetReplaceCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceDate1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceDate2</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryCard</Name>
			<Label>@GLS116169</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvKartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvKartNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LandProperties</Name>
			<Label>@GLS117001</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LandType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LandCadastralNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BuildingStartDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LandTax</Name>
			<Label>@GLS116997</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LandTaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumeratorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenominatorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>landTaxAllowance387</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>landTaxAllowance395</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>untaxedAreaPartAllowance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>numeratorAreaPart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>denominatorAreaPart</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Location</Name>
			<Label>@GLS116157</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Barcode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>employee</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>MainAsset</Name>
			<Label>@GLS116237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNumMain</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Model</Name>
			<Label>@SYS9923</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Make</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Model</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SerialNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GuaranteeDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PassportNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PropertyFlag</Name>
			<Label>@GLS116450</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetBelonged</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25532</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransportTax</Name>
			<Label>@GLS116928</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportTaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumeratorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DenominatorShare</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>landTaxAllowance387</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBaseUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportTaxFactorGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxDeductionRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportTaxDeductionValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Type</Name>
			<Label>@SYS26386</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>countingType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Use</Name>
			<Label>@SYS5983</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetUse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>UsefulLife</Name>
			<Label>@GLS104052</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VatRefunding</Name>
			<Label>@GLS110485</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VatRefundingStartDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VehicleProperties</Name>
			<Label>@GLS111078</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VehicleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehiclePlateNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VehicleEcoClass</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendInfo</Name>
			<Label>@SYS80105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchInternalInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WrkCtr</Name>
			<Label>@SYS10597</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CadastralData</Name>
			<Label>@SYP4881054</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LandCadastralNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoomCadastralNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBase</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CadastralDataEdit</Name>
			<Label>@SYP4881054</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>landCadastralNumEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>roomCadastralNumEdit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxBaseEdit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Movables</Name>
			<Label>@SYP4881059</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssessedTaxNonTaxable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportTaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetTransportTaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumReference</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Label>@GLS108954</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<GroupPrompt>@SYS13864</GroupPrompt>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNumMain</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetIdMain</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AcquisitionDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetAcquisitionDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AcquisitionPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetAcquisitionPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ActDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS116446</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetActNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssessedTaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetAssessedTaxType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetBelonged</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetBelonged</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetMainGroupId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssetReplaceCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetReplaceCost</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssetType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssetUse</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetUseValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Barcode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetBarcode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BuildingStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>StartDate</ExtendedDataType>
			<Label>@GLS117002</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>DenominatorShare</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetOwnedShare</ExtendedDataType>
			<Label>@RussianFixedAssets:OwnedShareDenominator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Documents</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FilePath</ExtendedDataType>
			<Label>@GLS116231</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>GuaranteeDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetTransDate</ExtendedDataType>
			<Label>@SYS67392</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InsPolicyNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetInsPolicyNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InsuranceDate1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetInsuranceDate1</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InsuranceDate2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetInsuranceDate2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InsuredValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetInsuredValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvKartDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS116446</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvKartNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetInvKartNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LandCadastralNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LandCadastralNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LandTaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetLandTaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LandType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LandType_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Make</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@GLS116234</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Model</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS9923</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumeratorShare</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetOwnedShare</ExtendedDataType>
			<Label>@RussianFixedAssets:OwnedShareNumerator</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PassportNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RassetPassportNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchInternalInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchInternalInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>QuotaTypesRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetInventIssueQuotaTypesRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RegisterRemovalDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RegisterRemovalDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ReleaseYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Yr</ExtendedDataType>
			<Label>@GLS116942</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SerialNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetSerialNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxAllowanceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RAssetTaxAllowanceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxBase</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBase</ExtendedDataType>
			<Label>@GLS106040</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxBaseUnitId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetAssessedTaxCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VatRefundingStartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetVatRefundingStartDate</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VehicleEcoClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetVehicleEcoClass</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehicleModel_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>VehiclePlateDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehiclePlateDate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehiclePlateNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehiclePlateNum_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VehicleType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VehicleType_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendInvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WrkCtrId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoomCadastralNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoomCadastralNum_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportTaxFactorGroupId</Name>
			<ExtendedDataType>RAssetTransportTaxFactorGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssessedTaxNonTaxable</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>@RussianFixedAssets:TheFixedAssetBelongsToFixedAssetGroupWhichIsNontaxable</HelpText>
			<Label>@SYP4881059</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxDeductionRecId</Name>
			<ExtendedDataType>RAssetTaxAllowanceRecId</ExtendedDataType>
			<Label>@SYS32341</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TransportTaxDeductionValue</Name>
			<ExtendedDataType>RAssetTaxPrivilege</ExtendedDataType>
			<Label>@RussianFixedAssets:TaxDeductionAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AssessedTaxBaseCalc</Name>
			<EnumType>RAssetAssessedTaxBaseCalc</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OKOF</Name>
			<ExtendedDataType>OKOF_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventGtdId_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventGTDId_RU</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@RAsset:TraceableNumber</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RAssetInventIssueQuotaTypesIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>QuotaTypesRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RAssetTaxAllowanceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxAllowanceRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GroupAssetIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RAssetNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MainAssetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNumMain</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchInternalInvoiceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>LogisticsBasic</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchInternalInvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LogisticsPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LogisticsPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GTDIdIdx_RU</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventGtdId_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustInvoiceId</Name>
					<SourceEDT>CustInvoiceId</SourceEDT>
					<Field>CustInvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LandTaxCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LandTaxCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LandTaxCode</Name>
					<SourceEDT>RAssetLandTaxCode</SourceEDT>
					<Field>LandTaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_W_Extern</Name>
					<SourceEDT>RAssetLandTaxCode</SourceEDT>
					<RelatedField>TaxType_W</RelatedField>
					<ValueStr>TaxType_W::LandTax</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LandTypeTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LandTypeTable_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LandTypeTable_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LandType</Name>
					<SourceEDT>LandType_W</SourceEDT>
					<Field>LandType</Field>
					<RelatedField>LandType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsPostalAddress_FK</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsPostalAddress</Name>
					<Field>LogisticsPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetInventIssueQuotaTypes</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetInventIssueQuotaTypes</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetInventIssueQuotaTypes</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>QuotaTypesRecId</Name>
					<Field>QuotaTypesRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetMain</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetMain</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNumMain</Name>
					<SourceEDT>RAssetIdMain</SourceEDT>
					<Field>AccountNumMain</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetMainGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetMainGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetMainGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetGroup</Name>
					<SourceEDT>RAssetMainGroupId</SourceEDT>
					<Field>AssetGroup</Field>
					<RelatedField>AssetMainGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNumReference</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AccountNumReference</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTaxAllowance</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTaxAllowance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTaxAllowance</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_Extern</Name>
					<RelatedField>TaxType</RelatedField>
					<ValueStr>RAssetTaxType::Empty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_Extern_1</Name>
					<RelatedField>TaxType</RelatedField>
					<ValueStr>RAssetTaxType::AssessedTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxAllowanceType_Extern</Name>
					<RelatedField>TaxAllowanceType</RelatedField>
					<ValueStr>RAssetTaxAllowanceType::TaxExemption</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxAllowanceType</Name>
					<RelatedField>TaxAllowanceType</RelatedField>
					<ValueStr>RAssetTaxAllowanceType::TaxBaseReduction</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxAllowanceRecId</Name>
					<Field>TaxAllowanceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<SourceEDT>SalesId</SourceEDT>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<SourceEDT>RAssetAssessedTaxCode</SourceEDT>
					<Field>TaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_W_Extern</Name>
					<SourceEDT>RAssetAssessedTaxCode</SourceEDT>
					<RelatedField>TaxType_W</RelatedField>
					<ValueStr>TaxType_W::AssessedTax</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportTaxCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TransportTaxCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportTaxCode</Name>
					<SourceEDT>RAssetTransportTaxCode</SourceEDT>
					<Field>TransportTaxCode</Field>
					<RelatedField>TaxCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_W_Extern</Name>
					<SourceEDT>RAssetTransportTaxCode</SourceEDT>
					<RelatedField>TaxType_W</RelatedField>
					<ValueStr>TaxType_W::TransportTax</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBaseUnitId</Name>
					<Field>TaxBaseUnitId</Field>
					<RelatedField>Symbol</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VehicleModelTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VehicleModelTable_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VehicleModelTable_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VehicleModel</Name>
					<SourceEDT>VehicleModel_W</SourceEDT>
					<Field>VehicleModel</Field>
					<RelatedField>VehicleModel</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ModelIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VehicleTypeTable_W</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VehicleTypeTable_W</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VehicleTypeTable_W</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VehicleType</Name>
					<SourceEDT>VehicleType_W</SourceEDT>
					<Field>VehicleType</Field>
					<RelatedField>VehicleType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchInternalInvoiceId</Name>
					<Field>PurchInternalInvoiceId</Field>
					<RelatedField>InternalInvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceId</Name>
					<Field>VendInvoiceId</Field>
					<RelatedField>InvoiceId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>WrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrId</Name>
					<SourceEDT>WrkCtrIdBase</SourceEDT>
					<Field>WrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>WrkCtrIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTaxAllowanceDecreaseBase</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTaxAllowance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AllowanceDecreaseBase</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>AssessedTaxType</Name>
					<Field>AssessedTaxType</Field>
					<ValueStr>RAssetAssessedTaxType::Section3</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType</Name>
					<RelatedField>TaxType</RelatedField>
					<ValueStr>RAssetTaxType::Empty</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType_1</Name>
					<RelatedField>TaxType</RelatedField>
					<ValueStr>RAssetTaxType::AssessedTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxAllowanceType</Name>
					<RelatedField>TaxAllowanceType</RelatedField>
					<ValueStr>RAssetTaxAllowanceType::TaxExemption</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxAllowanceType_1</Name>
					<RelatedField>TaxAllowanceType</RelatedField>
					<ValueStr>RAssetTaxAllowanceType::TaxBaseReduction</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxAllowanceRecId</Name>
					<Field>TaxAllowanceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTransportTaxFactorGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTransportTaxFactorGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportTaxFactorGroupId</Name>
					<SourceEDT>RAssetTransportTaxFactorGroupId</SourceEDT>
					<Field>TransportTaxFactorGroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTaxDeduction</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTaxAllowance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTaxDeduction</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxType</Name>
					<RelatedField>TaxType</RelatedField>
					<ValueStr>RAssetTaxType::TransportTax</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>TaxAllowanceType</Name>
					<RelatedField>TaxAllowanceType</RelatedField>
					<ValueStr>RAssetTaxAllowanceType::TaxAmountDeduction</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxDeductionRecId</Name>
					<Field>TaxDeductionRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>