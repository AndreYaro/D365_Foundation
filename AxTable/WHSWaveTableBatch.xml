<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTableBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWaveTableBatch extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBatchRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates the Wave - Batch relationship.
    /// </summary>
    /// <param name="_waveList">
    /// A List of record ID's of <c>WHSWaveTable</c> records.
    /// </param>
    /// <param name="_batchRecId">
    /// The record id of the <c>Batch</c> record.
    /// </param>
    public static void createBatchRelationship(List _waveList, RefRecId _batchRecId)
    {
        WHSWaveTableBatch   waveTableBatch;
        ListEnumerator      le;

        ttsbegin;

        le = _waveList.getEnumerator();

        while (le.moveNext())
        {
            RefRecId recId = le.current();

            using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskBatchRun(recId, _batchRecId))
            {
                waveTableBatch.whsWaveTable = recId;
                waveTableBatch.Batch        = _batchRecId;
                waveTableBatch.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>WHSWaveTableBatch</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>WHSWaveTableBatch</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean exist(RefRecId _recId)
    {
        return _recId &&
               (select firstonly RecId from whsWaveTableBatch
                where whsWaveTableBatch.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWaveBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>WHSWaveTableBatch</c> table exists.
    /// </summary>
    /// <param name="_waveRecId">
    /// The ID of the <c>WHSWaveTable</c> record to find.
    /// </param>
    /// <param name="_batchRecId">
    /// The ID of the <c>Batch</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    static public boolean existWaveBatch(RefRecId _waveRecId, RefRecId _batchRecId)
    {
        return _waveRecId && _batchRecId &&
               (select firstonly RecId from whsWaveTableBatch
                where whsWaveTableBatch.whsWaveTable    == _waveRecId
                   && whsWaveTableBatch.Batch           == _batchRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>WHSWaveTableBatch</c> table exists.
    /// </summary>
    /// <param name="_waveRecId">
    /// The ID of the <c>WHSWaveTable</c> record to find.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal static boolean existWave(RefRecId _waveRecId)
    {
        return _waveRecId &&
               (select firstonly RecId from whsWaveTableBatch
                where whsWaveTableBatch.whsWaveTable    == _waveRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSWaveTableBatch</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>WHSWaveTableBatch</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSWaveTableBatch</c> table; otherwise, an empty record.
    /// </returns>
    static WHSWaveTableBatch find(RefRecId _recId, boolean _forUpdate = false)
    {
        WHSWaveTableBatch   waveTableBatch;

        if (_recId != 0)
        {
            waveTableBatch.selectForUpdate(_forUpdate);

            select firstonly waveTableBatch
                where waveTableBatch.RecId == _recId;
        }

        return waveTableBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWaveBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>WHSWaveTableBatch</c> table.
    /// </summary>
    /// <param name="_waveRecId">
    /// The ID of the <c>WHSWaveTable</c> record to find.
    /// </param>
    /// <param name="_batchRecId">
    /// The ID of the <c>Batch</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>WHSWaveTableBatch</c> table; otherwise, an empty record.
    /// </returns>
    static WHSWaveTableBatch findWaveBatch(RefRecId _waveRecId, RefRecId _batchRecId, boolean _forUpdate = false)
    {
        WHSWaveTableBatch   waveTableBatch;

        if (_waveRecId != 0 && _batchRecId != 0)
        {
            waveTableBatch.selectForUpdate(_forUpdate);

            select firstonly waveTableBatch
                where waveTableBatch.whsWaveTable   == _waveRecId
                   && waveTableBatch.Batch          == _batchRecId;
        }

        return waveTableBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSingleWaveBatchRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates the Wave - Batch relationship for a single wave and batch header.
    /// </summary>
    /// <param name="_waveRecId">
    /// The record id of <c>WHSWaveTable</c> record.
    /// </param>
    /// <param name="_batchHeaderRecId">
    /// The record id of the <c>Batch</c> record.
    /// </param>
    public static void createSingleWaveBatchRelationship(RefRecId _waveRecId, RefRecId _batchHeaderRecId)
    {
        WHSWaveTableBatch   waveTableBatch;

        try
        {
            using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskBatchHeaderRun(_waveRecId, _batchHeaderRecId))
            {
                ttsBegin;

                waveTableBatch.Batch = _batchHeaderRecid;
                waveTableBatch.WHSWaveTable = _waveRecId;

                if (!waveTableBatch.validateWrite())
                {
                    throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSWaveTableBatch)));
                }
                else
                {
                    waveTableBatch.insert();
                }

                ttsCommit;
            }
        }
        catch(Exception::DuplicateKeyException)
        {
            // If the record already exists we do not need to insert a new record.
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        // BatchJob table is cross company and on the relation the delete action is set cascade
        // triggering this delete in all companies.
        if (this.DataAreaId == curExt())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX5437</DeveloperDocumentation>
	<Label>@WAX5436</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WHSWaveTable</TitleField1>
	<TitleField2>Batch</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WHSWaveTableBatchIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>Inventory</Modules>
	<ReplacementKey>WHSWaveTableBatchIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Batch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSWaveTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Batch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSWaveTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relationship</Name>
			<Label>@SYS122914</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Batch</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WHSWaveTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Batch</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WHSWaveTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WHSWaveTableBatchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ConfigurationKey>WHSandTMS</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Batch</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WHSWaveTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WHSWaveTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WHSWaveTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WHSBatchCreatedDateTimeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CreatedDateTime</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Batch</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSWaveTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSWaveTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WHSWaveTable</Name>
					<Field>WHSWaveTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BatchJob</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BatchJob</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Batch</Name>
					<Field>Batch</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>