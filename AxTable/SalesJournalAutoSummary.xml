<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesJournalAutoSummary</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesJournalAutoSummary extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custDefaultAutoSummary</Name>
				<Source><![CDATA[
    SalesAutoSummary custDefaultAutoSummary(SalesTable _salesTable)
    {
        SalesSummaryFields salesSummaryFields = SalesSummaryFields::construct(this.DocumentStatus);

        return salesSummaryFields.autoSummary(_salesTable, ModuleCustSales::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable(CustTable _custTable)
    {
        this.ModuleType     = ModuleCustSales::Cust;
        this.CustAccount    = _custTable.AccountNum;
        this.SalesId        = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void initFromSalesTable(SalesTable _salesTable)
    {
        this.ModuleType     = ModuleCustSales::Sales;
        this.CustAccount    = '';
        this.SalesId        = _salesTable.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoSummary</Name>
				<Source><![CDATA[
    static SalesAutoSummary autoSummary(DocumentStatus   _documentStatus,
                                        ModuleCustSales  _moduleType,
                                        CustAccount      _custAccount,
                                        SalesId          _salesId)
    {
        return SalesJournalAutoSummary::find(_documentStatus, _moduleType, _custAccount, _salesId).AutoSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoSummaryJournals</Name>
				<Source><![CDATA[
    static container autoSummaryJournals()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
            return [DocumentStatus::Quotation,
                    DocumentStatus::Confirmation,
                    DocumentStatus::PickingList,
                    DocumentStatus::PackingSlip,
                    DocumentStatus::Invoice,
                    DocumentStatus::Invoice4Paym_RU];
        // </GEERU>

        return [DocumentStatus::Quotation,
                DocumentStatus::Confirmation,
                DocumentStatus::PickingList,
                DocumentStatus::PackingSlip,
                DocumentStatus::Invoice];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllFromCustTable</Name>
				<Source><![CDATA[
    static Counter checkAllFromCustTable(CustTable  _custTable)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        Counter  counter = 0;

        if (! SalesJournalAutoSummary::exist(DocumentStatus::Quotation, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            warning(strFmt("@SYS70756", DocumentStatus::Quotation));
            counter++;
        }

        if (! SalesJournalAutoSummary::exist(DocumentStatus::PickingList, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            warning(strFmt("@SYS70756", DocumentStatus::PickingList));
            counter++;
        }

        if (! SalesJournalAutoSummary::exist(DocumentStatus::PackingSlip, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            warning(strFmt("@SYS70756", DocumentStatus::PackingSlip));
            counter++;
        }

        if (! SalesJournalAutoSummary::exist(DocumentStatus::Invoice, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            warning(strFmt("@SYS70756", DocumentStatus::Invoice));
            counter++;
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
            ! SalesJournalAutoSummary::exist(DocumentStatus::Invoice4Paym_RU, ModuleCustSales::Cust, _custTable.AccountNum, ""))
        {
            warning(strFmt("@SYS70756", DocumentStatus::Invoice4Paym_RU));
            counter ++;
        }
        // </GEERU>

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromCustTable</Name>
				<Source><![CDATA[
    static void createFromCustTable(DocumentStatus _documentStatus, CustTable _custTable)
    {
        SalesJournalAutoSummary salesJournalAutoSummary;

        ttsbegin;

        salesJournalAutoSummary.clear();
        salesJournalAutoSummary.initValue();
        salesJournalAutoSummary.DocumentStatus = _documentStatus;
        salesJournalAutoSummary.initFromCustTable(_custTable);
        salesJournalAutoSummary.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(DocumentStatus   _documentStatus,
                         ModuleCustSales  _moduleType,
                         CustAccount      _custAccount,
                         SalesId          _salesId)
    {
        SalesJournalAutoSummary salesJournalAutoSummary;
        CustAccount             custAccount;
        SalesId                 salesId;

        custAccount = _custAccount;
        salesId     = _salesId;

        if (_moduleType == ModuleCustSales::Cust)
            salesId     = '';
        else
            custAccount = '';

        return (select firstonly salesJournalAutoSummary
                    where salesJournalAutoSummary.DocumentStatus    == _documentStatus  &&
                          salesJournalAutoSummary.ModuleType        == _moduleType      &&
                          salesJournalAutoSummary.CustAccount       == custAccount      &&
                          salesJournalAutoSummary.SalesId           == salesId).RecId !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static SalesJournalAutoSummary find(DocumentStatus   _documentStatus,
                                        ModuleCustSales  _moduleType,
                                        CustAccount      _custAccount,
                                        SalesId          _salesId,
                                        boolean          _update = false)
    {
        SalesJournalAutoSummary salesJournalAutoSummary;
        CustAccount             custAccount;
        SalesId                 salesId;

        custAccount = _custAccount;
        salesId     = _salesId;

        if (_moduleType == ModuleCustSales::Cust)
            salesId     = '';
        else
            custAccount = '';

        salesJournalAutoSummary.selectForUpdate (_update);

        select firstonly salesJournalAutoSummary
            where salesJournalAutoSummary.DocumentStatus    == _documentStatus  &&
                  salesJournalAutoSummary.ModuleType        == _moduleType      &&
                  salesJournalAutoSummary.CustAccount       == custAccount      &&
                  salesJournalAutoSummary.SalesId           == salesId;

        return salesJournalAutoSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllFromCustTable</Name>
				<Source><![CDATA[
    static public void initAllFromCustTable(
        CustTable _custTable,
        boolean   _skipCheckForExistingDocument = false)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>
        ttsbegin;

        if (_skipCheckForExistingDocument || !SalesJournalAutoSummary::exist(DocumentStatus::Quotation, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            SalesJournalAutoSummary::createFromCustTable(DocumentStatus::Quotation, _custTable);
        }

        if (_skipCheckForExistingDocument || !SalesJournalAutoSummary::exist(DocumentStatus::Confirmation, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            SalesJournalAutoSummary::createFromCustTable(DocumentStatus::Confirmation, _custTable);
        }

        if (_skipCheckForExistingDocument || !SalesJournalAutoSummary::exist(DocumentStatus::PickingList, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            SalesJournalAutoSummary::createFromCustTable(DocumentStatus::PickingList, _custTable);
        }

        if (_skipCheckForExistingDocument || !SalesJournalAutoSummary::exist(DocumentStatus::PackingSlip, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            SalesJournalAutoSummary::createFromCustTable(DocumentStatus::PackingSlip, _custTable);
        }

        if (_skipCheckForExistingDocument || !SalesJournalAutoSummary::exist(DocumentStatus::Invoice, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            SalesJournalAutoSummary::createFromCustTable(DocumentStatus::Invoice, _custTable);
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
            !SalesJournalAutoSummary::exist(DocumentStatus::Invoice4Paym_RU, ModuleCustSales::Cust, _custTable.AccountNum, ''))
        {
            SalesJournalAutoSummary::createFromCustTable(DocumentStatus::Invoice4Paym_RU, _custTable);
        }
        // </GEERU>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllFromSalesTable</Name>
				<Source><![CDATA[
    static void initAllFromSalesTable(SalesTable _salesTable)
    {
        SalesJournalAutoSummary salesJournalAutoSummary;
        boolean                 writeAll = false;
        container               autoSummaryJournal = SalesJournalAutoSummary::autoSummaryJournals();
        int                     journal;
        int                     journalLen;
        DocumentStatus          documentStatus;
        journalLen = conLen(autoSummaryJournal);

        for (journal = 1; journal <= journalLen && !writeAll; journal ++)
        {
            documentStatus = conPeek(autoSummaryJournal, journal);

            salesJournalAutoSummary = SalesJournalAutoSummary::find(documentStatus, ModuleCustSales::Sales, '', _salesTable.SalesId);
            if (!salesJournalAutoSummary || salesJournalAutoSummary.AutoSummary != salesJournalAutoSummary.custDefaultAutoSummary(_salesTable))
            {
                writeAll = true;
            }
        }

        if (writeAll)
        {
            SalesJournalAutoSummary::writeAllFromSalesTable(_salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyInitAllFromCustTable</Name>
				<Source><![CDATA[
    static void interCompanyInitAllFromCustTable(SalesTable _salesTable)
    {
        SalesJournalAutoSummary salesJournalAutoSummary;
        boolean                 writeAll = false;
        container               autoSummaryJournal = SalesJournalAutoSummary::autoSummaryJournals();
        int                     journal;
        int                     journalLen;
        DocumentStatus          documentStatus;
        journalLen = conLen(autoSummaryJournal);

        for (journal = 1; journal <= journalLen && !writeAll; journal ++)
        {
            documentStatus = conPeek(autoSummaryJournal, journal);

            salesJournalAutoSummary = SalesJournalAutoSummary::find(documentStatus, ModuleCustSales::Sales, '', _salesTable.SalesId);
            if (!salesJournalAutoSummary || salesJournalAutoSummary.AutoSummary != salesJournalAutoSummary.custDefaultAutoSummary(_salesTable))
            {
                writeAll = true;
            }
        }

        if (writeAll)
        {
            SalesJournalAutoSummary::interCompanyWriteAllFromCustTable(_salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyWriteAllFromCustTable</Name>
				<Source><![CDATA[
    static void interCompanyWriteAllFromCustTable(SalesTable _salesTable)
    {
        container   autoSummaryJournal = SalesJournalAutoSummary::autoSummaryJournals();
        int         journal;
        int         journalLen;
        journalLen = conLen(autoSummaryJournal);
        ttsbegin;
        for (journal = 1; journal <= journalLen; journal ++)
        {
            SalesJournalAutoSummary::interCompanyWriteFromCustTable(conPeek(autoSummaryJournal, journal), _salesTable);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyWriteFromCustTable</Name>
				<Source><![CDATA[
    static void interCompanyWriteFromCustTable(DocumentStatus _documentStatus,
                                                      SalesTable     _salesTable)
    {
        SalesJournalAutoSummary salesJournalAutoSummary;

        salesJournalAutoSummary = SalesJournalAutoSummary::find(_documentStatus, ModuleCustSales::Sales, '', _salesTable.SalesId);

        if (!salesJournalAutoSummary || salesJournalAutoSummary.AutoSummary != salesJournalAutoSummary.custDefaultAutoSummary(_salesTable))
        {
            ttsbegin;

            salesJournalAutoSummary = SalesJournalAutoSummary::find(_documentStatus, ModuleCustSales::Sales, '', _salesTable.SalesId, true);

            if (!salesJournalAutoSummary)
            {
                salesJournalAutoSummary.clear();
                salesJournalAutoSummary.initValue();
                salesJournalAutoSummary.DocumentStatus = _documentStatus;
                salesJournalAutoSummary.initFromSalesTable(_salesTable);
            }

            changecompany(_salesTable.InterCompanyCompanyId)
            {
                salesJournalAutoSummary.AutoSummary = SalesJournalAutoSummary::find(_documentStatus,ModuleCustSales::Cust,_salesTable.InterCompanyOriginalCustAccount,"").AutoSummary;
            }
            salesJournalAutoSummary.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAllFromSalesTable</Name>
				<Source><![CDATA[
    static void writeAllFromSalesTable(SalesTable _salesTable)
    {
        container   autoSummaryJournal = SalesJournalAutoSummary::autoSummaryJournals();
        int         journal;
        int         journalLen;
        journalLen = conLen(autoSummaryJournal);

        ttsbegin;

        for (journal = 1; journal <= journalLen; journal ++)
        {
            SalesJournalAutoSummary::writeFromSalesTable(conPeek(autoSummaryJournal, journal), _salesTable);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFromSalesTable</Name>
				<Source><![CDATA[
    static void writeFromSalesTable(DocumentStatus _documentStatus, SalesTable _salesTable)
    {
        SalesJournalAutoSummary salesJournalAutoSummary;

        salesJournalAutoSummary = SalesJournalAutoSummary::find(_documentStatus, ModuleCustSales::Sales, '', _salesTable.SalesId);

        if (!salesJournalAutoSummary || salesJournalAutoSummary.AutoSummary != salesJournalAutoSummary.custDefaultAutoSummary(_salesTable))
        {
            ttsbegin;

            salesJournalAutoSummary = SalesJournalAutoSummary::find(_documentStatus, ModuleCustSales::Sales, '', _salesTable.SalesId, true);

            if (!salesJournalAutoSummary)
            {
                salesJournalAutoSummary.clear();
                salesJournalAutoSummary.initValue();
                salesJournalAutoSummary.DocumentStatus = _documentStatus;
                salesJournalAutoSummary.initFromSalesTable(_salesTable);
            }

            salesJournalAutoSummary.AutoSummary = salesJournalAutoSummary.custDefaultAutoSummary(_salesTable);
            salesJournalAutoSummary.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124513</DeveloperDocumentation>
	<Label>@SYS57811</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>DocumentStatus</TitleField1>
	<TitleField2>ModuleType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>SalesJournalAutoSummaryIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>SalesJournalAutoSummaryIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoSummary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DocumentStatus</Name>
			<Label>@SYS22101</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoSummary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoSummary</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesAutoSummary</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS8008</Label>
			<EnumType>DocumentStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ModuleCustSales</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesJournalAutoSummaryIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SalesJournalAutoSummarySalesIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocumentStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleCustSales::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleCustSales::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesId</Name>
					<Field>SalesId</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>