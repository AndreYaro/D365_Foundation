<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxGroupCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollTaxGroupCode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record exists in <c>PayrollTaxGroupCode</c> table given a tax group ID.
    /// </summary>
    /// <param name="_recId">
    /// The value of the tax group ID to check.
    /// </param>
    /// <returns>
    /// true if a record exists given the tax group ID; otherwise, false.
    /// </returns>
    public boolean existTaxGroup(PayrollTaxGroupRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollTaxGroupCode
                    where payrollTaxGroupCode.TaxGroup == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in the <c>PayrollTaxGroupCode</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollTaxGroupCodeRecId _recId)
    {
        boolean ret = true;

        if (!PayrollTaxGroupCode::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollTaxGroupCode::txtNotExist(), tableStr(PayrollTaxGroupCode)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a record ID exists in the <c>PayrollTaxGroupCode</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to check.
    /// </param>
    /// <returns>
    /// True if the record ID exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollTaxGroupCodeRecId _recId)
    {
        return _recId && (select firstOnly RecId from payrollTaxGroupCode
            where PayrollTaxGroupCode.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record in the <c>PayrollTaxGroupCode</c> table based on a record ID value.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollTaxGroupCode</c> table.
    /// </returns>
    public static PayrollTaxGroupCode find(
    PayrollTaxGroupCodeRecId    _recId,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollTaxGroupCode     payrollTaxGroupCode;

        payrollTaxGroupCode.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollTaxGroupCode.concurrencyModel(_concurrencyModel);
        }

        select firstOnly payrollTaxGroupCode
                where payrollTaxGroupCode.RecId == _recId;

        return payrollTaxGroupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxGroupAndCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a record in <c>PayrollTaxGroupCode</c> table based on supplied value of <c>TaxGroup</c> and <c>TaxCode</c> record ID values.
    /// </summary>
    /// <param name="_taxGroupRecId">
    /// The value of the <c>PayrollTaxGroup</c> field to find.
    /// </param>
    /// <param name="_taxCodeRecId">
    /// The value of the <c>PayrollTaxCode</c> field to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates whether concurrency setting to be used on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>PayrollTaxGroupCode</c> table.
    /// </returns>
    public static PayrollTaxGroupCode findByTaxGroupAndCode(
        PayrollTaxGroupRecId    _taxGroupRecId,
        PayrollTaxCodeRecId     _taxCodeRecId,
        boolean                 _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollTaxGroupCode     payrollTaxGroupCode;

        if ((_taxGroupRecId) && (_taxCodeRecId))
        {
            payrollTaxGroupCode.selectForUpdate(_forUpdate);

            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                payrollTaxGroupCode.concurrencyModel(_concurrencyModel);
            }

            select firstOnly payrollTaxGroupCode
                where payrollTaxGroupCode.TaxGroup == _taxGroupRecId &&
                        payrollTaxGroupCode.TaxCode == _taxCodeRecId;
        }

        return payrollTaxGroupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return  "@SYS321009";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PayrollAdministration</ConfigurationKey>
	<DeveloperDocumentation>@SYS4008488</DeveloperDocumentation>
	<Label>@SYS4009216</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>TaxGroup</TitleField1>
	<TitleField2>TaxCode</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Payroll</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollTaxCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxGroup</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>PayrollTaxGroupRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PayrollTaxGroupCode_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollTaxCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollTaxCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollTaxCode</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxCode</Name>
					<Field>TaxCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollTaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PayrollTaxGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollTaxGroup</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<Field>TaxGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>