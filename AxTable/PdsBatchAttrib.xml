<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchAttrib</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsBatchAttrib extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentLocaleNumberFormat</Name>
				<Source><![CDATA[
    private static System.Globalization.NumberFormatInfo getCurrentLocaleNumberFormat()
    {
        new InteropPermission(InteropKind::ClrInterop).assert();
        return System.Globalization.CultureInfo::get_CurrentCulture().get_NumberFormat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustValueToAttribType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the specified value according to the related attribute type.
    /// </summary>
    /// <param name="_value">
    /// A real value that represents user input before an adjustment.
    /// </param>
    /// <param name="_forceAdjust">
    /// A Boolean value that determines if the adjustment must be forced.
    /// </param>
    /// <returns>
    /// A real value that is adjusted according to the related attribute type.
    /// </returns>
    public real adjustValueToAttribType(
        real    _value,
        boolean _forceAdjust = false)
    {
        real    adjustedValue = _value;

        if (   this.RecId
            || _forceAdjust)
        {
            switch (this.PdsBatchAttribType)
            {
                case PdsBatchAttribType::Integer:
                    adjustedValue = real2int(_value);
                    break;
            }
        }

        return adjustedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the type of the batch attribute can be changed.
    /// </summary>
    /// <returns>
    /// true if the attribute can be changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The type of a batch attribute cannot be changed if it is already included in
    /// a batch attribute group or assigned to an item.
    /// </remarks>
    public boolean canChangeType()
    {
        boolean                     ret = true;
        PdsBatchAttribByAttribGroup attribByAttribGroup;
        PdsBatchAttribByItem        attribByItem;

        if (this.RecId)
        {
            select firstonly RecId
                from attribByAttribGroup
                where attribByAttribGroup.PdsBatchAttribAttribId == this.PdsBatchAttribId;
            ret = attribByAttribGroup.RecId == 0;
            if (ret)
            {
                select firstonly RecId
                    from attribByItem
                    where  attribByItem.PdsBatchAttribCode      == TableGroupAll::Table
                        && attribByItem.PdsBatchAttribRelation  == this.PdsBatchAttribId;
                ret = attribByItem.RecId == 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAttribCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether batch attribute value fits the batch attribute range and multiple criteria.
    /// </summary>
    /// <param name="_batchAttribValue">Batch attribute value</param>
    /// <param name="_itemId">Item Id</param>
    /// <returns>Whether batch attribute value fits the attribute range criteria.</returns>
    /// <remarks>
    /// Original code (ante April 24th) did not take into account possible range overrides from Attribute by Item or attributes by Group
    /// and such. The original code looked only at the master Batch Attribute setup.
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public boolean checkAttribCriteria(PdsBatchAttribValue _batchAttribValue, ItemId
    /// _itemId)
    /// </syntax>
    /// </remarks>
    public boolean checkAttribCriteria(
        PdsBatchAttribValue _batchAttribValue,
        ItemId              _itemId)
    {
        boolean ret = true;

        PdsBatchAttribMin               batchAttribMin;
        PdsBatchAttribMax               batchAttribMax;
        PdsBatchAttribToleranceAction   batchAttribToleranceAction;
        PdsBatchAttribMultiple          batchAttribMultiple;

        switch (this.PdsBatchAttribType)
        {
            case PdsBatchAttribType::Integer,
                PdsBatchAttribType::Realnumber :

                [batchAttribMin, batchAttribMax,
                batchAttribToleranceAction, batchAttribMultiple] =
                    this.getAttribRange(_itemId);

                ret = ret && PdsBatchAttrib::isValidAttribRange(
                                                batchAttribMin,
                                                batchAttribMax,
                                                _batchAttribValue);

                ret = ret && PdsBatchAttrib::isValidAttribMultiple(
                                                batchAttribMin,
                                                batchAttribMultiple,
                                                _batchAttribValue);

                break;
        }

        ret = ret || batchAttribToleranceAction
                        == PdsBatchAttribToleranceAction::Warning;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAttribRangeChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the new range against the range in existing references.
    /// </summary>
    /// <returns>
    /// true if the range has not been changed or the change is acceptable; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The change in range is acceptable at this time. Only a warning will be issued
    /// if the range is narrowed when references exist.
    /// </remarks>
    public boolean checkAttribRangeChange()
    {
        if ((this.PdsBatchAttribType == PdsBatchAttribType::Integer
                || this.PdsBatchAttribType == PdsBatchAttribType::Realnumber)
            && this.hasReferences()
            && (this.orig().PdsBatchAttribMin < this.PdsBatchAttribMin
                || this.orig().PdsBatchAttribMax > this.PdsBatchAttribMax))
        {
            warning("@PDS1911");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValueAgainstAttribRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified value is allowed.
    /// </summary>
    /// <param name="_value">
    /// A real value that represents a overriden boundary value.
    /// </param>
    /// <param name="_forceCheck">
    /// A boolean value that determines if the check should be forced.
    /// </param>
    /// <returns>
    /// true if the specified value is allowed; otherwise, false.
    /// </returns>
    public boolean checkValueAgainstAttribRange(
        real        _value,
        boolean     _forceCheck = false)
    {
        boolean ret = true;

        if (   this.RecId
            || _forceCheck)
        {
            if (   _value < this.PdsBatchAttribMin
                || _value > this.PdsBatchAttribMax)
            {
                ret = checkFailed(strfmt("@SYS87701", this.PdsBatchAttribMin, this.PdsBatchAttribMax));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttribRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the attribute value minimum, maximum, tolerance action and multiple associated with passed parameters.
    /// </summary>
    /// <param name="_itemId">Item Id to get the values for.</param>
    /// <returns>[PdsBatchAttribMin, PdsBatchAttribMax, PdsBatchAttribToleranceAction, PdsBatchAttribMultiple] values
    /// corresponding to PdsBatchAttribId and ItemId passed.</returns>
    /// <remarks>
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public Container getAttribRange(ItemId _itemId)
    /// </syntax>
    /// </remarks>
    public container getAttribRange(
        ItemId _itemId = '')
    {
        PdsBatchAttribByAttribGroup   pdsBatchAttribByAttribGroup;
        PdsBatchAttribByItem          pdsBatchAttribByItem;

        if (_itemId)
        {
            select firstonly PdsBatchAttribMax, PdsBatchAttribMin,
                PdsBatchAttribToleranceAction, PdsBatchAttribMultiple
                from pdsBatchAttribByItem
                where  pdsBatchAttribByItem.PdsBatchAttribItemId == _itemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode   == TableGroupAll::Table
                    && pdsBatchAttribByItem.PdsBatchAttribRelation
                        == this.PdsBatchAttribId;

            if (pdsBatchAttribByItem)
            {
                return [pdsBatchAttribByItem.PdsBatchAttribMin,
                        pdsBatchAttribByItem.PdsBatchAttribMax,
                        pdsBatchAttribByItem.PdsBatchAttribToleranceAction,
                        pdsBatchAttribByItem.PdsBatchAttribMultiple];
            }

            select firstonly RecId
                from pdsBatchAttribByItem
                join PdsBatchAttribMax, PdsBatchAttribMin,
                PdsBatchAttribToleranceAction, PdsBatchAttribMultiple
                from pdsBatchAttribByAttribGroup
                where pdsBatchAttribByAttribGroup.PdsBatchAttribGroupId
                        == pdsBatchAttribByItem.PdsBatchAttribRelation
                    && pdsBatchAttribByItem.PdsBatchAttribItemId == _itemId
                    && pdsBatchAttribByItem.PdsBatchAttribCode
                        == TableGroupAll::GroupId
                    && pdsBatchAttribByAttribGroup.PdsBatchAttribGroupId
                        == pdsBatchAttribByItem.PdsBatchAttribRelation
                    && pdsBatchAttribByAttribGroup.PdsBatchAttribAttribId
                        == this.PdsBatchAttribId;

            if (pdsBatchAttribByAttribGroup)
            {
                return [pdsBatchAttribByAttribGroup.PdsBatchAttribMin,
                        pdsBatchAttribByAttribGroup.PdsBatchAttribMax,
                        pdsBatchAttribByAttribGroup.PdsBatchAttribToleranceAction,
                        pdsBatchAttribByAttribGroup.PdsBatchAttribMultiple];
            }
        }

        return [this.PdsBatchAttribMin,
                this.PdsBatchAttribMax,
                this.PdsBatchAttribToleranceAction,
                this.PdsBatchAttribMultiple];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBatchAttributeValueFromTestResultsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating the batch attribute value based on the quality order line test result.
    /// </summary>
    /// <param name = "_batchAttribute">Batch attribute record related to the quality order line.</param>
    /// <param name = "_testType">Type of quality order test.</param>
    /// <param name = "_inventQualityOrderLineResults">The quality order test result record.</param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> to use for returning the calculated batch attribute value.</param>
    delegate void calculateBatchAttributeValueFromTestResultsDelegate(PdsBatchAttrib _batchAttribute, InventTestType _testType, InventQualityOrderLineResults _inventQualityOrderLineResults, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBatchAttributeValueFromTestResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the batch attribute value for the current attribute based on the quality order line test result.
    /// </summary>
    /// <param name = "_qualityOrderLineResults">The quality order line test result value.</param>
    /// <returns>Batch attribute value.</returns>
    public PdsAttribValue calculateBatchAttributeValueFromTestResults(InventQualityOrderLineResults _qualityOrderLineResults)
    {
        InventTestType testType = InventTestTable::find(_qualityOrderLineResults.TestId).TestType;

        switch (testType)
        {
            case InventTestType::Fraction:
            case InventTestType::Integer:
                return this.locale2Storage(num2str0(_qualityOrderLineResults.TestResultQuantity, 8));

            case InventTestType::Option:
                return this.locale2Storage(_qualityOrderLineResults.TestResultValueOutcome);

            default:
                EventHandlerResult result = new EventHandlerResult();
                this.calculateBatchAttributeValueFromTestResultsDelegate(this, testType, _qualityOrderLineResults, result);
                if (result.hasResult())
                {
                    return result.result();
                }
                break;
        }        
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReferences</Name>
				<Source><![CDATA[
    public boolean hasReferences()
    {
        InventTestGroupMember           inventTestGroupMember;
        InventQualityOrderLine          inventQualityOrderLine;
        PdsBatchAttribByAttribGroup     pdsBatchAttribByAttribGroup;
        PdsBatchAttribByItem            pdsBatchAttribByItem;
        PdsBatchAttribByItemCustomer    pdsBatchAttribByItemCustomer;

        select firstonly RecId from inventTestGroupMember
            where inventTestGroupMember.PdsBatchAttribId == this.PdsBatchAttribId;

        if (inventTestGroupMember.RecId != 0)
        {
            return true;
        }

        select firstonly RecId from inventQualityOrderLine
            where inventQualityOrderLine.PdsBatchAttribId == this.PdsBatchAttribId;

        if (inventQualityOrderLine.RecId != 0)
        {
            return true;
        }

        select firstonly RecId from pdsBatchAttribByAttribGroup
            where pdsBatchAttribByAttribGroup.PdsBatchAttribAttribId == this.PdsBatchAttribId;

        if (pdsBatchAttribByAttribGroup.RecId != 0)
        {
            return true;
        }

        select firstonly RecId from pdsBatchAttribByItem
            where pdsBatchAttribByItem.PdsBatchAttribRelation == this.PdsBatchAttribId;

        if (pdsBatchAttribByItem.RecId != 0)
        {
            return true;
        }

        select firstonly RecId from pdsBatchAttribByItemCustomer
            where pdsBatchAttribByItemCustomer.PdsBatchAttribRelation == this.PdsBatchAttribId;

        if (pdsBatchAttribByItemCustomer.RecId != 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttribValueType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if value fits given type.
    /// </summary>
    /// <param name="_batchAttribValue">
    /// Batch attribute value
    /// </param>
    /// <param name="_isDisplayValue">
    /// Flag to indicate, if <c>_batchAttribValue</c> is in display format (Locale dependent)
    /// </param>
    /// <returns>
    /// Whether value fits type. Blank '' parameter returns invalid.
    /// </returns>
    public boolean isValidAttribValueType(
        PdsBatchAttribValue _batchAttribValue,
        boolean             _isDisplayValue = false)
    {
        PdsBatchAttribDisplayFormatter  formatter = PdsBatchAttribDisplayFormatter::construct();
        boolean                         ret = true;

        switch (this.PdsBatchAttribType)
        {
            case PdsBatchAttribType::Date:
                if (ret)
                {
                    if (_isDisplayValue)
                    {
                        if (!formatter.isValidDate(_batchAttribValue))
                        {
                            ret = checkFailed(strfmt("@SYS78966", "@PRO1548"));
                        }
                    }
                    else if (!str2NumOk(_batchAttribValue))
                    {
                        ret = checkFailed(strfmt("@SYS78966", "@PRO1548"));
                    }
                }
                break;

            case PdsBatchAttribType::Integer :
                if (ret)
                {
                    if (_isDisplayValue)
                    {
                        if (!formatter.isValidInt(_batchAttribValue))
                        {
                            ret = checkFailed(
                                    strfmt("@PRO1954", _batchAttribValue));
                        }
                    }
                    else if (!str2NumOk(_batchAttribValue))
                    {
                        ret = checkFailed(
                                strfmt("@PRO1954", _batchAttribValue));
                    }
                }
                break;

            case PdsBatchAttribType::Realnumber :
                if (ret)
                {
                    if (_isDisplayValue)
                    {
                        if (!formatter.isValidReal(_batchAttribValue))
                        {
                            ret = checkFailed(
                                    strfmt("@PRO2249",_batchAttribValue));
                        }
                    }
                    else if (!str2NumOk(_batchAttribValue))
                    {
                        ret = checkFailed(
                                strfmt("@PRO2249",_batchAttribValue));
                    }
                }
                break;

            case PdsBatchAttribType::Enumerate :
                if (_batchAttribValue && !formatter.isValidBatchEnumValue(
                        this.PdsBatchAttribId,
                        _batchAttribValue))
                {
                    ret = checkFailed(strfmt("@SYS78966", "@PRO1548"));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locale2Storage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a locale dependent value into a value that can be stored in the database
    /// </summary>
    /// <param name="_value">
    /// The value to convert
    /// </param>
    /// <returns>
    /// The locale independent representation of the value
    /// </returns>
    /// <remarks>
    /// The method uses the attribute type from the current record to convert the value
    /// </remarks>
    public PdsBatchAttribValue locale2Storage(PdsBatchAttribValue _value)
    {
        if (!this.isValidAttribValueType(_value,true))
        {
            return '';
        }

        return PdsBatchAttrib::locale2StorageType(this.PdsBatchAttribType,_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PdsBatchAttrib, PdsBatchAttribToleranceAction):
                if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribType)))
                {
                    if (this.orig().PdsBatchAttribType == PdsBatchAttribType::Realnumber
                        || this.orig().PdsBatchAttribType == PdsBatchAttribType::Integer)
                    {
                        this.PdsBatchAttribToleranceAction = PdsBatchAttribToleranceAction::Warning;
                    }
                }
                break;
            case fieldNum(PdsBatchAttrib, PdsBatchAttribTarget):
                if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribType)))
                {
                    this.PdsBatchAttribTarget = '';
                }
                break;
            case fieldNum(PdsBatchAttrib, PdsBatchAttribMin):
                if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribMin)))
                {
                    this.PdsBatchAttribMin = this.adjustValueToAttribType(this.PdsBatchAttribMin,true);
                }
                else if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribType)))
                {
                    if (this.orig().PdsBatchAttribType == PdsBatchAttribType::Realnumber
                        || this.orig().PdsBatchAttribType == PdsBatchAttribType::Integer)
                    {
                        this.PdsBatchAttribMin = 0.00;
                    }
                }
                break;
            case fieldNum(PdsBatchAttrib, PdsBatchAttribMax) :
                if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribMax)))
                {
                    this.PdsBatchAttribMax = this.adjustValueToAttribType(this.PdsBatchAttribMax,true);
                }
                else if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribType)))
                {
                    if (this.orig().PdsBatchAttribType == PdsBatchAttribType::Realnumber
                        || this.orig().PdsBatchAttribType == PdsBatchAttribType::Integer)
                    {
                        this.PdsBatchAttribMax = 0.00;
                    }
                }
                break;
            case fieldNum(PdsBatchAttrib, PdsBatchAttribMultiple) :
                if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribMultiple)))
                {
                    this.PdsBatchAttribMultiple = this.adjustValueToAttribType(this.PdsBatchAttribMultiple,true);
                }
                else if (this.isFieldSet(fieldNum(PdsBatchAttrib, PdsBatchAttribType)))
                {
                    if (this.orig().PdsBatchAttribType == PdsBatchAttribType::Realnumber
                        || this.orig().PdsBatchAttribType == PdsBatchAttribType::Integer)
                    {
                        this.PdsBatchAttribMultiple = 0.00;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                [fieldNum(PdsBatchAttrib, PdsBatchAttribMax),
                    [fieldNum(PdsBatchAttrib, PdsBatchAttribType),
                    fieldNum(PdsBatchAttrib, PdsBatchAttribMax)]
                ],
                [fieldNum(PdsBatchAttrib, PdsBatchAttribMin),
                    [fieldNum(PdsBatchAttrib, PdsBatchAttribType),
                    fieldNum(PdsBatchAttrib, PdsBatchAttribMin)]
                ],
                [fieldNum(PdsBatchAttrib, PdsBatchAttribMultiple),
                    [fieldNum(PdsBatchAttrib, PdsBatchAttribType),
                    fieldNum(PdsBatchAttrib, PdsBatchAttribMultiple)]
                ],
                [fieldNum(PdsBatchAttrib, PdsBatchAttribToleranceAction),
                    [fieldNum(PdsBatchAttrib, PdsBatchAttribType)]
                ],
                [fieldNum(PdsBatchAttrib, PdsBatchAttribTarget),
                    [fieldNum(PdsBatchAttrib, PdsBatchAttribType)]
                ]       
              ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribMinEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to edit the Batch attribute minimum value. Receives a string and saves as proper type.
    /// </summary>
    /// <param name="_set">
    /// Edit method called to set or view a value
    /// </param>
    /// <param name="_pdsBatchAttribMin">
    /// Value to push if setting value.
    /// </param>
    /// <returns>
    /// Current batch attribute minimum value, returned as string regardless of type.
    /// </returns>
    public edit PdsBatchAttribValue pdsBatchAttribMinEdit(
        boolean                 _set = false,
        PdsBatchAttribValue     _pdsBatchAttribMin = '')
    {
        if (_set)
        {
            this.setNumericField(fieldnum(PdsBatchAttrib, PdsBatchAttribMin), _pdsBatchAttribMin);
        }

        return this.storage2Locale(this.value2Storage(this.PdsBatchAttribMin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribMaxEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to edit the Batch attribute maximum value. Receives a string and saves as proper type.
    /// </summary>
    /// <param name="_set">
    /// Edit method called to set or view a value
    /// </param>
    /// <param name="_pdsBatchAttribMax">
    /// Value to push if setting value.
    /// </param>
    /// <returns>
    /// Current batch attribute maximum value, returned as string regardless of type.
    /// </returns>
    public edit PdsBatchAttribValue pdsBatchAttribMaxEdit(
        boolean                 _set = false,
        PdsBatchAttribValue     _pdsBatchAttribMax = '')
    {
        if (_set)
        {
            this.setNumericField(fieldnum(PdsBatchAttrib, PdsBatchAttribMax), _pdsBatchAttribMax);
        }

        return this.storage2Locale(this.value2Storage(this.PdsBatchAttribMax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribMultipleEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to edit the Batch attribute increment value. Receives a string and saves as proper type.
    /// </summary>
    /// <param name="_set">
    /// Edit method called to set or view a value
    /// </param>
    /// <param name="_pdsBatchAttribMultiple">
    /// Value to push if setting value.
    /// </param>
    /// <returns>
    /// Current batch attribute increment value, returned as string regardless of type.
    /// </returns>
    public edit PdsBatchAttribValue pdsBatchAttribMultipleEdit(
        boolean                 _set = false,
        PdsBatchAttribValue     _pdsBatchAttribMultiple = '')
    {
        if (_set)
        {
            this.setNumericField(fieldnum(PdsBatchAttrib, PdsBatchAttribMultiple), _pdsBatchAttribMultiple);
        }

        return this.storage2Locale(this.value2Storage(this.PdsBatchAttribMultiple));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribTargetEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to edit the Batch attribute target value. Receives a string and saves as proper type.
    /// </summary>
    /// <param name="_set">
    /// Edit method called to set or view a value
    /// </param>
    /// <param name="_pdsBatchAttribTarget">
    /// Value to push if setting value.
    /// </param>
    /// <returns>
    /// Current batch attribute value, returned as string regardless of type.
    /// </returns>
    public edit PdsBatchAttribTarget pdsBatchAttribTargetEdit(
        boolean                 _set = false,
        PdsBatchAttribTarget    _pdsBatchAttribTarget = '')
    {
        if (_set)
        {
            this.setNumericField(fieldnum(PdsBatchAttrib, PdsBatchAttribTarget), _pdsBatchAttribTarget);
        }

        return this.storage2Locale(this.PdsBatchAttribTarget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumericField</Name>
				<Source><![CDATA[
    private void setNumericField(FieldId _fieldId, PdsBatchAttribValue _value)
    {
        if (hasFieldAccess(tableNum(PdsBatchAttrib), _fieldId, AccessType::Edit)
            && this.isValidAttribValueType(_value, true))
        {
            switch (_fieldId)
            {
                case fieldnum(PdsBatchAttrib, PdsBatchAttribMin):
                case fieldnum(PdsBatchAttrib, PdsBatchAttribMax):
                case fieldnum(PdsBatchAttrib, PdsBatchAttribMultiple):
                    this.(_fieldId) = any2Real(this.storageToValue(this.locale2Storage(_value)));
                    break;
                case fieldnum(PdsBatchAttrib, PdsBatchAttribTarget):
                    this.PdsBatchAttribTarget = this.locale2Storage(_value);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storageToValue</Name>
				<Source><![CDATA[
    private anytype storageToValue(PdsBatchAttribValue _valueStr)
    {
        anytype                         ret;

        switch (this.PdsBatchAttribType)
        {
            case PdsBatchAttribType::Realnumber:
                ret = str2Num(_valueStr);
                break;
            case PdsBatchAttribType::Integer:
                ret = str2int(_valueStr);
                break;
            case PdsBatchAttribType::Date:
                ret = num2Date((str2int(_valueStr)));
                break;
            case PdsBatchAttribType::String:
                ret = _valueStr;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storage2Locale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a batch attribute value from the storage format into the
    /// apropriate display format
    /// </summary>
    /// <param name="_value">
    /// The value to convert
    /// </param>
    /// <returns>
    /// The value in display format
    /// </returns>
    /// <remarks>
    /// The method uses the attribute type from the current record to convert the value
    /// </remarks>
    public PdsBatchAttribValue storage2Locale(PdsBatchAttribValue _value)
    {
        return PdsBatchAttrib::storage2LocaleType(this.PdsBatchAttribType,_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean                  ret;
        PdsBatchAttribEnumValues pdsBatchAttribEnumValues;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldstr(PdsBatchAttrib,PdsBatchAttribType):
                    if (this.hasReferences())
                    {
                        ret = checkFailed("@PDS1529");
                    }
                    if (ret && this.RecId
                        && this.orig().PdsBatchAttribType != this.PdsBatchAttribType
                        && !this.canChangeType())
                    {
                        ret = checkFailed("@PDS1381");
                    }
                    if (this.orig().PdsBatchAttribType == PdsBatchAttribType::Enumerate
                        && this.PdsBatchAttribType != PdsBatchAttribType::Enumerate)
                    {
                        select firstonly RecId from pdsBatchAttribEnumValues
                            where pdsBatchAttribEnumValues.PdsBatchAttribId == this.PdsBatchAttribId;

                        if (pdsBatchAttribEnumValues.RecId)
                        {
                            ret = checkFailed("@PDS1384");
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.checkAttribRangeChange()
                    && PdsBatchAttrib::isValidAttribRange(
                                this.PdsBatchAttribMin,
                                this.PdsBatchAttribMax)
                    && PdsBatchAttrib::isValidTargetValue(
                            this.PdsBatchAttribId,
                            this.PdsBatchAttribMin,
                            this.PdsBatchAttribMax,
                            this.PdsBatchAttribMultiple,
                            this.PdsBatchAttribTarget,
                            this.PdsBatchAttribType);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>value2Storage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert the typed value into the format appropriate for storage in the database
    /// </summary>
    /// <param name="_value">
    /// The value to convert
    /// </param>
    /// <returns>
    /// The value converted into the appropriate storage format
    /// </returns>
    /// <remarks>
    /// The method uses the attribute type from the current record to convert the value
    /// </remarks>
    public PdsBatchAttribValue value2Storage(anytype _value)
    {
        return PdsBatchAttrib::value2StorageType(this.PdsBatchAttribType,_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2StorageType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the storage value representation of the date provided.
    /// </summary>
    /// <param name="_inputvalue">
    ///     The date to convert.
    /// </param>
    /// <returns>
    ///     A string representing the attrbute date value as it is stored in the database.
    /// </returns>
    public static PdsBatchAttribValue date2StorageType(date _inputvalue)
    {
        #define.AttribValueFormat('\%1')
        PdsBatchAttribValue valueString;
        Const str minDateAsString = '1/1/1900';
        
        if (_inputvalue == dateNull())
        {
            valueString = minDateAsString;
        }
        else
        {
            valueString = strfmt(#AttribValueFormat, _inputvalue);
        }

        return PdsBatchAttrib::locale2StorageType(PdsBatchAttribType::Date, valueString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(PdsBatchAttribId _pdsBatchAttribId)
    {
        return _pdsBatchAttribId
            && (select firstonly RecId
                 from  pdsBatchAttrib
                    where pdsBatchAttrib.PdsBatchAttribId ==
                                    _pdsBatchAttribId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PdsBatchAttrib find(
            PdsBatchAttribId  _pdsBatchAttribId,
            boolean _forUpdate = false)
    {
        PdsBatchAttrib  pdsBatchAttrib;

        if (!prmisdefault(_forUpdate))
        {
            pdsBatchAttrib.selectForUpdate(_forUpdate);
        }

        if (_pdsBatchAttribId)
        {
            select firstonly pdsBatchAttrib
                where pdsBatchAttrib.PdsBatchAttribId == _pdsBatchAttribId;
        }

        return pdsBatchAttrib;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAttribType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the Attribute type for a AttribId
    /// </summary>
    /// <param name="_pdsBatchAttribId">
    /// Attribute Id for which to search
    /// </param>
    /// <returns>
    /// Batch attribute for a specific AttribId
    /// </returns>
    /// <remarks>
    /// Search for type of a specific record.
    /// </remarks>
    public static PdsBatchAttribType findAttribType(
        PdsBatchAttribId  _pdsBatchAttribId)
    {
        PdsBatchAttrib  pdsBatchAttrib;

        if (_pdsBatchAttribId)
        {
            select firstonly PdsBatchAttribType
                from pdsBatchAttrib
                where pdsBatchAttrib.PdsBatchAttribId == _pdsBatchAttribId;
        }

        return pdsBatchAttrib.PdsBatchAttribType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttribMultiple</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the value is valid based on the increments defined.
    /// </summary>
    /// <param name="_pdsBatchAttribMin">
    ///     The minimum value allowed for the attribute.
    /// </param>
    /// <param name="_pdsBatchAttribMultiple">
    ///     The increment defined over the minimum value.
    /// </param>
    /// <param name="_pdsBatchAttribValue">
    ///     The value used for the comparison.
    /// </param>
    /// <returns>
    ///     true if the validation succeeds.
    /// </returns>
    public static boolean isValidAttribMultiple(
        PdsBatchAttribMin       _pdsBatchAttribMin,
        PdsBatchAttribMultiple  _pdsBatchAttribMultiple,
        PdsBatchAttribValue     _pdsBatchAttribValue)
    {
        boolean     ret = true;
        real        d;
        real        batchAttribBaseByIncrement;

        if (_pdsBatchAttribMultiple)
        {
            batchAttribBaseByIncrement = str2num(_pdsBatchAttribValue) - _pdsBatchAttribMin;

            d = batchAttribBaseByIncrement / _pdsBatchAttribMultiple;
            if (trunc(d) != d)
            {
                ret = checkFailed("@PRO1615");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttribMultipleErrorMsg</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the specified attribute value meets the increment requirements.
    /// </summary>
    /// <param name="_batchAttribMin">
    ///     The attribute minimum value.
    /// </param>
    /// <param name="_batchAttribMultiple">
    ///     The attribute increment value.
    /// </param>
    /// <param name="_batchAttribValue">
    ///     The specified attribute value.
    /// </param>
    /// <returns>
    ///     Returns a container with a Boolean value indicating whether validation was successful, as well as an error message if it was not.
    /// </returns>
    public static container isValidAttribMultipleErrorMsg(
        PdsBatchAttribMin       _batchAttribMin,
        PdsBatchAttribMultiple  _batchAttribMultiple,
        PdsBatchAttribValue     _batchAttribValue)
    {
        return PdsBatchAttrib::isValidAttribMultipleErrorMsgMode(_batchAttribMin, _batchAttribMultiple, _batchAttribValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttribMultipleErrorMsgMode</Name>
				<Source><![CDATA[
    internal static container isValidAttribMultipleErrorMsgMode(
        PdsBatchAttribMin       _batchAttribMin,
        PdsBatchAttribMultiple  _batchAttribMultiple,
        PdsBatchAttribValue     _batchAttribValue, 
        boolean _isDisplayMobileMode = false)
    {
        str     errorMessage;
        boolean hasError;
        real    batchAttribBaseByIncrement;
        real    d;

        if (_batchAttribMultiple)
        {
            batchAttribBaseByIncrement = (_isDisplayMobileMode ? WhsWorkExecuteDisplay::str2numDisplay(_batchAttribValue) : str2num(_batchAttribValue)) - _batchAttribMin;
            d = batchAttribBaseByIncrement / _batchAttribMultiple;
            if (trunc(d) != d)
            {
                errorMessage = "@PRO1615";
                hasError = true;
            }
        }

        return [hasError, errorMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttribRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether value fits in the given range and if range is valid.
    /// </summary>
    /// <param name="_pdsBatchAttribMin">Batch attribute minimum</param>
    /// <param name="_pdsBatchAttribMax">Batch attribute maximum</param>
    /// <param name="_pdsBatchAttribValue">Batch attribute value</param>
    /// <returns>Whether value fits in the given range and if range is valid. ie min less than max
    /// </returns>
    /// <remarks>
    /// D-20-1499 Pds Batch attributes
    /// <syntax>
    /// public static boolean isValidAttribRange(PdsBatchAttribMin _pdsBatchAttribMin, PdsBatchAttribMax _pdsBatchAttribMax,
    /// PdsBatchAttribValue _pdsBatchAttribValue)
    /// </syntax>
    /// </remarks>
    public static boolean isValidAttribRange(
        PdsBatchAttribMin   _pdsBatchAttribMin,
        PdsBatchAttribMax   _pdsBatchAttribMax,
        PdsBatchAttribValue _pdsBatchAttribValue = '')
    {
        boolean ret = true;

        if (ret && _pdsBatchAttribMin > _pdsBatchAttribMax)
        {
            ret = checkFailed("@SYS22086");
        }

        if (ret && _pdsBatchAttribValue
            && (!str2NumOk(_pdsBatchAttribValue)
                || str2num(_pdsBatchAttribValue) < _pdsBatchAttribMin
                || str2num(_pdsBatchAttribValue) > _pdsBatchAttribMax))
        {
            ret = checkFailed(strfmt("@SYS87701",
                                _pdsBatchAttribMin,
                                _pdsBatchAttribMax));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttribRangeErrorMsg</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the specified attribute value is within the acceptable range.
    /// </summary>
    /// <param name="_batchAttribMin">
    ///     The attribute minimum value.
    /// </param>
    /// <param name="_batchAttribMax">
    ///     The attribute maximum value.
    /// </param>
    /// <param name="_batchAttribValue">
    ///     The specified attribute value.
    /// </param>
    /// <returns>
    ///     Returns a container with a Boolean value indicating whether validation was successful, as well as an error message if it was not.
    /// </returns>
    public static container isValidAttribRangeErrorMsg(
        PdsBatchAttribMin   _batchAttribMin,
        PdsBatchAttribMax   _batchAttribMax,
        PdsBatchAttribValue _batchAttribValue)
    {
        return PdsBatchAttrib::isValidAttribRangeErrorMsgMode (_batchAttribMin, _batchAttribMax, _batchAttribValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAttribRangeErrorMsgMode</Name>
				<Source><![CDATA[
    internal static container isValidAttribRangeErrorMsgMode(
        PdsBatchAttribMin   _batchAttribMin,
        PdsBatchAttribMax   _batchAttribMax,
        PdsBatchAttribValue _batchAttribValue, 
        boolean _mobileDisplayMode = false)
    {
        str     errorMessage;
        boolean hasError = false;

        if (_batchAttribMin > _batchAttribMax)
        {
            errorMessage = "@SYS22086";
            hasError = true;
        }

        real attribValueReal;
        if (!hasError)
        {
            hasError = _mobileDisplayMode ? !WhsWorkExecuteDisplay::str2numDisplayOK(_batchAttribValue) : !str2numOK(_batchAttribValue);
            if (hasError)
            {
                errorMessage = strfmt("@PRO2249",_batchAttribValue);
            }
            else
            {
                attribValueReal = _mobileDisplayMode ? WhsWorkExecuteDisplay::str2numDisplay(_batchAttribValue) : str2num(_batchAttribValue);
            }
        }

        if (!hasError
        &&  _batchAttribValue
        && (attribValueReal < _batchAttribMin || attribValueReal > _batchAttribMax))
        {
            errorMessage = strFmt("@SYS87701", _batchAttribMin, _batchAttribMax);
            hasError = true;
        }

        return [hasError, errorMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidTargetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to edit the Batch attribute target value. Receives a string and saves as proper type.
    /// </summary>
    /// <param name="_pdsBatchAttribId">
    /// The Attribute Id.
    /// </param>
    /// <param name="_pdsBatchAttribMin">
    /// The Minimum value.
    /// </param>
    /// <param name="_pdsBatchAttribMax">
    /// The Maximum value.
    /// </param>
    /// <param name="_pdsBatchAttribMultiple">
    /// The Increment value.
    /// </param>
    /// <param name="_pdsBatchAttribTarget">
    /// The Target value.
    /// </param>
    /// <param name="_pdsBatchAttribType">
    /// The Attribute Type.
    /// </param>
    /// <returns>
    /// Current batch attribute value, returned as string regardless of type.
    /// </returns>
    public static boolean isValidTargetValue(
                            PdsBatchAttribId        _pdsBatchAttribId,
                            PdsBatchAttribMin       _pdsBatchAttribMin,
                            PdsBatchAttribMax       _pdsBatchAttribMax,
                            PdsBatchAttribMultiple  _pdsBatchAttribMultiple,
                            PdsBatchAttribTarget    _pdsBatchAttribTarget,
                            PdsBatchAttribType      _pdsBatchAttribType)
    {
        boolean ret = true;

        int     targetInt;
        real    targetReal;
        str     targetStr;

        boolean isMultiple(real _target, real _initialValue, real _increment)
        {
            real calc = (_target - _initialValue) / _increment;
            return (trunc(calc) == calc);
        }

        switch (_pdsBatchAttribType)
        {
            case PdsBatchAttribType::Integer :

                if (str2IntOk(_pdsBatchAttribTarget))
                {
                    targetInt = str2int(any2str(_pdsBatchAttribTarget));
                }

                if (targetInt)
                {
                    if (targetInt > _pdsBatchAttribMax || targetInt < _pdsBatchAttribMin)
                    {
                        ret = checkFailed("@PDS1527");
                    }
                    else if (_pdsBatchAttribMultiple)
                    {
                        if (!isMultiple(targetInt, _pdsBatchAttribMin, _pdsBatchAttribMultiple))
                        {
                            warning("@PDS1532");
                            ret = false;
                        }
                    }
                }
                break;

            case PdsBatchAttribType::Realnumber :

                if (str2NumOk(_pdsBatchAttribTarget))
                {
                    targetReal = str2num(any2str(_pdsBatchAttribTarget));
                }

                if (targetReal)
                {
                    if (targetReal > _pdsBatchAttribMax || targetReal < _pdsBatchAttribMin)
                    {
                        ret = checkFailed("@PDS1527");
                    }
                    else if (_pdsBatchAttribMultiple)
                    {
                        if (!isMultiple(targetReal, _pdsBatchAttribMin, _pdsBatchAttribMultiple))
                        {
                            warning("@PDS1532");
                            ret = false;
                        }
                    }
                }
                break;
            case PdsBatchAttribType::Enumerate :

                targetStr = any2str(_pdsBatchAttribTarget);

                if (targetStr)
                {
                    if (!PdsBatchAttribEnumValues::exist(_pdsBatchAttribId, targetStr))
                    {
                        warning("@PDS1533");
                        ret = false;
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locale2StorageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a locale dependent value into a value that can be stored in the database
    /// </summary>
    /// <param name="_type">
    /// The attribute type to assume for the conversion
    /// </param>
    /// <param name="_value">
    /// The value to convert
    /// </param>
    /// <returns>
    /// The locale independent representation of the value
    /// </returns>
    /// <remarks>
    /// The <c>_value</c> has to be already checked for validity for the particular type.
    /// No further checks are being perfomed in this method.
    /// </remarks>
    public static PdsBatchAttribValue locale2StorageType(
        PdsBatchAttribType  _type,
        PdsBatchAttribValue _value)
    {
        PdsBatchAttribDisplayFormatter  formatter = PdsBatchAttribDisplayFormatter::construct();
        PdsBatchAttribValue             value;

        switch (_type)
        {
            case PdsBatchAttribType::Realnumber:
                value = PdsBatchAttrib::value2StorageType(
                            _type,
                            formatter.toReal(_value));
                break;

            case PdsBatchAttribType::Integer:
                value = PdsBatchAttrib::value2StorageType(
                            _type,
                            formatter.toInt(_value));
                break;

            case PdsBatchAttribType::Date :
                value = PdsBatchAttrib::value2StorageType(
                            _type,
                            formatter.toDate(_value));
                break;

            default :
                value = _value;
                break;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call the date lookup form.
    /// </summary>
    /// <param name="_caller">Calling form</param>
    /// <returns> Date lookup form.</returns>
    /// <remarks>
    /// This method was created as a copy of SysLookup::lookupDate which is now
    /// defined as protected in AX 2009. This was a public static method in prior
    /// releases. When a more correct implementation in AX 2009 is found, this method
    /// should be changed to delegate to that new method.
    /// <syntax>
    /// public static FormRun lookupPdsBatchAttribDate(FormRun _caller)
    /// </syntax>
    /// </remarks>
    public static FormRun lookupDate(FormRun _caller)
    {
        FormRun formRun;
        Args    args;

        args        = new Args(formstr(SysDateLookup));
        args.caller(_caller);
        formRun     = classfactory.formRunClass(args);
        formRun.init();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupForPdsBatchAttribMatchingTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup for the retrieval of records of the <c>PdsBatchAttrib</c> tablewith the specified parameters.
    /// </summary>
    /// <param name="_formControl">
    ///     The control that invokes the lookup.
    /// </param>
    /// <param name="_formControlValue">
    ///     The current value specified in the string control at the time the this lookup is invoked.
    /// </param>
    /// <param name="_expectedPDSBatchAttribTypes">
    ///     A container with the expected types of attributes, specified in values of the <c>PDSBatchAttribType</c> enumeration; optional.
    /// </param>
    public static void lookupForPdsBatchAttribMatchingTypes(
        FormStringControl   _formControl,
        str                 _formControlValue,
        container           _expectedPDSBatchAttribTypes = conNull())
    {
        str lookupRange;

        if (strEndsWith(_formControlValue, '*'))
        {
            lookupRange = _formControlValue;
        }

        Query query = PdsBatchAttrib::queryForPdsBatchAttrib(lookupRange, _expectedPDSBatchAttribTypes);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(PdsBatchAttrib), _formControl);
        sysTableLookup.addLookupfield(fieldnum(PdsBatchAttrib, PdsBatchAttribId));
        sysTableLookup.addLookupfield(fieldnum(PdsBatchAttrib, Description));
        sysTableLookup.addLookupfield(fieldnum(PdsBatchAttrib, PdsBatchAttribType));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPdsBatchAttrib</Name>
				<Source><![CDATA[
    public static void lookupPdsBatchAttrib(
        FormStringControl _ctrl,
        str _strFilter = "")
    {
        SysTableLookup          sysTableLookup =
            SysTableLookup::newParameters(tablenum(PdsBatchAttrib),_ctrl);
        Query                   query = new Query();

        query.addDataSource(tablenum(PdsBatchAttrib));

        if (_strFilter != "")
        {
            query.dataSourceTable(tablenum(PdsBatchAttrib)).
                addDataSource(tablenum(PdsBatchAttribByItem));

            query.dataSourceTable(tablenum(PdsBatchAttribByItem)).
                addLink(fieldnum(PdsBatchAttrib,PdsBatchAttribId),
                fieldnum(PdsBatchAttribByItem,PdsBatchAttribRelation));

            query.dataSourceTable(tablenum(PdsBatchAttribByItem)).
                addRange(fieldnum(
                            PdsBatchAttribByItem,
                            PdsBatchAttribItemId)).value(_strfilter);
        }

        sysTableLookup.addLookupfield(fieldnum(PdsBatchAttrib,PdsBatchAttribId));
        sysTableLookup.addLookupfield(fieldnum(PdsBatchAttrib,Description));
        sysTableLookup.addLookupfield(fieldnum(PdsBatchAttrib,PdsBatchAttribType));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPdsBatchAttributes</Name>
				<Source><![CDATA[
    public static void lookupPdsBatchAttributes(
        FormStringControl   _ctrl,
        ItemId              _itemId,
        TableGroupAll       _attribCode = TableGroupAll::Table,
        boolean             _isForActiveItem = false)
    {
        Args                    args;
        Object                  formRun;

        args = new Args();
        args.name(formstr(PdsBatchAttribLookup));
        args.caller(_ctrl);

        formRun = classfactory.formRunClass(args);
        formRun.setItemId(_itemId);
        formRun.setAttribCode(_attribCode);
        formRun.setPDSForActiveItem(_isForActiveItem);
        formRun.init();

        _ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryForPdsBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of a <c>Query</c> class object that can retrieve records of the <c>PdsBatchAttrib</c> table.
    /// </summary>
    /// <param name="_queryIdFilter">
    ///     The specified filter for the ID of the attribute; optional.
    /// </param>
    /// <param name="_expectedPDSBatchAttribTypes">
    ///     A container with the expected types of attributes, specified in values of the <c>PDSBatchAttribType</c> enumeration; optional.
    /// </param>
    /// <returns>
    ///     An instance of the <c>Query</c> class.
    /// </returns>
    private static Query queryForPdsBatchAttrib(
        str         _queryIdFilter                  = '',
        container   _expectedPDSBatchAttribTypes    = conNull())
    {
        Query                   query   = new Query();
        QueryBuildDataSource    qbds;
        int                     iterator;
        int                     length = conLen(_expectedPDSBatchAttribTypes);

        qbds = query.addDataSource(tablenum(PdsBatchAttrib));
        if (_queryIdFilter != "")
        {
            qbds.addRange(fieldnum(PdsBatchAttrib, PdsBatchAttribId)).value(SysQuery::valueLikeAfter(_queryIdFilter+'*'));
        }
        for (iterator = 1; iterator <= length; iterator++)
        {
            qbds.addRange(fieldnum(PdsBatchAttrib, PdsBatchAttribType)).value(queryValue(conPeek(_expectedPDSBatchAttribTypes, iterator)));
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>realTypeDecimals</Name>
				<Source><![CDATA[
    public static int realTypeDecimals()
    {
        return new SysDictType(extendedTypeName2Id(extendedTypeStr(PdsBatchAttribMin))).noOfDecimals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storage2LocaleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a batch attribute value from the storage format into the
    /// appropriate display format
    /// </summary>
    /// <param name="_type">
    /// type to base the conversion on
    /// </param>
    /// <param name="_value">
    /// The value to convert
    /// </param>
    /// <returns>
    /// The value in display format
    /// </returns>
    public static PdsBatchAttribValue storage2LocaleType(
        PdsBatchAttribType  _type,
        PdsBatchAttribValue _value)
    {
        PdsBatchAttribDisplayFormatter  formatter = PdsBatchAttribDisplayFormatter::construct();
        PdsBatchAttribValue             value;

        if (_value)
        {
            switch (_type)
            {
                case PdsBatchAttribType::Integer:
                    value = formatter.intToValue(str2Int(_value));
                    break;

                case PdsBatchAttribType::Realnumber:
                    value = formatter.realToValue(str2num(_value));
                    break;

                case PdsBatchAttribType::Date:
                    value = formatter.dateToValue(num2date(str2int(_value)));
                    break;

                default :
                    value = _value;
                    break;
            }
        }
        else
        {
            value = _value;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2Int</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a string into an integer
    /// </summary>
    /// <param name="_tempStr">
    /// The string to convert
    /// </param>
    /// <returns>
    /// the integer
    /// </returns>
    /// <remarks>
    /// The string must already be checked to be convertable into an integer.
    /// Use the <c>str2IntOk()</c> method of this class to check this.
    /// The conversion just removes all 'Thousands' separators from the string
    /// before calling the regular conversion method.
    /// </remarks>
    public static int str2Int(TempStr _tempStr)
    {
        System.Globalization.NumberFormatInfo numberFormat = PdsBatchAttrib::getCurrentLocaleNumberFormat();

        return str2int(
                strReplace(
                    _tempStr,
                     numberFormat.NumberGroupSeparator,
                    ''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2IntOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the format of a string if it can be converted to an integer
    /// </summary>
    /// <param name="_tempStr">
    /// The string to convert
    /// </param>
    /// <returns>
    /// true, if the string contains a valid integer
    /// </returns>
    public static boolean str2IntOk(TempStr _tempStr)
    {
        #define.Dot('.')
        boolean                                 retval;
        System.Text.RegularExpressions.Regex    re;
        System.Globalization.NumberFormatInfo   numberFormat = PdsBatchAttrib::getCurrentLocaleNumberFormat();
        str                                     reStr;
        str                                     thousandSep = numberFormat.NumberGroupSeparator;

        new InteropPermission(InteropKind::ClrInterop).assert();
        //
        // build the regular expression
        //
        reStr =
                '^\\s*[+\\-]?\\s*'                      //the sign
                + '[0-9]+'                              //the number
                    + (thousandSep == #Dot              //need to escape the '.'
                            ? '(\\'
                            : '(')
                    + thousandSep
                    + '[0-9][0-9][0-9])*'               //thousands are in groups of 3 numbers
                + '\\s*$';                              //trailing spaces

        re = new System.Text.RegularExpressions.Regex(reStr);

        retval = CLRInterop::getAnyTypeForObject(re.IsMatch(_tempStr));
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2Num</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a string into a real number
    /// </summary>
    /// <param name="_tempStr">
    /// The string to convert
    /// </param>
    /// <returns>
    /// the real number
    /// </returns>
    /// <remarks>
    /// The string must already be checked to be convertable into a real number.
    /// Use the <c>str2NumOk()</c> method of this class to check this.
    /// The conversion just removes all 'Thousands' separators from the string and
    /// replaces the 'Decimal' separator with a '.' before calling the
    /// regular conversion method.
    /// </remarks>
    public static real str2Num(TempStr _tempStr)
    {
        #define.Dot('.')
        System.Globalization.NumberFormatInfo   numberFormat = PdsBatchAttrib::getCurrentLocaleNumberFormat();
        str decimalSep  = numberFormat.NumberDecimalSeparator;
        str thousandSep = numberFormat.NumberGroupSeparator;

        return str2num(
                strReplace(
                    strReplace(
                        _tempStr,
                        thousandSep,
                        ''),
                    decimalSep,
                    #Dot));
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2NumOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the format of a string if it can be converted to real number
    /// </summary>
    /// <param name="_tempStr">
    /// The string to convert
    /// </param>
    /// <returns>
    /// true, if the string contains a valid real number
    /// </returns>
    public static boolean str2NumOk(TempStr _tempStr)
    {
        #define.Dot('.')
        boolean                                 retval;
        System.Text.RegularExpressions.Regex    re;
        System.Globalization.NumberFormatInfo   numberFormat = PdsBatchAttrib::getCurrentLocaleNumberFormat();
        str                                     reStr;
        str                                     decimalSep  = numberFormat.NumberDecimalSeparator;
        str                                     thousandSep = numberFormat.NumberGroupSeparator;

        new InteropPermission(InteropKind::ClrInterop).assert();
        //
        // build the regular expression
        //
        reStr =
                '^\\s*[+\\-]?\\s*'                      //the sign
                + '[0-9]+'                              //the number
                    + (thousandSep == #Dot
                            ? '(\\'
                            : '(')
                    + thousandSep
                    + '[0-9][0-9][0-9])*'               //thousands are in groups of 3 numbers
                + (decimalSep == #Dot                   //the decimals
                            ? '(\\'
                            : '(')
                    + decimalSep
                    + '[0-9]+)?'
                + '([+\\-]?[Ee][+\\-]?[1-9][0-9]*)?'    //the exponent
                + '\\s*$';                              //trailing spaces

        re = new System.Text.RegularExpressions.Regex(reStr);

        retval = CLRInterop::getAnyTypeForObject(re.IsMatch(_tempStr));
        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testType2AttribType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the associated batch attribute type for a quality order test type
    /// </summary>
    /// <param name="_type">
    /// The test type to get the batch attribute type for
    /// </param>
    /// <returns>
    /// The associated batch attribute type
    /// </returns>
    /// <remarks>
    /// Use a post-method handler for any additional values added to <c>InventTestType</c> extensible enum.
    /// </remarks>
    public static PdsBatchAttribType testType2AttribType(InventTestType _type)
    {
        PdsBatchAttribType  type = PdsBatchAttribType::String;

        switch (_type)
        {
            case InventTestType::Fraction:
                type = PdsBatchAttribType::Realnumber;
                break;
            case InventTestType::Integer:
                type = PdsBatchAttribType::Integer;
                break;
            case InventTestType::Option:
                type = PdsBatchAttribType::Enumerate;
                break;
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePdsBatchAttribMatchesTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the specified ID of the attribute corresponds to a valid attribute and the type matches the collection of types provided.
    /// </summary>
    /// <param name="_attribID">
    ///     The specified ID of the attribute to validate.
    /// </param>
    /// <param name="_expectedPDSBatchAttribTypes">
    ///     A container with the expected types of attributes, specified in values of the <c>PDSBatchAttribType</c> enumeration; optional.
    /// </param>
    /// <returns>
    ///     true if an attribute with that ID exists and has one of the specified types in the <paramref name="_expectedPDSBatchAttribTypes" /> parameter, if any type is specified; otehrwise, false.
    /// </returns>
    public static boolean validatePdsBatchAttribMatchesTypes(
        PdsBatchAttribId    _attribID,
        container           _expectedPDSBatchAttribTypes = conNull())
    {
        Query    query    = PdsBatchAttrib::queryForPdsBatchAttrib(_attribID, _expectedPDSBatchAttribTypes);
        QueryRun queryRun = new QueryRun(query);

        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>value2StorageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert the typed value into the format appropriate for storage in the database
    /// </summary>
    /// <param name="_type">
    /// The type to assume for the conversion
    /// </param>
    /// <param name="_value">
    /// The value to convert
    /// </param>
    /// <returns>
    /// The value converted into the appropriate storage format
    /// </returns>
    /// <remarks>
    /// The passed value must already be checked to be appropriate for the type.
    /// </remarks>
    public static PdsBatchAttribValue value2StorageType(
        PdsBatchAttribType  _type,
        anytype             _value)
    {
        PdsBatchAttribValue value;

        switch (_type)
        {
            case PdsBatchAttribType::Realnumber:
                value = num2Str0(any2real(_value),1,PdsBatchAttrib::realTypeDecimals(),1,0);
                break;
            case PdsBatchAttribType::Integer:
                value = int2str(any2int(round(_value,1)));
                break;
            case PdsBatchAttribType::Date :
                value = num2Str0(date2num(any2date(_value)), 0);
                break;
            default :
                value = _value;
                break;
        }

        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
	<DeveloperDocumentation>@PDS1061</DeveloperDocumentation>
	<FormRef>PdsBatchAttrib</FormRef>
	<Label>@PRO1588</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PdsBatchAttribId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PdsBatchAttribIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>Inventory</Modules>
	<PrimaryIndex>PdsBatchAttribIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PDSCompensationPrinciple</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>PDSCompensationPrinciple</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttribAttribute</Name>
			<Label>@PRO1635</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsBatchAttribRange</Name>
			<Label>@SYS24771</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribToleranceAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribMultiple</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsBatchAttribTarget</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsMandatory</Name>
			<Label>@PRO1577</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsMandatory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMin</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsBatchAttribMultiple</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMultiple</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PdsBatchAttribTarget</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribTarget</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribToleranceAction</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsBatchAttribToleranceAction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsBatchAttribType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PdsBatchAttribType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PdsMandatory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsBatchAttribMandatory</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PdsBatchAttribIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PdsBatchAttribId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>PdsBatchAttrib</Name>
			<RelatedTable>PdsBatchAttrib</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttribByAttribGroup</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PdsBatchAttribByAttribGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PdsBatchAttribEnumValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PdsBatchAttribEnumValues</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>PdsBatchAttribType</Name>
					<Field>PdsBatchAttribType</Field>
					<ValueStr>PdsBatchAttribType::Enumerate</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribTarget</Name>
					<Field>PdsBatchAttribTarget</Field>
					<RelatedField>PdsAttribEnumValue</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PdsBatchAttribId</Name>
					<Field>PdsBatchAttribId</Field>
					<RelatedField>PdsBatchAttribId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>