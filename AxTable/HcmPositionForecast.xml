<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecast extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>positionForecastHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>PositionId</c> value and the name of the forecast position.
    /// </summary>
    /// <returns>
    /// A string value that contains a <c>PositionId</c> value and the forecast position description.
    /// </returns>
    [SysObsolete("This method is deprecated as it's not being used anywhere.", false, 05\08\2023)]
    public display HrmDescription positionForecastHeading()
    {
        HrmDescription positionHeading;
        HcmPositionForecastDetail hcmPositionForecastDetail;

        positionHeading = HcmPosition::find(this.Position).PositionId;

        hcmPositionForecastDetail = HcmPositionForecastDetail::findByPositionForecast(this.RecId);

        if (hcmPositionForecastDetail.Description)
        {
            positionHeading = (positionHeading + ' : ' + hcmPositionForecastDetail.Description);
        }

        return positionHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PositionId</c> of the position.
    /// </summary>
    /// <returns>
    /// The <c>PositionId</c> of the position.
    /// </returns>
    public display HcmPositionId positionId()
    {
        HcmPosition hcmPosition;

        select firstonly PositionId from hcmPosition
            where hcmPosition.RecId == this.Position;

        return hcmPosition.PositionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportsToPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PositionId</c> of the parent position in which the current position reports to in the line hierarchy.
    /// </summary>
    /// <returns>
    /// The <c>PositionId</c> of the position's parent in the line hierarchy.
    /// </returns>
    public display HcmPositionId reportsToPosition()
    {
        HcmPositionRecId    reportsToPositionRecId;
        HcmPosition         hcmPosition;

        reportsToPositionRecId = HcmPositionForecast::getReportsToPosition(this.RecId);

        select firstonly PositionId from hcmPosition
            where hcmPosition.RecId == reportsToPositionRecId;

        return hcmPosition.PositionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TitleId</c> of the position.
    /// </summary>
    /// <returns>
    /// The <c>TitleId</c> of the position.
    /// </returns>
    public display HcmTitleId title()
    {
        HcmPositionForecastDetail   hcmPositionForecastDetail;
        HcmTitle                    hcmTitle;

        select firstonly TitleId from hcmTitle
             exists join hcmPositionForecastDetail
                where hcmTitle.RecId == hcmPositionForecastDetail.Title
                    && hcmPositionForecastDetail.PositionForecast == this.RecId;

        return hcmTitle.TitleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>titleV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TitleId</c> of the position.
    /// </summary>
    /// <returns>
    /// The <c>TitleId</c> of the position.
    /// </returns>
    public display HcmTitleId titleV2()
    {
        HcmPositionForecastDetailV2 hcmPositionForecastDetail;
        HcmTitle hcmTitle;

        select firstonly TitleId from hcmTitle
             join hcmPositionForecastDetail
               order by hcmPositionForecastDetail.RecId desc
                where hcmTitle.RecId == hcmPositionForecastDetail.Title
                    && hcmPositionForecastDetail.PositionForecast == this.RecId;

        return hcmTitle.TitleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>worker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the worker that is currently assigned to the the position.
    /// </summary>
    /// <returns>
    /// The name of the worker that is assigned to the position.
    /// </returns>
    public display Name worker()
    {
        HcmPositionWorkerAssignment hcmPositionWorkerAssignment;
        DirPartyTable               dirPartyTable;
        HcmWorker                   hcmWorker;

        select firstonly Name from dirPartyTable
            exists join hcmPositionWorkerAssignment
                where hcmPositionWorkerAssignment.Position == this.Position
            exists join hcmWorker
                where dirPartyTable.RecId == hcmWorker.Person
                      && hcmWorker.RecId == hcmPositionWorkerAssignment.Worker;

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>HcmPositionForecast</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionForecastRecId _recId)
    {
        boolean ret = true;

        if (!HcmPositionForecast::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmPositionForecast::txtNotExist(), tableStr(HcmPositionForecast)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified record exists in the <c>HcmPositionForecast</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmPositionForecastRecId _recId)
    {
        return _recId && (select firstonly RecId from hcmPositionForecast
                    where hcmPositionForecast.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>HcmPositionForecast</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>HcmPositionForecast</c> table; otherwise, an empty record.
    /// </returns>
    public static HcmPositionForecast find(
    HcmPositionForecastRecId _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecast hcmPositionForecast;

        hcmPositionForecast.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecast.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecast
            where hcmPositionForecast.RecId == _recId;

        return hcmPositionForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>HcmPositionForecast</c> table.
    /// </summary>
    /// <param name="_position">
    /// The value of the <c>Position</c> field of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record or multiple records in the <c>HcmPositionForecast</c> table; otherwise, an empty record.
    /// </returns>
    public static HcmPositionForecast findByPosition(
    HcmPositionRecId _position,
    boolean _forUpdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecast hcmPositionForecast;

        hcmPositionForecast.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecast.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecast
            where hcmPositionForecast.Position == _position;

        return hcmPositionForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportsToPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>HcmPositionForecastRecId</c> value from the <c>HcmPositionForecastHierarchy</c> table that relates
    ///    to the parent position associated with a <c>HcmPositionForecastRecId</c> value by using the specified
    ///    hierarchy.
    /// </summary>
    /// <param name="_positionForecastRecId">
    ///    The record ID of the <c>HcmPositionForecast</c> record for which to retrieve the <c>HcmPositionForecastRecId</c>
    ///    value of the parent.
    /// </param>
    /// <param name="_asOfDate">
    ///    The point in time that is used for the selection criteria.
    /// </param>
    /// <param name="_hierarchyTypeRecId">
    ///    The record ID value that represents the <c>HcmPositionForecastHierarchyType</c> record that is used to
    ///    select the parent position.
    /// </param>
    /// <returns>
    ///    A <c>HcmPositionForecastRecId</c> value that indicates the <c>HcmPositionForecast</c> record that is assigned as
    ///    the parent of the <c>HcmPositionForecast</c> record at the requested point in time based on the specified
    ///    <c>HcmPositionForecastHierarchyType</c> value.
    /// </returns>
    /// <remarks>
    ///    If a hierarchy type is not provided, a hierarchy of type line is used to determine the parent
    ///    position in the <c>HcmPositionForecastHierarchy</c> table.
    /// </remarks>
    public static HcmPositionForecastRecId getReportsToPosition(
        HcmPositionForecastRecId _positionForecastRecId,
        utcdatetime _asOfDate = DateTimeUtil::utcNow(),
        HcmPositionHierarchyTypeRecId _hierarchyTypeRecId = HcmPositionHierarchyType::lineHierarchyType())
    {
        HcmPositionForecastRecId reportsToPositionRecId;

        reportsToPositionRecId = HcmPositionForecastHierarchy::findByPositionForecastAndHierarchyType(_positionForecastRecId, _hierarchyTypeRecId).ParentPosition;

        if (!HcmPosition::exist(reportsToPositionRecId))
        {
            // reports to position assigned to the selected position no longer exists in the position table,
            // so don't return an invalid reportsToPositionRecId
            reportsToPositionRecId = 0;
        }

        return reportsToPositionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>PositionId</c> field value associated with the <c>HcmPosition</c> record
    /// relates to <c>HcmPositionForecast</c> record.
    /// </summary>
    /// <param name="_hcmPositionForecastRecId">
    /// Record id of <c>HcmPositionForecast</c>.
    /// </param>
    /// <returns>
    /// A <c>PositionId</c> field value associated with  the position forecast record id.
    /// </returns>
    public static HcmPositionId getPositionId(HcmPositionForecastRecId _hcmPositionForecastRecId)
    {
        HcmPosition                 hcmPosition;
        HcmPositionForecast         hcmPositionForecast;

        if (_hcmPositionForecastRecId)
        {
            select RecId from hcmPosition
                join Position from  hcmPositionForecast
                    where hcmPositionForecast.Position == hcmPosition.RecId &&
                        hcmPositionForecast.RecId == _hcmPositionForecastRecId;
        }

        return  hcmPosition.PositionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS190143</DeveloperDocumentation>
	<FormRef>HcmPositionForecast</FormRef>
	<Label>@Budget:BudgetPlanning_PositionForecasting_ForecastPositions</Label>
	<ListPageRef>HcmPositionForecastList</ListPageRef>
	<TableGroup>Main</TableGroup>
	<TitleField1>Position</TitleField1>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>PositionIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForecastPositionStatus</Name>
			<Label>@SYS4005748</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForecastStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Position</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ForecastStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>HcmPositionForecastStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Position</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>HcmPositionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PositionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Position</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Position</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPosition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Position</Name>
					<Field>Position</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>