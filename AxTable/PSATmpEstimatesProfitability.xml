<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSATmpEstimatesProfitability</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSATmpEstimatesProfitability extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode companyCurrency()
    {
        return Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSATmpEstimatesProfitability</Name>
				<Source><![CDATA[
    public static PSATmpEstimatesProfitability  populatePSATmpEstimatesProfitability(SalesQuotationTable _salesQuotationTable)
    {
        PSATmpEstimatesProfitability    estimatesProfitability;
        SalesQuotationLine              salesQuotationLine;
        AmountCur                       totalCostPrice;
        AmountCur                       totalSalesPrice;
        QuotationProjTransType          curProjTransType;
        boolean                         isCurrencyExchange;

        CurrencyExchangeHelper          currencyExchangeHelper;

        void insertSummaryLines()
        {
            estimatesProfitability.TransType                = enum2str(curProjTransType);
            if (isCurrencyExchange)
            {
                estimatesProfitability.EstimatedRevenue = currencyExchangeHelper.calculateTransactionToAccounting(_salesQuotationTable.CurrencyCode, totalSalesPrice, false);
            }
            else
            {
                estimatesProfitability.EstimatedRevenue         = totalSalesPrice;
            }

            estimatesProfitability.EstimatedCost            = totalCostPrice;
            estimatesProfitability.EstimatedProfit          = estimatesProfitability.EstimatedRevenue - estimatesProfitability.EstimatedCost;

            if (estimatesProfitability.EstimatedRevenue != 0)
            {
                estimatesProfitability.EstimatedProfitMargin = estimatesProfitability.EstimatedProfit / estimatesProfitability.EstimatedRevenue * 100;
            }
            else
            {
                estimatesProfitability.EstimatedProfitMargin = 0;
            }
            estimatesProfitability.insert();
        }

        void clearTotals()
        {
            totalCostPrice = 0;
            totalSalesPrice = 0;
        }

        if (estimatesProfitability.companyCurrency() != _salesQuotationTable.CurrencyCode)
        {
            isCurrencyExchange = true;

            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        InventTable inventTable;
        while select salesQuotationLine order by ProjTransType
                where salesQuotationLine.QuotationId == _salesQuotationTable.QuotationId
           outer join inventTable
                where inventTable.ItemId == salesquotationline.ItemId
        {
            if (curProjTransType == QuotationProjTransType::None)
            {
                curProjTransType = salesQuotationLine.ProjTransType;
            }

            if (curProjTransType != salesQuotationLine.ProjTransType)
            {
                insertSummaryLines();
                curProjTransType = salesQuotationLine.ProjTransType;
                clearTotals();
            }

            if (PSATmpEstimatesProfitability::canAddCostPrice(salesQuotationLine))
            {
                if (inventTable && inventTable.inventUnitId() != salesQuotationLine.SalesUnit)
                {
                    SalesQty salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesQuotationLine.ItemId,
                                                                                         salesQuotationLine.InventDimId,
                                                                                         salesQuotationLine.SalesQty,
                                                                                         salesQuotationLine.SalesUnit,
                                                                                         salesQuotationLine.inventTable().inventUnitId(),
                                                                                         NoYes::Yes);
                    totalCostPrice += salesQty * salesQuotationLine.CostPrice;
                }
                else
                {
                    totalCostPrice += salesQuotationLine.salesQty * salesQuotationLine.CostPrice;
                }
            }

            if (ProjLineProperty::find(salesQuotationLine.LinePropertyId).ToBeInvoiced == NoYes::Yes)
            {
                if (PSATmpEstimatesProfitability::canAddLineAmount(salesQuotationLine))
                {
                    totalSalesPrice += salesQuotationLine.LineAmount;
                }
            }
        }
        if (totalCostPrice != 0 || totalSalesPrice != 0)
        {
            insertSummaryLines();
        }

        select sum(EstimatedCost), sum(EstimatedRevenue), sum(EstimatedProfit) from estimatesProfitability;

        estimatesProfitability.TransType                = "@SYS14107";
        estimatesProfitability.EstimatedCost            = estimatesProfitability.EstimatedCost;
        estimatesProfitability.EstimatedRevenue         = estimatesProfitability.EstimatedRevenue;
        estimatesProfitability.EstimatedProfit          = estimatesProfitability.EstimatedRevenue -  estimatesProfitability.EstimatedCost;
        if (estimatesProfitability.EstimatedRevenue != 0)
        {
            estimatesProfitability.EstimatedProfitMargin = estimatesProfitability.EstimatedProfit / estimatesProfitability.EstimatedRevenue * 100;
        }
        else
        {
            estimatesProfitability.EstimatedProfitMargin = 0;
        }
        estimatesProfitability.insert();

        return estimatesProfitability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the calculated amount of  Qty * Cost price can be added to total cost price.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    ///     An instance of <c>SalesQuotationLine</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if the calculated amount of Qty * Cost price can be added to total cost price; otherwise, false.
    /// </returns>
    protected static boolean canAddCostPrice(SalesQuotationLine _salesQuotationLine)
    {
        Return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check if the line amount can be added to total sales price.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    ///     An instance of <c>SalesQuotationLine</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if the line amount can be added to total sales price; otherwise, false.
    /// </returns>
    protected static boolean canAddLineAmount(SalesQuotationLine _salesQuotationLine)
    {
        ProjTransType projTransType;

        if (_salesQuotationLine.projId())
        {
            switch (_salesQuotationLine.ProjTransType)
            {
                case QuotationProjTransType::Expense:
                    projTransType = ProjTransType::Cost;
                    break;

                case QuotationProjTransType::Fee:
                    projTransType = ProjTransType::Revenue;
                    break;

                case QuotationProjTransType::Hour:
                    projTransType = ProjTransType::Hour;
                    break;

                case QuotationProjTransType::Item:
                    projTransType = ProjTransType::Item;
                    break;

                case QuotationProjTransType::None:
                    projTransType = ProjTransType::None;
                    break;
            }
        }

        return (!_salesQuotationLine.projId() || ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(ProjTable::find(_salesQuotationLine.projId()), projTransType)
                || ProjInvoiceTable::isBillingRuleInvoiceable(_salesQuotationLine.projId(), _salesQuotationLine.ProjCategoryId, ''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@PSA11082</DeveloperDocumentation>
	<Label>@PSA11072</Label>
	<TitleField1>TransType</TitleField1>
	<TitleField2>EstimatedProfitMargin</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EstimatedCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EstimatedRevenue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EstimatedProfit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EstimatedProfitMargin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EstimatedCost</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@PSA1706</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EstimatedProfit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@PSA11073</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EstimatedProfitMargin</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@PSA11074</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EstimatedRevenue</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS103095</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TempStr</ExtendedDataType>
			<Label>@SYS54087</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>