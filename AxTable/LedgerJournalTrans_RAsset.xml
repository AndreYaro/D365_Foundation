<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_RAsset</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTrans_RAsset extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    public void copyTo(LedgerJournalTrans_RAsset _destination)
    {
        SysDictField field;
        FieldId fieldId;
        SysDictTable sysDictTable = new SysDictTable(tableNum(LedgerJournalTrans_RAsset));
        Set fieldsSet;
        Set systemFieldIds = new Set(Types::Integer);
        SetEnumerator fieldSetEnumerator;

        systemFieldIds.add(fieldNum(LedgerJournalTrans_RAsset, RecId));
        systemFieldIds.add(fieldNum(LedgerJournalTrans_RAsset, RecVersion));
        systemFieldIds.add(fieldNum(LedgerJournalTrans_RAsset, DataAreaId));

        fieldsSet = sysDictTable.fields();
        fieldSetEnumerator = fieldsSet.getEnumerator();
        while (fieldSetEnumerator.moveNext())
        {
            field = fieldSetEnumerator.current();
            fieldId = field.id();
            if (!systemFieldIds.in(fieldId))
            {
                _destination.(fieldId) = this.(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxGroupDepreciations</Name>
				<Source><![CDATA[
    public void deleteTaxGroupDepreciations()
    {
        LedgerJournalTrans          ledgerJournalTrans, ledgerJournalTransLink;
        LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset;
        RAssetStandards             rAssetStandards, rAssetStandardsCur;
    
        if (this.AssetId && this.StandardId &&
            this.TransType == RAssetTransType::Depreciation)
        {
            rAssetStandardsCur = RAssetStandards::find(this.AssetId, this.StandardId);
    
            ledgerJournalTransLink = LedgerJournalTrans::findRecId(this.RefRecId, false);
    
            if (rAssetStandardsCur.assetDeprMethod(this.getTransDate(ledgerJournalTransLink) - 1) != RAssetDeprMethod::TaxNonLinearGroup)
                return;
    
            while select forupdate ledgerJournalTrans
                where ledgerJournalTrans.RecId    != ledgerJournalTransLink.RecId
            join forupdate ledgerJournalTrans_RAsset
                where ledgerJournalTrans_RAsset.RefRecId  == ledgerJournalTrans.RecId  &&
                      ledgerJournalTrans_RAsset.TransType == RAssetTransType::Depreciation
            exists join rAssetStandards
                where rAssetStandards.AssetId         == ledgerJournalTrans_RAsset.AssetId    &&
                      rAssetStandards.AssetStandardId == ledgerJournalTrans_RAsset.StandardId &&
                      rAssetStandards.AssetGroup      == rAssetStandardsCur.AssetGroup
            {
                ledgerJournalTrans_RAsset.doDelete();
                ledgerJournalTrans.doDelete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTable</Name>
				<Source><![CDATA[
    public LedgerJournalTable ledgerJournalTable()
    {
        return LedgerJournalTrans::findRecId(this.RefRecId, false).ledgerJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>madeDisposable</Name>
				<Source><![CDATA[
    public LedgerJournalTrans_RAsset madeDisposable(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset;

        if (this.CanDisposal)
        {
            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher    &&
                      ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum &&
                      ! ledgerJournalTrans.Invisible
            join forupdate ledgerJournalTrans_RAsset
                where ledgerJournalTrans_RAsset.RefRecId == ledgerJournalTrans.RecId &&
                      ! ledgerJournalTrans_RAsset.CanDisposal                        &&
                      ! ledgerJournalTrans_RAsset.ToFromRecId;
            if (ledgerJournalTrans_RAsset.RecId)
            {
                ledgerJournalTrans_RAsset.CanDisposal = true;
                ledgerJournalTrans_RAsset.ToFromRecId = 0;
                ledgerJournalTrans_RAsset.update();
            }
            else
            {
                select firstonly forupdate ledgerJournalTrans
                    where ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher    &&
                          ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum &&
                          ! ledgerJournalTrans.Invisible
                join forupdate ledgerJournalTrans_RAsset
                    where ledgerJournalTrans_RAsset.RefRecId == ledgerJournalTrans.RecId &&
                          ! ledgerJournalTrans_RAsset.CanDisposal;
                if (ledgerJournalTrans_RAsset.RecId)
                {
                    ledgerJournalTrans_RAsset.CanDisposal = true;
                    ledgerJournalTrans_RAsset.ToFromRecId = ledgerJournalTrans.RecId;
                    ledgerJournalTrans_RAsset.update();
                }
            }
        }
        else
        {
            //BP deviation documented
            select firstonly ledgerJournalTrans
                where ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher    &&
                      ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum &&
                      ! ledgerJournalTrans.Invisible
            join forupdate ledgerJournalTrans_RAsset
                where ledgerJournalTrans_RAsset.RefRecId == ledgerJournalTrans.RecId &&
                      ! ledgerJournalTrans_RAsset.ToFromRecId;
        }

        return ledgerJournalTrans_RAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumDisposable</Name>
				<Source><![CDATA[
    public Amount sumDisposable(LedgerJournalTrans _ledgerJournalTrans)
    {
        Amount                    amount;
        LedgerJournalTrans        ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;

        while select ledgerJournalTrans
            where ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher           &&
                  ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum        &&
                  (ledgerJournalTrans.TransDate == _ledgerJournalTrans.TransDate         ||
                   ledgerJournalTrans.TransDate == _ledgerJournalTrans.orig().TransDate)
        join TableId from ledgerJournalTrans_RAsset
            where ledgerJournalTrans_RAsset.RefRecId == ledgerJournalTrans.RecId  &&
                  ledgerJournalTrans_RAsset.PostValue == RAssetPostValue::SaleValue
        {
            amount += ledgerJournalTrans.calcLineAmountExclTax_RU();
        }
        amount = amount - _ledgerJournalTrans.orig().calcLineAmountExclTax_RU() + _ledgerJournalTrans.calcLineAmountExclTax_RU();

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumPartial</Name>
				<Source><![CDATA[
    public Amount sumPartial(LedgerJournalTrans _ledgerJournalTrans)
    {
        Amount                      amount;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset;
        ;

        while select ledgerJournalTrans
            where ledgerJournalTrans.Voucher               == _ledgerJournalTrans.Voucher     &&
                  ledgerJournalTrans.TransDate             == _ledgerJournalTrans.TransDate   &&
                  ledgerJournalTrans.JournalNum            == _ledgerJournalTrans.JournalNum
            join TransType from ledgerJournalTrans_RAsset
                where ledgerJournalTrans_RAsset.RefRecId   == ledgerJournalTrans.RecId        &&
                      (ledgerJournalTrans_RAsset.TransType == RAssetTransType::AcquisitionAdj ||
                       ledgerJournalTrans_RAsset.TransType == RAssetTransType::DepreciationAdj)
        {
            if (ledgerJournalTrans_RAsset.TransType == RAssetTransType::AcquisitionAdj)
                amount += ledgerJournalTrans.calcLineAmountExclTax_RU();
            else
                amount -= ledgerJournalTrans.calcLineAmountExclTax_RU();
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;
        if (! this.BudgetModel)
        {
            this.updateGainLoss();
        }
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGainLoss</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates and updates the gain and loss general journal amount.
    /// </summary>
    public void updateGainLoss()
    {
        LedgerJournalTrans            ljTransGainLoss;
        LedgerJournalTrans_RAsset     ljTrans_RAssetGainLoss;
        RAssetAmount                  assetAmount;
        CurrencyCode                  currencyCode;
        RassetDisposalValue           assetDisposalValue;
        LedgerDimensionDefaultAccount defaultAccount,
                                      offsetDefaultAccount;
        RAssetJournal                 rAssetJournal;
        LedgerJournalTrans            ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RefRecId, false);
        TransDate                     transDate = this.getTransDate(ledgerJournalTrans);
    
        if (this.PostValue != RAssetPostValue::SaleValue)
            return;
    
        assetAmount = this.sumDisposable(ledgerJournalTrans);
        if (this.TransType == RAssetTransType::PartialTakeDown)
        {
            assetAmount -= this.sumPartial(ledgerJournalTrans);
        }
        else
        {
            currencyCode  = RAssetStandards::find(this.AssetId, this.StandardId).CurrencyCode;
            assetAmount = CurrencyExchangeHelper::curAmount2CurAmount(assetAmount, ledgerJournalTrans.CurrencyCode, currencyCode, transDate);
            assetAmount = RassetDisposalValue::postValue(this.AssetId, this.StandardId, RAssetPostValue::Gain, assetAmount, transDate);
        }
        assetAmount = CurrencyExchangeHelper::curAmount2CurAmount(assetAmount, currencyCode, ledgerJournalTrans.CurrencyCode, transDate);
    
        assetDisposalValue = new RassetDisposalValue(ledgerJournalTrans.PostingProfile,
                                                     RAssetDisposalParameters::transType2DisposalType(this.TransType),
                                                     RAssetPostValue::Gain,
                                                     this.AssetId,
                                                     assetAmount <= 0 ? RAssetPostType::Negative : RAssetPostType::Positive);
        if (! assetDisposalValue.postThis(assetAmount, this.StandardId))
            return;
    
        defaultAccount       = assetDisposalValue.ledgerDimension();
        offsetDefaultAccount = assetDisposalValue.offsetLedgerDimension();
    
        select firstonly forupdate ljTransGainLoss
            where ljTransGainLoss.Voucher    == ledgerJournalTrans.Voucher     &&
                  ljTransGainLoss.TransDate  == ledgerJournalTrans.TransDate   &&
                  ljTransGainLoss.JournalNum == ledgerJournalTrans.JournalNum
        join forupdate ljTrans_RAssetGainLoss
            where ljTrans_RAssetGainLoss.RefRecId  == ljTransGainLoss.RecId    &&
                  ljTrans_RAssetGainLoss.PostValue == RAssetPostValue::Gain;
    
        if (ljTransGainLoss.RecId)
        {
            if (ljTransGainLoss.AmountCurDebit != assetAmount)
            {
                if (assetAmount || ! ljTransGainLoss.Invisible)
                {
                    ljTransGainLoss.AmountCurCredit = 0;
                    ljTransGainLoss.AmountCurDebit  = abs(assetAmount);
                    ljTrans_RAssetGainLoss.DebLedgerDimension = defaultAccount ? defaultAccount : 0;
                    ljTransGainLoss.OffsetLedgerDimension = offsetDefaultAccount ?
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(offsetDefaultAccount, ljTransGainLoss.DefaultDimension) : 0;
    
                    ljTransGainLoss.doUpdate();
                    ljTrans_RAssetGainLoss.doUpdate();
                }
                else
                {
                    ljTransGainLoss.delete();
                }
            }
        }
        else
        {
            if (assetAmount)
            {
                rAssetJournal   = new RAssetJournal(ledgerJournalTrans.JournalNum, this.TransType);
                rAssetJournal.parmReasonRefRecId(ledgerJournalTrans.ReasonRefRecID);
    
                rAssetJournal.createTrans(abs(assetAmount),
                                          RAssetTable::find(this.AssetId),
                                          ledgerJournalTrans.TransDate,
                                          RAssetStandards::find(this.AssetId, this.StandardId),
                                          '',
                                          enum2str(RAssetPostValue::Gain),
                                          assetDisposalValue.ledgerDimension(),
                                          NoYes::No);
                ljTransGainLoss                           = rAssetJournal.ledgerJournalTrans();
                ljTrans_RAssetGainLoss                    = rAssetJournal.ledgerJournalTrans_RAsset();
                ljTransGainLoss.Voucher                   = ledgerJournalTrans.Voucher;
                ljTrans_RAssetGainLoss.DebLedgerDimension = defaultAccount ? defaultAccount : 0;
                ljTransGainLoss.OffsetLedgerDimension     = offsetDefaultAccount ?
                                                            LedgerDimensionFacade::serviceCreateLedgerDimension(offsetDefaultAccount, ljTransGainLoss.DefaultDimension) : 0;
                ljTransGainLoss.Invisible                 = assetDisposalValue.invisible();
                ljTransGainLoss.NoEdit                    = assetDisposalValue.invisible();
                ljTrans_RAssetGainLoss.ToFromRecId        = ledgerJournalTrans.RecId;
                ljTrans_RAssetGainLoss.PostValue          = RAssetPostValue::Gain;
                ljTransGainLoss.doUpdate();
                ljTrans_RAssetGainLoss.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetIdForWrite</Name>
				<Source><![CDATA[
    private boolean validateAssetIdForWrite()
    {
        boolean isValid = true;
        ;

        if (!this.AssetId)
        {
            isValid = checkFailed("@SYS113323");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetModelForWrite</Name>
				<Source><![CDATA[
    private boolean validateBudgetModelForWrite()
    {
        boolean isValid = true;

        if (this.ledgerJournalTable().JournalType == LedgerJournalType::AssetBudgets_RU && ! this.BudgetModel)
        {
            isValid = checkFailed("@SYS71103");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        LedgerJournalTrans_RAsset ljt_RAsset;
        LedgerJournalTrans        ljt, ljt_this;
        RAssetTrans               rAssetTrans;
        Common                    commonParent;
        boolean ret;

        boolean isStornoTrans()
        {
            return this.ToFromRecId                          &&
                   RAssetTrans::find(this.ToFromRecId).RecId &&
                   RAssetTrans::find(this.ToFromRecId).AssetTransType == RAssetTransType::Depreciation;
        }

        ret = super();

        if (isStornoTrans())
        {
            if (FormDataUtil::isFormDataSource(this))
            {
                commonParent = this.joinParent();
                if (commonParent is LedgerJournalTrans)
                {
                    ljt_this = commonParent as LedgerJournalTrans;
                }
            }
            if (!ljt_this)
            {
                ljt_this = LedgerJournalTrans::findRecId(this.RefRecId, false);
            }
            select firstonly RecId from ljt_RAsset
                where ljt_RAsset.AssetId    == this.AssetId    &&
                      ljt_RAsset.StandardId == this.StandardId &&
                      ljt_RAsset.TransType  == this.TransType  &&
                      ljt_RAsset.RecId      != this.RecId      &&
                      ljt_RAsset.ToFromRecId
            exists join rAssetTrans
                where rAssetTrans.RecId          == ljt_RAsset.ToFromRecId &&
                      rAssetTrans.AssetTransType == RAssetTransType::Depreciation
            exists join ljt
                where ljt.RecId     == ljt_RAsset.RefRecId &&
                      ljt.TransDate <  ljt_this.TransDate;

            if (ljt_RAsset.RecId)
                ret = checkFailed(strFmt("@SYS115984", "@SYS67341", this.AssetId, this.StandardId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        LedgerJournalTrans_RAsset  joinedTrans;
        LedgerJournalTrans         joinedLedgerJournalTrans;
        RAssetGroup                rAssetGroup;
        RAssetStandards            rAssetStandrds;
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(LedgerJournalTrans_RAsset, DepreciationBonusId):

                rAssetStandrds = RAssetStandards::find(this.AssetId, this.StandardId);

                if (rAssetStandrds.assetDeprMethod(this.DeprPeriod) != RAssetDeprMethod::StraightLine &&
                     rAssetStandrds.assetDeprMethod(this.DeprPeriod) != RAssetDeprMethod::TaxNonLinearGroup)
                {
                    ret = checkFailed("@GLS116838");
                }
                else
                {
                    if (this.DepreciationBonusId == '' && this.TransType == RAssetTransType::Revaluation && this.orig().DepreciationBonusId)
                    {
                        select firstonly RecId, RefRecId from joinedTrans
                            where joinedTrans.ToFromRecId == this.RefRecId                 &&
                                  joinedTrans.TransType   == RAssetTransType::Depreciation &&
                                  joinedTrans.DepreciationBonusId;

                        if (joinedTrans)
                        {
                            select firstonly Voucher from joinedLedgerJournalTrans
                                where joinedLedgerJournalTrans.RecId == joinedTrans.RefRecId;

                            ret = checkFailed(strFmt("@GLS114351", joinedLedgerJournalTrans.Voucher));
                        }
                    }

                    rAssetGroup = RAssetGroup::find(RAssetStandards::find(this.AssetId, this.StandardId).AssetGroup);
                    if (RAssetBonus::find(this.DepreciationBonusId).Percentage > rAssetGroup.DepreciationBonusPercent)
                    {
                        ret = checkFailed(strFmt("@GLS114350",
                                          rAssetGroup.DepreciationBonusPercent,
                                          rAssetGroup.AssetGroupId));
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = true;

        isValid = super();

        if (isValid)
        {
            isValid = this.validateAssetIdForWrite();
        }

        if (isValid)
        {
            isValid = this.validateBudgetModelForWrite();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(LedgerJournalTransRefRecId _refRecId )
    {
        boolean ret = true;
        ;

        if (!LedgerJournalTrans_RAsset::exist(_refRecId))
        {
            ret = checkFailed(strFmt(LedgerJournalTrans_RAsset::txtNotExist(), _refRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(LedgerJournalTransRefRecId _refRecId )
    {
        boolean found;
        ;

        found = (select firstonly RecId from ledgerJournalTrans_RAsset
                    where ledgerJournalTrans_RAsset.RefRecId == _refRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static LedgerJournalTrans_RAsset find(LedgerJournalTransRefRecId _refRecId,
                                                 boolean                    _forUpdate = false,
                                                 ConcurrencyModel           _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;
        ;

        ledgerJournalTrans_RAsset.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTrans_RAsset.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerJournalTrans_RAsset
            where ledgerJournalTrans_RAsset.RefRecId == _refRecId;

        return ledgerJournalTrans_RAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102239";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date of fixed asset operation.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The record in the <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate getTransDate(LedgerJournalTrans _ledgerJournalTrans = null)
    {
        TransDate transDate;
        ;
    
        if (this.CorrectedPeriod)
        {
            transDate = this.CorrectedPeriod;
        }
        else
        {
            if (prmIsDefault(_ledgerJournalTrans))
            {
                transDate = (select firstonly TransDate from LedgerJournalTrans
                                where LedgerJournalTrans.RecId == this.RefRecId).TransDate;
            }
            else
            {
                transDate = _ledgerJournalTrans.TransDate;
            }
        }
    
        return transDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@SYS126168</DeveloperDocumentation>
	<Label>@SYS111034</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>StandardId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>StandardIdAssetId</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RefRecId</PrimaryIndex>
	<ReplacementKey>RefRecId</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Account</Name>
			<Label>@SYS24500</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DebLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Budget</Name>
			<Label>@SYS80981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BudgetModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetPostingStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Depreciation</Name>
			<Label>@SYS67341</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeprPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DepreciationBonus</Name>
			<Label>@GLS116827</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DepreciationBonusId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@GLS106473</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ToFromRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CanDisposal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StornoRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction</Name>
			<Label>@GLS105434</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectedPeriod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BudgetModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetBudgetModelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BudgetPostingStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetBudgetPostingStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanDisposal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS116236</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DebLedgerDimension</Name>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DepreciationBonusId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetDeprBonusId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DeprPeriod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetTransDate</ExtendedDataType>
			<Label>@SYS67451</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PostValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetPostValue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StandardId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetStandardId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>StornoRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ToFromRecId</Name>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>RAssetRelationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RAssetTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CorrectedPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CorrectedPeriod_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StandardIdAssetId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>StandardId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimensionAttributeValueCombinationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DebLedgerDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RAssetBonusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DepreciationBonusId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>BudgetModel</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BudgetModel</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BudgetModel</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type_Extern</Name>
					<SourceEDT>RAssetBudgetModelId</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>HeadingSub::Heading</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BudgetModel</Name>
					<SourceEDT>RAssetBudgetModelId</SourceEDT>
					<Field>BudgetModel</Field>
					<RelatedField>ModelId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_RAsset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DebLedgerDimension</Name>
					<Field>DebLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerJournalTrans_RAsset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTransTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTransTo</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerJournalTrans_RAsset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToFromRecId</Name>
					<Field>ToFromRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetBonus</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetBonus</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetBonus</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_RAsset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DepreciationBonusId</Name>
					<Field>DepreciationBonusId</Field>
					<RelatedField>BonusId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BonusIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetStandards</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetStandards</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetStandards</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_RAsset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardId</Name>
					<Field>StandardId</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetStandardTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetStandardTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StandardId</Name>
					<SourceEDT>RAssetStandardId</SourceEDT>
					<Field>StandardId</Field>
					<RelatedField>AssetStandardId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>assetStandardIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTrans</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_RAsset</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StornoRecId</Name>
					<Field>StornoRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>