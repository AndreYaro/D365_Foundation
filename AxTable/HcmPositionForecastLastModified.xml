<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastLastModified</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HcmPositionForecastLastModified extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayStatusIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the line of the current record in the <c>HcmPositionForecast</c> table is dirty or not.
    /// </summary>
    /// <returns>
    /// The <c>HcmPositionForecastStateIcon</c> table status icon; otherwise, a blank icon.
    /// </returns>
    display HcmPositionForecastStateIcon displayStatusIcon()
    {
        #resAppl
        Integer resourceId = 0;

        if (this.requireRecalculation())
        {
            resourceId = #ImageWarning;
        }

        return resourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markPositionAsDirty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PositionForecastScenarioState</c>.
    /// </summary>
    /// <param name="_positionForecastScenarioState">
    /// The value of enum <c>HcmPositionForecastScenarioState</c> to be updated.
    /// </param>
    public void markPositionAsDirty(HcmPositionForecastScenarioState _positionForecastScenarioState)
    {
        if (this.PositionForecastScenarioState != _positionForecastScenarioState)
        {
            this.PositionForecastScenarioState = _positionForecastScenarioState;

            ttsbegin;
            this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireRecalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the position forecast is not clean.
    /// </summary>
    /// <returns>
    /// true, if the specified record exists; otherwise, false.
    /// </returns>
    public boolean requireRecalculation()
    {
        return this.PositionForecastScenarioState != HcmPositionForecastScenarioState::Clean;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the update to the database.
    /// </summary>
    /// <remarks>
    /// This table should never register a record version update error. By verifying the current record version with the latest record version
    /// and synchronizing the data when a difference is detected any record version errors should be preventable.
    /// </remarks>
    public void update()
    {
        HcmPositionForecastLastModified positionForecastLastModifiedLocal = HcmPositionForecastLastModified::find(this.RecId);

        if (this.RecVersion != positionForecastLastModifiedLocal.RecVersion)
        {
            // Synchronize the data when a record version difference is detected to prevent a record version error.
            this.data(positionForecastLastModifiedLocal);
        }

        // Dirty this field to force an update.
        this.Dummy = !this.Dummy;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a record Id exists in <c>HcmPositionForecastlastModified</c> table and shows an infolog message if record does not exist.
    /// </summary>
    /// <param name="_recId">
    ///     The record Id value.
    /// </param>
    /// <returns>
    ///     true if the identification type id exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(HcmPositionForecastLastModifiedRecId _recId)
    {
        boolean ret = true;

        if (!HcmPositionForecastLastModified::exist(_recId))
        {
            ret = checkFailed(strFmt(HcmPositionForecastLastModified::txtNotExist(), tableStr(HcmPositionForecastLastModified)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record ID exists in the <c>HcmPositionForecastlastModified</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID value.
    /// </param>
    /// <returns>
    /// true if the record ID exists; otherwise, false .
    /// </returns>
    public static boolean exist(HcmPositionForecastLastModifiedRecId _recId)
    {
        return _recId && (select firstonly RecId from hcmPositionForecastlastModified
                    where hcmPositionForecastlastModified.RecId == _recId).RecId!= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastlastModified</c> table that has a specified record ID
    /// value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency model settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A <c>HcmPositionForecastlastModified</c> record.
    /// </returns>
    public static HcmPositionForecastLastModified find(
    HcmPositionForecastLastModifiedRecId  _recId,
    boolean _forUpdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastLastModified hcmPositionForecastLastModified;

        hcmPositionForecastLastModified.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastLastModified.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastLastModified
            where hcmPositionForecastLastModified.RecId == _recId;

        return hcmPositionForecastLastModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPositionForecastScenerio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>HcmPositionForecastlastModified</c> table that has a specified
    /// <c>Position</c> value.
    /// </summary>
    /// <param name="_positionForecastScenerio">
    /// A <c>Position</c> value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An enumeration value that indicates the concurrency model settings to use on the table; optional.
    /// </param>
    /// <returns>
    /// A record from the <c>HcmPositionForecastlastModified</c> table.
    /// </returns>
    public static HcmPositionForecastLastModified findByPositionForecastScenerio(
    HcmPositionForecastScenarioRecId _positionForecastScenerio,
    boolean _forUpdate = false,
    ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        HcmPositionForecastLastModified hcmPositionForecastLastModified;

        hcmPositionForecastLastModified.selectForUpdate(_forUpdate );

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hcmPositionForecastLastModified.concurrencyModel(_concurrencyModel);
        }

        select firstonly hcmPositionForecastLastModified
            where hcmPositionForecastLastModified.PositionForecastScenario == _positionForecastScenerio;

        return hcmPositionForecastLastModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS321009";
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBudgetAmountForForecastPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the budget amount when the forecast position doesn't calculate its budget amounts yet.
    /// </summary>
    /// <param name = "_positionForecastScenarioId">
    /// The record ID of the <c>HcmPositionForecastScenario</c> table for the specific forecast position.
    /// </param>
    public static void calculateBudgetAmountForForecastPosition(HcmPositionForecastScenarioRecId _positionForecastScenarioId)
    {
        HcmPositionForecastLastModified positionForecastLastModified;

        positionForecastLastModified = HcmPositionForecastLastModified::findByPositionForecastScenerio(_positionForecastScenarioId);

        if (positionForecastLastModified.requireRecalculation())
        {
            // Launch the calculation engine
            HcmPositionForecastCalcProcessLauncher positionForecastLauncher;
            HcmPositionForecastScenario positionForecastScenario = HcmPositionForecastScenario::find(_positionForecastScenarioId);

            positionForecastLauncher = HcmPositionForecastCalcProcessLauncher::newForecastCalculateSinglePosition(positionForecastScenario);
            positionForecastLauncher.runPositionForecstCalculationProcess();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerAdv2BudgetPlanning</ConfigurationKey>
	<DeveloperDocumentation>@GLS190146</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@GLS190170</Label>
	<TitleField1>PositionForecastScenario</TitleField1>
	<TitleField2>modifiedDateTime</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Budget</Modules>
	<ReplacementKey>PositionForecastIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>modifiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecastScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS318403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PositionForecastScenario</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LastModified</Name>
			<Label>@SYS327462</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>modifiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Dummy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PositionForecastScenario</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>HcmPositionForecastScenarioRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PositionForecastScenarioState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>HcmPositionForecastScenarioState</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PositionForecastIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PositionForecastScenario</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PositionForecastScenario</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HcmPositionForecastScenario</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PositionForecastScenario</Name>
					<Field>PositionForecastScenario</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>