<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormulaCoBy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PmfFormulaCoBy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomTable</Name>
				<Source><![CDATA[
    public BOMTable bomTable(boolean _forUpdate = false)
    {
        return BOMTable::find(this.bomId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return formula coby product original BOM/Formula version.
    /// </summary>
    /// <param name="_forUpdate">defaults to false and therefore not selected for update</param>
    /// <returns>related BOM/Formula version.</returns>
    /// <remarks>
    /// <syntax>
    /// public BOMVersion bomVersion(boolean _forUpdate)
    /// </syntax>
    /// </remarks>
    public BOMVersion bomVersion(boolean _forUpdate = false)
    {
        return BOMVersion::findRecId(this.bomVersionRefRecId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the product dimensions are valid for the formula item.
    /// </summary>
    /// <returns>true if product dimensions are valid; false, otherwise.</returns>
    public boolean checkItemDim()
    {
        return InventTable::checkProductDimensions(this.ItemId, this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>coByQty</Name>
				<Source><![CDATA[
    public PmfCoByQty coByQty(Qty _seriesSize = 1)
    {
        return this.PmfCoByMap::coByQty(_seriesSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>coCWPosQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the calculation quantity in CW units.
    /// </summary>
    /// <returns>
    ///     The CW positional quantity on the calculation.
    /// </returns>
    public display PdsCWInventQty coCWPosQty()
    {
        PdsCWInventQty  cwQty   = 0;
        Qty             posQty  = this.coPosQty();

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            cwQty = PdsCatchWeight::cwQty(this.ItemId, posQty);
        }
        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>coPosQty</Name>
				<Source><![CDATA[
    public display InventQty coPosQty()
    {
        InventQty   qty = 0;

        if (hasFieldAccess(
                tableNum(PmfFormulaCoBy),
                fieldNum(PmfFormulaCoBy,CoByQty),AccessType::View))
        {
            qty = this.CoByQty > 0
                ? this.PmfCoByMap::coByQty()
                : -this.PmfCoByMap::coByQty();
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        if (#PDSLotGenealogyEnabled)
        {
            this.deleteProductAttributeTransferRelation();
        }
        else
        {
            BOMVersion  bomVersion  = this.bomVersion();
            ItemId      itemId      = this.ItemId;

            PDSBatchAttribTransfer::syncVersionCoProduct(bomVersion, itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProductAttributeTransferRelation</Name>
				<Source><![CDATA[
    private void deleteProductAttributeTransferRelation()
    {
        PDSBatchAttribTransfer transfers;
        InventTable            coProductItem;

        // Delete obsolete transfers if a co-product no longer exists on formula
        delete_from transfers
            where transfers.BOMId     == this.BOMId
               && transfers.EndItemId == this.ItemId
            exists join coProductItem
                where coProductItem.ItemId         == transfers.EndItemId
                   && coProductItem.PmfProductType == PmfProductType::Co_Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCostAllocationAmt</Name>
				<Source><![CDATA[
    public edit PmfEditOverheadAmt editCostAllocationAmt(
        boolean         _set,
        PmfOverheadAmt  _pmfOverheadAmount)
    {
        PmfOverheadAmt  pmfOverheadAmount = 0;

        if (hasFieldAccess(
                tableNum(PmfFormulaCoBy),
                fieldNum(PmfFormulaCoBy,CostAllocationAmt),
                    _set ? AccessType::Edit : AccessType::View))
        {
            if (_set)
            {
                if (this.BurdenType == PmfBurdenType::None)
                {
                    if (_pmfOverheadAmount != 0)
                    {
                        checkFailed("@PRO2861");
                    }
                    this.CostAllocationAmt = 0;
                }
                else
                {
                    if (_pmfOverheadAmount > 0)
                    {
                        this.CostAllocationAmt = _pmfOverheadAmount;

                        if (this.CostAllocationPct)
                        {
                            this.CostAllocationPct = 0;
                        }
                    }
                    else
                    {
                        checkFailed("@PRO943");
                    }
                }
            }

            pmfOverheadAmount = this.CostAllocationAmt;
        }

        return pmfOverheadAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PmfFormulaCoBy</c> record from the <c>BOMVersion</c> record.
    /// </summary>
    /// <param name="_bomVersion">
    /// The <c>BOMVersion</c> source record.
    /// </param>
    public void initFromBOMVersion(BOMVersion _bomVersion)
    {
        this.bomId              = _bomVersion.bomId;
        this.bomVersionRefRecId = _bomVersion.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCoBy</Name>
				<Source><![CDATA[
    public void initFromCoBy(PmfCoByMap _formula)
    {
        // This will also copy the inventDimId
        this.PmfCoByMap::initFromCoByMap(_formula);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the current bills of materials record from an inventTable record.
    /// </summary>
    /// <param name="_inventTable">
    /// An inventTable record.
    /// </param>
    public void initFromInventTable(InventTable _inventTable)
    {
        this.ItemId = _inventTable.ItemId;

        this.defaultItemDimensions();
        this.defaultPdsCWQty();
        this.defaultProductType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CoByQtySerie = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>InventItemPrice</c> record associated with the record.
    /// </summary>
    /// <returns>
    ///     The <c>InventItemPrice</c> record associated with the record.
    /// </returns>
    public InventItemPrice inventItemPrice()
    {
        InventItemPrice inventItemPrice;

        inventItemPrice = InventItemPrice::findCurrent(
                this.ItemId,
                CostingVersionPriceType::Cost,
                this.InventDimId,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                this.inventDim().InventSiteId);

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        InventTable inventTable;

        inventTable = InventTable::find(this.ItemId,_forUpdate);

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    public display UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(this.ItemId,ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isByOrCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is a by-product or co-product.
    /// </summary>
    /// <returns>
    /// true if the item is a by-product; otherwise, false.
    /// </returns>
    public boolean isByOrCoProduct()
    {
        return this.ProductType == PmfProductType::By_Product
            || this.ProductType == PmfProductType::Co_Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the formula coby is the last item in the formula designer tree.
    /// </summary>
    /// <returns>Is formula coby the last item in the formula designer tree.</returns>
    /// <param name="_refRecId">Formula version reference record id..</param>
    /// <remarks>
    /// <syntax>
    /// public boolean isLastItem(RefRecId _refRecId)
    /// </syntax>
    /// </remarks>
    public boolean isLastItem(RefRecId _refRecId)
    {
        PmfFormulaCoBy pmfFormulaCoBy;

        select firstonly RecId from pmfFormulaCoBy
            order by LineNum desc
            where pmfFormulaCoBy.bomId == this.bomId
                && pmfFormulaCoBy.bomVersionRefRecId == _refRecId;

        return pmfFormulaCoBy.RecId == this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNameGrid</Name>
				<Source><![CDATA[
    public display ItemNameDisplayGrid itemNameGrid()
    {
        return this.itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinChildTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a joined table record if the current record is joined to the specified table.
    /// </summary>
    /// <param name="_tableId">
    ///    A string that holds the table ID.
    /// </param>
    /// <returns>
    ///    A record of any type; otherwise, null.
    /// </returns>
    public Common joinChildTable(TableId _tableId)
    {
        Common      joinBuffer;
        Common      emptyBuffer;

        joinBuffer = this.joinChild();

        while (joinBuffer.TableId != emptyBuffer.TableId)
        {
            if (joinBuffer.TableId == _tableId)
            {
                return joinBuffer;
            }
            joinBuffer = joinBuffer.joinChild();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets formula coby next line number available.
    /// </summary>
    /// <param name="_coByBefore" PmfFormulaCoBy="RecId">Formula coby product selected on BOMDesigner.</param>
    /// <returns>Returns if line number was updated.</returns>
    /// <remarks>
    /// <syntax>
    /// public server boolean setLineNumAfter(PmfFormulaCoBy _coByBefore)
    /// </syntax>
    /// </remarks>
    public boolean setLineNumAfter(
        PmfFormulaCoBy _coByBefore)
    {
        #COSNumbers
        #define.8(8)

        PmfFormulaCoBy  coByAfter;
        boolean         ret = true;
        BOMId           bomId = this.bomId ? this.bomId : _coByBefore.bomId;

        if (!bomId
            || (this.bomId
                && _coByBefore.bomId
                && _coByBefore.bomId != this.bomId))
        {
            throw error(strFmt("@SYS63093",funcName()));
        }

        select firstonly LineNum
            from coByAfter
            where coByAfter.bomId               == bomId
                && coByAfter.LineNum            > _coByBefore.LineNum
                && coByAfter.bomVersionRefRecId == this.bomVersionRefRecId
                && coByAfter.RecId              != this.RecId;

        if (coByAfter)
        {
            this.LineNum =
                decRound(
                    (coByAfter.LineNum - _coByBefore.LineNum)/#2
                        + _coByBefore.LineNum,
                    #8);

            if (this.LineNum == _coByBefore.LineNum
                || this.LineNum == coByAfter.LineNum)
            {
                ret = false;
            }
        }
        else
        {
            this.LineNum = _coByBefore.LineNum + 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PmfFormulaCoby</c> cost allocation.
    /// </summary>
    public void updateCostAllocation()
    {
        switch (this.CostAllocation)
        {
            case PmfCostAllocationMethod::None :
                this.CostAllocationPct = 0.0;
                break;
            default :
               // break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets field values in regards of the <c>PmfProductType</c> value of the record.
    /// </summary>
    public void updateProductType()
    {
        switch (this.ProductType)
        {
            case PmfProductType::By_Product:
                this.CostAllocation     = PmfCostAllocationMethod::None;
                this.CostAllocationPct  = 0;
                break;

            case PmfProductType::Co_Product:
                this.BurdenType = PmfBurdenType::None;
                this.CostAllocationPct = 0;
                this.CostAllocationAmt = 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a product type is valid.
    /// </summary>
    /// <param name = "_productType">The product type.</param>
    /// <returns>true if the product type is valid; otherwise, false.</returns>
    protected boolean isValidProductType(PmfProductType _productType)
    {
        switch (_productType)
        {
            case PmfProductType::Co_Product:
            case PmfProductType::By_Product:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(PmfFormulaCoBy, ItemId) :
                InventTable inventTable = this.inventTable();
                if (!this.isValidProductType(inventTable.PmfProductType))
                {
                    ret = checkFailed("@PRO2426");
                }
                ret = ret && inventTable.pdsCheckCWItemSetup();
                break;

            case fieldNum(PmfFormulaCoBy,ProductType):
                if (!this.isValidProductType(this.ProductType))
                {
                    ret = checkFailed("@PRO2426");
                }
                break;

            case fieldNum(PmfFormulaCoBy, CoByQty):
                if (this.CoByQty < 0)
                {
                    ret = checkFailed("@PRO2640");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(PmfFormulaCoBy, CostAllocation) :
                    if (ret
                        && this.bomVersion().PmfTotalCostAllocation
                        && this.CostAllocation != PmfCostAllocationMethod::None
                        && this.CostAllocation != PmfCostAllocationMethod::TCA)
                    {
                        ret = checkFailed("@PRO2847");
                    }

                    if (ret
                        && !this.bomVersion().PmfTotalCostAllocation
                        && this.CostAllocation == PmfCostAllocationMethod::TCA)
                    {
                        ret = checkFailed("@PRO2848");
                    }
                break;
                case fieldStr(PmfFormulaCoBy, CostAllocationAmt) :
                    if (ret
                        && this.isRecycledByproduct()
                        && this.CostAllocationAmt)
                    {
                        ret = checkFailed("@SYP4881412");
                    }
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTCA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PmfFormulaCoBy</c> record for TCA requirements.
    /// </summary>
    /// <returns>
    /// true if the <c>PmfFormulaCoBy</c> item has an active cost price; otherwise false.
    /// </returns>
    public boolean validateTCA()
    {
        boolean         ret = true;

        if (this.bomVersion().PmfTotalCostAllocation
            && this.ProductType == PmfProductType::Co_Product)
        {
            if (!this.inventItemPrice().RecId)
            {
                ret = checkFailed(strFmt("@PRO2845", this.ItemId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret
            && this.CostAllocationPct > 100)
        {
            ret = checkFailed(strfmt("@PRO1910","@PRO201",this.ItemId));
        }
        else if (ret
            && this.ProductType == PmfProductType::Co_Product
            && this.bomVersion().pmfTotalCostAlloc(this.RecId) + this.CostAllocationPct > 100)
        {
            ret = checkFailed(strfmt("@PRO204","@PRO201"));
        }

        if (ret
            && this.CostAllocation == PmfCostAllocationMethod::Manual
            && this.CostAllocationPct == 0)
        {
            ret = checkFailed("@PRO2367");
        }

        if (ret)
        {
            ret = this.checkItemDim();
        }

        if (ret
            && this.CoByQtySerie <= 0)
        {
            ret = checkFailed(strFmt("@SYS331080", fieldPName(PmfFormulaCoBy, CoByQtySerie)));
        }

        if (ret
            && this.isRecycledByproduct())
        {
            ret = this.checkRecycledByproduct();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPerSeries</Name>
				<Source><![CDATA[
    public static boolean checkPerSeries(BOMId  _bomId)
    {
        PmfFormulaCoBy  pmfFormulaCoBy;

        if (_bomId)
        {
            select firstonly pmfFormulaCoBy
                   where pmfFormulaCoBy.bomId == _bomId
            &&    pmfFormulaCoBy.CoByQtySerie == 0;

            if (pmfFormulaCoBy)
            {
                return checkFailed('Co/By product per series field must be filled in.');
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns if the record matching formula coby product exists.
    /// </summary>
    /// <param name="_bomId">related formula id.</param>
    /// <param name="_lineNum">coby line number.</param>
    /// <param name="_refRecId">related formula version record id</param>
    /// <param name="_recId">Current recId</param>
    /// <returns>Returns if PmfFormulaCoBy record exist</returns>
    /// <remarks>
    /// <syntax>
    /// public static boolean exist(BOMId _bomId, LineNum _lineNum,PmfBOMVersionRefRecId _refRecId,RecId _recId)
    /// </syntax>
    /// </remarks>
    public static boolean exist(
        BOMId                   _bomId,
        LineNum                 _lineNum,
        PmfBOMVersionRefRecId   _refRecId,
        RecId                   _recId)
    {
        return _bomId
            && (select pmfFormulaCoBy
                    where pmfFormulaCoBy.bomId               == _bomId
                        && pmfFormulaCoBy.LineNum            == _lineNum
                        && pmfFormulaCoBy.bomVersionRefRecId == _refRecId
                        && pmfFormulaCoBy.RecId              == _recId
            ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBOMId</Name>
				<Source><![CDATA[
    public static boolean existBOMId(
        BOMId  _bomId)
    {
        return _bomId
            && (select pmfFormulaCoBy
                    where pmfFormulaCoBy.bomId == _bomId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item exists as a co-product or a by-product on any formula version.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item to search.
    /// </param>
    /// <returns>
    /// true if the item exists as a co-product or a by-product on a formula version; otherwise, false.
    /// </returns>
    public static boolean existItemId(ItemId _itemId)
    {
        return _itemId
            && (select pmfFormulaCoBy
                    where  pmfFormulaCoBy.ItemId == _itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the record matching formulca coby product.
    /// By default this record is not selected for update. This property may be changed via the parameters.
    /// </summary>
    /// <param name="_bomId">related formula id.</param>
    /// <param name="_lineNum">coby line number.</param>
    /// <param name="_refRecId">related formula version record id</param>
    /// <param name="_recId">Current recId</param>
    /// <param name="_forUpdate">defaults to false and therefore not selected for update</param>
    /// <returns>Returns PmfFormulaCoBy record</returns>
    /// <remarks>
    /// <syntax>
    /// public static PmfFormulaCoBy find(BOMId _bomId, LineNum _lineNum,PmfBOMVersionRefRecId _refRecId,RecId _recId,boolean _forUpdate)
    /// </syntax>
    /// </remarks>
    public static PmfFormulaCoBy find(
        BOMId                   _bomId,
        LineNum                 _lineNum,
        PmfBOMVersionRefRecId   _refRecId,
        RecId                   _recId,
        boolean                 _forUpdate = false)
    {
        PmfFormulaCoBy pmfFormulaCoBy;

        pmfFormulaCoBy.selectForUpdate(_forUpdate);

        select firstonly pmfFormulaCoBy
            where pmfFormulaCoBy.bomId                  == _bomId
                && pmfFormulaCoBy.LineNum               == _lineNum
                && pmfFormulaCoBy.bomVersionRefRecId    == _refRecId
                && pmfFormulaCoBy.RecId                 == _recId;

        return pmfFormulaCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns formula coby record.
    /// </summary>
    /// <param name="_recId">Formula version source record id.</param>
    /// <param name="_forUpdate">Update selected record.</param>
    /// <returns>Formula coby record.</returns>
    /// <remarks>
    /// <syntax>
    /// public static PmfFormulaCoBy findRecId(RecId _recId, boolean _forUpdate)
    /// </syntax>
    /// </remarks>
    public static PmfFormulaCoBy findRecId(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        PmfFormulaCoBy coby;

        coby.selectForUpdate(_forUpdate);

        select firstonly coby
            where coby.RecId == _recId;

        return coby;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return last formula coby line number available.
    /// </summary>
    /// <param name="_recId">Formula version source record id.</param>
    /// <returns>Last line number available for formula version coby products.</returns>
    /// <remarks>
    /// <syntax>
    /// public static LineNum lastLineNum(RecId _recId)
    /// </syntax>
    /// </remarks>
    public static LineNum lastLineNum(RecId _recId)
    {
        return (select maxof(LineNum) from pmfFormulaCoBy
                    where pmfFormulaCoBy.bomVersionRefRecId == _recId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return next formula coby line number available.
    /// </summary>
    /// <param name="_recId">Formula version source record id.</param>
    /// <returns>Next line number available for formula version coby products.</returns>
    /// <remarks>
    /// <syntax>
    /// public static LineNum nextLineNum(RecId _recId)
    /// </syntax>
    /// </remarks>
    public static LineNum nextLineNum(RecId _recId)
    {
        return PmfFormulaCoBy::lastLineNum(_recId) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the missing value of the <c>BOMVersionRefRecId</c> based on a BOM version.
    /// </summary>
    /// <param name="_bomVersion">
    /// The version record to update based on.
    /// </param>
    public static void postUpdateBOMVersion(BOMVersion _bomVersion)
    {
        PmfFormulaCoBy  pmfFormulaCoBy;

        ttsbegin;

        update_recordset pmfFormulaCoBy
            setting bomVersionRefRecId = _bomVersion.RecId,
                    CoByQtySerie       = _bomVersion.PmfBatchSize
            where pmfFormulaCoBy.bomId == _bomVersion.bomId
                && !pmfFormulaCoBy.bomVersionRefRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes formula coby product line number and packs them.
    /// </summary>
    /// <param name="_recId">Formula coby product source record id.</param>
    /// <param name="_packInContainer">if returns pack list of updated formula coby products.</param>
    /// <returns>Packed formula coby list.</returns>
    /// <remarks>
    /// <syntax>
    /// public server static container reNumber(RecId _recId, boolean _packInContainer)
    /// </syntax>
    /// </remarks>
    public static container reNumber(
        RecId   _recId,
        boolean _packInContainer = false)
    {
        Map lines = new Map(Types::Int64, Types::Int64);
        int counter;

        container       packedCoBy = conNull();
        PmfFormulaCoBy  coBy;

        if (_recId)
        {
            ttsbegin;

            while select RecId
                from coBy
                where coBy.bomVersionRefRecId == _recId
            {
                lines.insert(coBy.RecId,counter);
                counter++;
            }
            while select forupdate coBy
                where coBy.bomVersionRefRecId == _recId
            {
                counter = lines.lookup(coBy.RecId);
                coBy.LineNum = counter;
                coBy.doUpdate();
                if (_packInContainer)
                {
                    packedCoBy += [coBy.data()];
                }
            }
            ttscommit;
        }

        return packedCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set formula coby product site id from formula version.
    /// </summary>
    /// <param name="_version">Formula version source record.</param>
    /// <remarks>
    /// <syntax>
    /// public static server void setInventSite(BOMVersion _version)
    /// </syntax>
    /// </remarks>
    public static void setInventSite(BOMVersion _version)
    {
        PmfFormulaCoBy  formulaCoBy;
        InventDim       inventDim;

        ttsbegin;

        while select forupdate formulaCoBy
            where formulaCoBy.bomVersionRefRecId == _version.RecId
        {
            if (formulaCoBy.inventDim().InventSiteId != _version.inventSiteId())
            {
                inventDim = formulaCoBy.inventDim();
                inventDim.InventSiteId = _version.inventSiteId();
                inventDim = InventDim::findOrCreate(inventDim);
                formulaCoBy.InventDimId = inventDim.InventDimId;
                formulaCoBy.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecycledByproduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record is a valid recycled byproduct.
    /// </summary>
    /// <returns>
    /// True if fields related to recycled byproduct are validated correctly; false otherwise.
    /// </returns>
    public boolean checkRecycledByproduct()
    {
        boolean ret = true;

        if (this.inventTable().inventModelGroupItem().modelGroup().InventModel != InventModel::StdCost)
        {
            ret = checkFailed("@SYP4881413");
        }

        if (this.CostAllocationAmt)
        {
            ret = checkFailed("@SYP4881412");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecycledByproduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record is a recycled byproduct.
    /// </summary>
    /// <returns>
    /// True if record is a recycled byproduct; false otherwise.
    /// </returns>
    public boolean isRecycledByproduct()
    {
        return  this.ProductType == PmfProductType::By_Product &&
                this.BurdenType  == PmfBurdenType::Recycled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostAllocationPct</Name>
				<Source><![CDATA[
    private void defaultCostAllocationPct()
    {
        if (this.isFieldSet(fieldNum(PmfFormulaCoBy, ProductType))
            && !this.isFieldSet(fieldNum(PmfFormulaCoBy, CostAllocationPct)))
        {
            switch (this.ProductType)
            {
                case PmfProductType::By_Product:
                case PmfProductType::Co_Product:
                    this.CostAllocationPct = 0;
                    break;
            }
        }
        else if (this.isFieldSet(fieldNum(PmfFormulaCoBy, CostAllocationAmt))
                && this.CostAllocationAmt)
        {
            this.CostAllocationPct = 0;
        }
        else
        {
            this.updateCostAllocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostAllocation</Name>
				<Source><![CDATA[
    private void defaultCostAllocation()
    {
        if (this.isFieldSet(fieldNum(PmfFormulaCoBy, ProductType)))
        {
            switch (this.ProductType)
            {
                case PmfProductType::By_Product:
                    this.CostAllocation = PmfCostAllocationMethod::None;
                    break;
                }
        }
        else if (this.BurdenType != PmfBurdenType::None)
        {
            this.CostAllocation = PmfCostAllocationMethod::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCostAllocationAmount</Name>
				<Source><![CDATA[
    private void defaultCostAllocationAmount()
    {
        if (this.isFieldSet(fieldNum(PmfFormulaCoBy, CostAllocationPct)))
        {
            this.CostAllocationAmt = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBurdenType</Name>
				<Source><![CDATA[
    private void defaultBurdenType()
    {
        if (this.isFieldSet(fieldNum(PmfFormulaCoBy, ProductType)))
        {
            switch (this.ProductType)
            {
                case PmfProductType::Co_Product:
                    this.BurdenType = PmfBurdenType::None;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemDimensions</Name>
				<Source><![CDATA[
    private void defaultItemDimensions()
    {
        InventTable     inventTable = this.getExtensionInventTable();
        InventDimParm   inventDimParm;
        InventDim       inventDim = this.inventDim();
        InventDim       inventDimJoin;
        boolean         isCoBySiteLess;

        inventDimParm.initDimBOM(InventDimGroupSetup::newInventTable(inventTable));
        inventDim.clearNotSelectedDim(inventDimParm);

        if (inventDimParm.InventSiteIdFlag && this.bomId)
        {
            inventDim.InventSiteId  = this.bomTable().SiteId;
            isCoBySiteLess          = inventDim.InventSiteId == '';
        }

        inventDim.initFromInventTable(inventTable, InventItemOrderSetupType::Invent, inventDim);

        if (isCoBySiteLess)
        {
            inventDim.InventSiteId      = '';
            inventDim.InventLocationId  = '';
        }

        this.InventDimId        = InventDim::findOrCreate(inventDim).InventDimId;

        // update joined inventDim datasource
        if (FormDataUtil::isFormDataSource(this))
        {
            inventDimJoin = this.joinChildTable(tablenum(InventDim));

            // when called from a new (not saved) record the inventDimJoin buffer is false so the check must be on tableId.
            if (inventDimJoin.TableId == tablenum(InventDim) && FormDataUtil::isFormDataSource(inventDimJoin))
            {
                inventDimJoin.data(inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPdsCWQty</Name>
				<Source><![CDATA[
    private void defaultPdsCWQty()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId) && !this.PdsCWQty)
        {
            this.PdsCWQty = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProductType</Name>
				<Source><![CDATA[
    private void defaultProductType()
    {
        this.ProductType = this.getExtensionInventTable().PmfProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PmfFormulaCoBy, CostAllocationPct):
                this.defaultCostAllocationPct();
                break;

            case fieldnum(PmfFormulaCoBy, CostAllocationAmt):
                this.defaultCostAllocationAmount();
                break;

            case fieldnum(PmfFormulaCoBy, CostAllocation):
                this.defaultCostAllocation();
                break;

            case fieldnum(PmfFormulaCoBy, BurdenType):
                this.defaultBurdenType();
                break;

            case fieldnum(PmfFormulaCoBy, InventDimId):
                this.defaultItemDimensions();
                break;

            case fieldnum(PmfFormulaCoBy, PdsCWQty):
                this.defaultPdsCWQty();
                break;

            case fieldnum(PmfFormulaCoBy, ProductType):
                this.defaultProductType();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return [
                [fieldnum(PmfFormulaCoBy, CostAllocationPct), [fieldNum(PmfFormulaCoBy, ProductType), fieldnum(PmfFormulaCoBy, CoByQty), fieldnum(PmfFormulaCoBy, PdsCWQty), fieldnum(PmfFormulaCoBy, CostAllocation), fieldnum(PmfFormulaCoBy, CostAllocationAmt)]],
                [fieldnum(PmfFormulaCoBy, CostAllocationAmt), [fieldNum(PmfFormulaCoBy, ProductType), fieldnum(PmfFormulaCoBy, CostAllocationPct)]],
                [fieldnum(PmfFormulaCoBy, CostAllocation), [fieldNum(PmfFormulaCoBy, ProductType), fieldnum(PmfFormulaCoBy, BurdenType)]],
                [fieldnum(PmfFormulaCoBy, PdsCWQty), [fieldnum(PmfFormulaCoBy, ItemId)]],
                [fieldnum(PmfFormulaCoBy, InventDimId), [fieldnum(PmfFormulaCoBy, ItemId)]],
                [fieldnum(PmfFormulaCoBy, ProductType), [fieldnum(PmfFormulaCoBy, ItemId)]],
                [fieldnum(PmfFormulaCoBy, BurdenType), [fieldNum(PmfFormulaCoBy, ProductType)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionInventTable</Name>
				<Source><![CDATA[
    private InventTable getExtensionInventTable()
    {
        return this.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PMF</ConfigurationKey>
	<DeveloperDocumentation>@PDS1102</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>PmfFormulaCoBy</FormRef>
	<Label>@SCM:CoByProduct</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>BOMId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>NumIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>NumIdx</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionCalculation</Name>
			<Label>@SYS22165</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CoByQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CoByQtySerie</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FormulaMisc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAllocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAllocationPct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAllocationAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BurdenType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BOMId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWGrp</Name>
			<Label>@PDS72</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundingUp</Name>
			<Label>@SCM:Rounding</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoundUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundUpQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BOMId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BOMId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BOMVersionRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PmfBOMVersionRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BurdenType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfBurdenType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CoByQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCoByQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CoByQtySerie</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCoByQtySerie</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfCostAllocationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAllocationAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfOverheadAmt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAllocationPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCostAllocationPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfCoByRoundUp</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundUpQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfRoundUpQty</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BOMVersionRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BOMId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>PmfCoByMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BOMVersionRefRecId</MapField>
					<MapFieldTo>BOMVersionRefRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProdId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BurdenType</MapField>
					<MapFieldTo>BurdenType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CoByQty</MapField>
					<MapFieldTo>CoByQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUp</MapField>
					<MapFieldTo>RoundUp</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUpQty</MapField>
					<MapFieldTo>RoundUpQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMId</MapField>
					<MapFieldTo>BOMId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CoByQtySerie</MapField>
					<MapFieldTo>CoByQtySerie</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductType</MapField>
					<MapFieldTo>ProductType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAllocation</MapField>
					<MapFieldTo>CostAllocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAllocationPct</MapField>
					<MapFieldTo>CostAllocationPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverheadAmt</MapField>
					<MapFieldTo>CostAllocationAmt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>BOMTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMId</Name>
					<SourceEDT>BOMId</SourceEDT>
					<Field>BOMId</Field>
					<RelatedField>BOMId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BOMVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BOMVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BOMVersionRefRecId</Name>
					<Field>BOMVersionRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>