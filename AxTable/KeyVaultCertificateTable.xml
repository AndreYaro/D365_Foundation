<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeyVaultCertificateTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KeyVaultCertificateTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static KeyVaultCertificateTable find(KeyVaultCertificate _kvCertificate, boolean _forupdate = false)
    {
        KeyVaultCertificateTable keyVaultCertificateTable;

        if (_kvCertificate)
        {
            keyVaultCertificateTable.selectForUpdate(_forupdate);

            select firstonly keyVaultCertificateTable
                where keyVaultCertificateTable.KeyVaultCertificate == _kvCertificate;
        }

        return keyVaultCertificateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static KeyVaultCertificateTable findRecId(RecId _recId, boolean _forupdate = false)
    {
        KeyVaultCertificateTable keyVaultCertificateTable;

        if (_recId)
        {
            keyVaultCertificateTable.selectForUpdate(_forupdate);

            select firstonly keyVaultCertificateTable
                where keyVaultCertificateTable.RecId == _recId;
        }

        return keyVaultCertificateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>KeyVaultCertificateTable</c> row that has the specified name.
    /// </summary>
    /// <param name="_name">
    /// The name of the secret as defined by the user.
    /// </param>
    /// <param name="_forupdate">
    /// The values indicating if the row retrieved is for updating it.
    /// </param>
    /// <returns>
    /// The <c>KeyVaultCertificateTable</c> row that has the specified name.
    /// </returns>
    public static KeyVaultCertificateTable findByName(str _name, boolean _forupdate = false)
    {
        KeyVaultCertificateTable keyVaultCertificateTable;
        keyVaultCertificateTable.selectForUpdate(_forupdate);

        if (_name)
        {
            select firstonly keyVaultCertificateTable
                where keyVaultCertificateTable.Name == _name;
        }

        return keyVaultCertificateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            if (fieldStr(KeyVaultCertificateTable, Name) == _fieldName)
            {// Here we check that the secret name does not contain characters that need to be encoded in a URL.
                if (strCmp(this.Name, System.Net.WebUtility::UrlEncode(this.Name)) != 0)
                {
                    ret = checkFailed("@KeyVault:KeyVaultSecretName_Validation");
                }
            }
            else if (PurchRFQSealedBidFlightingManager::isPreviewEnabled())
            {
                switch (_fieldName)
                {
                    case fieldStr(KeyVaultCertificateTable, KeyVaultCertificate):
                    case fieldStr(KeyVaultCertificateTable, KeyVaultCertificateType):
                        ret = KeyVaultCertificateTable::validateKeyVaultCertificate(this);

                        break;
                }
            }
            else
            {
                switch (_fieldName)
                {
                    case fieldStr(KeyVaultCertificateTable, KeyVaultCertificate):
                        if (this.KeyVaultCertificate && !KeyVaultCertificateTable::isValidKeyVaultCertificate(this.KeyVaultCertificate))
                        {
                            ret = checkFailed(strFmt("@KeyVault:KeyVaultCertificate_Validation", "@KeyVault:KeyVaultSecretIdentifier"));
                        }

                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKeyVaultCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates KeyVaultCertificate based on the KeyVaultCertificateType.
    /// </summary>
    /// <param name = "_keyVaultCertificateTable">The <c>KeyVaultCertificateTable</c>.</param>
    /// <returns>
    /// true if the KeyVaultCertificate is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal final static boolean validateKeyVaultCertificate(KeyVaultCertificateTable _keyVaultCertificateTable)
    {
        boolean ret = true;

        if (_keyVaultCertificateTable.KeyVaultCertificate 
            && !KeyVaultCertificateTable::isValidKeyVaultCertificate(_keyVaultCertificateTable.KeyVaultCertificate))
        {
            switch (_keyVaultCertificateTable.KeyVaultCertificateType)
            {
                case KeyVaultCertificateType::Manual:
                    ret = checkFailed(strFmt("@KeyVault:KeyVaultCertificate_Validation", "@KeyVault:KeyVaultSecretIdentifier"));
                    break;

                case KeyVaultCertificateType::Key:
                    ret = checkFailed(strFmt("@KeyVault:KeyVaultKeyIdentifier_KeyValidation", "@KeyVault:KeyVaultKeyIdentifier"));
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidKeyVaultCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the KeyVaultCertificate is valid.
    /// </summary>
    /// <param name = "_keyVaultCertificate">The KeyVaultCertificate.</param>
    /// <returns>
    /// true if the KeyVaultCertificate is valid; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal final static boolean isValidKeyVaultCertificate(KeyVaultCertificate _keyVaultCertificate)
    {
        return strStartsWith(_keyVaultCertificate, "@KeyVault:KeyVaultURIStartWith");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@KeyVault:TableTitle_KeyVaultCertificateTable</Label>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>SystemAdministration</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultRef</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Grid</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>KeyVaultCertificateType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyVaultCertificate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>KeyVaultCertificate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>KeyVaultRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>KeyVaultRef</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>KeyVaultCertificateType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>KeyVaultCertificateType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>KeyVaultParameters</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>KeyVaultParameters</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>KeyVaultRef</Name>
					<Field>KeyVaultRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>