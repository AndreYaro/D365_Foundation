<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTerminalCounter</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailTerminalCounter extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSalesTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sales turnover amount.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store number.
    /// </param>
    /// <param name="_terminalId">
    /// Register number.
    /// </param>
    /// <param name="_batchId">
    /// Batch Id.
    /// </param>
    /// <param name="_negative">
    /// Denotes that sales lines with negative Qty only are taken in calculation.
    /// </param>
    /// <returns>
    /// Sales turnover amount.
    /// </returns>
    private static Amount calcSalesTurnover(RetailStoreId _storeId, RetailTerminalId _terminalId, RetailPosBatchId _batchId, boolean _negative)
    {
        RetailTransactionSalesTrans retailTransactionSalesTrans;
        RetailTransactionTable      retailTransactionTable;
        RetailTransactionSalesTransExt retailTransactionSalesTransExt;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]) || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            select sum(netAmount), sum(taxAmount) from retailTransactionSalesTrans
            where retailTransactionSalesTrans.store == _storeId &&
                    retailTransactionSalesTrans.terminalId == _terminalId &&
                    (retailTransactionSalesTrans.transactionStatus == RetailEntryStatus::None || retailTransactionSalesTrans.transactionStatus == RetailEntryStatus::Posted) &&
                    ((_negative && retailTransactionSalesTrans.Qty < 0) || (!_negative && retailTransactionSalesTrans.Qty > 0)) &&
                    retailTransactionSalesTrans.giftcard == NoYes::No
            exists join retailTransactionTable
                where retailTransactionTable.store == retailTransactionSalesTrans.store &&
                        retailTransactionTable.terminal == retailTransactionSalesTrans.terminalId &&
                        retailTransactionTable.transactionId == retailTransactionSalesTrans.transactionId &&
                        (retailTransactionTable.type == RetailTransactionType::Sales || 
                            retailTransactionTable.type == RetailTransactionType::AsyncCustomerOrder || 
                            retailTransactionTable.type == RetailTransactionType::CustomerOrder) &&
                        (retailTransactionTable.entryStatus == RetailEntryStatus::None || 
                            retailTransactionTable.entryStatus == RetailEntryStatus::Posted) &&
                        retailTransactionTable.BatchID > _batchId
            notexists join retailTransactionSalesTransExt
                where retailTransactionSalesTransExt.TransactionId == retailTransactionSalesTrans.transactionId &&
                    retailTransactionSalesTransExt.Channel == retailTransactionSalesTrans.Channel &&
                    retailTransactionSalesTransExt.Store == retailTransactionSalesTrans.store &&
                    retailTransactionSalesTransExt.Terminal == retailTransactionSalesTrans.terminalId &&
                    retailTransactionSalesTransExt.LineNum == retailTransactionSalesTrans.lineNum &&
                    retailTransactionSalesTransExt.SkipReports == NoYes::Yes;
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSE]))
        {
            select sum(netAmount), sum(taxAmount) from retailTransactionSalesTrans
            where retailTransactionSalesTrans.store == _storeId &&
                    retailTransactionSalesTrans.terminalId == _terminalId &&
                    (retailTransactionSalesTrans.transactionStatus == RetailEntryStatus::None || retailTransactionSalesTrans.transactionStatus == RetailEntryStatus::Posted) &&
                    ((_negative && retailTransactionSalesTrans.Qty < 0) || (!_negative && retailTransactionSalesTrans.Qty > 0))
            exists join retailTransactionTable
                where retailTransactionTable.store == retailTransactionSalesTrans.store &&
                        retailTransactionTable.terminal == retailTransactionSalesTrans.terminalId &&
                        retailTransactionTable.transactionId == retailTransactionSalesTrans.transactionId &&
                        retailTransactionTable.type == RetailTransactionType::Sales &&
                        (retailTransactionTable.entryStatus == RetailEntryStatus::None || retailTransactionTable.entryStatus == RetailEntryStatus::Posted) &&
                        retailTransactionTable.BatchID > _batchId;
        }

        return -(retailTransactionSalesTrans.netAmount + retailTransactionSalesTrans.taxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the counter values.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store number.
    /// </param>
    /// <param name="_terminalId">
    /// Register number.
    /// </param>
    public static void calculateCounters(RetailStoreId _storeId, RetailTerminalId _terminalId)
    {
        RetailPosBatchTable retailPosBatchTable;
        RetailXZReportTable xzReportTable;
        #ISOCountryRegionCodes

        if (!_storeId || !_terminalId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            select firstOnly xzReportTable
                order by BatchId desc
                where xzReportTable.StoreId == _storeId &&
                      xzReportTable.TerminalId == _terminalId &&
                      xzReportTable.ReportType == RetailXZReportType::ZReport;
            ttsBegin;

            RetailTerminalCounter::recalculateCounterValue(_storeId, _terminalId, RetailCounterType::GrandSales, xzReportTable.BatchId,
                xzReportTable.getGrandTotalSales());
            RetailTerminalCounter::recalculateCounterValue(_storeId, _terminalId, RetailCounterType::GrandReturn, xzReportTable.BatchId,
                xzReportTable.getGrandTotalReturn());

            ttsCommit;
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSE]) || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            select firstOnly BatchId, SalesGrandTotal, ReturnsGrandTotal from retailPosBatchTable
                order by BatchId desc
                where retailPosBatchTable.StoreId == _storeId &&
                      retailPosBatchTable.TerminalId == _terminalId;
            ttsBegin;

            RetailTerminalCounter::recalculateCounterValue(_storeId, _terminalId, RetailCounterType::GrandSales, retailPosBatchTable.BatchId,
                retailPosBatchTable.SalesGrandTotal);
            RetailTerminalCounter::recalculateCounterValue(_storeId, _terminalId, RetailCounterType::GrandReturn, retailPosBatchTable.BatchId,
                retailPosBatchTable.ReturnsGrandTotal);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>RetailTerminalCounter</c> table.
    /// </summary>
    /// <param name="_storeId">
    /// The Id of the store.
    /// </param>
    /// <param name="_terminalId">
    /// The Id of the terminal.
    /// </param>
    /// <param name="_type">
    /// The type of the counter.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailTerminalCounter</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailTerminalCounter find(
        RetailStoreId _storeId,
        RetailTerminalId _terminalId,
        RetailCounterType _type,
        boolean _forUpdate = false)
    {
        RetailTerminalCounter retailTerminalCounter;

        if (_storeId && _terminalId)
        {
            retailTerminalCounter.selectForUpdate(_forUpdate);

            select firstOnly retailTerminalCounter
                where retailTerminalCounter.Store == _storeId &&
                      retailTerminalCounter.Terminal == _terminalId &&
                      retailTerminalCounter.CounterType == _type;
        }

        return retailTerminalCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCounterValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the counter value for the given Store Id, terminal Id and type.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store number.
    /// </param>
    /// <param name="_terminalId">
    /// Register number.
    /// </param>
    /// <param name="_type">
    /// Counter type.
    /// </param>
    /// <returns>
    /// Counter value from the table <c>RetailTerminalCounter</c>.
    /// </returns>
    public static RetailCounterValue getCounterValue(
        RetailStoreId _storeId,
        RetailTerminalId _terminalId,
        RetailCounterType _type)
    {
        return (select firstonly CounterValue from RetailTerminalCounter
                    where RetailTerminalCounter.Store == _storeId &&
                          RetailTerminalCounter.Terminal == _terminalId &&
                          RetailTerminalCounter.CounterType == _type).CounterValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateCounterValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates specified counter value.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store number.
    /// </param>
    /// <param name="_terminalId">
    /// Register number.
    /// </param>
    /// <param name="_type">
    /// Counter type.
    /// </param>
    /// <param name="_batchId">
    /// Batch Id.
    /// </param>
    /// <param name="_baseValue">
    /// Base counter value.
    /// </param>
    private static void recalculateCounterValue(
        RetailStoreId _storeId,
        RetailTerminalId _terminalId,
        RetailCounterType _type,
        RetailPosBatchId _batchId,
        real _baseValue)
    {
        RetailCounterValue calculatedCounterValue;

        switch (_type)
        {
            case RetailCounterType::GrandSales:
                calculatedCounterValue = RetailTerminalCounter::calcSalesTurnover(_storeId, _terminalId, _batchId, true);
                break;
            case RetailCounterType::GrandReturn:
                calculatedCounterValue = RetailTerminalCounter::calcSalesTurnover(_storeId, _terminalId, _batchId, false);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        RetailTerminalCounter::setCounterValue(_storeId, _terminalId, _type, _baseValue + calculatedCounterValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCounterValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of a defined counter.
    /// </summary>
    /// <param name="_storeId">
    /// Retail store number.
    /// </param>
    /// <param name="_terminalId">
    /// Register number.
    /// </param>
    /// <param name="_type">
    /// Counter type.
    /// </param>
    /// <param name="_value">
    /// Counter value to be set.
    /// </param>
    /// <remarks>
    /// If the counter does not exist, insert a new record.
    /// </remarks>
    public static void setCounterValue(
        RetailStoreId _storeId,
        RetailTerminalId _terminalId,
        RetailCounterType _type,
        RetailCounterValue _value)
    {
        RetailTerminalCounter   retailTerminalCounter;

        if (!_storeId || !_terminalId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsBegin;

        retailTerminalCounter = retailTerminalCounter::find(_storeId, _terminalId, _type, true);
        if (!retailTerminalCounter)
        {
            retailTerminalCounter.Store = _storeId;
            retailTerminalCounter.Terminal = _terminalId;
            retailTerminalCounter.CounterType = _type;
            retailTerminalCounter.CounterValue = _value;

            retailTerminalCounter.insert();
        }
        else
        {
            retailTerminalCounter.CounterValue = _value;

            retailTerminalCounter.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<CountryRegionCodes>SE,NO,FR</CountryRegionCodes>
	<DeveloperDocumentation>@SYP4861014</DeveloperDocumentation>
	<Label>@SYP4861013</Label>
	<TitleField1>Store</TitleField1>
	<TitleField2>CounterValue</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>StoreTerminalCounterTypeIdx</ClusteredIndex>
	<Modules>NotApplicable</Modules>
	<PrimaryIndex>StoreTerminalCounterTypeIdx</PrimaryIndex>
	<ReplacementKey>StoreTerminalCounterTypeIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CounterValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CounterType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Store</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Store</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CounterType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Store</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Terminal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CounterType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CounterValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CounterType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailCounterType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CounterValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCounterValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Store</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Terminal</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTerminalId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StoreTerminalCounterTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Store</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Terminal</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CounterType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoresToDeploy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailStoresToDeploy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Store</Name>
					<Field>Store</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RetailStoreNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailStoreTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailStoreTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Store</Name>
					<SourceEDT>RetailStoreId</SourceEDT>
					<Field>Store</Field>
					<RelatedField>StoreNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StoreNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTerminalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTerminalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Terminal</Name>
					<SourceEDT>RetailTerminalId</SourceEDT>
					<Field>Terminal</Field>
					<RelatedField>terminalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>terminalIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>