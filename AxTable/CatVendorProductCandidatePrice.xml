<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorProductCandidatePrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendorProductCandidatePrice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNewPrice</Name>
				<Source><![CDATA[
    display CatProductPricestr getNewPrice()
    {
        CatProductPricestr price ;
        price = CatVendorProductCandidatePrice::getNewValue(this.VendorProductCandidate,
                                                            this.UnitOfMeasure,
                                                            this.CurrencyCode,
                                                            fieldNum(CatVendorProductCandidatePrice,Price)
                                                            );
        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CatVendorProductCandidatePrice</c> table.
    /// </summary>
    /// <param name="recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CatVendorProductCandidatePrice</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// This is a standard method on the table.
    /// </remarks>
    static CatVendorProductCandidatePrice find(RecId           recId,
                                          boolean          _forUpdate = false,
                                          ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CatVendorProductCandidatePrice  catVendorProductCandidatePrice;

        if (recId)
        {
            if (_forUpdate)
            {
                catVendorProductCandidatePrice.selectForUpdate (_forUpdate);
                if (_concurrencyModel != ConcurrencyModel::Auto)
                    catVendorProductCandidatePrice.concurrencyModel(_concurrencyModel);
            }
            catVendorProductCandidatePrice.selectLocked    (_forUpdate);

            select firstonly catVendorProductCandidatePrice
            index hint recId
                where catVendorProductCandidatePrice.RecId == recId;
        }

        return catVendorProductCandidatePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewValue</Name>
				<Source><![CDATA[
    static public CatVendorProductPriceNewValue getNewValue(RefRecId       _catVendorProductCandidateID,
                                                             RefRecId       _unitOfMeasureID,
                                                             CurrencyCode   _currencyCode,
                                                             FieldId    _fieldId)
    {
        CatVendorProductCandidate   catVendorProductCandidate;
        CatVendorProductCandidatePrice  catVendorProductCandidatePrice;
        CatVendorProductPriceNewValue newValue ;
        select firstonly ActionType,Status from catVendorProductCandidate
                where catVendorProductCandidate.RecId == _catVendorProductCandidateID
            join catVendorProductCandidatePrice
                where catVendorProductCandidatePrice.VendorProductCandidate == catVendorProductCandidate.RecId
                    && catVendorProductCandidatePrice.UnitOfMeasure == _unitOfMeasureID
                    && catVendorProductCandidatePrice.CurrencyCode == _currencyCode;

        if (catVendorProductCandidate)
        {
            if (catVendorProductCandidate.ActionType == CatProductActionType::Delete)
            {
                if (catVendorProductCandidate.Status == CatVendorProductStatus::Approved)
                {
                    newValue = "@SYS311898";
                }
                else if (catVendorProductCandidate.Status == CatVendorProductStatus::Rejected)
                {
                    newValue = "@SYS311899";
                }
                else
                {
                    newValue = "@SYS311897";
                }
            }
            else
            {
                newValue = strFmt('%1',catVendorProductCandidatePrice.(_fieldId));
            }
        }

        return newValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductCandidatePriceCurrentValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value of the product prices.
    /// </summary>
    /// <param name="_catVendorCatalogMaintenanceRequestId">
    /// The record ID of a <c>CatVendorCatalogMaintenanceRequest</c> record.
    /// </param>
    /// <returns>
    /// A <c>CatVendorProductCandidatePrice</c> table buffer.
    /// </returns>
    public static CatVendorProductCandidatePrice getProductCandidatePriceCurrentValues(RefRecId _catVendorCatalogMaintenanceRequestId)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidatePrice      catVendorProductCandidatePriceTmp;
        CatVendorProductCandidatePrice      catVendorProductCandidatePrice;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorApprovedProduct            catVendorApprovedProduct;
        CatVendorCatalog                    catVendorCatalog;
        PriceDiscTable                      priceDiscTable;
        UnitOfMeasure                       unitOfMeasure;
        InventTable                         inventTable;
        TransDate                           now = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) ;
        TransDate                           nullDate;

        catVendorProductCandidatePriceTmp.setTmp();
        while select VendorCatalog from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.RecId == _catVendorCatalogMaintenanceRequestId

            join VendorParty from catVendorCatalog
                    where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog

            join VendorProductCode from catVendorProductCandidate
                    where catVendorProductCandidate.CatalogMaintenanceRequest == _catVendorCatalogMaintenanceRequestId

            join VendorProductCode, DirPartyTable, EcoResProduct from catVendorApprovedProduct
                    where catVendorApprovedProduct.VendorProductCode == catVendorProductCandidate.VendorProductCode
                            && catVendorApprovedProduct.DirPartyTable == catVendorCatalog.VendorParty

            join Product, ItemId from inventTable
                    where inventTable.Product == catVendorApprovedProduct.EcoResProduct

            // Get trade agreements
            join Amount,Currency from priceDiscTable
                order by priceDiscTable.RecId desc
                where priceDiscTable.ItemRelation == inventTable.ItemId
                        && priceDiscTable.ItemCode == PriceDiscProductCodeType::Table
                        && (priceDiscTable.FromDate  <= now || priceDiscTable.FromDate == nullDate)
                        && (priceDiscTable.ToDate    >  now || priceDiscTable.ToDate   == nullDate)
                        && priceDiscTable.Relation == PriceType::PricePurch
            join Symbol,RecId from unitOfMeasure
                where priceDiscTable.UnitId == unitOfMeasure.Symbol
        {
            select catVendorProductCandidatePriceTmp
                where catVendorProductCandidatePriceTmp.VendorProductCandidate  == catVendorProductCandidate.RecId
                      && catVendorProductCandidatePriceTmp.UnitOfMeasure        == unitOfMeasure.RecId
                      && catVendorProductCandidatePriceTmp.CurrencyCode         == priceDiscTable.Currency;
            // catalog import functionality allows on set of trade agreement on the combination of
            // item,currency & unit of measure. Inserting last updated trade agreement value.
            if (!catVendorProductCandidatePriceTmp)
            {
                catVendorProductCandidatePriceTmp.VendorProductCandidate = catVendorProductCandidate.RecId;
                catVendorProductCandidatePriceTmp.UnitOfMeasure          = unitOfMeasure.RecId;
                catVendorProductCandidatePriceTmp.CurrencyCode           = priceDiscTable.Currency;
                catVendorProductCandidatePriceTmp.Price                  = priceDiscTable.Amount;
                catVendorProductCandidatePriceTmp.insert();
            }
        }

        while select VendorProductCandidate,UnitOfMeasure,CurrencyCode
                from catVendorProductCandidatePrice
            join RecId from catVendorProductCandidate
                        where catVendorProductCandidate.CatalogMaintenanceRequest == _catVendorCatalogMaintenanceRequestId
                                && catVendorProductCandidatePrice.VendorProductCandidate == catVendorProductCandidate.RecId

        {
            select catVendorProductCandidatePriceTmp
                            where   catVendorProductCandidatePriceTmp.VendorProductCandidate == catVendorProductCandidatePrice.VendorProductCandidate
                                    && catVendorProductCandidatePriceTmp.UnitOfMeasure       == catVendorProductCandidatePrice.UnitOfMeasure
                                    && catVendorProductCandidatePriceTmp.CurrencyCode        == catVendorProductCandidatePrice.CurrencyCode;

            if (!catVendorProductCandidatePriceTmp)
            {
                catVendorProductCandidatePriceTmp.VendorProductCandidate = catVendorProductCandidatePrice.VendorProductCandidate;
                catVendorProductCandidatePriceTmp.UnitOfMeasure          = catVendorProductCandidatePrice.UnitOfMeasure;
                catVendorProductCandidatePriceTmp.CurrencyCode           = catVendorProductCandidatePrice.CurrencyCode;
                catVendorProductCandidatePriceTmp.insert();
            }
        }

        return catVendorProductCandidatePriceTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendCatalogImport</ConfigurationKey>
	<DeveloperDocumentation>@SYS322973</DeveloperDocumentation>
	<Label>@SYS301586</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>VendorProductCandidate</TitleField1>
	<TitleField2>Price</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>VendorProductCandidateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PriceCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>UnitOfMeasure</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorProductCandidate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HighestQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>QtyHighest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeadTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LeadTimePurchDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LowestQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>QtyLowest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultipleQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>QtyMultiples</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StandardQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendorProductCandidateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorProductCandidate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>UnitOfMeasureIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>UnitOfMeasure</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatVendorProductCandidate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatVendorProductCandidate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatVendorProductCandidate</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CatVendorProductCandidate_CatVendorProductCandidatePrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorProductCandidate</Name>
					<Field>VendorProductCandidate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Currency_CatVendorProductCandidatePrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>UnitOfMeasure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UnitOfMeasure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>UnitOfMeasure</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UnitOfMeasure_CatVendorProductCandidatePrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>UnitOfMeasure</Name>
					<Field>UnitOfMeasure</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>