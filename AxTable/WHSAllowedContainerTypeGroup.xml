<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSAllowedContainerTypeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSAllowedContainerTypeGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRemoveContainerType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the container type can be removed from the allowed container types configuration.
    /// </summary>
    /// <param name="_containerType">
    /// The container type that is being removed.
    /// </param>
    /// <returns>
    /// True if the container type can be removed; otherwise, false.
    /// </returns>
    public boolean canRemoveContainerType(WHSContainerTypeCode _containerType)
    {
        return this.validateContainerTypeOnHand(_containerType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateAllowBlankContainerTypeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the Allow blank container types setting can be updated on an Allowed container types group.
    /// </summary>
    /// <param name="_locProfileId">
    /// Optional, used to specify the location profile when the allowed container type on the location profile is
    /// being updated.
    /// </param>
    /// <returns>
    /// True if the value can be updated, otherwise false.
    /// </returns>
    public boolean canUpdateAllowBlankContainerTypeGroup(WHSLocProfileId _locProfileId = '')
    {
        const WHSContainerTypeCode    blankContainerType = '';

        return this.validateContainerTypeOnHand(blankContainerType, _locProfileId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateAllowedContainerTypeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that a location profile can change to a new allowed container type configuration.
    /// </summary>
    /// <param name="_origAllowedContainerTypes">
    /// The original allowed container type
    /// </param>
    /// <param name="_locProfileId">
    /// The location profile that is being updated.
    /// </param>
    /// <returns>
    /// True if the new allowed container types configuration is valid; otherwise, false.
    /// </returns>
    public boolean canUpdateAllowedContainerTypeGroup(
        RecId _origAllowedContainerTypes,
        WHSLocProfileId _locProfileId)
    {
        InventSum                       inventSum;
        WHSLicensePlate                 licensePlate;
        WHSLocationProfile              locationProfile;
        WMSLocation                     location;
        WHSAllowedContainerType         allowedContainerType;
        boolean                         ret = true;

        WHSAllowedContainerTypeGroup origAllowedContainerTypeGroup = WHSAllowedContainerTypeGroup::find(_origAllowedContainerTypes);

        // Check for on-hand with blank container types if blank container types are no longer permitted.
        if (origAllowedContainerTypeGroup.AllowUnspecifiedContainerTypes == NoYes::Yes
        &&  this.AllowUnspecifiedContainerTypes                          == NoYes::No)
        {
            ret = this.canUpdateAllowBlankContainerTypeGroup(_locProfileId);
        }

        if (ret)
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                // Check for on-hand on the current location profile tied to a container type, unspecified or otherwise, that is not permitted on the
                //  allowed container type group that is being assigned
                select firstOnly RecId, WMSLocationId, InventLocationId, LicensePlateId from inventSum
                where inventSum.ClosedQty      == NoYes::No
                    && inventSum.PhysicalInvent  > 0
                    exists join licensePlate
                        where licensePlate.LicensePlateId    == inventSum.LicensePlateId
                    exists join location
                        where location.wMSLocationId == inventSum.wMSLocationId
                            && location.inventLocationId == inventSum.inventLocationId
                    exists join locationProfile
                        where  locationProfile.LocProfileId == _locProfileId
                        &&     locationProfile.LocProfileId == location.LocProfileId
                    notexists join allowedContainerType
                        where allowedContainerType.ContainerTypeCode == licensePlate.ContainerTypeCode
                        &&    allowedContainerType.AllowedContainerTypeGroup == this.RecId;

                if (inventSum.RecId != 0)
                {
                    WHSContainerTypeCode containerTypeCode = WHSLicensePlate::find(inventSum.LicensePlateId).ContainerTypeCode;

                    if (containerTypeCode == '')
                    {
                        if (this.AllowUnspecifiedContainerTypes == NoYes::No)
                        {
                            ret = checkFailed("@WAX:ErrorInventoryWithUnsetContainerType");
                        }
                    }
                    else
                    {
                        ret = checkFailed(strFmt("@WAX:ErrorInventoryWithInvalidContainerType",
                                                containerTypeCode,
                                                inventSum.InventLocationId,
                                                inventSum.wMSLocationId));
                    }
                }
            }
            else
            {
                InventDim                       inventDim;

                // Check for on-hand on the current location profile tied to a container type, unspecified or otherwise, that is not permitted on the
                //  allowed container type group that is being assigned
                select firstOnly RecId from inventSum
                where inventSum.ClosedQty      == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                join WMSLocationId, InventLocationId, LicensePlateId from inventDim
                    where inventDim.InventDimId == inventSum.InventDimId
                    exists join licensePlate
                        where licensePlate.LicensePlateId    == inventDim.LicensePlateId
                    exists join location
                        where location.wMSLocationId == inventDim.wMSLocationId
                    exists join locationProfile
                        where  locationProfile.LocProfileId == _locProfileId
                        &&     locationProfile.LocProfileId == location.LocProfileId
                    notexists join allowedContainerType
                        where allowedContainerType.ContainerTypeCode == licensePlate.ContainerTypeCode
                        &&    allowedContainerType.AllowedContainerTypeGroup == this.RecId;

                if (inventSum.RecId != 0)
                {
                    WHSContainerTypeCode containerTypeCode = WHSLicensePlate::find(inventDim.LicensePlateId).ContainerTypeCode;

                    if (containerTypeCode == '')
                    {
                        if (this.AllowUnspecifiedContainerTypes == NoYes::No)
                        {
                            ret = checkFailed("@WAX:ErrorInventoryWithUnsetContainerType");
                        }
                    }
                    else
                    {
                        ret = checkFailed(strFmt("@WAX:ErrorInventoryWithInvalidContainerType",
                                                containerTypeCode,
                                                inventDim.InventLocationId,
                                                inventDim.wMSLocationId));
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerTypeOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validate that the container type does not have available inventory or open work tied to it.
    /// </summary>
    /// <param name="_containerType">
    ///  The container type
    /// </param>
    /// <param name="_locProfileId">
    ///  Optional, used to specify the location profile when the allowed container type on the location profile is
    ///   being updated.
    /// </param>
    /// <returns>
    ///  Returns true if the container type can be updated or removed, otherwise false.
    /// </returns>
    private boolean validateContainerTypeOnHand(
        WHSContainerTypeCode    _containerType,
        WHSLocProfileId         _locProfileId = '')
    {
        InventSum           inventSum;
        WHSLicensePlate     licensePlate;
        WHSLocationProfile  locationProfile;
        WMSLocation         location;
        boolean             ret = true;
        WHSWorkTable        workTable;
        WHSWorkLine         workLine;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // Check existing inventory.
            select firstOnly RecId from inventSum
            where inventSum.ClosedQty       == NoYes::No
               && inventSum.PhysicalInvent  > 0
            exists join licensePlate
                where licensePlate.LicensePlateId       == inventSum.LicensePlateId
                    && licensePlate.ContainerTypeCode   == _containerType
            exists join location
                where location.wMSLocationId            == inventSum.wMSLocationId
            exists join locationProfile
                where (locationProfile.LocProfileId              == _locProfileId
                    || _locProfileId                             == '')
                    && locationProfile.LocProfileId              == location.LocProfileId
                    && locationProfile.AllowedContainerTypeGroup == this.RecId;
        }
        else
        {
            InventDim           inventDim;

            // Check existing inventory.
            select firstOnly RecId from inventSum
            where inventSum.ClosedQty       == NoYes::No
               && inventSum.PhysicalInvent  > 0
            exists join inventDim
                where inventDim.InventDimId             == inventSum.InventDimId
            exists join licensePlate
                where licensePlate.LicensePlateId       == inventDim.LicensePlateId
                    && licensePlate.ContainerTypeCode   == _containerType
            exists join location
                where location.wMSLocationId            == inventDim.wMSLocationId
            exists join locationProfile
                where (locationProfile.LocProfileId              == _locProfileId
                    || _locProfileId                             == '')
                    && locationProfile.LocProfileId              == location.LocProfileId
                    && locationProfile.AllowedContainerTypeGroup == this.RecId;
        }

        if (inventSum.RecId != 0)
        {
            if (_containerType == '')
            {
                ret = checkFailed("@WAX:ErrorInventoryWithUnsetContainerType");
            }
            else
            {
                ret = checkFailed(strFmt("@WAX:ErrorAvailableInventoryOnContainerType", _containerType));
            }
        }

        // Check open work.
        if (ret)
        {
            select firstOnly WorkId, RecId from workTable
                where workTable.WorkStatus == WHSWorkStatus::Open
                   || workTable.WorkStatus == WHSWorkStatus::InProcess
                join RecId from workLine
                    where workLine.WorkId   == workTable.WorkId
                       && workLine.WorkType == WHSWorkType::Put
                join WMSLocationId from location
                    where location.WMSLocationId == workLine.WmsLocationId
                exists join licensePlate
                    where licensePlate.LicensePlateId == workTable.TargetLicensePlateId
                        && licensePlate.ContainerTypeCode == _containerType
                exists join locationProfile
                    where (locationProfile.LocProfileId              == _locProfileId
                        || _locProfileId                             == '')
                        && locationProfile.LocProfileId              == location.LocProfileId
                        && locationProfile.AllowedContainerTypeGroup == this.RecId;

            if (workTable.RecId != 0)
            {
                if (_containerType == '')
                {
                    ret = checkFailed(strFmt("@WAX:ErrorOpenWorkLPWithUnsetContainerType", location.wMSLocationId));
                }
                else
                {
                    ret = checkFailed(strFmt("@WAX:ErrorRemovingContainerTypeTiedToOpenWork",
                                             _containerType,
                                             workTable.WorkId,
                                             location.WMSLocationId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSAllowedContainerTypeGroup, AllowUnspecifiedContainerTypes):
            if (this.AllowUnspecifiedContainerTypes == NoYes::No)
                {
                    ret = this.canUpdateAllowBlankContainerTypeGroup();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(RecId _recId)
    {
        return (_recId) &&
           (select firstonly RecId from WHSAllowedContainerTypeGroup
            where WHSAllowedContainerTypeGroup.RecId == _RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSAllowedContainerTypeGroup find(
        RecId             _recId,
        boolean           _forupdate = false)
    {
        WHSAllowedContainerTypeGroup    allowedContainerTypeGroup;

        if (_recId)
        {
            allowedContainerTypeGroup.selectForUpdate(_forupdate);

            select firstonly allowedContainerTypeGroup
                where allowedContainerTypeGroup.RecId == _recId;
        }

        return allowedContainerTypeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSAllowedContainerTypeGroupTableDeveloperDoc</DeveloperDocumentation>
	<FormRef>WHSAllowedContainerTypeGroup</FormRef>
	<Label>@WAX:WHSAllowedContainerTypeGroupTable</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>AllowedContainerTypeGroupName</TitleField1>
	<TitleField2>AllowUnspecifiedContainerTypes</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>WHSAllowedContainerTypeGroupNameIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowUnspecifiedContainerTypes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroupName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowUnspecifiedContainerTypes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllowedContainerTypeGroupName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AllowedContainerTypeGroupName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowedContainerTypeGroupName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AllowUnspecifiedContainerTypes</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAllowUnspecifiedContainerTypes</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WHSAllowedContainerTypeGroupNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AllowedContainerTypeGroupName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>