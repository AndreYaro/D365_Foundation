<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjStageTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjStageTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert default project stage names from labels.
    /// </summary>
    public static int loadDefaults()
    {
        int insertCnt = 0;

        SysDictEnum projStatusEnum = new SysDictEnum(enumNum(ProjStatus));
        Counter projStatusEnumCnt = projStatusEnum.values();
        int enum[];
        LabelId labelId[];

        for (int ix = 1 ; ix <= projStatusEnumCnt; ix++)
        {
            enum[ix] = projStatusEnum.index2Value(ix-1);
            labelId[ix] = projStatusEnum.index2LabelId(ix-1);
        }

        ProjStageTable projStageTable;
        
        delete_from projStageTable;

        RecordInsertList labels = new RecordInsertList(tableNum(projStageTable));

        container langList = Global::languageList();
        for (int i = 1; i <= conLen(langList); i++)
        {
            str langId = conPeek(langList, i);
            for (int ix = 1; ix <= projStatusEnumCnt; ix++)
            {
                projStageTable.clear();
                projStageTable.Language = langId;
                projStageTable.Status = any2Enum(enum[ix]);
                try
                {
                    projStageTable.Stage = SysLabel::labelId2String2(labelId[ix], langId);
                }
                catch (Exception::CLRError)
                {
                    // handle the case where the language is not supported.
                    projStageTable.Stage = SysLabel::labelId2String2(labelId[ix]);
                }
                labels.add(projStageTable);
            }
        }

        insertCnt = labels.insertDatabase();

        return insertCnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an existing project stage name with a new value
    /// </summary>
    /// <param name = "_projStatus">Project status for which the new project stage name applies.</param>
    /// <param name = "_languageId">Language for this new project stage name.</param>
    /// <param name = "_projStage">New project stage name.</param>
    public static void updateStage(ProjStatus _projStatus, LanguageId _languageId, ProjStage _projStage)
    {
        ttsbegin;
        ProjStageTable projStageTable = ProjStageTable::find(_projStatus, _languageId, true);

        if (projStageTable && projStageTable.Stage != _projStage)
        {
            projStageTable.Stage = _projStage;
            projStageTable.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjStageTable find(
        ProjStatus _projStatus,
        LanguageId _languageId = LanguageTable::defaultLanguage(),
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        ProjStageTable projStageTable;

        projStageTable.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            projStageTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly projStageTable where projStageTable.Status == _projStatus && projStageTable.Language == _languageId;
        
        return projStageTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjStageDevDoc</DeveloperDocumentation>
	<Label>@Proj:ProjStage</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Status</TitleField1>
	<TitleField2>Language</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Language</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjStageLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Stage</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjStage</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PK</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Language</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LanguageStatus</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Language</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIDX</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>