<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductLifecycleState</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductLifecycleState extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static EcoResProductLifecycleState find(EcoResProductLifecycleStateId _stateId, boolean _forUpdate = false)
    {
        EcoResProductLifecycleState productLifecycleState;

        productLifecycleState.selectForUpdate(_forUpdate);

        if (_stateId)
        {
            select firstonly productLifecycleState
                where productLifecycleState.StateId == _stateId;
        }

        return productLifecycleState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.IsActiveForPlanning = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultStateForProductRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default state to use for release of product.  
    /// </summary>
    /// <returns>The default state.</returns>
    public static EcoResProductLifecycleState findDefaultStateForProductRelease()
    {
        EcoResProductLifecycleState defaultState;

        select firstonly defaultState
            where defaultState.IsDefaultOnProductRelease;

        return defaultState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStateActiveForPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if state is set to be active for planning.
    /// </summary>
    /// <returns>True if state is set to be active for planning, false otherwise.</returns>
    internal static EcoResProductLifecycleStateIsActiveForPlanning isStateActiveForPlanning(EcoResProductLifecycleStateId _stateId)
    {
        return _stateId ? EcoResProductLifecycleState::find(_stateId).IsActiveForPlanning : NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOtherDefaultOnProductRelease</Name>
				<Source><![CDATA[
    protected boolean resetOtherDefaultOnProductRelease()
    {
        if (this.IsDefaultOnProductRelease && !this.orig().IsDefaultOnProductRelease)
        {
            EcoResProductLifecycleState otherStates;

            update_recordset otherStates
                setting IsDefaultOnProductRelease = NoYes::No
                where otherStates.IsDefaultOnProductRelease == NoYes::Yes;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        boolean mustRefresh = this.resetOtherDefaultOnProductRelease();

        super();

        if (mustRefresh && this.isFormDataSource())
        {
            this.dataSource().research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        boolean mustRefresh = this.resetOtherDefaultOnProductRelease();

        super();

        if (mustRefresh && this.isFormDataSource())
        {
            this.dataSource().research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResProductLifecycleStateDevDoc</DeveloperDocumentation>
	<Label>@SCM:EcoResProductLifecycleState</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>StateId</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>StateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>StateIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductLifecycleStateId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductLifecycleStateDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsActiveForPlanning</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductLifecycleStateIsActiveForPlanning</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsDefaultOnProductRelease</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResProductLifecycleStateDefaultOnProductRelease</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>StateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>StateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>