<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmpDSADetails_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Temp DSA details table.
/// </summary>
public class TmpDSADetails_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertIntoTmpDSADetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert into temp DSA details.
    /// </summary>
    /// <param name = "_eccNumber">Reference recid.</param>
    /// <param name = "_toDate">To date.</param>
    /// <param name = "_fromDate">From date.</param>
    /// <returns>Temp DSA details.</returns>
    public static TmpDSADetails_IN insertIntoTmpDSADetails(
        RefRecId     _eccNumber,
        TransDate    _toDate,
        TransDate    _fromDate)
    {
        ExciseDSARegister_IN    exciseDSARegisterCopy;
        ExciseDSARegister_IN    exciseDSARegister;
        ExciseDSARegister_IN    exciseDSARegisterItem;
        TmpDSADetails_IN        tmpDSADetails;
        Qty                     lastAvaivalbeBalance;

        if (_toDate && _fromDate)
        {
            while select Item from exciseDSARegisterItem
                group by Item
                where exciseDSARegisterItem.TaxRegistrationNumberTable  == _eccNumber
                    && exciseDSARegisterItem.dsaDate                     >= _fromDate
                    && exciseDSARegisterItem.dsaDate                     <= _toDate
            {
                lastAvaivalbeBalance = 0;

                while select avg(ManufacturedQty), avg(IssueQty), avg(ReceiptQty), sum(TaxAmount), NumberSequence
                    from exciseDSARegisterCopy
                    group by NumberSequence
                    where exciseDSARegisterCopy.TaxRegistrationNumberTable  == _eccNumber
                        && exciseDSARegisterCopy.dsaDate    < _fromDate
                        && exciseDSARegisterCopy.Item       == exciseDSARegisterItem.Item
                {
                    lastAvaivalbeBalance += exciseDSARegisterCopy.ManufacturedQty + exciseDSARegisterCopy.ReceiptQty - exciseDSARegisterCopy.IssueQty;
                }

                while select DSADate from exciseDSARegister
                    group by dsaDate
                    where exciseDSARegister.TaxRegistrationNumberTable  == _eccNumber
                        && exciseDSARegister.dsaDate                     >= _fromDate
                        && exciseDSARegister.dsaDate                     <= _toDate
                        && exciseDSARegister.Item                       == exciseDSARegisterItem.Item
                {
                    tmpDSADetails.clear();
                    while select avg(ManufacturedQty), avg(IssueQty), avg(ReceiptQty), sum(TaxAmount), NumberSequence
                        from exciseDSARegisterCopy
                        group by NumberSequence
                        where exciseDSARegisterCopy.TaxRegistrationNumberTable  == _eccNumber
                            && exciseDSARegisterCopy.dsaDate    == exciseDSARegister.dsaDate
                            && exciseDSARegisterCopy.Item       == exciseDSARegisterItem.Item
                    {
                        tmpDSADetails.ManufacturedQty += exciseDSARegisterCopy.ManufacturedQty;
                        tmpDSADetails.IssueQty += exciseDSARegisterCopy.IssueQty;
                        tmpDSADetails.ReceiptQty += exciseDSARegisterCopy.ReceiptQty;
                        tmpDSADetails.TaxAmount += exciseDSARegisterCopy.TaxAmount;
                    }
                    tmpDSADetails.eccTaxRegistrationNumberTable = _eccNumber;
                    tmpDSADetails.dsaDate                       = exciseDSARegister.dsaDate;
                    tmpDSADetails.Item                          = exciseDSARegisterItem.Item;

                    tmpDSADetails.openingBalance                = lastAvaivalbeBalance;
                    tmpDSADetails.availableBalance              = tmpDSADetails.openingBalance + tmpDSADetails.ManufacturedQty + tmpDSADetails.ReceiptQty - tmpDSADetails.IssueQty;
                    lastAvaivalbeBalance                        = tmpDSADetails.availableBalance;
                    tmpDSADetails.insert();
                }
            }
        }
        else
        {
            while select Item from exciseDSARegisterItem
                group by Item
                where exciseDSARegisterItem.TaxRegistrationNumberTable  == _eccNumber
            {
                lastAvaivalbeBalance = 0;
                while select dsaDate from exciseDSARegister
                    group by dsaDate
                    where exciseDSARegister.TaxRegistrationNumberTable  == _eccNumber
                        && exciseDSARegister.Item == exciseDSARegisterItem.Item
                {
                    tmpDSADetails.clear();
                    while select avg(ManufacturedQty), avg(IssueQty), avg(ReceiptQty), sum(TaxAmount), NumberSequence
                        from exciseDSARegisterCopy
                        group by NumberSequence
                        where exciseDSARegisterCopy.TaxRegistrationNumberTable  == _eccNumber
                            && exciseDSARegisterCopy.dsaDate    == exciseDSARegister.dsaDate
                            && exciseDSARegisterCopy.Item       == exciseDSARegisterItem.Item
                    {
                        tmpDSADetails.ManufacturedQty += exciseDSARegisterCopy.ManufacturedQty;
                        tmpDSADetails.IssueQty += exciseDSARegisterCopy.IssueQty;
                        tmpDSADetails.ReceiptQty += exciseDSARegisterCopy.ReceiptQty;
                        tmpDSADetails.TaxAmount += exciseDSARegisterCopy.TaxAmount;
                    }
                    tmpDSADetails.eccTaxRegistrationNumberTable = _eccNumber;
                    tmpDSADetails.dsaDate                       = exciseDSARegister.dsaDate;
                    tmpDSADetails.Item                          = exciseDSARegisterItem.Item;

                    tmpDSADetails.openingBalance                = lastAvaivalbeBalance;
                    tmpDSADetails.availableBalance              = tmpDSADetails.openingBalance + tmpDSADetails.ManufacturedQty + tmpDSADetails.ReceiptQty - tmpDSADetails.IssueQty;
                    lastAvaivalbeBalance                        = tmpDSADetails.availableBalance;
                    tmpDSADetails.insert();
                }
            }
        }

        return tmpDSADetails;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<Label>@SYS1084</Label>
	<TitleField1>DSAId</TitleField1>
	<TitleField2>DSADate</TitleField2>
	<ClusteredIndex>RecId</ClusteredIndex>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AvailableBalance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS24243</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DSADate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DSAId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Num</ExtendedDataType>
			<Label>@GLS6438</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ECCTaxRegistrationNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS59571</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IssueQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS24493</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Item</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ItemIdSmall</ExtendedDataType>
			<Label>@SYS14428</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ManufacturedQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@GLS6462</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OpeningBalance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS22797</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceiptQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
			<Label>@SYS24486</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ECCTaxRegistrationNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistrationNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistrationNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistrationNumbers_IN_TmpDSADetails_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ECCTaxRegistrationNumberTable</Name>
					<Field>ECCTaxRegistrationNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Item</Name>
					<SourceEDT>ItemIdSmall</SourceEDT>
					<Field>Item</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>