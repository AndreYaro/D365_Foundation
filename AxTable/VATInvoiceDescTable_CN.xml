<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATInvoiceDescTable_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VATInvoiceDescTable_CN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of th field.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field.
    /// </param>
    /// <param name="_arrayIndex">
    /// The index of the array.
    /// </param>
    /// <returns>
    /// Returns True if valid, otherwise False.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;
        #define.KeyWord('详见销售清单')

        ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(VATInvoiceDescTable_CN, Description):
                if (this.Description == #KeyWord)
                {
                    ret = checkFailed(strFmt("@SYS4002249", #KeyWord));
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the VATInvoiceDescTable_CN table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the VATInvoiceDescTable_CN record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;

        if (!VATInvoiceDescTable_CN::exist(_recId))
        {
            isExisting = checkFailed(strfmt(VATInvoiceDescTable_CN::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the VATInvoiceDescTable_CN table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the VATInvoiceDescTable_CN record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;

        found = (select firstonly RecId
                    from vatInvoiceDescTable_CN
                    where vatInvoiceDescTable_CN.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the VATInvoiceDescTable_CN table exists.
    /// </summary>
    /// <param name="_Id">
    /// The record ID of the VATInvoiceDescTable_CN record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByNaturalKey(VATInvoiceDescriptionId_CN  _Id)
    {
        boolean found;

        found = (select firstonly RecId
                    from vatInvoiceDescTable_CN
                    where vatInvoiceDescTable_CN.ID == _Id).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the VATInvoiceDescTable_CN table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the VATInvoiceDescTable_CN record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the VATInvoiceDescTable_CN table; otherwise, an empty record.
    /// </returns>
    public static VATInvoiceDescTable_CN find(
        RecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VATInvoiceDescTable_CN vatInvoiceDescTable;

        vatInvoiceDescTable.selectForUpdate(_forUpdate);
        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vatInvoiceDescTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly vatInvoiceDescTable
            where vatInvoiceDescTable.RecId == _recId;

        return vatInvoiceDescTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the VATInvoiceDescTable_CN table.
    /// </summary>
    /// <param name="_Id">
    /// The ID of the VATInvoiceDescTable_CN record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the VATInvoiceDescTable_CN table; otherwise, an empty record.
    /// </returns>
    public static VATInvoiceDescTable_CN findByNaturalKey(
        VATInvoiceDescriptionId_CN  _Id,
        boolean                     _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        VATInvoiceDescTable_CN vatInvoiceDescTable;

        vatInvoiceDescTable.selectForUpdate(_forUpdate);
        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vatInvoiceDescTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly vatInvoiceDescTable
            where vatInvoiceDescTable.ID == _Id;

        return vatInvoiceDescTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// return text message on Id not found.
    /// </summary>
    /// <returns>
    /// return label text.
    /// </returns>
    static TxtNotExist txtNotExist()
    {
        // A record with Id %1 does not exist.
        return("@SYS102212");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>CN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63935</DeveloperDocumentation>
	<Label>@GLS60703</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ID</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<Modules>Tax</Modules>
	<ReplacementKey>IDIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Unit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VATInvoiceDescriptionId_CN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Unit</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SalesUnit</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>IDIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>TaxIntgrExportDocumentLineSourceMap_CN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Intracode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
					<MapFieldTo>Unit</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceBaseAmountCur</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRegulateAmountCur</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRelationType</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxDirection</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxValue</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>