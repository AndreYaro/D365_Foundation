<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetTransferTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetTransferTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetName accountName()
    {
        return RAssetTable::find(this.AccountNum).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetMainGroup</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetMainGroupId assetMainGroup()
    {
        return RAssetTable::find(this.AccountNum).AssetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetName assetName()
    {
        if (!xDataArea::exist(this.Company))
            return "";

        if (this.Company)
        {
            changecompany(this.Company)
            {
                return RAssetTable::find(this.AssetId).Name;
            }
        }
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetStatus</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethod(true)]
    public display RAssetStatus assetStatus()
    {
        return RAssetTable::find(this.AccountNum).Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountNum</Name>
				<Source><![CDATA[
    public RAssetMoveHist findAccountNum(CompanyId _companyId,
        RAssetMoveType _assetMoveType,
        TransDate _transDate = maxdate(),
        Posted _posted    = NoYes::Yes)
    {
        RAssetMoveHist assetMoveHist;

        if (_companyId)
        {
            if (SysDataArea::checkAccessible(_companyId))
            {
                changecompany(_companyId)
                {
                    select firstonly assetMoveHist
                        where assetMoveHist.Company == this.DataAreaId
                            && assetMoveHist.MoveType == _assetMoveType
                            && assetMoveHist.ChangeDate <= _transDate
                            && assetMoveHist.Posted == _posted
                            && assetMoveHist.AccountNum == this.AssetId;
                }
            }
        }
        return assetMoveHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetId</Name>
				<Source><![CDATA[
    public RAssetMoveHist findAssetId(CompanyId _companyId,
        RAssetMoveType _assetMoveType,
        TransDate _transDate = maxdate(),
        Posted _posted = NoYes::Yes)
    {
        RAssetMoveHist assetMoveHist;

        if (_companyId)
        {
            if (SysDataArea::checkAccessible(_companyId))
            {
                changecompany(_companyId)
                {
                    select firstonly assetMoveHist
                        where assetMoveHist.Company == this.DataAreaId
                            && assetMoveHist.MoveType == _assetMoveType
                            && assetMoveHist.ChangeDate <= _transDate
                            && assetMoveHist.Posted == _posted
                            && assetMoveHist.AssetId == this.AccountNum;
                }
            }
        }
        return assetMoveHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConcerned</Name>
				<Source><![CDATA[
    public RAssetMoveHist findConcerned(boolean _equal = false)
    {
        RAssetMoveHist assetMoveHist;
        RAssetMoveType assetMoveType;
        RAssetTransferTable assetTransferTable = RAssetTransferTable::findRecRef(this.TransferTableRecId);

        if (!this.AssetId)
        {
            return null;
        }

        switch (assetTransferTable.MoveType)
        {
            case RAssetMoveType::CompanyIssue:
                assetMoveType = RAssetMoveType::CompanyReceipt;
                break;

            case RAssetMoveType::CompanyReceipt:
                assetMoveType = RAssetMoveType::CompanyIssue;
                break;

            default:
                return null;
        }

        if (this.Company)
        {
            if (SysDataArea::checkAccessible(this.Company))
            {
                changecompany(this.Company)
                {
                    if (_equal)
                    {
                        select firstonly assetMoveHist
                            order by ChangeDate desc
                            where assetMoveHist.MoveType == assetMoveType
                                && assetMoveHist.AccountNum == this.AssetId
                                && assetMoveHist.AssetId == this.AccountNum
                                && assetMoveHist.Company == this.DataAreaId
                                && assetMoveHist.Posted;
                    }
                    else
                    {
                        select firstonly assetMoveHist
                            order by ChangeDate desc
                            where assetMoveHist.MoveType == assetMoveType
                                && assetMoveHist.AccountNum == this.AssetId
                                && assetMoveHist.Posted;
                    }
                }
            }
        }
        return assetMoveHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetMoveHistIssued</Name>
				<Source><![CDATA[
    public void initFromRAssetMoveHistIssued(boolean _perAssetId = false)
    {
        RAssetMoveHist assetMoveHist;
        RAssetTransferTable assetTransferTable = RAssetTransferTable::findRecRef(this.TransferTableRecId);

        if (_perAssetId
            && this.AssetId)
        {
            assetMoveHist = this.findAccountNum(this.Company, RAssetMoveType::CompanyIssue, assetTransferTable.TransDate);
            
            if (assetMoveHist
                && assetMoveHist.AssetId)
            {
                this.AccountNum = assetMoveHist.AssetId;
            }
        }
        else if (this.AccountNum)
        {
            assetMoveHist = this.findAssetId(this.Company, RAssetMoveType::CompanyIssue, assetTransferTable.TransDate);
            if (assetMoveHist)
            {
                this.AssetId = assetMoveHist.AccountNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetMoveStandard</Name>
				<Source><![CDATA[
    public RAssetMoveStandard rAssetMoveStandard(RAssetStandardId _assetStandardId)
    {
        RAssetMoveStandard assetMoveStandard;

        select firstonly assetMoveStandard
            where assetMoveStandard.RefRecId == this.RecId
                && assetMoveStandard.RefTableId == this.TableId
                && assetMoveStandard.rAssetStandardId == _assetStandardId;

        return assetMoveStandard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoveStandard</Name>
				<Source><![CDATA[
    public void updateMoveStandard()
    {
        RAssetStandards assetStandards;
        RAssetMoveStandard assetMoveStandard;

        while select AssetStandardId from assetStandards
            where assetStandards.AssetId == this.AccountNum
        {
            if (!this.rAssetMoveStandard(assetStandards.AssetStandardId))
            {
                assetMoveStandard.clear();
                assetMoveStandard.rAssetStandardId = assetStandards.AssetStandardId;
                assetMoveStandard.RefRecId = this.RecId;
                assetMoveStandard.RefTableId = this.TableId;
                assetMoveStandard.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    public static void createLine(RAssetTransferTable  _assetTransferTable, RAssetTable _assetTable)
    {
        RAssetTransferTrans assetTransferTrans;
        assetTransferTrans.TransferTableRecId = _assetTransferTable.RecId;
        assetTransferTrans.AccountNum = _assetTable.AccountNum;
        assetTransferTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecRef</Name>
				<Source><![CDATA[
    public static RAssetTransferTrans findRecRef(RefRecId _refRecId)
    {
        RAssetTransferTrans assetTransferTrans;

        if (_refRecId)
        {
            select firstonly assetTransferTrans
                where assetTransferTrans.TransferTableRecId == _refRecId;
        }

        return assetTransferTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>RAsset</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>RAssetTransferTrans</FormRef>
	<Label>@GLS116667</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>AccountNum</TitleField1>
	<TitleField2>AssetId</TitleField2>
	<ClusteredIndex>AccountIdx</ClusteredIndex>
	<Modules>RAsset</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RAssetMoveStandard</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RAssetMoveStandard</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>assetMainGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accountName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>assetStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AssetGroup</Name>
			<Label>@GLS116256</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>assetMainGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Destination</Name>
			<Label>@GLS116709</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>assetName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FixedAssets</Name>
			<Label>@SYS12578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accountName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Source</Name>
			<Label>@SYS27472</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>accountName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25532</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>assetStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetId</ExtendedDataType>
			<Label>@SYS12578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RAssetIdAc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransferTableRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransferTableRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Company</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>Company</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RAssetMoveStandard</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetMoveStandard</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetMoveStandard_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RAssetTransferTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RefRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>RefTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RAssetTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>RAssetId</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RAssetTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RAssetTransferTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RAssetTransferTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>RAssetTransferTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferTableRecId</Name>
					<Field>TransferTableRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>