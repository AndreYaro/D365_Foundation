<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCommitmentHeader_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchCommitmentHeader_PSN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all requirements are met for this commitment to be deleted.
    /// </summary>
    /// <returns>
    /// true if the commmitment can be deleted; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean canDelete()
    {
        return !PurchCommitmentHeader_PSN::isCommitmentReferencedOnPurchLine(this.RecId)
                    && !PurchCommitmentHeader_PSN::isCommitmentReferencedOnVendInvoiceLine(this.RecId)
                    && (this.DocumentStatus == PurchCommitmentDocumentStatus_PSN::Draft)
                    && (this.WorkflowApprovalState != PurchCommitmentWorkflowApprovalState_PSN::InReview);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the workflow with the passed in name can be submitted to workflow.
    /// </summary>
    /// <param name="_workflowType">
    /// A <c>string</c> value representing he name of the workflow type to check.
    /// This parameter is optional and wil default to the PurchCommitmentTemplate_PSN workflow type if one isn't passed in.
    /// </param>
    /// <returns>
    /// true if the workflow can be submitted; otherwise false
    /// </returns>
    public boolean canSubmitToWorkflow(str _workflowType = 'PurchCommitmentTemplate_PSN')
    {
        return WorkflowTable::findActiveTemplate(_workflowType).RecId && this.doesHeaderHaveSavedLine()
            && (this.WorkflowApprovalState == PurchCommitmentWorkflowApprovalState_PSN::NotSubmitted)
            && ((this.DocumentStatus == PurchCommitmentDocumentStatus_PSN::Draft)
            || (this.DocumentStatus == PurchCommitmentDocumentStatus_PSN::UnderRevision));
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSourceDocumentAccountingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Transitions the source document to the specified state.
    /// </summary>
    /// <param name="_targetSourceDocumentAccountingStatus">
    ///     An enum type specifiying the accounting state to which the source document will transition.
    /// </param>
    /// <param name="_targetSourceDocumentLineAccountingStatus">
    ///      An enum type specifiying the accounting state to which the source document line will transition.
    /// </param>
    internal void changeSourceDocumentAccountingStatus(SourceDocumentAccountingStatus _targetSourceDocumentAccountingStatus,
                                                     SourceDocumentLineAccountingStatus _targetSourceDocumentLineAccountingStatus = SourceDocumentLineAccountingStatus::None)
    {
        PurchCommitmentLine_PSN purchCommitmentLine;
        PurchLine               purchLine;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        SourceDocumentLine      sourceDocumentLine;

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this, false, _targetSourceDocumentAccountingStatus);

        if (_targetSourceDocumentLineAccountingStatus != SourceDocumentLineAccountingStatus::None)
        {
            //Only process commitment lines that are not Finalized
            while select purchCommitmentLine
                where purchCommitmentLine.PurchCommitmentHeader_PSN == this.RecId
            join RecId, AccountingStatus from sourceDocumentLine
                where sourceDocumentLine.RecId == purchCommitmentLine.SourceDocumentLine
                &&    sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Finalized
            {
                SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(purchCommitmentLine, false, _targetSourceDocumentLineAccountingStatus);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCommitmentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DocumentStatus</c> field of the current record to closed if
    /// all associated commitment lines are in a finalized state.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void closeCommitmentHeader()
    {
        PurchCommitmentLine_PSN purchCommitmentLine_PSN;
        SourceDocumentLine      sourceDocumentLine;

        select recId from purchCommitmentLine_PSN
            where purchCommitmentLine_PSN.PurchCommitmentHeader_PSN == this.RecId
            exists join sourceDocumentLine
                where sourceDocumentLine.RecId == purchCommitmentLine_PSN.SourceDocumentLine
                    && sourceDocumentLine.AccountingStatus != SourceDocumentLineAccountingStatus::Finalized;

        if (!purchCommitmentLine_PSN)
        {
            // The query didn't return any records so we know that there are not any
            // lines that are not in a finalized state so it is ok to close the header
            ttsBegin;
            this.DocumentStatus = PurchCommitmentDocumentStatus_PSN::Closed;
            this.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPreviewPaneTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the title on top of the preview pane on the <C>PurchCommitmentListPage_PSN</C> form.
    /// </summary>
    /// <returns>
    /// Title field of the preview pane.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display Caption displayPreviewPaneTitle()
    {
        return strFmt("@SYS327590", this.CommitmentNumber, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the vendor associated with the current commitment.
    /// </summary>
    /// <returns>
    /// The name of the vendor associated with the current commitment.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display VendName displayVendorName()
    {
        VendName  name;
        VendTable vendTable;
        vendTable = VendTable::find(this.VendorAccount);
        name = DirPartyTable::findRec(vendTable.Party).Name;

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesHeaderHaveSavedLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the purchase commitment header has associated purchase commitment lines.
    /// </summary>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean doesHeaderHaveSavedLine()
    {
        PurchCommitmentLine_PSN  purchCommitmentLine;

        select firstonly RecId from purchCommitmentLine
            where purchCommitmentLine.PurchCommitmentHeader_PSN == this.RecId;

        return purchCommitmentLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentHeaderStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the Accoutning status of the source document header.
    /// </summary>
    /// <returns>
    ///     A <c>SourceDocumentAccountingStatus</c> enum value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentAccountingStatus getSourceDocumentHeaderStatus()
    {
        SourceDocumentHeader        sourceDocumentHeader;
        PurchCommitmentHeader_PSN   purchCommitmentHeader;

        select AccountingStatus from sourceDocumentHeader
        join RecId from purchCommitmentHeader
            where purchCommitmentHeader.SourceDocumentHeader == sourceDocumentHeader.RecId
            && purchCommitmentHeader.RecId == this.RecId;

        return sourceDocumentHeader.AccountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        RefRecId calendarId;
        FiscalCalendarYear fiscalCalendarYear;

        super();

        this.setPurchCommitmentNumber();
        this.DocumentStatus        = PurchCommitmentDocumentStatus_PSN::Draft;
        this.WorkflowApprovalState = PurchCommitmentWorkflowApprovalState_PSN::NotSubmitted;
        this.DefaultAccountingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.CurrencyCode          = Ledger::accountingCurrency();
        this.HcmWorker             = HcmWorker::userId2Worker(curUserId());
        calendarId                 = Ledger::fiscalCalendar(CompanyInfo::current());

        if (calendarId)
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(calendarId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            if (fiscalCalendarYear)
            {
                this.FiscalCalendarYear = fiscalCalendarYear.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert a purchase commitment header record.
    /// </summary>
    /// <remarks>
    ///     Insert a <c>SourceDocumentHeader</c> record that stores the extension key used by the extension factory to create
    ///     source document implementation objects.
    /// </remarks>
    public void insert()
    {
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateInFiscalCalendarYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the passed in date falls within the fiscal year associated with the current record.
    /// </summary>
    /// <param name="_date">
    /// The date to check against the fiscal year associated with the current record.
    /// </param>
    /// <returns>
    /// true if the passed in date falls within the fiscal year associated with the current record; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isDateInFiscalCalendarYear(AccountingDate _date)
    {
        if (this.FiscalCalendarYear
            && (FiscalCalendarYear::findYearByCalendarDate(FiscalCalendarYear::find(this.FiscalCalendarYear).FiscalCalendar, _date).RecId != this.FiscalCalendarYear))
        {
            return checkFailed("@SPS2470");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any processing necessary when a field is modified.
    /// </summary>
    /// <param name="_fieldId">
    /// The <c>FieldId</c> value of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(PurchCommitmentHeader_PSN, FiscalCalendarYear):
                this.DefaultAccountingDate = FiscalCalendarYear::find(this.FiscalCalendarYear).StartDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the parent <c>SourceDocumentLine</c> value associated with the current record.
    /// </summary>
    /// <returns>
    /// The parent <c>SourceDocumentLine</c> value associated with the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentLine parmParentSourceDocumentLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>EnumName</c> value of the source document header type associted with <c>PurchCommitmentHeader_PSN</c> records.
    /// </summary>
    /// <returns>
    /// The source document header type associted with <c>PurchCommitmentHeader_PSN</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public enumName parmSourceDocHeaderTypeEnumName()
    {
        return enumStr(SourceDocument_PurchCommitment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocHeaderTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentTypeEnumValue</c> value of the source document header type associted with <c>PurchCommitmentHeader_PSN</c> records.
    /// </summary>
    /// <returns>
    /// The source document header type associted with <c>PurchCommitmentHeader_PSN</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentTypeEnumValue parmSourceDocHeaderTypeEnumValue()
    {
        return SourceDocument_PurchCommitment::PurchCommitment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>EnumName</c> value of the source document header type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </summary>
    /// <returns>
    /// The source document line type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public enumName parmSourceDocLineTypeEnumName()
    {
        return enumStr(SourceDocumentLine_PurchCommitment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineTypeEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentTypeEnumValue</c> value of the source document header type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </summary>
    /// <returns>
    /// The source document header type associted with <c>PurchCommitmentLine_PSN</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentTypeEnumValue parmSourceDocLineTypeEnumValue()
    {
        return SourceDocumentLine_PurchCommitment::PurchCommitmentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SourceDocumentHeader</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>SourceDocumentHeader</c> record associated with the current record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SourceDocumentHeader parmSourceDocumentHeader()
    {
        SourceDocumentHeader    sourceDocumentHeader;

        sourceDocumentHeader = SourceDocumentHeader::find(this.SourceDocumentHeader);

        return sourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the source document header state to processed.
    /// </summary>
    /// <remarks>
    /// This method uses the state transition of the source document header to trigger the Budget framework.
    /// </remarks>
    public void processSourceDocumentHeader()
    {
        if (!PurchCommitment_ConfirmBudget_PSN::isBudgetControlEnabledForCommitments())
        {
            throw error("@SPS2452");
        }

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(this, false, SourceDocumentAccountingStatus::Completed);

        if (SourceDocumentHeader::find(this.SourceDocumentHeader).AccountingStatus == SourceDocumentAccountingStatus::Completed)
        {
            this.resetDraftAndOriginalAmount();
            this.DocumentStatus = PurchCommitmentDocumentStatus_PSN::Complete;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDraftAndOriginalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the <c>DraftAmount</c> and <c>OriginalAmount</c> fields to zero for all commitment lines.
    /// </summary>
    public void resetDraftAndOriginalAmount()
    {
        PurchCommitmentLine_PSN commitmentLine;

        if (this.DocumentStatus == PurchCommitmentDocumentStatus_PSN::UnderRevision)
        {
            ttsbegin;

            update_recordset commitmentLine
                setting DraftAmount = 0.0,
                        OriginalAmount = 0.0
                where commitmentLine.PurchCommitmentHeader_PSN == this.RecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reviseCommitmentDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of the <c>DraftAmount</c> and <c>OriginalAmount</c> fields.
    /// </summary>
    /// <param name="_purchCommitmentHeaderRecId">
    /// The record ID of the <c>PurchCommitmentHeader_PSN</c> table.
    /// </param>
    /// <returns>
    ///  A boolean value
    /// </returns>
    public boolean reviseCommitmentDocument(RecId _purchCommitmentHeaderRecId)
    {
        PurchCommitmentHeader_PSN purchCommitmentHeader_PSN;
        PurchCommitmentLine_PSN   commitmentLine;
        boolean                   reviseSuccess;

        reviseSuccess = false;
        purchCommitmentHeader_PSN = PurchCommitmentHeader_PSN::find(_purchCommitmentHeaderRecId, true);

        try
        {
            if ((purchCommitmentHeader_PSN.DocumentStatus == PurchCommitmentDocumentStatus_PSN::Complete)
                && ((purchCommitmentHeader_PSN.WorkflowApprovalState == PurchCommitmentWorkflowApprovalState_PSN::NotSubmitted)
                || (purchCommitmentHeader_PSN.WorkflowApprovalState == PurchCommitmentWorkflowApprovalState_PSN::Approved)))
            {
                ttsbegin;

                purchCommitmentHeader_PSN.DocumentStatus = PurchCommitmentDocumentStatus_PSN::UnderRevision;
                purchCommitmentHeader_PSN.changeSourceDocumentAccountingStatus(SourceDocumentAccountingStatus::InProcess,
                                                          SourceDocumentLineAccountingStatus::FullyDistributed);

                purchCommitmentHeader_PSN.update();

                update_recordset commitmentLine
                    setting DraftAmount = 0.0,
                            OriginalAmount = commitmentLine.LineAmount
                    where commitmentLine.PurchCommitmentHeader_PSN == _purchCommitmentHeaderRecId;

                reviseSuccess = true;
                ttscommit;
            }
        }

        catch (Exception::Error)
        {
            throw Exception::Error;
        }

        return reviseSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchCommitmentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns new commitment number using the number sequence that is set up for commitment number identifier.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setPurchCommitmentNumber()
    {
        NumberSeq               numberSeq;
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceReference numSeqReference = BudgetParameters::numRefPurchCommitmentNum_PSN();

        if (!numSeqReference)
        {
            AifFault::checkFailedLogFault(strFmt("@SPS1274", "@SPS1834", enum2str(NumberSeqModule::Budget)));
        }
        else
        {
            numberSequenceTable = NumberSequenceTable::find(numSeqReference.NumberSequenceId);

            if (!numberSequenceTable)
            {
                // The number sequence that was selected for the commitment number does not exist.
                AifFault::checkFailedLogFault(strFmt("@SPS1274", numSeqReference.referenceLabel(), numSeqReference.referenceModuleLabel()));
            }
            else
            {
                if (numberSequenceTable.Blocked)
                {
                    // The number sequence set up for commitment number is on hold.
                    AifFault::checkFailedLogFault(strFmt("@SYS25068", numberSequenceTable.NumberSequence));
                }
                else
                {
                    numberSeq = NumberSeq::newGetNum(numSeqReference, numSeqReference.numberSequenceTable().Continuous, true);
                    if (numberSeq)
                    {
                        this.setFieldValue(fieldStr(PurchCommitmentHeader_PSN, CommitmentNumber),numberSeq.num());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the current record can be deleted.
    /// </summary>
    /// <returns>
    /// true if the current record can be deleted; otherwise false
    /// </returns>
    public boolean validateDelete()
    {
        boolean okToDelete;

        okToDelete = super();

        okToDelete = okToDelete && this.canDelete();

        if ((okToDelete) && (this.WorkflowApprovalState == PurchCommitmentWorkflowApprovalState_PSN::Approved)
            && (Box::yesNo(strFmt("@SPS2139", this.CommitmentNumber), DialogButton::No) == DialogButton::No))
        {
            okToDelete = false;
        }

        return okToDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean isFieldValid;

        isFieldValid = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(PurchCommitmentHeader_PSN, DefaultAccountingDate):
                isFieldValid = this.isDateInFiscalCalendarYear(this.DefaultAccountingDate);
            break;
        }

        return isFieldValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>PurchCommitmentHeader_PSN</c> table and shows an error message if it does not.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(RefRecId _recId)
    {
        boolean ret = true;

        if (!PurchCommitmentHeader_PSN::exist(_recId))
        {
            ret = checkFailed(strFmt(PurchCommitmentHeader_PSN::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record exists in the <c>PurchCommitmentHeader_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///     The ID of the record to find.
    /// </param>
    /// <returns>
    ///     true if the record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _recId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     purchCommitmentHeader_PSN
                where
                     purchCommitmentHeader_PSN.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCommitmentForCurrentFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if commitment records exist for the current fiscal year.
    /// </summary>
    /// <returns>
    /// true if commitment records exist for the current fiscal year; otherwise, false.
    /// </returns>
    public static boolean existCommitmentForCurrentFiscalYear()
    {
        PurchCommitmentHeader_PSN purchCommitmentHeader_PSN;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            select firstOnly RecId from purchCommitmentHeader_PSN
                where purchCommitmentHeader_PSN.FiscalCalendarYear == FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::current()), DateTimeUtil::date(DateTimeUtil::utcNow())).RecId;

            return purchCommitmentHeader_PSN.RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCommitmentByAgreementAndVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PurchCommitmentHeader_PSN</c> table exists.
    /// </summary>
    /// <param name="_agreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementHeader</c> record.
    /// </param>
    /// <param name="_vendAccount">
    /// A string containing the vendor account value.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existsCommitmentByAgreementAndVendor(AgreementHeaderRecId _agreementHeaderRecId,
                                                                VendAccount _vendAccount)
    {
        PurchCommitmentHeader_PSN   purchCommitmentHeader_PSN;
        PurchCommitmentLine_PSN     purchCommitmentLine_PSN;
        AgreementLine               agreementLine;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            select firstonly RecId from purchCommitmentHeader_PSN
                exists join agreementLine
                join RecId from purchCommitmentLine_PSN
                where purchCommitmentLine_PSN.PurchCommitmentHeader_PSN == purchCommitmentHeader_PSN.RecId
                && purchCommitmentHeader_PSN.VendorAccount              == _vendAccount
                && agreementLine.Agreement         == _agreementHeaderRecId;

            return purchCommitmentHeader_PSN.RecId != 0;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>PurchCommitmentHeader_PSN</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>PurchCommitmentHeader_PSN</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A base enum value which indicates the concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PurchCommitmentHeader_PSN</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PurchCommitmentHeader_PSN find(
        recId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchCommitmentHeader_PSN purchCommitmentHeader;

        purchCommitmentHeader.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            purchCommitmentHeader.concurrencyModel(_concurrencyModel);
        }

        select firstonly purchCommitmentHeader
            where purchCommitmentHeader.RecId == _recId;

        return purchCommitmentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the <c>PurchCommitmentHeader_PSN</c> record for the supplied <c>SourceDocumentHeader</c> recId.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    ///     The <c>SourceDocumentHeader</c> recId for which to find the record.
    /// </param>
    /// <returns>
    ///     A <c>PurchCommitmentHeader_PSN</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PurchCommitmentHeader_PSN findSourceDocumentHeader(
        RefRecId            _sourceDocumentHeader)
    {
        PurchCommitmentHeader_PSN    purchCommitmentHeader;

        select firstonly purchCommitmentHeader
            where purchCommitmentHeader.SourceDocumentHeader == _sourceDocumentHeader;

        return purchCommitmentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveWorkflowForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if an active <c>PurchCommitmentTemplate_PSN</c> workflow type exists for the passed in company.
    /// </summary>
    /// <param name="_dataArea">
    /// The <c>DataAreaId</c> value of the company to check for an active workflow for.
    /// </param>
    /// <returns>
    /// true if the passed in company has an active <c>PurchCommitmentTemplate_PSN</c> workflow; otherwise, false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean hasActiveWorkflowForCompany(DataAreaId _dataArea = CompanyInfo::find().DataArea)
    {
        WorkflowTable           workflowTable;
        WorkflowVersionTable    workflowVersionTable;

        select firstonly RecId from workflowTable
            exists join workflowVersionTable
            where workflowTable.TemplateName            == workFlowTypeStr(PurchCommitmentTemplate_PSN)
                  && workflowTable.Type                 == WorkflowConfigurationType::Definition
                  && workflowTable.DataArea             == _dataArea
                  && workflowVersionTable.WorkflowTable == workflowTable.RecId
                  && workflowVersionTable.Enabled       == NoYes::Yes;

        return workflowTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommitmentReferencedOnPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the the lines of the commitment have been referenced on a purchase order line
    /// </summary>
    /// <param name="_purchCommitmentHeaderRecId">
    ///     A record id of the <c>PurchCommitmentHeader_PSN</c> record to check the reference for
    /// </param>
    /// <returns>
    ///     true if the reference exists; otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isCommitmentReferencedOnPurchLine(RefRecId _purchCommitmentHeaderRecId)
    {
        PurchLine                   purchLine;
        PurchCommitmentLine_PSN     commitmentLine;

        boolean isReferenced = false;

        select firstonly RecId from purchLine
        join RecId from commitmentLine
            where commitmentLine.PurchCommitmentHeader_PSN == _purchCommitmentHeaderRecId
            && purchLine.PurchCommitmentLine_PSN == commitmentLine.RecId;

        if (purchLine.RecId)
        {
            isReferenced = true;
        }

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommitmentReferencedOnVendInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the the lines of the commitment have been referenced on a vendor invoice line
    /// </summary>
    /// <param name="_purchCommitmentHeaderRecId">
    ///     A record id of the <c>PurchCommitmentHeader_PSN</c> record to check the reference for
    /// </param>
    /// <returns>
    ///     true if the reference exists; otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isCommitmentReferencedOnVendInvoiceLine(RefRecId _purchCommitmentHeaderRecId)
    {
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        PurchCommitmentLine_PSN     commitmentLine;

        boolean isReferenced = false;

        select firstonly RecId from vendInvoiceInfoLine
        join RecId from commitmentLine
            where commitmentLine.PurchCommitmentHeader_PSN == _purchCommitmentHeaderRecId
            && vendInvoiceInfoLine.PurchCommitmentLine_PSN == commitmentLine.RecId;

        if (vendInvoiceInfoLine.RecId)
        {
            isReferenced = true;
        }

        return isReferenced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommitmentsFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all requirements are met for the commitments feature to be enabled.
    /// </summary>
    /// <returns>
    /// true if the commmitments feature is enabled; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isCommitmentsFeatureEnabled()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidForVendorEditing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if vendor can be edited for passed <c>PurchCommitmentHeader_PSN</c> record
    /// </summary>
    /// <param name="_purchCommitmentHeader">
    /// A <c>PurchCommitmentHeader_PSN</c> record to check for vendor editing
    /// </param>
    /// <returns>
    /// true if vendor can be edited; otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static boolean isValidForVendorEditing(PurchCommitmentHeader_PSN _purchCommitmentHeader)
    {
        PurchCommitmentHeader_PSN purchCommitmentHeader;
        PurchCommitmentLine_PSN purchCommitmentLine;

        if (_purchCommitmentHeader.RecId)
        {
            select count(RecId) from purchCommitmentHeader
                exists join purchCommitmentLine
                where purchCommitmentHeader.RecId == _purchCommitmentHeader.RecId
                    && purchCommitmentHeader.RecId == purchCommitmentLine.PurchCommitmentHeader_PSN
                    && (purchCommitmentHeader.DocumentStatus == PurchCommitmentDocumentStatus_PSN::UnderRevision || purchCommitmentHeader.DocumentStatus == PurchCommitmentDocumentStatus_PSN::Draft)
                    && purchCommitmentLine.AgreementLine;
        }

        return purchCommitmentHeader.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefPurchCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the <c>PurchCommitment_PSN</c> form for the specified commitment.
    /// </summary>
    /// <param name="_purchCommitmentLineRecId">
    /// The unique ID of <c>PurchCommitmentLine_PSN</c> table record referenced by the caller.
    /// </param>
    public static void jumpRefPurchCommitment(RecId _purchCommitmentLineRecId)
    {
        PurchCommitmentLine_PSN   purchCommitmentLine_PSN;
        PurchCommitmentHeader_PSN purchCommitmentHeader_PSN;

        select firstOnly purchCommitmentHeader_PSN
        exists join purchCommitmentLine_PSN
            where purchCommitmentHeader_PSN.RecId == purchCommitmentLine_PSN.PurchCommitmentHeader_PSN
                && purchCommitmentLine_PSN.RecId == _purchCommitmentLineRecId;

        Args args = new Args();
        args.caller(args.caller());
         
        FormRun formRun = new MenuFunction(menuitemDisplayStr(PurchCommitment_PSN), MenuItemType::Display).create(args);
       
        formRun.run();
        formRun.dataSource(1).findRecord(purchCommitmentHeader_PSN);
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the <c>DocumentStatus</c> and <c>WorkflowApprovalState</c> fields of the <c>PurchCommitmentHeader_PSN</c>
    /// table based on the workflow events occurred.
    /// </summary>
    /// <param name="_purchCommitmentHeaderRecId">
    /// The record ID of the table which is associated with the workflow.
    /// </param>
    /// <param name="_purchCommitmentWorkflowApprovalState">
    /// The workflow state to be set.
    /// </param>
    /// <remarks>
    /// The method is called from the workflow event handler classes
    /// </remarks>
    public static void setWorkflowState(recId _purchCommitmentHeaderRecId,
                                        PurchCommitmentWorkflowApprovalState_PSN _purchCommitmentWorkflowApprovalState)
    {
        PurchCommitmentHeader_PSN purchCommitmentHeader_PSN = PurchCommitmentHeader_PSN::find(_purchCommitmentHeaderRecId,true);

        if (purchCommitmentHeader_PSN)
        {
            ttsbegin;

            if (_purchCommitmentWorkflowApprovalState == PurchCommitmentWorkflowApprovalState_PSN::Approved)
            {
                purchCommitmentHeader_PSN.processSourceDocumentHeader();

                if (PurchCommitmentHeader_PSN::find(_purchCommitmentHeaderRecId).getSourceDocumentHeaderStatus() == SourceDocumentAccountingStatus::Completed)
                {
                    purchCommitmentHeader_PSN.DocumentStatus = PurchCommitmentDocumentStatus_PSN::Complete;
                }
            }

            purchCommitmentHeader_PSN.WorkflowApprovalState = _purchCommitmentWorkflowApprovalState;
            purchCommitmentHeader_PSN.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the ID of the label to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    ///     A string indicating the label ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
	<DeveloperDocumentation>@SPS1850</DeveloperDocumentation>
	<Label>@SPS1843</Label>
	<SingularLabel>PurchCommitmentHeader</SingularLabel>
	<TitleField1>CommitmentNumber</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>Budget</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>SourceDocumentHeader</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>SourceDocumentHeader</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommitmentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CommitmentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommitmentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SPS1846</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@SPS1842</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>State</Name>
			<Label>@SPS1847</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowApprovalState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SPS1844</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CommitmentNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultAccountingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FiscalCalendarYear</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SPS1845</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayVendorName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Workflow</Name>
			<Label>@SYS103643</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DocumentStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkflowApprovalState</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CommitmentNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCommitmentNumber_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DefaultAccountingDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AccountingDate</ExtendedDataType>
			<Label>@SPS1819</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DocumentStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS1838</Label>
			<EnumType>PurchCommitmentDocumentStatus_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FiscalCalendarYear</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS13292</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmWorker</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS1832</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCommitmentName_PSN</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReasonComment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchCommitmentReasonComment_PSN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefPurchCommitmentHeader_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendorAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowApprovalState</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS1851</Label>
			<EnumType>PurchCommitmentWorkflowApprovalState_PSN</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Partition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CommitmentIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CommitmentNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FiscalCalendarYearIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>FiscalCalendarYear</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SourceDocumentHeaderImplementation</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader</MapField>
					<MapFieldTo>SourceDocumentHeader</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FiscalCalendarYear</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FiscalCalendarYear</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FiscalCalendarYear</Name>
					<Field>FiscalCalendarYear</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmWorker</Name>
					<Field>HcmWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RefPurchCommitmentHeader_PSN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchCommitmentHeader_PSN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefPurchCommitmentHeader_PSN</Name>
					<Field>RefPurchCommitmentHeader_PSN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendorAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>