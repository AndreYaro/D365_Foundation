<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSPurchLine extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>WHSPurchLine</c> fields based on the corresponding <c>PurchLine</c>
    /// </summary>
    /// <param name="_purchLine">
    /// The source <c>PurchLine</c> record.
    /// </param>
    public void initFromPurchLine(PurchLine _purchLine)
    {
        this.InventTransId  = _purchLine.InventTransId;
        
        this.initQtyFromPurchLine(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQtyFromPurchLine</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initializes the quantity on <c>WHSPurchLine</c> based on the active <c>PurchLine</c>.
    /// </summary>
    /// <param name = "_purchLine">The source <c>PurchLine</c> record.</param>
	private void initQtyFromPurchLine(PurchLine _purchLine)
    {
        // In case of change management, use quantities from the last approved line - it might not exist yet, in this case, no quantities need to be transfered
        PurchLine activePurchLine = _purchLine;
        if (_purchLine.type().isChangeRequestRequired())
        {
            activePurchLine = _purchLine.findApproved();

            if (!activePurchLine)
            {
                return;
            }
        }
		
        if (PdsGlobal::pdsIsCWItem(activePurchLine.ItemId))
        {
            this.QtyLeftToLoad  = activePurchLine.PdsCWQty;
        }
        else
        {
            this.QtyLeftToLoad  = activePurchLine.PurchQty;            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(InventTransId _inventTransId)
    {
        return _inventTransId && (select firstonly RecId from whsPurchLine
                 where whsPurchLine.InventTransId ==_inventTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPurchLineWithNonZeroQtyLeftToLoad</Name>
				<Source><![CDATA[
    internal static boolean existsPurchLineWithNonZeroQtyLeftToLoad(PurchIdBase _orderNum)
    {
        PurchLine purchLine;

        if (WHSPurchLine::useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad())
        {
            if (WHSInboundInventTransLoadQtyViewRemoveStatusReceiptRangeFlight::instance().isEnabled())
            {
                WHSInboundQtyLeftToLoadV2View locInboundQtyLeftToLoadV2;

                select firstonly PurchId from purchLine
                    where purchLine.PurchId == _orderNum
                    exists join locInboundQtyLeftToLoadV2
                        where locInboundQtyLeftToLoadV2.InventTransId == purchLine.InventTransId
                            && locInboundQtyLeftToLoadV2.QtyLeftToLoad != 0;
            }
            else
            {
                WHSInboundQtyLeftToLoadView locInboundQtyLeftToLoad;

                select firstonly PurchId from purchLine
                    exists join locInboundQtyLeftToLoad
                    where purchLine.PurchId                      == _orderNum
                        && locInboundQtyLeftToLoad.InventTransId == purchLine.InventTransId
                        && locInboundQtyLeftToLoad.QtyLeftToLoad != 0;
            }
        }
        else
        {
            WHSPurchLine locWHSPurchLine;

            select firstonly PurchId from purchLine
                exists join locWHSPurchLine
                where purchLine.PurchId              == _orderNum
                    && locWHSPurchLine.InventTransId == purchLine.InventTransId
                    && locWHSPurchLine.QtyLeftToLoad != 0;
        }

        return purchLine.PurchId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WHSPurchLine find(InventTransId _inventTransId,
                                    boolean       _forupdate = false)
    {
        WHSPurchLine    whsPurchLine;

        if (_inventTransId)
        {
            whsPurchLine.selectForUpdate(_forupdate);

            select firstonly whsPurchLine
                where whsPurchLine.InventTransId == _inventTransId;
        }

        return whsPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtensionRecordNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether a purchase line needs to have a corresponding WHS extension record.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase line.
    /// </param>
    /// <returns>
    /// true if the purchase line needs an extension record; otherwise, false.
    /// </returns>
    public static boolean isExtensionRecordNeeded(PurchLine _purchLine)
    {
        return WHSInventEnabled::exist(_purchLine.ItemId) || TMSInventEnabled::exist(_purchLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventDimForPurchaseLineRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare an <c>InventDim</c> record with inventory dimensions to use when registering the purchase order line.
    /// </summary>
    /// <param name = "_purchLine">Purchase order line to be registered.</param>
    /// <param name = "_inventDimRegister">Inventory dimensions to register at. If site or warehouse are not specified, they will be taken from the purchase order line.</param>
    /// <returns>The final <c>InventDim</c> record to register the purchase order line on.</returns>
    protected static InventDim prepareInventDimForPurchaseLineRegistration(PurchLine _purchLine, InventDim _inventDimRegister)
    {
        InventDim inventDim;
        InventDim inventDimPurchLine = _purchLine.inventDim();

        buf2Buf(_inventDimRegister, inventDim);

        if (!inventDim.inventSiteId)
        {
            inventDim.InventSiteId = inventDimPurchLine.InventSiteId;
        }

        if (!inventDim.InventLocationId)
        {
            inventDim.InventLocationId = inventDimPurchLine.InventLocationId;
        }

        inventDim.wmsLocationId = InventLocation::find(inventDim.InventLocationId).wmsLocationIdDefaultReceipt;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPurchaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register the purchase order line at the warehouse with the specified quantity and inventory dimensions.
    /// </summary>
    /// <param name="_inventTransId">
    /// Lot Id of the purchase order line.
    /// </param>
    /// <param name="_qty">
    /// Qty to register. Can be negative, if we are unregistering.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimensions to register at.
    /// If site or warehouse are not specified, they will be taken from the purchase order line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If InventTrans record gets updated by an external process while we are selecting it.
    /// </exception>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the registerQuantities method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public static void registerPurchaseLine(
        InventTransId        _inventTransId,
        InventQty            _qty,
        InventDim            _inventDim)
    {
        ttsbegin;

        PurchLine       purchLine       = PurchLine::findInventTransId(_inventTransId, true);

        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), purchLine.ItemId);

        WHSPurchLine::registerPurchaseLineQuantities(purchLine, _qty, 0, _inventDim);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register the purchase order line at the warehouse with the specified quantities and inventory dimensions.
    /// </summary>
    /// <param name="_inventTransId">
    /// Lot Id of the purchase order line.
    /// </param>
    /// <param name="_registerQty">
    /// An inventory quantity to register. Can be negative, if we are unregistering.
    /// </param>
    /// <param name="_registerCWQty">
    /// A catch weight quantity to register. Can be negative, if we are unregistering.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimensions to register at.
    /// If site or warehouse are not specified, they will be taken from the purchase order line.
    /// </param>
    [Hookable(false)]
    public static void registerQuantities(
        InventTransId        _inventTransId,
        InventQty            _registerQty,
        PdsInventQty         _registerCWQty,
        InventDim            _inventDim)
    {
        ttsbegin;

        PurchLine       purchLine       = PurchLine::findInventTransId(_inventTransId, true);

        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), purchLine.ItemId, _registerCWQty))
        {
            WHSPurchLine::registerPurchaseLine(_inventTransId, _registerQty, _inventDim);
        }
        else
        {
            WHSPurchLine::registerPurchaseLineQuantities(purchLine, _registerQty, _registerCWQty, _inventDim);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPurchaseLineQuantities</Name>
				<Source><![CDATA[
    private static void registerPurchaseLineQuantities(
        PurchLine            _purchLine,
        InventQty            _registerQty,
        PdsInventQty         _registerCWQty,
        InventDim            _inventDim)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _purchLine.ItemId, _registerCWQty, _registerQty);
        
        InventDim       inventDim       = InventDim::findOrCreate(WHSPurchLine::prepareInventDimForPurchaseLineRegistration(_purchLine, _inventDim));
        InventDimParm   inventDimParm   = inventDim.toDimParm();
        InventMovement  movement        = InventMovement::construct(_purchLine);

        InventUpd_Registered registered = InventUpd_Registered::newParameters(movement, _inventDim, _inventDim.toDimParm(), inventDim, inventDimParm, _registerQty, _registerCWQty);

        registered.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQtyLeftToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases QtyLeftToLoad by given amount.
    /// </summary>
    /// <param name = "_qty">The amount the QtyLeftToLoad will be increased by.</param>
    public void increaseQtyLeftToLoad(Qty _qty)
    {
        this.QtyLeftToLoad += _qty;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseQtyLeftToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decreases QtyLeftToLoad by given amount.
    /// </summary>
    /// <param name = "_qty">The amount the QtyLeftToLoad will be decreased by.</param>
    public void decreaseQtyLeftToLoad(Qty _qty)
    {
        this.increaseQtyLeftToLoad(-_qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyLeftToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates qty left to load for the purchase line.
    /// </summary>
    public void updateQtyLeftToLoad()
    {    
        WHSQtyLeftToLoad newQtyLeftToLoad = this.calculateQtyLeftToLoad();
        this.updateQtyLeftToLoadWith(newQtyLeftToLoad);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    private PurchLine purchLine()
    {
        return PurchLine::findInventTransId(this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWItem</Name>
				<Source><![CDATA[
    private boolean isCWItem()
    {
        return PdsGlobal::pdsIsCWItem(this.purchLine().ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyLeftToLoad</Name>
				<Source><![CDATA[
    private WHSQtyLeftToLoad calculateQtyLeftToLoad() 
    {         
        if (WHSPurchLine::useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad())
        {
            return this.purchQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView();
        }

        boolean isCWItem = this.isCWItem();

        InventHandlingQty nonRegisteredHandlingQty;

        if (WHSPurchLineQtyLeftUpdateContext::allowUpdate())
        {
            nonRegisteredHandlingQty = (isCWItem ? this.getCWOrderedQuantity() : (this.getOrderedQuantity() + this.getReceivedQuantity()));
        }
        else
        {
            nonRegisteredHandlingQty = (isCWItem ? this.getCWOrderedQuantity() : this.getOrderedQuantity());
        }
        
        WHSQtyLeftToLoad newQtyLeftToLoad;
        if (nonRegisteredHandlingQty)
        {
            PurchLine purchLine = this.purchLine();

            UnitOfMeasureSymbol inventHandlingUnit = WHSCatchWeightHelper::inventHandlingUnitId(purchLine.ItemId);
            UnitOfMeasureSymbol orderUnit = (isCWItem ? purchLine.pdsCWUnitId(): purchLine.PurchUnit);

            InventQty onLoadWithoutWork = this.getOnLoadWithoutWorkQty();

            InventHandlingQty handlingQtyLeftToLoad = max(0, nonRegisteredHandlingQty - onLoadWithoutWork);

            newQtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
																									 purchLine.InventDimId,
                                                                                                     handlingQtyLeftToLoad,
                                                                                                     inventHandlingUnit,
                                                                                                     orderUnit,
																									 NoYes::No,
                                                                                                     true);
        }

        return newQtyLeftToLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyLeftToLoadWith</Name>
				<Source><![CDATA[
    private void updateQtyLeftToLoadWith(WHSQtyLeftToLoad _newQtyLeftToLoad)
    {
        if (this.QtyLeftToLoad != _newQtyLeftToLoad)
        {
            this.QtyLeftToLoad = _newQtyLeftToLoad;
            this.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderedQuantity</Name>
				<Source><![CDATA[
    private InventQty getOrderedQuantity()
    {
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        return inventTransIdSum.ordered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivedQuantity</Name>
				<Source><![CDATA[
    private InventQty getReceivedQuantity()
    {
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        return inventTransIdSum.received();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCWOrderedQuantity</Name>
				<Source><![CDATA[
    private PdsCWInventQty getCWOrderedQuantity()
    {
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(this.DataAreaId, this.InventTransId));

        return inventTransIdSum.pdsCWOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnLoadWithoutWorkQty</Name>
				<Source><![CDATA[
    private InventQty getOnLoadWithoutWorkQty()
    {
        InventQty onLoadQty;
        InventQty onWorkForLoadQty;

        WHSLoadLine loadLine;

        while select InventQty, WorkCreatedQty from loadLine
            where loadLine.InventTransId    == this.InventTransId
        {
            onLoadQty           += max(loadLine.InventQty, loadLine.WorkCreatedQty);
            onWorkForLoadQty    += loadLine.WorkCreatedQty;
        }

        return onLoadQty - onWorkForLoadQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyLeftToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the quantity left to load in purchase order unit.
    /// </summary>
    /// <returns>Purchase quantity left to load value.</returns>
    public WHSQtyLeftToLoad purchQtyLeftToLoad()
    {
        if (WHSPurchLine::useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad())
        {
            return this.purchQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView();        
        }
        else
        {
            return this.QtyLeftToLoad;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView</Name>
				<Source><![CDATA[
    private WHSQtyLeftToLoad purchQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView()
    {
        PurchLine purchLine = PurchLine::findInventTransId(this.InventTransId);

        if (purchLine)
        {
            InventHandlingQty inventQtyLeftToLoad = this.handlingQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView();
            UnitOfMeasureSymbol handlingUOM = WHSCatchWeightHelper::inventHandlingUnitId(purchLine.ItemId);
            UnitOfMeasureSymbol orderUnit = (this.isCWItem() ? purchLine.pdsCWUnitId(): purchLine.PurchUnit);
            PurchQty purchQtyLeftToLoad;

            if (handlingUOM != orderUnit)
            {
                purchQtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                                               purchLine.InventDimId,
                                                                                                               inventQtyLeftToLoad,
                                                                                                               handlingUOM,
                                                                                                               orderUnit,
                                                                                                               NoYes::No,
                                                                                                               true);
            }
            else
            {
                purchQtyLeftToLoad = inventQtyLeftToLoad;
            }
			
			return purchQtyLeftToLoad;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftToLoadInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the inventory quantity left to be loaded.
    /// </summary>
    /// <returns>Inventory quantity left to load value.</returns>
    public InventQty qtyLeftToLoadInvent()
    {
        return this.handlingQtyLeftToLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inboundHandlingQtyLeftToLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventHandlingQty inboundHandlingQtyLeftToLoad()
    {
        if (WHSPurchLine::useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad())
        {
            return this.handlingQtyLeftToLoadByWHSInboundQtyLeftToLoadView();
        }
        else
        {
            return this.handlingQtyLeftToLoadByWHSPurchLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQtyLeftToLoadByWHSInboundQtyLeftToLoadView</Name>
				<Source><![CDATA[
    private InventHandlingQty handlingQtyLeftToLoadByWHSInboundQtyLeftToLoadView()
    {
        if (!WHSInboundInventTransLoadQtyViewRemoveStatusReceiptRangeFlight::instance().isEnabled())
        {
            return (select QtyLeftToLoad from WHSInboundQtyLeftToLoadView where WHSInboundQtyLeftToLoadView.InventTransId == this.InventTransId).QtyLeftToLoad;
        }

        return (select QtyLeftToLoad from WHSInboundQtyLeftToLoadV2View where WHSInboundQtyLeftToLoadV2View.InventTransId == this.InventTransId).QtyLeftToLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQtyLeftToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the handling quantity left to be loaded.
    /// </summary>
    /// <returns>Handling quantity left to load value.</returns>
    [Hookable(false)]
    internal InventHandlingQty handlingQtyLeftToLoad()
    {
        if (WHSPurchLine::useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad())
        {
            return this.handlingQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView();
        }
        else 
        {
            return this.handlingQtyLeftToLoadByWHSPurchLine();
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQtyLeftToLoadByWHSPurchLine</Name>
				<Source><![CDATA[
    private InventHandlingQty handlingQtyLeftToLoadByWHSPurchLine()
    {
        InventHandlingQty   qtyLeftToLoad;
        PurchLine           purchLine = PurchLine::findInventTransId(this.InventTransId);
        
        if (purchLine)
        {
            // Catch weight items store quantity left to load in catch weight unit so no need to convert.
            if (PdsGlobal::pdsIsCWItem(purchLine.ItemId))
            {
                return this.QtyLeftToLoad;
            }

            UnitOfMeasureSymbol handlingUOM = WHSCatchWeightHelper::inventHandlingUnitId(purchLine.ItemId);
        
            if (handlingUOM != purchLine.PurchUnit)
            {
                qtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                                      purchLine.InventDimId,
                                                                                                      this.QtyLeftToLoad,
                                                                                                      purchLine.PurchUnit,
                                                                                                      handlingUOM,
                                                                                                      NoYes::No,
                                                                                                      true);
            }
            else
            {
                qtyLeftToLoad = this.QtyLeftToLoad;
            }
        }

        return qtyLeftToLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView</Name>
				<Source><![CDATA[
    private InventHandlingQty handlingQtyLeftToLoadByWHSPurchLineQtyLeftToLoadView()
    {
        return (select QtyLeftToLoad from WHSPurchLineQtyLeftToLoadView where WHSPurchLineQtyLeftToLoadView.InventTransId == this.InventTransId).QtyLeftToLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>WHSPurchLine</c> record.
    /// </summary>
    public void insert()
    {
        this.setQtyLeftToLoadForPurchaseTypeJournal();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>WHSPurchLine</c> record.
    /// </summary>
    public void update()
    {
        this.setQtyLeftToLoadForPurchaseTypeJournal();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyLeftToLoadForPurchaseTypeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set QtyLeftToLoad to zero when purchase type of purchase line is Journal.
    /// </summary>
    private void setQtyLeftToLoadForPurchaseTypeJournal()
    {
        PurchLine purchLine = PurchLine::findInventTransId(this.InventTransId);

        if (purchLine.PurchaseType == PurchaseType::Journal
            && this.QtyLeftToLoad != 0)
        {
            this.QtyLeftToLoad = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether we are using the new views for displaying quantity left to load instead of relying on <c>WHSPurchLine.QtyLeftToLoad</c>.
    /// </summary>
    /// <returns>true if the new views are used. Otherwise, false.</returns>    
    [Hookable(false)]
    public static boolean useWHSPurchLineQtyLeftToLoadViewForQtyLeftToLoad()
    {
        return WhsPurchLineQtyLeftToLoadViewFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginHasReceiptsWithoutLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether receipt inventory transactions (registered and above statuses) that are not associated with a load exist for a source document.
    /// </summary>
    /// <param name = "_purchLineInventTransOriginId">InventTransOriginId of the purchase line.</param>
    /// <returns>true if receipts without load asssociations exist; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean inventTransOriginHasReceiptsWithoutLoad(InventTransOriginId _purchLineInventTransOriginId)
    {
        InventTrans purchLineInventTrans;
        
        select firstonly RecId from purchLineInventTrans
            where purchLineInventTrans.InventTransOrigin == _purchLineInventTransOriginId
               && purchLineInventTrans.StatusIssue == StatusIssue::None
               && purchLineInventTrans.StatusReceipt <= StatusReceipt::Registered
               && purchLineInventTrans.LoadId == '';
  
        return purchLineInventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginHasRegistrationsWithoutLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether registration inventory transactions that are not associated with a load exist for a source document.
    /// </summary>
    /// <param name = "_purchLineInventTransOriginId">InventTransOriginId of the purchase line.</param>
    /// <returns>true if registrations without load associations exist; otherwise, false.</returns>
    private static boolean inventTransOriginHasRegistrationsWithoutLoad(InventTransOriginId _purchLineInventTransOriginId)
    {
        InventTrans purchLineInventTrans;
        
        select firstonly RecId from purchLineInventTrans
            where purchLineInventTrans.InventTransOrigin == _purchLineInventTransOriginId
               && purchLineInventTrans.StatusIssue == StatusIssue::None
               && purchLineInventTrans.StatusReceipt == StatusReceipt::Registered
               && purchLineInventTrans.LoadId == '';

        return purchLineInventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDetermineRegisteredQuantitiesFromLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the registered quantities should be determined based on the load ID.
    /// </summary>
    /// <param name = "_purchLineInventTransOriginId">InventTransOriginId of the purchase line.</param>
    /// <returns>true if the registered quantities should be determined based on the load ID; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean shouldDetermineRegisteredQuantitiesFromLoadId(InventTransOriginId _purchLineInventTransOriginId)
    {
        return !WHSPurchLine::inventTransOriginHasRegistrationsWithoutLoad(_purchLineInventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unregisters the purchase line when the related work is cancelled.
    /// </summary>
    /// <param name = "_cancelledWorkTable">The cancelled work.</param>
    [Hookable(false)]
    internal static void unRegisterPurchLines(WHSWorkTable _cancelledWorkTable)
    {
        new WhsPurchWorkTransactionType().unregisterOrderLines(_cancelledWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4419</DeveloperDocumentation>
	<FormRef>purchtable</FormRef>
	<Label>@WAX319</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>InventTransId</TitleField1>
	<TitleField2>QtyLeftToLoad</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InventTransIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>InventTransIdx</PrimaryIndex>
	<ReplacementKey>InventTransIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyLeftToLoad</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyLeftToLoad</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CrossDock</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CrossDock</Name>
			<Label>@SYS6437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CrossDock</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CrossDock</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCrossDock</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>OII</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyLeftToLoad</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSQtyLeftToLoad</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>