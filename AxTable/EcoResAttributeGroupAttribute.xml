<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResAttributeGroupAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResAttributeGroupAttribute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteEmptyDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// The purpose to create this method is to delete attribute group attribute value if value is empty.
    /// </summary>
    /// <remarks>
    /// Catalog validation does not complain error if we have empty value in EcoResAttributeGroupAttribute.
    /// </remarks>
    public static void deleteEmptyDefaultValues()
    {
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        EcoResValue         ecoResValue;
        EcoResTextValue     textValue;
        EcoResBooleanValue  booleanValue;
        EcoResFloatValue    floatValue;
        EcoResDateTimeValue dateTimeValue;
        EcoResIntValue      intValue;
        EcoResCurrencyValue currencyValue;
        EcoResReferenceValue ecoResReferenceValue;

        ttsBegin;

        delete_from textValue
            exists join attributeGroupAttribute
            where attributeGroupAttribute.DefaultValue == textValue.RecId
                && !textValue.TextValue;

        delete_from booleanValue
            exists join attributeGroupAttribute
            where attributeGroupAttribute.DefaultValue == booleanValue.RecId
                && !booleanValue.BooleanValue;

        delete_from floatValue
            exists join attributeGroupAttribute
            where attributeGroupAttribute.DefaultValue == floatValue.RecId
                && !floatValue.FloatValue;

        delete_from dateTimeValue
            exists join attributeGroupAttribute
            where attributeGroupAttribute.DefaultValue == dateTimeValue.RecId
                && !dateTimeValue.DateTimeValue;

        delete_from intValue
            exists join attributeGroupAttribute
            where attributeGroupAttribute.DefaultValue == intValue.RecId
                && !intValue.IntValue;

        delete_from currencyValue
            exists join attributeGroupAttribute
            where attributeGroupAttribute.DefaultValue == currencyValue.RecId
                && !currencyValue.CurrencyValue;

        delete_from ecoResReferenceValue
            exists join attributeGroupAttribute
            where attributeGroupAttribute.DefaultValue == ecoResReferenceValue.RecId
                && !ecoResReferenceValue.RefRecId;

        update_recordSet attributeGroupAttribute
            setting DefaultValue = 0
            notExists join ecoResValue
                where ecoResValue.RecId == attributeGroupAttribute.DefaultValue;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the specified record in the <c>EcoResAttributeGroupAttribute</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResAttributeGroupAttribute</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResAttributeGroupAttribute find(RefRecId _recId, boolean _forupdate = false)
    {
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;

        if (_recId)
        {
            ecoResAttributeGroupAttribute.selectForUpdate(_forupdate);

            select firstonly ecoResAttributeGroupAttribute
                where ecoResAttributeGroupAttribute.RecId == _recId;
        }

        return ecoResAttributeGroupAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupAndAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find EcoResAttributeGroupAttribute by attribute group recid and attribute recid.
    /// </summary>
    /// <param name="_attributeGroupId">
    /// Attribute group recid.
    /// </param>
    /// <param name="_attributeId">
    /// Attribute recid
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResAttributeGroupAttribute</c> table; otherwise, an empty buffer.
    /// </returns>
    public static EcoResAttributeGroupAttribute findByGroupAndAttribute(RecId _attributeGroupId, RecId _attributeId, boolean _forupdate = false)
    {
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;

        if (_attributeGroupId && _attributeId)
        {
            ecoResAttributeGroupAttribute.selectForUpdate(_forupdate);

            select firstonly ecoResAttributeGroupAttribute
                where ecoResAttributeGroupAttribute.AttributeGroup == _attributeGroupId && ecoResAttributeGroupAttribute.Attribute == _attributeId;
        }

        return ecoResAttributeGroupAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        super();

        // Published channel attribute for new attribute.
        RetailPubChannelAttribute::onAttributeGroupAttributeInserted(this);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        EcoResAttributeValue ecoResAttributeValue;
        RetailInternalOrgProductInstanceValue retailInternalOrgProductInstanceValue;
        RetailInternalOrgProduct retailInternalOrgProduct;
        RetailInternalOrgAttributeGroup retailInternalOrgAttributeGroup;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;

        ttsBegin;

        // Delete Published channel attributes.
        RetailPubChannelAttribute::onAttributeGroupAttributeDeleting(this);

        // Get the products for which attribute values must not be deleted.
        RetailProductAttibuteValuesRetainTmp retainProductAttributeValues = EcoResAttributeGroupAttribute::getProductsWhoseAttribValuesToBeRetained(this.AttributeGroup,this.Attribute);

        if (!RetailMerchandisingKillSwitch::disableDeleteAttributeValueUponAttributeGroupChanges())
        {
            // Delete EcoResAttributeValue records of an attribute which is applied to a channel or catalog when an attribute is deleted from attribute group.
            delete_from ecoResAttributeValue
                exists join retailInternalOrgProductInstanceValue
                    where retailInternalOrgProductInstanceValue.RecId == ecoResAttributeValue.InstanceValue
                    exists join retailInternalOrgProduct
                        where retailInternalOrgProduct.RecId == retailInternalOrgProductInstanceValue.InternalOrgProduct
                        exists join retailInternalOrgAttributeGroup
                            where retailInternalOrgAttributeGroup.InternalOrganization == retailInternalOrgProduct.InternalOrganization
                            exists join ecoResAttributeGroupAttribute
                                where ecoResAttributeGroupAttribute.AttributeGroup == retailInternalOrgAttributeGroup.AttributeGroup
                                &&    ecoResAttributeGroupAttribute.Attribute == ecoResAttributeValue.Attribute
                                &&    ecoResAttributeGroupAttribute.Attribute == this.Attribute
                                &&    ecoResAttributeGroupAttribute.AttributeGroup == this.AttributeGroup;
        }

        super();

        EcoResAttributeGroupAttribute::deleteCategoryAttributeLookup(this.AttributeGroup,this.Attribute);
        EcoResAttributeGroupAttribute::synchronizeAttributeGroupChangeWithCategoryAttributes(this.AttributeGroup);

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            EcoResAttributeGroupAttribute::deleteAttributeValues(this.AttributeGroup,this.Attribute,retainProductAttributeValues);

            RetailParameters retailParameters = RetailParameters::find();
            EcoResAttribute inventoryProductAttribute = EcoResAttribute::find(retailParameters.InventoryProductAttribute);
            EcoResAttribute inventoryProductAvailabilitySortableAttribute = EcoResAttribute::find(retailParameters.InventoryProductAvailabilitySortableAttribute);

            // for this feature, inventoryProductAttribute is used for display and hide OOS product, sortable attribute is boolean used for sorting
            // if surrent deleted attribute is inventoryProductAttribute, delete sortable attribute as well
            if (inventoryProductAttribute && inventoryProductAttribute.RecId == this.Attribute)
            {
                EcoResAttributeGroupAttribute sortableAvailabilityAttributeGroupAttribute;
                sortableAvailabilityAttributeGroupAttribute = EcoResAttributeGroupAttribute::findByGroupAndAttribute(this.AttributeGroup, inventoryProductAvailabilitySortableAttribute.RecId, true);
                if (sortableAvailabilityAttributeGroupAttribute)
                {
                    sortableAvailabilityAttributeGroupAttribute.delete();
                }
            }
            // if surrent deleted attribute is sortable attribute, delete inventoryProductAttribute as well
            if (inventoryProductAvailabilitySortableAttribute && inventoryProductAvailabilitySortableAttribute.RecId == this.Attribute)
            {
                EcoResAttributeGroupAttribute availabilityAttributeGroupAttribute;
                availabilityAttributeGroupAttribute = EcoResAttributeGroupAttribute::findByGroupAndAttribute(this.AttributeGroup, inventoryProductAttribute.RecId, true);
                if (availabilityAttributeGroupAttribute)
                {
                    availabilityAttributeGroupAttribute.delete();
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeAttributeGroupChangeWithCategoryAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the records in the <c>EcoResCategoryAttributeLookup</c> table
    /// based on the change in the list of attributes included in the specified attribute group.
    /// </summary>
    /// <param name = "_attributeGroupRecId">The RecId of the attribute group that changed.</param>
    public static void synchronizeAttributeGroupChangeWithCategoryAttributes(RecId _attributeGroupRecId)
    {
        EcoResCategoryAttributeGroup ecoResCategoryAttributeGroup;
        EcoResCategory ecoResCategory;

        // Synchronize the products with category attributes
        while select ecoResCategory
            exists join ecoResCategoryAttributeGroup
            where ecoResCategoryAttributeGroup.AttributeGroup == _attributeGroupRecId
               && ecoResCategoryAttributeGroup.Category == ecoResCategory.RecId
               && ecoResCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
        {
            EcoResCategoryAttributeLookup::synchronizeWithCategoryAttribute(ecoResCategory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOtherGroupNameForAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get other groups with has the same attribute.
    /// </summary>
    /// <param name = "_attributeRecId">The attribute identifier.</param>
    /// <param name = "_attributeGroupRecId">he attribute group identifier.</param>
    /// <param name = "_attributeAppliesToModifier">The applies to modifier field value.</param>
    /// <param name = "_channel">The channel identifier.</param>
    /// <returns>List of groups.</returns>
    public static str getOtherGroupNameForAttribute(Int64 _attributeRecId, Int64 _attributeGroupRecId, int64 _attributeAppliesToModifier, int64 _channel)
    {
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        RetailChannelAttributeGroup attributeGroups;
        EcoResAttributeGroup EcoResAttributeGroup;
        Set groupsSet = new Set(Types::String);
        str groups;

        if (_attributeAppliesToModifier == RetailAttributeAppliesToModifier::Default)
        {
            while select AttributeGroup from ecoResAttributeGroupAttribute
                                where ecoResAttributeGroupAttribute.Attribute == _attributeRecId
                                join AttributeGroup from attributeGroups
                                where attributeGroups.AttributeGroup == ecoResAttributeGroupAttribute.AttributeGroup &&
                                      attributeGroups.RecId != _attributeGroupRecId &&
                                      attributeGroups.Modifier == RetailChannelAttributeModifier::SalesOrder &&
                                      attributeGroups.Channel == _channel
                                join Name from EcoResAttributeGroup
                                where EcoResAttributeGroup.RecId == ecoResAttributeGroupAttribute.AttributeGroup
            {
                groupsSet.add(EcoResAttributeGroup.Name);
            }
        }
        else
        {
            while select AttributeGroup from ecoResAttributeGroupAttribute
                                where ecoResAttributeGroupAttribute.Attribute == _attributeRecId
                                join AttributeGroup from attributeGroups
                                where attributeGroups.AttributeGroup == ecoResAttributeGroupAttribute.AttributeGroup &&
                                      attributeGroups.RecId != _attributeGroupRecId &&
                                      attributeGroups.Modifier == RetailChannelAttributeModifier::SalesOrder &&
                                      attributeGroups.Channel == _channel &&
                                      (attributeGroups.AttributeAppliesToModifier == _attributeAppliesToModifier ||
                                      attributeGroups.AttributeAppliesToModifier == RetailAttributeAppliesToModifier::Default)
                                join Name from EcoResAttributeGroup
                                where EcoResAttributeGroup.RecId == ecoResAttributeGroupAttribute.AttributeGroup
            {
                groupsSet.add(EcoResAttributeGroup.Name);
            }
        }

        if (!groupsSet.empty())
        {
            SetEnumerator groupSetEnumerator = groupsSet.getEnumerator();

            while (groupSetEnumerator.moveNext())
            {
                groups += ',' + groupSetEnumerator.current();
            }

            groups = strDel(groups, 1, 1);
        }

        return groups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the attribute values from table <c> EcoResAttributeValue </c> when an attribute is deleted from a group.
    /// Looks for all items with '_attributeGroup' is applied and deletes the attribute values for all the items where attribute is '_attribute'.
    /// </summary>
    /// <param name = "_attributeGroup"> RecId of the Attribute group from which the Attribute is deleted. </param>
    /// <param name = "_attribute"> RecId of the Attribute which is being deleted form attribute group.</param>
    /// <param name = "_productAttributeValuesToRetain"> Temp table contains products for which attributes are not supposed to be deleted.</param>
    private static void deleteAttributeValues(RefRecId _attributeGroup, RefRecId _attribute,RetailProductAttibuteValuesRetainTmp _productAttributeValuesToRetain = null)
    {
        EcoResProductCategory  ecoResProductCategory;
        EcoResCategoryAttributeGroup ecoResCategoryAttributeGroup;
        EcoResAttributeGroupAttribute ecoResAttibuteGroupAttribute;
        EcoResAttributeValue ecoResAttributeValue;
        EcoResProductInstanceValue ecoResProductInstanceValue;
        EcoResProduct ecoResProduct;
        RetailProductAttibuteValuesRetainTmp retainProductAttributeValues;

        retainProductAttributeValues.linkPhysicalTableInstance(_productAttributeValuesToRetain);

        // Deletes attribute values only for products which are part of product atribute groups, it won't delete the atribute values for products
        // which are part of category attribute group.
        // Enum <c>EcoResCategoryAttributeModifier </c> helps to identify product/category/component attribute groups.
        delete_from ecoresAttributeValue
            where ecoresAttributeValue.Attribute == _attribute
            exists join ecoResProductInstanceValue
                where ecoResProductInstanceValue.RecId == ecoresAttributeValue.InstanceValue
                exists join ecoResProduct
                    where ecoResProduct.RecId == ecoResProductInstanceValue.Product
                    exists join ecoResProductCategory
                        where ecoResProductCategory.Product == ecoResProduct.RecId
                        exists join ecoResCategoryAttributeGroup
                            where ecoResCategoryAttributeGroup.Category == ecoResProductCategory.Category
                            &&    ecoResCategoryAttributeGroup.AttributeGroup == _attributeGroup
                            &&    ecoResCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                // Do not delete product attribute values for the products which are present below table
                notexists join retainProductAttributeValues
                    where retainProductAttributeValues.Product == ecoResProduct.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductsWhoseAttribValuesToBeRetained</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates all products for which attribute values are not supposed to be deleted.
    /// </summary>
    /// <param name = "_attributeGroup">RecId of the attribute group which is being deleted.</param>
    /// <param name = "_attribute">RecId of the category from which the attribute group is deleted.</param>
    /// <returns> Table <c>RetailRetainProductAttibuteValuesTmp</c> contains all products for which attribte values are not supposed to be deleted.</returns>
    private static RetailProductAttibuteValuesRetainTmp getProductsWhoseAttribValuesToBeRetained(RefRecId _attributeGroup, RefRecId _attribute)
    {
        EcoResProduct ecoResProduct;
        EcoResAttribute ecoResAttribute;
        EcoResProductCategory ecoResProductCategory;
        EcoResCategoryAttributeGroup ecoResCategoryAttributeGroup;
        EcoResCategoryAttributeGroup categoryAttributeGroupToExclude;
        EcoResAttributeGroupAttribute ecoResAttibuteGroupAttribute,ecoResAttibuteGroupAttributeExclude;
        RetailProductAttibuteValuesRetainTmp retainProductAttributeValues;

        if (!RetailMerchandisingKillSwitch::enableDefaultAttributeValueUponDeletingAttributeGroupChangesForSameCategory())
        {
            // If the _attribute is present in other attribute group and this other attribute group is applied to same product through the same or different category,
            // then for those products attribute value shouldn't be deleted, so store those products in a temp table.
            insert_recordset retainProductAttributeValues (Product, Category,AttributeGroup)
            select RecId from ecoResProduct
                join Category from ecoResProductCategory
                    where ecoResProductCategory.Product == ecoResProduct.RecId
                    join AttributeGroup from categoryAttributeGroupToExclude
                        where categoryAttributeGroupToExclude.Category == ecoResProductCategory.Category
                        &&    categoryAttributeGroupToExclude.Modifier == EcoResCategoryAttributeModifier::Product
                    exists join ecoResCategoryAttributeGroup
                        where ecoResCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                        &&    ecoResCategoryAttributeGroup.AttributeGroup != categoryAttributeGroupToExclude.AttributeGroup
                        &&    ecoResCategoryAttributeGroup.AttributeGroup == _attributeGroup
                    exists join ecoResAttibuteGroupAttribute
                        where ecoResAttibuteGroupAttribute.AttributeGroup == ecoResCategoryAttributeGroup.AttributeGroup
                        &&    ecoResAttibuteGroupAttribute.Attribute == _attribute
                    exists join ecoResAttibuteGroupAttributeExclude
                        where ecoResAttibuteGroupAttributeExclude.AttributeGroup == categoryAttributeGroupToExclude.AttributeGroup
                        &&    ecoResAttibuteGroupAttributeExclude.Attribute == _attribute;
        }
        else
        {
            // If the _attribute is present in other attribute group and this other attribute group is applied to same product through the same category,
            // then for those products attribute value shouldn't be deleted, so store those products in a temp table.
            insert_recordset retainProductAttributeValues (Product, Category,AttributeGroup)
            select RecId from ecoResProduct
                join Category from ecoResProductCategory
                    where ecoResProductCategory.Product == ecoResProduct.RecId
                    join AttributeGroup from categoryAttributeGroupToExclude
                        where categoryAttributeGroupToExclude.Category == ecoResProductCategory.Category
                        &&    categoryAttributeGroupToExclude.Modifier == EcoResCategoryAttributeModifier::Product
                    exists join ecoResCategoryAttributeGroup
                        where ecoResCategoryAttributeGroup.Category == categoryAttributeGroupToExclude.Category
                        &&    ecoResCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                        &&    ecoResCategoryAttributeGroup.AttributeGroup != categoryAttributeGroupToExclude.AttributeGroup
                        &&    ecoResCategoryAttributeGroup.AttributeGroup == _attributeGroup
                    exists join ecoResAttibuteGroupAttribute
                        where ecoResAttibuteGroupAttribute.AttributeGroup == ecoResCategoryAttributeGroup.AttributeGroup
                        &&    ecoResAttibuteGroupAttribute.Attribute == _attribute
                    exists join ecoResAttibuteGroupAttributeExclude
                        where ecoResAttibuteGroupAttributeExclude.AttributeGroup == categoryAttributeGroupToExclude.AttributeGroup
                        &&    ecoResAttibuteGroupAttributeExclude.Attribute == _attribute;
        }

        return retainProductAttributeValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCategoryAttributeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>EcoResCategoryAttributeLookup</c> records when an attribute is deleted from product attribute group.
    /// 1. Checks if the attribute group is applied as product attribute group.
    /// 2. Finds the category for which the above attribute group is applied.
    /// 3. Deletes the category lookups for the above category and attribute.
    /// </summary>
    /// <param name = "_attributeGroup">Attribute group RecId.</param>
    /// <param name = "_attribute">Attribute RecId.</param>
    private static void deleteCategoryAttributeLookup(RefRecId _attributeGroup, RefRecId _attribute)
    {
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResCategoryAttributeGroup ecoResCategoryAttributeGroup;
        EcoResCategory ecoResCategory;

        // Delete category attribute lookup records of an attribute which is applied to a category when an attribute is deleted from product attribute group.
        // Deleting category atribute lookups avoids data corruption.
        delete_from categoryAttributeLookup
            where categoryAttributeLookup.Attribute == _attribute
            exists join ecoResCategory
                where ecoResCategory.RecId == categoryAttributeLookup.Category
                exists join ecoResCategoryAttributeGroup
                    where ecoResCategoryAttributeGroup.Category == ecoResCategory.RecId
                    &&    ecoResCategoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                    &&    ecoResCategoryAttributeGroup.AttributeGroup == _attributeGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@RET261073</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET261072</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AttributeGroup</TitleField1>
	<TitleField2>Attribute</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>AttributeGroupAttributeIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>EcoResValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>EcoResValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailDisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Attribute</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS26467</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailDisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Attribute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RetailDisplayOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDisplayOrder</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AttributeGroupAttributeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Attribute</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AttributeGroupAttributeDisplayOrderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RetailDisplayOrder</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttribute</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResAttribute</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttributeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResAttributeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeGroup</Name>
					<Field>AttributeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResValue</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResValue</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultValue</Name>
					<Field>DefaultValue</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResCategoryAttributeGroupAttrView</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategoryAttributeGroupAttrView</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResCategoryAttributeGroupAttrView</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Attribute</Name>
					<Field>Attribute</Field>
					<RelatedField>Attribute</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeGroup</Name>
					<Field>AttributeGroup</Field>
					<RelatedField>AttributeGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>