<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastItemAllocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ForecastItemAllocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        static boolean checkExist(ForecastItemAllocationId forecastItemAllocationId)
    {
        if (forecastItemAllocationId  && ! ForecastItemAllocation::exist(forecastItemAllocationId))
            return checkFailed(strfmt(ForecastItemAllocation::txtNotExist(),forecastItemAllocationId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistLines</Name>
				<Source><![CDATA[
        public static boolean checkExistLines(ForecastItemAllocationId _key)
    {
        ForecastItemAllocationLine forecastItemAllocationLine;

        if (_key && ForecastItemAllocation::exist(_key))
        {
            select firstonly RecId
                from forecastItemAllocationLine
                where forecastItemAllocationLine.AllocationId == _key;

            return forecastItemAllocationLine.RecId!=0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        static boolean exist(ForecastItemAllocationId  forecastItemAllocationId)
    {
        return forecastItemAllocationId
                && (select RecId from forecastItemAllocation
                    index hint AllocationIdx
                    where forecastItemAllocation.AllocateId == forecastItemAllocationId
                   ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        static ForecastItemAllocation find(ForecastItemAllocationId  forecastItemAllocationId, boolean _forUpdate = false)
    {
        ForecastItemAllocation forecastItemAllocation;

        forecastItemAllocation.selectForUpdate(_forUpdate);

        if (forecastItemAllocationId)
            select firstonly forecastItemAllocation
                index hint AllocationIdx
                where forecastItemAllocation.AllocateId == forecastItemAllocationId;

        return forecastItemAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupNotExistLines</Name>
				<Source><![CDATA[
        public static void lookupNotExistLines(FormStringControl ctrl)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tablenum(ForecastItemAllocation), ctrl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource,queryBuildDataSourceLine;

        sysTableLookup.addLookupfield(fieldnum(ForecastItemAllocation, AllocateId));
        sysTableLookup.addLookupfield(fieldnum(ForecastItemAllocation, Name));

        queryBuildDataSource = query.addDataSource(tablenum(ForecastItemAllocation));
        queryBuildDataSourceLine = queryBuildDataSource.addDataSource(tablenum(ForecastItemAllocationLine));
        queryBuildDataSourceLine.addLink(fieldnum(ForecastItemAllocationLine, AllocationId), fieldnum(ForecastItemAllocation, AllocateId));
        queryBuildDataSourceLine.joinMode(JoinMode::NoExistsJoin);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        static TxtNotExist txtNotExist()
    {
        return "@SYS27832";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return super() && this.validateForecastSalesNotExist();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForecastSalesNotExist</Name>
				<Source><![CDATA[
    private boolean validateForecastSalesNotExist()
    {
        ForecastSales               forecastSales;
        ForecastItemAllocationLine  allocationLine;

        if (!ForecastItemAllocationValidateSalesExistFlight::instance().isEnabled())
        {
            return true;
        }

        select firstonly RecId, ModelId from forecastSales
            where forecastSales.ItemAllocateId == this.AllocateId;

        if (forecastSales.RecId)
        {
            return checkFailed(strFmt("@SCM:AllocationCouldNotBeDeleted",
                              this.AllocateId,
                              forecastSales.ModelId));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Forecast</ConfigurationKey>
	<DeveloperDocumentation>@SYS124110</DeveloperDocumentation>
	<FormRef>ForecastItemAllocation</FormRef>
	<Label>@SYS25240</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AllocateId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>AllocationIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>AllocationIdx</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>ForecastItemAllocationLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>ForecastItemAllocationLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllocateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@Sys6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@Sys5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllocateId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AllocateId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastItemAllocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AllocationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AllocateId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>