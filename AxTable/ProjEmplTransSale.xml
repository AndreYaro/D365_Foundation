<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjEmplTransSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjEmplTransSale extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a transaction can be invoiced.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    An Hour type transaction can only be invoiced if they are registered against a time and material
    ///    project, and the transaction status is posted, selected for credit note, or invoice proposal.
    /// </remarks>
    public boolean canBeInvoiced()
    {
        return ProjTrans::newProjEmplTransSale(ProjEmplTrans::find(this.TransId), this).canBeInvoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeMarkedForCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether this transaction can be selected for a credit note.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be selected for a credit note; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    An Hour type transaction can only be selected for a credit note if the transaction status is
    ///    invoiced, selected for credit note, or credit note proposal.
    /// </remarks>
    boolean canBeMarkedForCreditNote()
    {
        boolean ret;

        if (this.TransStatus == ProjTransStatus::Invoiced ||
            this.TransStatus == ProjTransStatus::MarkedCreditnote ||
            this.TransStatus == ProjTransStatus::CreditnoteProposal)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ProjTrans       projTrans;
        ProjEmplTrans   projEmplTrans;

        if (this.LineAmount != 0.00)
        {
            if (this.validateDelete())
            {
                // reverse existing amounts out of limits
                projTrans = ProjTrans::newProjEmplTransSale(ProjEmplTrans::find(this.TransId), this);
                ProjFundingEngine::updateFundingLimits(projTrans, this.FundingSource, -this.LineAmount);

                ttsbegin;
                select forupdate projEmplTrans
                    where projEmplTrans.TransId == this.TransId;
                if (projEmplTrans)
                {
                    projEmplTrans.TotalSalesAmountCur -= this.LineAmount;
                    projEmplTrans.update();
                }
                ttscommit;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ProjEmplTrans   projEmplTrans;

        // <GIN>
        #isoCountryRegionCodes
        ProjEmplTransTaxExtensionIN projEmplTransTaxExtensionIN;
        // </GIN>

        if (this.LineAmount != 0.00)
        {
            if (this.validateWrite())
            {
                ttsbegin;
                select forupdate projEmplTrans
                    where projEmplTrans.TransId == this.TransId;
                if (projEmplTrans)
                {
                    projEmplTrans.TotalSalesAmountCur += this.LineAmount;

                    // <GIN>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && projEmplTrans.TransactionOrigin == ProjOrigin::Timesheet)
                    {
                        projEmplTransTaxExtensionIN = projEmplTrans.projEmplTransTaxExtensionIN();
                        projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency = projEmplTrans.TotalSalesAmountCur;
                        projEmplTrans.packProjEmplTrans_IN(projEmplTransTaxExtensionIN);
                    }
                    // </GIN>

                    projEmplTrans.update();
                }
                ttscommit;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projEmplTrans</Name>
				<Source><![CDATA[
    public ProjEmplTrans projEmplTrans(boolean _forUpdate = false)
    {
        return ProjEmplTrans::find(this.TransId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a transaction is included in an invoice proposal.
    /// </summary>
    /// <returns>
    ///    true if the transaction is included in an invoice proposal; otherwise, false.
    /// </returns>
    display ProjProposal proposal()
    {
        return ProjTrans::newProjEmplTransSale(this.projEmplTrans(), this).proposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the invoice proposal for a transaction.
    /// </summary>
    /// <returns>
    ///    A <c>ProjProposalId</c> data type that indicates the ID of the invoice proposal for the transaction.
    /// </returns>
    display ProjProposalId proposalId()
    {
        return ProjTrans::newProjEmplTransSale(this.projEmplTrans(), this).proposalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ProjEmplTrans   projEmplTrans;

        // <GIN>
        #isoCountryRegionCodes
        ProjEmplTransTaxExtensionIN projEmplTransTaxExtensionIN;
        // </GIN>

        if (this.LineAmount != this.orig().LineAmount)
        {
            if (this.validateWrite())
            {
                ttsbegin;
                select forupdate projEmplTrans
                    where projEmplTrans.TransId == this.TransId;
                if (projEmplTrans)
                {
                    projEmplTrans.TotalSalesAmountCur += (this.LineAmount - this.orig().LineAmount);

                    // <GIN>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && projEmplTrans.TransactionOrigin == ProjOrigin::Timesheet)
                    {
                        projEmplTransTaxExtensionIN = projEmplTrans.projEmplTransTaxExtensionIN();
                        projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency = projEmplTrans.TotalSalesAmountCur;
                        projEmplTrans.packProjEmplTrans_IN(projEmplTransTaxExtensionIN);
                    }
                    // </GIN>

                    projEmplTrans.update();
                }
                ttscommit;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        ProjEmplTrans   projEmplTrans;

        if (this.LineAmount != this.orig().LineAmount)
        {
            if (this.validateWrite())
            {
                ttsbegin;
                select forupdate projEmplTrans
                    where projEmplTrans.TransId == this.TransId;
                if (projEmplTrans)
                {
                    projEmplTrans.TotalSalesAmountCur += (this.LineAmount - this.orig().LineAmount);
                    projEmplTrans.update();
                }
                ttscommit;
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static ProjEmplTransSale find(RefRecId _recId, boolean _forUpdate = false)
    {
        ProjEmplTransSale   projEmplTransSale = null;

        projEmplTransSale.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select projEmplTransSale where projEmplTransSale.RecId == _recId;
        }

        return projEmplTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForCostRefRecId</Name>
				<Source><![CDATA[
    public static container findForCostRefRecId(RefRecId _costRefRecId)
    {
        ProjEmplTransCost       projEmplTransCost;
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        QueryBuildRange         qbrFundingSource;

        projEmplTransCost = ProjEmplTransCost::find(_costRefRecId);

        query = new Query();
        qbds = query.addDataSource(tablenum(ProjEmplTransSale));
        qbr = qbds.addRange(fieldnum(ProjEmplTransSale, TransId));
        qbr.value(queryValue(projEmplTransCost.TransId));

        if (projEmplTransCost.FundingSource)
        {
            qbrFundingSource = qbds.addRange(fieldnum(ProjEmplTransSale, FundingSource));
            qbrFundingSource.value(queryValue(projEmplTransCost.FundingSource));
        }

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTransIdFundingSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ProjEmplTransSale</c> for the given employee transaction id and the funding source id.
    /// </summary>
    /// <param name = "_transId">A project employee transaction Id.</param>
    /// <param name = "_fundingSourceRecId">The funding source recId.</param>
    /// <param name = "_forUpdate">A boolean value determining whether the record is to be selected for update.</param>
    /// <returns>A <c>ProjEmplTransSale</c> if found; otherwise, empty.</returns>
    public static ProjEmplTransSale findByTransIdFundingSourceId(ProjEmplTransId _transId, ProjFundingSourceRefId _fundingSourceRecId, boolean _forUpdate = false)
    {
        ProjEmplTransSale   projEmplTransSale;

        projEmplTransSale.selectForUpdate(_forUpdate);
        if (_transId && _fundingSourceRecId)
        {
            select firstonly projEmplTransSale
                where projEmplTransSale.TransId == _transId
                && projEmplTransSale.FundingSource == _fundingSourceRecId;
        }

        return projEmplTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromAdjCreateSale</Name>
				<Source><![CDATA[
    public static ProjEmplTransSale initTransFromAdjCreateSale(TmpProjAdjustmentCreateSale _tmpProjAdjustmentCreateSale)
    {
        ProjEmplTransSale  projEmplTransSale;

        projEmplTransSale.SalesPrice        = _tmpProjAdjustmentCreateSale.SalesPrice;
        projEmplTransSale.LineAmount        = _tmpProjAdjustmentCreateSale.LineAmount;
        projEmplTransSale.FundingSource     = _tmpProjAdjustmentCreateSale.FundingSource;
        projEmplTransSale.DefaultDimension  = _tmpProjAdjustmentCreateSale.DefaultDimension;

        return projEmplTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromJournal</Name>
				<Source><![CDATA[
    public static ProjEmplTransSale initTransFromJournal(ProjJournalTrans _projJournalTrans)
    {
        ProjEmplTransSale  projEmplTransSale;

        projEmplTransSale.SalesPrice = _projJournalTrans.SalesPrice;
        projEmplTransSale.LineAmount = CurrencyExchangeHelper::amount(_projJournalTrans.Qty * _projJournalTrans.SalesPrice, _projJournalTrans.CurrencyId);
        return projEmplTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromRouteJournal</Name>
				<Source><![CDATA[
    public static ProjEmplTransSale initTransFromRouteJournal(
        ProdJournalRoute      _prodJournalRoute,
        ProdJournalRouteProj  _prodJournalRouteProj)
    {
        ProjEmplTransSale   projEmplTransSale;

        projEmplTransSale.SalesPrice = _prodJournalRouteProj.ProjSalesPrice;
        projEmplTransSale.LineAmount = CurrencyExchangeHelper::amount((_prodJournalRouteProj.TransType == ProdRouteTransType::Time ? _prodJournalRoute.Hours : _prodJournalRoute.QtyGood + _prodJournalRoute.QtyError) * _prodJournalRouteProj.ProjSalesPrice, _prodJournalRouteProj.ProjSalesCurrencyId);
        return projEmplTransSale;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS319683</DeveloperDocumentation>
	<Label>@SYS1151</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TransId</TitleField1>
	<TitleField2>LedgerTransdate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransIdFundingSourceIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerTransdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Estimate</Name>
			<Label>@SYS54063</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WIPPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlVersion</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ControlId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAIndirectRevenue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAIndirectInvoice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerSalesPosted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerSalesAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxAsPerOriginalInvoice_IN</Name>
			<Label>@GLS5576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjProposalId_IN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAsPerOriginalInvoice_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerTransdate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundingSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ControlId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ControlVersion</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjControlVersion</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FundingSource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LedgerSalesAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLedgerAccruedAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerSalesPosted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLedgerSalesPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LedgerTransdate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS113374</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjProposalId_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>ProjProposalId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAIndirectInvoice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAIndirectRevenue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPriceEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxAsPerOriginalInvoice_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS5576</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjEmplTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjTransStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>WIPPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPeriodFrom</ExtendedDataType>
			<Label>@SYS74643</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WIPType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjWIPType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdFundingSourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FundingSource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransStatus</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjEmplTransSale</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjFundingSource</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjFundingSource_ProjEmplTransSale</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FundingSource</Name>
					<Field>FundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjControl</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjControl</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjControl</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTransSale</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ControlId</Name>
					<SourceEDT>ProjControlId</SourceEDT>
					<Field>ControlId</Field>
					<RelatedField>ControlId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ControlIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjEmplTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjEmplTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjEmplTrans_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjEmplTransSale</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransId</Name>
					<SourceEDT>ProjEmplTransId</SourceEDT>
					<Field>TransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>