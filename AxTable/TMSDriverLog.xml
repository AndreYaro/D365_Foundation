<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSDriverLog</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSDriverLog extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apptCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display if appointment is completed.
    /// </summary>
    /// <returns>
    /// Yes if the appointment is completed, otherwise no.
    /// </returns>
    display NoYes apptCompleted()
    {
        return this.ActualEndUTCDateTime != utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>apptStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display if appointment is started.
    /// </summary>
    /// <returns>
    /// Yes if the appointment is started, otherwise no.
    /// </returns>
    display NoYes apptStarted()
    {
        return this.ActualStartUTCDateTime != utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTimeLeft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to display time left for the appointment.
    /// </summary>
    /// <returns>
    /// Time left for the appointment in hour/minute format.
    /// </returns>
    display TMSTimeLeft displayTimeLeft()
    {
        TMSTimeLeft     ret;

        if (this.ActualStartUTCDateTime != utcDateTimeNull())
        {
            TMSCurrentId    timeLeft    = this.timeLeft();
            boolean         isNegative  = timeLeft < 0;
            timeLeft                    = any2Int64(abs(timeLeft));
            int             hr          = any2Int(timeLeft div 60);
            int             mn          = int642int(timeLeft - (hr * 60));
            str             sign        = isNegative ? '-' : '';
            if (mn < 10)
            {
                ret = strFmt('%1%2:0%3', sign, hr, mn);
            }
            else
            {
                ret = strFmt('%1%2:%3', sign, hr, mn);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>driverAppointmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Driver appointment status for display.
    /// </summary>
    /// <returns>
    /// The appointment status.
    /// </returns>
    display TMSDriverApptStatus driverAppointmentStatus()
    {
        TMSDriverApptStatus ret;
        TMSAppointment      appt;
        TMSCurrentId        timeLeft;

        appt     = TMSAppointment::find(this.ApptId);
        timeLeft = this.timeLeft();

        switch (true)
        {
            // Completed - good
            case appt.ApptStatus == TMSApptStatus::Completed && (timeLeft >= 0):
                ret = TMSDriverApptStatus::Completed;
                break;

            // Completed - late
            case appt.ApptStatus == TMSApptStatus::Completed && timeLeft < 0:
                ret = TMSDriverApptStatus::CompletedLate;
                break;

            // Checked in - in interval
            case appt.ApptStatus == TMSApptStatus::CheckedIn && timeLeft <= TMSParameters::find().DriverCheckOutInterval && timeLeft >= 0:
                ret = TMSDriverApptStatus::LateWarning;
                break;

            // Checked in - late
            case appt.ApptStatus == TMSApptStatus::CheckedIn && timeLeft < 0:
                ret = TMSDriverApptStatus::CheckedInLate;
                break;

            // Checked in - dropped trailer
            case this.ApptDrop == NoYes::Yes:
                ret = TMSDriverApptStatus::InProgress;
                break;

            // Pending - not late
            case appt.ApptStatus != TMSApptStatus::CheckedIn && timeLeft > 0:
                ret = TMSDriverApptStatus::Pending;
                break;

            // Pending - late
            case appt.ApptStatus != TMSApptStatus::CheckedIn && timeLeft < 0:
                ret = TMSDriverApptStatus::PendingLate;
                break;

            // Checked in - good
            case appt.ApptStatus == TMSApptStatus::CheckedIn && timeLeft > 0:
                ret = TMSDriverApptStatus::CheckedIn;
                break;

            default:
                ret = TMSDriverApptStatus::PastDue;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>driverStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an appropriate text message based on driver appointment status to be displayed.
    /// </summary>
    /// <returns>
    /// A string message for the driver appointment status.
    /// </returns>

    public display str driverStatus()
    {
        container       imageContrainer = connull();
        str status;
        switch (this.driverAppointmentStatus())
        {
            // Completed - good
            case TMSDriverApptStatus::Completed:
                status="@SYS54623";
                break;

            // Completed - late
            case TMSDriverApptStatus::CompletedLate:
                status="@TRX:DriverStatusCompletedLate";
                break;

            // Checked in - dropped trailer
            case TMSDriverApptStatus::InProgress:
                status="@TRX:DriverStatusDroppedTrailer";
                break;

            // Pending - not late
            case TMSDriverApptStatus::Pending:
                status="@TRX:DriverStatusWaitingCheckIn";
                break;

            // Pending - late
            case TMSDriverApptStatus::PendingLate:
                status="@TRX:DriverStatusLateCheckIn";
                break;

            // Checked in - in interval
            case TMSDriverApptStatus::LateWarning:
                status="@TRX:DriverStatusWarning";
                break;

            // Checked in - good
            case TMSDriverApptStatus::CheckedIn:
                status="@TRX633";
                break;

            // Checked in - late
            case TMSDriverApptStatus::CheckedInLate:
                status="@TRX:DriverStatusLate";
                break;

            default:
                status="@TRX:DriverStatusError";
                break;
        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TMSDriverLog, ActualEndUTCDateTime), fieldNum(TMSDriverLog, ActualEndUTCDateTime):
                this.updateDates();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeLeft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the time left for the appointment of the driver.
    /// </summary>
    /// <returns>
    /// The time left for the appointment in minutes.
    /// </returns>
    display TMSCurrentId timeLeft()
    {
        utcdatetime         now;

        if (!this.ActualEndUTCDateTime)
        {
            now = DateTimeUtil::getSystemDateTime();
        }
        else
        {
            now = this.ActualEndUTCDateTime;
        }
        return any2Int64(DateTimeUtil::getDifference(this.tmsAppointment().ApptToUTCDateTime, now) / 60);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>TMSAppointment</c> record of the driver log.
    /// </summary>
    /// <returns>
    /// The <c>TMSAppointment</c> record of the log.
    /// </returns>
    TMSAppointment tmsAppointment()
    {
        return TMSAppointment::find(this.ApptId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TMSAppointment      appointment;

        ttsbegin;

        if (this.ActualEndUTCDateTime != utcDateTimeNull() && this.orig().ActualEndUTCDateTime != this.ActualEndUTCDateTime)
        {
            appointment = TMSAppointment::find(this.ApptId, true);
            appointment.ApptStatus = TMSApptStatus::Completed;
            appointment.write();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates ship confirm dates according to the date of driver checkout.
    /// </summary>
    void updateDates()
    {
        WHSLoadTable            loadTable;

        ttsbegin;

        switch (this.tmsAppointment().ApptRefType)
        {
            case TMSApptRefType::Load:
                loadTable = WHSLoadTable::find(this.tmsAppointment().ApptRefNum, true);
                loadTable.LoadShipConfirmUTCDateTime = this.ActualEndUTCDateTime;
                loadTable.update();
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if ((this.ActualStartUTCDateTime > this.ActualEndUTCDateTime) &&
            this.ActualEndUTCDateTime != utcDateTimeNull())
        {
            ret = checkFailed("@TRX207");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        TMSAppointment      appointment;

        super();

        if (this.ActualEndUTCDateTime != Global::utcDateTimeNull() && this.orig().ActualEndUTCDateTime != this.ActualEndUTCDateTime)
        {
            ttsbegin;
            appointment = TMSAppointment::find(this.ApptId, true);
            appointment.ApptStatus   = TMSApptStatus::Completed;
            appointment.write();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDriverLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new driver log for an appointment.
    /// </summary>
    /// <param name="_apptId">
    /// Id of the appointment.
    /// </param>
    static void createDriverLog(TMSApptId _apptId)
    {
        TMSDriverLog        driverLog;

        if (!TMSDriverLog::exist(_apptId))
        {
            ttsbegin;

            driverLog.ApptId = _apptId;
            if (!driverLog.validateWrite())
            {
                throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSDriverLog)));
            }
            else
            {
                driverLog.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>tmsDriverLog</c> record exists.
    /// </summary>
    /// <param name="_tmsApptId">
    /// Appontment id of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(TMSApptId _tmsApptId)
    {
        return (_tmsApptId) &&
               (select firstonly tmsDriverLog
                    where tmsDriverLog.ApptId == _tmsApptId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSDriverLog</c> record with given parameters.
    /// </summary>
    /// <param name="_tmsApptId">
    /// Appontment id of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSDriverLog find(TMSApptId _tmsApptId,
                                    boolean   _forupdate = false)
    {
        TMSDriverLog    tmsDriverLog;

        if (_tmsApptId)
        {
            tmsDriverLog.selectForUpdate(_forupdate);

            select firstonly tmsDriverLog
                where tmsDriverLog.ApptId == _tmsApptId;
        }

        return tmsDriverLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDriverCheckinEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether driver check in is enabled.
    /// </summary>
    /// <returns>
    /// True if Driver Check in is enabled, otherwise false.
    /// </returns>
    public boolean isDriverCheckinEnabled()
    {
        return !this.apptStarted()
               && this.tmsAppointment().isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDriverCheckoutEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether driver check out is enabled.
    /// </summary>
    /// <returns>
    /// True if Driver Check out is enabled, otherwise false.
    /// </returns>
    public boolean isDriverCheckoutEnabled()
    {
        return this.apptStarted()
               && !this.apptCompleted()
               && this.tmsAppointment().isActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editActualStartUTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the value of the <c>ActualStartUTCDateTime</c> field of the current record and
    /// applies proper conversions which are needed to have the time displayed and stored according to the site time zone.
    /// </summary>
    /// <param name = "_set">True if it is a setter; otherwise false</param>
    /// <param name = "_dateTime">The passed date time</param>
    /// <returns>The converted date time</returns>
    public edit TMSActualStartUTCDateTime editActualStartUTCDateTime(boolean _set, TMSActualStartUTCDateTime _dateTime)
    {
        TMSDateTimeConverter converter = TMSDateTimeConverterFactory::newConverterFromBuffer(this);

        return converter.editDateTime(this, fieldNum(TMSDriverLog, ActualStartUTCDateTime), _set, _dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editActualEndUTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the value of the <c>ActualEndUTCDateTime</c> field of the current record and
    /// applies proper conversions which are needed to have the time displayed and stored according to the site time zone.
    /// </summary>
    /// <param name = "_set">True if it is a setter; otherwise false</param>
    /// <param name = "_dateTime">The passed date time</param>
    /// <returns>The converted date time</returns>
    public edit TMSActualEndUTCDateTime editActualEndUTCDateTime(boolean _set, TMSActualEndUTCDateTime _dateTime)
    {
        TMSDateTimeConverter converter = TMSDateTimeConverterFactory::newConverterFromBuffer(this);

        return converter.editDateTime(this, fieldNum(TMSDriverLog, ActualEndUTCDateTime), _set, _dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1897</DeveloperDocumentation>
	<FormRef>TMSDriverLog</FormRef>
	<Label>@TRX127</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ApptId</TitleField1>
	<TitleField2>ActualStartUTCDateTime</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ApptIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>ApptIdx</PrimaryIndex>
	<ReplacementKey>ApptIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverLicense</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AppointmentAlert</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptDrop</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualEndUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualStartUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApptId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApptId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DriverLicense</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AppointmentAlert</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptDrop</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualEndUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActualStartUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualEndUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSActualEndUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActualStartUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSActualStartUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AppointmentAlert</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSAppointmentAlert</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApptDrop</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptDrop</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApptId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DriverLicense</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TMSDriverLicense</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DriverName</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TMSDriverName</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ApptIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ApptId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TMSAppointment</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSAppointment</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ApptId</Name>
					<SourceEDT>TMSApptId</SourceEDT>
					<Field>ApptId</Field>
					<RelatedField>ApptId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>