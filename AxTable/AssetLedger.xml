<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetLedger extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        boolean             isVirtual;
        DataArea            company;
        AssetLedger         originalAssetLedger;
        LedgerJournalTrans  ledgerJournalTrans;
        VirtualDataAreaList virtualCompanies;
        container           concreteCompanies;
        int                 concreteCompanyCount;
        CompanyId           outerCompany;
        int                 innerLoopCounter;
        CompanyId           innerCompany;

        // Capture the renamed record
        originalAssetLedger = this.orig();

        super();

        select firstonly company where company.Id == this.DataAreaId;
        isVirtual = company.IsVirtual;

        if (isVirtual)
        {
            // AssetLedger is in a virtual company

            // Capture the concrete companies that are part of the AssetLedger's virtual company
            while select Id from virtualCompanies
                where virtualCompanies.VirtualDataArea == this.DataAreaId
            {
                concreteCompanies += virtualCompanies.Id;
            }

            concreteCompanyCount = conlen(concreteCompanies);

            // Intercompany is enabled - need to loop over all concrete companies
            while select Id from company
                where company.IsVirtual == false
            {
                outerCompany = company.Id;

                // Update related records for each concrete company
                changecompany(outerCompany)
                {
                    // Reset the ledgerJournalTrans
                    ledgerJournalTrans = null;
                    ledgerJournalTrans.skipDataMethods(true);

                    // Loop over concrete companies in the virtual company
                    for (innerLoopCounter = 1; innerLoopCounter <= concreteCompanyCount; innerLoopCounter++)
                    {
                        innerCompany = conpeek(concreteCompanies, innerLoopCounter);

                        // Update records with this AssetLedger as primary account
                        update_recordset ledgerJournalTrans
                            setting PostingProfile = this.PostingProfile
                        where ledgerJournalTrans.Company == innerCompany &&
                            ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets &&
                            ledgerJournalTrans.PostingProfile == originalAssetLedger.PostingProfile;
                    }
                }
            }
        }
        else
        {
            // AssetLedgere that is being updated is not in a virtual company
            // If intercompany is enabled, must update the intercompany transactions for all other companies
            if (isConfigurationkeyEnabled(configurationkeynum(LedgerAdvIntercompanyAccounting)))
            {
                while select Id from company
                    where company.IsVirtual == false
                {
                    outerCompany = company.Id;

                    // Update related records for each concrete company
                    changecompany(outerCompany)
                    {
                        // Reset the ledgerJournalTrans
                        ledgerJournalTrans = null;
                        ledgerJournalTrans.skipDataMethods(true);

                        // Update records with this AssetLedger as primary account
                        update_recordset ledgerJournalTrans
                            setting PostingProfile = this.PostingProfile
                        where ledgerJournalTrans.Company == originalAssetLedger.DataAreaId &&
                            ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets &&
                            ledgerJournalTrans.PostingProfile == originalAssetLedger.PostingProfile;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(AssetPostingProfile  _assetPostingProfile)
    {
        boolean ret = true;

        if (!AssetLedger::exist(_assetPostingProfile))
        {
            ret = checkFailed(strfmt(AssetLedger::txtNotExist(), _assetPostingProfile));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(AssetPostingProfile  _assetPostingProfile)
    {
        boolean found;

        found = (select firstonly
                    RecId
                 from
                    assetLedger
                 where
                    assetLedger.PostingProfile == _assetPostingProfile).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static AssetLedger find(
        AssetPostingProfile _assetPostingProfile,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetLedger assetLedger;

        assetLedger.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetLedger.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetLedger
        where
            assetLedger.PostingProfile  == _assetPostingProfile;

        return assetLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPostingProfile</Name>
				<Source><![CDATA[
    public static void lookupPostingProfile(FormStringControl _stringControl, str _filterStr, CompanyId _company)
    {
        Args e;
        CompanyId company;
        FormRun formRun;

        company = _company;

        if (company == '')
        {
            company = curext();
        }

        changecompany(company)
        {
            e = new Args();
            e.name(formstr(AssetLedgerLookup));
            e.lookupField(fieldnum(AssetLedger, PostingProfile));
            e.lookupValue(_filterStr);
            e.caller(_stringControl);

            formRun = classfactory.formRunClass(e);
            formRun.init();

            _stringControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS68304";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@SYS127373</DeveloperDocumentation>
	<FormRef>AssetPosting</FormRef>
	<Label>@SYS67355</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>PostingProfile</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ProfileIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>ProfileIdx</PrimaryIndex>
	<ReplacementKey>ProfileIdx</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>AssetParameters</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>AssetParameters</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetLedgerAccounts</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetLedgerAccounts</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>AssetDisposalParameters</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>AssetDisposalParameters</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetPostingProfile</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProfileIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PostingProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>